import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest4 {

    public static boolean debug = false;

    @Test
    public void test2001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2001");
        java.util.GregorianCalendar gregorianCalendar5 = new java.util.GregorianCalendar(12, 4096, 7, (-1), (int) (short) 10);
        int int6 = gregorianCalendar5.getWeeksInWeekYear();
        java.lang.String str7 = gregorianCalendar5.getCalendarType();
        java.time.ZonedDateTime zonedDateTime8 = gregorianCalendar5.toZonedDateTime();
        java.time.ZonedDateTime zonedDateTime10 = zonedDateTime8.minusMonths((long) 10);
        java.time.ZonedDateTime zonedDateTime12 = zonedDateTime10.minusHours((long) 9);
        java.time.chrono.ChronoZonedDateTime<java.time.LocalDate> localDateChronoZonedDateTime13 = zonedDateTime10.withLaterOffsetAtOverlap();
        java.time.ZoneId zoneId14 = zonedDateTime10.getZone();
        java.time.Clock clock15 = java.time.Clock.system(zoneId14);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 52 + "'", int6 == 52);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "gregory" + "'", str7, "gregory");
        org.junit.Assert.assertNotNull(zonedDateTime8);
        org.junit.Assert.assertNotNull(zonedDateTime10);
        org.junit.Assert.assertNotNull(zonedDateTime12);
        org.junit.Assert.assertNotNull(localDateChronoZonedDateTime13);
        org.junit.Assert.assertNotNull(zoneId14);
        org.junit.Assert.assertNotNull(clock15);
    }

    @Test
    public void test2002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2002");
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalTime localTime6 = new org.joda.time.LocalTime((long) 0, chronology5);
        org.joda.time.Chronology chronology7 = localTime6.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.weekyearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime9 = org.joda.time.MutableDateTime.now(chronology7);
        org.joda.time.DateTimeField dateTimeField10 = chronology7.monthOfYear();
        java.util.Locale locale11 = java.util.Locale.getDefault();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket13 = new org.joda.time.format.DateTimeParserBucket((long) 28, chronology7, locale11, (java.lang.Integer) 0);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate(15, 0, (int) (short) -1, chronology7);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "en_US");
    }

    @Test
    public void test2003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2003");
        java.io.File file0 = null;
        java.io.File file2 = new java.io.File(file0, "1970-01-01T00:00:00.003Z");
        java.net.URL uRL3 = file2.toURL();
        boolean boolean6 = file2.setExecutable(true, false);
        long long7 = file2.getFreeSpace();
        boolean boolean8 = file2.isDirectory();
        org.junit.Assert.assertNull("file2.getParent() == null", file2.getParent());
        org.junit.Assert.assertEquals(file2.toString(), "1970-01-01T00:00:00.003Z");
        org.junit.Assert.assertNotNull(uRL3);
// flaky:         org.junit.Assert.assertEquals(uRL3.toString(), "file:/experiment/1970-01-01T00:00:00.003Z/");
// flaky:         org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
// flaky:         org.junit.Assert.assertTrue("'" + long7 + "' != '" + 299102343168L + "'", long7 == 299102343168L);
// flaky:         org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void test2004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2004");
        java.time.Instant instant0 = java.time.Instant.EPOCH;
        java.time.Instant instant1 = java.time.Instant.now();
        java.time.Instant instant2 = java.time.Instant.now();
        boolean boolean3 = instant1.isAfter(instant2);
        java.time.Duration duration4 = java.time.Duration.ZERO;
        java.time.Instant instant5 = instant2.minus((java.time.temporal.TemporalAmount) duration4);
        boolean boolean6 = instant0.isAfter(instant5);
        java.time.Instant instant7 = java.time.Instant.MIN;
        java.time.format.DateTimeFormatter dateTimeFormatter8 = java.time.format.DateTimeFormatter.ISO_DATE;
        java.lang.String str9 = dateTimeFormatter8.toString();
        java.time.LocalDateTime localDateTime10 = java.time.LocalDateTime.now();
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery11 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period12 = localDateTime10.query(periodTemporalQuery11);
        java.text.Format format13 = dateTimeFormatter8.toFormat(periodTemporalQuery11);
        java.time.chrono.Chronology chronology14 = dateTimeFormatter8.getChronology();
        java.time.format.DateTimeFormatter dateTimeFormatter15 = java.time.format.DateTimeFormatter.ISO_DATE;
        java.lang.String str16 = dateTimeFormatter15.toString();
        java.time.LocalDateTime localDateTime17 = java.time.LocalDateTime.now();
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery18 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period19 = localDateTime17.query(periodTemporalQuery18);
        java.text.Format format20 = dateTimeFormatter15.toFormat(periodTemporalQuery18);
        java.time.chrono.Chronology chronology21 = dateTimeFormatter15.getChronology();
        int int22 = chronology14.compareTo(chronology21);
        java.util.List<java.time.chrono.Era> eraList23 = chronology21.eras();
        java.time.ZoneOffset zoneOffset26 = java.time.ZoneOffset.ofHoursMinutes(1, 10);
        java.time.LocalDate localDate27 = java.time.LocalDate.now((java.time.ZoneId) zoneOffset26);
        java.time.Clock clock28 = java.time.Clock.system((java.time.ZoneId) zoneOffset26);
        java.time.ZoneOffset zoneOffset31 = java.time.ZoneOffset.ofHoursMinutes(1, 10);
        java.time.LocalDate localDate32 = java.time.LocalDate.now((java.time.ZoneId) zoneOffset31);
        java.time.Clock clock33 = java.time.Clock.system((java.time.ZoneId) zoneOffset31);
        int int34 = zoneOffset26.compareTo(zoneOffset31);
        java.time.chrono.ChronoLocalDate chronoLocalDate35 = chronology21.dateNow((java.time.ZoneId) zoneOffset31);
        java.time.chrono.IsoEra isoEra36 = java.time.chrono.IsoEra.CE;
        int int37 = isoEra36.getValue();
        int int38 = isoEra36.getValue();
        int int40 = chronology21.prolepticYear((java.time.chrono.Era) isoEra36, 0);
        java.time.LocalTime localTime45 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime46 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime45);
        java.time.temporal.ChronoField chronoField47 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime49 = localTime45.with((java.time.temporal.TemporalField) chronoField47, (long) (short) 1);
        java.util.Locale locale50 = java.util.Locale.GERMANY;
        java.lang.String str51 = chronoField47.getDisplayName(locale50);
        boolean boolean52 = isoEra36.isSupported((java.time.temporal.TemporalField) chronoField47);
        boolean boolean53 = instant7.isSupported((java.time.temporal.TemporalField) chronoField47);
        int int54 = instant0.compareTo(instant7);
        org.junit.Assert.assertNotNull(instant0);
        org.junit.Assert.assertNotNull(instant1);
        org.junit.Assert.assertNotNull(instant2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ParseCaseSensitive(false)(Value(Year,4,10,EXCEEDS_PAD)'-'Value(MonthOfYear,2)'-'Value(DayOfMonth,2))[Offset(+HH:MM:ss,'Z')]" + "'", str9, "ParseCaseSensitive(false)(Value(Year,4,10,EXCEEDS_PAD)'-'Value(MonthOfYear,2)'-'Value(DayOfMonth,2))[Offset(+HH:MM:ss,'Z')]");
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(periodTemporalQuery11);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(format13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeFormatter15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "ParseCaseSensitive(false)(Value(Year,4,10,EXCEEDS_PAD)'-'Value(MonthOfYear,2)'-'Value(DayOfMonth,2))[Offset(+HH:MM:ss,'Z')]" + "'", str16, "ParseCaseSensitive(false)(Value(Year,4,10,EXCEEDS_PAD)'-'Value(MonthOfYear,2)'-'Value(DayOfMonth,2))[Offset(+HH:MM:ss,'Z')]");
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(periodTemporalQuery18);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(format20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(eraList23);
        org.junit.Assert.assertNotNull(zoneOffset26);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(clock28);
        org.junit.Assert.assertNotNull(zoneOffset31);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(clock33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(chronoLocalDate35);
        org.junit.Assert.assertTrue("'" + isoEra36 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra36.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(localTime45);
        org.junit.Assert.assertNotNull(localTime46);
        org.junit.Assert.assertTrue("'" + chronoField47 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField47.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime49);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "NanoOfDay" + "'", str51, "NanoOfDay");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
    }

    @Test
    public void test2005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2005");
        int int0 = java.util.Calendar.WEEK_OF_YEAR;
        org.junit.Assert.assertTrue("'" + int0 + "' != '" + 3 + "'", int0 == 3);
    }

    @Test
    public void test2006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2006");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withYearOfCentury((int) 'a');
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.plusSeconds(6);
        org.joda.time.DateTime dateTime6 = localDateTime3.toDateTime();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime3.minusMillis((int) '/');
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minusMonths(100);
        java.util.Date date11 = localDateTime8.toDate();
        int int12 = localDateTime8.getDayOfYear();
        int int13 = localDateTime8.getWeekOfWeekyear();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(date11);
// flaky:         org.junit.Assert.assertEquals(date11.toString(), "Thu Feb 21 09:37:17 UTC 2097");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 8 + "'", int13 == 8);
    }

    @Test
    public void test2007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2007");
        java.util.OptionalInt optionalInt1 = java.util.OptionalInt.of(306);
        int int3 = optionalInt1.orElse(32770);
        org.junit.Assert.assertNotNull(optionalInt1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 306 + "'", int3 == 306);
    }

    @Test
    public void test2008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2008");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((long) 0, chronology2);
        org.joda.time.Chronology chronology4 = localTime3.getChronology();
        java.util.Locale locale5 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale6 = java.util.Locale.GERMANY;
        java.lang.String str7 = locale5.getDisplayScript(locale6);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket9 = new org.joda.time.format.DateTimeParserBucket((long) 1970, chronology4, locale5, (java.lang.Integer) 1);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.LocalTime localTime12 = new org.joda.time.LocalTime((long) 0, chronology11);
        org.joda.time.Chronology chronology13 = localTime12.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.weekyearOfCentury();
        org.joda.time.DurationField durationField15 = dateTimeField14.getLeapDurationField();
        dateTimeParserBucket9.saveField(dateTimeField14, (int) 'u');
        java.util.Locale locale19 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str20 = dateTimeField14.getAsShortText((int) 'u', locale19);
        long long22 = dateTimeField14.roundCeiling((long) (byte) 10);
        java.lang.String str23 = dateTimeField14.getName();
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNull(durationField15);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "117" + "'", str20, "117");
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 31536000000L + "'", long22 == 31536000000L);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "weekyearOfCentury" + "'", str23, "weekyearOfCentury");
    }

    @Test
    public void test2009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2009");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Duration duration2 = new org.joda.time.Duration(readableInstant0, readableInstant1);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = duration2.toPeriodTo(readableInstant3, periodType4);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.Duration duration8 = new org.joda.time.Duration(readableInstant6, readableInstant7);
        long long9 = duration8.getMillis();
        boolean boolean10 = duration2.isShorterThan((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) 3, chronology12);
        org.joda.time.DateTime.Property property14 = dateTime13.dayOfYear();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight((java.lang.Object) dateTime13, chronology15);
        org.joda.time.MutableDateTime mutableDateTime17 = dateTime13.toMutableDateTime();
        mutableDateTime17.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime17.dayOfWeek();
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime17.year();
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime17.weekyear();
        boolean boolean23 = duration2.equals((java.lang.Object) mutableDateTime17);
        mutableDateTime17.addMonths((int) ' ');
        mutableDateTime17.add((long) (byte) 10);
        org.joda.time.Period period28 = org.joda.time.Period.ZERO;
        org.joda.time.Period period29 = period28.normalizedStandard();
        org.joda.time.Period period31 = period28.plusHours(2);
        java.time.chrono.IsoEra isoEra32 = java.time.chrono.IsoEra.CE;
        boolean boolean33 = period31.equals((java.lang.Object) isoEra32);
        int int34 = period31.getMinutes();
        mutableDateTime17.add((org.joda.time.ReadablePeriod) period31);
        java.util.TimeZone timeZone37 = null;
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forTimeZone(timeZone37);
        org.joda.time.DateMidnight dateMidnight39 = new org.joda.time.DateMidnight((long) 1970, dateTimeZone38);
        long long42 = dateTimeZone38.convertLocalToUTC((long) 3, false);
        long long45 = dateTimeZone38.convertLocalToUTC(0L, true);
        mutableDateTime17.setZoneRetainFields(dateTimeZone38);
        java.lang.String str47 = dateTimeZone38.toString();
        org.joda.time.chrono.EthiopicChronology ethiopicChronology48 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone38);
        org.joda.time.DateTimeField dateTimeField49 = ethiopicChronology48.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone50 = ethiopicChronology48.getZone();
        org.joda.time.DateTimeField dateTimeField51 = ethiopicChronology48.era();
        org.joda.time.DateTimeField dateTimeField52 = ethiopicChronology48.secondOfDay();
        long long54 = dateTimeField52.remainder((long) 576);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertTrue("'" + isoEra32 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra32.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 3L + "'", long42 == 3L);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Etc/UTC" + "'", str47, "Etc/UTC");
        org.junit.Assert.assertNotNull(ethiopicChronology48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 576L + "'", long54 == 576L);
    }

    @Test
    public void test2010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2010");
        java.io.File file2 = java.io.File.createTempFile("PT3600S", "secondOfMinute");
        java.io.File file3 = file2.getCanonicalFile();
        java.io.File file4 = file3.getAbsoluteFile();
        java.util.Optional<java.lang.Exception> exceptionOptional5 = java.util.Optional.empty();
        java.lang.String str6 = exceptionOptional5.toString();
        java.time.LocalDateTime localDateTime7 = java.time.LocalDateTime.now();
        java.time.temporal.ChronoField chronoField8 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime10 = localDateTime7.with((java.time.temporal.TemporalField) chronoField8, (long) 10);
        java.time.LocalDateTime localDateTime12 = localDateTime7.withDayOfYear((int) '/');
        boolean boolean13 = exceptionOptional5.equals((java.lang.Object) localDateTime12);
        java.time.LocalDateTime localDateTime15 = localDateTime12.plusYears((long) 9);
        java.time.LocalDateTime localDateTime17 = localDateTime12.plusWeeks((long) 4096);
        boolean boolean18 = file3.equals((java.lang.Object) localDateTime17);
        org.junit.Assert.assertNotNull(file2);
        org.junit.Assert.assertEquals(file2.getParent(), "/tmp");
// flaky:         org.junit.Assert.assertEquals(file2.toString(), "/tmp/PT3600S3394320958966853449secondOfMinute");
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "/tmp");
// flaky:         org.junit.Assert.assertEquals(file3.toString(), "/tmp/PT3600S3394320958966853449secondOfMinute");
        org.junit.Assert.assertNotNull(file4);
        org.junit.Assert.assertEquals(file4.getParent(), "/tmp");
// flaky:         org.junit.Assert.assertEquals(file4.toString(), "/tmp/PT3600S3394320958966853449secondOfMinute");
        org.junit.Assert.assertNotNull(exceptionOptional5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Optional.empty" + "'", str6, "Optional.empty");
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertTrue("'" + chronoField8 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField8.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test2011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2011");
        java.time.OffsetDateTime offsetDateTime0 = java.time.OffsetDateTime.now();
        java.time.temporal.ChronoField chronoField1 = java.time.temporal.ChronoField.HOUR_OF_DAY;
        boolean boolean2 = offsetDateTime0.isSupported((java.time.temporal.TemporalField) chronoField1);
        java.time.OffsetDateTime offsetDateTime4 = offsetDateTime0.plusSeconds(180000L);
        int int5 = offsetDateTime4.getMonthValue();
        org.junit.Assert.assertNotNull(offsetDateTime0);
        org.junit.Assert.assertTrue("'" + chronoField1 + "' != '" + java.time.temporal.ChronoField.HOUR_OF_DAY + "'", chronoField1.equals(java.time.temporal.ChronoField.HOUR_OF_DAY));
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(offsetDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2 + "'", int5 == 2);
    }

    @Test
    public void test2012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2012");
        java.text.ParseException parseException2 = new java.text.ParseException("German (Germany)", (-201));
    }

    @Test
    public void test2013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2013");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 3, chronology1);
        int int3 = dateTime2.getYear();
        java.util.GregorianCalendar gregorianCalendar4 = dateTime2.toGregorianCalendar();
        // The following exception was thrown during execution in test generation
        try {
            int int6 = gregorianCalendar4.getMinimum((int) 'u');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 117");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(gregorianCalendar4);
    }

    @Test
    public void test2014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2014");
        double[] doubleArray4 = new double[] { (byte) 0, 59, 83400000000000L, '4' };
        java.util.stream.DoubleStream doubleStream5 = java.util.stream.DoubleStream.of(doubleArray4);
        java.nio.DoubleBuffer doubleBuffer6 = java.nio.DoubleBuffer.wrap(doubleArray4);
        double[] doubleArray11 = new double[] { (byte) 0, 59, 83400000000000L, '4' };
        java.util.stream.DoubleStream doubleStream12 = java.util.stream.DoubleStream.of(doubleArray11);
        java.nio.DoubleBuffer doubleBuffer13 = java.nio.DoubleBuffer.wrap(doubleArray11);
        java.nio.DoubleBuffer doubleBuffer14 = doubleBuffer6.put(doubleBuffer13);
        java.lang.String str15 = doubleBuffer14.toString();
        java.nio.DoubleBuffer doubleBuffer16 = doubleBuffer14.asReadOnlyBuffer();
        java.nio.ByteOrder byteOrder17 = doubleBuffer16.order();
        // The following exception was thrown during execution in test generation
        try {
            java.nio.DoubleBuffer doubleBuffer19 = doubleBuffer16.put((double) (-9223372036854775808L));
            org.junit.Assert.fail("Expected exception of type java.nio.ReadOnlyBufferException; message: null");
        } catch (java.nio.ReadOnlyBufferException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[0.0, 59.0, 8.34E13, 52.0]");
        org.junit.Assert.assertNotNull(doubleStream5);
        org.junit.Assert.assertNotNull(doubleBuffer6);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0, 59.0, 8.34E13, 52.0]");
        org.junit.Assert.assertNotNull(doubleStream12);
        org.junit.Assert.assertNotNull(doubleBuffer13);
        org.junit.Assert.assertNotNull(doubleBuffer14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "java.nio.HeapDoubleBuffer[pos=4 lim=4 cap=4]" + "'", str15, "java.nio.HeapDoubleBuffer[pos=4 lim=4 cap=4]");
        org.junit.Assert.assertNotNull(doubleBuffer16);
        org.junit.Assert.assertNotNull(byteOrder17);
    }

    @Test
    public void test2015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2015");
        java.nio.charset.Charset charset0 = java.nio.charset.Charset.defaultCharset();
        java.nio.charset.CharsetDecoder charsetDecoder1 = charset0.newDecoder();
        float float2 = charsetDecoder1.maxCharsPerByte();
        java.nio.charset.CodingErrorAction codingErrorAction3 = java.nio.charset.CodingErrorAction.IGNORE;
        java.nio.charset.CharsetDecoder charsetDecoder4 = charsetDecoder1.onMalformedInput(codingErrorAction3);
        float float5 = charsetDecoder1.maxCharsPerByte();
        java.nio.charset.Charset charset6 = charsetDecoder1.charset();
        java.nio.charset.Charset charset7 = java.nio.charset.Charset.defaultCharset();
        java.nio.charset.CharsetDecoder charsetDecoder8 = charset7.newDecoder();
        java.nio.charset.Charset charset9 = java.nio.charset.Charset.defaultCharset();
        boolean boolean10 = charset7.contains(charset9);
        java.nio.charset.CharsetEncoder charsetEncoder11 = charset7.newEncoder();
        byte[] byteArray12 = charsetEncoder11.replacement();
        java.nio.charset.Charset charset13 = java.nio.charset.Charset.defaultCharset();
        java.nio.charset.CharsetDecoder charsetDecoder14 = charset13.newDecoder();
        float float15 = charsetDecoder14.maxCharsPerByte();
        float float16 = charsetDecoder14.averageCharsPerByte();
        java.nio.charset.CodingErrorAction codingErrorAction17 = charsetDecoder14.unmappableCharacterAction();
        java.nio.charset.CharsetEncoder charsetEncoder18 = charsetEncoder11.onUnmappableCharacter(codingErrorAction17);
        java.nio.charset.Charset charset19 = java.nio.charset.Charset.defaultCharset();
        java.nio.charset.CharsetDecoder charsetDecoder20 = charset19.newDecoder();
        java.nio.charset.Charset charset21 = java.nio.charset.Charset.defaultCharset();
        boolean boolean22 = charset19.contains(charset21);
        java.nio.charset.CharsetEncoder charsetEncoder23 = charset19.newEncoder();
        char[] charArray24 = new char[] {};
        java.nio.CharBuffer charBuffer25 = java.nio.CharBuffer.wrap(charArray24);
        java.nio.ByteBuffer byteBuffer26 = charsetEncoder23.encode(charBuffer25);
        java.nio.CharBuffer charBuffer27 = charBuffer25.slice();
        java.nio.ByteBuffer byteBuffer28 = charsetEncoder18.encode(charBuffer27);
        java.nio.ByteBuffer byteBuffer29 = byteBuffer28.asReadOnlyBuffer();
        java.nio.CharBuffer charBuffer30 = charsetDecoder1.decode(byteBuffer28);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.charset.Charset charset31 = charsetDecoder1.detectedCharset();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charset0);
        org.junit.Assert.assertNotNull(charsetDecoder1);
        org.junit.Assert.assertTrue("'" + float2 + "' != '" + 1.0f + "'", float2 == 1.0f);
        org.junit.Assert.assertNotNull(codingErrorAction3);
        org.junit.Assert.assertNotNull(charsetDecoder4);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 1.0f + "'", float5 == 1.0f);
        org.junit.Assert.assertNotNull(charset6);
        org.junit.Assert.assertNotNull(charset7);
        org.junit.Assert.assertNotNull(charsetDecoder8);
        org.junit.Assert.assertNotNull(charset9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(charsetEncoder11);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[63]");
        org.junit.Assert.assertNotNull(charset13);
        org.junit.Assert.assertNotNull(charsetDecoder14);
        org.junit.Assert.assertTrue("'" + float15 + "' != '" + 1.0f + "'", float15 == 1.0f);
        org.junit.Assert.assertTrue("'" + float16 + "' != '" + 1.0f + "'", float16 == 1.0f);
        org.junit.Assert.assertNotNull(codingErrorAction17);
        org.junit.Assert.assertNotNull(charsetEncoder18);
        org.junit.Assert.assertNotNull(charset19);
        org.junit.Assert.assertNotNull(charsetDecoder20);
        org.junit.Assert.assertNotNull(charset21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(charsetEncoder23);
        org.junit.Assert.assertNotNull(charArray24);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray24), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray24), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray24), "[]");
        org.junit.Assert.assertNotNull(charBuffer25);
        org.junit.Assert.assertNotNull(byteBuffer26);
        org.junit.Assert.assertNotNull(charBuffer27);
        org.junit.Assert.assertNotNull(byteBuffer28);
        org.junit.Assert.assertNotNull(byteBuffer29);
        org.junit.Assert.assertNotNull(charBuffer30);
    }

    @Test
    public void test2016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2016");
        float[] floatArray2 = new float[] { (-1L), (byte) -1 };
        java.nio.FloatBuffer floatBuffer3 = java.nio.FloatBuffer.wrap(floatArray2);
        java.nio.FloatBuffer floatBuffer4 = floatBuffer3.compact();
        java.nio.FloatBuffer floatBuffer5 = floatBuffer3.asReadOnlyBuffer();
        java.nio.ByteOrder byteOrder6 = floatBuffer3.order();
        java.nio.Buffer buffer7 = floatBuffer3.mark();
        // The following exception was thrown during execution in test generation
        try {
            java.nio.Buffer buffer9 = buffer7.limit(3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[-1.0, -1.0]");
        org.junit.Assert.assertNotNull(floatBuffer3);
        org.junit.Assert.assertNotNull(floatBuffer4);
        org.junit.Assert.assertNotNull(floatBuffer5);
        org.junit.Assert.assertNotNull(byteOrder6);
        org.junit.Assert.assertNotNull(buffer7);
    }

    @Test
    public void test2017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2017");
        org.joda.time.Weeks weeks1 = org.joda.time.Weeks.weeks(23);
        org.junit.Assert.assertNotNull(weeks1);
    }

    @Test
    public void test2018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2018");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime(34, 3600000, 19043, 3601, 65, (int) (short) 100, 99);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 3601 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test2019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2019");
        java.time.LocalDate localDate0 = java.time.LocalDate.now();
        org.junit.Assert.assertNotNull(localDate0);
    }

    @Test
    public void test2020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2020");
        java.time.OffsetDateTime offsetDateTime0 = java.time.OffsetDateTime.now();
        java.time.LocalDate localDate2 = java.time.LocalDate.ofEpochDay((long) ' ');
        int int3 = localDate2.getMonthValue();
        org.joda.time.Period period4 = org.joda.time.Period.ZERO;
        org.joda.time.Period period5 = period4.normalizedStandard();
        org.joda.time.Period period7 = period4.plusHours(2);
        java.time.chrono.IsoEra isoEra8 = java.time.chrono.IsoEra.CE;
        boolean boolean9 = period7.equals((java.lang.Object) isoEra8);
        java.time.LocalTime localTime14 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime15 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime14);
        java.time.LocalTime localTime20 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime21 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime20);
        java.time.temporal.ChronoField chronoField22 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime24 = localTime20.with((java.time.temporal.TemporalField) chronoField22, (long) (short) 1);
        long long25 = localTime14.getLong((java.time.temporal.TemporalField) chronoField22);
        boolean boolean26 = isoEra8.isSupported((java.time.temporal.TemporalField) chronoField22);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery27 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period28 = isoEra8.query(periodTemporalQuery27);
        boolean boolean29 = period28.isNegative();
        java.time.Period period31 = period28.plusDays((long) ' ');
        java.time.temporal.ChronoField chronoField32 = java.time.temporal.ChronoField.SECOND_OF_DAY;
        boolean boolean33 = period28.equals((java.lang.Object) chronoField32);
        boolean boolean34 = localDate2.isSupported((java.time.temporal.TemporalField) chronoField32);
        boolean boolean35 = offsetDateTime0.isSupported((java.time.temporal.TemporalField) chronoField32);
        java.time.OffsetDateTime offsetDateTime37 = offsetDateTime0.minusMonths((long) 16);
        java.time.OffsetDateTime offsetDateTime39 = offsetDateTime0.withNano(306);
        java.time.OffsetTime offsetTime40 = java.time.OffsetTime.MAX;
        java.time.LocalTime localTime41 = offsetTime40.toLocalTime();
        java.lang.String str42 = offsetTime40.toString();
        java.time.Duration duration43 = java.time.Duration.ZERO;
        java.lang.String str44 = duration43.toString();
        java.time.OffsetTime offsetTime45 = offsetTime40.plus((java.time.temporal.TemporalAmount) duration43);
        java.time.OffsetTime offsetTime47 = offsetTime40.plusNanos((long) 0);
        java.time.LocalTime localTime52 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime53 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime52);
        java.time.temporal.ChronoField chronoField54 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime56 = localTime52.with((java.time.temporal.TemporalField) chronoField54, (long) (short) 1);
        java.util.Locale locale57 = java.util.Locale.GERMANY;
        java.lang.String str58 = chronoField54.getDisplayName(locale57);
        java.time.OffsetTime offsetTime60 = offsetTime47.with((java.time.temporal.TemporalField) chronoField54, (long) 28);
        org.joda.time.Period period61 = org.joda.time.Period.ZERO;
        org.joda.time.Period period62 = period61.normalizedStandard();
        org.joda.time.Period period64 = period61.plusHours(2);
        java.time.chrono.IsoEra isoEra65 = java.time.chrono.IsoEra.CE;
        boolean boolean66 = period64.equals((java.lang.Object) isoEra65);
        java.time.LocalTime localTime71 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime72 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime71);
        java.time.LocalTime localTime77 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime78 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime77);
        java.time.temporal.ChronoField chronoField79 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime81 = localTime77.with((java.time.temporal.TemporalField) chronoField79, (long) (short) 1);
        long long82 = localTime71.getLong((java.time.temporal.TemporalField) chronoField79);
        boolean boolean83 = isoEra65.isSupported((java.time.temporal.TemporalField) chronoField79);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery84 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period85 = isoEra65.query(periodTemporalQuery84);
        boolean boolean86 = period85.isNegative();
        java.time.Period period88 = period85.plusDays((long) ' ');
        java.time.temporal.ChronoField chronoField89 = java.time.temporal.ChronoField.SECOND_OF_DAY;
        boolean boolean90 = period85.equals((java.lang.Object) chronoField89);
        java.time.chrono.ChronoPeriod chronoPeriod91 = period85.negated();
        java.time.OffsetTime offsetTime92 = offsetTime47.minus((java.time.temporal.TemporalAmount) period85);
        java.time.Period period94 = period85.plusYears((long) 2022);
        java.time.Period period96 = period94.minusDays((long) (short) 100);
        java.time.Period period97 = java.time.Period.from((java.time.temporal.TemporalAmount) period96);
        java.time.temporal.Temporal temporal98 = offsetDateTime39.plus((java.time.temporal.TemporalAmount) period97);
        org.junit.Assert.assertNotNull(offsetDateTime0);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2 + "'", int3 == 2);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertTrue("'" + isoEra8 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra8.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertTrue("'" + chronoField22 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField22.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime24);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 3601000000001L + "'", long25 == 3601000000001L);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(periodTemporalQuery27);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertTrue("'" + chronoField32 + "' != '" + java.time.temporal.ChronoField.SECOND_OF_DAY + "'", chronoField32.equals(java.time.temporal.ChronoField.SECOND_OF_DAY));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(offsetDateTime37);
        org.junit.Assert.assertNotNull(offsetDateTime39);
        org.junit.Assert.assertNotNull(offsetTime40);
        org.junit.Assert.assertNotNull(localTime41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "23:59:59.999999999-18:00" + "'", str42, "23:59:59.999999999-18:00");
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "PT0S" + "'", str44, "PT0S");
        org.junit.Assert.assertNotNull(offsetTime45);
        org.junit.Assert.assertNotNull(offsetTime47);
        org.junit.Assert.assertNotNull(localTime52);
        org.junit.Assert.assertNotNull(localTime53);
        org.junit.Assert.assertTrue("'" + chronoField54 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField54.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime56);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "NanoOfDay" + "'", str58, "NanoOfDay");
        org.junit.Assert.assertNotNull(offsetTime60);
        org.junit.Assert.assertNotNull(period61);
        org.junit.Assert.assertNotNull(period62);
        org.junit.Assert.assertNotNull(period64);
        org.junit.Assert.assertTrue("'" + isoEra65 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra65.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(localTime71);
        org.junit.Assert.assertNotNull(localTime72);
        org.junit.Assert.assertNotNull(localTime77);
        org.junit.Assert.assertNotNull(localTime78);
        org.junit.Assert.assertTrue("'" + chronoField79 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField79.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime81);
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + 3601000000001L + "'", long82 == 3601000000001L);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(periodTemporalQuery84);
        org.junit.Assert.assertNotNull(period85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(period88);
        org.junit.Assert.assertTrue("'" + chronoField89 + "' != '" + java.time.temporal.ChronoField.SECOND_OF_DAY + "'", chronoField89.equals(java.time.temporal.ChronoField.SECOND_OF_DAY));
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(chronoPeriod91);
        org.junit.Assert.assertNotNull(offsetTime92);
        org.junit.Assert.assertNotNull(period94);
        org.junit.Assert.assertNotNull(period96);
        org.junit.Assert.assertNotNull(period97);
        org.junit.Assert.assertNotNull(temporal98);
    }

    @Test
    public void test2021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2021");
        java.time.LocalTime localTime0 = java.time.LocalTime.now();
        java.time.LocalDate localDate2 = java.time.LocalDate.ofEpochDay((long) ' ');
        java.time.OffsetTime offsetTime3 = java.time.OffsetTime.MAX;
        java.time.LocalTime localTime4 = offsetTime3.toLocalTime();
        java.lang.String str5 = offsetTime3.toString();
        java.time.Duration duration6 = java.time.Duration.ZERO;
        java.lang.String str7 = duration6.toString();
        java.time.OffsetTime offsetTime8 = offsetTime3.plus((java.time.temporal.TemporalAmount) duration6);
        java.time.LocalTime localTime9 = offsetTime3.toLocalTime();
        java.time.chrono.ChronoLocalDateTime<?> wildcardChronoLocalDateTime10 = localDate2.atTime(localTime9);
        java.time.LocalDate localDate12 = localDate2.minusWeeks((long) 2097);
        java.time.LocalDate localDate14 = localDate12.minusMonths((long) (byte) 0);
        java.time.ZoneOffset zoneOffset17 = java.time.ZoneOffset.ofHoursMinutes(1, 10);
        java.time.LocalDate localDate18 = java.time.LocalDate.now((java.time.ZoneId) zoneOffset17);
        java.time.LocalDate localDate19 = java.time.LocalDate.now((java.time.ZoneId) zoneOffset17);
        java.time.OffsetDateTime offsetDateTime21 = java.time.OffsetDateTime.now();
        java.time.LocalDate localDate23 = java.time.LocalDate.ofEpochDay((long) ' ');
        int int24 = localDate23.getMonthValue();
        org.joda.time.Period period25 = org.joda.time.Period.ZERO;
        org.joda.time.Period period26 = period25.normalizedStandard();
        org.joda.time.Period period28 = period25.plusHours(2);
        java.time.chrono.IsoEra isoEra29 = java.time.chrono.IsoEra.CE;
        boolean boolean30 = period28.equals((java.lang.Object) isoEra29);
        java.time.LocalTime localTime35 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime36 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime35);
        java.time.LocalTime localTime41 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime42 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime41);
        java.time.temporal.ChronoField chronoField43 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime45 = localTime41.with((java.time.temporal.TemporalField) chronoField43, (long) (short) 1);
        long long46 = localTime35.getLong((java.time.temporal.TemporalField) chronoField43);
        boolean boolean47 = isoEra29.isSupported((java.time.temporal.TemporalField) chronoField43);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery48 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period49 = isoEra29.query(periodTemporalQuery48);
        boolean boolean50 = period49.isNegative();
        java.time.Period period52 = period49.plusDays((long) ' ');
        java.time.temporal.ChronoField chronoField53 = java.time.temporal.ChronoField.SECOND_OF_DAY;
        boolean boolean54 = period49.equals((java.lang.Object) chronoField53);
        boolean boolean55 = localDate23.isSupported((java.time.temporal.TemporalField) chronoField53);
        java.time.temporal.TemporalUnit temporalUnit56 = chronoField53.getRangeUnit();
        java.time.OffsetDateTime offsetDateTime57 = offsetDateTime21.truncatedTo(temporalUnit56);
        java.time.LocalDate localDate60 = java.time.LocalDate.ofEpochDay((long) ' ');
        int int61 = localDate60.getMonthValue();
        org.joda.time.Period period62 = org.joda.time.Period.ZERO;
        org.joda.time.Period period63 = period62.normalizedStandard();
        org.joda.time.Period period65 = period62.plusHours(2);
        java.time.chrono.IsoEra isoEra66 = java.time.chrono.IsoEra.CE;
        boolean boolean67 = period65.equals((java.lang.Object) isoEra66);
        java.time.LocalTime localTime72 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime73 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime72);
        java.time.LocalTime localTime78 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime79 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime78);
        java.time.temporal.ChronoField chronoField80 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime82 = localTime78.with((java.time.temporal.TemporalField) chronoField80, (long) (short) 1);
        long long83 = localTime72.getLong((java.time.temporal.TemporalField) chronoField80);
        boolean boolean84 = isoEra66.isSupported((java.time.temporal.TemporalField) chronoField80);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery85 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period86 = isoEra66.query(periodTemporalQuery85);
        boolean boolean87 = period86.isNegative();
        java.time.Period period89 = period86.plusDays((long) ' ');
        java.time.temporal.ChronoField chronoField90 = java.time.temporal.ChronoField.SECOND_OF_DAY;
        boolean boolean91 = period86.equals((java.lang.Object) chronoField90);
        boolean boolean92 = localDate60.isSupported((java.time.temporal.TemporalField) chronoField90);
        java.time.temporal.TemporalUnit temporalUnit93 = chronoField90.getRangeUnit();
        java.time.OffsetDateTime offsetDateTime94 = offsetDateTime57.minus(8L, temporalUnit93);
        java.time.LocalDate localDate95 = localDate19.minus((long) '4', temporalUnit93);
        java.time.Duration duration96 = temporalUnit93.getDuration();
        boolean boolean97 = localDate12.isSupported(temporalUnit93);
        java.time.LocalTime localTime98 = localTime0.truncatedTo(temporalUnit93);
        org.junit.Assert.assertNotNull(localTime0);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(offsetTime3);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "23:59:59.999999999-18:00" + "'", str5, "23:59:59.999999999-18:00");
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "PT0S" + "'", str7, "PT0S");
        org.junit.Assert.assertNotNull(offsetTime8);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(wildcardChronoLocalDateTime10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(zoneOffset17);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(offsetDateTime21);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertTrue("'" + isoEra29 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra29.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(localTime35);
        org.junit.Assert.assertNotNull(localTime36);
        org.junit.Assert.assertNotNull(localTime41);
        org.junit.Assert.assertNotNull(localTime42);
        org.junit.Assert.assertTrue("'" + chronoField43 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField43.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime45);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 3601000000001L + "'", long46 == 3601000000001L);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(periodTemporalQuery48);
        org.junit.Assert.assertNotNull(period49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertTrue("'" + chronoField53 + "' != '" + java.time.temporal.ChronoField.SECOND_OF_DAY + "'", chronoField53.equals(java.time.temporal.ChronoField.SECOND_OF_DAY));
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + temporalUnit56 + "' != '" + java.time.temporal.ChronoUnit.DAYS + "'", temporalUnit56.equals(java.time.temporal.ChronoUnit.DAYS));
        org.junit.Assert.assertNotNull(offsetDateTime57);
        org.junit.Assert.assertNotNull(localDate60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 2 + "'", int61 == 2);
        org.junit.Assert.assertNotNull(period62);
        org.junit.Assert.assertNotNull(period63);
        org.junit.Assert.assertNotNull(period65);
        org.junit.Assert.assertTrue("'" + isoEra66 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra66.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(localTime72);
        org.junit.Assert.assertNotNull(localTime73);
        org.junit.Assert.assertNotNull(localTime78);
        org.junit.Assert.assertNotNull(localTime79);
        org.junit.Assert.assertTrue("'" + chronoField80 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField80.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime82);
        org.junit.Assert.assertTrue("'" + long83 + "' != '" + 3601000000001L + "'", long83 == 3601000000001L);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(periodTemporalQuery85);
        org.junit.Assert.assertNotNull(period86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(period89);
        org.junit.Assert.assertTrue("'" + chronoField90 + "' != '" + java.time.temporal.ChronoField.SECOND_OF_DAY + "'", chronoField90.equals(java.time.temporal.ChronoField.SECOND_OF_DAY));
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + temporalUnit93 + "' != '" + java.time.temporal.ChronoUnit.DAYS + "'", temporalUnit93.equals(java.time.temporal.ChronoUnit.DAYS));
        org.junit.Assert.assertNotNull(offsetDateTime94);
        org.junit.Assert.assertNotNull(localDate95);
        org.junit.Assert.assertNotNull(duration96);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + true + "'", boolean97 == true);
        org.junit.Assert.assertNotNull(localTime98);
    }

    @Test
    public void test2022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2022");
        java.nio.charset.Charset charset0 = java.nio.charset.Charset.defaultCharset();
        java.nio.charset.CharsetDecoder charsetDecoder1 = charset0.newDecoder();
        java.nio.charset.Charset charset2 = java.nio.charset.Charset.defaultCharset();
        boolean boolean3 = charset0.contains(charset2);
        java.nio.charset.CharsetEncoder charsetEncoder4 = charset0.newEncoder();
        byte[] byteArray5 = charsetEncoder4.replacement();
        java.nio.charset.Charset charset6 = java.nio.charset.Charset.defaultCharset();
        java.nio.charset.CharsetDecoder charsetDecoder7 = charset6.newDecoder();
        float float8 = charsetDecoder7.maxCharsPerByte();
        float float9 = charsetDecoder7.averageCharsPerByte();
        java.nio.charset.CodingErrorAction codingErrorAction10 = charsetDecoder7.unmappableCharacterAction();
        java.nio.charset.CharsetEncoder charsetEncoder11 = charsetEncoder4.onUnmappableCharacter(codingErrorAction10);
        java.nio.charset.Charset charset12 = java.nio.charset.Charset.defaultCharset();
        java.nio.charset.CharsetDecoder charsetDecoder13 = charset12.newDecoder();
        java.nio.charset.Charset charset14 = java.nio.charset.Charset.defaultCharset();
        boolean boolean15 = charset12.contains(charset14);
        java.nio.charset.CharsetEncoder charsetEncoder16 = charset12.newEncoder();
        char[] charArray17 = new char[] {};
        java.nio.CharBuffer charBuffer18 = java.nio.CharBuffer.wrap(charArray17);
        java.nio.ByteBuffer byteBuffer19 = charsetEncoder16.encode(charBuffer18);
        java.nio.CharBuffer charBuffer20 = charBuffer18.slice();
        java.nio.ByteBuffer byteBuffer21 = charsetEncoder11.encode(charBuffer20);
        java.io.OutputStream outputStream22 = null;
        java.io.FilterOutputStream filterOutputStream23 = new java.io.FilterOutputStream(outputStream22);
        byte[] byteArray25 = new byte[] { (byte) 100 };
        filterOutputStream23.write(byteArray25, (int) (byte) 0, (int) (byte) 0);
        boolean boolean29 = charsetEncoder11.isLegalReplacement(byteArray25);
        java.nio.charset.CodingErrorAction codingErrorAction30 = charsetEncoder11.unmappableCharacterAction();
        org.junit.Assert.assertNotNull(charset0);
        org.junit.Assert.assertNotNull(charsetDecoder1);
        org.junit.Assert.assertNotNull(charset2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(charsetEncoder4);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[63]");
        org.junit.Assert.assertNotNull(charset6);
        org.junit.Assert.assertNotNull(charsetDecoder7);
        org.junit.Assert.assertTrue("'" + float8 + "' != '" + 1.0f + "'", float8 == 1.0f);
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + 1.0f + "'", float9 == 1.0f);
        org.junit.Assert.assertNotNull(codingErrorAction10);
        org.junit.Assert.assertNotNull(charsetEncoder11);
        org.junit.Assert.assertNotNull(charset12);
        org.junit.Assert.assertNotNull(charsetDecoder13);
        org.junit.Assert.assertNotNull(charset14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(charsetEncoder16);
        org.junit.Assert.assertNotNull(charArray17);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray17), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray17), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray17), "[]");
        org.junit.Assert.assertNotNull(charBuffer18);
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertNotNull(charBuffer20);
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[100]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(codingErrorAction30);
    }

    @Test
    public void test2023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2023");
        org.joda.time.tz.Provider provider0 = org.joda.time.DateTimeZone.getProvider();
        java.util.Set<java.lang.String> strSet1 = provider0.getAvailableIDs();
        java.nio.charset.Charset charset2 = java.nio.charset.Charset.defaultCharset();
        java.nio.charset.CharsetDecoder charsetDecoder3 = charset2.newDecoder();
        java.nio.charset.Charset charset4 = java.nio.charset.Charset.defaultCharset();
        boolean boolean5 = charset2.contains(charset4);
        java.nio.charset.CharsetEncoder charsetEncoder6 = charset2.newEncoder();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean7 = strSet1.contains((java.lang.Object) charset2);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: java.lang.String cannot be cast to java.nio.charset.Charset");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(provider0);
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNotNull(charset2);
        org.junit.Assert.assertNotNull(charsetDecoder3);
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(charsetEncoder6);
    }

    @Test
    public void test2024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2024");
        java.io.File file0 = null;
        java.io.File file2 = new java.io.File(file0, "1970-01-01T00:00:00.003Z");
        java.net.URL uRL3 = file2.toURL();
        java.io.File file4 = null;
        java.io.File file6 = new java.io.File(file4, "1970-01-01T00:00:00.003Z");
        java.net.URL uRL7 = file6.toURL();
        boolean boolean8 = uRL3.sameFile(uRL7);
        java.lang.String str9 = uRL3.getPath();
        java.net.URLConnection uRLConnection10 = uRL3.openConnection();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) 3, chronology12);
        org.joda.time.DateTime.Property property14 = dateTime13.dayOfYear();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight((java.lang.Object) dateTime13, chronology15);
        org.joda.time.MutableDateTime mutableDateTime17 = dateTime13.toMutableDateTime();
        mutableDateTime17.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime17.dayOfWeek();
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime17.year();
        java.util.TimeZone timeZone22 = null;
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forTimeZone(timeZone22);
        mutableDateTime17.setZone(dateTimeZone23);
        org.joda.time.MutableDateTime.Property property25 = mutableDateTime17.minuteOfHour();
        org.joda.time.MutableDateTime mutableDateTime26 = property25.roundHalfCeiling();
        org.joda.time.MutableDateTime mutableDateTime27 = property25.roundHalfFloor();
        boolean boolean28 = uRL3.equals((java.lang.Object) property25);
        org.junit.Assert.assertNull("file2.getParent() == null", file2.getParent());
        org.junit.Assert.assertEquals(file2.toString(), "1970-01-01T00:00:00.003Z");
        org.junit.Assert.assertNotNull(uRL3);
// flaky:         org.junit.Assert.assertEquals(uRL3.toString(), "file:/experiment/1970-01-01T00:00:00.003Z/");
        org.junit.Assert.assertNull("file6.getParent() == null", file6.getParent());
        org.junit.Assert.assertEquals(file6.toString(), "1970-01-01T00:00:00.003Z");
        org.junit.Assert.assertNotNull(uRL7);
// flaky:         org.junit.Assert.assertEquals(uRL7.toString(), "file:/experiment/1970-01-01T00:00:00.003Z/");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "/experiment/1970-01-01T00:00:00.003Z/" + "'", str9, "/experiment/1970-01-01T00:00:00.003Z/");
        org.junit.Assert.assertNotNull(uRLConnection10);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(mutableDateTime26);
        org.junit.Assert.assertNotNull(mutableDateTime27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test2025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2025");
        // The following exception was thrown during execution in test generation
        try {
            java.net.InetAddress[] inetAddressArray1 = java.net.InetAddress.getAllByName("1970-02-01T00:00:00.000Z");
            org.junit.Assert.fail("Expected exception of type java.net.UnknownHostException; message: 1970-02-01T00:00:00.000Z: invalid IPv6 address");
        } catch (java.net.UnknownHostException e) {
            // Expected exception.
        }
    }

    @Test
    public void test2026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2026");
        org.joda.time.Period period0 = org.joda.time.Period.ZERO;
        org.joda.time.Period period1 = period0.normalizedStandard();
        org.joda.time.Period period3 = period0.plusHours(2);
        int int4 = period0.getDays();
        org.joda.time.Period period6 = period0.minusHours(32772);
        org.junit.Assert.assertNotNull(period0);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(period6);
    }

    @Test
    public void test2027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2027");
        java.time.format.DateTimeFormatter dateTimeFormatter0 = java.time.format.DateTimeFormatter.ISO_DATE;
        java.lang.String str1 = dateTimeFormatter0.toString();
        java.time.LocalDateTime localDateTime2 = java.time.LocalDateTime.now();
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery3 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period4 = localDateTime2.query(periodTemporalQuery3);
        java.text.Format format5 = dateTimeFormatter0.toFormat(periodTemporalQuery3);
        java.lang.String str6 = dateTimeFormatter0.toString();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "ParseCaseSensitive(false)(Value(Year,4,10,EXCEEDS_PAD)'-'Value(MonthOfYear,2)'-'Value(DayOfMonth,2))[Offset(+HH:MM:ss,'Z')]" + "'", str1, "ParseCaseSensitive(false)(Value(Year,4,10,EXCEEDS_PAD)'-'Value(MonthOfYear,2)'-'Value(DayOfMonth,2))[Offset(+HH:MM:ss,'Z')]");
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(periodTemporalQuery3);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(format5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "ParseCaseSensitive(false)(Value(Year,4,10,EXCEEDS_PAD)'-'Value(MonthOfYear,2)'-'Value(DayOfMonth,2))[Offset(+HH:MM:ss,'Z')]" + "'", str6, "ParseCaseSensitive(false)(Value(Year,4,10,EXCEEDS_PAD)'-'Value(MonthOfYear,2)'-'Value(DayOfMonth,2))[Offset(+HH:MM:ss,'Z')]");
    }

    @Test
    public void test2028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2028");
        java.net.InetAddress inetAddress0 = java.net.InetAddress.getLocalHost();
        boolean boolean1 = inetAddress0.isMCOrgLocal();
        float[] floatArray4 = new float[] { (-1L), (byte) -1 };
        java.nio.FloatBuffer floatBuffer5 = java.nio.FloatBuffer.wrap(floatArray4);
        boolean boolean6 = inetAddress0.equals((java.lang.Object) floatBuffer5);
        float[] floatArray9 = new float[] { (-1L), (byte) -1 };
        java.nio.FloatBuffer floatBuffer10 = java.nio.FloatBuffer.wrap(floatArray9);
        java.nio.FloatBuffer floatBuffer11 = floatBuffer10.compact();
        java.nio.FloatBuffer floatBuffer12 = floatBuffer10.asReadOnlyBuffer();
        java.nio.ByteOrder byteOrder13 = floatBuffer10.order();
        boolean boolean14 = floatBuffer5.equals((java.lang.Object) floatBuffer10);
        float[] floatArray17 = new float[] { (-1L), (byte) -1 };
        java.nio.FloatBuffer floatBuffer18 = java.nio.FloatBuffer.wrap(floatArray17);
        java.nio.FloatBuffer floatBuffer19 = floatBuffer18.compact();
        boolean boolean20 = floatBuffer19.isDirect();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) 3, chronology22);
        org.joda.time.DateTime.Property property24 = dateTime23.dayOfYear();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight((java.lang.Object) dateTime23, chronology25);
        org.joda.time.MutableDateTime mutableDateTime27 = dateTime23.toMutableDateTime();
        mutableDateTime27.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property30 = mutableDateTime27.dayOfWeek();
        int int31 = property30.get();
        boolean boolean32 = floatBuffer19.equals((java.lang.Object) int31);
        java.nio.FloatBuffer floatBuffer33 = floatBuffer5.put(floatBuffer19);
        // The following exception was thrown during execution in test generation
        try {
            float float35 = floatBuffer33.get(4200);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: 4200");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(inetAddress0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(floatArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray4), "[-1.0, -1.0]");
        org.junit.Assert.assertNotNull(floatBuffer5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(floatArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray9), "[-1.0, -1.0]");
        org.junit.Assert.assertNotNull(floatBuffer10);
        org.junit.Assert.assertNotNull(floatBuffer11);
        org.junit.Assert.assertNotNull(floatBuffer12);
        org.junit.Assert.assertNotNull(byteOrder13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(floatArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray17), "[-1.0, -1.0]");
        org.junit.Assert.assertNotNull(floatBuffer18);
        org.junit.Assert.assertNotNull(floatBuffer19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(mutableDateTime27);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 3 + "'", int31 == 3);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(floatBuffer33);
    }

    @Test
    public void test2029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2029");
        java.lang.String str0 = java.io.File.separator;
        org.junit.Assert.assertEquals("'" + str0 + "' != '" + "/" + "'", str0, "/");
    }

    @Test
    public void test2030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2030");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Duration duration2 = new org.joda.time.Duration(readableInstant0, readableInstant1);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = duration2.toPeriodTo(readableInstant3, periodType4);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.Duration duration8 = new org.joda.time.Duration(readableInstant6, readableInstant7);
        long long9 = duration8.getMillis();
        boolean boolean10 = duration2.isShorterThan((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) 3, chronology12);
        org.joda.time.DateTime.Property property14 = dateTime13.dayOfYear();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight((java.lang.Object) dateTime13, chronology15);
        org.joda.time.MutableDateTime mutableDateTime17 = dateTime13.toMutableDateTime();
        mutableDateTime17.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime17.dayOfWeek();
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime17.year();
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime17.weekyear();
        boolean boolean23 = duration2.equals((java.lang.Object) mutableDateTime17);
        mutableDateTime17.addMonths((int) ' ');
        mutableDateTime17.add((long) (byte) 10);
        org.joda.time.Period period28 = org.joda.time.Period.ZERO;
        org.joda.time.Period period29 = period28.normalizedStandard();
        org.joda.time.Period period31 = period28.plusHours(2);
        java.time.chrono.IsoEra isoEra32 = java.time.chrono.IsoEra.CE;
        boolean boolean33 = period31.equals((java.lang.Object) isoEra32);
        int int34 = period31.getMinutes();
        mutableDateTime17.add((org.joda.time.ReadablePeriod) period31);
        java.util.TimeZone timeZone37 = null;
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forTimeZone(timeZone37);
        org.joda.time.DateMidnight dateMidnight39 = new org.joda.time.DateMidnight((long) 1970, dateTimeZone38);
        long long42 = dateTimeZone38.convertLocalToUTC((long) 3, false);
        long long45 = dateTimeZone38.convertLocalToUTC(0L, true);
        mutableDateTime17.setZoneRetainFields(dateTimeZone38);
        java.lang.String str47 = dateTimeZone38.toString();
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime((long) 3, chronology49);
        org.joda.time.DateTime.Property property51 = dateTime50.dayOfYear();
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.DateMidnight dateMidnight53 = new org.joda.time.DateMidnight((java.lang.Object) dateTime50, chronology52);
        org.joda.time.MutableDateTime mutableDateTime54 = dateTime50.toMutableDateTime();
        mutableDateTime54.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property57 = mutableDateTime54.dayOfWeek();
        org.joda.time.MutableDateTime.Property property58 = mutableDateTime54.year();
        java.util.TimeZone timeZone59 = null;
        org.joda.time.DateTimeZone dateTimeZone60 = org.joda.time.DateTimeZone.forTimeZone(timeZone59);
        mutableDateTime54.setZone(dateTimeZone60);
        java.util.Locale locale63 = java.util.Locale.TAIWAN;
        java.lang.String str64 = dateTimeZone60.getShortName((long) 64, locale63);
        long long66 = dateTimeZone38.getMillisKeepLocal(dateTimeZone60, (long) 7);
        java.time.LocalTime localTime72 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime73 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime72);
        java.time.temporal.ChronoField chronoField74 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime76 = localTime72.with((java.time.temporal.TemporalField) chronoField74, (long) (short) 1);
        java.util.Locale locale77 = java.util.Locale.GERMANY;
        java.lang.String str78 = chronoField74.getDisplayName(locale77);
        java.lang.String str79 = dateTimeZone60.getShortName((long) 306, locale77);
        java.time.format.DecimalStyle decimalStyle80 = java.time.format.DecimalStyle.of(locale77);
        java.time.format.DecimalStyle decimalStyle82 = decimalStyle80.withNegativeSign('4');
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertTrue("'" + isoEra32 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra32.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 3L + "'", long42 == 3L);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Etc/UTC" + "'", str47, "Etc/UTC");
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(mutableDateTime54);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(dateTimeZone60);
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "+00:00" + "'", str64, "+00:00");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 7L + "'", long66 == 7L);
        org.junit.Assert.assertNotNull(localTime72);
        org.junit.Assert.assertNotNull(localTime73);
        org.junit.Assert.assertTrue("'" + chronoField74 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField74.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime76);
        org.junit.Assert.assertNotNull(locale77);
        org.junit.Assert.assertEquals(locale77.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "NanoOfDay" + "'", str78, "NanoOfDay");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "+00:00" + "'", str79, "+00:00");
        org.junit.Assert.assertNotNull(decimalStyle80);
        org.junit.Assert.assertNotNull(decimalStyle82);
    }

    @Test
    public void test2031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2031");
        java.nio.charset.Charset charset0 = java.nio.charset.Charset.defaultCharset();
        java.nio.charset.CharsetDecoder charsetDecoder1 = charset0.newDecoder();
        float float2 = charsetDecoder1.maxCharsPerByte();
        java.nio.charset.Charset charset3 = java.nio.charset.Charset.defaultCharset();
        java.nio.charset.CharsetDecoder charsetDecoder4 = charset3.newDecoder();
        java.nio.charset.Charset charset5 = java.nio.charset.Charset.defaultCharset();
        boolean boolean6 = charset3.contains(charset5);
        java.nio.charset.CharsetEncoder charsetEncoder7 = charset3.newEncoder();
        char[] charArray8 = new char[] {};
        java.nio.CharBuffer charBuffer9 = java.nio.CharBuffer.wrap(charArray8);
        java.nio.ByteBuffer byteBuffer10 = charsetEncoder7.encode(charBuffer9);
        char[] charArray17 = new char[] { '#', '/', '4', 'a', '4', 'u' };
        java.nio.CharBuffer charBuffer18 = java.nio.CharBuffer.wrap(charArray17);
        java.nio.charset.CoderResult coderResult20 = charsetDecoder1.decode(byteBuffer10, charBuffer18, false);
        boolean boolean21 = charBuffer18.isDirect();
        char[] charArray22 = charBuffer18.array();
        java.nio.charset.Charset charset23 = java.nio.charset.Charset.defaultCharset();
        java.nio.charset.CharsetDecoder charsetDecoder24 = charset23.newDecoder();
        java.nio.charset.Charset charset25 = java.nio.charset.Charset.defaultCharset();
        boolean boolean26 = charset23.contains(charset25);
        java.nio.charset.CharsetEncoder charsetEncoder27 = charset23.newEncoder();
        char[] charArray28 = new char[] {};
        java.nio.CharBuffer charBuffer29 = java.nio.CharBuffer.wrap(charArray28);
        java.nio.ByteBuffer byteBuffer30 = charsetEncoder27.encode(charBuffer29);
        java.nio.CharBuffer charBuffer31 = charBuffer29.slice();
        java.nio.CharBuffer charBuffer32 = charBuffer29.compact();
        int int33 = charBuffer18.compareTo(charBuffer32);
        int int34 = charBuffer18.arrayOffset();
        java.io.OutputStream outputStream35 = null;
        java.io.FilterOutputStream filterOutputStream36 = new java.io.FilterOutputStream(outputStream35);
        java.io.PrintStream printStream38 = new java.io.PrintStream((java.io.OutputStream) filterOutputStream36, false);
        char[] charArray39 = new char[] {};
        java.nio.CharBuffer charBuffer40 = java.nio.CharBuffer.wrap(charArray39);
        printStream38.print(charArray39);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.CharBuffer charBuffer44 = charBuffer18.put(charArray39, (int) '4', 86);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charset0);
        org.junit.Assert.assertNotNull(charsetDecoder1);
        org.junit.Assert.assertTrue("'" + float2 + "' != '" + 1.0f + "'", float2 == 1.0f);
        org.junit.Assert.assertNotNull(charset3);
        org.junit.Assert.assertNotNull(charsetDecoder4);
        org.junit.Assert.assertNotNull(charset5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(charsetEncoder7);
        org.junit.Assert.assertNotNull(charArray8);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray8), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray8), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray8), "[]");
        org.junit.Assert.assertNotNull(charBuffer9);
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertNotNull(charArray17);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray17), "#/4a4u");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray17), "#/4a4u");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray17), "[#, /, 4, a, 4, u]");
        org.junit.Assert.assertNotNull(charBuffer18);
        org.junit.Assert.assertNotNull(coderResult20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(charArray22);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray22), "#/4a4u");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray22), "#/4a4u");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray22), "[#, /, 4, a, 4, u]");
        org.junit.Assert.assertNotNull(charset23);
        org.junit.Assert.assertNotNull(charsetDecoder24);
        org.junit.Assert.assertNotNull(charset25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(charsetEncoder27);
        org.junit.Assert.assertNotNull(charArray28);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray28), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray28), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray28), "[]");
        org.junit.Assert.assertNotNull(charBuffer29);
        org.junit.Assert.assertNotNull(byteBuffer30);
        org.junit.Assert.assertNotNull(charBuffer31);
        org.junit.Assert.assertNotNull(charBuffer32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 6 + "'", int33 == 6);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(charArray39);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray39), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray39), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray39), "[]");
        org.junit.Assert.assertNotNull(charBuffer40);
    }

    @Test
    public void test2032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2032");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 3, chronology1);
        org.joda.time.DateTime.Property property3 = dateTime2.dayOfYear();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight((java.lang.Object) dateTime2, chronology4);
        org.joda.time.MutableDateTime mutableDateTime6 = dateTime2.toMutableDateTime();
        mutableDateTime6.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime6.millisOfDay();
        org.joda.time.PeriodType periodType10 = org.joda.time.PeriodType.years();
        org.joda.time.DurationFieldType durationFieldType11 = org.joda.time.DurationFieldType.halfdays();
        int int12 = periodType10.indexOf(durationFieldType11);
        mutableDateTime6.add(durationFieldType11, (int) 'a');
        java.util.TimeZone timeZone16 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight((long) 1970, dateTimeZone17);
        mutableDateTime6.setTime((org.joda.time.ReadableInstant) dateMidnight18);
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.Duration duration22 = new org.joda.time.Duration(readableInstant20, readableInstant21);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.PeriodType periodType24 = null;
        org.joda.time.Period period25 = duration22.toPeriodTo(readableInstant23, periodType24);
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.Duration duration28 = new org.joda.time.Duration(readableInstant26, readableInstant27);
        long long29 = duration28.getMillis();
        boolean boolean30 = duration22.isShorterThan((org.joda.time.ReadableDuration) duration28);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((long) 3, chronology32);
        org.joda.time.DateTime.Property property34 = dateTime33.dayOfYear();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.DateMidnight dateMidnight36 = new org.joda.time.DateMidnight((java.lang.Object) dateTime33, chronology35);
        org.joda.time.MutableDateTime mutableDateTime37 = dateTime33.toMutableDateTime();
        mutableDateTime37.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property40 = mutableDateTime37.dayOfWeek();
        org.joda.time.MutableDateTime.Property property41 = mutableDateTime37.year();
        org.joda.time.MutableDateTime.Property property42 = mutableDateTime37.weekyear();
        boolean boolean43 = duration22.equals((java.lang.Object) mutableDateTime37);
        mutableDateTime37.addMonths((int) ' ');
        mutableDateTime37.add((long) (byte) 10);
        org.joda.time.Period period48 = org.joda.time.Period.ZERO;
        org.joda.time.Period period49 = period48.normalizedStandard();
        org.joda.time.Period period51 = period48.plusHours(2);
        java.time.chrono.IsoEra isoEra52 = java.time.chrono.IsoEra.CE;
        boolean boolean53 = period51.equals((java.lang.Object) isoEra52);
        int int54 = period51.getMinutes();
        mutableDateTime37.add((org.joda.time.ReadablePeriod) period51);
        java.util.TimeZone timeZone57 = null;
        org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeZone.forTimeZone(timeZone57);
        org.joda.time.DateMidnight dateMidnight59 = new org.joda.time.DateMidnight((long) 1970, dateTimeZone58);
        long long62 = dateTimeZone58.convertLocalToUTC((long) 3, false);
        long long65 = dateTimeZone58.convertLocalToUTC(0L, true);
        mutableDateTime37.setZoneRetainFields(dateTimeZone58);
        java.lang.String str67 = dateTimeZone58.toString();
        org.joda.time.chrono.EthiopicChronology ethiopicChronology68 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone58);
        org.joda.time.DateTimeField dateTimeField69 = ethiopicChronology68.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone70 = ethiopicChronology68.getZone();
        org.joda.time.DateTimeField dateTimeField71 = ethiopicChronology68.era();
        org.joda.time.DateTimeField dateTimeField72 = ethiopicChronology68.secondOfDay();
        org.joda.time.DateTimeField dateTimeField73 = ethiopicChronology68.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField74 = ethiopicChronology68.halfdayOfDay();
        org.joda.time.DurationField durationField75 = ethiopicChronology68.weekyears();
        org.joda.time.DateTimeField dateTimeField76 = ethiopicChronology68.hourOfHalfday();
        boolean boolean77 = dateMidnight18.equals((java.lang.Object) dateTimeField76);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertNotNull(durationFieldType11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(mutableDateTime37);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertNotNull(period49);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertTrue("'" + isoEra52 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra52.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone58);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 3L + "'", long62 == 3L);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 0L + "'", long65 == 0L);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "Etc/UTC" + "'", str67, "Etc/UTC");
        org.junit.Assert.assertNotNull(ethiopicChronology68);
        org.junit.Assert.assertNotNull(dateTimeField69);
        org.junit.Assert.assertNotNull(dateTimeZone70);
        org.junit.Assert.assertNotNull(dateTimeField71);
        org.junit.Assert.assertNotNull(dateTimeField72);
        org.junit.Assert.assertNotNull(dateTimeField73);
        org.junit.Assert.assertNotNull(dateTimeField74);
        org.junit.Assert.assertNotNull(durationField75);
        org.junit.Assert.assertNotNull(dateTimeField76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
    }

    @Test
    public void test2033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2033");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.now();
        java.time.LocalTime localTime1 = localDateTime0.toLocalTime();
        java.time.LocalDateTime localDateTime3 = localDateTime0.withDayOfMonth(10);
        java.time.LocalDateTime localDateTime5 = localDateTime3.minusWeeks((long) (short) 10);
        int int6 = localDateTime5.getDayOfMonth();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localTime1);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2 + "'", int6 == 2);
    }

    @Test
    public void test2034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2034");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.lang.String str1 = subject0.toString();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        boolean boolean4 = subject0.equals((java.lang.Object) "Wochentag");
        boolean boolean5 = subject0.isReadOnly();
        java.util.Set<java.lang.Object> objSet6 = subject0.getPublicCredentials();
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Subject:\n" + "'", str1, "Subject:\n");
        org.junit.Assert.assertNotNull(principalSet2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(objSet6);
    }

    @Test
    public void test2035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2035");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 3, chronology1);
        org.joda.time.DateTime.Property property3 = dateTime2.dayOfYear();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight((java.lang.Object) dateTime2, chronology4);
        org.joda.time.MutableDateTime mutableDateTime6 = dateTime2.toMutableDateTime();
        org.joda.time.Days days7 = org.joda.time.Days.ONE;
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadablePeriod) days7);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) 3, chronology10);
        org.joda.time.DateTime.Property property12 = dateTime11.dayOfYear();
        org.joda.time.Interval interval13 = property12.toInterval();
        mutableInterval8.setInterval((org.joda.time.ReadableInterval) interval13);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) 3, chronology16);
        org.joda.time.DateTime.Property property18 = dateTime17.dayOfYear();
        org.joda.time.Interval interval19 = property18.toInterval();
        org.joda.time.DateTimeField dateTimeField20 = property18.getField();
        org.joda.time.DateTime dateTime22 = property18.addToCopy((long) (byte) 1);
        org.joda.time.DateTime dateTime24 = dateTime22.withYear(4);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((long) 3, chronology26);
        org.joda.time.Period period28 = org.joda.time.Period.ZERO;
        org.joda.time.Period period29 = period28.normalizedStandard();
        org.joda.time.Period period31 = period29.minusMinutes((int) ' ');
        org.joda.time.Period period33 = period31.minusMonths((int) (byte) 0);
        org.joda.time.PeriodType periodType34 = period33.getPeriodType();
        org.joda.time.DateTime dateTime35 = dateTime27.minus((org.joda.time.ReadablePeriod) period33);
        org.joda.time.Duration duration36 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime24, (org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.DateTime dateTime38 = dateTime24.withMillisOfSecond((int) (byte) 10);
        org.joda.time.LocalTime localTime39 = dateTime38.toLocalTime();
        // The following exception was thrown during execution in test generation
        try {
            mutableInterval8.setEnd((org.joda.time.ReadableInstant) dateTime38);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(days7);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(periodType34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(localTime39);
    }

    @Test
    public void test2036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2036");
        java.time.format.DateTimeFormatter dateTimeFormatter0 = java.time.format.DateTimeFormatter.ISO_DATE;
        java.text.Format format1 = dateTimeFormatter0.toFormat();
        java.text.Format format2 = dateTimeFormatter0.toFormat();
        java.time.ZoneId zoneId3 = null;
        java.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter0.withZone(zoneId3);
        java.text.Format format5 = dateTimeFormatter0.toFormat();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj7 = format5.parseObject("Etc/UTC");
            org.junit.Assert.fail("Expected exception of type java.text.ParseException; message: Text 'Etc/UTC' could not be parsed at index 0");
        } catch (java.text.ParseException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(format1);
        org.junit.Assert.assertNotNull(format2);
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(format5);
    }

    @Test
    public void test2037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2037");
        java.io.File file0 = null;
        java.io.File file2 = new java.io.File(file0, "1970-01-01T00:00:00.003Z");
        java.net.URL uRL3 = file2.toURL();
        boolean boolean4 = file2.canRead();
        java.nio.file.Path path5 = file2.toPath();
        java.nio.file.Path path6 = path5.toAbsolutePath();
        java.io.File file7 = path6.toFile();
        java.nio.file.WatchService watchService8 = null;
        java.nio.file.WatchEvent.Kind<?> wildcardKind9 = null;
        java.nio.file.WatchEvent.Kind[] kindArray11 = new java.nio.file.WatchEvent.Kind[1];
        @SuppressWarnings("unchecked")
        java.nio.file.WatchEvent.Kind<?>[] wildcardKindArray12 = (java.nio.file.WatchEvent.Kind<?>[]) kindArray11;
        wildcardKindArray12[0] = wildcardKind9;
        // The following exception was thrown during execution in test generation
        try {
            java.nio.file.WatchKey watchKey15 = path6.register(watchService8, wildcardKindArray12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull("file2.getParent() == null", file2.getParent());
        org.junit.Assert.assertEquals(file2.toString(), "1970-01-01T00:00:00.003Z");
        org.junit.Assert.assertNotNull(uRL3);
// flaky:         org.junit.Assert.assertEquals(uRL3.toString(), "file:/experiment/1970-01-01T00:00:00.003Z/");
// flaky:         org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(path5);
        org.junit.Assert.assertNotNull(path6);
        org.junit.Assert.assertNotNull(file7);
// flaky:         org.junit.Assert.assertEquals(file7.getParent(), "/experiment");
// flaky:         org.junit.Assert.assertEquals(file7.toString(), "/experiment/1970-01-01T00:00:00.003Z");
        org.junit.Assert.assertNotNull(kindArray11);
        org.junit.Assert.assertNotNull(wildcardKindArray12);
    }

    @Test
    public void test2038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2038");
        java.util.Set<java.lang.String> strSet0 = java.time.ZoneId.getAvailableZoneIds();
        java.util.stream.Stream<java.lang.String> strStream1 = strSet0.parallelStream();
        boolean boolean3 = strSet0.remove((java.lang.Object) 0);
        java.time.LocalTime localTime8 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime9 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime8);
        java.time.LocalTime localTime14 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime15 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime14);
        java.time.temporal.ChronoField chronoField16 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime18 = localTime14.with((java.time.temporal.TemporalField) chronoField16, (long) (short) 1);
        long long19 = localTime8.getLong((java.time.temporal.TemporalField) chronoField16);
        java.time.LocalTime localTime21 = localTime8.withSecond((int) (short) 1);
        java.time.temporal.ChronoField chronoField22 = java.time.temporal.ChronoField.SECOND_OF_DAY;
        java.time.temporal.ValueRange valueRange23 = localTime21.range((java.time.temporal.TemporalField) chronoField22);
        boolean boolean24 = strSet0.remove((java.lang.Object) chronoField22);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((long) 3, chronology26);
        org.joda.time.DateTime.Property property28 = dateTime27.dayOfYear();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.DateMidnight dateMidnight30 = new org.joda.time.DateMidnight((java.lang.Object) dateTime27, chronology29);
        org.joda.time.MutableDateTime mutableDateTime31 = dateTime27.toMutableDateTime();
        org.joda.time.Days days32 = org.joda.time.Days.ONE;
        org.joda.time.MutableInterval mutableInterval33 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime27, (org.joda.time.ReadablePeriod) days32);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((long) 3, chronology35);
        org.joda.time.DateTime.Property property37 = dateTime36.dayOfYear();
        org.joda.time.Interval interval38 = property37.toInterval();
        mutableInterval33.setInterval((org.joda.time.ReadableInterval) interval38);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime((long) 3, chronology41);
        org.joda.time.DateTime.Property property43 = dateTime42.dayOfYear();
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.DateMidnight dateMidnight45 = new org.joda.time.DateMidnight((java.lang.Object) dateTime42, chronology44);
        org.joda.time.DateMidnight.Property property46 = dateMidnight45.dayOfMonth();
        org.joda.time.ReadableInstant readableInstant47 = null;
        org.joda.time.ReadableInstant readableInstant48 = null;
        org.joda.time.Duration duration49 = new org.joda.time.Duration(readableInstant47, readableInstant48);
        org.joda.time.Duration duration51 = duration49.withMillis((-1L));
        org.joda.time.ReadableDuration readableDuration52 = null;
        org.joda.time.Duration duration53 = duration49.minus(readableDuration52);
        org.joda.time.DateMidnight dateMidnight54 = dateMidnight45.plus((org.joda.time.ReadableDuration) duration53);
        mutableInterval33.setDurationAfterStart((org.joda.time.ReadableDuration) duration53);
        boolean boolean56 = strSet0.contains((java.lang.Object) mutableInterval33);
        strSet0.clear();
        org.junit.Assert.assertNotNull(strSet0);
        org.junit.Assert.assertNotNull(strStream1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertTrue("'" + chronoField16 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField16.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 3601000000001L + "'", long19 == 3601000000001L);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertTrue("'" + chronoField22 + "' != '" + java.time.temporal.ChronoField.SECOND_OF_DAY + "'", chronoField22.equals(java.time.temporal.ChronoField.SECOND_OF_DAY));
        org.junit.Assert.assertNotNull(valueRange23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(mutableDateTime31);
        org.junit.Assert.assertNotNull(days32);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(interval38);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(dateMidnight54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test2039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2039");
        java.nio.charset.Charset charset0 = java.nio.charset.Charset.defaultCharset();
        boolean boolean1 = charset0.isRegistered();
        boolean boolean2 = charset0.isRegistered();
        org.junit.Assert.assertNotNull(charset0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
    }

    @Test
    public void test2040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2040");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.withField(dateTimeFieldType2, (int) 'a');
        org.joda.time.Period period5 = org.joda.time.Period.ZERO;
        org.joda.time.Seconds seconds6 = period5.toStandardSeconds();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime1.withPeriodAdded((org.joda.time.ReadablePeriod) period5, 4096);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime1.withYear(2022);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.plusMonths((-1));
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str14 = localDateTime12.toString("ParseCaseSensitive(false)(Value(Year,4,10,EXCEEDS_PAD)'-'Value(MonthOfYear,2)'-'Value(DayOfMonth,2))[Offset(+HH:MM:ss,'Z')]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: P");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(seconds6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
    }

    @Test
    public void test2041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2041");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime2 = org.joda.time.LocalTime.parse("+09:00", dateTimeFormatter1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test2042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2042");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 3, chronology1);
        org.joda.time.DateTime.Property property3 = dateTime2.dayOfYear();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight((java.lang.Object) dateTime2, chronology4);
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight5.minusMonths((-1));
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight5.withDayOfYear((int) ' ');
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight9.minusMonths(1024);
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight11.withMillis((long) 366);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = null;
        java.lang.String str15 = dateMidnight13.toString(dateTimeFormatter14);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "1970-01-01T00:00:00.000Z" + "'", str15, "1970-01-01T00:00:00.000Z");
    }

    @Test
    public void test2043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2043");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 3, chronology1);
        org.joda.time.DateTime.Property property3 = dateTime2.dayOfYear();
        org.joda.time.Interval interval4 = property3.toInterval();
        org.joda.time.DateTimeField dateTimeField5 = property3.getField();
        org.joda.time.DateTime dateTime7 = property3.addToCopy((long) (byte) 1);
        org.joda.time.DateTime dateTime9 = dateTime7.withYear(4);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) 3, chronology11);
        org.joda.time.Period period13 = org.joda.time.Period.ZERO;
        org.joda.time.Period period14 = period13.normalizedStandard();
        org.joda.time.Period period16 = period14.minusMinutes((int) ' ');
        org.joda.time.Period period18 = period16.minusMonths((int) (byte) 0);
        org.joda.time.PeriodType periodType19 = period18.getPeriodType();
        org.joda.time.DateTime dateTime20 = dateTime12.minus((org.joda.time.ReadablePeriod) period18);
        org.joda.time.Duration duration21 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.DateTime dateTime22 = dateTime9.withTimeAtStartOfDay();
        java.util.TimeZone timeZone23 = null;
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forTimeZone(timeZone23);
        java.util.TimeZone timeZone26 = null;
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forTimeZone(timeZone26);
        org.joda.time.DateMidnight dateMidnight28 = new org.joda.time.DateMidnight((long) 1970, dateTimeZone27);
        long long31 = dateTimeZone27.convertLocalToUTC((long) 3, false);
        long long33 = dateTimeZone24.getMillisKeepLocal(dateTimeZone27, (long) ':');
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((java.lang.Object) dateTime9, dateTimeZone27);
        int int35 = dateTime34.getCenturyOfEra();
        org.joda.time.DateTime dateTime37 = dateTime34.withDayOfYear(365);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime((long) 3, chronology39);
        org.joda.time.DateTime.Property property41 = dateTime40.dayOfYear();
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.DateMidnight dateMidnight43 = new org.joda.time.DateMidnight((java.lang.Object) dateTime40, chronology42);
        org.joda.time.MutableDateTime mutableDateTime44 = dateTime40.toMutableDateTime();
        mutableDateTime44.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property47 = mutableDateTime44.dayOfWeek();
        org.joda.time.MutableDateTime.Property property48 = mutableDateTime44.year();
        java.util.TimeZone timeZone49 = null;
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.forTimeZone(timeZone49);
        mutableDateTime44.setZone(dateTimeZone50);
        java.util.Locale locale53 = java.util.Locale.TAIWAN;
        java.lang.String str54 = dateTimeZone50.getShortName((long) 64, locale53);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime((long) 3, chronology56);
        org.joda.time.DateTime.Property property58 = dateTime57.dayOfYear();
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.DateMidnight dateMidnight60 = new org.joda.time.DateMidnight((java.lang.Object) dateTime57, chronology59);
        org.joda.time.MutableDateTime mutableDateTime61 = dateTime57.toMutableDateTime();
        mutableDateTime61.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property64 = mutableDateTime61.dayOfWeek();
        org.joda.time.MutableDateTime.Property property65 = mutableDateTime61.year();
        java.util.TimeZone timeZone66 = null;
        org.joda.time.DateTimeZone dateTimeZone67 = org.joda.time.DateTimeZone.forTimeZone(timeZone66);
        mutableDateTime61.setZone(dateTimeZone67);
        java.util.Locale locale70 = java.util.Locale.TAIWAN;
        java.lang.String str71 = dateTimeZone67.getShortName((long) 64, locale70);
        long long73 = dateTimeZone50.getMillisKeepLocal(dateTimeZone67, (long) 64);
        org.joda.time.DateTime dateTime74 = new org.joda.time.DateTime(dateTimeZone50);
        org.joda.time.DateTime dateTime75 = dateTime34.toDateTime(dateTimeZone50);
        int int76 = dateTime75.getYear();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 3L + "'", long31 == 3L);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 58L + "'", long33 == 58L);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(mutableDateTime44);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "+00:00" + "'", str54, "+00:00");
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(mutableDateTime61);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertNotNull(dateTimeZone67);
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "+00:00" + "'", str71, "+00:00");
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 64L + "'", long73 == 64L);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 4 + "'", int76 == 4);
    }

    @Test
    public void test2044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2044");
        java.time.Duration duration1 = java.time.Duration.ofMinutes((long) 3);
        java.time.Duration duration2 = duration1.abs();
        int int3 = duration2.getNano();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalTime localTime6 = new org.joda.time.LocalTime((long) 0, chronology5);
        org.joda.time.LocalTime localTime8 = localTime6.minusMillis(2022);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.monthOfYear();
        boolean boolean10 = localTime8.isSupported(dateTimeFieldType9);
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.centuryOfEra();
        int int12 = localTime8.indexOf(dateTimeFieldType11);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime((long) 0, chronology14);
        org.joda.time.LocalTime localTime17 = localTime15.minusMillis(2022);
        org.joda.time.LocalTime localTime19 = localTime15.plusMillis((int) (byte) 0);
        org.joda.time.LocalTime localTime20 = localTime8.withFields((org.joda.time.ReadablePartial) localTime19);
        boolean boolean21 = duration2.equals((java.lang.Object) localTime20);
        java.time.Clock clock22 = java.time.Clock.systemUTC();
        java.time.Duration duration24 = java.time.Duration.ofSeconds((long) 256);
        java.time.Clock clock25 = java.time.Clock.tick(clock22, duration24);
        java.time.Duration duration27 = java.time.Duration.ofMinutes((long) 3);
        java.time.Duration duration28 = duration27.abs();
        java.time.Clock clock29 = java.time.Clock.offset(clock22, duration27);
        java.time.Duration duration30 = java.time.Duration.ZERO;
        java.time.Duration duration32 = duration30.multipliedBy((-9223372036854775808L));
        boolean boolean33 = duration30.isZero();
        java.time.Clock clock34 = java.time.Clock.tick(clock22, duration30);
        java.time.Duration duration35 = java.time.Duration.ZERO;
        java.time.Duration duration37 = duration35.multipliedBy((-9223372036854775808L));
        boolean boolean38 = duration35.isZero();
        java.time.Clock clock39 = java.time.Clock.offset(clock34, duration35);
        java.time.Duration duration40 = duration2.plus(duration35);
        long long41 = duration40.getSeconds();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(clock22);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(clock25);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(clock29);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(clock34);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(clock39);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 180L + "'", long41 == 180L);
    }

    @Test
    public void test2045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2045");
        org.joda.time.Period period0 = org.joda.time.Period.ZERO;
        org.joda.time.Period period1 = period0.normalizedStandard();
        org.joda.time.Period period3 = period0.plusHours(2);
        java.time.chrono.IsoEra isoEra4 = java.time.chrono.IsoEra.CE;
        boolean boolean5 = period3.equals((java.lang.Object) isoEra4);
        java.time.LocalTime localTime10 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime11 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime10);
        java.time.LocalTime localTime16 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime17 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime16);
        java.time.temporal.ChronoField chronoField18 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime20 = localTime16.with((java.time.temporal.TemporalField) chronoField18, (long) (short) 1);
        long long21 = localTime10.getLong((java.time.temporal.TemporalField) chronoField18);
        boolean boolean22 = isoEra4.isSupported((java.time.temporal.TemporalField) chronoField18);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery23 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period24 = isoEra4.query(periodTemporalQuery23);
        boolean boolean25 = period24.isNegative();
        java.time.Period period27 = period24.plusDays((long) ' ');
        boolean boolean28 = period24.isNegative();
        java.time.Period period30 = period24.minusYears((long) 10);
        org.joda.time.Period period31 = org.joda.time.Period.ZERO;
        org.joda.time.Period period32 = period31.normalizedStandard();
        org.joda.time.Period period34 = period31.plusHours(2);
        java.time.chrono.IsoEra isoEra35 = java.time.chrono.IsoEra.CE;
        boolean boolean36 = period34.equals((java.lang.Object) isoEra35);
        java.time.LocalTime localTime41 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime42 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime41);
        java.time.LocalTime localTime47 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime48 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime47);
        java.time.temporal.ChronoField chronoField49 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime51 = localTime47.with((java.time.temporal.TemporalField) chronoField49, (long) (short) 1);
        long long52 = localTime41.getLong((java.time.temporal.TemporalField) chronoField49);
        boolean boolean53 = isoEra35.isSupported((java.time.temporal.TemporalField) chronoField49);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery54 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period55 = isoEra35.query(periodTemporalQuery54);
        java.time.chrono.ChronoPeriod chronoPeriod56 = period30.minus((java.time.temporal.TemporalAmount) period55);
        java.time.chrono.ChronoPeriod chronoPeriod58 = period30.multipliedBy(4096);
        int int59 = period30.getMonths();
        java.time.chrono.IsoChronology isoChronology60 = period30.getChronology();
        java.time.LocalDate localDate63 = isoChronology60.dateYearDay(2022, (int) '/');
        java.time.LocalDate localDate64 = isoChronology60.dateNow();
        org.junit.Assert.assertNotNull(period0);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertTrue("'" + isoEra4 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra4.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertTrue("'" + chronoField18 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField18.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 3601000000001L + "'", long21 == 3601000000001L);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(periodTemporalQuery23);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertTrue("'" + isoEra35 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra35.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(localTime41);
        org.junit.Assert.assertNotNull(localTime42);
        org.junit.Assert.assertNotNull(localTime47);
        org.junit.Assert.assertNotNull(localTime48);
        org.junit.Assert.assertTrue("'" + chronoField49 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField49.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime51);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 3601000000001L + "'", long52 == 3601000000001L);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(periodTemporalQuery54);
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertNotNull(chronoPeriod56);
        org.junit.Assert.assertNotNull(chronoPeriod58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(isoChronology60);
        org.junit.Assert.assertNotNull(localDate63);
        org.junit.Assert.assertNotNull(localDate64);
    }

    @Test
    public void test2046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2046");
        org.joda.time.Hours hours0 = org.joda.time.Hours.FIVE;
        org.joda.time.Seconds seconds1 = hours0.toStandardSeconds();
        org.junit.Assert.assertNotNull(hours0);
        org.junit.Assert.assertNotNull(seconds1);
    }

    @Test
    public void test2047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2047");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((long) 0, chronology2);
        org.joda.time.Chronology chronology4 = localTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField5 = chronology4.weekyearOfCentury();
        org.joda.time.DurationField durationField6 = chronology4.weekyears();
        org.joda.time.DurationField durationField7 = chronology4.seconds();
        org.joda.time.LocalTime localTime8 = org.joda.time.LocalTime.fromMillisOfDay((long) (byte) 0, chronology4);
        org.joda.time.Chronology chronology9 = localTime8.getChronology();
        org.joda.time.TimeOfDay timeOfDay11 = org.joda.time.TimeOfDay.fromMillisOfDay((long) (short) 0);
        org.joda.time.TimeOfDay timeOfDay13 = org.joda.time.TimeOfDay.fromMillisOfDay((long) (short) 0);
        org.joda.time.Hours hours14 = org.joda.time.Hours.hoursBetween((org.joda.time.ReadablePartial) timeOfDay11, (org.joda.time.ReadablePartial) timeOfDay13);
        org.joda.time.DurationFieldType durationFieldType15 = org.joda.time.DurationFieldType.hours();
        org.joda.time.TimeOfDay timeOfDay17 = timeOfDay13.withFieldAdded(durationFieldType15, (int) (byte) 0);
        org.joda.time.Chronology chronology18 = null;
        boolean boolean19 = durationFieldType15.isSupported(chronology18);
        boolean boolean20 = localTime8.isSupported(durationFieldType15);
        org.joda.time.LocalTime localTime22 = localTime8.plusHours(1970);
        java.lang.String str23 = localTime22.toString();
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(timeOfDay11);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertNotNull(hours14);
        org.junit.Assert.assertNotNull(durationFieldType15);
        org.junit.Assert.assertNotNull(timeOfDay17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "02:00:00.000" + "'", str23, "02:00:00.000");
    }

    @Test
    public void test2048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2048");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect(10800000);
        java.nio.ByteBuffer byteBuffer2 = byteBuffer1.asReadOnlyBuffer();
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer5 = byteBuffer2.putChar(4096, 'a');
            org.junit.Assert.fail("Expected exception of type java.nio.ReadOnlyBufferException; message: null");
        } catch (java.nio.ReadOnlyBufferException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer2);
    }

    @Test
    public void test2049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2049");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        mutableDateTime0.setYear(5);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime0.setDate((-201), 1970, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1970 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test2050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2050");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 3, chronology1);
        org.joda.time.DateTime.Property property3 = dateTime2.dayOfYear();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight((java.lang.Object) dateTime2, chronology4);
        org.joda.time.MutableDateTime mutableDateTime6 = dateTime2.toMutableDateTime();
        mutableDateTime6.addYears((int) (short) 100);
        org.joda.time.Period period9 = org.joda.time.Period.ZERO;
        org.joda.time.TimeOfDay timeOfDay11 = org.joda.time.TimeOfDay.fromMillisOfDay((long) (short) 0);
        org.joda.time.TimeOfDay timeOfDay13 = org.joda.time.TimeOfDay.fromMillisOfDay((long) (short) 0);
        org.joda.time.Hours hours14 = org.joda.time.Hours.hoursBetween((org.joda.time.ReadablePartial) timeOfDay11, (org.joda.time.ReadablePartial) timeOfDay13);
        org.joda.time.DurationFieldType durationFieldType15 = org.joda.time.DurationFieldType.hours();
        org.joda.time.TimeOfDay timeOfDay17 = timeOfDay13.withFieldAdded(durationFieldType15, (int) (byte) 0);
        org.joda.time.Period period19 = period9.withFieldAdded(durationFieldType15, 4);
        mutableDateTime6.add((org.joda.time.ReadablePeriod) period9);
        mutableDateTime6.addMonths(1970);
        mutableDateTime6.addMonths(6);
        int int25 = mutableDateTime6.getMonthOfYear();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.LocalTime localTime29 = new org.joda.time.LocalTime((long) 0, chronology28);
        org.joda.time.Chronology chronology30 = localTime29.getChronology();
        org.joda.time.DateTimeField dateTimeField31 = chronology30.weekyearOfCentury();
        org.joda.time.DurationField durationField32 = chronology30.weekyears();
        org.joda.time.MutableDateTime mutableDateTime33 = new org.joda.time.MutableDateTime((long) 21, chronology30);
        mutableDateTime33.setMinuteOfDay(100);
        org.joda.time.Period period36 = org.joda.time.Period.ZERO;
        org.joda.time.Period period37 = period36.normalizedStandard();
        org.joda.time.Period period39 = period37.minusMinutes((int) ' ');
        org.joda.time.Period period41 = period39.minusMonths((int) (byte) 0);
        org.joda.time.PeriodType periodType42 = period41.getPeriodType();
        org.joda.time.PeriodType periodType43 = periodType42.withHoursRemoved();
        org.joda.time.PeriodType periodType44 = periodType43.withSecondsRemoved();
        org.joda.time.MutablePeriod mutablePeriod45 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime6, (org.joda.time.ReadableInstant) mutableDateTime33, periodType43);
        mutablePeriod45.add((long) 601);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(timeOfDay11);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertNotNull(hours14);
        org.junit.Assert.assertNotNull(durationFieldType15);
        org.junit.Assert.assertNotNull(timeOfDay17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 9 + "'", int25 == 9);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(periodType42);
        org.junit.Assert.assertNotNull(periodType43);
        org.junit.Assert.assertNotNull(periodType44);
    }

    @Test
    public void test2051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2051");
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.Duration duration3 = new org.joda.time.Duration(readableInstant1, readableInstant2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.PeriodType periodType5 = null;
        org.joda.time.Period period6 = duration3.toPeriodTo(readableInstant4, periodType5);
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.Duration duration9 = new org.joda.time.Duration(readableInstant7, readableInstant8);
        long long10 = duration9.getMillis();
        boolean boolean11 = duration3.isShorterThan((org.joda.time.ReadableDuration) duration9);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) 3, chronology13);
        org.joda.time.DateTime.Property property15 = dateTime14.dayOfYear();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight((java.lang.Object) dateTime14, chronology16);
        org.joda.time.MutableDateTime mutableDateTime18 = dateTime14.toMutableDateTime();
        mutableDateTime18.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime18.dayOfWeek();
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime18.year();
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime18.weekyear();
        boolean boolean24 = duration3.equals((java.lang.Object) mutableDateTime18);
        mutableDateTime18.addMonths((int) ' ');
        mutableDateTime18.add((long) (byte) 10);
        org.joda.time.Period period29 = org.joda.time.Period.ZERO;
        org.joda.time.Period period30 = period29.normalizedStandard();
        org.joda.time.Period period32 = period29.plusHours(2);
        java.time.chrono.IsoEra isoEra33 = java.time.chrono.IsoEra.CE;
        boolean boolean34 = period32.equals((java.lang.Object) isoEra33);
        int int35 = period32.getMinutes();
        mutableDateTime18.add((org.joda.time.ReadablePeriod) period32);
        java.util.TimeZone timeZone38 = null;
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forTimeZone(timeZone38);
        org.joda.time.DateMidnight dateMidnight40 = new org.joda.time.DateMidnight((long) 1970, dateTimeZone39);
        long long43 = dateTimeZone39.convertLocalToUTC((long) 3, false);
        long long46 = dateTimeZone39.convertLocalToUTC(0L, true);
        mutableDateTime18.setZoneRetainFields(dateTimeZone39);
        java.lang.String str48 = dateTimeZone39.toString();
        org.joda.time.chrono.EthiopicChronology ethiopicChronology49 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone39);
        org.joda.time.DateTimeField dateTimeField50 = ethiopicChronology49.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone51 = ethiopicChronology49.getZone();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableInterval mutableInterval52 = new org.joda.time.MutableInterval((java.lang.Object) 306.0d, (org.joda.time.Chronology) ethiopicChronology49);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No interval converter found for type: java.lang.Double");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertTrue("'" + isoEra33 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra33.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 3L + "'", long43 == 3L);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Etc/UTC" + "'", str48, "Etc/UTC");
        org.junit.Assert.assertNotNull(ethiopicChronology49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(dateTimeZone51);
    }

    @Test
    public void test2052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2052");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.now();
        java.time.temporal.ChronoField chronoField1 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime3 = localDateTime0.with((java.time.temporal.TemporalField) chronoField1, (long) 10);
        java.time.Duration duration5 = java.time.Duration.ofSeconds((long) 0);
        java.time.temporal.Temporal temporal6 = localDateTime0.minus((java.time.temporal.TemporalAmount) duration5);
        java.time.LocalDateTime localDateTime7 = java.time.LocalDateTime.now();
        java.time.LocalTime localTime12 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime13 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime12);
        java.time.temporal.ChronoField chronoField14 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime16 = localTime12.with((java.time.temporal.TemporalField) chronoField14, (long) (short) 1);
        java.util.Locale locale17 = java.util.Locale.GERMANY;
        java.lang.String str18 = chronoField14.getDisplayName(locale17);
        long long19 = localDateTime7.getLong((java.time.temporal.TemporalField) chronoField14);
        java.time.LocalDateTime localDateTime21 = localDateTime7.plusHours((long) 10);
        java.lang.String str22 = localDateTime7.toString();
        boolean boolean23 = localDateTime0.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertTrue("'" + chronoField1 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField1.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(temporal6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertTrue("'" + chronoField14 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField14.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "NanoOfDay" + "'", str18, "NanoOfDay");
// flaky:         org.junit.Assert.assertTrue("'" + long19 + "' != '" + 34642346000000L + "'", long19 == 34642346000000L);
        org.junit.Assert.assertNotNull(localDateTime21);
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "2022-02-21T09:37:22.346" + "'", str22, "2022-02-21T09:37:22.346");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test2053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2053");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.yearOfCentury();
        int int3 = property2.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime5 = property2.addToCopy((long) (-1));
        org.joda.time.LocalDateTime localDateTime6 = property2.roundHalfFloorCopy();
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.minuteOfHour();
        org.joda.time.Minutes minutes8 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.minus((org.joda.time.ReadablePeriod) minutes8);
        int int10 = localDateTime6.getMillisOfDay();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 99 + "'", int3 == 99);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(minutes8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test2054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2054");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime2 = org.joda.time.DateTime.parse("1", dateTimeFormatter1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test2055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2055");
        org.joda.time.MutablePeriod mutablePeriod0 = new org.joda.time.MutablePeriod();
        org.joda.time.Period period1 = org.joda.time.Period.ZERO;
        org.joda.time.Period period2 = period1.normalizedStandard();
        org.joda.time.Period period4 = period1.plusHours(2);
        org.joda.time.DurationFieldType durationFieldType5 = org.joda.time.DurationFieldType.hours();
        int int6 = period1.indexOf(durationFieldType5);
        mutablePeriod0.add(durationFieldType5, (int) (short) -1);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.LocalTime localTime12 = new org.joda.time.LocalTime((long) 0, chronology11);
        org.joda.time.Chronology chronology13 = localTime12.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.weekyearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime15 = org.joda.time.MutableDateTime.now(chronology13);
        org.joda.time.DateTimeField dateTimeField16 = chronology13.monthOfYear();
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) 1, chronology13);
        org.joda.time.DurationField durationField18 = durationFieldType5.getField(chronology13);
        org.joda.time.MutableDateTime mutableDateTime19 = org.joda.time.MutableDateTime.now(chronology13);
        mutableDateTime19.addDays(19);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime19.setDayOfWeek(42);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 42 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period2);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 4 + "'", int6 == 4);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(mutableDateTime19);
    }

    @Test
    public void test2056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2056");
        // The following exception was thrown during execution in test generation
        try {
            java.net.URI uRI4 = new java.net.URI("java.nio.charset.CharacterCodingException", "2022-02-21T09:34:08.903Z", "Sun Mar 30 23:47:28 UTC 1997", "DayOfWeek");
            org.junit.Assert.fail("Expected exception of type java.net.URISyntaxException; message: Relative path in absolute URI: java.nio.charset.CharacterCodingException://[2022-02-21T09:34:08.903Z]Sun%20Mar%2030%2023:47:28%20UTC%201997#DayOfWeek");
        } catch (java.net.URISyntaxException e) {
            // Expected exception.
        }
    }

    @Test
    public void test2057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2057");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardDays((long) 20);
        org.joda.time.Seconds seconds2 = duration1.toStandardSeconds();
        org.joda.time.Seconds seconds3 = duration1.toStandardSeconds();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(seconds2);
        org.junit.Assert.assertNotNull(seconds3);
    }

    @Test
    public void test2058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2058");
        org.joda.time.chrono.EthiopicChronology ethiopicChronology0 = org.joda.time.chrono.EthiopicChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = ethiopicChronology0.dayOfWeek();
        org.joda.time.DurationField durationField2 = ethiopicChronology0.centuries();
        // The following exception was thrown during execution in test generation
        try {
            long long10 = ethiopicChronology0.getDateTimeMillis(16384, 0, 17, 978, 70, 47, 35);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 978 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(ethiopicChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(durationField2);
    }

    @Test
    public void test2059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2059");
        java.util.GregorianCalendar gregorianCalendar5 = new java.util.GregorianCalendar(12, 4096, 7, (-1), (int) (short) 10);
        int int6 = gregorianCalendar5.getWeeksInWeekYear();
        java.lang.String str7 = gregorianCalendar5.getCalendarType();
        java.time.ZonedDateTime zonedDateTime8 = gregorianCalendar5.toZonedDateTime();
        java.time.ZonedDateTime zonedDateTime10 = zonedDateTime8.minusMonths((long) 10);
        java.time.ZonedDateTime zonedDateTime12 = zonedDateTime10.minusHours((long) 9);
        java.time.chrono.ChronoZonedDateTime<java.time.LocalDate> localDateChronoZonedDateTime13 = zonedDateTime10.withLaterOffsetAtOverlap();
        java.time.ZoneId zoneId14 = zonedDateTime10.getZone();
        long long15 = zonedDateTime10.toEpochSecond();
        java.time.temporal.ChronoField chronoField16 = java.time.temporal.ChronoField.DAY_OF_MONTH;
        int int17 = zonedDateTime10.get((java.time.temporal.TemporalField) chronoField16);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 52 + "'", int6 == 52);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "gregory" + "'", str7, "gregory");
        org.junit.Assert.assertNotNull(zonedDateTime8);
        org.junit.Assert.assertNotNull(zonedDateTime10);
        org.junit.Assert.assertNotNull(zonedDateTime12);
        org.junit.Assert.assertNotNull(localDateChronoZonedDateTime13);
        org.junit.Assert.assertNotNull(zoneId14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-51042876600L) + "'", long15 == (-51042876600L));
        org.junit.Assert.assertTrue("'" + chronoField16 + "' != '" + java.time.temporal.ChronoField.DAY_OF_MONTH + "'", chronoField16.equals(java.time.temporal.ChronoField.DAY_OF_MONTH));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 7 + "'", int17 == 7);
    }

    @Test
    public void test2060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2060");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        int int2 = localDateTime1.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusDays(28);
        int int5 = localDateTime1.getMillisOfSecond();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) 3, chronology7);
        org.joda.time.DateTime.Property property9 = dateTime8.dayOfYear();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight((java.lang.Object) dateTime8, chronology10);
        org.joda.time.MutableDateTime mutableDateTime12 = dateTime8.toMutableDateTime();
        org.joda.time.Days days13 = org.joda.time.Days.ONE;
        org.joda.time.MutableInterval mutableInterval14 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadablePeriod) days13);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) 3, chronology16);
        org.joda.time.DateTime.Property property18 = dateTime17.dayOfYear();
        org.joda.time.Interval interval19 = property18.toInterval();
        mutableInterval14.setInterval((org.joda.time.ReadableInterval) interval19);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) 3, chronology22);
        org.joda.time.DateTime.Property property24 = dateTime23.dayOfYear();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight((java.lang.Object) dateTime23, chronology25);
        org.joda.time.DateMidnight.Property property27 = dateMidnight26.dayOfMonth();
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.Duration duration30 = new org.joda.time.Duration(readableInstant28, readableInstant29);
        org.joda.time.Duration duration32 = duration30.withMillis((-1L));
        org.joda.time.ReadableDuration readableDuration33 = null;
        org.joda.time.Duration duration34 = duration30.minus(readableDuration33);
        org.joda.time.DateMidnight dateMidnight35 = dateMidnight26.plus((org.joda.time.ReadableDuration) duration34);
        mutableInterval14.setDurationAfterStart((org.joda.time.ReadableDuration) duration34);
        org.joda.time.MutableDateTime mutableDateTime37 = new org.joda.time.MutableDateTime();
        boolean boolean38 = mutableInterval14.isBefore((org.joda.time.ReadableInstant) mutableDateTime37);
        org.joda.time.MutableDateTime mutableDateTime39 = mutableDateTime37.copy();
        java.util.Properties properties40 = null;
        java.util.Properties properties41 = new java.util.Properties(properties40);
        java.time.LocalTime localTime46 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime47 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime46);
        java.time.LocalTime localTime52 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime53 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime52);
        java.time.temporal.ChronoField chronoField54 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime56 = localTime52.with((java.time.temporal.TemporalField) chronoField54, (long) (short) 1);
        long long57 = localTime46.getLong((java.time.temporal.TemporalField) chronoField54);
        java.time.LocalTime localTime59 = localTime46.withSecond((int) (short) 1);
        java.lang.Object obj61 = properties41.put((java.lang.Object) localTime59, (java.lang.Object) "117");
        java.lang.Object obj62 = properties41.clone();
        properties41.clear();
        int int64 = properties41.size();
        org.joda.time.DateTimeFieldType dateTimeFieldType65 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        boolean boolean66 = properties41.equals((java.lang.Object) dateTimeFieldType65);
        org.joda.time.MutableDateTime.Property property67 = mutableDateTime39.property(dateTimeFieldType65);
        boolean boolean68 = localDateTime1.isSupported(dateTimeFieldType65);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(localDateTime4);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 461 + "'", int5 == 461);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertNotNull(days13);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(dateMidnight35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(mutableDateTime39);
        org.junit.Assert.assertNotNull(localTime46);
        org.junit.Assert.assertNotNull(localTime47);
        org.junit.Assert.assertNotNull(localTime52);
        org.junit.Assert.assertNotNull(localTime53);
        org.junit.Assert.assertTrue("'" + chronoField54 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField54.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime56);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 3601000000001L + "'", long57 == 3601000000001L);
        org.junit.Assert.assertNotNull(localTime59);
        org.junit.Assert.assertNull(obj61);
        org.junit.Assert.assertNotNull(obj62);
        org.junit.Assert.assertEquals(obj62.toString(), "{01:00:01.000000001=117}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj62), "{01:00:01.000000001=117}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj62), "{01:00:01.000000001=117}");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
    }

    @Test
    public void test2061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2061");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.now();
        java.time.LocalDateTime localDateTime2 = localDateTime0.minusYears((long) (byte) 10);
        java.time.LocalDateTime localDateTime3 = java.time.LocalDateTime.now();
        java.time.LocalDateTime localDateTime5 = localDateTime3.minusYears((long) (byte) 10);
        boolean boolean6 = localDateTime0.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime5);
        java.time.LocalDateTime localDateTime8 = localDateTime5.withSecond((int) '+');
        java.time.ZoneOffset zoneOffset12 = java.time.ZoneOffset.ofHoursMinutes(1, 10);
        java.time.LocalDate localDate13 = java.time.LocalDate.now((java.time.ZoneId) zoneOffset12);
        java.time.LocalDate localDate14 = java.time.LocalDate.now((java.time.ZoneId) zoneOffset12);
        java.time.OffsetDateTime offsetDateTime16 = java.time.OffsetDateTime.now();
        java.time.LocalDate localDate18 = java.time.LocalDate.ofEpochDay((long) ' ');
        int int19 = localDate18.getMonthValue();
        org.joda.time.Period period20 = org.joda.time.Period.ZERO;
        org.joda.time.Period period21 = period20.normalizedStandard();
        org.joda.time.Period period23 = period20.plusHours(2);
        java.time.chrono.IsoEra isoEra24 = java.time.chrono.IsoEra.CE;
        boolean boolean25 = period23.equals((java.lang.Object) isoEra24);
        java.time.LocalTime localTime30 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime31 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime30);
        java.time.LocalTime localTime36 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime37 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime36);
        java.time.temporal.ChronoField chronoField38 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime40 = localTime36.with((java.time.temporal.TemporalField) chronoField38, (long) (short) 1);
        long long41 = localTime30.getLong((java.time.temporal.TemporalField) chronoField38);
        boolean boolean42 = isoEra24.isSupported((java.time.temporal.TemporalField) chronoField38);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery43 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period44 = isoEra24.query(periodTemporalQuery43);
        boolean boolean45 = period44.isNegative();
        java.time.Period period47 = period44.plusDays((long) ' ');
        java.time.temporal.ChronoField chronoField48 = java.time.temporal.ChronoField.SECOND_OF_DAY;
        boolean boolean49 = period44.equals((java.lang.Object) chronoField48);
        boolean boolean50 = localDate18.isSupported((java.time.temporal.TemporalField) chronoField48);
        java.time.temporal.TemporalUnit temporalUnit51 = chronoField48.getRangeUnit();
        java.time.OffsetDateTime offsetDateTime52 = offsetDateTime16.truncatedTo(temporalUnit51);
        java.time.LocalDate localDate55 = java.time.LocalDate.ofEpochDay((long) ' ');
        int int56 = localDate55.getMonthValue();
        org.joda.time.Period period57 = org.joda.time.Period.ZERO;
        org.joda.time.Period period58 = period57.normalizedStandard();
        org.joda.time.Period period60 = period57.plusHours(2);
        java.time.chrono.IsoEra isoEra61 = java.time.chrono.IsoEra.CE;
        boolean boolean62 = period60.equals((java.lang.Object) isoEra61);
        java.time.LocalTime localTime67 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime68 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime67);
        java.time.LocalTime localTime73 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime74 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime73);
        java.time.temporal.ChronoField chronoField75 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime77 = localTime73.with((java.time.temporal.TemporalField) chronoField75, (long) (short) 1);
        long long78 = localTime67.getLong((java.time.temporal.TemporalField) chronoField75);
        boolean boolean79 = isoEra61.isSupported((java.time.temporal.TemporalField) chronoField75);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery80 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period81 = isoEra61.query(periodTemporalQuery80);
        boolean boolean82 = period81.isNegative();
        java.time.Period period84 = period81.plusDays((long) ' ');
        java.time.temporal.ChronoField chronoField85 = java.time.temporal.ChronoField.SECOND_OF_DAY;
        boolean boolean86 = period81.equals((java.lang.Object) chronoField85);
        boolean boolean87 = localDate55.isSupported((java.time.temporal.TemporalField) chronoField85);
        java.time.temporal.TemporalUnit temporalUnit88 = chronoField85.getRangeUnit();
        java.time.OffsetDateTime offsetDateTime89 = offsetDateTime52.minus(8L, temporalUnit88);
        java.time.LocalDate localDate90 = localDate14.minus((long) '4', temporalUnit88);
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime91 = localDateTime5.minus((long) 7, temporalUnit88);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(zoneOffset12);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(offsetDateTime16);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertTrue("'" + isoEra24 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra24.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(localTime30);
        org.junit.Assert.assertNotNull(localTime31);
        org.junit.Assert.assertNotNull(localTime36);
        org.junit.Assert.assertNotNull(localTime37);
        org.junit.Assert.assertTrue("'" + chronoField38 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField38.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime40);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 3601000000001L + "'", long41 == 3601000000001L);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(periodTemporalQuery43);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertTrue("'" + chronoField48 + "' != '" + java.time.temporal.ChronoField.SECOND_OF_DAY + "'", chronoField48.equals(java.time.temporal.ChronoField.SECOND_OF_DAY));
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + temporalUnit51 + "' != '" + java.time.temporal.ChronoUnit.DAYS + "'", temporalUnit51.equals(java.time.temporal.ChronoUnit.DAYS));
        org.junit.Assert.assertNotNull(offsetDateTime52);
        org.junit.Assert.assertNotNull(localDate55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 2 + "'", int56 == 2);
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertNotNull(period58);
        org.junit.Assert.assertNotNull(period60);
        org.junit.Assert.assertTrue("'" + isoEra61 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra61.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(localTime67);
        org.junit.Assert.assertNotNull(localTime68);
        org.junit.Assert.assertNotNull(localTime73);
        org.junit.Assert.assertNotNull(localTime74);
        org.junit.Assert.assertTrue("'" + chronoField75 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField75.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime77);
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 3601000000001L + "'", long78 == 3601000000001L);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(periodTemporalQuery80);
        org.junit.Assert.assertNotNull(period81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(period84);
        org.junit.Assert.assertTrue("'" + chronoField85 + "' != '" + java.time.temporal.ChronoField.SECOND_OF_DAY + "'", chronoField85.equals(java.time.temporal.ChronoField.SECOND_OF_DAY));
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + temporalUnit88 + "' != '" + java.time.temporal.ChronoUnit.DAYS + "'", temporalUnit88.equals(java.time.temporal.ChronoUnit.DAYS));
        org.junit.Assert.assertNotNull(offsetDateTime89);
        org.junit.Assert.assertNotNull(localDate90);
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime91);
    }

    @Test
    public void test2062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2062");
        java.util.stream.Stream<java.lang.Object> objStream0 = java.util.stream.Stream.empty();
        java.lang.Object[] objArray1 = objStream0.toArray();
        java.util.stream.Stream<java.lang.Object> objStream2 = objStream0.parallel();
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.Stream<java.lang.Object> objStream4 = objStream2.limit((long) 4200);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: stream has already been operated upon or closed");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objStream0);
        org.junit.Assert.assertNotNull(objArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray1), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray1), "[]");
        org.junit.Assert.assertNotNull(objStream2);
    }

    @Test
    public void test2063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2063");
        java.util.GregorianCalendar gregorianCalendar5 = new java.util.GregorianCalendar(12, 4096, 7, (-1), (int) (short) 10);
        int int6 = gregorianCalendar5.getWeeksInWeekYear();
        org.joda.time.YearMonthDay yearMonthDay7 = org.joda.time.YearMonthDay.fromCalendarFields((java.util.Calendar) gregorianCalendar5);
        int int9 = gregorianCalendar5.getGreatestMinimum(5);
        java.util.GregorianCalendar gregorianCalendar10 = new java.util.GregorianCalendar();
        int int11 = gregorianCalendar10.getWeeksInWeekYear();
        int int12 = gregorianCalendar5.compareTo((java.util.Calendar) gregorianCalendar10);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 52 + "'", int6 == 52);
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 53 + "'", int11 == 53);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
    }

    @Test
    public void test2064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2064");
        java.util.function.Predicate<org.joda.time.DateTimeFieldType> dateTimeFieldTypePredicate1 = java.util.function.Predicate.isEqual((java.lang.Object) 1.0d);
        java.util.Map<java.lang.String, java.lang.String> strMap2 = java.time.ZoneId.SHORT_IDS;
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        boolean boolean4 = strMap2.containsValue((java.lang.Object) dateTimeFieldType3);
        boolean boolean5 = dateTimeFieldTypePredicate1.test(dateTimeFieldType3);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.yearOfCentury();
        java.lang.String str7 = dateTimeFieldType6.getName();
        java.lang.String str8 = dateTimeFieldType6.toString();
        boolean boolean9 = dateTimeFieldTypePredicate1.test(dateTimeFieldType6);
        java.lang.String str10 = dateTimeFieldType6.toString();
        org.junit.Assert.assertNotNull(dateTimeFieldTypePredicate1);
        org.junit.Assert.assertNotNull(strMap2);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "yearOfCentury" + "'", str7, "yearOfCentury");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "yearOfCentury" + "'", str8, "yearOfCentury");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "yearOfCentury" + "'", str10, "yearOfCentury");
    }

    @Test
    public void test2065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2065");
        java.security.NoSuchAlgorithmException noSuchAlgorithmException0 = new java.security.NoSuchAlgorithmException();
    }

    @Test
    public void test2066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2066");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Duration duration2 = new org.joda.time.Duration(readableInstant0, readableInstant1);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = duration2.toPeriodTo(readableInstant3, periodType4);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.Duration duration8 = new org.joda.time.Duration(readableInstant6, readableInstant7);
        long long9 = duration8.getMillis();
        boolean boolean10 = duration2.isShorterThan((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) 3, chronology12);
        org.joda.time.DateTime.Property property14 = dateTime13.dayOfYear();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight((java.lang.Object) dateTime13, chronology15);
        org.joda.time.MutableDateTime mutableDateTime17 = dateTime13.toMutableDateTime();
        mutableDateTime17.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime17.dayOfWeek();
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime17.year();
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime17.weekyear();
        boolean boolean23 = duration2.equals((java.lang.Object) mutableDateTime17);
        mutableDateTime17.addMonths((int) ' ');
        mutableDateTime17.add((long) (byte) 10);
        org.joda.time.Period period28 = org.joda.time.Period.ZERO;
        org.joda.time.Period period29 = period28.normalizedStandard();
        org.joda.time.Period period31 = period28.plusHours(2);
        java.time.chrono.IsoEra isoEra32 = java.time.chrono.IsoEra.CE;
        boolean boolean33 = period31.equals((java.lang.Object) isoEra32);
        int int34 = period31.getMinutes();
        mutableDateTime17.add((org.joda.time.ReadablePeriod) period31);
        java.util.TimeZone timeZone37 = null;
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forTimeZone(timeZone37);
        org.joda.time.DateMidnight dateMidnight39 = new org.joda.time.DateMidnight((long) 1970, dateTimeZone38);
        long long42 = dateTimeZone38.convertLocalToUTC((long) 3, false);
        long long45 = dateTimeZone38.convertLocalToUTC(0L, true);
        mutableDateTime17.setZoneRetainFields(dateTimeZone38);
        java.lang.String str47 = dateTimeZone38.toString();
        org.joda.time.chrono.EthiopicChronology ethiopicChronology48 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone38);
        org.joda.time.DateTimeField dateTimeField49 = ethiopicChronology48.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone50 = ethiopicChronology48.getZone();
        org.joda.time.DateTimeField dateTimeField51 = ethiopicChronology48.era();
        org.joda.time.DateTimeField dateTimeField52 = ethiopicChronology48.secondOfDay();
        org.joda.time.DateTimeField dateTimeField53 = ethiopicChronology48.minuteOfHour();
        org.joda.time.DurationField durationField54 = ethiopicChronology48.months();
        org.joda.time.DateTimeField dateTimeField55 = ethiopicChronology48.weekyearOfCentury();
        org.joda.time.Minutes minutes56 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes58 = minutes56.minus(12);
        org.joda.time.Minutes minutes59 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes61 = minutes59.minus(12);
        org.joda.time.Minutes minutes62 = minutes56.minus(minutes59);
        org.joda.time.DurationFieldType durationFieldType63 = minutes56.getFieldType();
        int[] intArray66 = ethiopicChronology48.get((org.joda.time.ReadablePeriod) minutes56, (long) 30, (long) 741000000);
        org.joda.time.DateTimeField dateTimeField67 = ethiopicChronology48.minuteOfHour();
        org.joda.time.DurationField durationField68 = ethiopicChronology48.months();
        org.joda.time.MutableDateTime mutableDateTime69 = org.joda.time.MutableDateTime.now((org.joda.time.Chronology) ethiopicChronology48);
        org.joda.time.DurationField durationField70 = ethiopicChronology48.weeks();
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertTrue("'" + isoEra32 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra32.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 3L + "'", long42 == 3L);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Etc/UTC" + "'", str47, "Etc/UTC");
        org.junit.Assert.assertNotNull(ethiopicChronology48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(durationField54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(minutes56);
        org.junit.Assert.assertNotNull(minutes58);
        org.junit.Assert.assertNotNull(minutes59);
        org.junit.Assert.assertNotNull(minutes61);
        org.junit.Assert.assertNotNull(minutes62);
        org.junit.Assert.assertNotNull(durationFieldType63);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[12349]");
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(durationField68);
        org.junit.Assert.assertNotNull(mutableDateTime69);
        org.junit.Assert.assertNotNull(durationField70);
    }

    @Test
    public void test2067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2067");
        java.util.Date date6 = new java.util.Date((int) (byte) 100, 4, 306, (int) ':', 52, (int) ' ');
        int int7 = date6.getMonth();
        int int8 = date6.getYear();
        java.security.cert.CertPath certPath9 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.security.Timestamp timestamp10 = new java.security.Timestamp(date6, certPath9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(date6.toString(), "Sun Mar 04 10:52:32 UTC 2001");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2 + "'", int7 == 2);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 101 + "'", int8 == 101);
    }

    @Test
    public void test2068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2068");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((long) 0, chronology4);
        org.joda.time.Chronology chronology6 = localTime5.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.weekyearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.weekyears();
        org.joda.time.DurationField durationField9 = chronology6.seconds();
        org.joda.time.DateTimeField dateTimeField10 = chronology6.dayOfWeek();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay11 = new org.joda.time.YearMonthDay((-624), (int) '\000', 120, chronology6);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for monthOfYear must not be smaller than 1");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
    }

    @Test
    public void test2069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2069");
        java.time.Instant instant0 = java.time.Instant.now();
        java.time.Instant instant1 = java.time.Instant.now();
        boolean boolean2 = instant0.isAfter(instant1);
        java.time.Duration duration3 = java.time.Duration.ZERO;
        java.time.Instant instant4 = instant1.minus((java.time.temporal.TemporalAmount) duration3);
        java.time.format.DateTimeFormatter dateTimeFormatter5 = java.time.format.DateTimeFormatter.ISO_DATE;
        java.lang.String str6 = dateTimeFormatter5.toString();
        java.time.LocalDateTime localDateTime7 = java.time.LocalDateTime.now();
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery8 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period9 = localDateTime7.query(periodTemporalQuery8);
        java.text.Format format10 = dateTimeFormatter5.toFormat(periodTemporalQuery8);
        java.time.chrono.Chronology chronology11 = dateTimeFormatter5.getChronology();
        java.time.format.DateTimeFormatter dateTimeFormatter12 = java.time.format.DateTimeFormatter.ISO_DATE;
        java.lang.String str13 = dateTimeFormatter12.toString();
        java.time.LocalDateTime localDateTime14 = java.time.LocalDateTime.now();
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery15 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period16 = localDateTime14.query(periodTemporalQuery15);
        java.text.Format format17 = dateTimeFormatter12.toFormat(periodTemporalQuery15);
        java.time.chrono.Chronology chronology18 = dateTimeFormatter12.getChronology();
        int int19 = chronology11.compareTo(chronology18);
        java.util.List<java.time.chrono.Era> eraList20 = chronology18.eras();
        java.time.ZoneOffset zoneOffset23 = java.time.ZoneOffset.ofHoursMinutes(1, 10);
        java.time.LocalDate localDate24 = java.time.LocalDate.now((java.time.ZoneId) zoneOffset23);
        java.time.Clock clock25 = java.time.Clock.system((java.time.ZoneId) zoneOffset23);
        java.time.ZoneOffset zoneOffset28 = java.time.ZoneOffset.ofHoursMinutes(1, 10);
        java.time.LocalDate localDate29 = java.time.LocalDate.now((java.time.ZoneId) zoneOffset28);
        java.time.Clock clock30 = java.time.Clock.system((java.time.ZoneId) zoneOffset28);
        int int31 = zoneOffset23.compareTo(zoneOffset28);
        java.time.chrono.ChronoLocalDate chronoLocalDate32 = chronology18.dateNow((java.time.ZoneId) zoneOffset28);
        java.time.OffsetDateTime offsetDateTime33 = java.time.OffsetDateTime.ofInstant(instant4, (java.time.ZoneId) zoneOffset28);
        java.lang.String str34 = zoneOffset28.toString();
        java.time.LocalDate localDate36 = java.time.LocalDate.ofEpochDay((long) ' ');
        java.time.OffsetTime offsetTime37 = java.time.OffsetTime.MAX;
        java.time.LocalTime localTime38 = offsetTime37.toLocalTime();
        java.lang.String str39 = offsetTime37.toString();
        java.time.Duration duration40 = java.time.Duration.ZERO;
        java.lang.String str41 = duration40.toString();
        java.time.OffsetTime offsetTime42 = offsetTime37.plus((java.time.temporal.TemporalAmount) duration40);
        java.time.LocalTime localTime43 = offsetTime37.toLocalTime();
        java.time.chrono.ChronoLocalDateTime<?> wildcardChronoLocalDateTime44 = localDate36.atTime(localTime43);
        java.time.LocalDate localDate46 = localDate36.minusWeeks((long) 2097);
        java.lang.String str47 = localDate46.toString();
        org.joda.time.Period period48 = org.joda.time.Period.ZERO;
        org.joda.time.Period period49 = period48.normalizedStandard();
        org.joda.time.Period period51 = period48.plusHours(2);
        java.time.chrono.IsoEra isoEra52 = java.time.chrono.IsoEra.CE;
        boolean boolean53 = period51.equals((java.lang.Object) isoEra52);
        java.time.LocalTime localTime58 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime59 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime58);
        java.time.LocalTime localTime64 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime65 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime64);
        java.time.temporal.ChronoField chronoField66 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime68 = localTime64.with((java.time.temporal.TemporalField) chronoField66, (long) (short) 1);
        long long69 = localTime58.getLong((java.time.temporal.TemporalField) chronoField66);
        boolean boolean70 = isoEra52.isSupported((java.time.temporal.TemporalField) chronoField66);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery71 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period72 = isoEra52.query(periodTemporalQuery71);
        boolean boolean73 = period72.isNegative();
        java.time.Period period75 = period72.plusDays((long) ' ');
        java.time.temporal.ChronoField chronoField76 = java.time.temporal.ChronoField.SECOND_OF_DAY;
        boolean boolean77 = period72.equals((java.lang.Object) chronoField76);
        boolean boolean78 = localDate46.isSupported((java.time.temporal.TemporalField) chronoField76);
        // The following exception was thrown during execution in test generation
        try {
            int int79 = zoneOffset28.get((java.time.temporal.TemporalField) chronoField76);
            org.junit.Assert.fail("Expected exception of type java.time.temporal.UnsupportedTemporalTypeException; message: Unsupported field: SecondOfDay");
        } catch (java.time.temporal.UnsupportedTemporalTypeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(instant0);
        org.junit.Assert.assertNotNull(instant1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(instant4);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "ParseCaseSensitive(false)(Value(Year,4,10,EXCEEDS_PAD)'-'Value(MonthOfYear,2)'-'Value(DayOfMonth,2))[Offset(+HH:MM:ss,'Z')]" + "'", str6, "ParseCaseSensitive(false)(Value(Year,4,10,EXCEEDS_PAD)'-'Value(MonthOfYear,2)'-'Value(DayOfMonth,2))[Offset(+HH:MM:ss,'Z')]");
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(periodTemporalQuery8);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(format10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ParseCaseSensitive(false)(Value(Year,4,10,EXCEEDS_PAD)'-'Value(MonthOfYear,2)'-'Value(DayOfMonth,2))[Offset(+HH:MM:ss,'Z')]" + "'", str13, "ParseCaseSensitive(false)(Value(Year,4,10,EXCEEDS_PAD)'-'Value(MonthOfYear,2)'-'Value(DayOfMonth,2))[Offset(+HH:MM:ss,'Z')]");
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(periodTemporalQuery15);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(format17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(eraList20);
        org.junit.Assert.assertNotNull(zoneOffset23);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(clock25);
        org.junit.Assert.assertNotNull(zoneOffset28);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(clock30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(chronoLocalDate32);
        org.junit.Assert.assertNotNull(offsetDateTime33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "+01:10" + "'", str34, "+01:10");
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(offsetTime37);
        org.junit.Assert.assertNotNull(localTime38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "23:59:59.999999999-18:00" + "'", str39, "23:59:59.999999999-18:00");
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "PT0S" + "'", str41, "PT0S");
        org.junit.Assert.assertNotNull(offsetTime42);
        org.junit.Assert.assertNotNull(localTime43);
        org.junit.Assert.assertNotNull(wildcardChronoLocalDateTime44);
        org.junit.Assert.assertNotNull(localDate46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "1929-11-25" + "'", str47, "1929-11-25");
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertNotNull(period49);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertTrue("'" + isoEra52 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra52.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(localTime58);
        org.junit.Assert.assertNotNull(localTime59);
        org.junit.Assert.assertNotNull(localTime64);
        org.junit.Assert.assertNotNull(localTime65);
        org.junit.Assert.assertTrue("'" + chronoField66 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField66.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime68);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 3601000000001L + "'", long69 == 3601000000001L);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(periodTemporalQuery71);
        org.junit.Assert.assertNotNull(period72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(period75);
        org.junit.Assert.assertTrue("'" + chronoField76 + "' != '" + java.time.temporal.ChronoField.SECOND_OF_DAY + "'", chronoField76.equals(java.time.temporal.ChronoField.SECOND_OF_DAY));
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test2070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2070");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.nio.LongBuffer longBuffer3 = java.nio.LongBuffer.allocate((int) (short) 0);
        java.nio.Buffer buffer4 = longBuffer3.mark();
        boolean boolean5 = properties1.containsKey((java.lang.Object) longBuffer3);
        java.util.Collection<java.lang.Object> objCollection6 = properties1.values();
        java.util.Properties properties7 = new java.util.Properties(properties1);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) 3, chronology9);
        org.joda.time.DateTime.Property property11 = dateTime10.dayOfYear();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight((java.lang.Object) dateTime10, chronology12);
        org.joda.time.MutableDateTime mutableDateTime14 = dateTime10.toMutableDateTime();
        mutableDateTime14.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime14.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime18 = property17.roundFloor();
        java.time.Instant instant19 = java.time.Instant.now();
        java.time.Instant instant20 = java.time.Instant.now();
        boolean boolean21 = instant19.isAfter(instant20);
        boolean boolean22 = properties1.remove((java.lang.Object) mutableDateTime18, (java.lang.Object) boolean21);
        boolean boolean23 = properties1.isEmpty();
        java.io.PrintStream printStream25 = new java.io.PrintStream("subject:\n (GERMAN)");
        // The following exception was thrown during execution in test generation
        try {
            properties1.storeToXML((java.io.OutputStream) printStream25, "zh-TW", "");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: ");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(longBuffer3);
        org.junit.Assert.assertNotNull(buffer4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(objCollection6);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertNotNull(instant19);
        org.junit.Assert.assertNotNull(instant20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
    }

    @Test
    public void test2071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2071");
        int int0 = java.util.Spliterator.NONNULL;
        org.junit.Assert.assertTrue("'" + int0 + "' != '" + 256 + "'", int0 == 256);
    }

    @Test
    public void test2072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2072");
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.now();
        java.time.temporal.ChronoField chronoField5 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime7 = localDateTime4.with((java.time.temporal.TemporalField) chronoField5, (long) 10);
        java.time.LocalDateTime localDateTime9 = localDateTime4.minusMinutes((long) 12);
        java.time.OffsetDateTime offsetDateTime10 = java.time.OffsetDateTime.now();
        java.time.ZoneOffset zoneOffset12 = java.time.ZoneOffset.ofHours(9);
        java.time.OffsetDateTime offsetDateTime13 = offsetDateTime10.withOffsetSameLocal(zoneOffset12);
        java.time.ZoneOffset zoneOffset15 = java.time.ZoneOffset.ofHours(9);
        java.time.ZonedDateTime zonedDateTime16 = java.time.ZonedDateTime.ofInstant(localDateTime4, zoneOffset12, (java.time.ZoneId) zoneOffset15);
        // The following exception was thrown during execution in test generation
        try {
            java.time.OffsetTime offsetTime17 = java.time.OffsetTime.of((int) (byte) 0, (-624), 25, 86, zoneOffset15);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for MinuteOfHour (valid values 0 - 59): -624");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + chronoField5 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField5.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(offsetDateTime10);
        org.junit.Assert.assertNotNull(zoneOffset12);
        org.junit.Assert.assertNotNull(offsetDateTime13);
        org.junit.Assert.assertNotNull(zoneOffset15);
        org.junit.Assert.assertNotNull(zonedDateTime16);
    }

    @Test
    public void test2073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2073");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Duration duration2 = new org.joda.time.Duration(readableInstant0, readableInstant1);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = duration2.toPeriodTo(readableInstant3, periodType4);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.Duration duration8 = new org.joda.time.Duration(readableInstant6, readableInstant7);
        long long9 = duration8.getMillis();
        boolean boolean10 = duration2.isShorterThan((org.joda.time.ReadableDuration) duration8);
        long long11 = duration2.getMillis();
        long long12 = duration2.getStandardMinutes();
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
    }

    @Test
    public void test2074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2074");
        java.util.Hashtable<java.lang.Object, java.lang.Object> objMap0 = new java.util.Hashtable<java.lang.Object, java.lang.Object>();
        java.util.Set<java.util.Map.Entry<java.lang.Object, java.lang.Object>> objEntrySet1 = objMap0.entrySet();
        org.junit.Assert.assertNotNull(objEntrySet1);
    }

    @Test
    public void test2075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2075");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(36484003L);
        org.joda.time.DateTime dateTime2 = localTime1.toDateTimeToday();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str4 = localTime1.toString("2022-02-21T09:34:36.512Z");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime2);
    }

    @Test
    public void test2076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2076");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((long) 0, chronology2);
        org.joda.time.Chronology chronology4 = localTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField5 = chronology4.weekyearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime6 = org.joda.time.MutableDateTime.now(chronology4);
        org.joda.time.DateTimeField dateTimeField7 = chronology4.monthOfYear();
        java.util.Locale locale8 = java.util.Locale.getDefault();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket10 = new org.joda.time.format.DateTimeParserBucket((long) 28, chronology4, locale8, (java.lang.Integer) 0);
        long long13 = dateTimeParserBucket10.computeMillis(true, "Years");
        long long15 = dateTimeParserBucket10.computeMillis(false);
        dateTimeParserBucket10.setPivotYear((java.lang.Integer) 335);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 28L + "'", long13 == 28L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 28L + "'", long15 == 28L);
    }

    @Test
    public void test2077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2077");
        java.time.OffsetTime offsetTime0 = java.time.OffsetTime.MAX;
        java.time.LocalTime localTime1 = offsetTime0.toLocalTime();
        java.lang.String str2 = offsetTime0.toString();
        java.time.OffsetTime offsetTime3 = java.time.OffsetTime.MAX;
        java.time.LocalTime localTime4 = offsetTime3.toLocalTime();
        boolean boolean5 = offsetTime0.isBefore(offsetTime3);
        java.time.OffsetTime offsetTime7 = offsetTime3.withHour(0);
        java.time.ZoneOffset zoneOffset11 = java.time.ZoneOffset.ofHoursMinutes(1, 10);
        java.time.LocalDate localDate12 = java.time.LocalDate.now((java.time.ZoneId) zoneOffset11);
        java.time.LocalDate localDate13 = java.time.LocalDate.now((java.time.ZoneId) zoneOffset11);
        java.time.OffsetDateTime offsetDateTime15 = java.time.OffsetDateTime.now();
        java.time.LocalDate localDate17 = java.time.LocalDate.ofEpochDay((long) ' ');
        int int18 = localDate17.getMonthValue();
        org.joda.time.Period period19 = org.joda.time.Period.ZERO;
        org.joda.time.Period period20 = period19.normalizedStandard();
        org.joda.time.Period period22 = period19.plusHours(2);
        java.time.chrono.IsoEra isoEra23 = java.time.chrono.IsoEra.CE;
        boolean boolean24 = period22.equals((java.lang.Object) isoEra23);
        java.time.LocalTime localTime29 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime30 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime29);
        java.time.LocalTime localTime35 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime36 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime35);
        java.time.temporal.ChronoField chronoField37 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime39 = localTime35.with((java.time.temporal.TemporalField) chronoField37, (long) (short) 1);
        long long40 = localTime29.getLong((java.time.temporal.TemporalField) chronoField37);
        boolean boolean41 = isoEra23.isSupported((java.time.temporal.TemporalField) chronoField37);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery42 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period43 = isoEra23.query(periodTemporalQuery42);
        boolean boolean44 = period43.isNegative();
        java.time.Period period46 = period43.plusDays((long) ' ');
        java.time.temporal.ChronoField chronoField47 = java.time.temporal.ChronoField.SECOND_OF_DAY;
        boolean boolean48 = period43.equals((java.lang.Object) chronoField47);
        boolean boolean49 = localDate17.isSupported((java.time.temporal.TemporalField) chronoField47);
        java.time.temporal.TemporalUnit temporalUnit50 = chronoField47.getRangeUnit();
        java.time.OffsetDateTime offsetDateTime51 = offsetDateTime15.truncatedTo(temporalUnit50);
        java.time.LocalDate localDate54 = java.time.LocalDate.ofEpochDay((long) ' ');
        int int55 = localDate54.getMonthValue();
        org.joda.time.Period period56 = org.joda.time.Period.ZERO;
        org.joda.time.Period period57 = period56.normalizedStandard();
        org.joda.time.Period period59 = period56.plusHours(2);
        java.time.chrono.IsoEra isoEra60 = java.time.chrono.IsoEra.CE;
        boolean boolean61 = period59.equals((java.lang.Object) isoEra60);
        java.time.LocalTime localTime66 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime67 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime66);
        java.time.LocalTime localTime72 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime73 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime72);
        java.time.temporal.ChronoField chronoField74 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime76 = localTime72.with((java.time.temporal.TemporalField) chronoField74, (long) (short) 1);
        long long77 = localTime66.getLong((java.time.temporal.TemporalField) chronoField74);
        boolean boolean78 = isoEra60.isSupported((java.time.temporal.TemporalField) chronoField74);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery79 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period80 = isoEra60.query(periodTemporalQuery79);
        boolean boolean81 = period80.isNegative();
        java.time.Period period83 = period80.plusDays((long) ' ');
        java.time.temporal.ChronoField chronoField84 = java.time.temporal.ChronoField.SECOND_OF_DAY;
        boolean boolean85 = period80.equals((java.lang.Object) chronoField84);
        boolean boolean86 = localDate54.isSupported((java.time.temporal.TemporalField) chronoField84);
        java.time.temporal.TemporalUnit temporalUnit87 = chronoField84.getRangeUnit();
        java.time.OffsetDateTime offsetDateTime88 = offsetDateTime51.minus(8L, temporalUnit87);
        java.time.LocalDate localDate89 = localDate13.minus((long) '4', temporalUnit87);
        java.time.Duration duration90 = java.time.Duration.of((long) '#', temporalUnit87);
        java.time.LocalDateTime localDateTime91 = java.time.LocalDateTime.now();
        java.time.LocalDateTime localDateTime92 = java.time.LocalDateTime.now();
        java.time.temporal.ChronoField chronoField93 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime95 = localDateTime92.with((java.time.temporal.TemporalField) chronoField93, (long) 10);
        boolean boolean96 = localDateTime91.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime92);
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime98 = temporalUnit87.addTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime92, (long) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            java.time.temporal.Temporal temporal99 = offsetTime7.adjustInto((java.time.temporal.Temporal) localDateTime92);
            org.junit.Assert.fail("Expected exception of type java.time.temporal.UnsupportedTemporalTypeException; message: Unsupported field: OffsetSeconds");
        } catch (java.time.temporal.UnsupportedTemporalTypeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(offsetTime0);
        org.junit.Assert.assertNotNull(localTime1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "23:59:59.999999999-18:00" + "'", str2, "23:59:59.999999999-18:00");
        org.junit.Assert.assertNotNull(offsetTime3);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(offsetTime7);
        org.junit.Assert.assertNotNull(zoneOffset11);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(offsetDateTime15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertTrue("'" + isoEra23 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra23.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(localTime29);
        org.junit.Assert.assertNotNull(localTime30);
        org.junit.Assert.assertNotNull(localTime35);
        org.junit.Assert.assertNotNull(localTime36);
        org.junit.Assert.assertTrue("'" + chronoField37 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField37.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime39);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 3601000000001L + "'", long40 == 3601000000001L);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(periodTemporalQuery42);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertTrue("'" + chronoField47 + "' != '" + java.time.temporal.ChronoField.SECOND_OF_DAY + "'", chronoField47.equals(java.time.temporal.ChronoField.SECOND_OF_DAY));
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + temporalUnit50 + "' != '" + java.time.temporal.ChronoUnit.DAYS + "'", temporalUnit50.equals(java.time.temporal.ChronoUnit.DAYS));
        org.junit.Assert.assertNotNull(offsetDateTime51);
        org.junit.Assert.assertNotNull(localDate54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 2 + "'", int55 == 2);
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertNotNull(period59);
        org.junit.Assert.assertTrue("'" + isoEra60 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra60.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(localTime66);
        org.junit.Assert.assertNotNull(localTime67);
        org.junit.Assert.assertNotNull(localTime72);
        org.junit.Assert.assertNotNull(localTime73);
        org.junit.Assert.assertTrue("'" + chronoField74 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField74.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime76);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 3601000000001L + "'", long77 == 3601000000001L);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(periodTemporalQuery79);
        org.junit.Assert.assertNotNull(period80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(period83);
        org.junit.Assert.assertTrue("'" + chronoField84 + "' != '" + java.time.temporal.ChronoField.SECOND_OF_DAY + "'", chronoField84.equals(java.time.temporal.ChronoField.SECOND_OF_DAY));
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertTrue("'" + temporalUnit87 + "' != '" + java.time.temporal.ChronoUnit.DAYS + "'", temporalUnit87.equals(java.time.temporal.ChronoUnit.DAYS));
        org.junit.Assert.assertNotNull(offsetDateTime88);
        org.junit.Assert.assertNotNull(localDate89);
        org.junit.Assert.assertNotNull(duration90);
        org.junit.Assert.assertNotNull(localDateTime91);
        org.junit.Assert.assertNotNull(localDateTime92);
        org.junit.Assert.assertTrue("'" + chronoField93 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField93.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime95);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + true + "'", boolean96 == true);
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime98);
    }

    @Test
    public void test2078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2078");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Duration duration2 = new org.joda.time.Duration(readableInstant0, readableInstant1);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = duration2.toPeriodTo(readableInstant3, periodType4);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.Duration duration8 = new org.joda.time.Duration(readableInstant6, readableInstant7);
        long long9 = duration8.getMillis();
        boolean boolean10 = duration2.isShorterThan((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) 3, chronology12);
        org.joda.time.DateTime.Property property14 = dateTime13.dayOfYear();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight((java.lang.Object) dateTime13, chronology15);
        org.joda.time.MutableDateTime mutableDateTime17 = dateTime13.toMutableDateTime();
        mutableDateTime17.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime17.dayOfWeek();
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime17.year();
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime17.weekyear();
        boolean boolean23 = duration2.equals((java.lang.Object) mutableDateTime17);
        mutableDateTime17.addMonths((int) ' ');
        mutableDateTime17.add((long) (byte) 10);
        org.joda.time.Period period28 = org.joda.time.Period.ZERO;
        org.joda.time.Period period29 = period28.normalizedStandard();
        org.joda.time.Period period31 = period28.plusHours(2);
        java.time.chrono.IsoEra isoEra32 = java.time.chrono.IsoEra.CE;
        boolean boolean33 = period31.equals((java.lang.Object) isoEra32);
        int int34 = period31.getMinutes();
        mutableDateTime17.add((org.joda.time.ReadablePeriod) period31);
        java.util.TimeZone timeZone37 = null;
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forTimeZone(timeZone37);
        org.joda.time.DateMidnight dateMidnight39 = new org.joda.time.DateMidnight((long) 1970, dateTimeZone38);
        long long42 = dateTimeZone38.convertLocalToUTC((long) 3, false);
        long long45 = dateTimeZone38.convertLocalToUTC(0L, true);
        mutableDateTime17.setZoneRetainFields(dateTimeZone38);
        java.lang.String str47 = dateTimeZone38.toString();
        org.joda.time.chrono.EthiopicChronology ethiopicChronology48 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone38);
        org.joda.time.DateTimeField dateTimeField49 = ethiopicChronology48.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone50 = ethiopicChronology48.getZone();
        org.joda.time.DateTimeField dateTimeField51 = ethiopicChronology48.era();
        org.joda.time.DateTimeField dateTimeField52 = ethiopicChronology48.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone53 = ethiopicChronology48.getZone();
        org.joda.time.DateTimeField dateTimeField54 = ethiopicChronology48.yearOfEra();
        org.joda.time.DateTimeField dateTimeField55 = ethiopicChronology48.halfdayOfDay();
        long long58 = dateTimeField55.getDifferenceAsLong(185068800000L, (long) 37);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertTrue("'" + isoEra32 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra32.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 3L + "'", long42 == 3L);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Etc/UTC" + "'", str47, "Etc/UTC");
        org.junit.Assert.assertNotNull(ethiopicChronology48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 4283L + "'", long58 == 4283L);
    }

    @Test
    public void test2079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2079");
        // The following exception was thrown during execution in test generation
        try {
            java.net.URL uRL3 = new java.net.URL("January", "2022-02-21T09:36:57.890Z", "2022-02-21T09:34:14.187Z");
            org.junit.Assert.fail("Expected exception of type java.net.MalformedURLException; message: unknown protocol: january");
        } catch (java.net.MalformedURLException e) {
            // Expected exception.
        }
    }

    @Test
    public void test2080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2080");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.time.LocalTime localTime6 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime7 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime6);
        java.time.LocalTime localTime12 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime13 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime12);
        java.time.temporal.ChronoField chronoField14 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime16 = localTime12.with((java.time.temporal.TemporalField) chronoField14, (long) (short) 1);
        long long17 = localTime6.getLong((java.time.temporal.TemporalField) chronoField14);
        java.time.LocalTime localTime19 = localTime6.withSecond((int) (short) 1);
        java.lang.Object obj21 = properties1.put((java.lang.Object) localTime19, (java.lang.Object) "117");
        java.lang.Object obj22 = properties1.clone();
        java.util.Set<java.lang.String> strSet23 = properties1.stringPropertyNames();
        java.lang.Object obj24 = null;
        org.joda.time.Weeks weeks25 = org.joda.time.Weeks.ONE;
        java.util.concurrent.TimeUnit timeUnit26 = java.util.concurrent.TimeUnit.NANOSECONDS;
        boolean boolean27 = weeks25.equals((java.lang.Object) timeUnit26);
        org.joda.time.MutablePeriod mutablePeriod28 = weeks25.toMutablePeriod();
        int int29 = mutablePeriod28.getSeconds();
        mutablePeriod28.addHours((int) 'a');
        mutablePeriod28.addMillis((int) '#');
        mutablePeriod28.addDays(4);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj36 = properties1.putIfAbsent(obj24, (java.lang.Object) 4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertTrue("'" + chronoField14 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField14.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 3601000000001L + "'", long17 == 3601000000001L);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertEquals(obj22.toString(), "{01:00:01.000000001=117}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj22), "{01:00:01.000000001=117}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj22), "{01:00:01.000000001=117}");
        org.junit.Assert.assertNotNull(strSet23);
        org.junit.Assert.assertNotNull(weeks25);
        org.junit.Assert.assertNotNull(timeUnit26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(mutablePeriod28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
    }

    @Test
    public void test2081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2081");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 3, chronology1);
        org.joda.time.DateTime.Property property3 = dateTime2.dayOfYear();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight((java.lang.Object) dateTime2, chronology4);
        org.joda.time.MutableDateTime mutableDateTime6 = dateTime2.toMutableDateTime();
        mutableDateTime6.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime6.dayOfWeek();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime6.setDayOfWeek(42);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 42 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(property9);
    }

    @Test
    public void test2082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2082");
        java.security.KeyException keyException1 = new java.security.KeyException("599b081c1808");
    }

    @Test
    public void test2083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2083");
        // The following exception was thrown during execution in test generation
        try {
            java.time.ZoneId zoneId1 = java.time.ZoneId.of("2022-02-21T09:36:20.133");
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid ID for region-based ZoneId, invalid format: 2022-02-21T09:36:20.133");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
    }

    @Test
    public void test2084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2084");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 3, chronology1);
        org.joda.time.Period period3 = org.joda.time.Period.ZERO;
        org.joda.time.Period period4 = period3.normalizedStandard();
        org.joda.time.Period period6 = period4.minusMinutes((int) ' ');
        org.joda.time.Period period8 = period6.minusMonths((int) (byte) 0);
        org.joda.time.PeriodType periodType9 = period8.getPeriodType();
        org.joda.time.DateTime dateTime10 = dateTime2.minus((org.joda.time.ReadablePeriod) period8);
        org.joda.time.DateTime dateTime12 = dateTime2.plusHours(34);
        org.joda.time.DateTime dateTime14 = dateTime12.minusSeconds((int) '#');
        long long15 = dateTime14.getMillis();
        org.joda.time.DateTime dateTime17 = dateTime14.plusYears(32770);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 122365003L + "'", long15 == 122365003L);
        org.junit.Assert.assertNotNull(dateTime17);
    }

    @Test
    public void test2085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2085");
        java.util.stream.IntStream intStream2 = java.util.stream.IntStream.rangeClosed(100, (int) '4');
        java.util.stream.IntStream intStream4 = intStream2.skip((long) 256);
        java.util.PrimitiveIterator.OfInt ofInt5 = intStream4.iterator();
        boolean boolean6 = ofInt5.hasNext();
        // The following exception was thrown during execution in test generation
        try {
            ofInt5.remove();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: remove");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intStream2);
        org.junit.Assert.assertNotNull(intStream4);
        org.junit.Assert.assertNotNull(ofInt5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test2086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2086");
        java.time.Period period1 = java.time.Period.ofDays(576);
        org.junit.Assert.assertNotNull(period1);
    }

    @Test
    public void test2087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2087");
        java.time.OffsetDateTime offsetDateTime0 = java.time.OffsetDateTime.now();
        java.time.temporal.ChronoField chronoField1 = java.time.temporal.ChronoField.HOUR_OF_DAY;
        boolean boolean2 = offsetDateTime0.isSupported((java.time.temporal.TemporalField) chronoField1);
        java.time.OffsetTime offsetTime3 = java.time.OffsetTime.MAX;
        java.time.LocalTime localTime4 = offsetTime3.toLocalTime();
        boolean boolean5 = chronoField1.isSupportedBy((java.time.temporal.TemporalAccessor) localTime4);
        java.time.LocalTime localTime7 = localTime4.withNano(28);
        java.util.Properties properties8 = null;
        java.util.Properties properties9 = new java.util.Properties(properties8);
        java.time.LocalTime localTime14 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime15 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime14);
        java.time.LocalTime localTime20 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime21 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime20);
        java.time.temporal.ChronoField chronoField22 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime24 = localTime20.with((java.time.temporal.TemporalField) chronoField22, (long) (short) 1);
        long long25 = localTime14.getLong((java.time.temporal.TemporalField) chronoField22);
        java.time.LocalTime localTime27 = localTime14.withSecond((int) (short) 1);
        java.lang.Object obj29 = properties9.put((java.lang.Object) localTime27, (java.lang.Object) "117");
        boolean boolean31 = properties9.containsValue((java.lang.Object) 6);
        java.time.LocalDate localDate34 = java.time.LocalDate.ofEpochDay((long) ' ');
        int int35 = localDate34.getMonthValue();
        java.lang.Object obj36 = properties9.replace((java.lang.Object) 21, (java.lang.Object) localDate34);
        java.time.LocalDateTime localDateTime37 = java.time.LocalDateTime.MIN;
        java.time.Month month38 = java.time.Month.NOVEMBER;
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime39 = localDateTime37.with((java.time.temporal.TemporalAdjuster) month38);
        java.time.LocalDate localDate42 = java.time.LocalDate.ofEpochDay((long) ' ');
        int int43 = localDate42.getMonthValue();
        org.joda.time.Period period44 = org.joda.time.Period.ZERO;
        org.joda.time.Period period45 = period44.normalizedStandard();
        org.joda.time.Period period47 = period44.plusHours(2);
        java.time.chrono.IsoEra isoEra48 = java.time.chrono.IsoEra.CE;
        boolean boolean49 = period47.equals((java.lang.Object) isoEra48);
        java.time.LocalTime localTime54 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime55 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime54);
        java.time.LocalTime localTime60 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime61 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime60);
        java.time.temporal.ChronoField chronoField62 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime64 = localTime60.with((java.time.temporal.TemporalField) chronoField62, (long) (short) 1);
        long long65 = localTime54.getLong((java.time.temporal.TemporalField) chronoField62);
        boolean boolean66 = isoEra48.isSupported((java.time.temporal.TemporalField) chronoField62);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery67 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period68 = isoEra48.query(periodTemporalQuery67);
        boolean boolean69 = period68.isNegative();
        java.time.Period period71 = period68.plusDays((long) ' ');
        java.time.temporal.ChronoField chronoField72 = java.time.temporal.ChronoField.SECOND_OF_DAY;
        boolean boolean73 = period68.equals((java.lang.Object) chronoField72);
        boolean boolean74 = localDate42.isSupported((java.time.temporal.TemporalField) chronoField72);
        java.time.temporal.TemporalUnit temporalUnit75 = chronoField72.getRangeUnit();
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime76 = localDateChronoLocalDateTime39.plus(1L, temporalUnit75);
        boolean boolean77 = localDate34.isSupported(temporalUnit75);
        java.time.LocalDateTime localDateTime78 = localTime4.atDate(localDate34);
        java.time.temporal.ChronoField chronoField79 = java.time.temporal.ChronoField.HOUR_OF_DAY;
        long long80 = localTime4.getLong((java.time.temporal.TemporalField) chronoField79);
        org.junit.Assert.assertNotNull(offsetDateTime0);
        org.junit.Assert.assertTrue("'" + chronoField1 + "' != '" + java.time.temporal.ChronoField.HOUR_OF_DAY + "'", chronoField1.equals(java.time.temporal.ChronoField.HOUR_OF_DAY));
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(offsetTime3);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertTrue("'" + chronoField22 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField22.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime24);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 3601000000001L + "'", long25 == 3601000000001L);
        org.junit.Assert.assertNotNull(localTime27);
        org.junit.Assert.assertNull(obj29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2 + "'", int35 == 2);
        org.junit.Assert.assertNull(obj36);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertTrue("'" + month38 + "' != '" + java.time.Month.NOVEMBER + "'", month38.equals(java.time.Month.NOVEMBER));
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime39);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertTrue("'" + isoEra48 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra48.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(localTime54);
        org.junit.Assert.assertNotNull(localTime55);
        org.junit.Assert.assertNotNull(localTime60);
        org.junit.Assert.assertNotNull(localTime61);
        org.junit.Assert.assertTrue("'" + chronoField62 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField62.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime64);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 3601000000001L + "'", long65 == 3601000000001L);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(periodTemporalQuery67);
        org.junit.Assert.assertNotNull(period68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(period71);
        org.junit.Assert.assertTrue("'" + chronoField72 + "' != '" + java.time.temporal.ChronoField.SECOND_OF_DAY + "'", chronoField72.equals(java.time.temporal.ChronoField.SECOND_OF_DAY));
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + temporalUnit75 + "' != '" + java.time.temporal.ChronoUnit.DAYS + "'", temporalUnit75.equals(java.time.temporal.ChronoUnit.DAYS));
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(localDateTime78);
        org.junit.Assert.assertTrue("'" + chronoField79 + "' != '" + java.time.temporal.ChronoField.HOUR_OF_DAY + "'", chronoField79.equals(java.time.temporal.ChronoField.HOUR_OF_DAY));
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 23L + "'", long80 == 23L);
    }

    @Test
    public void test2088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2088");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 3, chronology1);
        org.joda.time.DateTime.Property property3 = dateTime2.dayOfYear();
        org.joda.time.Interval interval4 = property3.toInterval();
        org.joda.time.Weeks weeks5 = org.joda.time.Weeks.ONE;
        java.util.concurrent.TimeUnit timeUnit6 = java.util.concurrent.TimeUnit.NANOSECONDS;
        boolean boolean7 = weeks5.equals((java.lang.Object) timeUnit6);
        timeUnit6.sleep((long) 10);
        boolean boolean10 = interval4.equals((java.lang.Object) timeUnit6);
        long long12 = timeUnit6.toSeconds((long) 97);
        java.lang.Thread thread13 = null;
        // The following exception was thrown during execution in test generation
        try {
            timeUnit6.timedJoin(thread13, 31L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(weeks5);
        org.junit.Assert.assertNotNull(timeUnit6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
    }

    @Test
    public void test2089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2089");
        java.util.stream.LongStream longStream1 = java.util.stream.LongStream.of(0L);
        java.util.LongSummaryStatistics longSummaryStatistics2 = new java.util.LongSummaryStatistics();
        longSummaryStatistics2.accept(3);
        long long5 = longSummaryStatistics2.getMax();
        java.util.LongSummaryStatistics longSummaryStatistics6 = new java.util.LongSummaryStatistics();
        longSummaryStatistics6.accept(3);
        java.util.function.LongConsumer longConsumer9 = longSummaryStatistics2.andThen((java.util.function.LongConsumer) longSummaryStatistics6);
        java.util.stream.LongStream longStream10 = longStream1.peek((java.util.function.LongConsumer) longSummaryStatistics6);
        java.util.OptionalLong optionalLong11 = longStream10.max();
        java.util.LongSummaryStatistics longSummaryStatistics12 = new java.util.LongSummaryStatistics();
        longSummaryStatistics12.accept(3);
        long long15 = longSummaryStatistics12.getMax();
        double double16 = longSummaryStatistics12.getAverage();
        longSummaryStatistics12.accept(6);
        optionalLong11.ifPresent((java.util.function.LongConsumer) longSummaryStatistics12);
        org.junit.Assert.assertNotNull(longStream1);
        org.junit.Assert.assertEquals(longSummaryStatistics2.toString(), "LongSummaryStatistics{count=1, sum=3, min=3, average=3.000000, max=3}");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 3L + "'", long5 == 3L);
        org.junit.Assert.assertEquals(longSummaryStatistics6.toString(), "LongSummaryStatistics{count=2, sum=3, min=0, average=1.500000, max=3}");
        org.junit.Assert.assertNotNull(longConsumer9);
        org.junit.Assert.assertNotNull(longStream10);
        org.junit.Assert.assertNotNull(optionalLong11);
        org.junit.Assert.assertEquals(longSummaryStatistics12.toString(), "LongSummaryStatistics{count=3, sum=9, min=0, average=3.000000, max=6}");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 3L + "'", long15 == 3L);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 3.0d + "'", double16 == 3.0d);
    }

    @Test
    public void test2090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2090");
        java.nio.charset.Charset charset1 = java.nio.charset.Charset.defaultCharset();
        java.nio.charset.CharsetDecoder charsetDecoder2 = charset1.newDecoder();
        java.nio.charset.Charset charset3 = java.nio.charset.Charset.defaultCharset();
        boolean boolean4 = charset1.contains(charset3);
        java.nio.charset.CharsetEncoder charsetEncoder5 = charset1.newEncoder();
        byte[] byteArray6 = charsetEncoder5.replacement();
        java.nio.charset.Charset charset7 = java.nio.charset.Charset.defaultCharset();
        java.nio.charset.CharsetDecoder charsetDecoder8 = charset7.newDecoder();
        float float9 = charsetDecoder8.maxCharsPerByte();
        float float10 = charsetDecoder8.averageCharsPerByte();
        java.nio.charset.CodingErrorAction codingErrorAction11 = charsetDecoder8.unmappableCharacterAction();
        java.nio.charset.CharsetEncoder charsetEncoder12 = charsetEncoder5.onUnmappableCharacter(codingErrorAction11);
        java.nio.charset.Charset charset13 = java.nio.charset.Charset.defaultCharset();
        java.nio.charset.CharsetDecoder charsetDecoder14 = charset13.newDecoder();
        java.nio.charset.Charset charset15 = java.nio.charset.Charset.defaultCharset();
        boolean boolean16 = charset13.contains(charset15);
        java.nio.charset.CharsetEncoder charsetEncoder17 = charset13.newEncoder();
        byte[] byteArray18 = charsetEncoder17.replacement();
        java.nio.charset.CharsetEncoder charsetEncoder19 = charsetEncoder5.replaceWith(byteArray18);
        java.nio.charset.Charset charset20 = java.nio.charset.Charset.defaultCharset();
        java.nio.charset.CharsetDecoder charsetDecoder21 = charset20.newDecoder();
        java.nio.charset.Charset charset22 = java.nio.charset.Charset.defaultCharset();
        boolean boolean23 = charset20.contains(charset22);
        java.nio.charset.CharsetEncoder charsetEncoder24 = charset20.newEncoder();
        char[] charArray25 = new char[] {};
        java.nio.CharBuffer charBuffer26 = java.nio.CharBuffer.wrap(charArray25);
        java.nio.ByteBuffer byteBuffer27 = charsetEncoder24.encode(charBuffer26);
        java.nio.CharBuffer charBuffer28 = charBuffer26.slice();
        java.nio.CharBuffer charBuffer29 = charBuffer26.compact();
        java.nio.CharBuffer charBuffer30 = charBuffer26.duplicate();
        java.nio.ByteBuffer byteBuffer31 = charsetEncoder5.encode(charBuffer26);
        byte[] byteArray32 = byteBuffer31.array();
        // The following exception was thrown during execution in test generation
        try {
            java.net.InetAddress inetAddress33 = java.net.InetAddress.getByAddress("1929-11-25", byteArray32);
            org.junit.Assert.fail("Expected exception of type java.net.UnknownHostException; message: addr is of illegal length");
        } catch (java.net.UnknownHostException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charset1);
        org.junit.Assert.assertNotNull(charsetDecoder2);
        org.junit.Assert.assertNotNull(charset3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(charsetEncoder5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[63]");
        org.junit.Assert.assertNotNull(charset7);
        org.junit.Assert.assertNotNull(charsetDecoder8);
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + 1.0f + "'", float9 == 1.0f);
        org.junit.Assert.assertTrue("'" + float10 + "' != '" + 1.0f + "'", float10 == 1.0f);
        org.junit.Assert.assertNotNull(codingErrorAction11);
        org.junit.Assert.assertNotNull(charsetEncoder12);
        org.junit.Assert.assertNotNull(charset13);
        org.junit.Assert.assertNotNull(charsetDecoder14);
        org.junit.Assert.assertNotNull(charset15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(charsetEncoder17);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[63]");
        org.junit.Assert.assertNotNull(charsetEncoder19);
        org.junit.Assert.assertNotNull(charset20);
        org.junit.Assert.assertNotNull(charsetDecoder21);
        org.junit.Assert.assertNotNull(charset22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(charsetEncoder24);
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray25), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray25), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray25), "[]");
        org.junit.Assert.assertNotNull(charBuffer26);
        org.junit.Assert.assertNotNull(byteBuffer27);
        org.junit.Assert.assertNotNull(charBuffer28);
        org.junit.Assert.assertNotNull(charBuffer29);
        org.junit.Assert.assertNotNull(charBuffer30);
        org.junit.Assert.assertNotNull(byteBuffer31);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[]");
    }

    @Test
    public void test2091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2091");
        java.util.Set<java.lang.String> strSet0 = java.time.ZoneId.getAvailableZoneIds();
        java.util.stream.Stream<java.lang.String> strStream1 = strSet0.parallelStream();
        boolean boolean3 = strSet0.contains((java.lang.Object) 1.0d);
        java.util.stream.Stream<java.lang.String> strStream4 = strSet0.parallelStream();
        org.joda.time.YearMonthDay yearMonthDay5 = new org.joda.time.YearMonthDay();
        java.util.TimeZone timeZone8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight((long) 1970, dateTimeZone9);
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) 3600000, dateTimeZone9);
        org.joda.time.DateMidnight dateMidnight12 = yearMonthDay5.toDateMidnight(dateTimeZone9);
        boolean boolean13 = strSet0.equals((java.lang.Object) dateMidnight12);
        org.joda.time.DateMidnight dateMidnight15 = dateMidnight12.minusYears(574);
        org.joda.time.MutableDateTime mutableDateTime16 = dateMidnight12.toMutableDateTime();
        org.joda.time.DateMidnight.Property property17 = dateMidnight12.year();
        org.junit.Assert.assertNotNull(strSet0);
        org.junit.Assert.assertNotNull(strStream1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(strStream4);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertNotNull(property17);
    }

    @Test
    public void test2092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2092");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.now();
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery1 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period2 = localDateTime0.query(periodTemporalQuery1);
        java.time.chrono.IsoChronology isoChronology3 = period2.getChronology();
        java.time.Clock clock4 = java.time.Clock.systemUTC();
        java.time.Duration duration6 = java.time.Duration.ofSeconds((long) 256);
        java.time.Clock clock7 = java.time.Clock.tick(clock4, duration6);
        java.time.Duration duration9 = java.time.Duration.ofMinutes((long) 3);
        java.time.Duration duration10 = duration9.abs();
        java.time.Clock clock11 = java.time.Clock.offset(clock4, duration9);
        java.time.LocalDate localDate12 = java.time.LocalDate.now(clock11);
        java.time.LocalDate localDate13 = isoChronology3.dateNow(clock11);
        java.lang.String str14 = isoChronology3.toString();
        java.time.chrono.ChronoLocalDate chronoLocalDate16 = isoChronology3.dateEpochDay((long) (short) 1);
        java.time.LocalDateTime localDateTime17 = java.time.LocalDateTime.now();
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery18 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period19 = localDateTime17.query(periodTemporalQuery18);
        java.time.chrono.IsoChronology isoChronology20 = period19.getChronology();
        java.time.Clock clock21 = java.time.Clock.systemUTC();
        java.time.Duration duration23 = java.time.Duration.ofSeconds((long) 256);
        java.time.Clock clock24 = java.time.Clock.tick(clock21, duration23);
        java.time.Duration duration26 = java.time.Duration.ofMinutes((long) 3);
        java.time.Duration duration27 = duration26.abs();
        java.time.Clock clock28 = java.time.Clock.offset(clock21, duration26);
        java.time.LocalDate localDate29 = java.time.LocalDate.now(clock28);
        java.time.LocalDate localDate30 = isoChronology20.dateNow(clock28);
        java.lang.String str31 = isoChronology20.toString();
        java.time.chrono.IsoEra isoEra32 = java.time.chrono.IsoEra.CE;
        int int33 = isoEra32.getValue();
        int int35 = isoChronology20.prolepticYear((java.time.chrono.Era) isoEra32, 96000000);
        int int37 = isoChronology3.prolepticYear((java.time.chrono.Era) isoEra32, 31);
        java.util.List<java.time.chrono.Era> eraList38 = isoChronology3.eras();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(periodTemporalQuery1);
        org.junit.Assert.assertNotNull(period2);
        org.junit.Assert.assertNotNull(isoChronology3);
        org.junit.Assert.assertNotNull(clock4);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(clock7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(clock11);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ISO" + "'", str14, "ISO");
        org.junit.Assert.assertNotNull(chronoLocalDate16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(periodTemporalQuery18);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(isoChronology20);
        org.junit.Assert.assertNotNull(clock21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(clock24);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(clock28);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "ISO" + "'", str31, "ISO");
        org.junit.Assert.assertTrue("'" + isoEra32 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra32.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 96000000 + "'", int35 == 96000000);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 31 + "'", int37 == 31);
        org.junit.Assert.assertNotNull(eraList38);
    }

    @Test
    public void test2093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2093");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 3, chronology1);
        org.joda.time.DateTime.Property property3 = dateTime2.dayOfYear();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight((java.lang.Object) dateTime2, chronology4);
        org.joda.time.MutableDateTime mutableDateTime6 = dateTime2.toMutableDateTime();
        org.joda.time.Days days7 = org.joda.time.Days.ONE;
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadablePeriod) days7);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) 3, chronology10);
        org.joda.time.DateTime.Property property12 = dateTime11.dayOfYear();
        org.joda.time.Interval interval13 = property12.toInterval();
        mutableInterval8.setInterval((org.joda.time.ReadableInterval) interval13);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) 3, chronology16);
        org.joda.time.DateTime.Property property18 = dateTime17.dayOfYear();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight((java.lang.Object) dateTime17, chronology19);
        org.joda.time.MutableDateTime mutableDateTime21 = dateTime17.toMutableDateTime();
        org.joda.time.Days days22 = org.joda.time.Days.ONE;
        org.joda.time.MutableInterval mutableInterval23 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime17, (org.joda.time.ReadablePeriod) days22);
        mutableInterval8.setInterval((org.joda.time.ReadableInterval) mutableInterval23);
        long long25 = mutableInterval23.toDurationMillis();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.LocalTime localTime28 = new org.joda.time.LocalTime((long) 0, chronology27);
        org.joda.time.Chronology chronology29 = localTime28.getChronology();
        org.joda.time.DateTimeField dateTimeField30 = chronology29.weekyearOfCentury();
        org.joda.time.DurationField durationField31 = chronology29.weekyears();
        org.joda.time.DurationField durationField32 = chronology29.seconds();
        org.joda.time.Chronology chronology33 = chronology29.withUTC();
        org.joda.time.DateTimeField dateTimeField34 = chronology29.hourOfDay();
        mutableInterval23.setChronology(chronology29);
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime(chronology29);
        org.joda.time.DateTimeField dateTimeField37 = chronology29.minuteOfDay();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(days7);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(mutableDateTime21);
        org.junit.Assert.assertNotNull(days22);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 86400000L + "'", long25 == 86400000L);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField37);
    }

    @Test
    public void test2094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2094");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withYearOfCentury((int) 'a');
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.plusSeconds(6);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.Duration duration8 = new org.joda.time.Duration(readableInstant6, readableInstant7);
        long long9 = duration8.getMillis();
        org.joda.time.Duration duration11 = duration8.plus((long) (byte) 1);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime3.minus((org.joda.time.ReadableDuration) duration11);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.withWeekOfWeekyear((int) '#');
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.withCenturyOfEra(10);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.Duration duration19 = new org.joda.time.Duration(readableInstant17, readableInstant18);
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.PeriodType periodType21 = null;
        org.joda.time.Period period22 = duration19.toPeriodTo(readableInstant20, periodType21);
        long long23 = duration19.getStandardSeconds();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((long) 3, chronology25);
        org.joda.time.DateTime.Property property27 = dateTime26.dayOfYear();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateMidnight dateMidnight29 = new org.joda.time.DateMidnight((java.lang.Object) dateTime26, chronology28);
        org.joda.time.DateMidnight dateMidnight31 = dateMidnight29.minusMonths((-1));
        org.joda.time.DateMidnight dateMidnight33 = dateMidnight29.withDayOfYear((int) ' ');
        org.joda.time.Interval interval34 = duration19.toIntervalTo((org.joda.time.ReadableInstant) dateMidnight33);
        long long35 = duration19.getStandardSeconds();
        org.joda.time.LocalDateTime localDateTime36 = localDateTime16.minus((org.joda.time.ReadableDuration) duration19);
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.ReadableInstant readableInstant38 = null;
        org.joda.time.Duration duration39 = new org.joda.time.Duration(readableInstant37, readableInstant38);
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.PeriodType periodType41 = null;
        org.joda.time.Period period42 = duration39.toPeriodTo(readableInstant40, periodType41);
        long long43 = duration39.getStandardSeconds();
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((long) 3, chronology45);
        org.joda.time.DateTime.Property property47 = dateTime46.dayOfYear();
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.DateMidnight dateMidnight49 = new org.joda.time.DateMidnight((java.lang.Object) dateTime46, chronology48);
        org.joda.time.DateMidnight dateMidnight51 = dateMidnight49.minusMonths((-1));
        org.joda.time.DateMidnight dateMidnight53 = dateMidnight49.withDayOfYear((int) ' ');
        org.joda.time.Interval interval54 = duration39.toIntervalTo((org.joda.time.ReadableInstant) dateMidnight53);
        org.joda.time.LocalDateTime localDateTime55 = localDateTime36.plus((org.joda.time.ReadableDuration) duration39);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateMidnight31);
        org.junit.Assert.assertNotNull(dateMidnight33);
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(dateMidnight51);
        org.junit.Assert.assertNotNull(dateMidnight53);
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertNotNull(localDateTime55);
    }

    @Test
    public void test2095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2095");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.nio.LongBuffer longBuffer3 = java.nio.LongBuffer.allocate((int) (short) 0);
        java.nio.Buffer buffer4 = longBuffer3.mark();
        boolean boolean5 = properties1.containsKey((java.lang.Object) longBuffer3);
        java.util.Enumeration<java.lang.Object> objEnumeration6 = properties1.elements();
        java.io.InputStream inputStream7 = null;
        // The following exception was thrown during execution in test generation
        try {
            properties1.load(inputStream7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(longBuffer3);
        org.junit.Assert.assertNotNull(buffer4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(objEnumeration6);
    }

    @Test
    public void test2096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2096");
        java.net.URI uRI1 = new java.net.URI("hi!");
        java.lang.String str2 = uRI1.getRawAuthority();
        java.lang.String str3 = uRI1.toString();
        java.lang.String str4 = uRI1.getRawFragment();
        java.net.URI uRI6 = new java.net.URI("hi!");
        java.lang.String str7 = uRI6.toASCIIString();
        java.net.URI uRI8 = uRI1.resolve(uRI6);
        java.net.URI uRI9 = uRI1.parseServerAuthority();
        java.lang.String str10 = uRI9.getAuthority();
        // The following exception was thrown during execution in test generation
        try {
            java.io.File file11 = new java.io.File(uRI9);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: URI is not absolute");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "hi!" + "'", str3, "hi!");
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertNotNull(uRI8);
        org.junit.Assert.assertNotNull(uRI9);
        org.junit.Assert.assertNull(str10);
    }

    @Test
    public void test2097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2097");
        java.nio.charset.CoderResult coderResult1 = java.nio.charset.CoderResult.unmappableForLength(241);
        org.junit.Assert.assertNotNull(coderResult1);
    }

    @Test
    public void test2098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2098");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 3, chronology1);
        org.joda.time.Period period3 = org.joda.time.Period.ZERO;
        org.joda.time.Period period4 = period3.normalizedStandard();
        org.joda.time.Period period6 = period4.minusMinutes((int) ' ');
        org.joda.time.Period period8 = period6.minusMonths((int) (byte) 0);
        org.joda.time.PeriodType periodType9 = period8.getPeriodType();
        org.joda.time.DateTime dateTime10 = dateTime2.minus((org.joda.time.ReadablePeriod) period8);
        org.joda.time.DateTime dateTime12 = dateTime2.plusHours(34);
        org.joda.time.DateTime dateTime14 = dateTime2.plusMonths(5);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.LocalTime localTime17 = new org.joda.time.LocalTime((long) 0, chronology16);
        org.joda.time.Chronology chronology18 = localTime17.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.weekyearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime20 = org.joda.time.MutableDateTime.now(chronology18);
        mutableDateTime20.setWeekOfWeekyear((int) '#');
        mutableDateTime20.addHours(0);
        org.joda.time.Days days25 = org.joda.time.Days.daysBetween((org.joda.time.ReadableInstant) dateTime14, (org.joda.time.ReadableInstant) mutableDateTime20);
        org.joda.time.DateTimeZone dateTimeZone26 = dateTime14.getZone();
        org.joda.time.Chronology chronology27 = dateTime14.getChronology();
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertNotNull(days25);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(chronology27);
    }

    @Test
    public void test2099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2099");
        org.joda.time.YearMonthDay yearMonthDay0 = new org.joda.time.YearMonthDay();
        org.joda.time.DateTime dateTime1 = yearMonthDay0.toDateTimeAtCurrentTime();
        org.junit.Assert.assertNotNull(dateTime1);
    }

    @Test
    public void test2100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2100");
        java.nio.charset.Charset charset0 = java.nio.charset.Charset.defaultCharset();
        java.nio.charset.CharsetDecoder charsetDecoder1 = charset0.newDecoder();
        java.nio.charset.Charset charset2 = java.nio.charset.Charset.defaultCharset();
        boolean boolean3 = charset0.contains(charset2);
        boolean boolean4 = charset2.isRegistered();
        org.junit.Assert.assertNotNull(charset0);
        org.junit.Assert.assertNotNull(charsetDecoder1);
        org.junit.Assert.assertNotNull(charset2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
    }

    @Test
    public void test2101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2101");
        java.text.Format.Field field0 = null;
        java.text.FieldPosition fieldPosition1 = new java.text.FieldPosition(field0);
        fieldPosition1.setBeginIndex((int) (short) 100);
        int int4 = fieldPosition1.getEndIndex();
        java.text.Format.Field field5 = fieldPosition1.getFieldAttribute();
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.now();
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery7 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period8 = localDateTime6.query(periodTemporalQuery7);
        java.time.chrono.IsoChronology isoChronology9 = period8.getChronology();
        java.time.Clock clock10 = java.time.Clock.systemUTC();
        java.time.Duration duration12 = java.time.Duration.ofSeconds((long) 256);
        java.time.Clock clock13 = java.time.Clock.tick(clock10, duration12);
        java.time.Duration duration15 = java.time.Duration.ofMinutes((long) 3);
        java.time.Duration duration16 = duration15.abs();
        java.time.Clock clock17 = java.time.Clock.offset(clock10, duration15);
        java.time.LocalDate localDate18 = java.time.LocalDate.now(clock17);
        java.time.LocalDate localDate19 = isoChronology9.dateNow(clock17);
        java.lang.String str20 = isoChronology9.toString();
        java.time.chrono.ChronoLocalDate chronoLocalDate22 = isoChronology9.dateEpochDay((long) (short) 1);
        boolean boolean23 = fieldPosition1.equals((java.lang.Object) (short) 1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNull(field5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(periodTemporalQuery7);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(isoChronology9);
        org.junit.Assert.assertNotNull(clock10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(clock13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(clock17);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "ISO" + "'", str20, "ISO");
        org.junit.Assert.assertNotNull(chronoLocalDate22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test2102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2102");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Duration duration2 = new org.joda.time.Duration(readableInstant0, readableInstant1);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = duration2.toPeriodTo(readableInstant3, periodType4);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.Duration duration8 = new org.joda.time.Duration(readableInstant6, readableInstant7);
        long long9 = duration8.getMillis();
        boolean boolean10 = duration2.isShorterThan((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) 3, chronology12);
        org.joda.time.DateTime.Property property14 = dateTime13.dayOfYear();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight((java.lang.Object) dateTime13, chronology15);
        org.joda.time.MutableDateTime mutableDateTime17 = dateTime13.toMutableDateTime();
        mutableDateTime17.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime17.dayOfWeek();
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime17.year();
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime17.weekyear();
        boolean boolean23 = duration2.equals((java.lang.Object) mutableDateTime17);
        mutableDateTime17.addMonths((int) ' ');
        mutableDateTime17.add((long) (byte) 10);
        org.joda.time.Period period28 = org.joda.time.Period.ZERO;
        org.joda.time.Period period29 = period28.normalizedStandard();
        org.joda.time.Period period31 = period28.plusHours(2);
        java.time.chrono.IsoEra isoEra32 = java.time.chrono.IsoEra.CE;
        boolean boolean33 = period31.equals((java.lang.Object) isoEra32);
        int int34 = period31.getMinutes();
        mutableDateTime17.add((org.joda.time.ReadablePeriod) period31);
        java.util.TimeZone timeZone37 = null;
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forTimeZone(timeZone37);
        org.joda.time.DateMidnight dateMidnight39 = new org.joda.time.DateMidnight((long) 1970, dateTimeZone38);
        long long42 = dateTimeZone38.convertLocalToUTC((long) 3, false);
        long long45 = dateTimeZone38.convertLocalToUTC(0L, true);
        mutableDateTime17.setZoneRetainFields(dateTimeZone38);
        java.lang.String str47 = dateTimeZone38.toString();
        org.joda.time.chrono.EthiopicChronology ethiopicChronology48 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone38);
        org.joda.time.DateTimeField dateTimeField49 = ethiopicChronology48.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone50 = ethiopicChronology48.getZone();
        org.joda.time.DateTimeField dateTimeField51 = ethiopicChronology48.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField52 = ethiopicChronology48.minuteOfDay();
        org.joda.time.Chronology chronology53 = ethiopicChronology48.withUTC();
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.LocalDateTime localDateTime55 = new org.joda.time.LocalDateTime(chronology54);
        org.joda.time.LocalDateTime.Property property56 = localDateTime55.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime58 = property56.setCopy((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime60 = property56.addToCopy(21);
        org.joda.time.LocalDateTime localDateTime61 = property56.roundHalfCeilingCopy();
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.LocalTime localTime64 = new org.joda.time.LocalTime((long) 0, chronology63);
        org.joda.time.Chronology chronology65 = localTime64.getChronology();
        org.joda.time.DateTimeField dateTimeField66 = chronology65.weekyearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime67 = org.joda.time.MutableDateTime.now(chronology65);
        org.joda.time.DateTimeField dateTimeField68 = chronology65.monthOfYear();
        int int70 = dateTimeField68.getLeapAmount((long) (byte) 100);
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.LocalTime localTime73 = new org.joda.time.LocalTime((long) 0, chronology72);
        org.joda.time.LocalTime localTime75 = localTime73.minusMillis(2022);
        org.joda.time.LocalTime localTime77 = localTime75.minusHours(3);
        java.util.stream.IntStream intStream80 = java.util.stream.IntStream.rangeClosed(100, (int) '4');
        int[] intArray81 = intStream80.toArray();
        int int82 = dateTimeField68.getMaximumValue((org.joda.time.ReadablePartial) localTime75, intArray81);
        // The following exception was thrown during execution in test generation
        try {
            ethiopicChronology48.validate((org.joda.time.ReadablePartial) localDateTime61, intArray81);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertTrue("'" + isoEra32 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra32.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 3L + "'", long42 == 3L);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Etc/UTC" + "'", str47, "Etc/UTC");
        org.junit.Assert.assertNotNull(ethiopicChronology48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(chronology65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(mutableDateTime67);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(localTime75);
        org.junit.Assert.assertNotNull(localTime77);
        org.junit.Assert.assertNotNull(intStream80);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[]");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 12 + "'", int82 == 12);
    }

    @Test
    public void test2103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2103");
        // The following exception was thrown during execution in test generation
        try {
            java.net.URI uRI3 = new java.net.URI("1970-02-01T00:00:00.000Z/1970-02-01T00:00:00.000Z", "1", "Koordinierte Universalzeit");
            org.junit.Assert.fail("Expected exception of type java.net.URISyntaxException; message: Illegal character in scheme name at index 0: 1970-02-01T00:00:00.000Z/1970-02-01T00:00:00.000Z:1#Koordinierte%20Universalzeit");
        } catch (java.net.URISyntaxException e) {
            // Expected exception.
        }
    }

    @Test
    public void test2104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2104");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((long) 0, chronology2);
        org.joda.time.Chronology chronology4 = localTime3.getChronology();
        java.util.Locale locale5 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale6 = java.util.Locale.GERMANY;
        java.lang.String str7 = locale5.getDisplayScript(locale6);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket9 = new org.joda.time.format.DateTimeParserBucket((long) 1970, chronology4, locale5, (java.lang.Integer) 1);
        dateTimeParserBucket9.setOffset((-1));
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.Duration duration14 = new org.joda.time.Duration(readableInstant12, readableInstant13);
        org.joda.time.Seconds seconds15 = duration14.toStandardSeconds();
        int int16 = seconds15.getSeconds();
        org.joda.time.Seconds seconds18 = seconds15.dividedBy(28);
        org.joda.time.Seconds seconds19 = seconds18.negated();
        org.joda.time.DurationFieldType durationFieldType20 = seconds19.getFieldType();
        boolean boolean21 = dateTimeParserBucket9.restoreState((java.lang.Object) durationFieldType20);
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.Duration duration24 = new org.joda.time.Duration(readableInstant22, readableInstant23);
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.PeriodType periodType26 = null;
        org.joda.time.Period period27 = duration24.toPeriodTo(readableInstant25, periodType26);
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.Duration duration30 = new org.joda.time.Duration(readableInstant28, readableInstant29);
        long long31 = duration30.getMillis();
        boolean boolean32 = duration24.isShorterThan((org.joda.time.ReadableDuration) duration30);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime((long) 3, chronology34);
        org.joda.time.DateTime.Property property36 = dateTime35.dayOfYear();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.DateMidnight dateMidnight38 = new org.joda.time.DateMidnight((java.lang.Object) dateTime35, chronology37);
        org.joda.time.MutableDateTime mutableDateTime39 = dateTime35.toMutableDateTime();
        mutableDateTime39.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property42 = mutableDateTime39.dayOfWeek();
        org.joda.time.MutableDateTime.Property property43 = mutableDateTime39.year();
        org.joda.time.MutableDateTime.Property property44 = mutableDateTime39.weekyear();
        boolean boolean45 = duration24.equals((java.lang.Object) mutableDateTime39);
        mutableDateTime39.addMonths((int) ' ');
        mutableDateTime39.add((long) (byte) 10);
        org.joda.time.Period period50 = org.joda.time.Period.ZERO;
        org.joda.time.Period period51 = period50.normalizedStandard();
        org.joda.time.Period period53 = period50.plusHours(2);
        java.time.chrono.IsoEra isoEra54 = java.time.chrono.IsoEra.CE;
        boolean boolean55 = period53.equals((java.lang.Object) isoEra54);
        int int56 = period53.getMinutes();
        mutableDateTime39.add((org.joda.time.ReadablePeriod) period53);
        java.util.TimeZone timeZone59 = null;
        org.joda.time.DateTimeZone dateTimeZone60 = org.joda.time.DateTimeZone.forTimeZone(timeZone59);
        org.joda.time.DateMidnight dateMidnight61 = new org.joda.time.DateMidnight((long) 1970, dateTimeZone60);
        long long64 = dateTimeZone60.convertLocalToUTC((long) 3, false);
        long long67 = dateTimeZone60.convertLocalToUTC(0L, true);
        mutableDateTime39.setZoneRetainFields(dateTimeZone60);
        java.lang.String str69 = dateTimeZone60.toString();
        org.joda.time.chrono.EthiopicChronology ethiopicChronology70 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone60);
        org.joda.time.DateTimeField dateTimeField71 = ethiopicChronology70.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone72 = ethiopicChronology70.getZone();
        org.joda.time.DateTimeField dateTimeField73 = ethiopicChronology70.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField74 = ethiopicChronology70.minuteOfDay();
        org.joda.time.Chronology chronology75 = ethiopicChronology70.withUTC();
        org.joda.time.DateTimeZone dateTimeZone76 = ethiopicChronology70.getZone();
        dateTimeParserBucket9.setZone(dateTimeZone76);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(seconds15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(seconds18);
        org.junit.Assert.assertNotNull(seconds19);
        org.junit.Assert.assertNotNull(durationFieldType20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(mutableDateTime39);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertTrue("'" + isoEra54 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra54.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone60);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 3L + "'", long64 == 3L);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 0L + "'", long67 == 0L);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "Etc/UTC" + "'", str69, "Etc/UTC");
        org.junit.Assert.assertNotNull(ethiopicChronology70);
        org.junit.Assert.assertNotNull(dateTimeField71);
        org.junit.Assert.assertNotNull(dateTimeZone72);
        org.junit.Assert.assertNotNull(dateTimeField73);
        org.junit.Assert.assertNotNull(dateTimeField74);
        org.junit.Assert.assertNotNull(chronology75);
        org.junit.Assert.assertNotNull(dateTimeZone76);
    }

    @Test
    public void test2105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2105");
        java.io.File file0 = null;
        java.io.File file2 = new java.io.File(file0, "1970-01-01T00:00:00.003Z");
        java.net.URL uRL3 = file2.toURL();
        boolean boolean4 = file2.canRead();
        boolean boolean5 = file2.mkdirs();
        org.junit.Assert.assertNull("file2.getParent() == null", file2.getParent());
        org.junit.Assert.assertEquals(file2.toString(), "1970-01-01T00:00:00.003Z");
        org.junit.Assert.assertNotNull(uRL3);
// flaky:         org.junit.Assert.assertEquals(uRL3.toString(), "file:/experiment/1970-01-01T00:00:00.003Z/");
// flaky:         org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
// flaky:         org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test2106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2106");
        org.joda.time.TimeOfDay timeOfDay1 = org.joda.time.TimeOfDay.fromMillisOfDay((long) (short) 0);
        org.joda.time.TimeOfDay timeOfDay3 = org.joda.time.TimeOfDay.fromMillisOfDay((long) (short) 0);
        org.joda.time.Hours hours4 = org.joda.time.Hours.hoursBetween((org.joda.time.ReadablePartial) timeOfDay1, (org.joda.time.ReadablePartial) timeOfDay3);
        org.joda.time.DurationFieldType durationFieldType5 = org.joda.time.DurationFieldType.hours();
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay3.withFieldAdded(durationFieldType5, (int) (byte) 0);
        int int8 = timeOfDay3.getMillisOfSecond();
        org.joda.time.TimeOfDay timeOfDay10 = timeOfDay3.plusHours(9);
        org.joda.time.TimeOfDay.Property property11 = timeOfDay3.secondOfMinute();
        java.time.ZoneOffset zoneOffset14 = java.time.ZoneOffset.ofHoursMinutes(1, 10);
        java.time.LocalDate localDate15 = java.time.LocalDate.now((java.time.ZoneId) zoneOffset14);
        boolean boolean16 = property11.equals((java.lang.Object) localDate15);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = property11.getFieldType();
        org.joda.time.TimeOfDay timeOfDay18 = property11.withMinimumValue();
        org.joda.time.TimeOfDay timeOfDay20 = timeOfDay18.minusMinutes(145);
        org.junit.Assert.assertNotNull(timeOfDay1);
        org.junit.Assert.assertNotNull(timeOfDay3);
        org.junit.Assert.assertNotNull(hours4);
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(zoneOffset14);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(timeOfDay18);
        org.junit.Assert.assertNotNull(timeOfDay20);
    }

    @Test
    public void test2107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2107");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 3, chronology1);
        org.joda.time.Period period3 = org.joda.time.Period.ZERO;
        org.joda.time.Period period4 = period3.normalizedStandard();
        org.joda.time.Period period6 = period4.minusMinutes((int) ' ');
        org.joda.time.Period period8 = period6.minusMonths((int) (byte) 0);
        org.joda.time.PeriodType periodType9 = period8.getPeriodType();
        org.joda.time.DateTime dateTime10 = dateTime2.minus((org.joda.time.ReadablePeriod) period8);
        org.joda.time.DurationFieldType durationFieldType11 = org.joda.time.DurationFieldType.weekyears();
        org.joda.time.DateTime dateTime13 = dateTime10.withFieldAdded(durationFieldType11, 23);
        int int14 = dateTime13.getCenturyOfEra();
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.Duration duration17 = new org.joda.time.Duration(readableInstant15, readableInstant16);
        org.joda.time.Duration duration19 = duration17.withMillis((-1L));
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) 3, chronology21);
        org.joda.time.DateTime.Property property23 = dateTime22.dayOfYear();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateMidnight dateMidnight25 = new org.joda.time.DateMidnight((java.lang.Object) dateTime22, chronology24);
        org.joda.time.DateMidnight dateMidnight27 = dateMidnight25.minusMonths((-1));
        org.joda.time.DateMidnight dateMidnight29 = dateMidnight25.withDayOfYear((int) ' ');
        org.joda.time.PeriodType periodType30 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period31 = duration19.toPeriodFrom((org.joda.time.ReadableInstant) dateMidnight25, periodType30);
        org.joda.time.PeriodType periodType32 = period31.getPeriodType();
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod(periodType32);
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime((long) 3, chronology36);
        org.joda.time.DateTime.Property property38 = dateTime37.dayOfYear();
        org.joda.time.Interval interval39 = property38.toInterval();
        org.joda.time.DateTimeField dateTimeField40 = property38.getField();
        org.joda.time.DateTime dateTime42 = property38.addToCopy((long) (byte) 1);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.LocalTime localTime45 = new org.joda.time.LocalTime((long) 0, chronology44);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime((long) 3, chronology47);
        org.joda.time.DateTime.Property property49 = dateTime48.dayOfYear();
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.DateMidnight dateMidnight51 = new org.joda.time.DateMidnight((java.lang.Object) dateTime48, chronology50);
        org.joda.time.DateTime dateTime52 = localTime45.toDateTime((org.joda.time.ReadableInstant) dateTime48);
        org.joda.time.DateTime dateTime54 = dateTime52.minusMillis((int) (byte) 0);
        org.joda.time.DateTime dateTime56 = dateTime52.withYearOfCentury((int) (byte) 10);
        org.joda.time.DateTime.Property property57 = dateTime56.hourOfDay();
        boolean boolean58 = dateTime42.isEqual((org.joda.time.ReadableInstant) dateTime56);
        org.joda.time.Duration duration59 = new org.joda.time.Duration(readableInstant34, (org.joda.time.ReadableInstant) dateTime56);
        mutablePeriod33.add((org.joda.time.ReadableDuration) duration59);
        boolean boolean61 = dateTime13.equals((java.lang.Object) mutablePeriod33);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(durationFieldType11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 19 + "'", int14 == 19);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateMidnight27);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertNotNull(periodType30);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(periodType32);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
    }

    @Test
    public void test2108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2108");
        org.joda.time.Period period0 = org.joda.time.Period.ZERO;
        org.joda.time.Period period1 = period0.normalizedStandard();
        org.joda.time.Period period3 = period0.plusHours(2);
        java.time.chrono.IsoEra isoEra4 = java.time.chrono.IsoEra.CE;
        boolean boolean5 = period3.equals((java.lang.Object) isoEra4);
        java.time.LocalTime localTime10 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime11 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime10);
        java.time.LocalTime localTime16 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime17 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime16);
        java.time.temporal.ChronoField chronoField18 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime20 = localTime16.with((java.time.temporal.TemporalField) chronoField18, (long) (short) 1);
        long long21 = localTime10.getLong((java.time.temporal.TemporalField) chronoField18);
        boolean boolean22 = isoEra4.isSupported((java.time.temporal.TemporalField) chronoField18);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery23 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period24 = isoEra4.query(periodTemporalQuery23);
        boolean boolean25 = period24.isNegative();
        java.time.Period period27 = period24.plusDays((long) ' ');
        java.time.temporal.ChronoField chronoField28 = java.time.temporal.ChronoField.SECOND_OF_DAY;
        boolean boolean29 = period24.equals((java.lang.Object) chronoField28);
        java.time.chrono.ChronoPeriod chronoPeriod30 = period24.negated();
        java.time.OffsetDateTime offsetDateTime31 = java.time.OffsetDateTime.now();
        java.time.temporal.ChronoField chronoField32 = java.time.temporal.ChronoField.HOUR_OF_DAY;
        boolean boolean33 = offsetDateTime31.isSupported((java.time.temporal.TemporalField) chronoField32);
        java.time.Month month34 = offsetDateTime31.getMonth();
        java.time.temporal.Temporal temporal35 = period24.addTo((java.time.temporal.Temporal) offsetDateTime31);
        java.time.DayOfWeek dayOfWeek36 = java.time.DayOfWeek.from((java.time.temporal.TemporalAccessor) offsetDateTime31);
        java.time.LocalDateTime localDateTime37 = java.time.LocalDateTime.now();
        java.time.LocalDateTime localDateTime39 = localDateTime37.minusYears((long) (byte) 10);
        java.time.LocalDateTime localDateTime40 = java.time.LocalDateTime.now();
        java.time.LocalDateTime localDateTime42 = localDateTime40.minusYears((long) (byte) 10);
        boolean boolean43 = localDateTime37.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime42);
        java.time.temporal.ChronoField chronoField44 = java.time.temporal.ChronoField.MICRO_OF_DAY;
        java.time.LocalTime localTime49 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime50 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime49);
        java.time.LocalTime localTime55 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime56 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime55);
        java.time.temporal.ChronoField chronoField57 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime59 = localTime55.with((java.time.temporal.TemporalField) chronoField57, (long) (short) 1);
        long long60 = localTime49.getLong((java.time.temporal.TemporalField) chronoField57);
        java.time.LocalTime localTime62 = chronoField44.adjustInto(localTime49, (long) (byte) 1);
        boolean boolean63 = localDateTime37.isSupported((java.time.temporal.TemporalField) chronoField44);
        boolean boolean64 = dayOfWeek36.isSupported((java.time.temporal.TemporalField) chronoField44);
        java.time.DayOfWeek dayOfWeek66 = dayOfWeek36.minus((long) 'a');
        // The following exception was thrown during execution in test generation
        try {
            java.time.ZonedDateTime zonedDateTime67 = java.time.ZonedDateTime.from((java.time.temporal.TemporalAccessor) dayOfWeek66);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Unable to obtain ZonedDateTime from TemporalAccessor: TUESDAY of type java.time.DayOfWeek");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period0);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertTrue("'" + isoEra4 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra4.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertTrue("'" + chronoField18 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField18.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 3601000000001L + "'", long21 == 3601000000001L);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(periodTemporalQuery23);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertTrue("'" + chronoField28 + "' != '" + java.time.temporal.ChronoField.SECOND_OF_DAY + "'", chronoField28.equals(java.time.temporal.ChronoField.SECOND_OF_DAY));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(chronoPeriod30);
        org.junit.Assert.assertNotNull(offsetDateTime31);
        org.junit.Assert.assertTrue("'" + chronoField32 + "' != '" + java.time.temporal.ChronoField.HOUR_OF_DAY + "'", chronoField32.equals(java.time.temporal.ChronoField.HOUR_OF_DAY));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + month34 + "' != '" + java.time.Month.FEBRUARY + "'", month34.equals(java.time.Month.FEBRUARY));
        org.junit.Assert.assertNotNull(temporal35);
        org.junit.Assert.assertTrue("'" + dayOfWeek36 + "' != '" + java.time.DayOfWeek.MONDAY + "'", dayOfWeek36.equals(java.time.DayOfWeek.MONDAY));
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + chronoField44 + "' != '" + java.time.temporal.ChronoField.MICRO_OF_DAY + "'", chronoField44.equals(java.time.temporal.ChronoField.MICRO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime49);
        org.junit.Assert.assertNotNull(localTime50);
        org.junit.Assert.assertNotNull(localTime55);
        org.junit.Assert.assertNotNull(localTime56);
        org.junit.Assert.assertTrue("'" + chronoField57 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField57.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime59);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 3601000000001L + "'", long60 == 3601000000001L);
        org.junit.Assert.assertNotNull(localTime62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + dayOfWeek66 + "' != '" + java.time.DayOfWeek.TUESDAY + "'", dayOfWeek66.equals(java.time.DayOfWeek.TUESDAY));
    }

    @Test
    public void test2109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2109");
        java.util.GregorianCalendar gregorianCalendar0 = new java.util.GregorianCalendar();
        java.util.GregorianCalendar gregorianCalendar6 = new java.util.GregorianCalendar(12, 4096, 7, (-1), (int) (short) 10);
        gregorianCalendar6.set((int) ':', 3, 256, 5, 17, 3600000);
        int int14 = gregorianCalendar6.getWeekYear();
        int int15 = gregorianCalendar6.getFirstDayOfWeek();
        java.util.function.UnaryOperator<java.util.GregorianCalendar> gregorianCalendarUnaryOperator16 = java.util.function.UnaryOperator.identity();
        java.util.stream.Stream<java.util.GregorianCalendar> gregorianCalendarStream17 = java.util.stream.Stream.iterate(gregorianCalendar6, gregorianCalendarUnaryOperator16);
        java.util.stream.Stream<java.util.GregorianCalendar> gregorianCalendarStream18 = java.util.stream.Stream.iterate(gregorianCalendar0, gregorianCalendarUnaryOperator16);
        // The following exception was thrown during execution in test generation
        try {
            gregorianCalendar0.roll(461, false);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 59 + "'", int14 == 59);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(gregorianCalendarUnaryOperator16);
        org.junit.Assert.assertNotNull(gregorianCalendarStream17);
        org.junit.Assert.assertNotNull(gregorianCalendarStream18);
    }

    @Test
    public void test2110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2110");
        double[] doubleArray4 = new double[] { (byte) 0, 59, 83400000000000L, '4' };
        java.util.stream.DoubleStream doubleStream5 = java.util.stream.DoubleStream.of(doubleArray4);
        java.util.OptionalDouble optionalDouble6 = doubleStream5.min();
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[0.0, 59.0, 8.34E13, 52.0]");
        org.junit.Assert.assertNotNull(doubleStream5);
        org.junit.Assert.assertNotNull(optionalDouble6);
    }

    @Test
    public void test2111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2111");
        java.util.GregorianCalendar gregorianCalendar5 = new java.util.GregorianCalendar(12, 4096, 7, (-1), (int) (short) 10);
        int int6 = gregorianCalendar5.getWeeksInWeekYear();
        java.util.TimeZone timeZone7 = gregorianCalendar5.getTimeZone();
        gregorianCalendar5.setLenient(false);
        int int10 = gregorianCalendar5.getFirstDayOfWeek();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.fromCalendarFields((java.util.Calendar) gregorianCalendar5);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: MONTH");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 52 + "'", int6 == 52);
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
    }

    @Test
    public void test2112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2112");
        java.time.OffsetTime offsetTime0 = java.time.OffsetTime.MAX;
        java.time.LocalTime localTime1 = offsetTime0.toLocalTime();
        java.lang.String str2 = offsetTime0.toString();
        java.time.Duration duration3 = java.time.Duration.ZERO;
        java.lang.String str4 = duration3.toString();
        java.time.OffsetTime offsetTime5 = offsetTime0.plus((java.time.temporal.TemporalAmount) duration3);
        java.time.OffsetTime offsetTime7 = offsetTime0.plusNanos((long) 0);
        java.time.LocalTime localTime12 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime13 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime12);
        java.time.temporal.ChronoField chronoField14 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime16 = localTime12.with((java.time.temporal.TemporalField) chronoField14, (long) (short) 1);
        java.util.Locale locale17 = java.util.Locale.GERMANY;
        java.lang.String str18 = chronoField14.getDisplayName(locale17);
        java.time.OffsetTime offsetTime20 = offsetTime7.with((java.time.temporal.TemporalField) chronoField14, (long) 28);
        org.joda.time.Period period21 = org.joda.time.Period.ZERO;
        org.joda.time.Period period22 = period21.normalizedStandard();
        org.joda.time.Period period24 = period21.plusHours(2);
        java.time.chrono.IsoEra isoEra25 = java.time.chrono.IsoEra.CE;
        boolean boolean26 = period24.equals((java.lang.Object) isoEra25);
        java.time.LocalTime localTime31 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime32 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime31);
        java.time.LocalTime localTime37 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime38 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime37);
        java.time.temporal.ChronoField chronoField39 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime41 = localTime37.with((java.time.temporal.TemporalField) chronoField39, (long) (short) 1);
        long long42 = localTime31.getLong((java.time.temporal.TemporalField) chronoField39);
        boolean boolean43 = isoEra25.isSupported((java.time.temporal.TemporalField) chronoField39);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery44 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period45 = isoEra25.query(periodTemporalQuery44);
        boolean boolean46 = period45.isNegative();
        java.time.Period period48 = period45.plusDays((long) ' ');
        java.time.temporal.ChronoField chronoField49 = java.time.temporal.ChronoField.SECOND_OF_DAY;
        boolean boolean50 = period45.equals((java.lang.Object) chronoField49);
        java.time.chrono.ChronoPeriod chronoPeriod51 = period45.negated();
        java.time.OffsetTime offsetTime52 = offsetTime7.minus((java.time.temporal.TemporalAmount) period45);
        java.time.OffsetDateTime offsetDateTime53 = java.time.OffsetDateTime.MAX;
        java.time.temporal.Temporal temporal54 = period45.addTo((java.time.temporal.Temporal) offsetDateTime53);
        java.time.OffsetTime offsetTime55 = offsetDateTime53.toOffsetTime();
        org.junit.Assert.assertNotNull(offsetTime0);
        org.junit.Assert.assertNotNull(localTime1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "23:59:59.999999999-18:00" + "'", str2, "23:59:59.999999999-18:00");
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "PT0S" + "'", str4, "PT0S");
        org.junit.Assert.assertNotNull(offsetTime5);
        org.junit.Assert.assertNotNull(offsetTime7);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertTrue("'" + chronoField14 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField14.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "NanoOfDay" + "'", str18, "NanoOfDay");
        org.junit.Assert.assertNotNull(offsetTime20);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertTrue("'" + isoEra25 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra25.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(localTime31);
        org.junit.Assert.assertNotNull(localTime32);
        org.junit.Assert.assertNotNull(localTime37);
        org.junit.Assert.assertNotNull(localTime38);
        org.junit.Assert.assertTrue("'" + chronoField39 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField39.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime41);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 3601000000001L + "'", long42 == 3601000000001L);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(periodTemporalQuery44);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertTrue("'" + chronoField49 + "' != '" + java.time.temporal.ChronoField.SECOND_OF_DAY + "'", chronoField49.equals(java.time.temporal.ChronoField.SECOND_OF_DAY));
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(chronoPeriod51);
        org.junit.Assert.assertNotNull(offsetTime52);
        org.junit.Assert.assertNotNull(offsetDateTime53);
        org.junit.Assert.assertNotNull(temporal54);
        org.junit.Assert.assertNotNull(offsetTime55);
    }

    @Test
    public void test2113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2113");
        java.time.LocalTime localTime4 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime9 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime10 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime9);
        java.time.LocalTime localTime15 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime16 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime15);
        java.time.temporal.ChronoField chronoField17 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime19 = localTime15.with((java.time.temporal.TemporalField) chronoField17, (long) (short) 1);
        long long20 = localTime9.getLong((java.time.temporal.TemporalField) chronoField17);
        java.time.LocalTime localTime22 = localTime9.withSecond((int) (short) 1);
        java.time.temporal.ChronoField chronoField23 = java.time.temporal.ChronoField.SECOND_OF_DAY;
        java.time.temporal.ValueRange valueRange24 = localTime22.range((java.time.temporal.TemporalField) chronoField23);
        java.time.LocalTime localTime30 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime31 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime30);
        java.time.LocalTime localTime36 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime37 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime36);
        java.time.temporal.ChronoField chronoField38 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime40 = localTime36.with((java.time.temporal.TemporalField) chronoField38, (long) (short) 1);
        long long41 = localTime30.getLong((java.time.temporal.TemporalField) chronoField38);
        java.time.LocalTime localTime43 = localTime30.withSecond((int) (short) 1);
        java.time.temporal.ChronoField chronoField44 = java.time.temporal.ChronoField.SECOND_OF_DAY;
        java.time.temporal.ValueRange valueRange45 = localTime43.range((java.time.temporal.TemporalField) chronoField44);
        int int46 = valueRange24.checkValidIntValue((long) 2022, (java.time.temporal.TemporalField) chronoField44);
        java.time.temporal.ValueRange valueRange47 = localTime4.range((java.time.temporal.TemporalField) chronoField44);
        long long48 = valueRange47.getMinimum();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime((java.lang.Object) valueRange47);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: java.time.temporal.ValueRange");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertTrue("'" + chronoField17 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField17.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 3601000000001L + "'", long20 == 3601000000001L);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertTrue("'" + chronoField23 + "' != '" + java.time.temporal.ChronoField.SECOND_OF_DAY + "'", chronoField23.equals(java.time.temporal.ChronoField.SECOND_OF_DAY));
        org.junit.Assert.assertNotNull(valueRange24);
        org.junit.Assert.assertNotNull(localTime30);
        org.junit.Assert.assertNotNull(localTime31);
        org.junit.Assert.assertNotNull(localTime36);
        org.junit.Assert.assertNotNull(localTime37);
        org.junit.Assert.assertTrue("'" + chronoField38 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField38.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime40);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 3601000000001L + "'", long41 == 3601000000001L);
        org.junit.Assert.assertNotNull(localTime43);
        org.junit.Assert.assertTrue("'" + chronoField44 + "' != '" + java.time.temporal.ChronoField.SECOND_OF_DAY + "'", chronoField44.equals(java.time.temporal.ChronoField.SECOND_OF_DAY));
        org.junit.Assert.assertNotNull(valueRange45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2022 + "'", int46 == 2022);
        org.junit.Assert.assertNotNull(valueRange47);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
    }

    @Test
    public void test2114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2114");
        java.util.GregorianCalendar gregorianCalendar5 = new java.util.GregorianCalendar(12, 4096, 7, (-1), (int) (short) 10);
        gregorianCalendar5.set((int) ':', 3, 256, 5, 17, 3600000);
        int int13 = gregorianCalendar5.getWeekYear();
        int int14 = gregorianCalendar5.getFirstDayOfWeek();
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.fromCalendarFields((java.util.Calendar) gregorianCalendar5);
        gregorianCalendar5.setTimeInMillis((long) 2097);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 59 + "'", int13 == 59);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(localDateTime15);
    }

    @Test
    public void test2115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2115");
        java.net.URISyntaxException uRISyntaxException3 = new java.net.URISyntaxException("java.nio.DirectByteBufferR[pos=0 lim=10800000 cap=10800000]", "2022-02-21T09:34:25.512", 83400);
        int int4 = uRISyntaxException3.getIndex();
        java.lang.String str5 = uRISyntaxException3.getReason();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 83400 + "'", int4 == 83400);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "2022-02-21T09:34:25.512" + "'", str5, "2022-02-21T09:34:25.512");
    }

    @Test
    public void test2116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2116");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 3, chronology1);
        org.joda.time.DateTime.Property property3 = dateTime2.dayOfYear();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight((java.lang.Object) dateTime2, chronology4);
        org.joda.time.MutableDateTime mutableDateTime6 = dateTime2.toMutableDateTime();
        mutableDateTime6.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime6.dayOfWeek();
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime6.year();
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime6.weekyear();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) 3, chronology13);
        org.joda.time.Period period15 = org.joda.time.Period.ZERO;
        org.joda.time.Period period16 = period15.normalizedStandard();
        org.joda.time.Period period18 = period16.minusMinutes((int) ' ');
        org.joda.time.Period period20 = period18.minusMonths((int) (byte) 0);
        org.joda.time.PeriodType periodType21 = period20.getPeriodType();
        org.joda.time.DateTime dateTime22 = dateTime14.minus((org.joda.time.ReadablePeriod) period20);
        org.joda.time.DateTime dateTime24 = dateTime14.plusHours(34);
        org.joda.time.DateTime dateTime26 = dateTime14.plusMonths(5);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.LocalTime localTime29 = new org.joda.time.LocalTime((long) 0, chronology28);
        org.joda.time.Chronology chronology30 = localTime29.getChronology();
        org.joda.time.DateTimeField dateTimeField31 = chronology30.weekyearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime32 = org.joda.time.MutableDateTime.now(chronology30);
        mutableDateTime32.setWeekOfWeekyear((int) '#');
        mutableDateTime32.addHours(0);
        org.joda.time.Days days37 = org.joda.time.Days.daysBetween((org.joda.time.ReadableInstant) dateTime26, (org.joda.time.ReadableInstant) mutableDateTime32);
        long long38 = property11.getDifferenceAsLong((org.joda.time.ReadableInstant) mutableDateTime32);
        org.joda.time.MutableDateTime mutableDateTime39 = property11.getMutableDateTime();
        org.joda.time.MutableDateTime mutableDateTime41 = property11.add(35);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime((long) 3, chronology43);
        org.joda.time.DateTime.Property property45 = dateTime44.dayOfYear();
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.DateMidnight dateMidnight47 = new org.joda.time.DateMidnight((java.lang.Object) dateTime44, chronology46);
        org.joda.time.MutableDateTime mutableDateTime48 = dateTime44.toMutableDateTime();
        mutableDateTime48.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property51 = mutableDateTime48.millisOfDay();
        org.joda.time.PeriodType periodType52 = org.joda.time.PeriodType.years();
        org.joda.time.DurationFieldType durationFieldType53 = org.joda.time.DurationFieldType.halfdays();
        int int54 = periodType52.indexOf(durationFieldType53);
        mutableDateTime48.add(durationFieldType53, (int) 'a');
        org.joda.time.MutableDateTime.Property property57 = mutableDateTime48.millisOfSecond();
        org.joda.time.MutableDateTime mutableDateTime58 = property57.roundHalfFloor();
        float[] floatArray61 = new float[] { (-1L), (byte) -1 };
        java.nio.FloatBuffer floatBuffer62 = java.nio.FloatBuffer.wrap(floatArray61);
        java.nio.FloatBuffer floatBuffer63 = floatBuffer62.compact();
        java.nio.FloatBuffer floatBuffer64 = floatBuffer62.asReadOnlyBuffer();
        java.nio.ByteOrder byteOrder65 = floatBuffer62.order();
        java.nio.FloatBuffer floatBuffer66 = floatBuffer62.slice();
        int int67 = floatBuffer62.arrayOffset();
        boolean boolean68 = mutableDateTime58.equals((java.lang.Object) floatBuffer62);
        mutableDateTime58.addHours(508);
        boolean boolean71 = mutableDateTime41.isBefore((org.joda.time.ReadableInstant) mutableDateTime58);
        int int72 = mutableDateTime58.getRoundingMode();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(mutableDateTime32);
        org.junit.Assert.assertNotNull(days37);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 47L + "'", long38 == 47L);
        org.junit.Assert.assertNotNull(mutableDateTime39);
        org.junit.Assert.assertNotNull(mutableDateTime41);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(mutableDateTime48);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(periodType52);
        org.junit.Assert.assertNotNull(durationFieldType53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(mutableDateTime58);
        org.junit.Assert.assertNotNull(floatArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray61), "[-1.0, -1.0]");
        org.junit.Assert.assertNotNull(floatBuffer62);
        org.junit.Assert.assertNotNull(floatBuffer63);
        org.junit.Assert.assertNotNull(floatBuffer64);
        org.junit.Assert.assertNotNull(byteOrder65);
        org.junit.Assert.assertNotNull(floatBuffer66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
    }

    @Test
    public void test2117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2117");
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.Duration duration10 = new org.joda.time.Duration(readableInstant8, readableInstant9);
        org.joda.time.Duration duration12 = duration10.withMillis((-1L));
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) 3, chronology14);
        org.joda.time.DateTime.Property property16 = dateTime15.dayOfYear();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight((java.lang.Object) dateTime15, chronology17);
        org.joda.time.DateMidnight dateMidnight20 = dateMidnight18.minusMonths((-1));
        org.joda.time.DateMidnight dateMidnight22 = dateMidnight18.withDayOfYear((int) ' ');
        org.joda.time.PeriodType periodType23 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period24 = duration12.toPeriodFrom((org.joda.time.ReadableInstant) dateMidnight18, periodType23);
        org.joda.time.PeriodType periodType25 = period24.getPeriodType();
        org.joda.time.PeriodType periodType26 = periodType25.withMonthsRemoved();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period27 = new org.joda.time.Period(34595674, 2022, (-10), (int) '\000', 24, 46, 741000000, 576, periodType25);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'years'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(periodType23);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(periodType25);
        org.junit.Assert.assertNotNull(periodType26);
    }

    @Test
    public void test2118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2118");
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.Duration duration4 = new org.joda.time.Duration(readableInstant2, readableInstant3);
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.PeriodType periodType6 = null;
        org.joda.time.Period period7 = duration4.toPeriodTo(readableInstant5, periodType6);
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.Duration duration10 = new org.joda.time.Duration(readableInstant8, readableInstant9);
        long long11 = duration10.getMillis();
        boolean boolean12 = duration4.isShorterThan((org.joda.time.ReadableDuration) duration10);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) 3, chronology14);
        org.joda.time.DateTime.Property property16 = dateTime15.dayOfYear();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight((java.lang.Object) dateTime15, chronology17);
        org.joda.time.MutableDateTime mutableDateTime19 = dateTime15.toMutableDateTime();
        mutableDateTime19.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime19.dayOfWeek();
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime19.year();
        org.joda.time.MutableDateTime.Property property24 = mutableDateTime19.weekyear();
        boolean boolean25 = duration4.equals((java.lang.Object) mutableDateTime19);
        mutableDateTime19.addMonths((int) ' ');
        mutableDateTime19.add((long) (byte) 10);
        org.joda.time.Period period30 = org.joda.time.Period.ZERO;
        org.joda.time.Period period31 = period30.normalizedStandard();
        org.joda.time.Period period33 = period30.plusHours(2);
        java.time.chrono.IsoEra isoEra34 = java.time.chrono.IsoEra.CE;
        boolean boolean35 = period33.equals((java.lang.Object) isoEra34);
        int int36 = period33.getMinutes();
        mutableDateTime19.add((org.joda.time.ReadablePeriod) period33);
        java.util.TimeZone timeZone39 = null;
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forTimeZone(timeZone39);
        org.joda.time.DateMidnight dateMidnight41 = new org.joda.time.DateMidnight((long) 1970, dateTimeZone40);
        long long44 = dateTimeZone40.convertLocalToUTC((long) 3, false);
        long long47 = dateTimeZone40.convertLocalToUTC(0L, true);
        mutableDateTime19.setZoneRetainFields(dateTimeZone40);
        java.lang.String str49 = dateTimeZone40.toString();
        org.joda.time.chrono.EthiopicChronology ethiopicChronology50 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone40);
        org.joda.time.DateTimeField dateTimeField51 = ethiopicChronology50.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone52 = ethiopicChronology50.getZone();
        org.joda.time.DateTimeField dateTimeField53 = ethiopicChronology50.era();
        org.joda.time.DateTimeField dateTimeField54 = ethiopicChronology50.weekOfWeekyear();
        org.joda.time.MutableInterval mutableInterval55 = new org.joda.time.MutableInterval((long) 16, (long) 97, (org.joda.time.Chronology) ethiopicChronology50);
        mutableInterval55.setDurationAfterStart((long) 2147483647);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(mutableDateTime19);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertTrue("'" + isoEra34 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra34.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 3L + "'", long44 == 3L);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "Etc/UTC" + "'", str49, "Etc/UTC");
        org.junit.Assert.assertNotNull(ethiopicChronology50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(dateTimeField54);
    }

    @Test
    public void test2119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2119");
        java.util.stream.DoubleStream doubleStream1 = java.util.stream.DoubleStream.of((double) 1024);
        java.util.function.DoubleBinaryOperator doubleBinaryOperator2 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.OptionalDouble optionalDouble3 = doubleStream1.reduce(doubleBinaryOperator2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleStream1);
    }

    @Test
    public void test2120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2120");
        java.nio.charset.Charset charset0 = java.nio.charset.Charset.defaultCharset();
        java.nio.charset.CharsetDecoder charsetDecoder1 = charset0.newDecoder();
        java.nio.charset.CharsetDecoder charsetDecoder2 = charset0.newDecoder();
        java.util.TimeZone timeZone7 = null;
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forTimeZone(timeZone7);
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight((long) 1970, dateTimeZone8);
        long long12 = dateTimeZone8.convertLocalToUTC((long) 3, false);
        org.joda.time.Interval interval13 = new org.joda.time.Interval(10L, (long) 2097, dateTimeZone8);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(dateTimeZone8);
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight(28L, dateTimeZone8);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) 3, chronology17);
        org.joda.time.DateTime.Property property19 = dateTime18.dayOfYear();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight((java.lang.Object) dateTime18, chronology20);
        org.joda.time.MutableDateTime mutableDateTime22 = dateTime18.toMutableDateTime();
        org.joda.time.Days days23 = org.joda.time.Days.ONE;
        org.joda.time.MutableInterval mutableInterval24 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime18, (org.joda.time.ReadablePeriod) days23);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((long) 3, chronology26);
        org.joda.time.DateTime.Property property28 = dateTime27.dayOfYear();
        org.joda.time.Interval interval29 = property28.toInterval();
        mutableInterval24.setInterval((org.joda.time.ReadableInterval) interval29);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((long) 3, chronology32);
        org.joda.time.DateTime.Property property34 = dateTime33.dayOfYear();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.DateMidnight dateMidnight36 = new org.joda.time.DateMidnight((java.lang.Object) dateTime33, chronology35);
        org.joda.time.DateMidnight.Property property37 = dateMidnight36.dayOfMonth();
        org.joda.time.ReadableInstant readableInstant38 = null;
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.Duration duration40 = new org.joda.time.Duration(readableInstant38, readableInstant39);
        org.joda.time.Duration duration42 = duration40.withMillis((-1L));
        org.joda.time.ReadableDuration readableDuration43 = null;
        org.joda.time.Duration duration44 = duration40.minus(readableDuration43);
        org.joda.time.DateMidnight dateMidnight45 = dateMidnight36.plus((org.joda.time.ReadableDuration) duration44);
        mutableInterval24.setDurationAfterStart((org.joda.time.ReadableDuration) duration44);
        org.joda.time.MutableDateTime mutableDateTime47 = new org.joda.time.MutableDateTime();
        boolean boolean48 = mutableInterval24.isBefore((org.joda.time.ReadableInstant) mutableDateTime47);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime((long) 3, chronology50);
        org.joda.time.DateTime.Property property52 = dateTime51.dayOfYear();
        int int53 = dateTime51.getHourOfDay();
        boolean boolean55 = dateTime51.isBefore((long) '/');
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.DateTime dateTime58 = new org.joda.time.DateTime((long) 3, chronology57);
        org.joda.time.DateTime.Property property59 = dateTime58.dayOfYear();
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.DateMidnight dateMidnight61 = new org.joda.time.DateMidnight((java.lang.Object) dateTime58, chronology60);
        org.joda.time.DateMidnight dateMidnight63 = dateMidnight61.minusMonths((-1));
        org.joda.time.DateMidnight dateMidnight65 = dateMidnight61.withDayOfYear((int) ' ');
        mutableInterval24.setInterval((org.joda.time.ReadableInstant) dateTime51, (org.joda.time.ReadableInstant) dateMidnight65);
        boolean boolean67 = dateTimeZone8.equals((java.lang.Object) mutableInterval24);
        org.joda.time.YearMonthDay yearMonthDay68 = new org.joda.time.YearMonthDay(dateTimeZone8);
        org.joda.time.Period period77 = org.joda.time.Period.ZERO;
        org.joda.time.Period period78 = period77.normalizedStandard();
        org.joda.time.Period period80 = period78.minusMinutes((int) ' ');
        org.joda.time.Period period82 = period80.minusMonths((int) (byte) 0);
        org.joda.time.PeriodType periodType83 = period80.getPeriodType();
        org.joda.time.MutablePeriod mutablePeriod84 = new org.joda.time.MutablePeriod(292269054, (int) ':', (int) (short) 10, (int) ':', 9, (int) 'a', 57, 2097, periodType83);
        mutablePeriod84.addMonths((-1));
        org.joda.time.YearMonthDay yearMonthDay87 = yearMonthDay68.minus((org.joda.time.ReadablePeriod) mutablePeriod84);
        boolean boolean88 = charset0.equals((java.lang.Object) yearMonthDay87);
        org.junit.Assert.assertNotNull(charset0);
        org.junit.Assert.assertNotNull(charsetDecoder1);
        org.junit.Assert.assertNotNull(charsetDecoder2);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 3L + "'", long12 == 3L);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(mutableDateTime22);
        org.junit.Assert.assertNotNull(days23);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(interval29);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(dateMidnight45);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(dateMidnight63);
        org.junit.Assert.assertNotNull(dateMidnight65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(period77);
        org.junit.Assert.assertNotNull(period78);
        org.junit.Assert.assertNotNull(period80);
        org.junit.Assert.assertNotNull(period82);
        org.junit.Assert.assertNotNull(periodType83);
        org.junit.Assert.assertNotNull(yearMonthDay87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test2121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2121");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.withField(dateTimeFieldType2, (int) 'a');
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime(chronology5);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.withYearOfCentury((int) 'a');
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.plusSeconds(6);
        boolean boolean11 = localDateTime4.isBefore((org.joda.time.ReadablePartial) localDateTime8);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField13 = localDateTime4.getField(16384);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 16384");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test2122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2122");
        java.time.LocalTime localTime0 = java.time.LocalTime.NOON;
        java.time.LocalTime localTime2 = localTime0.plusNanos((long) 256);
        // The following exception was thrown during execution in test generation
        try {
            java.time.LocalTime localTime4 = localTime2.withSecond((-32769));
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for SecondOfMinute (valid values 0 - 59): -32769");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime0);
        org.junit.Assert.assertNotNull(localTime2);
    }

    @Test
    public void test2123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2123");
        java.util.Set<java.lang.String> strSet0 = java.time.ZoneId.getAvailableZoneIds();
        java.util.stream.Stream<java.lang.String> strStream1 = strSet0.parallelStream();
        boolean boolean3 = strSet0.remove((java.lang.Object) 0);
        java.time.LocalTime localTime8 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime9 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime8);
        java.time.LocalTime localTime14 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime15 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime14);
        java.time.temporal.ChronoField chronoField16 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime18 = localTime14.with((java.time.temporal.TemporalField) chronoField16, (long) (short) 1);
        long long19 = localTime8.getLong((java.time.temporal.TemporalField) chronoField16);
        java.time.LocalTime localTime21 = localTime8.withSecond((int) (short) 1);
        java.time.temporal.ChronoField chronoField22 = java.time.temporal.ChronoField.SECOND_OF_DAY;
        java.time.temporal.ValueRange valueRange23 = localTime21.range((java.time.temporal.TemporalField) chronoField22);
        boolean boolean24 = strSet0.remove((java.lang.Object) chronoField22);
        java.util.Spliterator<java.lang.String> strSpliterator25 = strSet0.spliterator();
        java.util.Spliterator<java.lang.String> strSpliterator26 = strSpliterator25.trySplit();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Comparator<? super java.lang.String> wildcardComparator27 = strSpliterator25.getComparator();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strSet0);
        org.junit.Assert.assertNotNull(strStream1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertTrue("'" + chronoField16 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField16.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 3601000000001L + "'", long19 == 3601000000001L);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertTrue("'" + chronoField22 + "' != '" + java.time.temporal.ChronoField.SECOND_OF_DAY + "'", chronoField22.equals(java.time.temporal.ChronoField.SECOND_OF_DAY));
        org.junit.Assert.assertNotNull(valueRange23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(strSpliterator25);
        org.junit.Assert.assertNotNull(strSpliterator26);
    }

    @Test
    public void test2124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2124");
        org.joda.time.format.PeriodPrinter periodPrinter1 = null;
        org.joda.time.format.PeriodParser periodParser2 = null;
        org.joda.time.format.PeriodFormatter periodFormatter3 = new org.joda.time.format.PeriodFormatter(periodPrinter1, periodParser2);
        org.joda.time.PeriodType periodType4 = org.joda.time.PeriodType.years();
        org.joda.time.format.PeriodFormatter periodFormatter5 = periodFormatter3.withParseType(periodType4);
        java.util.Locale locale7 = new java.util.Locale("hi!");
        org.joda.time.format.PeriodFormatter periodFormatter8 = periodFormatter3.withLocale(locale7);
        org.joda.time.PeriodType periodType9 = periodFormatter3.getParseType();
        boolean boolean10 = periodFormatter3.isParser();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period11 = org.joda.time.Period.parse("DurationField[weekyears]", periodFormatter3);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(periodFormatter5);
        org.junit.Assert.assertEquals(locale7.toString(), "hi!");
        org.junit.Assert.assertNotNull(periodFormatter8);
        org.junit.Assert.assertNull(periodType9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test2125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2125");
        java.net.URISyntaxException uRISyntaxException3 = new java.net.URISyntaxException("java.nio.DirectByteBufferR[pos=0 lim=10800000 cap=10800000]", "2022-02-21T09:34:25.512", 83400);
        int int4 = uRISyntaxException3.getIndex();
        java.lang.String str5 = uRISyntaxException3.getInput();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 83400 + "'", int4 == 83400);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "java.nio.DirectByteBufferR[pos=0 lim=10800000 cap=10800000]" + "'", str5, "java.nio.DirectByteBufferR[pos=0 lim=10800000 cap=10800000]");
    }

    @Test
    public void test2126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2126");
        org.joda.time.Weeks weeks0 = org.joda.time.Weeks.ONE;
        java.util.concurrent.TimeUnit timeUnit1 = java.util.concurrent.TimeUnit.NANOSECONDS;
        boolean boolean2 = weeks0.equals((java.lang.Object) timeUnit1);
        org.joda.time.MutablePeriod mutablePeriod3 = weeks0.toMutablePeriod();
        int int4 = mutablePeriod3.getSeconds();
        mutablePeriod3.addHours((int) 'a');
        mutablePeriod3.setDays(34555048);
        int int9 = mutablePeriod3.getMonths();
        org.junit.Assert.assertNotNull(weeks0);
        org.junit.Assert.assertNotNull(timeUnit1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(mutablePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test2127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2127");
        org.joda.time.Duration duration0 = org.joda.time.Duration.ZERO;
        org.joda.time.Days days1 = duration0.toStandardDays();
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardHours((long) 1);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((long) 3, chronology5);
        org.joda.time.DateTime.Property property7 = dateTime6.dayOfYear();
        org.joda.time.Interval interval8 = property7.toInterval();
        org.joda.time.DateTime dateTime9 = interval8.getEnd();
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.Duration duration14 = new org.joda.time.Duration(readableInstant12, readableInstant13);
        org.joda.time.Duration duration16 = duration14.withMillis((-1L));
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) 3, chronology18);
        org.joda.time.DateTime.Property property20 = dateTime19.dayOfYear();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight((java.lang.Object) dateTime19, chronology21);
        org.joda.time.DateMidnight dateMidnight24 = dateMidnight22.minusMonths((-1));
        org.joda.time.DateMidnight dateMidnight26 = dateMidnight22.withDayOfYear((int) ' ');
        org.joda.time.PeriodType periodType27 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period28 = duration16.toPeriodFrom((org.joda.time.ReadableInstant) dateMidnight22, periodType27);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.LocalTime localTime31 = new org.joda.time.LocalTime((long) 0, chronology30);
        org.joda.time.Chronology chronology32 = localTime31.getChronology();
        org.joda.time.DateTimeField dateTimeField33 = chronology32.weekyearOfCentury();
        org.joda.time.DurationField durationField34 = chronology32.weekyears();
        org.joda.time.DurationField durationField35 = chronology32.seconds();
        org.joda.time.Chronology chronology36 = chronology32.withUTC();
        org.joda.time.DateTimeField dateTimeField37 = chronology32.hourOfDay();
        org.joda.time.Period period38 = new org.joda.time.Period(28L, 3L, periodType27, chronology32);
        org.joda.time.Period period39 = duration3.toPeriodTo((org.joda.time.ReadableInstant) dateTime9, periodType27);
        boolean boolean40 = duration0.isShorterThan((org.joda.time.ReadableDuration) duration3);
        org.junit.Assert.assertNotNull(duration0);
        org.junit.Assert.assertNotNull(days1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertNotNull(periodType27);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
    }

    @Test
    public void test2128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2128");
        java.util.GregorianCalendar gregorianCalendar5 = new java.util.GregorianCalendar(12, 4096, 7, (-1), (int) (short) 10);
        int int6 = gregorianCalendar5.getWeeksInWeekYear();
        java.lang.String str7 = gregorianCalendar5.getCalendarType();
        java.time.ZonedDateTime zonedDateTime8 = gregorianCalendar5.toZonedDateTime();
        gregorianCalendar5.clear();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 52 + "'", int6 == 52);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "gregory" + "'", str7, "gregory");
        org.junit.Assert.assertNotNull(zonedDateTime8);
    }

    @Test
    public void test2129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2129");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 3, chronology1);
        org.joda.time.DateTime.Property property3 = dateTime2.dayOfYear();
        org.joda.time.Interval interval4 = property3.toInterval();
        org.joda.time.DateTimeField dateTimeField5 = property3.getField();
        org.joda.time.DateTime dateTime7 = property3.addToCopy((long) (byte) 1);
        org.joda.time.DateTime dateTime9 = dateTime7.withYear(4);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) 3, chronology11);
        org.joda.time.Period period13 = org.joda.time.Period.ZERO;
        org.joda.time.Period period14 = period13.normalizedStandard();
        org.joda.time.Period period16 = period14.minusMinutes((int) ' ');
        org.joda.time.Period period18 = period16.minusMonths((int) (byte) 0);
        org.joda.time.PeriodType periodType19 = period18.getPeriodType();
        org.joda.time.DateTime dateTime20 = dateTime12.minus((org.joda.time.ReadablePeriod) period18);
        org.joda.time.Duration duration21 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.DateTime dateTime23 = dateTime9.withMillisOfSecond((int) (byte) 10);
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.Duration duration26 = new org.joda.time.Duration(readableInstant24, readableInstant25);
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.PeriodType periodType28 = null;
        org.joda.time.Period period29 = duration26.toPeriodTo(readableInstant27, periodType28);
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.Duration duration32 = new org.joda.time.Duration(readableInstant30, readableInstant31);
        long long33 = duration32.getMillis();
        boolean boolean34 = duration26.isShorterThan((org.joda.time.ReadableDuration) duration32);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime((long) 3, chronology36);
        org.joda.time.DateTime.Property property38 = dateTime37.dayOfYear();
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.DateMidnight dateMidnight40 = new org.joda.time.DateMidnight((java.lang.Object) dateTime37, chronology39);
        org.joda.time.MutableDateTime mutableDateTime41 = dateTime37.toMutableDateTime();
        mutableDateTime41.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property44 = mutableDateTime41.dayOfWeek();
        org.joda.time.MutableDateTime.Property property45 = mutableDateTime41.year();
        org.joda.time.MutableDateTime.Property property46 = mutableDateTime41.weekyear();
        boolean boolean47 = duration26.equals((java.lang.Object) mutableDateTime41);
        mutableDateTime41.addMonths((int) ' ');
        mutableDateTime41.add((long) (byte) 10);
        org.joda.time.Period period52 = org.joda.time.Period.ZERO;
        org.joda.time.Period period53 = period52.normalizedStandard();
        org.joda.time.Period period55 = period52.plusHours(2);
        java.time.chrono.IsoEra isoEra56 = java.time.chrono.IsoEra.CE;
        boolean boolean57 = period55.equals((java.lang.Object) isoEra56);
        int int58 = period55.getMinutes();
        mutableDateTime41.add((org.joda.time.ReadablePeriod) period55);
        java.util.TimeZone timeZone61 = null;
        org.joda.time.DateTimeZone dateTimeZone62 = org.joda.time.DateTimeZone.forTimeZone(timeZone61);
        org.joda.time.DateMidnight dateMidnight63 = new org.joda.time.DateMidnight((long) 1970, dateTimeZone62);
        long long66 = dateTimeZone62.convertLocalToUTC((long) 3, false);
        long long69 = dateTimeZone62.convertLocalToUTC(0L, true);
        mutableDateTime41.setZoneRetainFields(dateTimeZone62);
        java.lang.String str71 = dateTimeZone62.toString();
        org.joda.time.chrono.EthiopicChronology ethiopicChronology72 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone62);
        org.joda.time.DateTimeField dateTimeField73 = ethiopicChronology72.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone74 = ethiopicChronology72.getZone();
        org.joda.time.DateTimeField dateTimeField75 = ethiopicChronology72.era();
        org.joda.time.DateTimeField dateTimeField76 = ethiopicChronology72.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone77 = ethiopicChronology72.getZone();
        org.joda.time.DateTime dateTime78 = dateTime9.withZone(dateTimeZone77);
        org.joda.time.TimeOfDay timeOfDay79 = dateTime9.toTimeOfDay();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(mutableDateTime41);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertTrue("'" + isoEra56 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra56.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone62);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 3L + "'", long66 == 3L);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 0L + "'", long69 == 0L);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "Etc/UTC" + "'", str71, "Etc/UTC");
        org.junit.Assert.assertNotNull(ethiopicChronology72);
        org.junit.Assert.assertNotNull(dateTimeField73);
        org.junit.Assert.assertNotNull(dateTimeZone74);
        org.junit.Assert.assertNotNull(dateTimeField75);
        org.junit.Assert.assertNotNull(dateTimeField76);
        org.junit.Assert.assertNotNull(dateTimeZone77);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(timeOfDay79);
    }

    @Test
    public void test2130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2130");
        java.util.Optional<java.lang.Exception> exceptionOptional0 = java.util.Optional.empty();
        java.lang.String str1 = exceptionOptional0.toString();
        java.time.LocalDateTime localDateTime2 = java.time.LocalDateTime.now();
        java.time.temporal.ChronoField chronoField3 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime5 = localDateTime2.with((java.time.temporal.TemporalField) chronoField3, (long) 10);
        java.time.LocalDateTime localDateTime7 = localDateTime2.withDayOfYear((int) '/');
        boolean boolean8 = exceptionOptional0.equals((java.lang.Object) localDateTime7);
        java.time.LocalTime localTime13 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime14 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime13);
        java.time.LocalTime localTime19 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime20 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime19);
        java.time.temporal.ChronoField chronoField21 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime23 = localTime19.with((java.time.temporal.TemporalField) chronoField21, (long) (short) 1);
        long long24 = localTime13.getLong((java.time.temporal.TemporalField) chronoField21);
        java.time.LocalTime localTime26 = localTime13.withSecond((int) (short) 1);
        java.time.temporal.ChronoField chronoField27 = java.time.temporal.ChronoField.SECOND_OF_DAY;
        java.time.temporal.ValueRange valueRange28 = localTime26.range((java.time.temporal.TemporalField) chronoField27);
        java.time.Duration duration30 = java.time.Duration.ofSeconds((long) 0);
        java.time.LocalTime localTime31 = localTime26.plus((java.time.temporal.TemporalAmount) duration30);
        java.time.LocalDateTime localDateTime32 = localDateTime7.plus((java.time.temporal.TemporalAmount) duration30);
        java.time.format.FormatStyle formatStyle33 = java.time.format.FormatStyle.LONG;
        java.time.format.DateTimeFormatter dateTimeFormatter34 = java.time.format.DateTimeFormatter.ofLocalizedTime(formatStyle33);
        boolean boolean35 = localDateTime7.equals((java.lang.Object) dateTimeFormatter34);
        java.time.Instant instant36 = java.time.Instant.now();
        java.time.Instant instant37 = java.time.Instant.now();
        boolean boolean38 = instant36.isAfter(instant37);
        java.time.LocalDate localDate40 = java.time.LocalDate.ofEpochDay((long) ' ');
        int int41 = localDate40.getMonthValue();
        org.joda.time.Period period42 = org.joda.time.Period.ZERO;
        org.joda.time.Period period43 = period42.normalizedStandard();
        org.joda.time.Period period45 = period42.plusHours(2);
        java.time.chrono.IsoEra isoEra46 = java.time.chrono.IsoEra.CE;
        boolean boolean47 = period45.equals((java.lang.Object) isoEra46);
        java.time.LocalTime localTime52 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime53 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime52);
        java.time.LocalTime localTime58 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime59 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime58);
        java.time.temporal.ChronoField chronoField60 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime62 = localTime58.with((java.time.temporal.TemporalField) chronoField60, (long) (short) 1);
        long long63 = localTime52.getLong((java.time.temporal.TemporalField) chronoField60);
        boolean boolean64 = isoEra46.isSupported((java.time.temporal.TemporalField) chronoField60);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery65 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period66 = isoEra46.query(periodTemporalQuery65);
        boolean boolean67 = period66.isNegative();
        java.time.Period period69 = period66.plusDays((long) ' ');
        java.time.temporal.ChronoField chronoField70 = java.time.temporal.ChronoField.SECOND_OF_DAY;
        boolean boolean71 = period66.equals((java.lang.Object) chronoField70);
        boolean boolean72 = localDate40.isSupported((java.time.temporal.TemporalField) chronoField70);
        java.time.temporal.TemporalUnit temporalUnit73 = chronoField70.getRangeUnit();
        java.time.Instant instant74 = instant37.truncatedTo(temporalUnit73);
        boolean boolean75 = localDateTime7.isSupported(temporalUnit73);
        org.junit.Assert.assertNotNull(exceptionOptional0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Optional.empty" + "'", str1, "Optional.empty");
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertTrue("'" + chronoField3 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField3.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertTrue("'" + chronoField21 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField21.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 3601000000001L + "'", long24 == 3601000000001L);
        org.junit.Assert.assertNotNull(localTime26);
        org.junit.Assert.assertTrue("'" + chronoField27 + "' != '" + java.time.temporal.ChronoField.SECOND_OF_DAY + "'", chronoField27.equals(java.time.temporal.ChronoField.SECOND_OF_DAY));
        org.junit.Assert.assertNotNull(valueRange28);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(localTime31);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertTrue("'" + formatStyle33 + "' != '" + java.time.format.FormatStyle.LONG + "'", formatStyle33.equals(java.time.format.FormatStyle.LONG));
        org.junit.Assert.assertNotNull(dateTimeFormatter34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(instant36);
        org.junit.Assert.assertNotNull(instant37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2 + "'", int41 == 2);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertTrue("'" + isoEra46 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra46.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(localTime52);
        org.junit.Assert.assertNotNull(localTime53);
        org.junit.Assert.assertNotNull(localTime58);
        org.junit.Assert.assertNotNull(localTime59);
        org.junit.Assert.assertTrue("'" + chronoField60 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField60.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime62);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 3601000000001L + "'", long63 == 3601000000001L);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(periodTemporalQuery65);
        org.junit.Assert.assertNotNull(period66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(period69);
        org.junit.Assert.assertTrue("'" + chronoField70 + "' != '" + java.time.temporal.ChronoField.SECOND_OF_DAY + "'", chronoField70.equals(java.time.temporal.ChronoField.SECOND_OF_DAY));
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + temporalUnit73 + "' != '" + java.time.temporal.ChronoUnit.DAYS + "'", temporalUnit73.equals(java.time.temporal.ChronoUnit.DAYS));
        org.junit.Assert.assertNotNull(instant74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
    }

    @Test
    public void test2131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2131");
        org.joda.time.Period period0 = org.joda.time.Period.ZERO;
        org.joda.time.Period period1 = period0.normalizedStandard();
        org.joda.time.Period period3 = period0.plusHours(2);
        java.time.chrono.IsoEra isoEra4 = java.time.chrono.IsoEra.CE;
        boolean boolean5 = period3.equals((java.lang.Object) isoEra4);
        java.time.LocalTime localTime10 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime11 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime10);
        java.time.LocalTime localTime16 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime17 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime16);
        java.time.temporal.ChronoField chronoField18 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime20 = localTime16.with((java.time.temporal.TemporalField) chronoField18, (long) (short) 1);
        long long21 = localTime10.getLong((java.time.temporal.TemporalField) chronoField18);
        boolean boolean22 = isoEra4.isSupported((java.time.temporal.TemporalField) chronoField18);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery23 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period24 = isoEra4.query(periodTemporalQuery23);
        boolean boolean25 = period24.isNegative();
        java.time.Period period27 = period24.plusDays((long) ' ');
        boolean boolean28 = period24.isNegative();
        java.time.Period period30 = period24.minusYears((long) 10);
        org.joda.time.Period period31 = org.joda.time.Period.ZERO;
        org.joda.time.Period period32 = period31.normalizedStandard();
        org.joda.time.Period period34 = period31.plusHours(2);
        java.time.chrono.IsoEra isoEra35 = java.time.chrono.IsoEra.CE;
        boolean boolean36 = period34.equals((java.lang.Object) isoEra35);
        java.time.LocalTime localTime41 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime42 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime41);
        java.time.LocalTime localTime47 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime48 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime47);
        java.time.temporal.ChronoField chronoField49 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime51 = localTime47.with((java.time.temporal.TemporalField) chronoField49, (long) (short) 1);
        long long52 = localTime41.getLong((java.time.temporal.TemporalField) chronoField49);
        boolean boolean53 = isoEra35.isSupported((java.time.temporal.TemporalField) chronoField49);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery54 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period55 = isoEra35.query(periodTemporalQuery54);
        java.time.chrono.ChronoPeriod chronoPeriod56 = period30.minus((java.time.temporal.TemporalAmount) period55);
        java.time.chrono.ChronoPeriod chronoPeriod58 = period30.multipliedBy(4096);
        int int59 = period30.getMonths();
        java.time.chrono.IsoChronology isoChronology60 = period30.getChronology();
        java.time.ZoneOffset zoneOffset63 = java.time.ZoneOffset.ofHoursMinutes(1, 10);
        java.time.LocalDate localDate64 = java.time.LocalDate.now((java.time.ZoneId) zoneOffset63);
        java.time.Clock clock65 = java.time.Clock.system((java.time.ZoneId) zoneOffset63);
        java.time.Duration duration67 = java.time.Duration.ofSeconds((long) 0);
        java.time.Duration duration69 = duration67.multipliedBy((long) (byte) -1);
        java.time.Clock clock70 = java.time.Clock.offset(clock65, duration67);
        java.time.chrono.ChronoLocalDate chronoLocalDate71 = isoChronology60.dateNow(clock65);
        java.time.ZoneOffset zoneOffset74 = java.time.ZoneOffset.ofHoursMinutes(1, 10);
        java.time.LocalDate localDate75 = java.time.LocalDate.now((java.time.ZoneId) zoneOffset74);
        java.time.LocalDate localDate76 = java.time.LocalDate.now((java.time.ZoneId) zoneOffset74);
        java.time.LocalDate localDate77 = isoChronology60.dateNow((java.time.ZoneId) zoneOffset74);
        int int78 = localDate77.lengthOfYear();
        java.time.chrono.Era era79 = localDate77.getEra();
        org.junit.Assert.assertNotNull(period0);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertTrue("'" + isoEra4 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra4.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertTrue("'" + chronoField18 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField18.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 3601000000001L + "'", long21 == 3601000000001L);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(periodTemporalQuery23);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertTrue("'" + isoEra35 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra35.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(localTime41);
        org.junit.Assert.assertNotNull(localTime42);
        org.junit.Assert.assertNotNull(localTime47);
        org.junit.Assert.assertNotNull(localTime48);
        org.junit.Assert.assertTrue("'" + chronoField49 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField49.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime51);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 3601000000001L + "'", long52 == 3601000000001L);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(periodTemporalQuery54);
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertNotNull(chronoPeriod56);
        org.junit.Assert.assertNotNull(chronoPeriod58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(isoChronology60);
        org.junit.Assert.assertNotNull(zoneOffset63);
        org.junit.Assert.assertNotNull(localDate64);
        org.junit.Assert.assertNotNull(clock65);
        org.junit.Assert.assertNotNull(duration67);
        org.junit.Assert.assertNotNull(duration69);
        org.junit.Assert.assertNotNull(clock70);
        org.junit.Assert.assertNotNull(chronoLocalDate71);
        org.junit.Assert.assertNotNull(zoneOffset74);
        org.junit.Assert.assertNotNull(localDate75);
        org.junit.Assert.assertNotNull(localDate76);
        org.junit.Assert.assertNotNull(localDate77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 365 + "'", int78 == 365);
        org.junit.Assert.assertTrue("'" + era79 + "' != '" + java.time.chrono.IsoEra.CE + "'", era79.equals(java.time.chrono.IsoEra.CE));
    }

    @Test
    public void test2132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2132");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Duration duration2 = new org.joda.time.Duration(readableInstant0, readableInstant1);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = duration2.toPeriodTo(readableInstant3, periodType4);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.Duration duration8 = new org.joda.time.Duration(readableInstant6, readableInstant7);
        long long9 = duration8.getMillis();
        boolean boolean10 = duration2.isShorterThan((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) 3, chronology12);
        org.joda.time.DateTime.Property property14 = dateTime13.dayOfYear();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight((java.lang.Object) dateTime13, chronology15);
        org.joda.time.MutableDateTime mutableDateTime17 = dateTime13.toMutableDateTime();
        mutableDateTime17.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime17.dayOfWeek();
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime17.year();
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime17.weekyear();
        boolean boolean23 = duration2.equals((java.lang.Object) mutableDateTime17);
        mutableDateTime17.addMonths((int) ' ');
        mutableDateTime17.add((long) (byte) 10);
        org.joda.time.Period period28 = org.joda.time.Period.ZERO;
        org.joda.time.Period period29 = period28.normalizedStandard();
        org.joda.time.Period period31 = period28.plusHours(2);
        java.time.chrono.IsoEra isoEra32 = java.time.chrono.IsoEra.CE;
        boolean boolean33 = period31.equals((java.lang.Object) isoEra32);
        int int34 = period31.getMinutes();
        mutableDateTime17.add((org.joda.time.ReadablePeriod) period31);
        java.util.TimeZone timeZone37 = null;
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forTimeZone(timeZone37);
        org.joda.time.DateMidnight dateMidnight39 = new org.joda.time.DateMidnight((long) 1970, dateTimeZone38);
        long long42 = dateTimeZone38.convertLocalToUTC((long) 3, false);
        long long45 = dateTimeZone38.convertLocalToUTC(0L, true);
        mutableDateTime17.setZoneRetainFields(dateTimeZone38);
        java.lang.String str47 = dateTimeZone38.toString();
        org.joda.time.chrono.EthiopicChronology ethiopicChronology48 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone38);
        org.joda.time.DateTimeField dateTimeField49 = ethiopicChronology48.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone50 = ethiopicChronology48.getZone();
        // The following exception was thrown during execution in test generation
        try {
            long long56 = ethiopicChronology48.getDateTimeMillis((long) 3600000, 624, 10800000, 37, 16384);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 624 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertTrue("'" + isoEra32 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra32.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 3L + "'", long42 == 3L);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Etc/UTC" + "'", str47, "Etc/UTC");
        org.junit.Assert.assertNotNull(ethiopicChronology48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTimeZone50);
    }

    @Test
    public void test2133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2133");
        java.io.File file0 = null;
        java.io.File file2 = new java.io.File(file0, "1970-01-01T00:00:00.003Z");
        java.net.URL uRL3 = file2.toURL();
        java.io.File file4 = null;
        java.io.File file6 = new java.io.File(file4, "1970-01-01T00:00:00.003Z");
        java.net.URL uRL7 = file6.toURL();
        boolean boolean8 = uRL3.sameFile(uRL7);
        java.lang.String str9 = uRL3.getPath();
        java.net.URLConnection uRLConnection10 = uRL3.openConnection();
        java.lang.String str11 = uRLConnection10.getContentType();
        long long14 = uRLConnection10.getHeaderFieldLong("zh-TW", 57L);
        // The following exception was thrown during execution in test generation
        try {
            uRLConnection10.setDoOutput(false);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Already connected");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull("file2.getParent() == null", file2.getParent());
        org.junit.Assert.assertEquals(file2.toString(), "1970-01-01T00:00:00.003Z");
        org.junit.Assert.assertNotNull(uRL3);
// flaky:         org.junit.Assert.assertEquals(uRL3.toString(), "file:/experiment/1970-01-01T00:00:00.003Z/");
        org.junit.Assert.assertNull("file6.getParent() == null", file6.getParent());
        org.junit.Assert.assertEquals(file6.toString(), "1970-01-01T00:00:00.003Z");
        org.junit.Assert.assertNotNull(uRL7);
// flaky:         org.junit.Assert.assertEquals(uRL7.toString(), "file:/experiment/1970-01-01T00:00:00.003Z/");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "/experiment/1970-01-01T00:00:00.003Z/" + "'", str9, "/experiment/1970-01-01T00:00:00.003Z/");
        org.junit.Assert.assertNotNull(uRLConnection10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "text/plain" + "'", str11, "text/plain");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 57L + "'", long14 == 57L);
    }

    @Test
    public void test2134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2134");
        java.util.Set<java.lang.String> strSet0 = java.time.ZoneId.getAvailableZoneIds();
        java.util.stream.Stream<java.lang.String> strStream1 = strSet0.parallelStream();
        java.util.function.DoubleUnaryOperator doubleUnaryOperator2 = java.util.function.DoubleUnaryOperator.identity();
        double double4 = doubleUnaryOperator2.applyAsDouble((double) (byte) 1);
        boolean boolean5 = strSet0.contains((java.lang.Object) (byte) 1);
        org.junit.Assert.assertNotNull(strSet0);
        org.junit.Assert.assertNotNull(strStream1);
        org.junit.Assert.assertNotNull(doubleUnaryOperator2);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 1.0d + "'", double4 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test2135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2135");
        org.joda.time.Weeks weeks0 = org.joda.time.Weeks.ONE;
        java.util.concurrent.TimeUnit timeUnit1 = java.util.concurrent.TimeUnit.NANOSECONDS;
        boolean boolean2 = weeks0.equals((java.lang.Object) timeUnit1);
        org.joda.time.MutablePeriod mutablePeriod3 = weeks0.toMutablePeriod();
        int int4 = mutablePeriod3.getSeconds();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((long) 3, chronology6);
        org.joda.time.DateTime.Property property8 = dateTime7.dayOfYear();
        org.joda.time.Interval interval9 = property8.toInterval();
        org.joda.time.DateTime dateTime10 = interval9.getEnd();
        mutablePeriod3.setPeriod((org.joda.time.ReadableInterval) interval9);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) 3, chronology13);
        org.joda.time.DateTime.Property property15 = dateTime14.dayOfYear();
        org.joda.time.Interval interval16 = property15.toInterval();
        org.joda.time.DateTime dateTime17 = interval16.getEnd();
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.Duration duration20 = new org.joda.time.Duration(readableInstant18, readableInstant19);
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.PeriodType periodType22 = null;
        org.joda.time.Period period23 = duration20.toPeriodTo(readableInstant21, periodType22);
        long long24 = duration20.getStandardSeconds();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((long) 3, chronology26);
        org.joda.time.DateTime.Property property28 = dateTime27.dayOfYear();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.DateMidnight dateMidnight30 = new org.joda.time.DateMidnight((java.lang.Object) dateTime27, chronology29);
        org.joda.time.DateMidnight dateMidnight32 = dateMidnight30.minusMonths((-1));
        org.joda.time.DateMidnight dateMidnight34 = dateMidnight30.withDayOfYear((int) ' ');
        org.joda.time.Interval interval35 = duration20.toIntervalTo((org.joda.time.ReadableInstant) dateMidnight34);
        java.time.DayOfWeek dayOfWeek36 = java.time.DayOfWeek.MONDAY;
        boolean boolean37 = interval35.equals((java.lang.Object) dayOfWeek36);
        boolean boolean38 = interval16.isBefore((org.joda.time.ReadableInterval) interval35);
        org.joda.time.Interval interval39 = interval9.overlap((org.joda.time.ReadableInterval) interval16);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.LocalTime localTime42 = new org.joda.time.LocalTime((long) 0, chronology41);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime((long) 3, chronology44);
        org.joda.time.DateTime.Property property46 = dateTime45.dayOfYear();
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.DateMidnight dateMidnight48 = new org.joda.time.DateMidnight((java.lang.Object) dateTime45, chronology47);
        org.joda.time.DateTime dateTime49 = localTime42.toDateTime((org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.DateTime dateTime51 = dateTime49.minusMillis((int) (byte) 0);
        org.joda.time.DateTime dateTime53 = dateTime49.withYearOfCentury((int) (byte) 10);
        boolean boolean54 = interval16.isBefore((org.joda.time.ReadableInstant) dateTime53);
        org.joda.time.DateTime dateTime56 = dateTime53.minusWeeks((int) 'u');
        org.joda.time.DateTime dateTime58 = dateTime56.plusYears(101);
        org.junit.Assert.assertNotNull(weeks0);
        org.junit.Assert.assertNotNull(timeUnit1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(mutablePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(dateMidnight32);
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertTrue("'" + dayOfWeek36 + "' != '" + java.time.DayOfWeek.MONDAY + "'", dayOfWeek36.equals(java.time.DayOfWeek.MONDAY));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime58);
    }

    @Test
    public void test2136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2136");
        java.io.OutputStream outputStream0 = null;
        java.io.FilterOutputStream filterOutputStream1 = new java.io.FilterOutputStream(outputStream0);
        java.io.PrintStream printStream3 = new java.io.PrintStream((java.io.OutputStream) filterOutputStream1, false);
        java.net.InetAddress inetAddress4 = java.net.InetAddress.getLocalHost();
        java.lang.String str5 = inetAddress4.getCanonicalHostName();
        java.lang.String str6 = inetAddress4.toString();
        byte[] byteArray7 = inetAddress4.getAddress();
        // The following exception was thrown during execution in test generation
        try {
            filterOutputStream1.write(byteArray7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(inetAddress4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "599b081c1808" + "'", str5, "599b081c1808");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "599b081c1808/172.17.0.2" + "'", str6, "599b081c1808/172.17.0.2");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-84, 17, 0, 2]");
    }

    @Test
    public void test2137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2137");
        java.util.stream.LongStream longStream2 = java.util.stream.LongStream.rangeClosed((long) (short) -1, (long) 7);
        long long3 = longStream2.count();
        java.util.stream.LongStream longStream4 = longStream2.parallel();
        java.util.function.LongPredicate longPredicate5 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.LongStream longStream6 = longStream2.filter(longPredicate5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(longStream2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 9L + "'", long3 == 9L);
        org.junit.Assert.assertNotNull(longStream4);
    }

    @Test
    public void test2138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2138");
        java.net.UnknownHostException unknownHostException1 = new java.net.UnknownHostException("CHN");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((java.lang.Object) unknownHostException1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: java.net.UnknownHostException");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test2139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2139");
        java.security.AccessControlException accessControlException2 = new java.security.AccessControlException("java.nio.DirectByteBufferR[pos=0 lim=10800000 cap=10800000]");
        java.security.cert.CertificateEncodingException certificateEncodingException3 = new java.security.cert.CertificateEncodingException("2022-02-21T09:34:21.265Z", (java.lang.Throwable) accessControlException2);
    }

    @Test
    public void test2140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2140");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) 3, chronology2);
        org.joda.time.DateTime.Property property4 = dateTime3.dayOfYear();
        org.joda.time.Interval interval5 = property4.toInterval();
        org.joda.time.DateTimeField dateTimeField6 = property4.getField();
        org.joda.time.DateTime dateTime8 = property4.addToCopy((long) (byte) 1);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.LocalTime localTime11 = new org.joda.time.LocalTime((long) 0, chronology10);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) 3, chronology13);
        org.joda.time.DateTime.Property property15 = dateTime14.dayOfYear();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight((java.lang.Object) dateTime14, chronology16);
        org.joda.time.DateTime dateTime18 = localTime11.toDateTime((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.DateTime dateTime20 = dateTime18.minusMillis((int) (byte) 0);
        org.joda.time.DateTime dateTime22 = dateTime18.withYearOfCentury((int) (byte) 10);
        org.joda.time.DateTime.Property property23 = dateTime22.hourOfDay();
        boolean boolean24 = dateTime8.isEqual((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.Duration duration25 = new org.joda.time.Duration(readableInstant0, (org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod(3601000000001L, (long) 28);
        int int29 = mutablePeriod28.getMonths();
        org.joda.time.DateTime dateTime30 = dateTime22.minus((org.joda.time.ReadablePeriod) mutablePeriod28);
        int int31 = mutablePeriod28.getSeconds();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-39) + "'", int31 == (-39));
    }

    @Test
    public void test2141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2141");
        java.time.OffsetDateTime offsetDateTime0 = java.time.OffsetDateTime.now();
        java.time.LocalDate localDate2 = java.time.LocalDate.ofEpochDay((long) ' ');
        int int3 = localDate2.getMonthValue();
        org.joda.time.Period period4 = org.joda.time.Period.ZERO;
        org.joda.time.Period period5 = period4.normalizedStandard();
        org.joda.time.Period period7 = period4.plusHours(2);
        java.time.chrono.IsoEra isoEra8 = java.time.chrono.IsoEra.CE;
        boolean boolean9 = period7.equals((java.lang.Object) isoEra8);
        java.time.LocalTime localTime14 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime15 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime14);
        java.time.LocalTime localTime20 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime21 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime20);
        java.time.temporal.ChronoField chronoField22 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime24 = localTime20.with((java.time.temporal.TemporalField) chronoField22, (long) (short) 1);
        long long25 = localTime14.getLong((java.time.temporal.TemporalField) chronoField22);
        boolean boolean26 = isoEra8.isSupported((java.time.temporal.TemporalField) chronoField22);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery27 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period28 = isoEra8.query(periodTemporalQuery27);
        boolean boolean29 = period28.isNegative();
        java.time.Period period31 = period28.plusDays((long) ' ');
        java.time.temporal.ChronoField chronoField32 = java.time.temporal.ChronoField.SECOND_OF_DAY;
        boolean boolean33 = period28.equals((java.lang.Object) chronoField32);
        boolean boolean34 = localDate2.isSupported((java.time.temporal.TemporalField) chronoField32);
        java.time.temporal.TemporalUnit temporalUnit35 = chronoField32.getRangeUnit();
        java.time.OffsetDateTime offsetDateTime36 = offsetDateTime0.truncatedTo(temporalUnit35);
        java.time.LocalDate localDate39 = java.time.LocalDate.ofEpochDay((long) ' ');
        int int40 = localDate39.getMonthValue();
        org.joda.time.Period period41 = org.joda.time.Period.ZERO;
        org.joda.time.Period period42 = period41.normalizedStandard();
        org.joda.time.Period period44 = period41.plusHours(2);
        java.time.chrono.IsoEra isoEra45 = java.time.chrono.IsoEra.CE;
        boolean boolean46 = period44.equals((java.lang.Object) isoEra45);
        java.time.LocalTime localTime51 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime52 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime51);
        java.time.LocalTime localTime57 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime58 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime57);
        java.time.temporal.ChronoField chronoField59 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime61 = localTime57.with((java.time.temporal.TemporalField) chronoField59, (long) (short) 1);
        long long62 = localTime51.getLong((java.time.temporal.TemporalField) chronoField59);
        boolean boolean63 = isoEra45.isSupported((java.time.temporal.TemporalField) chronoField59);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery64 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period65 = isoEra45.query(periodTemporalQuery64);
        boolean boolean66 = period65.isNegative();
        java.time.Period period68 = period65.plusDays((long) ' ');
        java.time.temporal.ChronoField chronoField69 = java.time.temporal.ChronoField.SECOND_OF_DAY;
        boolean boolean70 = period65.equals((java.lang.Object) chronoField69);
        boolean boolean71 = localDate39.isSupported((java.time.temporal.TemporalField) chronoField69);
        java.time.temporal.TemporalUnit temporalUnit72 = chronoField69.getRangeUnit();
        java.time.OffsetDateTime offsetDateTime73 = offsetDateTime36.minus(8L, temporalUnit72);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval74 = new org.joda.time.Interval((java.lang.Object) offsetDateTime36);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No interval converter found for type: java.time.OffsetDateTime");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(offsetDateTime0);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2 + "'", int3 == 2);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertTrue("'" + isoEra8 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra8.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertTrue("'" + chronoField22 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField22.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime24);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 3601000000001L + "'", long25 == 3601000000001L);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(periodTemporalQuery27);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertTrue("'" + chronoField32 + "' != '" + java.time.temporal.ChronoField.SECOND_OF_DAY + "'", chronoField32.equals(java.time.temporal.ChronoField.SECOND_OF_DAY));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + temporalUnit35 + "' != '" + java.time.temporal.ChronoUnit.DAYS + "'", temporalUnit35.equals(java.time.temporal.ChronoUnit.DAYS));
        org.junit.Assert.assertNotNull(offsetDateTime36);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2 + "'", int40 == 2);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertTrue("'" + isoEra45 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra45.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(localTime51);
        org.junit.Assert.assertNotNull(localTime52);
        org.junit.Assert.assertNotNull(localTime57);
        org.junit.Assert.assertNotNull(localTime58);
        org.junit.Assert.assertTrue("'" + chronoField59 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField59.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime61);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 3601000000001L + "'", long62 == 3601000000001L);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(periodTemporalQuery64);
        org.junit.Assert.assertNotNull(period65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(period68);
        org.junit.Assert.assertTrue("'" + chronoField69 + "' != '" + java.time.temporal.ChronoField.SECOND_OF_DAY + "'", chronoField69.equals(java.time.temporal.ChronoField.SECOND_OF_DAY));
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + temporalUnit72 + "' != '" + java.time.temporal.ChronoUnit.DAYS + "'", temporalUnit72.equals(java.time.temporal.ChronoUnit.DAYS));
        org.junit.Assert.assertNotNull(offsetDateTime73);
    }

    @Test
    public void test2142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2142");
        org.joda.time.Days days1 = org.joda.time.Days.days(8);
        org.junit.Assert.assertNotNull(days1);
    }

    @Test
    public void test2143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2143");
        java.time.Period period1 = java.time.Period.ofYears(28);
        java.time.Period period3 = java.time.Period.ofYears(28);
        java.time.Period period4 = period1.minus((java.time.temporal.TemporalAmount) period3);
        java.time.Period period6 = period4.withDays((int) (byte) 100);
        boolean boolean7 = period6.isNegative();
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test2144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2144");
        java.util.List<java.util.Locale.LanguageRange> languageRangeList0 = null;
        java.util.Locale.LanguageRange[] languageRangeArray1 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList2 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList2, languageRangeArray1);
        java.util.Locale locale4 = java.util.Locale.JAPAN;
        java.util.Locale[] localeArray5 = new java.util.Locale[] { locale4 };
        java.util.ArrayList<java.util.Locale> localeList6 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList6, localeArray5);
        java.util.List<java.util.Locale> localeList8 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList2, (java.util.Collection<java.util.Locale>) localeList6);
        int int10 = localeList6.indexOf((java.lang.Object) (byte) -1);
        localeList6.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale> localeList12 = java.util.Locale.filter(languageRangeList0, (java.util.Collection<java.util.Locale>) localeList6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(languageRangeArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(localeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(localeList8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
    }

    @Test
    public void test2145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2145");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Duration duration2 = new org.joda.time.Duration(readableInstant0, readableInstant1);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = duration2.toPeriodTo(readableInstant3, periodType4);
        int[] intArray6 = period5.getValues();
        org.joda.time.Period period8 = period5.withMonths((int) (short) 0);
        java.util.GregorianCalendar gregorianCalendar14 = new java.util.GregorianCalendar(12, 4096, 7, (-1), (int) (short) 10);
        int int15 = gregorianCalendar14.getWeeksInWeekYear();
        org.joda.time.YearMonthDay yearMonthDay16 = org.joda.time.YearMonthDay.fromCalendarFields((java.util.Calendar) gregorianCalendar14);
        org.joda.time.YearMonthDay yearMonthDay18 = yearMonthDay16.withYear(0);
        org.joda.time.Hours hours19 = org.joda.time.Hours.ZERO;
        org.joda.time.YearMonthDay yearMonthDay20 = yearMonthDay18.minus((org.joda.time.ReadablePeriod) hours19);
        org.joda.time.Hours hours22 = hours19.minus((int) ':');
        org.joda.time.Period period23 = period5.withFields((org.joda.time.ReadablePeriod) hours22);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 52 + "'", int15 == 52);
        org.junit.Assert.assertNotNull(yearMonthDay16);
        org.junit.Assert.assertNotNull(yearMonthDay18);
        org.junit.Assert.assertNotNull(hours19);
        org.junit.Assert.assertNotNull(yearMonthDay20);
        org.junit.Assert.assertNotNull(hours22);
        org.junit.Assert.assertNotNull(period23);
    }

    @Test
    public void test2146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2146");
        java.nio.LongBuffer longBuffer1 = java.nio.LongBuffer.allocate((int) (short) 0);
        long[] longArray2 = longBuffer1.array();
        java.util.stream.LongStream longStream3 = java.util.stream.LongStream.of(longArray2);
        java.util.OptionalLong optionalLong4 = longStream3.findAny();
        boolean boolean5 = optionalLong4.isPresent();
        org.junit.Assert.assertNotNull(longBuffer1);
        org.junit.Assert.assertNotNull(longArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray2), "[]");
        org.junit.Assert.assertNotNull(longStream3);
        org.junit.Assert.assertNotNull(optionalLong4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test2147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2147");
        java.net.URI uRI1 = new java.net.URI("hi!");
        java.lang.String str2 = uRI1.getRawAuthority();
        java.lang.String str3 = uRI1.toString();
        java.lang.String str4 = uRI1.getRawFragment();
        java.net.URI uRI6 = new java.net.URI("hi!");
        java.lang.String str7 = uRI6.toASCIIString();
        java.net.URI uRI8 = uRI1.resolve(uRI6);
        boolean boolean9 = uRI1.isAbsolute();
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "hi!" + "'", str3, "hi!");
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertNotNull(uRI8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test2148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2148");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 3, chronology1);
        org.joda.time.Period period3 = org.joda.time.Period.ZERO;
        org.joda.time.Period period4 = period3.normalizedStandard();
        org.joda.time.Period period6 = period4.minusMinutes((int) ' ');
        org.joda.time.Period period8 = period6.minusMonths((int) (byte) 0);
        org.joda.time.PeriodType periodType9 = period8.getPeriodType();
        org.joda.time.DateTime dateTime10 = dateTime2.minus((org.joda.time.ReadablePeriod) period8);
        org.joda.time.DateTime dateTime12 = dateTime2.plusHours(34);
        org.joda.time.DateTime dateTime14 = dateTime2.plusMonths(5);
        org.joda.time.DateTime dateTime16 = dateTime2.minusHours((int) (byte) 10);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.Duration duration19 = new org.joda.time.Duration(readableInstant17, readableInstant18);
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.PeriodType periodType21 = null;
        org.joda.time.Period period22 = duration19.toPeriodTo(readableInstant20, periodType21);
        int[] intArray23 = period22.getValues();
        org.joda.time.Period period25 = period22.withHours(65);
        org.joda.time.MutableInterval mutableInterval26 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadablePeriod) period25);
        int int27 = period25.getWeeks();
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[0, 0, 0, 0, 0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
    }

    @Test
    public void test2149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2149");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 3, chronology1);
        org.joda.time.DateTime.Property property3 = dateTime2.dayOfYear();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight((java.lang.Object) dateTime2, chronology4);
        org.joda.time.MutableDateTime mutableDateTime6 = dateTime2.toMutableDateTime();
        mutableDateTime6.addYears((int) (short) 100);
        org.joda.time.Period period9 = org.joda.time.Period.ZERO;
        org.joda.time.TimeOfDay timeOfDay11 = org.joda.time.TimeOfDay.fromMillisOfDay((long) (short) 0);
        org.joda.time.TimeOfDay timeOfDay13 = org.joda.time.TimeOfDay.fromMillisOfDay((long) (short) 0);
        org.joda.time.Hours hours14 = org.joda.time.Hours.hoursBetween((org.joda.time.ReadablePartial) timeOfDay11, (org.joda.time.ReadablePartial) timeOfDay13);
        org.joda.time.DurationFieldType durationFieldType15 = org.joda.time.DurationFieldType.hours();
        org.joda.time.TimeOfDay timeOfDay17 = timeOfDay13.withFieldAdded(durationFieldType15, (int) (byte) 0);
        org.joda.time.Period period19 = period9.withFieldAdded(durationFieldType15, 4);
        mutableDateTime6.add((org.joda.time.ReadablePeriod) period9);
        org.joda.time.Period period22 = period9.minusYears(292269054);
        org.joda.time.Period period24 = period9.minusYears(83400);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType26 = period24.getFieldType((int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 97");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(timeOfDay11);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertNotNull(hours14);
        org.junit.Assert.assertNotNull(durationFieldType15);
        org.junit.Assert.assertNotNull(timeOfDay17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(period24);
    }

    @Test
    public void test2150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2150");
        java.time.OffsetDateTime offsetDateTime0 = java.time.OffsetDateTime.now();
        java.time.LocalDate localDate1 = offsetDateTime0.toLocalDate();
        java.time.OffsetDateTime offsetDateTime2 = java.time.OffsetDateTime.now();
        java.time.LocalDate localDate3 = offsetDateTime2.toLocalDate();
        java.time.OffsetDateTime offsetDateTime4 = java.time.OffsetDateTime.now();
        java.time.temporal.ChronoField chronoField5 = java.time.temporal.ChronoField.HOUR_OF_DAY;
        boolean boolean6 = offsetDateTime4.isSupported((java.time.temporal.TemporalField) chronoField5);
        boolean boolean7 = offsetDateTime2.isEqual(offsetDateTime4);
        java.lang.String str8 = offsetDateTime4.toString();
        boolean boolean9 = offsetDateTime0.isAfter(offsetDateTime4);
        java.util.GregorianCalendar gregorianCalendar15 = new java.util.GregorianCalendar(12, 4096, 7, (-1), (int) (short) 10);
        int int16 = gregorianCalendar15.getWeeksInWeekYear();
        java.lang.String str17 = gregorianCalendar15.getCalendarType();
        java.time.ZonedDateTime zonedDateTime18 = gregorianCalendar15.toZonedDateTime();
        java.time.ZonedDateTime zonedDateTime20 = zonedDateTime18.minusMonths((long) 10);
        int int21 = zonedDateTime18.getMonthValue();
        java.time.LocalTime localTime26 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime27 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime26);
        java.time.LocalTime localTime32 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime33 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime32);
        java.time.temporal.ChronoField chronoField34 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime36 = localTime32.with((java.time.temporal.TemporalField) chronoField34, (long) (short) 1);
        long long37 = localTime26.getLong((java.time.temporal.TemporalField) chronoField34);
        long long38 = zonedDateTime18.getLong((java.time.temporal.TemporalField) chronoField34);
        java.time.ZoneOffset zoneOffset41 = java.time.ZoneOffset.ofHoursMinutes(1, 10);
        java.time.LocalDate localDate42 = java.time.LocalDate.now((java.time.ZoneId) zoneOffset41);
        java.time.LocalDate localDate43 = java.time.LocalDate.now((java.time.ZoneId) zoneOffset41);
        java.time.chrono.ChronoZonedDateTime<java.time.LocalDate> localDateChronoZonedDateTime44 = zonedDateTime18.withZoneSameLocal((java.time.ZoneId) zoneOffset41);
        java.time.ZonedDateTime zonedDateTime45 = offsetDateTime0.atZoneSimilarLocal((java.time.ZoneId) zoneOffset41);
        java.time.ZoneId zoneId46 = zoneOffset41.normalized();
        org.junit.Assert.assertNotNull(offsetDateTime0);
        org.junit.Assert.assertNotNull(localDate1);
        org.junit.Assert.assertNotNull(offsetDateTime2);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(offsetDateTime4);
        org.junit.Assert.assertTrue("'" + chronoField5 + "' != '" + java.time.temporal.ChronoField.HOUR_OF_DAY + "'", chronoField5.equals(java.time.temporal.ChronoField.HOUR_OF_DAY));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "2022-02-21T09:37:26.875Z" + "'", str8, "2022-02-21T09:37:26.875Z");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 52 + "'", int16 == 52);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "gregory" + "'", str17, "gregory");
        org.junit.Assert.assertNotNull(zonedDateTime18);
        org.junit.Assert.assertNotNull(zonedDateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 5 + "'", int21 == 5);
        org.junit.Assert.assertNotNull(localTime26);
        org.junit.Assert.assertNotNull(localTime27);
        org.junit.Assert.assertNotNull(localTime32);
        org.junit.Assert.assertNotNull(localTime33);
        org.junit.Assert.assertTrue("'" + chronoField34 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField34.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime36);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 3601000000001L + "'", long37 == 3601000000001L);
// flaky:         org.junit.Assert.assertTrue("'" + long38 + "' != '" + 83399965000000L + "'", long38 == 83399965000000L);
        org.junit.Assert.assertNotNull(zoneOffset41);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertNotNull(localDateChronoZonedDateTime44);
        org.junit.Assert.assertNotNull(zonedDateTime45);
        org.junit.Assert.assertNotNull(zoneId46);
    }

    @Test
    public void test2151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2151");
        java.util.Optional<java.lang.Exception> exceptionOptional0 = java.util.Optional.empty();
        java.lang.String str1 = exceptionOptional0.toString();
        java.time.LocalDateTime localDateTime2 = java.time.LocalDateTime.now();
        java.time.temporal.ChronoField chronoField3 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime5 = localDateTime2.with((java.time.temporal.TemporalField) chronoField3, (long) 10);
        java.time.LocalDateTime localDateTime7 = localDateTime2.withDayOfYear((int) '/');
        boolean boolean8 = exceptionOptional0.equals((java.lang.Object) localDateTime7);
        java.time.LocalDateTime localDateTime10 = localDateTime7.withNano(2);
        java.time.temporal.ChronoField chronoField11 = java.time.temporal.ChronoField.AMPM_OF_DAY;
        int int12 = localDateTime7.get((java.time.temporal.TemporalField) chronoField11);
        java.time.temporal.ChronoField chronoField13 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_MONTH;
        java.time.temporal.ValueRange valueRange14 = localDateTime7.range((java.time.temporal.TemporalField) chronoField13);
        java.time.temporal.TemporalUnit temporalUnit16 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime17 = localDateTime7.plus((long) 42, temporalUnit16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(exceptionOptional0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Optional.empty" + "'", str1, "Optional.empty");
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertTrue("'" + chronoField3 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField3.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + chronoField11 + "' != '" + java.time.temporal.ChronoField.AMPM_OF_DAY + "'", chronoField11.equals(java.time.temporal.ChronoField.AMPM_OF_DAY));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + chronoField13 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_MONTH + "'", chronoField13.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_MONTH));
        org.junit.Assert.assertNotNull(valueRange14);
    }

    @Test
    public void test2152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2152");
        org.joda.time.Days days0 = org.joda.time.Days.SEVEN;
        org.junit.Assert.assertNotNull(days0);
    }

    @Test
    public void test2153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2153");
        java.util.GregorianCalendar gregorianCalendar5 = new java.util.GregorianCalendar(12, 4096, 7, (-1), (int) (short) 10);
        int int6 = gregorianCalendar5.getWeeksInWeekYear();
        java.lang.String str7 = gregorianCalendar5.getCalendarType();
        java.time.ZonedDateTime zonedDateTime8 = gregorianCalendar5.toZonedDateTime();
        java.time.chrono.ChronoZonedDateTime<java.time.LocalDate> localDateChronoZonedDateTime9 = zonedDateTime8.withEarlierOffsetAtOverlap();
        java.time.OffsetDateTime offsetDateTime10 = java.time.OffsetDateTime.from((java.time.temporal.TemporalAccessor) localDateChronoZonedDateTime9);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 52 + "'", int6 == 52);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "gregory" + "'", str7, "gregory");
        org.junit.Assert.assertNotNull(zonedDateTime8);
        org.junit.Assert.assertNotNull(localDateChronoZonedDateTime9);
        org.junit.Assert.assertNotNull(offsetDateTime10);
    }

    @Test
    public void test2154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2154");
        java.util.stream.IntStream intStream2 = java.util.stream.IntStream.rangeClosed(100, (int) '4');
        java.util.stream.IntStream intStream3 = intStream2.sequential();
        java.util.function.IntUnaryOperator intUnaryOperator4 = java.util.function.IntUnaryOperator.identity();
        java.util.stream.IntStream intStream5 = intStream2.map(intUnaryOperator4);
        java.util.function.IntUnaryOperator intUnaryOperator6 = java.util.function.IntUnaryOperator.identity();
        java.util.stream.IntStream intStream9 = java.util.stream.IntStream.rangeClosed(100, (int) '4');
        java.util.stream.IntStream intStream10 = intStream9.sequential();
        java.util.function.IntUnaryOperator intUnaryOperator11 = java.util.function.IntUnaryOperator.identity();
        java.util.stream.IntStream intStream12 = intStream9.map(intUnaryOperator11);
        java.util.function.IntUnaryOperator intUnaryOperator13 = intUnaryOperator6.compose(intUnaryOperator11);
        int int15 = intUnaryOperator11.applyAsInt(5);
        java.util.function.IntUnaryOperator intUnaryOperator16 = java.util.function.IntUnaryOperator.identity();
        java.util.stream.IntStream intStream19 = java.util.stream.IntStream.rangeClosed(100, (int) '4');
        java.util.stream.IntStream intStream20 = intStream19.sequential();
        java.util.function.IntUnaryOperator intUnaryOperator21 = java.util.function.IntUnaryOperator.identity();
        java.util.stream.IntStream intStream22 = intStream19.map(intUnaryOperator21);
        java.util.function.IntUnaryOperator intUnaryOperator23 = intUnaryOperator16.compose(intUnaryOperator21);
        java.util.function.IntUnaryOperator intUnaryOperator24 = intUnaryOperator11.compose(intUnaryOperator21);
        java.util.stream.IntStream intStream25 = intStream5.map(intUnaryOperator21);
        java.util.function.IntBinaryOperator intBinaryOperator27 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int28 = intStream25.reduce(365, intBinaryOperator27);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intStream2);
        org.junit.Assert.assertNotNull(intStream3);
        org.junit.Assert.assertNotNull(intUnaryOperator4);
        org.junit.Assert.assertNotNull(intStream5);
        org.junit.Assert.assertNotNull(intUnaryOperator6);
        org.junit.Assert.assertNotNull(intStream9);
        org.junit.Assert.assertNotNull(intStream10);
        org.junit.Assert.assertNotNull(intUnaryOperator11);
        org.junit.Assert.assertNotNull(intStream12);
        org.junit.Assert.assertNotNull(intUnaryOperator13);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 5 + "'", int15 == 5);
        org.junit.Assert.assertNotNull(intUnaryOperator16);
        org.junit.Assert.assertNotNull(intStream19);
        org.junit.Assert.assertNotNull(intStream20);
        org.junit.Assert.assertNotNull(intUnaryOperator21);
        org.junit.Assert.assertNotNull(intStream22);
        org.junit.Assert.assertNotNull(intUnaryOperator23);
        org.junit.Assert.assertNotNull(intUnaryOperator24);
        org.junit.Assert.assertNotNull(intStream25);
    }

    @Test
    public void test2155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2155");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forID("subject:\n (GERMAN)");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The datetime zone id 'subject:? (GERMAN)' is not recognised");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test2156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2156");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 3, chronology1);
        org.joda.time.DateTime.Property property3 = dateTime2.dayOfYear();
        org.joda.time.Interval interval4 = property3.toInterval();
        org.joda.time.Weeks weeks5 = org.joda.time.Weeks.ONE;
        java.util.concurrent.TimeUnit timeUnit6 = java.util.concurrent.TimeUnit.NANOSECONDS;
        boolean boolean7 = weeks5.equals((java.lang.Object) timeUnit6);
        timeUnit6.sleep((long) 10);
        boolean boolean10 = interval4.equals((java.lang.Object) timeUnit6);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.LocalTime localTime14 = new org.joda.time.LocalTime((long) 0, chronology13);
        org.joda.time.Chronology chronology15 = localTime14.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.weekyearOfCentury();
        org.joda.time.DurationField durationField17 = chronology15.weekyears();
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime((long) 21, chronology15);
        org.joda.time.Interval interval19 = interval4.withChronology(chronology15);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(weeks5);
        org.junit.Assert.assertNotNull(timeUnit6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(interval19);
    }

    @Test
    public void test2157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2157");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Duration duration2 = new org.joda.time.Duration(readableInstant0, readableInstant1);
        org.joda.time.Seconds seconds3 = duration2.toStandardSeconds();
        int int4 = seconds3.getSeconds();
        org.joda.time.Seconds seconds6 = seconds3.dividedBy(28);
        org.joda.time.Seconds seconds7 = seconds6.negated();
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardDays((long) 20);
        org.joda.time.Seconds seconds10 = duration9.toStandardSeconds();
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.Duration duration13 = new org.joda.time.Duration(readableInstant11, readableInstant12);
        org.joda.time.Seconds seconds14 = duration13.toStandardSeconds();
        int int15 = seconds14.getSeconds();
        org.joda.time.Seconds seconds17 = seconds14.dividedBy(28);
        boolean boolean18 = seconds10.isLessThan(seconds14);
        int int19 = seconds10.getSeconds();
        boolean boolean20 = seconds6.isGreaterThan(seconds10);
        org.junit.Assert.assertNotNull(seconds3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(seconds6);
        org.junit.Assert.assertNotNull(seconds7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(seconds10);
        org.junit.Assert.assertNotNull(seconds14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(seconds17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1728000 + "'", int19 == 1728000);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
    }

    @Test
    public void test2158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2158");
        java.time.LocalDate localDate1 = java.time.LocalDate.ofEpochDay((long) ' ');
        java.time.OffsetTime offsetTime2 = java.time.OffsetTime.MAX;
        java.time.LocalTime localTime3 = offsetTime2.toLocalTime();
        java.lang.String str4 = offsetTime2.toString();
        java.time.Duration duration5 = java.time.Duration.ZERO;
        java.lang.String str6 = duration5.toString();
        java.time.OffsetTime offsetTime7 = offsetTime2.plus((java.time.temporal.TemporalAmount) duration5);
        java.time.LocalTime localTime8 = offsetTime2.toLocalTime();
        java.time.chrono.ChronoLocalDateTime<?> wildcardChronoLocalDateTime9 = localDate1.atTime(localTime8);
        java.time.LocalDate localDate11 = localDate1.minusWeeks((long) 2097);
        java.util.TimeZone timeZone13 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone13);
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight((long) 1970, dateTimeZone14);
        long long18 = dateTimeZone14.convertLocalToUTC((long) 3, false);
        long long21 = dateTimeZone14.convertLocalToUTC(0L, true);
        boolean boolean22 = localDate1.equals((java.lang.Object) true);
        java.util.GregorianCalendar gregorianCalendar28 = new java.util.GregorianCalendar(12, 4096, 7, (-1), (int) (short) 10);
        int int29 = gregorianCalendar28.getWeeksInWeekYear();
        java.lang.String str30 = gregorianCalendar28.getCalendarType();
        java.time.ZonedDateTime zonedDateTime31 = gregorianCalendar28.toZonedDateTime();
        java.time.ZonedDateTime zonedDateTime33 = zonedDateTime31.minusMonths((long) 10);
        java.time.chrono.ChronoZonedDateTime<java.time.LocalDate> localDateChronoZonedDateTime34 = zonedDateTime31.withEarlierOffsetAtOverlap();
        int int35 = zonedDateTime31.getDayOfYear();
        java.time.temporal.ChronoField chronoField36 = java.time.temporal.ChronoField.NANO_OF_SECOND;
        java.time.ZonedDateTime zonedDateTime38 = zonedDateTime31.with((java.time.temporal.TemporalField) chronoField36, (long) 2012);
        boolean boolean39 = localDate1.isSupported((java.time.temporal.TemporalField) chronoField36);
        java.time.LocalDate localDate41 = java.time.LocalDate.ofEpochDay((long) ' ');
        java.time.OffsetTime offsetTime42 = java.time.OffsetTime.MAX;
        java.time.LocalTime localTime43 = offsetTime42.toLocalTime();
        java.lang.String str44 = offsetTime42.toString();
        java.time.Duration duration45 = java.time.Duration.ZERO;
        java.lang.String str46 = duration45.toString();
        java.time.OffsetTime offsetTime47 = offsetTime42.plus((java.time.temporal.TemporalAmount) duration45);
        java.time.LocalTime localTime48 = offsetTime42.toLocalTime();
        java.time.chrono.ChronoLocalDateTime<?> wildcardChronoLocalDateTime49 = localDate41.atTime(localTime48);
        java.time.LocalDate localDate51 = localDate41.minusWeeks((long) 2097);
        java.lang.String str52 = localDate51.toString();
        boolean boolean53 = localDate1.isBefore((java.time.chrono.ChronoLocalDate) localDate51);
        org.junit.Assert.assertNotNull(localDate1);
        org.junit.Assert.assertNotNull(offsetTime2);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "23:59:59.999999999-18:00" + "'", str4, "23:59:59.999999999-18:00");
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "PT0S" + "'", str6, "PT0S");
        org.junit.Assert.assertNotNull(offsetTime7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(wildcardChronoLocalDateTime9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 3L + "'", long18 == 3L);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 52 + "'", int29 == 52);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "gregory" + "'", str30, "gregory");
        org.junit.Assert.assertNotNull(zonedDateTime31);
        org.junit.Assert.assertNotNull(zonedDateTime33);
        org.junit.Assert.assertNotNull(localDateChronoZonedDateTime34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 127 + "'", int35 == 127);
        org.junit.Assert.assertTrue("'" + chronoField36 + "' != '" + java.time.temporal.ChronoField.NANO_OF_SECOND + "'", chronoField36.equals(java.time.temporal.ChronoField.NANO_OF_SECOND));
        org.junit.Assert.assertNotNull(zonedDateTime38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertNotNull(offsetTime42);
        org.junit.Assert.assertNotNull(localTime43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "23:59:59.999999999-18:00" + "'", str44, "23:59:59.999999999-18:00");
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "PT0S" + "'", str46, "PT0S");
        org.junit.Assert.assertNotNull(offsetTime47);
        org.junit.Assert.assertNotNull(localTime48);
        org.junit.Assert.assertNotNull(wildcardChronoLocalDateTime49);
        org.junit.Assert.assertNotNull(localDate51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "1929-11-25" + "'", str52, "1929-11-25");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test2159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2159");
        java.util.function.UnaryOperator<java.util.IntSummaryStatistics> intSummaryStatisticsUnaryOperator0 = java.util.function.UnaryOperator.identity();
        org.junit.Assert.assertNotNull(intSummaryStatisticsUnaryOperator0);
    }

    @Test
    public void test2160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2160");
        java.util.Set<java.lang.String> strSet0 = java.time.ZoneId.getAvailableZoneIds();
        java.util.Set<java.lang.String> strSet1 = java.time.ZoneId.getAvailableZoneIds();
        java.util.stream.Stream<java.lang.String> strStream2 = strSet1.parallelStream();
        java.lang.Object[] objArray3 = strSet1.toArray();
        java.util.Spliterator<java.lang.String> strSpliterator4 = strSet1.spliterator();
        boolean boolean5 = strSet0.containsAll((java.util.Collection<java.lang.String>) strSet1);
        strSet0.clear();
        java.util.Spliterator<java.lang.String> strSpliterator7 = strSet0.spliterator();
        org.junit.Assert.assertNotNull(strSet0);
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNotNull(strStream2);
        org.junit.Assert.assertNotNull(objArray3);
        org.junit.Assert.assertNotNull(strSpliterator4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(strSpliterator7);
    }

    @Test
    public void test2161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2161");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Duration duration2 = new org.joda.time.Duration(readableInstant0, readableInstant1);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = duration2.toPeriodTo(readableInstant3, periodType4);
        long long6 = duration2.getStandardSeconds();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 3, chronology8);
        org.joda.time.DateTime.Property property10 = dateTime9.dayOfYear();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight((java.lang.Object) dateTime9, chronology11);
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight12.minusMonths((-1));
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight12.withDayOfYear((int) ' ');
        org.joda.time.Interval interval17 = duration2.toIntervalTo((org.joda.time.ReadableInstant) dateMidnight16);
        long long18 = duration2.getStandardSeconds();
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate();
        org.joda.time.Interval interval20 = localDate19.toInterval();
        int int21 = localDate19.getYearOfCentury();
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.Duration duration24 = new org.joda.time.Duration(readableInstant22, readableInstant23);
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.PeriodType periodType26 = null;
        org.joda.time.Period period27 = duration24.toPeriodTo(readableInstant25, periodType26);
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.Duration duration30 = new org.joda.time.Duration(readableInstant28, readableInstant29);
        long long31 = duration30.getMillis();
        boolean boolean32 = duration24.isShorterThan((org.joda.time.ReadableDuration) duration30);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime((long) 3, chronology34);
        org.joda.time.DateTime.Property property36 = dateTime35.dayOfYear();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.DateMidnight dateMidnight38 = new org.joda.time.DateMidnight((java.lang.Object) dateTime35, chronology37);
        org.joda.time.MutableDateTime mutableDateTime39 = dateTime35.toMutableDateTime();
        mutableDateTime39.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property42 = mutableDateTime39.dayOfWeek();
        org.joda.time.MutableDateTime.Property property43 = mutableDateTime39.year();
        org.joda.time.MutableDateTime.Property property44 = mutableDateTime39.weekyear();
        boolean boolean45 = duration24.equals((java.lang.Object) mutableDateTime39);
        mutableDateTime39.addMonths((int) ' ');
        mutableDateTime39.add((long) (byte) 10);
        org.joda.time.Period period50 = org.joda.time.Period.ZERO;
        org.joda.time.Period period51 = period50.normalizedStandard();
        org.joda.time.Period period53 = period50.plusHours(2);
        java.time.chrono.IsoEra isoEra54 = java.time.chrono.IsoEra.CE;
        boolean boolean55 = period53.equals((java.lang.Object) isoEra54);
        int int56 = period53.getMinutes();
        mutableDateTime39.add((org.joda.time.ReadablePeriod) period53);
        java.util.TimeZone timeZone59 = null;
        org.joda.time.DateTimeZone dateTimeZone60 = org.joda.time.DateTimeZone.forTimeZone(timeZone59);
        org.joda.time.DateMidnight dateMidnight61 = new org.joda.time.DateMidnight((long) 1970, dateTimeZone60);
        long long64 = dateTimeZone60.convertLocalToUTC((long) 3, false);
        long long67 = dateTimeZone60.convertLocalToUTC(0L, true);
        mutableDateTime39.setZoneRetainFields(dateTimeZone60);
        java.lang.String str69 = dateTimeZone60.toString();
        org.joda.time.chrono.EthiopicChronology ethiopicChronology70 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone60);
        org.joda.time.DateTime dateTime71 = localDate19.toDateTimeAtCurrentTime(dateTimeZone60);
        org.joda.time.DateTime dateTime73 = dateTime71.minusMinutes((-10));
        org.joda.time.Period period74 = duration2.toPeriodTo((org.joda.time.ReadableInstant) dateTime71);
        org.joda.time.ReadableInstant readableInstant75 = null;
        org.joda.time.ReadableInstant readableInstant76 = null;
        org.joda.time.Duration duration77 = new org.joda.time.Duration(readableInstant75, readableInstant76);
        org.joda.time.ReadableInstant readableInstant78 = null;
        org.joda.time.PeriodType periodType79 = null;
        org.joda.time.Period period80 = duration77.toPeriodTo(readableInstant78, periodType79);
        long long81 = duration77.getStandardSeconds();
        org.joda.time.Chronology chronology83 = null;
        org.joda.time.DateTime dateTime84 = new org.joda.time.DateTime((long) 3, chronology83);
        org.joda.time.DateTime.Property property85 = dateTime84.dayOfYear();
        org.joda.time.Chronology chronology86 = null;
        org.joda.time.DateMidnight dateMidnight87 = new org.joda.time.DateMidnight((java.lang.Object) dateTime84, chronology86);
        org.joda.time.DateMidnight dateMidnight89 = dateMidnight87.minusMonths((-1));
        org.joda.time.DateMidnight dateMidnight91 = dateMidnight87.withDayOfYear((int) ' ');
        org.joda.time.Interval interval92 = duration77.toIntervalTo((org.joda.time.ReadableInstant) dateMidnight91);
        org.joda.time.Duration duration94 = duration2.withDurationAdded((org.joda.time.ReadableDuration) duration77, 32770);
        org.joda.time.Duration duration95 = duration77.toDuration();
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 22 + "'", int21 == 22);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(mutableDateTime39);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertTrue("'" + isoEra54 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra54.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone60);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 3L + "'", long64 == 3L);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 0L + "'", long67 == 0L);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "Etc/UTC" + "'", str69, "Etc/UTC");
        org.junit.Assert.assertNotNull(ethiopicChronology70);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(period74);
        org.junit.Assert.assertNotNull(period80);
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + 0L + "'", long81 == 0L);
        org.junit.Assert.assertNotNull(property85);
        org.junit.Assert.assertNotNull(dateMidnight89);
        org.junit.Assert.assertNotNull(dateMidnight91);
        org.junit.Assert.assertNotNull(interval92);
        org.junit.Assert.assertNotNull(duration94);
        org.junit.Assert.assertNotNull(duration95);
    }

    @Test
    public void test2162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2162");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Duration duration2 = new org.joda.time.Duration(readableInstant0, readableInstant1);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = duration2.toPeriodTo(readableInstant3, periodType4);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.Duration duration8 = new org.joda.time.Duration(readableInstant6, readableInstant7);
        long long9 = duration8.getMillis();
        boolean boolean10 = duration2.isShorterThan((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime(chronology11);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.withYearOfCentury((int) 'a');
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.plusSeconds(6);
        org.joda.time.DateTime dateTime17 = localDateTime14.toDateTime();
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration8, (org.joda.time.ReadableInstant) dateTime17);
        mutablePeriod18.setMillis(366);
        mutablePeriod18.setYears(83400);
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate();
        int int24 = localDate23.getCenturyOfEra();
        org.joda.time.LocalDate.Property property25 = localDate23.dayOfWeek();
        org.joda.time.LocalDate localDate27 = property25.addToCopy(7);
        org.joda.time.LocalDate.Property property28 = localDate27.dayOfMonth();
        int int29 = localDate27.getEra();
        org.joda.time.PeriodType periodType30 = org.joda.time.PeriodType.years();
        org.joda.time.DurationFieldType durationFieldType31 = org.joda.time.DurationFieldType.halfdays();
        int int32 = periodType30.indexOf(durationFieldType31);
        java.lang.String str33 = durationFieldType31.toString();
        boolean boolean34 = localDate27.isSupported(durationFieldType31);
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod18.add(durationFieldType31, 558);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'halfdays'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 20 + "'", int24 == 20);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(periodType30);
        org.junit.Assert.assertNotNull(durationFieldType31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "halfdays" + "'", str33, "halfdays");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test2163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2163");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.Interval interval1 = localDate0.toInterval();
        int int2 = localDate0.getYearOfCentury();
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.Duration duration5 = new org.joda.time.Duration(readableInstant3, readableInstant4);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.PeriodType periodType7 = null;
        org.joda.time.Period period8 = duration5.toPeriodTo(readableInstant6, periodType7);
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Duration duration11 = new org.joda.time.Duration(readableInstant9, readableInstant10);
        long long12 = duration11.getMillis();
        boolean boolean13 = duration5.isShorterThan((org.joda.time.ReadableDuration) duration11);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) 3, chronology15);
        org.joda.time.DateTime.Property property17 = dateTime16.dayOfYear();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight((java.lang.Object) dateTime16, chronology18);
        org.joda.time.MutableDateTime mutableDateTime20 = dateTime16.toMutableDateTime();
        mutableDateTime20.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime20.dayOfWeek();
        org.joda.time.MutableDateTime.Property property24 = mutableDateTime20.year();
        org.joda.time.MutableDateTime.Property property25 = mutableDateTime20.weekyear();
        boolean boolean26 = duration5.equals((java.lang.Object) mutableDateTime20);
        mutableDateTime20.addMonths((int) ' ');
        mutableDateTime20.add((long) (byte) 10);
        org.joda.time.Period period31 = org.joda.time.Period.ZERO;
        org.joda.time.Period period32 = period31.normalizedStandard();
        org.joda.time.Period period34 = period31.plusHours(2);
        java.time.chrono.IsoEra isoEra35 = java.time.chrono.IsoEra.CE;
        boolean boolean36 = period34.equals((java.lang.Object) isoEra35);
        int int37 = period34.getMinutes();
        mutableDateTime20.add((org.joda.time.ReadablePeriod) period34);
        java.util.TimeZone timeZone40 = null;
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forTimeZone(timeZone40);
        org.joda.time.DateMidnight dateMidnight42 = new org.joda.time.DateMidnight((long) 1970, dateTimeZone41);
        long long45 = dateTimeZone41.convertLocalToUTC((long) 3, false);
        long long48 = dateTimeZone41.convertLocalToUTC(0L, true);
        mutableDateTime20.setZoneRetainFields(dateTimeZone41);
        java.lang.String str50 = dateTimeZone41.toString();
        org.joda.time.chrono.EthiopicChronology ethiopicChronology51 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone41);
        org.joda.time.DateTime dateTime52 = localDate0.toDateTimeAtCurrentTime(dateTimeZone41);
        org.joda.time.LocalDate localDate53 = new org.joda.time.LocalDate();
        org.joda.time.Interval interval54 = localDate53.toInterval();
        org.joda.time.LocalDate.Property property55 = localDate53.dayOfMonth();
        org.joda.time.LocalDate.Property property56 = localDate53.weekOfWeekyear();
        org.joda.time.LocalDate.Property property57 = localDate53.weekyear();
        int int58 = localDate53.getYear();
        org.joda.time.Period period59 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDate0, (org.joda.time.ReadablePartial) localDate53);
        org.joda.time.LocalDate localDate61 = localDate0.plusMonths(83400);
        org.junit.Assert.assertNotNull(interval1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 22 + "'", int2 == 22);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertTrue("'" + isoEra35 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra35.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 3L + "'", long45 == 3L);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "Etc/UTC" + "'", str50, "Etc/UTC");
        org.junit.Assert.assertNotNull(ethiopicChronology51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 2022 + "'", int58 == 2022);
        org.junit.Assert.assertNotNull(localDate61);
    }

    @Test
    public void test2164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2164");
        java.util.stream.DoubleStream doubleStream0 = java.util.stream.DoubleStream.empty();
        java.util.stream.DoubleStream doubleStream1 = doubleStream0.unordered();
        double[] doubleArray2 = doubleStream0.toArray();
        java.nio.DoubleBuffer doubleBuffer3 = java.nio.DoubleBuffer.wrap(doubleArray2);
        java.util.stream.DoubleStream doubleStream4 = java.util.stream.DoubleStream.of(doubleArray2);
        java.util.function.DoublePredicate doublePredicate5 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.DoubleStream doubleStream6 = doubleStream4.filter(doublePredicate5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleStream0);
        org.junit.Assert.assertNotNull(doubleStream1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleBuffer3);
        org.junit.Assert.assertNotNull(doubleStream4);
    }

    @Test
    public void test2165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2165");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((long) 0, chronology1);
        org.joda.time.LocalTime localTime4 = localTime2.minusMillis(2022);
        org.joda.time.LocalTime localTime6 = localTime2.plusMillis((int) (byte) 0);
        org.joda.time.LocalTime localTime8 = localTime2.minusMinutes(23);
        org.joda.time.LocalTime.Property property9 = localTime8.secondOfMinute();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType11 = localTime8.getFieldType((-2));
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: -2");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(property9);
    }

    @Test
    public void test2166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2166");
        java.util.stream.LongStream longStream2 = java.util.stream.LongStream.rangeClosed((long) (short) -1, (long) 7);
        java.util.stream.LongStream longStream4 = longStream2.limit((long) 16384);
        java.util.stream.LongStream longStream5 = java.util.stream.LongStream.empty();
        long long6 = longStream5.sum();
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.LongStream longStream7 = java.util.stream.LongStream.concat(longStream2, longStream5);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: stream has already been operated upon or closed");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(longStream2);
        org.junit.Assert.assertNotNull(longStream4);
        org.junit.Assert.assertNotNull(longStream5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
    }

    @Test
    public void test2167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2167");
        org.joda.time.Weeks weeks0 = org.joda.time.Weeks.ONE;
        java.util.concurrent.TimeUnit timeUnit1 = java.util.concurrent.TimeUnit.NANOSECONDS;
        boolean boolean2 = weeks0.equals((java.lang.Object) timeUnit1);
        org.joda.time.MutablePeriod mutablePeriod3 = weeks0.toMutablePeriod();
        org.joda.time.Chronology chronology6 = null;
        mutablePeriod3.setPeriod((long) 2, (long) 2, chronology6);
        org.joda.time.Period period12 = new org.joda.time.Period((int) '#', 0, 2, (int) (short) 100);
        mutablePeriod3.add((org.joda.time.ReadablePeriod) period12);
        mutablePeriod3.setHours((int) (byte) -1);
        mutablePeriod3.setYears(100);
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate();
        int int19 = localDate18.getCenturyOfEra();
        org.joda.time.LocalDate.Property property20 = localDate18.dayOfWeek();
        org.joda.time.LocalDate localDate22 = property20.addToCopy(7);
        org.joda.time.LocalDate.Property property23 = localDate22.dayOfMonth();
        int int24 = localDate22.getEra();
        org.joda.time.PeriodType periodType25 = org.joda.time.PeriodType.years();
        org.joda.time.DurationFieldType durationFieldType26 = org.joda.time.DurationFieldType.halfdays();
        int int27 = periodType25.indexOf(durationFieldType26);
        java.lang.String str28 = durationFieldType26.toString();
        boolean boolean29 = localDate22.isSupported(durationFieldType26);
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod3.set(durationFieldType26, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'halfdays'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(weeks0);
        org.junit.Assert.assertNotNull(timeUnit1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(mutablePeriod3);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 20 + "'", int19 == 20);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(periodType25);
        org.junit.Assert.assertNotNull(durationFieldType26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "halfdays" + "'", str28, "halfdays");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test2168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2168");
        java.util.GregorianCalendar gregorianCalendar5 = new java.util.GregorianCalendar(12, 4096, 7, (-1), (int) (short) 10);
        int int6 = gregorianCalendar5.getWeeksInWeekYear();
        java.lang.String str7 = gregorianCalendar5.getCalendarType();
        java.time.ZonedDateTime zonedDateTime8 = gregorianCalendar5.toZonedDateTime();
        java.util.GregorianCalendar gregorianCalendar14 = new java.util.GregorianCalendar(12, 4096, 7, (-1), (int) (short) 10);
        int int15 = gregorianCalendar14.getWeeksInWeekYear();
        java.lang.String str16 = gregorianCalendar14.getCalendarType();
        java.time.ZonedDateTime zonedDateTime17 = gregorianCalendar14.toZonedDateTime();
        int int18 = zonedDateTime8.compareTo((java.time.chrono.ChronoZonedDateTime<java.time.LocalDate>) zonedDateTime17);
        java.time.ZonedDateTime zonedDateTime20 = zonedDateTime8.plusDays((long) 2022);
        java.time.Instant instant21 = zonedDateTime8.toInstant();
        java.time.Period period23 = java.time.Period.ofMonths(0);
        java.time.ZonedDateTime zonedDateTime24 = zonedDateTime8.minus((java.time.temporal.TemporalAmount) period23);
        java.time.Period period26 = period23.plusYears((long) 45);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 52 + "'", int6 == 52);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "gregory" + "'", str7, "gregory");
        org.junit.Assert.assertNotNull(zonedDateTime8);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 52 + "'", int15 == 52);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "gregory" + "'", str16, "gregory");
        org.junit.Assert.assertNotNull(zonedDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(zonedDateTime20);
        org.junit.Assert.assertNotNull(instant21);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(zonedDateTime24);
        org.junit.Assert.assertNotNull(period26);
    }

    @Test
    public void test2169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2169");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.nio.LongBuffer longBuffer3 = java.nio.LongBuffer.allocate((int) (short) 0);
        java.nio.Buffer buffer4 = longBuffer3.mark();
        boolean boolean5 = properties1.containsKey((java.lang.Object) longBuffer3);
        java.util.Enumeration<java.lang.Object> objEnumeration6 = properties1.elements();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((java.lang.Object) objEnumeration6);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: java.util.Collections$EmptyEnumeration");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(longBuffer3);
        org.junit.Assert.assertNotNull(buffer4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(objEnumeration6);
    }

    @Test
    public void test2170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2170");
        java.util.GregorianCalendar gregorianCalendar5 = new java.util.GregorianCalendar(12, 4096, 7, (-1), (int) (short) 10);
        int int6 = gregorianCalendar5.getWeeksInWeekYear();
        java.util.TimeZone timeZone7 = gregorianCalendar5.getTimeZone();
        java.util.Locale locale9 = new java.util.Locale("hi!");
        java.util.Calendar calendar10 = java.util.Calendar.getInstance(timeZone7, locale9);
        org.joda.time.TimeOfDay timeOfDay12 = org.joda.time.TimeOfDay.fromMillisOfDay((long) (short) 0);
        org.joda.time.TimeOfDay timeOfDay14 = org.joda.time.TimeOfDay.fromMillisOfDay((long) (short) 0);
        org.joda.time.Hours hours15 = org.joda.time.Hours.hoursBetween((org.joda.time.ReadablePartial) timeOfDay12, (org.joda.time.ReadablePartial) timeOfDay14);
        org.joda.time.DurationFieldType durationFieldType16 = org.joda.time.DurationFieldType.hours();
        org.joda.time.TimeOfDay timeOfDay18 = timeOfDay14.withFieldAdded(durationFieldType16, (int) (byte) 0);
        int int19 = timeOfDay14.getMillisOfSecond();
        org.joda.time.TimeOfDay timeOfDay21 = timeOfDay14.plusHours(9);
        org.joda.time.TimeOfDay.Property property22 = timeOfDay14.secondOfMinute();
        java.time.ZoneOffset zoneOffset25 = java.time.ZoneOffset.ofHoursMinutes(1, 10);
        java.time.LocalDate localDate26 = java.time.LocalDate.now((java.time.ZoneId) zoneOffset25);
        boolean boolean27 = property22.equals((java.lang.Object) localDate26);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = property22.getFieldType();
        org.joda.time.TimeOfDay timeOfDay29 = property22.withMinimumValue();
        org.joda.time.TimeOfDay timeOfDay31 = property22.addToCopy(59);
        java.util.Locale locale34 = new java.util.Locale("Subject:\n", "German");
        int int35 = property22.getMaximumTextLength(locale34);
        org.joda.time.tz.NameProvider nameProvider36 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.LocalTime localTime40 = new org.joda.time.LocalTime((long) 0, chronology39);
        org.joda.time.Chronology chronology41 = localTime40.getChronology();
        org.joda.time.DateTimeField dateTimeField42 = chronology41.weekyearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime43 = org.joda.time.MutableDateTime.now(chronology41);
        org.joda.time.DateTimeField dateTimeField44 = chronology41.monthOfYear();
        java.util.Locale locale45 = java.util.Locale.getDefault();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket47 = new org.joda.time.format.DateTimeParserBucket((long) 28, chronology41, locale45, (java.lang.Integer) 0);
        java.lang.String str50 = nameProvider36.getShortName(locale45, "22", "Chinese");
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime((long) 3, chronology52);
        org.joda.time.DateTime.Property property54 = dateTime53.dayOfYear();
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.DateMidnight dateMidnight56 = new org.joda.time.DateMidnight((java.lang.Object) dateTime53, chronology55);
        org.joda.time.MutableDateTime mutableDateTime57 = dateTime53.toMutableDateTime();
        mutableDateTime57.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property60 = mutableDateTime57.dayOfWeek();
        org.joda.time.MutableDateTime.Property property61 = mutableDateTime57.year();
        java.util.TimeZone timeZone62 = null;
        org.joda.time.DateTimeZone dateTimeZone63 = org.joda.time.DateTimeZone.forTimeZone(timeZone62);
        mutableDateTime57.setZone(dateTimeZone63);
        java.util.Locale locale66 = java.util.Locale.TAIWAN;
        java.lang.String str67 = dateTimeZone63.getShortName((long) 64, locale66);
        java.lang.String str70 = nameProvider36.getName(locale66, "P1W", "Wochentag");
        java.time.format.DecimalStyle decimalStyle71 = java.time.format.DecimalStyle.of(locale66);
        java.lang.String str72 = locale34.getDisplayName(locale66);
        java.lang.String str73 = timeZone7.getDisplayName(locale34);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 52 + "'", int6 == 52);
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertEquals(locale9.toString(), "hi!");
        org.junit.Assert.assertNotNull(calendar10);
// flaky:         org.junit.Assert.assertEquals(calendar10.toString(), "java.util.GregorianCalendar[time=1645436250698,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=35,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=37,SECOND=30,MILLISECOND=733,ZONE_OFFSET=35,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(timeOfDay12);
        org.junit.Assert.assertNotNull(timeOfDay14);
        org.junit.Assert.assertNotNull(hours15);
        org.junit.Assert.assertNotNull(durationFieldType16);
        org.junit.Assert.assertNotNull(timeOfDay18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(timeOfDay21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(zoneOffset25);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertNotNull(timeOfDay29);
        org.junit.Assert.assertNotNull(timeOfDay31);
        org.junit.Assert.assertEquals(locale34.toString(), "subject:\n_GERMAN");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2 + "'", int35 == 2);
        org.junit.Assert.assertNotNull(nameProvider36);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(mutableDateTime43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "en_US");
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(mutableDateTime57);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(dateTimeZone63);
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "+00:00" + "'", str67, "+00:00");
        org.junit.Assert.assertNull(str70);
        org.junit.Assert.assertNotNull(decimalStyle71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "subject:\n (GERMAN)" + "'", str72, "subject:\n (GERMAN)");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "Coordinated Universal Time" + "'", str73, "Coordinated Universal Time");
    }

    @Test
    public void test2171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2171");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.Interval interval1 = localDate0.toInterval();
        int int2 = localDate0.getDayOfYear();
        java.util.TimeZone timeZone6 = null;
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forTimeZone(timeZone6);
        org.joda.time.DateMidnight dateMidnight8 = new org.joda.time.DateMidnight((long) 1970, dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 3600000, dateTimeZone7);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) 22, dateTimeZone7);
        org.joda.time.Interval interval11 = localDate0.toInterval(dateTimeZone7);
        org.joda.time.DateMidnight dateMidnight12 = org.joda.time.DateMidnight.now(dateTimeZone7);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) 3, chronology14);
        org.joda.time.DateTime.Property property16 = dateTime15.dayOfYear();
        org.joda.time.Interval interval17 = property16.toInterval();
        org.joda.time.DateTime dateTime18 = interval17.getEnd();
        int int19 = dateTimeZone7.getOffset((org.joda.time.ReadableInstant) dateTime18);
        boolean boolean21 = dateTimeZone7.equals((java.lang.Object) 31);
        org.junit.Assert.assertNotNull(interval1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 52 + "'", int2 == 52);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test2172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2172");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.withField(dateTimeFieldType2, (int) 'a');
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime(chronology5);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.withYearOfCentury((int) 'a');
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.plusSeconds(6);
        boolean boolean11 = localDateTime4.isBefore((org.joda.time.ReadablePartial) localDateTime8);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.Duration duration14 = new org.joda.time.Duration(readableInstant12, readableInstant13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.PeriodType periodType16 = null;
        org.joda.time.Period period17 = duration14.toPeriodTo(readableInstant15, periodType16);
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.Duration duration20 = new org.joda.time.Duration(readableInstant18, readableInstant19);
        long long21 = duration20.getMillis();
        boolean boolean22 = duration14.isShorterThan((org.joda.time.ReadableDuration) duration20);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) 3, chronology24);
        org.joda.time.DateTime.Property property26 = dateTime25.dayOfYear();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.DateMidnight dateMidnight28 = new org.joda.time.DateMidnight((java.lang.Object) dateTime25, chronology27);
        org.joda.time.MutableDateTime mutableDateTime29 = dateTime25.toMutableDateTime();
        mutableDateTime29.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property32 = mutableDateTime29.dayOfWeek();
        org.joda.time.MutableDateTime.Property property33 = mutableDateTime29.year();
        org.joda.time.MutableDateTime.Property property34 = mutableDateTime29.weekyear();
        boolean boolean35 = duration14.equals((java.lang.Object) mutableDateTime29);
        mutableDateTime29.addMonths((int) ' ');
        mutableDateTime29.add((long) (byte) 10);
        org.joda.time.Period period40 = org.joda.time.Period.ZERO;
        org.joda.time.Period period41 = period40.normalizedStandard();
        org.joda.time.Period period43 = period40.plusHours(2);
        java.time.chrono.IsoEra isoEra44 = java.time.chrono.IsoEra.CE;
        boolean boolean45 = period43.equals((java.lang.Object) isoEra44);
        int int46 = period43.getMinutes();
        mutableDateTime29.add((org.joda.time.ReadablePeriod) period43);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.LocalDateTime localDateTime49 = new org.joda.time.LocalDateTime(chronology48);
        org.joda.time.LocalDateTime localDateTime51 = localDateTime49.withYearOfCentury((int) 'a');
        int int52 = localDateTime51.getDayOfMonth();
        org.joda.time.LocalDateTime localDateTime54 = localDateTime51.withMinuteOfHour((int) ' ');
        org.joda.time.DateTimeFieldType dateTimeFieldType55 = org.joda.time.DateTimeFieldType.weekyear();
        int int56 = localDateTime51.get(dateTimeFieldType55);
        org.joda.time.MutableDateTime.Property property57 = mutableDateTime29.property(dateTimeFieldType55);
        boolean boolean58 = localDateTime4.isSupported(dateTimeFieldType55);
        org.joda.time.DurationFieldType durationFieldType59 = dateTimeFieldType55.getDurationType();
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(mutableDateTime29);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertTrue("'" + isoEra44 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra44.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 21 + "'", int52 == 21);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(dateTimeFieldType55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 2097 + "'", int56 == 2097);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(durationFieldType59);
    }

    @Test
    public void test2173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2173");
        org.joda.time.Period period0 = org.joda.time.Period.ZERO;
        org.joda.time.Period period1 = period0.normalizedStandard();
        org.joda.time.Period period3 = period0.plusHours(2);
        java.time.chrono.IsoEra isoEra4 = java.time.chrono.IsoEra.CE;
        boolean boolean5 = period3.equals((java.lang.Object) isoEra4);
        java.time.LocalTime localTime10 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime11 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime10);
        java.time.LocalTime localTime16 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime17 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime16);
        java.time.temporal.ChronoField chronoField18 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime20 = localTime16.with((java.time.temporal.TemporalField) chronoField18, (long) (short) 1);
        long long21 = localTime10.getLong((java.time.temporal.TemporalField) chronoField18);
        boolean boolean22 = isoEra4.isSupported((java.time.temporal.TemporalField) chronoField18);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery23 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period24 = isoEra4.query(periodTemporalQuery23);
        boolean boolean25 = period24.isNegative();
        java.time.Period period27 = period24.plusDays((long) ' ');
        boolean boolean28 = period24.isNegative();
        java.time.Period period30 = period24.minusYears((long) 10);
        org.joda.time.Period period31 = org.joda.time.Period.ZERO;
        org.joda.time.Period period32 = period31.normalizedStandard();
        org.joda.time.Period period34 = period31.plusHours(2);
        java.time.chrono.IsoEra isoEra35 = java.time.chrono.IsoEra.CE;
        boolean boolean36 = period34.equals((java.lang.Object) isoEra35);
        java.time.LocalTime localTime41 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime42 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime41);
        java.time.LocalTime localTime47 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime48 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime47);
        java.time.temporal.ChronoField chronoField49 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime51 = localTime47.with((java.time.temporal.TemporalField) chronoField49, (long) (short) 1);
        long long52 = localTime41.getLong((java.time.temporal.TemporalField) chronoField49);
        boolean boolean53 = isoEra35.isSupported((java.time.temporal.TemporalField) chronoField49);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery54 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period55 = isoEra35.query(periodTemporalQuery54);
        java.time.chrono.ChronoPeriod chronoPeriod56 = period30.minus((java.time.temporal.TemporalAmount) period55);
        java.time.chrono.ChronoPeriod chronoPeriod58 = period30.multipliedBy(4096);
        int int59 = period30.getMonths();
        java.time.chrono.IsoChronology isoChronology60 = period30.getChronology();
        java.time.LocalDate localDate63 = isoChronology60.dateYearDay(2022, (int) '/');
        java.util.Map<java.time.temporal.TemporalField, java.lang.Long> temporalFieldMap64 = null;
        java.time.format.ResolverStyle resolverStyle65 = java.time.format.ResolverStyle.SMART;
        // The following exception was thrown during execution in test generation
        try {
            java.time.LocalDate localDate66 = isoChronology60.resolveDate(temporalFieldMap64, resolverStyle65);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period0);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertTrue("'" + isoEra4 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra4.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertTrue("'" + chronoField18 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField18.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 3601000000001L + "'", long21 == 3601000000001L);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(periodTemporalQuery23);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertTrue("'" + isoEra35 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra35.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(localTime41);
        org.junit.Assert.assertNotNull(localTime42);
        org.junit.Assert.assertNotNull(localTime47);
        org.junit.Assert.assertNotNull(localTime48);
        org.junit.Assert.assertTrue("'" + chronoField49 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField49.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime51);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 3601000000001L + "'", long52 == 3601000000001L);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(periodTemporalQuery54);
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertNotNull(chronoPeriod56);
        org.junit.Assert.assertNotNull(chronoPeriod58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(isoChronology60);
        org.junit.Assert.assertNotNull(localDate63);
        org.junit.Assert.assertTrue("'" + resolverStyle65 + "' != '" + java.time.format.ResolverStyle.SMART + "'", resolverStyle65.equals(java.time.format.ResolverStyle.SMART));
    }

    @Test
    public void test2174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2174");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        java.util.TimeZone timeZone3 = null;
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight((long) 1970, dateTimeZone4);
        long long8 = dateTimeZone4.convertLocalToUTC((long) 3, false);
        long long10 = dateTimeZone1.getMillisKeepLocal(dateTimeZone4, (long) ':');
        java.util.TimeZone timeZone11 = dateTimeZone1.toTimeZone();
        java.util.GregorianCalendar gregorianCalendar12 = new java.util.GregorianCalendar(timeZone11);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime((long) 0, chronology14);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) 3, chronology17);
        org.joda.time.DateTime.Property property19 = dateTime18.dayOfYear();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight((java.lang.Object) dateTime18, chronology20);
        org.joda.time.DateTime dateTime22 = localTime15.toDateTime((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.LocalTime localTime24 = localTime15.plusHours(3);
        org.joda.time.TimeOfDay timeOfDay26 = org.joda.time.TimeOfDay.fromMillisOfDay((long) (short) 0);
        org.joda.time.TimeOfDay timeOfDay28 = org.joda.time.TimeOfDay.fromMillisOfDay((long) (short) 0);
        org.joda.time.Hours hours29 = org.joda.time.Hours.hoursBetween((org.joda.time.ReadablePartial) timeOfDay26, (org.joda.time.ReadablePartial) timeOfDay28);
        org.joda.time.DurationFieldType durationFieldType30 = org.joda.time.DurationFieldType.hours();
        org.joda.time.TimeOfDay timeOfDay32 = timeOfDay28.withFieldAdded(durationFieldType30, (int) (byte) 0);
        org.joda.time.Chronology chronology33 = null;
        boolean boolean34 = durationFieldType30.isSupported(chronology33);
        boolean boolean35 = localTime24.isSupported(durationFieldType30);
        boolean boolean36 = gregorianCalendar12.equals((java.lang.Object) durationFieldType30);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 3L + "'", long8 == 3L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 58L + "'", long10 == 58L);
        org.junit.Assert.assertNotNull(timeZone11);
        org.junit.Assert.assertEquals(timeZone11.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(localTime24);
        org.junit.Assert.assertNotNull(timeOfDay26);
        org.junit.Assert.assertNotNull(timeOfDay28);
        org.junit.Assert.assertNotNull(hours29);
        org.junit.Assert.assertNotNull(durationFieldType30);
        org.junit.Assert.assertNotNull(timeOfDay32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test2175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2175");
        java.time.OffsetDateTime offsetDateTime0 = java.time.OffsetDateTime.now();
        java.time.LocalDate localDate2 = java.time.LocalDate.ofEpochDay((long) ' ');
        int int3 = localDate2.getMonthValue();
        org.joda.time.Period period4 = org.joda.time.Period.ZERO;
        org.joda.time.Period period5 = period4.normalizedStandard();
        org.joda.time.Period period7 = period4.plusHours(2);
        java.time.chrono.IsoEra isoEra8 = java.time.chrono.IsoEra.CE;
        boolean boolean9 = period7.equals((java.lang.Object) isoEra8);
        java.time.LocalTime localTime14 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime15 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime14);
        java.time.LocalTime localTime20 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime21 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime20);
        java.time.temporal.ChronoField chronoField22 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime24 = localTime20.with((java.time.temporal.TemporalField) chronoField22, (long) (short) 1);
        long long25 = localTime14.getLong((java.time.temporal.TemporalField) chronoField22);
        boolean boolean26 = isoEra8.isSupported((java.time.temporal.TemporalField) chronoField22);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery27 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period28 = isoEra8.query(periodTemporalQuery27);
        boolean boolean29 = period28.isNegative();
        java.time.Period period31 = period28.plusDays((long) ' ');
        java.time.temporal.ChronoField chronoField32 = java.time.temporal.ChronoField.SECOND_OF_DAY;
        boolean boolean33 = period28.equals((java.lang.Object) chronoField32);
        boolean boolean34 = localDate2.isSupported((java.time.temporal.TemporalField) chronoField32);
        boolean boolean35 = offsetDateTime0.isSupported((java.time.temporal.TemporalField) chronoField32);
        java.time.Clock clock36 = java.time.Clock.systemUTC();
        java.time.Duration duration38 = java.time.Duration.ofSeconds((long) 256);
        java.time.Clock clock39 = java.time.Clock.tick(clock36, duration38);
        java.time.OffsetTime offsetTime40 = java.time.OffsetTime.MAX;
        java.time.LocalTime localTime41 = offsetTime40.toLocalTime();
        java.lang.String str42 = offsetTime40.toString();
        java.time.Duration duration43 = java.time.Duration.ZERO;
        java.lang.String str44 = duration43.toString();
        java.time.OffsetTime offsetTime45 = offsetTime40.plus((java.time.temporal.TemporalAmount) duration43);
        int int46 = duration38.compareTo(duration43);
        java.time.OffsetDateTime offsetDateTime47 = offsetDateTime0.plus((java.time.temporal.TemporalAmount) duration43);
        java.time.temporal.TemporalAmount temporalAmount48 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.time.OffsetDateTime offsetDateTime49 = offsetDateTime0.minus(temporalAmount48);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(offsetDateTime0);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2 + "'", int3 == 2);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertTrue("'" + isoEra8 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra8.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertTrue("'" + chronoField22 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField22.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime24);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 3601000000001L + "'", long25 == 3601000000001L);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(periodTemporalQuery27);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertTrue("'" + chronoField32 + "' != '" + java.time.temporal.ChronoField.SECOND_OF_DAY + "'", chronoField32.equals(java.time.temporal.ChronoField.SECOND_OF_DAY));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(clock36);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(clock39);
        org.junit.Assert.assertNotNull(offsetTime40);
        org.junit.Assert.assertNotNull(localTime41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "23:59:59.999999999-18:00" + "'", str42, "23:59:59.999999999-18:00");
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "PT0S" + "'", str44, "PT0S");
        org.junit.Assert.assertNotNull(offsetTime45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertNotNull(offsetDateTime47);
    }

    @Test
    public void test2176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2176");
        java.util.TimeZone timeZone3 = null;
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight((long) 1970, dateTimeZone4);
        long long8 = dateTimeZone4.convertLocalToUTC((long) 3, false);
        org.joda.time.Interval interval9 = new org.joda.time.Interval(10L, (long) 2097, dateTimeZone4);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(dateTimeZone4);
        int int12 = dateTimeZone4.getOffsetFromLocal((long) '\uffff');
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 3L + "'", long8 == 3L);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test2177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2177");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.nio.LongBuffer longBuffer3 = java.nio.LongBuffer.allocate((int) (short) 0);
        java.nio.Buffer buffer4 = longBuffer3.mark();
        boolean boolean5 = properties1.containsKey((java.lang.Object) longBuffer3);
        java.nio.charset.Charset charset6 = java.nio.charset.Charset.defaultCharset();
        boolean boolean7 = charset6.canEncode();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) 3, chronology9);
        org.joda.time.DateTime.Property property11 = dateTime10.dayOfYear();
        java.lang.Object obj12 = properties1.getOrDefault((java.lang.Object) boolean7, (java.lang.Object) property11);
        properties1.clear();
        int int14 = properties1.size();
        java.io.PrintStream printStream16 = new java.io.PrintStream("subject:\n (GERMAN)");
        printStream16.write((int) '#');
        java.security.CodeSource codeSource20 = null;
        java.security.PermissionCollection permissionCollection21 = null;
        java.security.ProtectionDomain protectionDomain22 = new java.security.ProtectionDomain(codeSource20, permissionCollection21);
        java.lang.ClassLoader classLoader23 = protectionDomain22.getClassLoader();
        java.security.CodeSource codeSource24 = null;
        java.security.PermissionCollection permissionCollection25 = null;
        java.security.ProtectionDomain protectionDomain26 = new java.security.ProtectionDomain(codeSource24, permissionCollection25);
        java.security.Permission permission27 = null;
        boolean boolean28 = protectionDomain26.implies(permission27);
        java.security.CodeSource codeSource29 = null;
        java.security.PermissionCollection permissionCollection30 = null;
        java.security.ProtectionDomain protectionDomain31 = new java.security.ProtectionDomain(codeSource29, permissionCollection30);
        java.security.CodeSource codeSource32 = null;
        java.security.PermissionCollection permissionCollection33 = null;
        java.security.ProtectionDomain protectionDomain34 = new java.security.ProtectionDomain(codeSource32, permissionCollection33);
        java.security.ProtectionDomain[] protectionDomainArray35 = new java.security.ProtectionDomain[] { protectionDomain22, protectionDomain26, protectionDomain31, protectionDomain34 };
        java.security.AccessControlContext accessControlContext36 = new java.security.AccessControlContext(protectionDomainArray35);
        java.io.PrintStream printStream37 = printStream16.printf("Property[secondOfMinute]", (java.lang.Object[]) protectionDomainArray35);
        properties1.list(printStream37);
        printStream37.print(241);
        printStream37.print(34608308);
        org.junit.Assert.assertNotNull(longBuffer3);
        org.junit.Assert.assertNotNull(buffer4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(charset6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(obj12);
        org.junit.Assert.assertEquals(obj12.toString(), "Property[dayOfYear]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj12), "Property[dayOfYear]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj12), "Property[dayOfYear]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertEquals(protectionDomain22.toString(), "ProtectionDomain  null\n null\n <no principals>\n null\n");
        org.junit.Assert.assertNull(classLoader23);
        org.junit.Assert.assertEquals(protectionDomain26.toString(), "ProtectionDomain  null\n null\n <no principals>\n null\n");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals(protectionDomain31.toString(), "ProtectionDomain  null\n null\n <no principals>\n null\n");
        org.junit.Assert.assertEquals(protectionDomain34.toString(), "ProtectionDomain  null\n null\n <no principals>\n null\n");
        org.junit.Assert.assertNotNull(protectionDomainArray35);
        org.junit.Assert.assertNotNull(printStream37);
    }

    @Test
    public void test2178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2178");
        java.io.File file0 = null;
        java.io.File file2 = new java.io.File(file0, "1970-01-01T00:00:00.003Z");
        java.net.URL uRL3 = file2.toURL();
        java.io.File file4 = null;
        java.io.File file6 = new java.io.File(file4, "1970-01-01T00:00:00.003Z");
        java.net.URL uRL7 = file6.toURL();
        boolean boolean8 = uRL3.sameFile(uRL7);
        java.lang.String str9 = uRL3.getPath();
        java.net.URLConnection uRLConnection10 = uRL3.openConnection();
        java.lang.String str11 = uRLConnection10.getContentType();
        // The following exception was thrown during execution in test generation
        try {
            uRLConnection10.setDoInput(true);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Already connected");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull("file2.getParent() == null", file2.getParent());
        org.junit.Assert.assertEquals(file2.toString(), "1970-01-01T00:00:00.003Z");
        org.junit.Assert.assertNotNull(uRL3);
// flaky:         org.junit.Assert.assertEquals(uRL3.toString(), "file:/experiment/1970-01-01T00:00:00.003Z/");
        org.junit.Assert.assertNull("file6.getParent() == null", file6.getParent());
        org.junit.Assert.assertEquals(file6.toString(), "1970-01-01T00:00:00.003Z");
        org.junit.Assert.assertNotNull(uRL7);
// flaky:         org.junit.Assert.assertEquals(uRL7.toString(), "file:/experiment/1970-01-01T00:00:00.003Z/");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "/experiment/1970-01-01T00:00:00.003Z/" + "'", str9, "/experiment/1970-01-01T00:00:00.003Z/");
        org.junit.Assert.assertNotNull(uRLConnection10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "text/plain" + "'", str11, "text/plain");
    }

    @Test
    public void test2179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2179");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 3, chronology1);
        org.joda.time.DateTime.Property property3 = dateTime2.dayOfYear();
        org.joda.time.Interval interval4 = property3.toInterval();
        org.joda.time.DateTimeField dateTimeField5 = property3.getField();
        org.joda.time.DateTime dateTime7 = property3.addToCopy((long) (byte) 1);
        org.joda.time.DateTime dateTime9 = dateTime7.withYear(4);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) 3, chronology11);
        org.joda.time.Period period13 = org.joda.time.Period.ZERO;
        org.joda.time.Period period14 = period13.normalizedStandard();
        org.joda.time.Period period16 = period14.minusMinutes((int) ' ');
        org.joda.time.Period period18 = period16.minusMonths((int) (byte) 0);
        org.joda.time.PeriodType periodType19 = period18.getPeriodType();
        org.joda.time.DateTime dateTime20 = dateTime12.minus((org.joda.time.ReadablePeriod) period18);
        org.joda.time.Duration duration21 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.DateTime dateTime23 = dateTime20.withWeekOfWeekyear(14);
        java.util.TimeZone timeZone27 = null;
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forTimeZone(timeZone27);
        org.joda.time.DateMidnight dateMidnight29 = new org.joda.time.DateMidnight((long) 1970, dateTimeZone28);
        long long32 = dateTimeZone28.convertLocalToUTC((long) 3, false);
        org.joda.time.Interval interval33 = new org.joda.time.Interval(10L, (long) 2097, dateTimeZone28);
        int int35 = dateTimeZone28.getOffsetFromLocal(58L);
        org.joda.time.DateMidnight dateMidnight36 = org.joda.time.DateMidnight.now(dateTimeZone28);
        org.joda.time.DateTime dateTime37 = dateTime20.withZoneRetainFields(dateTimeZone28);
        org.joda.time.DateTime dateTime39 = dateTime20.minusMonths(0);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 3L + "'", long32 == 3L);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
    }

    @Test
    public void test2180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2180");
        java.time.Period period1 = java.time.Period.ofYears(28);
        java.time.chrono.IsoChronology isoChronology2 = period1.getChronology();
        java.time.LocalDate localDate3 = isoChronology2.dateNow();
        java.time.LocalDate localDate6 = isoChronology2.dateYearDay(10800000, 5);
        java.time.Clock clock7 = java.time.Clock.systemUTC();
        java.time.Duration duration9 = java.time.Duration.ofSeconds((long) 256);
        java.time.Clock clock10 = java.time.Clock.tick(clock7, duration9);
        java.time.Duration duration12 = java.time.Duration.ofMinutes((long) 3);
        java.time.Duration duration13 = duration12.abs();
        java.time.Clock clock14 = java.time.Clock.offset(clock7, duration12);
        java.time.LocalDate localDate15 = java.time.LocalDate.now(clock14);
        java.util.GregorianCalendar gregorianCalendar21 = new java.util.GregorianCalendar(12, 4096, 7, (-1), (int) (short) 10);
        int int22 = gregorianCalendar21.getWeeksInWeekYear();
        java.lang.String str23 = gregorianCalendar21.getCalendarType();
        java.time.ZonedDateTime zonedDateTime24 = gregorianCalendar21.toZonedDateTime();
        java.time.ZonedDateTime zonedDateTime26 = zonedDateTime24.minusMonths((long) 10);
        int int27 = zonedDateTime24.getMonthValue();
        java.time.LocalTime localTime32 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime33 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime32);
        java.time.LocalTime localTime38 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime39 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime38);
        java.time.temporal.ChronoField chronoField40 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime42 = localTime38.with((java.time.temporal.TemporalField) chronoField40, (long) (short) 1);
        long long43 = localTime32.getLong((java.time.temporal.TemporalField) chronoField40);
        long long44 = zonedDateTime24.getLong((java.time.temporal.TemporalField) chronoField40);
        java.time.ZoneOffset zoneOffset47 = java.time.ZoneOffset.ofHoursMinutes(1, 10);
        java.time.LocalDate localDate48 = java.time.LocalDate.now((java.time.ZoneId) zoneOffset47);
        java.time.LocalDate localDate49 = java.time.LocalDate.now((java.time.ZoneId) zoneOffset47);
        java.time.chrono.ChronoZonedDateTime<java.time.LocalDate> localDateChronoZonedDateTime50 = zonedDateTime24.withZoneSameLocal((java.time.ZoneId) zoneOffset47);
        java.time.format.DateTimeFormatter dateTimeFormatter51 = java.time.format.DateTimeFormatter.ISO_DATE;
        java.lang.String str52 = zonedDateTime24.format(dateTimeFormatter51);
        java.time.chrono.ChronoZonedDateTime<?> wildcardChronoZonedDateTime53 = java.time.chrono.ChronoZonedDateTime.from((java.time.temporal.TemporalAccessor) zonedDateTime24);
        java.time.LocalDate localDate56 = java.time.LocalDate.ofEpochDay((long) ' ');
        int int57 = localDate56.getMonthValue();
        org.joda.time.Period period58 = org.joda.time.Period.ZERO;
        org.joda.time.Period period59 = period58.normalizedStandard();
        org.joda.time.Period period61 = period58.plusHours(2);
        java.time.chrono.IsoEra isoEra62 = java.time.chrono.IsoEra.CE;
        boolean boolean63 = period61.equals((java.lang.Object) isoEra62);
        java.time.LocalTime localTime68 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime69 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime68);
        java.time.LocalTime localTime74 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime75 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime74);
        java.time.temporal.ChronoField chronoField76 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime78 = localTime74.with((java.time.temporal.TemporalField) chronoField76, (long) (short) 1);
        long long79 = localTime68.getLong((java.time.temporal.TemporalField) chronoField76);
        boolean boolean80 = isoEra62.isSupported((java.time.temporal.TemporalField) chronoField76);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery81 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period82 = isoEra62.query(periodTemporalQuery81);
        boolean boolean83 = period82.isNegative();
        java.time.Period period85 = period82.plusDays((long) ' ');
        java.time.temporal.ChronoField chronoField86 = java.time.temporal.ChronoField.SECOND_OF_DAY;
        boolean boolean87 = period82.equals((java.lang.Object) chronoField86);
        boolean boolean88 = localDate56.isSupported((java.time.temporal.TemporalField) chronoField86);
        java.time.temporal.TemporalUnit temporalUnit89 = chronoField86.getRangeUnit();
        java.time.chrono.ChronoZonedDateTime<java.time.LocalDate> localDateChronoZonedDateTime90 = zonedDateTime24.minus(0L, temporalUnit89);
        boolean boolean91 = localDate15.isSupported(temporalUnit89);
        int int92 = localDate6.compareTo((java.time.chrono.ChronoLocalDate) localDate15);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(isoChronology2);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(clock7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(clock10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(clock14);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 52 + "'", int22 == 52);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "gregory" + "'", str23, "gregory");
        org.junit.Assert.assertNotNull(zonedDateTime24);
        org.junit.Assert.assertNotNull(zonedDateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 5 + "'", int27 == 5);
        org.junit.Assert.assertNotNull(localTime32);
        org.junit.Assert.assertNotNull(localTime33);
        org.junit.Assert.assertNotNull(localTime38);
        org.junit.Assert.assertNotNull(localTime39);
        org.junit.Assert.assertTrue("'" + chronoField40 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField40.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime42);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 3601000000001L + "'", long43 == 3601000000001L);
// flaky:         org.junit.Assert.assertTrue("'" + long44 + "' != '" + 83399965000000L + "'", long44 == 83399965000000L);
        org.junit.Assert.assertNotNull(zoneOffset47);
        org.junit.Assert.assertNotNull(localDate48);
        org.junit.Assert.assertNotNull(localDate49);
        org.junit.Assert.assertNotNull(localDateChronoZonedDateTime50);
        org.junit.Assert.assertNotNull(dateTimeFormatter51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "0353-05-07Z" + "'", str52, "0353-05-07Z");
        org.junit.Assert.assertNotNull(wildcardChronoZonedDateTime53);
        org.junit.Assert.assertNotNull(localDate56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 2 + "'", int57 == 2);
        org.junit.Assert.assertNotNull(period58);
        org.junit.Assert.assertNotNull(period59);
        org.junit.Assert.assertNotNull(period61);
        org.junit.Assert.assertTrue("'" + isoEra62 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra62.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(localTime68);
        org.junit.Assert.assertNotNull(localTime69);
        org.junit.Assert.assertNotNull(localTime74);
        org.junit.Assert.assertNotNull(localTime75);
        org.junit.Assert.assertTrue("'" + chronoField76 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField76.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime78);
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + 3601000000001L + "'", long79 == 3601000000001L);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(periodTemporalQuery81);
        org.junit.Assert.assertNotNull(period82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(period85);
        org.junit.Assert.assertTrue("'" + chronoField86 + "' != '" + java.time.temporal.ChronoField.SECOND_OF_DAY + "'", chronoField86.equals(java.time.temporal.ChronoField.SECOND_OF_DAY));
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + temporalUnit89 + "' != '" + java.time.temporal.ChronoUnit.DAYS + "'", temporalUnit89.equals(java.time.temporal.ChronoUnit.DAYS));
        org.junit.Assert.assertNotNull(localDateChronoZonedDateTime90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 10797978 + "'", int92 == 10797978);
    }

    @Test
    public void test2181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2181");
        java.net.URI uRI1 = new java.net.URI("hi!");
        java.lang.String str2 = uRI1.getFragment();
        java.net.URI uRI4 = new java.net.URI("hi!");
        java.lang.String str5 = uRI4.getRawAuthority();
        java.lang.String str6 = uRI4.toString();
        java.lang.String str7 = uRI4.getRawFragment();
        java.net.URI uRI8 = uRI1.relativize(uRI4);
        java.lang.String str9 = uRI1.getScheme();
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "hi!" + "'", str6, "hi!");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(uRI8);
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test2182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2182");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.Hours hours1 = org.joda.time.Hours.hoursIn(readableInterval0);
        org.joda.time.Period period2 = hours1.toPeriod();
        org.joda.time.Period period3 = new org.joda.time.Period((java.lang.Object) period2);
        int int4 = period3.getHours();
        org.junit.Assert.assertNotNull(hours1);
        org.junit.Assert.assertNotNull(period2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
    }

    @Test
    public void test2183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2183");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Duration duration2 = new org.joda.time.Duration(readableInstant0, readableInstant1);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = duration2.toPeriodTo(readableInstant3, periodType4);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.Duration duration8 = new org.joda.time.Duration(readableInstant6, readableInstant7);
        long long9 = duration8.getMillis();
        boolean boolean10 = duration2.isShorterThan((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) 3, chronology12);
        org.joda.time.DateTime.Property property14 = dateTime13.dayOfYear();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight((java.lang.Object) dateTime13, chronology15);
        org.joda.time.MutableDateTime mutableDateTime17 = dateTime13.toMutableDateTime();
        mutableDateTime17.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime17.dayOfWeek();
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime17.year();
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime17.weekyear();
        boolean boolean23 = duration2.equals((java.lang.Object) mutableDateTime17);
        mutableDateTime17.addMonths((int) ' ');
        mutableDateTime17.add((long) (byte) 10);
        org.joda.time.Period period28 = org.joda.time.Period.ZERO;
        org.joda.time.Period period29 = period28.normalizedStandard();
        org.joda.time.Period period31 = period28.plusHours(2);
        java.time.chrono.IsoEra isoEra32 = java.time.chrono.IsoEra.CE;
        boolean boolean33 = period31.equals((java.lang.Object) isoEra32);
        int int34 = period31.getMinutes();
        mutableDateTime17.add((org.joda.time.ReadablePeriod) period31);
        java.util.TimeZone timeZone37 = null;
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forTimeZone(timeZone37);
        org.joda.time.DateMidnight dateMidnight39 = new org.joda.time.DateMidnight((long) 1970, dateTimeZone38);
        long long42 = dateTimeZone38.convertLocalToUTC((long) 3, false);
        long long45 = dateTimeZone38.convertLocalToUTC(0L, true);
        mutableDateTime17.setZoneRetainFields(dateTimeZone38);
        java.lang.String str47 = dateTimeZone38.toString();
        org.joda.time.chrono.EthiopicChronology ethiopicChronology48 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone38);
        org.joda.time.DateTimeField dateTimeField49 = ethiopicChronology48.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone50 = ethiopicChronology48.getZone();
        org.joda.time.DateTimeField dateTimeField51 = ethiopicChronology48.era();
        org.joda.time.DateTimeField dateTimeField52 = ethiopicChronology48.secondOfDay();
        org.joda.time.DateTimeField dateTimeField53 = ethiopicChronology48.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField54 = ethiopicChronology48.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField55 = ethiopicChronology48.weekyear();
        org.joda.time.DurationField durationField56 = ethiopicChronology48.months();
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertTrue("'" + isoEra32 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra32.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 3L + "'", long42 == 3L);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Etc/UTC" + "'", str47, "Etc/UTC");
        org.junit.Assert.assertNotNull(ethiopicChronology48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(durationField56);
    }

    @Test
    public void test2184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2184");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 3, chronology1);
        org.joda.time.DateTime.Property property3 = dateTime2.dayOfYear();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight((java.lang.Object) dateTime2, chronology4);
        org.joda.time.MutableDateTime mutableDateTime6 = dateTime2.toMutableDateTime();
        org.joda.time.DateTime.Property property7 = dateTime2.monthOfYear();
        org.joda.time.DateTime dateTime9 = dateTime2.withSecondOfMinute(8);
        org.joda.time.DateTime.Property property10 = dateTime9.yearOfEra();
        org.joda.time.DateTime.Property property11 = dateTime9.secondOfMinute();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
    }

    @Test
    public void test2185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2185");
        java.time.temporal.TemporalAccessor temporalAccessor0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.time.LocalDate localDate1 = java.time.LocalDate.from(temporalAccessor0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: temporal");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test2186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2186");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 3, chronology1);
        org.joda.time.DateTime.Property property3 = dateTime2.dayOfYear();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight((java.lang.Object) dateTime2, chronology4);
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight5.minusMonths((-1));
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight5.withDayOfYear((int) ' ');
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight9.minusMonths(1024);
        org.joda.time.DateMidnight.Property property12 = dateMidnight11.year();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight14 = property12.addToCopy(3597523200000L);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Value cannot fit in an int: 3597523200000");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(property12);
    }

    @Test
    public void test2187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2187");
        org.joda.time.Period period0 = org.joda.time.Period.ZERO;
        org.joda.time.Period period1 = period0.normalizedStandard();
        org.joda.time.Period period3 = period0.plusHours(2);
        java.time.chrono.IsoEra isoEra4 = java.time.chrono.IsoEra.CE;
        boolean boolean5 = period3.equals((java.lang.Object) isoEra4);
        java.time.LocalTime localTime10 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime11 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime10);
        java.time.LocalTime localTime16 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime17 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime16);
        java.time.temporal.ChronoField chronoField18 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime20 = localTime16.with((java.time.temporal.TemporalField) chronoField18, (long) (short) 1);
        long long21 = localTime10.getLong((java.time.temporal.TemporalField) chronoField18);
        boolean boolean22 = isoEra4.isSupported((java.time.temporal.TemporalField) chronoField18);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery23 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period24 = isoEra4.query(periodTemporalQuery23);
        boolean boolean25 = period24.isNegative();
        java.time.Period period27 = period24.plusDays((long) ' ');
        boolean boolean28 = period24.isNegative();
        java.time.Period period30 = period24.minusYears((long) 10);
        org.joda.time.Period period31 = org.joda.time.Period.ZERO;
        org.joda.time.Period period32 = period31.normalizedStandard();
        org.joda.time.Period period34 = period31.plusHours(2);
        java.time.chrono.IsoEra isoEra35 = java.time.chrono.IsoEra.CE;
        boolean boolean36 = period34.equals((java.lang.Object) isoEra35);
        java.time.LocalTime localTime41 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime42 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime41);
        java.time.LocalTime localTime47 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime48 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime47);
        java.time.temporal.ChronoField chronoField49 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime51 = localTime47.with((java.time.temporal.TemporalField) chronoField49, (long) (short) 1);
        long long52 = localTime41.getLong((java.time.temporal.TemporalField) chronoField49);
        boolean boolean53 = isoEra35.isSupported((java.time.temporal.TemporalField) chronoField49);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery54 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period55 = isoEra35.query(periodTemporalQuery54);
        java.time.chrono.ChronoPeriod chronoPeriod56 = period30.minus((java.time.temporal.TemporalAmount) period55);
        java.time.chrono.ChronoPeriod chronoPeriod58 = period30.multipliedBy(4096);
        int int59 = period30.getMonths();
        java.time.chrono.IsoChronology isoChronology60 = period30.getChronology();
        java.time.ZoneOffset zoneOffset63 = java.time.ZoneOffset.ofHoursMinutes(1, 10);
        java.time.LocalDate localDate64 = java.time.LocalDate.now((java.time.ZoneId) zoneOffset63);
        java.time.Clock clock65 = java.time.Clock.system((java.time.ZoneId) zoneOffset63);
        java.time.Duration duration67 = java.time.Duration.ofSeconds((long) 0);
        java.time.Duration duration69 = duration67.multipliedBy((long) (byte) -1);
        java.time.Clock clock70 = java.time.Clock.offset(clock65, duration67);
        java.time.chrono.ChronoLocalDate chronoLocalDate71 = isoChronology60.dateNow(clock65);
        java.time.LocalDate localDate74 = isoChronology60.dateYearDay((int) '#', 12);
        // The following exception was thrown during execution in test generation
        try {
            java.time.LocalDate localDate78 = isoChronology60.date((-46800000), 306, (-32769));
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for MonthOfYear (valid values 1 - 12): 306");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period0);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertTrue("'" + isoEra4 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra4.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertTrue("'" + chronoField18 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField18.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 3601000000001L + "'", long21 == 3601000000001L);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(periodTemporalQuery23);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertTrue("'" + isoEra35 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra35.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(localTime41);
        org.junit.Assert.assertNotNull(localTime42);
        org.junit.Assert.assertNotNull(localTime47);
        org.junit.Assert.assertNotNull(localTime48);
        org.junit.Assert.assertTrue("'" + chronoField49 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField49.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime51);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 3601000000001L + "'", long52 == 3601000000001L);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(periodTemporalQuery54);
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertNotNull(chronoPeriod56);
        org.junit.Assert.assertNotNull(chronoPeriod58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(isoChronology60);
        org.junit.Assert.assertNotNull(zoneOffset63);
        org.junit.Assert.assertNotNull(localDate64);
        org.junit.Assert.assertNotNull(clock65);
        org.junit.Assert.assertNotNull(duration67);
        org.junit.Assert.assertNotNull(duration69);
        org.junit.Assert.assertNotNull(clock70);
        org.junit.Assert.assertNotNull(chronoLocalDate71);
        org.junit.Assert.assertNotNull(localDate74);
    }

    @Test
    public void test2188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2188");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        int int1 = localDate0.getCenturyOfEra();
        org.joda.time.LocalDate.Property property2 = localDate0.dayOfWeek();
        org.joda.time.LocalDate localDate4 = property2.addToCopy(7);
        org.joda.time.LocalDate.Property property5 = localDate4.dayOfMonth();
        int int6 = localDate4.getEra();
        org.joda.time.PeriodType periodType7 = org.joda.time.PeriodType.years();
        org.joda.time.DurationFieldType durationFieldType8 = org.joda.time.DurationFieldType.halfdays();
        int int9 = periodType7.indexOf(durationFieldType8);
        java.lang.String str10 = durationFieldType8.toString();
        boolean boolean11 = localDate4.isSupported(durationFieldType8);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate13 = localDate4.withDayOfWeek(53);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 20 + "'", int1 == 20);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(periodType7);
        org.junit.Assert.assertNotNull(durationFieldType8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "halfdays" + "'", str10, "halfdays");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test2189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2189");
        java.nio.charset.Charset charset0 = java.nio.charset.Charset.defaultCharset();
        java.nio.charset.CharsetDecoder charsetDecoder1 = charset0.newDecoder();
        float float2 = charsetDecoder1.maxCharsPerByte();
        float float3 = charsetDecoder1.averageCharsPerByte();
        java.lang.String str4 = charsetDecoder1.replacement();
        java.nio.charset.CharsetDecoder charsetDecoder5 = charsetDecoder1.reset();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean6 = charsetDecoder1.isCharsetDetected();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charset0);
        org.junit.Assert.assertNotNull(charsetDecoder1);
        org.junit.Assert.assertTrue("'" + float2 + "' != '" + 1.0f + "'", float2 == 1.0f);
        org.junit.Assert.assertTrue("'" + float3 + "' != '" + 1.0f + "'", float3 == 1.0f);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\ufffd" + "'", str4, "\ufffd");
        org.junit.Assert.assertNotNull(charsetDecoder5);
    }

    @Test
    public void test2190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2190");
        java.util.function.UnaryOperator<java.time.OffsetTime> offsetTimeUnaryOperator0 = java.util.function.UnaryOperator.identity();
        org.junit.Assert.assertNotNull(offsetTimeUnaryOperator0);
    }

    @Test
    public void test2191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2191");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(34451155400000L);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay3 = yearMonthDay1.withDayOfMonth(16384);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 16384 for dayOfMonth must be in the range [1,30]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test2192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2192");
        double[] doubleArray4 = new double[] { (byte) 0, 59, 83400000000000L, '4' };
        java.util.stream.DoubleStream doubleStream5 = java.util.stream.DoubleStream.of(doubleArray4);
        java.nio.DoubleBuffer doubleBuffer6 = java.nio.DoubleBuffer.wrap(doubleArray4);
        double[] doubleArray11 = new double[] { (byte) 0, 59, 83400000000000L, '4' };
        java.util.stream.DoubleStream doubleStream12 = java.util.stream.DoubleStream.of(doubleArray11);
        java.nio.DoubleBuffer doubleBuffer13 = java.nio.DoubleBuffer.wrap(doubleArray11);
        java.nio.DoubleBuffer doubleBuffer14 = doubleBuffer6.put(doubleBuffer13);
        double[] doubleArray19 = new double[] { (byte) 0, 59, 83400000000000L, '4' };
        java.util.stream.DoubleStream doubleStream20 = java.util.stream.DoubleStream.of(doubleArray19);
        java.nio.DoubleBuffer doubleBuffer21 = java.nio.DoubleBuffer.wrap(doubleArray19);
        double[] doubleArray26 = new double[] { (byte) 0, 59, 83400000000000L, '4' };
        java.util.stream.DoubleStream doubleStream27 = java.util.stream.DoubleStream.of(doubleArray26);
        java.nio.DoubleBuffer doubleBuffer28 = java.nio.DoubleBuffer.wrap(doubleArray26);
        java.nio.DoubleBuffer doubleBuffer29 = doubleBuffer21.put(doubleBuffer28);
        java.nio.DoubleBuffer doubleBuffer30 = doubleBuffer13.put(doubleBuffer21);
        boolean boolean31 = doubleBuffer13.hasArray();
        java.nio.Buffer buffer32 = doubleBuffer13.flip();
        // The following exception was thrown during execution in test generation
        try {
            java.nio.DoubleBuffer doubleBuffer35 = doubleBuffer13.put((int) 'u', (double) '/');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[0.0, 59.0, 8.34E13, 52.0]");
        org.junit.Assert.assertNotNull(doubleStream5);
        org.junit.Assert.assertNotNull(doubleBuffer6);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0, 59.0, 8.34E13, 52.0]");
        org.junit.Assert.assertNotNull(doubleStream12);
        org.junit.Assert.assertNotNull(doubleBuffer13);
        org.junit.Assert.assertNotNull(doubleBuffer14);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, 59.0, 8.34E13, 52.0]");
        org.junit.Assert.assertNotNull(doubleStream20);
        org.junit.Assert.assertNotNull(doubleBuffer21);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[0.0, 59.0, 8.34E13, 52.0]");
        org.junit.Assert.assertNotNull(doubleStream27);
        org.junit.Assert.assertNotNull(doubleBuffer28);
        org.junit.Assert.assertNotNull(doubleBuffer29);
        org.junit.Assert.assertNotNull(doubleBuffer30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(buffer32);
    }

    @Test
    public void test2193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2193");
        org.joda.time.TimeOfDay timeOfDay1 = org.joda.time.TimeOfDay.fromMillisOfDay((long) (short) 0);
        org.joda.time.TimeOfDay timeOfDay3 = org.joda.time.TimeOfDay.fromMillisOfDay((long) (short) 0);
        org.joda.time.Hours hours4 = org.joda.time.Hours.hoursBetween((org.joda.time.ReadablePartial) timeOfDay1, (org.joda.time.ReadablePartial) timeOfDay3);
        org.joda.time.TimeOfDay timeOfDay6 = timeOfDay1.withSecondOfMinute(0);
        int int7 = timeOfDay1.size();
        int[] intArray8 = timeOfDay1.getValues();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) 3, chronology10);
        org.joda.time.Period period12 = org.joda.time.Period.ZERO;
        org.joda.time.Period period13 = period12.normalizedStandard();
        org.joda.time.Period period15 = period13.minusMinutes((int) ' ');
        org.joda.time.Period period17 = period15.minusMonths((int) (byte) 0);
        org.joda.time.PeriodType periodType18 = period17.getPeriodType();
        org.joda.time.DateTime dateTime19 = dateTime11.minus((org.joda.time.ReadablePeriod) period17);
        org.joda.time.DurationFieldType durationFieldType20 = org.joda.time.DurationFieldType.weekyears();
        org.joda.time.DateTime dateTime22 = dateTime19.withFieldAdded(durationFieldType20, 23);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay24 = timeOfDay1.withFieldAdded(durationFieldType20, 741000000);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'weekyears' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeOfDay1);
        org.junit.Assert.assertNotNull(timeOfDay3);
        org.junit.Assert.assertNotNull(hours4);
        org.junit.Assert.assertNotNull(timeOfDay6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 4 + "'", int7 == 4);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(durationFieldType20);
        org.junit.Assert.assertNotNull(dateTime22);
    }

    @Test
    public void test2194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2194");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.nio.LongBuffer longBuffer3 = java.nio.LongBuffer.allocate((int) (short) 0);
        java.nio.Buffer buffer4 = longBuffer3.mark();
        boolean boolean5 = properties1.containsKey((java.lang.Object) longBuffer3);
        java.util.Collection<java.lang.Object> objCollection6 = properties1.values();
        java.lang.Object obj7 = properties1.clone();
        org.junit.Assert.assertNotNull(longBuffer3);
        org.junit.Assert.assertNotNull(buffer4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(objCollection6);
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertEquals(obj7.toString(), "{}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "{}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "{}");
    }

    @Test
    public void test2195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2195");
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream2 = new java.io.PrintStream("UNDERFLOW", "GMT+00:00");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: GMT+00:00");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test2196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2196");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 3, chronology1);
        org.joda.time.DateTime.Property property3 = dateTime2.dayOfYear();
        org.joda.time.Interval interval4 = property3.toInterval();
        org.joda.time.DateTime dateTime5 = interval4.getEnd();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime(chronology6);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withYearOfCentury((int) 'a');
        int int10 = localDateTime9.getDayOfMonth();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime9.withMinuteOfHour((int) ' ');
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.minusYears((int) (byte) -1);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.Duration duration17 = new org.joda.time.Duration(readableInstant15, readableInstant16);
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.PeriodType periodType19 = null;
        org.joda.time.Period period20 = duration17.toPeriodTo(readableInstant18, periodType19);
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.Duration duration23 = new org.joda.time.Duration(readableInstant21, readableInstant22);
        long long24 = duration23.getMillis();
        boolean boolean25 = duration17.isShorterThan((org.joda.time.ReadableDuration) duration23);
        org.joda.time.Duration duration27 = duration17.withMillis((long) 2097);
        long long28 = duration27.getStandardDays();
        org.joda.time.LocalDateTime localDateTime29 = localDateTime12.plus((org.joda.time.ReadableDuration) duration27);
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.Duration duration32 = new org.joda.time.Duration(readableInstant30, readableInstant31);
        long long33 = duration32.getMillis();
        org.joda.time.Duration duration35 = duration32.plus((long) (byte) 1);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime((long) 3, chronology37);
        org.joda.time.DateTime.Property property39 = dateTime38.dayOfYear();
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.DateMidnight dateMidnight41 = new org.joda.time.DateMidnight((java.lang.Object) dateTime38, chronology40);
        org.joda.time.DateMidnight dateMidnight43 = dateMidnight41.minusMonths((-1));
        org.joda.time.DateMidnight dateMidnight45 = dateMidnight41.withDayOfYear((int) ' ');
        org.joda.time.Period period46 = duration35.toPeriodFrom((org.joda.time.ReadableInstant) dateMidnight41);
        boolean boolean47 = duration27.isEqual((org.joda.time.ReadableDuration) duration35);
        org.joda.time.Duration duration48 = duration27.toDuration();
        org.joda.time.Interval interval49 = interval4.withDurationBeforeEnd((org.joda.time.ReadableDuration) duration27);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 21 + "'", int10 == 21);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(dateMidnight43);
        org.junit.Assert.assertNotNull(dateMidnight45);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertNotNull(interval49);
    }

    @Test
    public void test2197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2197");
        java.util.GregorianCalendar gregorianCalendar5 = new java.util.GregorianCalendar(12, 4096, 7, (-1), (int) (short) 10);
        gregorianCalendar5.set((int) ':', 3, 256, 5, 17, 3600000);
        int int13 = gregorianCalendar5.getWeekYear();
        int int14 = gregorianCalendar5.getFirstDayOfWeek();
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.fromCalendarFields((java.util.Calendar) gregorianCalendar5);
        int int16 = gregorianCalendar5.getMinimalDaysInFirstWeek();
        java.time.LocalTime localTime23 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime24 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime23);
        java.time.LocalTime localTime29 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime30 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime29);
        java.time.temporal.ChronoField chronoField31 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime33 = localTime29.with((java.time.temporal.TemporalField) chronoField31, (long) (short) 1);
        long long34 = localTime23.getLong((java.time.temporal.TemporalField) chronoField31);
        java.time.LocalTime localTime36 = localTime23.withSecond((int) (short) 1);
        java.time.temporal.ChronoField chronoField37 = java.time.temporal.ChronoField.SECOND_OF_DAY;
        java.time.temporal.ValueRange valueRange38 = localTime36.range((java.time.temporal.TemporalField) chronoField37);
        java.time.LocalTime localTime44 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime45 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime44);
        java.time.LocalTime localTime50 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime51 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime50);
        java.time.temporal.ChronoField chronoField52 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime54 = localTime50.with((java.time.temporal.TemporalField) chronoField52, (long) (short) 1);
        long long55 = localTime44.getLong((java.time.temporal.TemporalField) chronoField52);
        java.time.LocalTime localTime57 = localTime44.withSecond((int) (short) 1);
        java.time.temporal.ChronoField chronoField58 = java.time.temporal.ChronoField.SECOND_OF_DAY;
        java.time.temporal.ValueRange valueRange59 = localTime57.range((java.time.temporal.TemporalField) chronoField58);
        int int60 = valueRange38.checkValidIntValue((long) 2022, (java.time.temporal.TemporalField) chronoField58);
        org.joda.time.tz.NameProvider nameProvider61 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.LocalTime localTime65 = new org.joda.time.LocalTime((long) 0, chronology64);
        org.joda.time.Chronology chronology66 = localTime65.getChronology();
        org.joda.time.DateTimeField dateTimeField67 = chronology66.weekyearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime68 = org.joda.time.MutableDateTime.now(chronology66);
        org.joda.time.DateTimeField dateTimeField69 = chronology66.monthOfYear();
        java.util.Locale locale70 = java.util.Locale.getDefault();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket72 = new org.joda.time.format.DateTimeParserBucket((long) 28, chronology66, locale70, (java.lang.Integer) 0);
        java.lang.String str75 = nameProvider61.getShortName(locale70, "22", "Chinese");
        java.lang.String str76 = chronoField58.getDisplayName(locale70);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Map<java.lang.String, java.lang.Integer> strMap77 = gregorianCalendar5.getDisplayNames((int) (short) 1, (int) '#', locale70);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 59 + "'", int13 == 59);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertNotNull(localTime24);
        org.junit.Assert.assertNotNull(localTime29);
        org.junit.Assert.assertNotNull(localTime30);
        org.junit.Assert.assertTrue("'" + chronoField31 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField31.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime33);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 3601000000001L + "'", long34 == 3601000000001L);
        org.junit.Assert.assertNotNull(localTime36);
        org.junit.Assert.assertTrue("'" + chronoField37 + "' != '" + java.time.temporal.ChronoField.SECOND_OF_DAY + "'", chronoField37.equals(java.time.temporal.ChronoField.SECOND_OF_DAY));
        org.junit.Assert.assertNotNull(valueRange38);
        org.junit.Assert.assertNotNull(localTime44);
        org.junit.Assert.assertNotNull(localTime45);
        org.junit.Assert.assertNotNull(localTime50);
        org.junit.Assert.assertNotNull(localTime51);
        org.junit.Assert.assertTrue("'" + chronoField52 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField52.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime54);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 3601000000001L + "'", long55 == 3601000000001L);
        org.junit.Assert.assertNotNull(localTime57);
        org.junit.Assert.assertTrue("'" + chronoField58 + "' != '" + java.time.temporal.ChronoField.SECOND_OF_DAY + "'", chronoField58.equals(java.time.temporal.ChronoField.SECOND_OF_DAY));
        org.junit.Assert.assertNotNull(valueRange59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2022 + "'", int60 == 2022);
        org.junit.Assert.assertNotNull(nameProvider61);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(mutableDateTime68);
        org.junit.Assert.assertNotNull(dateTimeField69);
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "en_US");
        org.junit.Assert.assertNull(str75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "SecondOfDay" + "'", str76, "SecondOfDay");
    }

    @Test
    public void test2198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2198");
        java.time.LocalTime localTime3 = java.time.LocalTime.of(16, (int) '4', 0);
        java.time.LocalTime localTime4 = java.time.LocalTime.MAX;
        int int5 = localTime3.compareTo(localTime4);
        java.time.temporal.TemporalField temporalField6 = null;
        boolean boolean7 = localTime4.isSupported(temporalField6);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test2199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2199");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 3, chronology1);
        org.joda.time.DateTime.Property property3 = dateTime2.dayOfYear();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight((java.lang.Object) dateTime2, chronology4);
        org.joda.time.MutableDateTime mutableDateTime6 = dateTime2.toMutableDateTime();
        org.joda.time.Days days7 = org.joda.time.Days.ONE;
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadablePeriod) days7);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) 3, chronology10);
        org.joda.time.DateTime.Property property12 = dateTime11.dayOfYear();
        org.joda.time.Interval interval13 = property12.toInterval();
        mutableInterval8.setInterval((org.joda.time.ReadableInterval) interval13);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) 3, chronology16);
        org.joda.time.DateTime.Property property18 = dateTime17.dayOfYear();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight((java.lang.Object) dateTime17, chronology19);
        org.joda.time.MutableDateTime mutableDateTime21 = dateTime17.toMutableDateTime();
        org.joda.time.Days days22 = org.joda.time.Days.ONE;
        org.joda.time.MutableInterval mutableInterval23 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime17, (org.joda.time.ReadablePeriod) days22);
        mutableInterval8.setInterval((org.joda.time.ReadableInterval) mutableInterval23);
        boolean boolean26 = mutableInterval23.contains(3600000L);
        java.util.GregorianCalendar gregorianCalendar32 = new java.util.GregorianCalendar(12, 4096, 7, (-1), (int) (short) 10);
        int int34 = gregorianCalendar32.getLeastMaximum(10);
        boolean boolean35 = mutableInterval23.equals((java.lang.Object) int34);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(days7);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(mutableDateTime21);
        org.junit.Assert.assertNotNull(days22);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 11 + "'", int34 == 11);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test2200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2200");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.now();
        java.time.LocalDateTime localDateTime2 = localDateTime0.minusYears((long) (byte) 10);
        java.time.LocalDateTime localDateTime3 = java.time.LocalDateTime.now();
        java.time.LocalDateTime localDateTime5 = localDateTime3.minusYears((long) (byte) 10);
        boolean boolean6 = localDateTime0.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime5);
        java.time.ZoneOffset zoneOffset9 = java.time.ZoneOffset.ofHoursMinutes(1, 10);
        java.time.LocalDate localDate10 = java.time.LocalDate.now((java.time.ZoneId) zoneOffset9);
        java.time.Clock clock11 = java.time.Clock.system((java.time.ZoneId) zoneOffset9);
        java.time.ZoneOffset zoneOffset14 = java.time.ZoneOffset.ofHoursMinutes(1, 10);
        java.time.LocalDate localDate15 = java.time.LocalDate.now((java.time.ZoneId) zoneOffset14);
        java.time.Clock clock16 = java.time.Clock.system((java.time.ZoneId) zoneOffset14);
        int int17 = zoneOffset9.compareTo(zoneOffset14);
        java.time.OffsetDateTime offsetDateTime18 = java.time.OffsetDateTime.of(localDateTime0, zoneOffset9);
        java.time.LocalTime localTime19 = java.time.LocalTime.MIDNIGHT;
        java.time.Duration duration20 = java.time.Duration.ZERO;
        java.time.LocalTime localTime25 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime26 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime25);
        java.time.temporal.ChronoField chronoField27 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime29 = localTime25.with((java.time.temporal.TemporalField) chronoField27, (long) (short) 1);
        java.time.Duration duration31 = java.time.Duration.ofMinutes((long) 3);
        java.time.LocalTime localTime32 = localTime25.minus((java.time.temporal.TemporalAmount) duration31);
        java.time.temporal.Temporal temporal33 = duration20.subtractFrom((java.time.temporal.Temporal) localTime32);
        java.time.LocalTime localTime35 = localTime32.plusMinutes((long) 31);
        boolean boolean36 = localTime19.isAfter(localTime35);
        java.time.LocalTime localTime38 = localTime35.plusNanos((long) 32769);
        java.time.temporal.ChronoField chronoField39 = java.time.temporal.ChronoField.HOUR_OF_DAY;
        boolean boolean40 = chronoField39.isTimeBased();
        java.time.temporal.ValueRange valueRange41 = localTime35.range((java.time.temporal.TemporalField) chronoField39);
        boolean boolean42 = offsetDateTime18.isSupported((java.time.temporal.TemporalField) chronoField39);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(zoneOffset9);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(clock11);
        org.junit.Assert.assertNotNull(zoneOffset14);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(clock16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(offsetDateTime18);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertNotNull(localTime26);
        org.junit.Assert.assertTrue("'" + chronoField27 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField27.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime29);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(localTime32);
        org.junit.Assert.assertNotNull(temporal33);
        org.junit.Assert.assertNotNull(localTime35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(localTime38);
        org.junit.Assert.assertTrue("'" + chronoField39 + "' != '" + java.time.temporal.ChronoField.HOUR_OF_DAY + "'", chronoField39.equals(java.time.temporal.ChronoField.HOUR_OF_DAY));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(valueRange41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
    }

    @Test
    public void test2201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2201");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((long) 0, chronology2);
        org.joda.time.Chronology chronology4 = localTime3.getChronology();
        java.util.Locale locale5 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale6 = java.util.Locale.GERMANY;
        java.lang.String str7 = locale5.getDisplayScript(locale6);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket9 = new org.joda.time.format.DateTimeParserBucket((long) 1970, chronology4, locale5, (java.lang.Integer) 1);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.LocalTime localTime12 = new org.joda.time.LocalTime((long) 0, chronology11);
        org.joda.time.Chronology chronology13 = localTime12.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.weekyearOfCentury();
        org.joda.time.DurationField durationField15 = dateTimeField14.getLeapDurationField();
        dateTimeParserBucket9.saveField(dateTimeField14, (int) 'u');
        java.util.Locale locale19 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str20 = dateTimeField14.getAsShortText((int) 'u', locale19);
        boolean boolean21 = dateTimeField14.isSupported();
        org.joda.time.Period period23 = org.joda.time.Period.ZERO;
        org.joda.time.Period period24 = period23.normalizedStandard();
        org.joda.time.Period period26 = period23.plusHours(2);
        java.time.chrono.IsoEra isoEra27 = java.time.chrono.IsoEra.CE;
        boolean boolean28 = period26.equals((java.lang.Object) isoEra27);
        java.time.LocalTime localTime33 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime34 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime33);
        java.time.LocalTime localTime39 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime40 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime39);
        java.time.temporal.ChronoField chronoField41 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime43 = localTime39.with((java.time.temporal.TemporalField) chronoField41, (long) (short) 1);
        long long44 = localTime33.getLong((java.time.temporal.TemporalField) chronoField41);
        boolean boolean45 = isoEra27.isSupported((java.time.temporal.TemporalField) chronoField41);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery46 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period47 = isoEra27.query(periodTemporalQuery46);
        boolean boolean48 = period47.isNegative();
        java.time.Period period50 = period47.plusDays((long) ' ');
        java.time.temporal.ChronoField chronoField51 = java.time.temporal.ChronoField.SECOND_OF_DAY;
        boolean boolean52 = period47.equals((java.lang.Object) chronoField51);
        java.time.chrono.ChronoPeriod chronoPeriod53 = period47.negated();
        java.time.OffsetDateTime offsetDateTime54 = java.time.OffsetDateTime.now();
        java.time.temporal.ChronoField chronoField55 = java.time.temporal.ChronoField.HOUR_OF_DAY;
        boolean boolean56 = offsetDateTime54.isSupported((java.time.temporal.TemporalField) chronoField55);
        java.time.Month month57 = offsetDateTime54.getMonth();
        java.time.temporal.Temporal temporal58 = period47.addTo((java.time.temporal.Temporal) offsetDateTime54);
        java.time.DayOfWeek dayOfWeek59 = java.time.DayOfWeek.from((java.time.temporal.TemporalAccessor) offsetDateTime54);
        java.time.format.TextStyle textStyle60 = java.time.format.TextStyle.SHORT_STANDALONE;
        java.time.format.TextStyle textStyle61 = textStyle60.asStandalone();
        java.time.format.TextStyle textStyle62 = textStyle60.asNormal();
        java.util.Locale locale63 = java.util.Locale.GERMANY;
        java.lang.String str64 = dayOfWeek59.getDisplayName(textStyle62, locale63);
        java.lang.String str65 = dateTimeField14.getAsText(59, locale63);
        long long67 = dateTimeField14.roundHalfEven((long) 274);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNull(durationField15);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "117" + "'", str20, "117");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertTrue("'" + isoEra27 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra27.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(localTime33);
        org.junit.Assert.assertNotNull(localTime34);
        org.junit.Assert.assertNotNull(localTime39);
        org.junit.Assert.assertNotNull(localTime40);
        org.junit.Assert.assertTrue("'" + chronoField41 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField41.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime43);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 3601000000001L + "'", long44 == 3601000000001L);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(periodTemporalQuery46);
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertTrue("'" + chronoField51 + "' != '" + java.time.temporal.ChronoField.SECOND_OF_DAY + "'", chronoField51.equals(java.time.temporal.ChronoField.SECOND_OF_DAY));
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(chronoPeriod53);
        org.junit.Assert.assertNotNull(offsetDateTime54);
        org.junit.Assert.assertTrue("'" + chronoField55 + "' != '" + java.time.temporal.ChronoField.HOUR_OF_DAY + "'", chronoField55.equals(java.time.temporal.ChronoField.HOUR_OF_DAY));
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + month57 + "' != '" + java.time.Month.FEBRUARY + "'", month57.equals(java.time.Month.FEBRUARY));
        org.junit.Assert.assertNotNull(temporal58);
        org.junit.Assert.assertTrue("'" + dayOfWeek59 + "' != '" + java.time.DayOfWeek.MONDAY + "'", dayOfWeek59.equals(java.time.DayOfWeek.MONDAY));
        org.junit.Assert.assertTrue("'" + textStyle60 + "' != '" + java.time.format.TextStyle.SHORT_STANDALONE + "'", textStyle60.equals(java.time.format.TextStyle.SHORT_STANDALONE));
        org.junit.Assert.assertTrue("'" + textStyle61 + "' != '" + java.time.format.TextStyle.SHORT_STANDALONE + "'", textStyle61.equals(java.time.format.TextStyle.SHORT_STANDALONE));
        org.junit.Assert.assertTrue("'" + textStyle62 + "' != '" + java.time.format.TextStyle.SHORT + "'", textStyle62.equals(java.time.format.TextStyle.SHORT));
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "Mo" + "'", str64, "Mo");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "59" + "'", str65, "59");
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 0L + "'", long67 == 0L);
    }

    @Test
    public void test2202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2202");
        java.util.GregorianCalendar gregorianCalendar5 = new java.util.GregorianCalendar(12, 4096, 7, (-1), (int) (short) 10);
        gregorianCalendar5.set((int) ':', 3, 256, 5, 17, 3600000);
        int int13 = gregorianCalendar5.getWeekYear();
        int int14 = gregorianCalendar5.getFirstDayOfWeek();
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.fromCalendarFields((java.util.Calendar) gregorianCalendar5);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) 3, chronology17);
        org.joda.time.DateTime.Property property19 = dateTime18.dayOfYear();
        org.joda.time.Interval interval20 = property19.toInterval();
        org.joda.time.DateTimeField dateTimeField21 = property19.getField();
        org.joda.time.DateTime dateTime22 = property19.roundHalfEvenCopy();
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.Duration duration25 = new org.joda.time.Duration(readableInstant23, readableInstant24);
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.PeriodType periodType27 = null;
        org.joda.time.Period period28 = duration25.toPeriodTo(readableInstant26, periodType27);
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.Duration duration31 = new org.joda.time.Duration(readableInstant29, readableInstant30);
        long long32 = duration31.getMillis();
        boolean boolean33 = duration25.isShorterThan((org.joda.time.ReadableDuration) duration31);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((long) 3, chronology35);
        org.joda.time.DateTime.Property property37 = dateTime36.dayOfYear();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.DateMidnight dateMidnight39 = new org.joda.time.DateMidnight((java.lang.Object) dateTime36, chronology38);
        org.joda.time.MutableDateTime mutableDateTime40 = dateTime36.toMutableDateTime();
        mutableDateTime40.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property43 = mutableDateTime40.dayOfWeek();
        org.joda.time.MutableDateTime.Property property44 = mutableDateTime40.year();
        org.joda.time.MutableDateTime.Property property45 = mutableDateTime40.weekyear();
        boolean boolean46 = duration25.equals((java.lang.Object) mutableDateTime40);
        mutableDateTime40.addMonths((int) ' ');
        mutableDateTime40.add((long) (byte) 10);
        org.joda.time.Period period51 = org.joda.time.Period.ZERO;
        org.joda.time.Period period52 = period51.normalizedStandard();
        org.joda.time.Period period54 = period51.plusHours(2);
        java.time.chrono.IsoEra isoEra55 = java.time.chrono.IsoEra.CE;
        boolean boolean56 = period54.equals((java.lang.Object) isoEra55);
        int int57 = period54.getMinutes();
        mutableDateTime40.add((org.joda.time.ReadablePeriod) period54);
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.LocalDateTime localDateTime60 = new org.joda.time.LocalDateTime(chronology59);
        org.joda.time.LocalDateTime localDateTime62 = localDateTime60.withYearOfCentury((int) 'a');
        int int63 = localDateTime62.getDayOfMonth();
        org.joda.time.LocalDateTime localDateTime65 = localDateTime62.withMinuteOfHour((int) ' ');
        org.joda.time.DateTimeFieldType dateTimeFieldType66 = org.joda.time.DateTimeFieldType.weekyear();
        int int67 = localDateTime62.get(dateTimeFieldType66);
        org.joda.time.MutableDateTime.Property property68 = mutableDateTime40.property(dateTimeFieldType66);
        org.joda.time.DateTime dateTime70 = dateTime22.withField(dateTimeFieldType66, (int) '/');
        boolean boolean71 = localDateTime15.isSupported(dateTimeFieldType66);
        org.joda.time.LocalDateTime localDateTime73 = localDateTime15.withWeekyear(59);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 59 + "'", int13 == 59);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(mutableDateTime40);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertNotNull(period54);
        org.junit.Assert.assertTrue("'" + isoEra55 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra55.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 21 + "'", int63 == 21);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertNotNull(dateTimeFieldType66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 2097 + "'", int67 == 2097);
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(localDateTime73);
    }

    @Test
    public void test2203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2203");
        java.time.OffsetDateTime offsetDateTime0 = java.time.OffsetDateTime.now();
        java.time.LocalDate localDate2 = java.time.LocalDate.ofEpochDay((long) ' ');
        int int3 = localDate2.getMonthValue();
        org.joda.time.Period period4 = org.joda.time.Period.ZERO;
        org.joda.time.Period period5 = period4.normalizedStandard();
        org.joda.time.Period period7 = period4.plusHours(2);
        java.time.chrono.IsoEra isoEra8 = java.time.chrono.IsoEra.CE;
        boolean boolean9 = period7.equals((java.lang.Object) isoEra8);
        java.time.LocalTime localTime14 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime15 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime14);
        java.time.LocalTime localTime20 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime21 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime20);
        java.time.temporal.ChronoField chronoField22 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime24 = localTime20.with((java.time.temporal.TemporalField) chronoField22, (long) (short) 1);
        long long25 = localTime14.getLong((java.time.temporal.TemporalField) chronoField22);
        boolean boolean26 = isoEra8.isSupported((java.time.temporal.TemporalField) chronoField22);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery27 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period28 = isoEra8.query(periodTemporalQuery27);
        boolean boolean29 = period28.isNegative();
        java.time.Period period31 = period28.plusDays((long) ' ');
        java.time.temporal.ChronoField chronoField32 = java.time.temporal.ChronoField.SECOND_OF_DAY;
        boolean boolean33 = period28.equals((java.lang.Object) chronoField32);
        boolean boolean34 = localDate2.isSupported((java.time.temporal.TemporalField) chronoField32);
        java.time.temporal.TemporalUnit temporalUnit35 = chronoField32.getRangeUnit();
        java.time.OffsetDateTime offsetDateTime36 = offsetDateTime0.truncatedTo(temporalUnit35);
        java.time.LocalDate localDate39 = java.time.LocalDate.ofEpochDay((long) ' ');
        int int40 = localDate39.getMonthValue();
        org.joda.time.Period period41 = org.joda.time.Period.ZERO;
        org.joda.time.Period period42 = period41.normalizedStandard();
        org.joda.time.Period period44 = period41.plusHours(2);
        java.time.chrono.IsoEra isoEra45 = java.time.chrono.IsoEra.CE;
        boolean boolean46 = period44.equals((java.lang.Object) isoEra45);
        java.time.LocalTime localTime51 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime52 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime51);
        java.time.LocalTime localTime57 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime58 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime57);
        java.time.temporal.ChronoField chronoField59 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime61 = localTime57.with((java.time.temporal.TemporalField) chronoField59, (long) (short) 1);
        long long62 = localTime51.getLong((java.time.temporal.TemporalField) chronoField59);
        boolean boolean63 = isoEra45.isSupported((java.time.temporal.TemporalField) chronoField59);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery64 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period65 = isoEra45.query(periodTemporalQuery64);
        boolean boolean66 = period65.isNegative();
        java.time.Period period68 = period65.plusDays((long) ' ');
        java.time.temporal.ChronoField chronoField69 = java.time.temporal.ChronoField.SECOND_OF_DAY;
        boolean boolean70 = period65.equals((java.lang.Object) chronoField69);
        boolean boolean71 = localDate39.isSupported((java.time.temporal.TemporalField) chronoField69);
        java.time.temporal.TemporalUnit temporalUnit72 = chronoField69.getRangeUnit();
        java.time.OffsetDateTime offsetDateTime73 = offsetDateTime36.minus(8L, temporalUnit72);
        java.time.DayOfWeek dayOfWeek74 = offsetDateTime73.getDayOfWeek();
        java.time.temporal.ChronoField chronoField75 = java.time.temporal.ChronoField.INSTANT_SECONDS;
        // The following exception was thrown during execution in test generation
        try {
            java.time.temporal.ValueRange valueRange76 = dayOfWeek74.range((java.time.temporal.TemporalField) chronoField75);
            org.junit.Assert.fail("Expected exception of type java.time.temporal.UnsupportedTemporalTypeException; message: Unsupported field: InstantSeconds");
        } catch (java.time.temporal.UnsupportedTemporalTypeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(offsetDateTime0);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2 + "'", int3 == 2);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertTrue("'" + isoEra8 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra8.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertTrue("'" + chronoField22 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField22.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime24);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 3601000000001L + "'", long25 == 3601000000001L);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(periodTemporalQuery27);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertTrue("'" + chronoField32 + "' != '" + java.time.temporal.ChronoField.SECOND_OF_DAY + "'", chronoField32.equals(java.time.temporal.ChronoField.SECOND_OF_DAY));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + temporalUnit35 + "' != '" + java.time.temporal.ChronoUnit.DAYS + "'", temporalUnit35.equals(java.time.temporal.ChronoUnit.DAYS));
        org.junit.Assert.assertNotNull(offsetDateTime36);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2 + "'", int40 == 2);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertTrue("'" + isoEra45 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra45.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(localTime51);
        org.junit.Assert.assertNotNull(localTime52);
        org.junit.Assert.assertNotNull(localTime57);
        org.junit.Assert.assertNotNull(localTime58);
        org.junit.Assert.assertTrue("'" + chronoField59 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField59.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime61);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 3601000000001L + "'", long62 == 3601000000001L);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(periodTemporalQuery64);
        org.junit.Assert.assertNotNull(period65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(period68);
        org.junit.Assert.assertTrue("'" + chronoField69 + "' != '" + java.time.temporal.ChronoField.SECOND_OF_DAY + "'", chronoField69.equals(java.time.temporal.ChronoField.SECOND_OF_DAY));
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + temporalUnit72 + "' != '" + java.time.temporal.ChronoUnit.DAYS + "'", temporalUnit72.equals(java.time.temporal.ChronoUnit.DAYS));
        org.junit.Assert.assertNotNull(offsetDateTime73);
        org.junit.Assert.assertTrue("'" + dayOfWeek74 + "' != '" + java.time.DayOfWeek.SUNDAY + "'", dayOfWeek74.equals(java.time.DayOfWeek.SUNDAY));
        org.junit.Assert.assertTrue("'" + chronoField75 + "' != '" + java.time.temporal.ChronoField.INSTANT_SECONDS + "'", chronoField75.equals(java.time.temporal.ChronoField.INSTANT_SECONDS));
    }

    @Test
    public void test2204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2204");
        java.util.stream.DoubleStream doubleStream1 = java.util.stream.DoubleStream.of((double) (short) 1);
        long long2 = doubleStream1.count();
        java.util.DoubleSummaryStatistics doubleSummaryStatistics3 = new java.util.DoubleSummaryStatistics();
        doubleSummaryStatistics3.accept((double) 97);
        // The following exception was thrown during execution in test generation
        try {
            doubleStream1.forEachOrdered((java.util.function.DoubleConsumer) doubleSummaryStatistics3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: stream has already been operated upon or closed");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleStream1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertEquals(doubleSummaryStatistics3.toString(), "DoubleSummaryStatistics{count=1, sum=97.000000, min=97.000000, average=97.000000, max=97.000000}");
    }

    @Test
    public void test2205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2205");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime4 = property2.setCopy((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime6 = property2.addToCopy(21);
        org.joda.time.LocalDateTime localDateTime7 = property2.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.minusMonths(32);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
    }

    @Test
    public void test2206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2206");
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("2022-02-21T09:36:47.334Z");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=2022-02-21t09:36:47.334z");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test2207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2207");
        org.joda.time.YearMonthDay yearMonthDay0 = new org.joda.time.YearMonthDay();
        java.util.TimeZone timeZone3 = null;
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight((long) 1970, dateTimeZone4);
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((long) 3600000, dateTimeZone4);
        org.joda.time.DateMidnight dateMidnight7 = yearMonthDay0.toDateMidnight(dateTimeZone4);
        org.joda.time.LocalDate localDate8 = yearMonthDay0.toLocalDate();
        org.joda.time.DateTime dateTime9 = localDate8.toDateTimeAtMidnight();
        org.joda.time.DateTime dateTime10 = localDate8.toDateTimeAtStartOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate12 = localDate8.withEra(710);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 710 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime10);
    }

    @Test
    public void test2208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2208");
        java.util.stream.LongStream longStream1 = java.util.stream.LongStream.of(0L);
        java.util.LongSummaryStatistics longSummaryStatistics2 = new java.util.LongSummaryStatistics();
        longSummaryStatistics2.accept(3);
        long long5 = longSummaryStatistics2.getMax();
        java.util.LongSummaryStatistics longSummaryStatistics6 = new java.util.LongSummaryStatistics();
        longSummaryStatistics6.accept(3);
        java.util.function.LongConsumer longConsumer9 = longSummaryStatistics2.andThen((java.util.function.LongConsumer) longSummaryStatistics6);
        java.util.stream.LongStream longStream10 = longStream1.peek((java.util.function.LongConsumer) longSummaryStatistics6);
        java.lang.String str11 = longSummaryStatistics6.toString();
        org.junit.Assert.assertNotNull(longStream1);
        org.junit.Assert.assertEquals(longSummaryStatistics2.toString(), "LongSummaryStatistics{count=1, sum=3, min=3, average=3.000000, max=3}");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 3L + "'", long5 == 3L);
        org.junit.Assert.assertEquals(longSummaryStatistics6.toString(), "LongSummaryStatistics{count=1, sum=3, min=3, average=3.000000, max=3}");
        org.junit.Assert.assertNotNull(longConsumer9);
        org.junit.Assert.assertNotNull(longStream10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "LongSummaryStatistics{count=1, sum=3, min=3, average=3.000000, max=3}" + "'", str11, "LongSummaryStatistics{count=1, sum=3, min=3, average=3.000000, max=3}");
    }

    @Test
    public void test2209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2209");
        java.nio.charset.Charset charset0 = java.nio.charset.Charset.defaultCharset();
        java.nio.charset.CharsetDecoder charsetDecoder1 = charset0.newDecoder();
        float float2 = charsetDecoder1.maxCharsPerByte();
        float float3 = charsetDecoder1.averageCharsPerByte();
        java.nio.charset.CodingErrorAction codingErrorAction4 = charsetDecoder1.unmappableCharacterAction();
        float float5 = charsetDecoder1.maxCharsPerByte();
        // The following exception was thrown during execution in test generation
        try {
            java.nio.charset.CharsetDecoder charsetDecoder7 = charsetDecoder1.replaceWith("/experiment/1970-01-01T00:00:00.003Z");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Replacement too long");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charset0);
        org.junit.Assert.assertNotNull(charsetDecoder1);
        org.junit.Assert.assertTrue("'" + float2 + "' != '" + 1.0f + "'", float2 == 1.0f);
        org.junit.Assert.assertTrue("'" + float3 + "' != '" + 1.0f + "'", float3 == 1.0f);
        org.junit.Assert.assertNotNull(codingErrorAction4);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 1.0f + "'", float5 == 1.0f);
    }

    @Test
    public void test2210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2210");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.now();
        java.time.temporal.ChronoField chronoField1 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime3 = localDateTime0.with((java.time.temporal.TemporalField) chronoField1, (long) 10);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalTime localTime6 = new org.joda.time.LocalTime((long) 0, chronology5);
        org.joda.time.Chronology chronology7 = localTime6.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.weekyearOfCentury();
        org.joda.time.DurationField durationField9 = chronology7.weekyears();
        org.joda.time.DurationField durationField10 = chronology7.seconds();
        org.joda.time.Chronology chronology11 = chronology7.withUTC();
        boolean boolean12 = localDateChronoLocalDateTime3.equals((java.lang.Object) chronology7);
        org.joda.time.DateTimeField dateTimeField13 = chronology7.millisOfSecond();
        long long15 = dateTimeField13.roundHalfEven(299102343168L);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertTrue("'" + chronoField1 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField1.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime3);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 299102343168L + "'", long15 == 299102343168L);
    }

    @Test
    public void test2211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2211");
        java.time.Duration duration0 = java.time.Duration.ZERO;
        java.time.Duration duration2 = duration0.minusHours((long) 8);
        java.time.Duration duration4 = duration2.minusSeconds(32L);
        long long5 = duration4.toHours();
        org.junit.Assert.assertNotNull(duration0);
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-8L) + "'", long5 == (-8L));
    }

    @Test
    public void test2212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2212");
        java.util.GregorianCalendar gregorianCalendar5 = new java.util.GregorianCalendar(12, 4096, 7, (-1), (int) (short) 10);
        int int6 = gregorianCalendar5.getWeeksInWeekYear();
        java.lang.String str7 = gregorianCalendar5.getCalendarType();
        java.time.ZonedDateTime zonedDateTime8 = gregorianCalendar5.toZonedDateTime();
        java.util.GregorianCalendar gregorianCalendar14 = new java.util.GregorianCalendar(12, 4096, 7, (-1), (int) (short) 10);
        int int15 = gregorianCalendar14.getWeeksInWeekYear();
        java.lang.String str16 = gregorianCalendar14.getCalendarType();
        java.time.ZonedDateTime zonedDateTime17 = gregorianCalendar14.toZonedDateTime();
        int int18 = zonedDateTime8.compareTo((java.time.chrono.ChronoZonedDateTime<java.time.LocalDate>) zonedDateTime17);
        java.time.ZonedDateTime zonedDateTime20 = zonedDateTime8.plusDays((long) 2022);
        java.time.Instant instant21 = zonedDateTime8.toInstant();
        java.time.Period period23 = java.time.Period.ofMonths(0);
        java.time.ZonedDateTime zonedDateTime24 = zonedDateTime8.minus((java.time.temporal.TemporalAmount) period23);
        java.time.chrono.ChronoZonedDateTime<java.time.LocalDate> localDateChronoZonedDateTime25 = zonedDateTime24.withLaterOffsetAtOverlap();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 52 + "'", int6 == 52);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "gregory" + "'", str7, "gregory");
        org.junit.Assert.assertNotNull(zonedDateTime8);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 52 + "'", int15 == 52);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "gregory" + "'", str16, "gregory");
        org.junit.Assert.assertNotNull(zonedDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(zonedDateTime20);
        org.junit.Assert.assertNotNull(instant21);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(zonedDateTime24);
        org.junit.Assert.assertNotNull(localDateChronoZonedDateTime25);
    }

    @Test
    public void test2213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2213");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        int int1 = localDate0.getDayOfWeek();
        org.joda.time.LocalDate.Property property2 = localDate0.dayOfMonth();
        org.joda.time.LocalDate.Property property3 = localDate0.weekOfWeekyear();
        java.lang.String str4 = property3.getName();
        java.lang.String str5 = property3.getAsString();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "weekOfWeekyear" + "'", str4, "weekOfWeekyear");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "8" + "'", str5, "8");
    }

    @Test
    public void test2214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2214");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.time.LocalTime localTime6 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime7 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime6);
        java.time.LocalTime localTime12 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime13 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime12);
        java.time.temporal.ChronoField chronoField14 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime16 = localTime12.with((java.time.temporal.TemporalField) chronoField14, (long) (short) 1);
        long long17 = localTime6.getLong((java.time.temporal.TemporalField) chronoField14);
        java.time.LocalTime localTime19 = localTime6.withSecond((int) (short) 1);
        java.lang.Object obj21 = properties1.put((java.lang.Object) localTime19, (java.lang.Object) "117");
        java.util.Enumeration<java.lang.Object> objEnumeration22 = properties1.elements();
        org.joda.time.Minutes minutes23 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes25 = minutes23.minus(12);
        org.joda.time.Minutes minutes26 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes28 = minutes26.minus(12);
        org.joda.time.Minutes minutes29 = minutes23.minus(minutes26);
        java.util.GregorianCalendar gregorianCalendar35 = new java.util.GregorianCalendar(12, 4096, 7, (-1), (int) (short) 10);
        int int36 = gregorianCalendar35.getWeeksInWeekYear();
        java.util.TimeZone timeZone37 = gregorianCalendar35.getTimeZone();
        java.time.ZoneId zoneId38 = timeZone37.toZoneId();
        java.time.zone.ZoneRules zoneRules39 = zoneId38.getRules();
        java.time.Instant instant40 = java.time.Instant.now();
        java.time.Instant instant41 = java.time.Instant.now();
        boolean boolean42 = instant40.isAfter(instant41);
        java.time.LocalDate localDate44 = java.time.LocalDate.ofEpochDay((long) ' ');
        int int45 = localDate44.getMonthValue();
        org.joda.time.Period period46 = org.joda.time.Period.ZERO;
        org.joda.time.Period period47 = period46.normalizedStandard();
        org.joda.time.Period period49 = period46.plusHours(2);
        java.time.chrono.IsoEra isoEra50 = java.time.chrono.IsoEra.CE;
        boolean boolean51 = period49.equals((java.lang.Object) isoEra50);
        java.time.LocalTime localTime56 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime57 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime56);
        java.time.LocalTime localTime62 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime63 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime62);
        java.time.temporal.ChronoField chronoField64 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime66 = localTime62.with((java.time.temporal.TemporalField) chronoField64, (long) (short) 1);
        long long67 = localTime56.getLong((java.time.temporal.TemporalField) chronoField64);
        boolean boolean68 = isoEra50.isSupported((java.time.temporal.TemporalField) chronoField64);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery69 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period70 = isoEra50.query(periodTemporalQuery69);
        boolean boolean71 = period70.isNegative();
        java.time.Period period73 = period70.plusDays((long) ' ');
        java.time.temporal.ChronoField chronoField74 = java.time.temporal.ChronoField.SECOND_OF_DAY;
        boolean boolean75 = period70.equals((java.lang.Object) chronoField74);
        boolean boolean76 = localDate44.isSupported((java.time.temporal.TemporalField) chronoField74);
        java.time.temporal.TemporalUnit temporalUnit77 = chronoField74.getRangeUnit();
        java.time.Instant instant78 = instant41.truncatedTo(temporalUnit77);
        java.time.ZoneOffset zoneOffset81 = java.time.ZoneOffset.ofHoursMinutes(1, 10);
        java.time.LocalDate localDate82 = java.time.LocalDate.now((java.time.ZoneId) zoneOffset81);
        java.time.ZonedDateTime zonedDateTime83 = java.time.ZonedDateTime.ofInstant(instant78, (java.time.ZoneId) zoneOffset81);
        java.time.Instant instant85 = instant78.minusMillis(0L);
        java.time.ZoneOffset zoneOffset86 = zoneRules39.getStandardOffset(instant78);
        java.lang.Object obj87 = properties1.put((java.lang.Object) minutes23, (java.lang.Object) zoneOffset86);
        java.lang.String str88 = properties1.toString();
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertTrue("'" + chronoField14 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField14.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 3601000000001L + "'", long17 == 3601000000001L);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertNotNull(objEnumeration22);
        org.junit.Assert.assertNotNull(minutes23);
        org.junit.Assert.assertNotNull(minutes25);
        org.junit.Assert.assertNotNull(minutes26);
        org.junit.Assert.assertNotNull(minutes28);
        org.junit.Assert.assertNotNull(minutes29);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 52 + "'", int36 == 52);
        org.junit.Assert.assertNotNull(timeZone37);
        org.junit.Assert.assertEquals(timeZone37.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(zoneId38);
        org.junit.Assert.assertNotNull(zoneRules39);
        org.junit.Assert.assertNotNull(instant40);
        org.junit.Assert.assertNotNull(instant41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2 + "'", int45 == 2);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertNotNull(period49);
        org.junit.Assert.assertTrue("'" + isoEra50 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra50.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(localTime56);
        org.junit.Assert.assertNotNull(localTime57);
        org.junit.Assert.assertNotNull(localTime62);
        org.junit.Assert.assertNotNull(localTime63);
        org.junit.Assert.assertTrue("'" + chronoField64 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField64.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime66);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 3601000000001L + "'", long67 == 3601000000001L);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(periodTemporalQuery69);
        org.junit.Assert.assertNotNull(period70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(period73);
        org.junit.Assert.assertTrue("'" + chronoField74 + "' != '" + java.time.temporal.ChronoField.SECOND_OF_DAY + "'", chronoField74.equals(java.time.temporal.ChronoField.SECOND_OF_DAY));
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + temporalUnit77 + "' != '" + java.time.temporal.ChronoUnit.DAYS + "'", temporalUnit77.equals(java.time.temporal.ChronoUnit.DAYS));
        org.junit.Assert.assertNotNull(instant78);
        org.junit.Assert.assertNotNull(zoneOffset81);
        org.junit.Assert.assertNotNull(localDate82);
        org.junit.Assert.assertNotNull(zonedDateTime83);
        org.junit.Assert.assertNotNull(instant85);
        org.junit.Assert.assertNotNull(zoneOffset86);
        org.junit.Assert.assertNull(obj87);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "{PT2147483647M=Z, 01:00:01.000000001=117}" + "'", str88, "{PT2147483647M=Z, 01:00:01.000000001=117}");
    }

    @Test
    public void test2215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2215");
        java.security.InvalidKeyException invalidKeyException1 = new java.security.InvalidKeyException("java.nio.HeapDoubleBuffer[pos=4 lim=4 cap=4]");
    }

    @Test
    public void test2216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2216");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 3, chronology1);
        org.joda.time.DateTime.Property property3 = dateTime2.dayOfYear();
        org.joda.time.Interval interval4 = property3.toInterval();
        org.joda.time.DateTimeField dateTimeField5 = property3.getField();
        org.joda.time.DateTime dateTime7 = property3.addWrapFieldToCopy(0);
        org.joda.time.DateTime dateTime9 = property3.setCopy(34);
        org.joda.time.DateTime dateTime11 = property3.addToCopy((int) '\uffff');
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
    }

    @Test
    public void test2217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2217");
        org.joda.time.Weeks weeks0 = org.joda.time.Weeks.ONE;
        java.util.concurrent.TimeUnit timeUnit1 = java.util.concurrent.TimeUnit.NANOSECONDS;
        boolean boolean2 = weeks0.equals((java.lang.Object) timeUnit1);
        org.joda.time.MutablePeriod mutablePeriod3 = weeks0.toMutablePeriod();
        int int4 = mutablePeriod3.getSeconds();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((long) 3, chronology6);
        org.joda.time.DateTime.Property property8 = dateTime7.dayOfYear();
        org.joda.time.Interval interval9 = property8.toInterval();
        org.joda.time.DateTime dateTime10 = interval9.getEnd();
        mutablePeriod3.setPeriod((org.joda.time.ReadableInterval) interval9);
        mutablePeriod3.setMinutes((int) (byte) 0);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) 3, chronology15);
        org.joda.time.DateTime.Property property17 = dateTime16.dayOfYear();
        org.joda.time.Interval interval18 = property17.toInterval();
        org.joda.time.DateTimeField dateTimeField19 = property17.getField();
        org.joda.time.DateTime dateTime21 = property17.addToCopy((long) (byte) 1);
        org.joda.time.DateTime dateTime23 = dateTime21.withYear(4);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((long) 3, chronology25);
        org.joda.time.Period period27 = org.joda.time.Period.ZERO;
        org.joda.time.Period period28 = period27.normalizedStandard();
        org.joda.time.Period period30 = period28.minusMinutes((int) ' ');
        org.joda.time.Period period32 = period30.minusMonths((int) (byte) 0);
        org.joda.time.PeriodType periodType33 = period32.getPeriodType();
        org.joda.time.DateTime dateTime34 = dateTime26.minus((org.joda.time.ReadablePeriod) period32);
        org.joda.time.Duration duration35 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime23, (org.joda.time.ReadableInstant) dateTime34);
        org.joda.time.DateTime dateTime37 = dateTime34.withWeekOfWeekyear(14);
        java.util.TimeZone timeZone41 = null;
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forTimeZone(timeZone41);
        org.joda.time.DateMidnight dateMidnight43 = new org.joda.time.DateMidnight((long) 1970, dateTimeZone42);
        long long46 = dateTimeZone42.convertLocalToUTC((long) 3, false);
        org.joda.time.Interval interval47 = new org.joda.time.Interval(10L, (long) 2097, dateTimeZone42);
        int int49 = dateTimeZone42.getOffsetFromLocal(58L);
        org.joda.time.DateMidnight dateMidnight50 = org.joda.time.DateMidnight.now(dateTimeZone42);
        org.joda.time.DateTime dateTime51 = dateTime34.withZoneRetainFields(dateTimeZone42);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime((long) 3, chronology53);
        org.joda.time.DateTime.Property property55 = dateTime54.dayOfYear();
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.DateMidnight dateMidnight57 = new org.joda.time.DateMidnight((java.lang.Object) dateTime54, chronology56);
        org.joda.time.MutableDateTime mutableDateTime58 = dateTime54.toMutableDateTime();
        mutableDateTime58.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property61 = mutableDateTime58.dayOfWeek();
        org.joda.time.MutableDateTime.Property property62 = mutableDateTime58.year();
        java.util.TimeZone timeZone63 = null;
        org.joda.time.DateTimeZone dateTimeZone64 = org.joda.time.DateTimeZone.forTimeZone(timeZone63);
        mutableDateTime58.setZone(dateTimeZone64);
        java.util.Locale locale67 = java.util.Locale.TAIWAN;
        java.lang.String str68 = dateTimeZone64.getShortName((long) 64, locale67);
        int int70 = dateTimeZone64.getOffset(34450799000000L);
        org.joda.time.DateTime dateTime71 = dateTime34.withZoneRetainFields(dateTimeZone64);
        java.util.TimeZone timeZone73 = null;
        org.joda.time.DateTimeZone dateTimeZone74 = org.joda.time.DateTimeZone.forTimeZone(timeZone73);
        org.joda.time.DateMidnight dateMidnight75 = new org.joda.time.DateMidnight((long) 12, dateTimeZone74);
        org.joda.time.Instant instant76 = dateMidnight75.toInstant();
        mutablePeriod3.setPeriod((org.joda.time.ReadableInstant) dateTime71, (org.joda.time.ReadableInstant) instant76);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime79 = dateTime71.withMillisOfDay((-201));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -201 for millisOfDay must be in the range [0,86399999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(weeks0);
        org.junit.Assert.assertNotNull(timeUnit1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(mutablePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(periodType33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 3L + "'", long46 == 3L);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(dateMidnight50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(mutableDateTime58);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(dateTimeZone64);
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "+00:00" + "'", str68, "+00:00");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(dateTimeZone74);
        org.junit.Assert.assertNotNull(instant76);
    }

    @Test
    public void test2218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2218");
        java.time.LocalDate localDate1 = java.time.LocalDate.ofEpochDay((long) ' ');
        java.time.OffsetTime offsetTime2 = java.time.OffsetTime.MAX;
        java.time.LocalTime localTime3 = offsetTime2.toLocalTime();
        java.lang.String str4 = offsetTime2.toString();
        java.time.Duration duration5 = java.time.Duration.ZERO;
        java.lang.String str6 = duration5.toString();
        java.time.OffsetTime offsetTime7 = offsetTime2.plus((java.time.temporal.TemporalAmount) duration5);
        java.time.LocalTime localTime8 = offsetTime2.toLocalTime();
        java.time.chrono.ChronoLocalDateTime<?> wildcardChronoLocalDateTime9 = localDate1.atTime(localTime8);
        java.time.LocalDate localDate11 = localDate1.minusWeeks((long) 2097);
        java.time.LocalDate localDate13 = localDate11.minusMonths((long) (byte) 0);
        java.time.Duration duration15 = java.time.Duration.ofMinutes((long) 3);
        java.time.Duration duration16 = duration15.abs();
        // The following exception was thrown during execution in test generation
        try {
            java.time.chrono.ChronoLocalDate chronoLocalDate17 = localDate11.plus((java.time.temporal.TemporalAmount) duration16);
            org.junit.Assert.fail("Expected exception of type java.time.temporal.UnsupportedTemporalTypeException; message: Unsupported unit: Seconds");
        } catch (java.time.temporal.UnsupportedTemporalTypeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate1);
        org.junit.Assert.assertNotNull(offsetTime2);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "23:59:59.999999999-18:00" + "'", str4, "23:59:59.999999999-18:00");
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "PT0S" + "'", str6, "PT0S");
        org.junit.Assert.assertNotNull(offsetTime7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(wildcardChronoLocalDateTime9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(duration16);
    }

    @Test
    public void test2219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2219");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MIN;
        java.time.Month month1 = java.time.Month.NOVEMBER;
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime2 = localDateTime0.with((java.time.temporal.TemporalAdjuster) month1);
        java.time.LocalDateTime localDateTime4 = localDateTime0.plusMinutes((long) 3600000);
        java.time.OffsetTime offsetTime5 = java.time.OffsetTime.MAX;
        java.time.LocalTime localTime6 = offsetTime5.toLocalTime();
        java.lang.String str7 = offsetTime5.toString();
        java.time.Duration duration8 = java.time.Duration.ZERO;
        java.lang.String str9 = duration8.toString();
        java.time.OffsetTime offsetTime10 = offsetTime5.plus((java.time.temporal.TemporalAmount) duration8);
        java.time.OffsetTime offsetTime12 = offsetTime5.plusNanos((long) 0);
        java.time.LocalTime localTime17 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime18 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime17);
        java.time.temporal.ChronoField chronoField19 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime21 = localTime17.with((java.time.temporal.TemporalField) chronoField19, (long) (short) 1);
        java.util.Locale locale22 = java.util.Locale.GERMANY;
        java.lang.String str23 = chronoField19.getDisplayName(locale22);
        java.time.OffsetTime offsetTime25 = offsetTime12.with((java.time.temporal.TemporalField) chronoField19, (long) 28);
        org.joda.time.Period period26 = org.joda.time.Period.ZERO;
        org.joda.time.Period period27 = period26.normalizedStandard();
        org.joda.time.Period period29 = period26.plusHours(2);
        java.time.chrono.IsoEra isoEra30 = java.time.chrono.IsoEra.CE;
        boolean boolean31 = period29.equals((java.lang.Object) isoEra30);
        java.time.LocalTime localTime36 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime37 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime36);
        java.time.LocalTime localTime42 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime43 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime42);
        java.time.temporal.ChronoField chronoField44 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime46 = localTime42.with((java.time.temporal.TemporalField) chronoField44, (long) (short) 1);
        long long47 = localTime36.getLong((java.time.temporal.TemporalField) chronoField44);
        boolean boolean48 = isoEra30.isSupported((java.time.temporal.TemporalField) chronoField44);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery49 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period50 = isoEra30.query(periodTemporalQuery49);
        boolean boolean51 = period50.isNegative();
        java.time.Period period53 = period50.plusDays((long) ' ');
        java.time.temporal.ChronoField chronoField54 = java.time.temporal.ChronoField.SECOND_OF_DAY;
        boolean boolean55 = period50.equals((java.lang.Object) chronoField54);
        java.time.chrono.ChronoPeriod chronoPeriod56 = period50.negated();
        java.time.OffsetTime offsetTime57 = offsetTime12.minus((java.time.temporal.TemporalAmount) period50);
        java.time.Period period59 = period50.plusYears((long) 2022);
        java.time.Period period61 = period59.minusDays((long) (short) 100);
        // The following exception was thrown during execution in test generation
        try {
            java.time.LocalDateTime localDateTime62 = localDateTime0.minus((java.time.temporal.TemporalAmount) period61);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for Year (valid values -999999999 - 999999999): -1000002021");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertTrue("'" + month1 + "' != '" + java.time.Month.NOVEMBER + "'", month1.equals(java.time.Month.NOVEMBER));
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(offsetTime5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "23:59:59.999999999-18:00" + "'", str7, "23:59:59.999999999-18:00");
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "PT0S" + "'", str9, "PT0S");
        org.junit.Assert.assertNotNull(offsetTime10);
        org.junit.Assert.assertNotNull(offsetTime12);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertTrue("'" + chronoField19 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField19.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "NanoOfDay" + "'", str23, "NanoOfDay");
        org.junit.Assert.assertNotNull(offsetTime25);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertTrue("'" + isoEra30 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra30.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(localTime36);
        org.junit.Assert.assertNotNull(localTime37);
        org.junit.Assert.assertNotNull(localTime42);
        org.junit.Assert.assertNotNull(localTime43);
        org.junit.Assert.assertTrue("'" + chronoField44 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField44.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime46);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 3601000000001L + "'", long47 == 3601000000001L);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(periodTemporalQuery49);
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertTrue("'" + chronoField54 + "' != '" + java.time.temporal.ChronoField.SECOND_OF_DAY + "'", chronoField54.equals(java.time.temporal.ChronoField.SECOND_OF_DAY));
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(chronoPeriod56);
        org.junit.Assert.assertNotNull(offsetTime57);
        org.junit.Assert.assertNotNull(period59);
        org.junit.Assert.assertNotNull(period61);
    }

    @Test
    public void test2220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2220");
        java.util.stream.DoubleStream doubleStream1 = java.util.stream.DoubleStream.of((double) 1024);
        java.util.stream.DoubleStream doubleStream2 = doubleStream1.sorted();
        java.util.OptionalDouble optionalDouble3 = doubleStream2.findFirst();
        java.util.stream.DoubleStream doubleStream4 = doubleStream2.sequential();
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.DoubleStream doubleStream5 = doubleStream2.sorted();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: stream has already been operated upon or closed");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleStream1);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertNotNull(optionalDouble3);
        org.junit.Assert.assertNotNull(doubleStream4);
    }

    @Test
    public void test2221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2221");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        boolean boolean3 = periodFormatter2.isParser();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalTime localTime7 = new org.joda.time.LocalTime((long) 0, chronology6);
        org.joda.time.Chronology chronology8 = localTime7.getChronology();
        java.util.Locale locale9 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale10 = java.util.Locale.GERMANY;
        java.lang.String str11 = locale9.getDisplayScript(locale10);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket13 = new org.joda.time.format.DateTimeParserBucket((long) 1970, chronology8, locale9, (java.lang.Integer) 1);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.LocalTime localTime16 = new org.joda.time.LocalTime((long) 0, chronology15);
        org.joda.time.Chronology chronology17 = localTime16.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.weekyearOfCentury();
        org.joda.time.DurationField durationField19 = dateTimeField18.getLeapDurationField();
        dateTimeParserBucket13.saveField(dateTimeField18, (int) 'u');
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.yearOfCentury();
        java.time.temporal.ChronoField chronoField24 = java.time.temporal.ChronoField.DAY_OF_WEEK;
        java.time.LocalDateTime localDateTime25 = java.time.LocalDateTime.now();
        java.time.temporal.ChronoField chronoField26 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime28 = localDateTime25.with((java.time.temporal.TemporalField) chronoField26, (long) 10);
        java.time.Duration duration30 = java.time.Duration.ofSeconds((long) 0);
        java.time.temporal.Temporal temporal31 = localDateTime25.minus((java.time.temporal.TemporalAmount) duration30);
        long long32 = chronoField24.getFrom((java.time.temporal.TemporalAccessor) temporal31);
        java.time.LocalTime localTime37 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime38 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime37);
        java.time.temporal.ChronoField chronoField39 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime41 = localTime37.with((java.time.temporal.TemporalField) chronoField39, (long) (short) 1);
        java.util.Locale locale42 = java.util.Locale.GERMANY;
        java.lang.String str43 = chronoField39.getDisplayName(locale42);
        java.lang.String str44 = chronoField24.getDisplayName(locale42);
        dateTimeParserBucket13.saveField(dateTimeFieldType22, "Optional.empty", locale42);
        java.lang.String str46 = locale42.getDisplayCountry();
        org.joda.time.format.PeriodFormatter periodFormatter47 = periodFormatter2.withLocale(locale42);
        java.util.Set<java.lang.String> strSet48 = java.time.ZoneId.getAvailableZoneIds();
        java.util.stream.Stream<java.lang.String> strStream49 = strSet48.parallelStream();
        boolean boolean51 = strSet48.remove((java.lang.Object) 0);
        boolean boolean53 = strSet48.add("0 - 86399");
        org.joda.time.Days days54 = org.joda.time.Days.ONE;
        org.joda.time.PeriodType periodType55 = days54.getPeriodType();
        org.joda.time.Days days57 = days54.multipliedBy(1024);
        org.joda.time.Days days58 = days57.negated();
        boolean boolean59 = strSet48.equals((java.lang.Object) days58);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str60 = periodFormatter2.print((org.joda.time.ReadablePeriod) days58);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertTrue("'" + chronoField24 + "' != '" + java.time.temporal.ChronoField.DAY_OF_WEEK + "'", chronoField24.equals(java.time.temporal.ChronoField.DAY_OF_WEEK));
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertTrue("'" + chronoField26 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField26.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime28);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(temporal31);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 1L + "'", long32 == 1L);
        org.junit.Assert.assertNotNull(localTime37);
        org.junit.Assert.assertNotNull(localTime38);
        org.junit.Assert.assertTrue("'" + chronoField39 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField39.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime41);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "NanoOfDay" + "'", str43, "NanoOfDay");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "Wochentag" + "'", str44, "Wochentag");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "Germany" + "'", str46, "Germany");
        org.junit.Assert.assertNotNull(periodFormatter47);
        org.junit.Assert.assertNotNull(strSet48);
        org.junit.Assert.assertNotNull(strStream49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(days54);
        org.junit.Assert.assertNotNull(periodType55);
        org.junit.Assert.assertNotNull(days57);
        org.junit.Assert.assertNotNull(days58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
    }

    @Test
    public void test2222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2222");
        java.util.Date date6 = new java.util.Date((int) 'a', 3, 0, (-1), (int) '/', 28);
        int int7 = date6.getTimezoneOffset();
        java.util.Date date14 = new java.util.Date((int) 'a', 3, 0, (-1), (int) '/', 28);
        int int15 = date14.getTimezoneOffset();
        boolean boolean16 = date6.before(date14);
        date14.setHours(274);
        org.junit.Assert.assertEquals(date6.toString(), "Sun Mar 30 23:47:28 UTC 1997");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertEquals(date14.toString(), "Thu Apr 10 10:47:28 UTC 1997");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test2223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2223");
        java.util.stream.IntStream intStream2 = java.util.stream.IntStream.rangeClosed(100, (int) '4');
        java.util.IntSummaryStatistics intSummaryStatistics3 = new java.util.IntSummaryStatistics();
        intStream2.forEach((java.util.function.IntConsumer) intSummaryStatistics3);
        intSummaryStatistics3.accept((int) '#');
        int int7 = intSummaryStatistics3.getMin();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(chronology10);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.withYearOfCentury((int) 'a');
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.plusSeconds(6);
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.Duration duration18 = new org.joda.time.Duration(readableInstant16, readableInstant17);
        long long19 = duration18.getMillis();
        org.joda.time.Duration duration21 = duration18.plus((long) (byte) 1);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime13.minus((org.joda.time.ReadableDuration) duration21);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.withWeekOfWeekyear((int) '#');
        java.util.Date date25 = localDateTime24.toDate();
        org.joda.time.Chronology chronology26 = localDateTime24.getChronology();
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod(3597523200000L, (long) 19, chronology26);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime((java.lang.Object) intSummaryStatistics3, chronology26);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: java.util.IntSummaryStatistics");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intStream2);
        org.junit.Assert.assertEquals(intSummaryStatistics3.toString(), "IntSummaryStatistics{count=1, sum=35, min=35, average=35.000000, max=35}");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 35 + "'", int7 == 35);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(date25);
// flaky:         org.junit.Assert.assertEquals(date25.toString(), "Thu Aug 29 09:37:33 UTC 2097");
        org.junit.Assert.assertNotNull(chronology26);
    }

    @Test
    public void test2224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2224");
        java.io.File file0 = null;
        java.io.File file2 = new java.io.File(file0, "1970-01-01T00:00:00.003Z");
        java.net.URL uRL3 = file2.toURL();
        boolean boolean4 = file2.canRead();
        java.nio.file.Path path5 = file2.toPath();
        java.util.Iterator<java.nio.file.Path> pathItor6 = path5.iterator();
        org.junit.Assert.assertNull("file2.getParent() == null", file2.getParent());
        org.junit.Assert.assertEquals(file2.toString(), "1970-01-01T00:00:00.003Z");
        org.junit.Assert.assertNotNull(uRL3);
// flaky:         org.junit.Assert.assertEquals(uRL3.toString(), "file:/experiment/1970-01-01T00:00:00.003Z/");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(path5);
        org.junit.Assert.assertNotNull(pathItor6);
    }

    @Test
    public void test2225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2225");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.MIN;
        java.time.LocalDateTime localDateTime2 = localDateTime0.withMinute((int) ' ');
        java.time.Duration duration3 = java.time.Duration.ZERO;
        java.time.Duration duration5 = duration3.minusHours((long) 8);
        java.time.ZoneOffset zoneOffset9 = java.time.ZoneOffset.ofHoursMinutes(1, 10);
        java.time.LocalDate localDate10 = java.time.LocalDate.now((java.time.ZoneId) zoneOffset9);
        java.time.LocalDate localDate11 = java.time.LocalDate.now((java.time.ZoneId) zoneOffset9);
        java.time.OffsetDateTime offsetDateTime13 = java.time.OffsetDateTime.now();
        java.time.LocalDate localDate15 = java.time.LocalDate.ofEpochDay((long) ' ');
        int int16 = localDate15.getMonthValue();
        org.joda.time.Period period17 = org.joda.time.Period.ZERO;
        org.joda.time.Period period18 = period17.normalizedStandard();
        org.joda.time.Period period20 = period17.plusHours(2);
        java.time.chrono.IsoEra isoEra21 = java.time.chrono.IsoEra.CE;
        boolean boolean22 = period20.equals((java.lang.Object) isoEra21);
        java.time.LocalTime localTime27 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime28 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime27);
        java.time.LocalTime localTime33 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime34 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime33);
        java.time.temporal.ChronoField chronoField35 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime37 = localTime33.with((java.time.temporal.TemporalField) chronoField35, (long) (short) 1);
        long long38 = localTime27.getLong((java.time.temporal.TemporalField) chronoField35);
        boolean boolean39 = isoEra21.isSupported((java.time.temporal.TemporalField) chronoField35);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery40 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period41 = isoEra21.query(periodTemporalQuery40);
        boolean boolean42 = period41.isNegative();
        java.time.Period period44 = period41.plusDays((long) ' ');
        java.time.temporal.ChronoField chronoField45 = java.time.temporal.ChronoField.SECOND_OF_DAY;
        boolean boolean46 = period41.equals((java.lang.Object) chronoField45);
        boolean boolean47 = localDate15.isSupported((java.time.temporal.TemporalField) chronoField45);
        java.time.temporal.TemporalUnit temporalUnit48 = chronoField45.getRangeUnit();
        java.time.OffsetDateTime offsetDateTime49 = offsetDateTime13.truncatedTo(temporalUnit48);
        java.time.LocalDate localDate52 = java.time.LocalDate.ofEpochDay((long) ' ');
        int int53 = localDate52.getMonthValue();
        org.joda.time.Period period54 = org.joda.time.Period.ZERO;
        org.joda.time.Period period55 = period54.normalizedStandard();
        org.joda.time.Period period57 = period54.plusHours(2);
        java.time.chrono.IsoEra isoEra58 = java.time.chrono.IsoEra.CE;
        boolean boolean59 = period57.equals((java.lang.Object) isoEra58);
        java.time.LocalTime localTime64 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime65 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime64);
        java.time.LocalTime localTime70 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime71 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime70);
        java.time.temporal.ChronoField chronoField72 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime74 = localTime70.with((java.time.temporal.TemporalField) chronoField72, (long) (short) 1);
        long long75 = localTime64.getLong((java.time.temporal.TemporalField) chronoField72);
        boolean boolean76 = isoEra58.isSupported((java.time.temporal.TemporalField) chronoField72);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery77 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period78 = isoEra58.query(periodTemporalQuery77);
        boolean boolean79 = period78.isNegative();
        java.time.Period period81 = period78.plusDays((long) ' ');
        java.time.temporal.ChronoField chronoField82 = java.time.temporal.ChronoField.SECOND_OF_DAY;
        boolean boolean83 = period78.equals((java.lang.Object) chronoField82);
        boolean boolean84 = localDate52.isSupported((java.time.temporal.TemporalField) chronoField82);
        java.time.temporal.TemporalUnit temporalUnit85 = chronoField82.getRangeUnit();
        java.time.OffsetDateTime offsetDateTime86 = offsetDateTime49.minus(8L, temporalUnit85);
        java.time.LocalDate localDate87 = localDate11.minus((long) '4', temporalUnit85);
        java.time.Duration duration88 = temporalUnit85.getDuration();
        java.time.Duration duration89 = duration3.plus((long) 306, temporalUnit85);
        boolean boolean90 = localDateTime0.isSupported(temporalUnit85);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(zoneOffset9);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(offsetDateTime13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertTrue("'" + isoEra21 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra21.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(localTime27);
        org.junit.Assert.assertNotNull(localTime28);
        org.junit.Assert.assertNotNull(localTime33);
        org.junit.Assert.assertNotNull(localTime34);
        org.junit.Assert.assertTrue("'" + chronoField35 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField35.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime37);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 3601000000001L + "'", long38 == 3601000000001L);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(periodTemporalQuery40);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertTrue("'" + chronoField45 + "' != '" + java.time.temporal.ChronoField.SECOND_OF_DAY + "'", chronoField45.equals(java.time.temporal.ChronoField.SECOND_OF_DAY));
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + temporalUnit48 + "' != '" + java.time.temporal.ChronoUnit.DAYS + "'", temporalUnit48.equals(java.time.temporal.ChronoUnit.DAYS));
        org.junit.Assert.assertNotNull(offsetDateTime49);
        org.junit.Assert.assertNotNull(localDate52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 2 + "'", int53 == 2);
        org.junit.Assert.assertNotNull(period54);
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertTrue("'" + isoEra58 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra58.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(localTime64);
        org.junit.Assert.assertNotNull(localTime65);
        org.junit.Assert.assertNotNull(localTime70);
        org.junit.Assert.assertNotNull(localTime71);
        org.junit.Assert.assertTrue("'" + chronoField72 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField72.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime74);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 3601000000001L + "'", long75 == 3601000000001L);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(periodTemporalQuery77);
        org.junit.Assert.assertNotNull(period78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(period81);
        org.junit.Assert.assertTrue("'" + chronoField82 + "' != '" + java.time.temporal.ChronoField.SECOND_OF_DAY + "'", chronoField82.equals(java.time.temporal.ChronoField.SECOND_OF_DAY));
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertTrue("'" + temporalUnit85 + "' != '" + java.time.temporal.ChronoUnit.DAYS + "'", temporalUnit85.equals(java.time.temporal.ChronoUnit.DAYS));
        org.junit.Assert.assertNotNull(offsetDateTime86);
        org.junit.Assert.assertNotNull(localDate87);
        org.junit.Assert.assertNotNull(duration88);
        org.junit.Assert.assertNotNull(duration89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
    }

    @Test
    public void test2226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2226");
        java.util.GregorianCalendar gregorianCalendar5 = new java.util.GregorianCalendar(12, 4096, 7, (-1), (int) (short) 10);
        int int6 = gregorianCalendar5.getWeeksInWeekYear();
        java.lang.String str7 = gregorianCalendar5.getCalendarType();
        java.time.ZonedDateTime zonedDateTime8 = gregorianCalendar5.toZonedDateTime();
        java.time.ZonedDateTime zonedDateTime10 = zonedDateTime8.minusMonths((long) 10);
        java.time.chrono.ChronoZonedDateTime<java.time.LocalDate> localDateChronoZonedDateTime11 = zonedDateTime8.withEarlierOffsetAtOverlap();
        int int12 = zonedDateTime8.getDayOfYear();
        java.time.ZonedDateTime zonedDateTime14 = zonedDateTime8.withMinute(34);
        java.time.ZonedDateTime zonedDateTime16 = zonedDateTime14.plusSeconds(0L);
        java.time.chrono.Chronology chronology17 = zonedDateTime14.getChronology();
        java.lang.String str18 = chronology17.getId();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 52 + "'", int6 == 52);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "gregory" + "'", str7, "gregory");
        org.junit.Assert.assertNotNull(zonedDateTime8);
        org.junit.Assert.assertNotNull(zonedDateTime10);
        org.junit.Assert.assertNotNull(localDateChronoZonedDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 127 + "'", int12 == 127);
        org.junit.Assert.assertNotNull(zonedDateTime14);
        org.junit.Assert.assertNotNull(zonedDateTime16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "ISO" + "'", str18, "ISO");
    }

    @Test
    public void test2227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2227");
        java.util.GregorianCalendar gregorianCalendar5 = new java.util.GregorianCalendar(12, 4096, 7, (-1), (int) (short) 10);
        int int6 = gregorianCalendar5.getWeeksInWeekYear();
        java.lang.String str7 = gregorianCalendar5.getCalendarType();
        java.time.ZonedDateTime zonedDateTime8 = gregorianCalendar5.toZonedDateTime();
        java.time.ZonedDateTime zonedDateTime10 = zonedDateTime8.minusMonths((long) 10);
        java.time.chrono.ChronoZonedDateTime<java.time.LocalDate> localDateChronoZonedDateTime11 = zonedDateTime8.withEarlierOffsetAtOverlap();
        int int12 = zonedDateTime8.getDayOfYear();
        java.time.temporal.ChronoField chronoField13 = java.time.temporal.ChronoField.NANO_OF_SECOND;
        java.time.ZonedDateTime zonedDateTime15 = zonedDateTime8.with((java.time.temporal.TemporalField) chronoField13, (long) 2012);
        int int16 = zonedDateTime8.getDayOfMonth();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 52 + "'", int6 == 52);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "gregory" + "'", str7, "gregory");
        org.junit.Assert.assertNotNull(zonedDateTime8);
        org.junit.Assert.assertNotNull(zonedDateTime10);
        org.junit.Assert.assertNotNull(localDateChronoZonedDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 127 + "'", int12 == 127);
        org.junit.Assert.assertTrue("'" + chronoField13 + "' != '" + java.time.temporal.ChronoField.NANO_OF_SECOND + "'", chronoField13.equals(java.time.temporal.ChronoField.NANO_OF_SECOND));
        org.junit.Assert.assertNotNull(zonedDateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 7 + "'", int16 == 7);
    }

    @Test
    public void test2228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2228");
        java.io.OutputStream outputStream0 = null;
        java.io.FilterOutputStream filterOutputStream1 = new java.io.FilterOutputStream(outputStream0);
        byte[] byteArray3 = new byte[] { (byte) 100 };
        filterOutputStream1.write(byteArray3, (int) (byte) 0, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer7 = java.nio.ByteBuffer.wrap(byteArray3);
        java.nio.LongBuffer longBuffer8 = byteBuffer7.asLongBuffer();
        java.nio.ByteBuffer byteBuffer9 = byteBuffer7.duplicate();
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer11 = byteBuffer7.putLong(999999999L);
            org.junit.Assert.fail("Expected exception of type java.nio.BufferOverflowException; message: null");
        } catch (java.nio.BufferOverflowException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[100]");
        org.junit.Assert.assertNotNull(byteBuffer7);
        org.junit.Assert.assertNotNull(longBuffer8);
        org.junit.Assert.assertNotNull(byteBuffer9);
    }

    @Test
    public void test2229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2229");
        java.util.GregorianCalendar gregorianCalendar5 = new java.util.GregorianCalendar(12, 4096, 7, (-1), (int) (short) 10);
        int int6 = gregorianCalendar5.getWeeksInWeekYear();
        org.joda.time.YearMonthDay yearMonthDay7 = org.joda.time.YearMonthDay.fromCalendarFields((java.util.Calendar) gregorianCalendar5);
        org.joda.time.YearMonthDay yearMonthDay9 = yearMonthDay7.withYear(0);
        org.joda.time.Hours hours10 = org.joda.time.Hours.ZERO;
        org.joda.time.YearMonthDay yearMonthDay11 = yearMonthDay9.minus((org.joda.time.ReadablePeriod) hours10);
        org.joda.time.YearMonthDay yearMonthDay13 = yearMonthDay11.withYear(96000000);
        int int14 = yearMonthDay13.getMonthOfYear();
        org.joda.time.LocalDate localDate15 = yearMonthDay13.toLocalDate();
        int int16 = localDate15.getCenturyOfEra();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 52 + "'", int6 == 52);
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(hours10);
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 960000 + "'", int16 == 960000);
    }

    @Test
    public void test2230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2230");
        java.io.File file0 = null;
        java.io.File file2 = new java.io.File(file0, "1970-01-01T00:00:00.003Z");
        java.net.URL uRL3 = file2.toURL();
        boolean boolean4 = file2.canRead();
        java.nio.file.Path path5 = file2.toPath();
        java.nio.file.Path path6 = path5.normalize();
        org.junit.Assert.assertNull("file2.getParent() == null", file2.getParent());
        org.junit.Assert.assertEquals(file2.toString(), "1970-01-01T00:00:00.003Z");
        org.junit.Assert.assertNotNull(uRL3);
// flaky:         org.junit.Assert.assertEquals(uRL3.toString(), "file:/experiment/1970-01-01T00:00:00.003Z/");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(path5);
        org.junit.Assert.assertNotNull(path6);
    }

    @Test
    public void test2231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2231");
        short[] shortArray2 = new short[] { (short) 1, (byte) 10 };
        java.nio.ShortBuffer shortBuffer3 = java.nio.ShortBuffer.wrap(shortArray2);
        short[] shortArray6 = new short[] { (short) 1, (byte) 10 };
        java.nio.ShortBuffer shortBuffer7 = java.nio.ShortBuffer.wrap(shortArray6);
        java.nio.ShortBuffer shortBuffer8 = shortBuffer3.put(shortBuffer7);
        int int9 = shortBuffer8.limit();
        java.nio.Buffer buffer10 = shortBuffer8.clear();
        java.nio.ShortBuffer shortBuffer12 = shortBuffer8.put((short) (byte) 100);
        boolean boolean13 = shortBuffer8.isReadOnly();
        org.junit.Assert.assertNotNull(shortArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray2), "[100, 10]");
        org.junit.Assert.assertNotNull(shortBuffer3);
        org.junit.Assert.assertNotNull(shortArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray6), "[1, 10]");
        org.junit.Assert.assertNotNull(shortBuffer7);
        org.junit.Assert.assertNotNull(shortBuffer8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
        org.junit.Assert.assertNotNull(buffer10);
        org.junit.Assert.assertNotNull(shortBuffer12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test2232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2232");
        // The following exception was thrown during execution in test generation
        try {
            java.time.LocalTime localTime1 = java.time.LocalTime.parse((java.lang.CharSequence) "2022-02-21T09:35:58.254");
            org.junit.Assert.fail("Expected exception of type java.time.format.DateTimeParseException; message: Text '2022-02-21T09:35:58.254' could not be parsed at index 2");
        } catch (java.time.format.DateTimeParseException e) {
            // Expected exception.
        }
    }

    @Test
    public void test2233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2233");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(37, 64, 292269054, 0, 101);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 101 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test2234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2234");
        org.joda.time.Weeks weeks0 = org.joda.time.Weeks.ONE;
        java.util.concurrent.TimeUnit timeUnit1 = java.util.concurrent.TimeUnit.NANOSECONDS;
        boolean boolean2 = weeks0.equals((java.lang.Object) timeUnit1);
        org.joda.time.MutablePeriod mutablePeriod3 = weeks0.toMutablePeriod();
        int int4 = mutablePeriod3.getSeconds();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((long) 3, chronology6);
        org.joda.time.DateTime.Property property8 = dateTime7.dayOfYear();
        org.joda.time.Interval interval9 = property8.toInterval();
        org.joda.time.DateTime dateTime10 = interval9.getEnd();
        mutablePeriod3.setPeriod((org.joda.time.ReadableInterval) interval9);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) 3, chronology13);
        org.joda.time.DateTime.Property property15 = dateTime14.dayOfYear();
        org.joda.time.Interval interval16 = property15.toInterval();
        org.joda.time.DateTime dateTime17 = interval16.getEnd();
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.Duration duration20 = new org.joda.time.Duration(readableInstant18, readableInstant19);
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.PeriodType periodType22 = null;
        org.joda.time.Period period23 = duration20.toPeriodTo(readableInstant21, periodType22);
        long long24 = duration20.getStandardSeconds();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((long) 3, chronology26);
        org.joda.time.DateTime.Property property28 = dateTime27.dayOfYear();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.DateMidnight dateMidnight30 = new org.joda.time.DateMidnight((java.lang.Object) dateTime27, chronology29);
        org.joda.time.DateMidnight dateMidnight32 = dateMidnight30.minusMonths((-1));
        org.joda.time.DateMidnight dateMidnight34 = dateMidnight30.withDayOfYear((int) ' ');
        org.joda.time.Interval interval35 = duration20.toIntervalTo((org.joda.time.ReadableInstant) dateMidnight34);
        java.time.DayOfWeek dayOfWeek36 = java.time.DayOfWeek.MONDAY;
        boolean boolean37 = interval35.equals((java.lang.Object) dayOfWeek36);
        boolean boolean38 = interval16.isBefore((org.joda.time.ReadableInterval) interval35);
        org.joda.time.Interval interval39 = interval9.overlap((org.joda.time.ReadableInterval) interval16);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime((long) 3, chronology41);
        org.joda.time.DateTime.Property property43 = dateTime42.dayOfYear();
        org.joda.time.Interval interval44 = property43.toInterval();
        org.joda.time.DateTime dateTime45 = interval44.getEnd();
        org.joda.time.ReadableInstant readableInstant46 = null;
        org.joda.time.ReadableInstant readableInstant47 = null;
        org.joda.time.Duration duration48 = new org.joda.time.Duration(readableInstant46, readableInstant47);
        org.joda.time.ReadableInstant readableInstant49 = null;
        org.joda.time.PeriodType periodType50 = null;
        org.joda.time.Period period51 = duration48.toPeriodTo(readableInstant49, periodType50);
        long long52 = duration48.getStandardSeconds();
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime((long) 3, chronology54);
        org.joda.time.DateTime.Property property56 = dateTime55.dayOfYear();
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.DateMidnight dateMidnight58 = new org.joda.time.DateMidnight((java.lang.Object) dateTime55, chronology57);
        org.joda.time.DateMidnight dateMidnight60 = dateMidnight58.minusMonths((-1));
        org.joda.time.DateMidnight dateMidnight62 = dateMidnight58.withDayOfYear((int) ' ');
        org.joda.time.Interval interval63 = duration48.toIntervalTo((org.joda.time.ReadableInstant) dateMidnight62);
        java.time.DayOfWeek dayOfWeek64 = java.time.DayOfWeek.MONDAY;
        boolean boolean65 = interval63.equals((java.lang.Object) dayOfWeek64);
        boolean boolean66 = interval44.isBefore((org.joda.time.ReadableInterval) interval63);
        boolean boolean67 = interval16.contains((org.joda.time.ReadableInterval) interval44);
        org.junit.Assert.assertNotNull(weeks0);
        org.junit.Assert.assertNotNull(timeUnit1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(mutablePeriod3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(interval9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(dateMidnight32);
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertTrue("'" + dayOfWeek36 + "' != '" + java.time.DayOfWeek.MONDAY + "'", dayOfWeek36.equals(java.time.DayOfWeek.MONDAY));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(interval39);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(interval44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(dateMidnight60);
        org.junit.Assert.assertNotNull(dateMidnight62);
        org.junit.Assert.assertNotNull(interval63);
        org.junit.Assert.assertTrue("'" + dayOfWeek64 + "' != '" + java.time.DayOfWeek.MONDAY + "'", dayOfWeek64.equals(java.time.DayOfWeek.MONDAY));
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
    }

    @Test
    public void test2235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2235");
        java.util.GregorianCalendar gregorianCalendar5 = new java.util.GregorianCalendar(12, 4096, 7, (-1), (int) (short) 10);
        int int6 = gregorianCalendar5.getWeeksInWeekYear();
        java.lang.String str7 = gregorianCalendar5.getCalendarType();
        java.time.ZonedDateTime zonedDateTime8 = gregorianCalendar5.toZonedDateTime();
        java.time.ZonedDateTime zonedDateTime10 = zonedDateTime8.minusMonths((long) 10);
        int int11 = zonedDateTime8.getMonthValue();
        java.time.LocalTime localTime16 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime17 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime16);
        java.time.LocalTime localTime22 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime23 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime22);
        java.time.temporal.ChronoField chronoField24 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime26 = localTime22.with((java.time.temporal.TemporalField) chronoField24, (long) (short) 1);
        long long27 = localTime16.getLong((java.time.temporal.TemporalField) chronoField24);
        long long28 = zonedDateTime8.getLong((java.time.temporal.TemporalField) chronoField24);
        java.time.ZoneOffset zoneOffset31 = java.time.ZoneOffset.ofHoursMinutes(1, 10);
        java.time.LocalDate localDate32 = java.time.LocalDate.now((java.time.ZoneId) zoneOffset31);
        java.time.LocalDate localDate33 = java.time.LocalDate.now((java.time.ZoneId) zoneOffset31);
        java.time.chrono.ChronoZonedDateTime<java.time.LocalDate> localDateChronoZonedDateTime34 = zonedDateTime8.withZoneSameLocal((java.time.ZoneId) zoneOffset31);
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime35 = localDateChronoZonedDateTime34.toLocalDateTime();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 52 + "'", int6 == 52);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "gregory" + "'", str7, "gregory");
        org.junit.Assert.assertNotNull(zonedDateTime8);
        org.junit.Assert.assertNotNull(zonedDateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 5 + "'", int11 == 5);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertTrue("'" + chronoField24 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField24.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime26);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 3601000000001L + "'", long27 == 3601000000001L);
// flaky:         org.junit.Assert.assertTrue("'" + long28 + "' != '" + 83399965000000L + "'", long28 == 83399965000000L);
        org.junit.Assert.assertNotNull(zoneOffset31);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertNotNull(localDateChronoZonedDateTime34);
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime35);
    }

    @Test
    public void test2236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2236");
        java.time.OffsetTime offsetTime0 = java.time.OffsetTime.MAX;
        java.time.LocalTime localTime1 = offsetTime0.toLocalTime();
        java.lang.String str2 = offsetTime0.toString();
        java.time.OffsetTime offsetTime3 = java.time.OffsetTime.MAX;
        java.time.LocalTime localTime4 = offsetTime3.toLocalTime();
        boolean boolean5 = offsetTime0.isBefore(offsetTime3);
        java.time.LocalTime localTime10 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime11 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime10);
        java.time.LocalTime localTime16 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime17 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime16);
        java.time.temporal.ChronoField chronoField18 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime20 = localTime16.with((java.time.temporal.TemporalField) chronoField18, (long) (short) 1);
        long long21 = localTime10.getLong((java.time.temporal.TemporalField) chronoField18);
        java.time.LocalTime localTime23 = localTime10.withSecond((int) (short) 1);
        int int24 = localTime23.getMinute();
        java.time.OffsetTime offsetTime25 = offsetTime3.with((java.time.temporal.TemporalAdjuster) localTime23);
        java.time.LocalDate localDate27 = java.time.LocalDate.ofEpochDay((long) ' ');
        java.time.OffsetTime offsetTime28 = java.time.OffsetTime.MAX;
        java.time.LocalTime localTime29 = offsetTime28.toLocalTime();
        java.lang.String str30 = offsetTime28.toString();
        java.time.Duration duration31 = java.time.Duration.ZERO;
        java.lang.String str32 = duration31.toString();
        java.time.OffsetTime offsetTime33 = offsetTime28.plus((java.time.temporal.TemporalAmount) duration31);
        java.time.LocalTime localTime34 = offsetTime28.toLocalTime();
        java.time.chrono.ChronoLocalDateTime<?> wildcardChronoLocalDateTime35 = localDate27.atTime(localTime34);
        java.time.LocalDate localDate37 = localDate27.minusWeeks((long) 2097);
        java.time.OffsetTime offsetTime38 = java.time.OffsetTime.MAX;
        java.time.LocalTime localTime39 = offsetTime38.toLocalTime();
        java.lang.String str40 = offsetTime38.toString();
        java.time.Duration duration41 = java.time.Duration.ZERO;
        java.lang.String str42 = duration41.toString();
        java.time.OffsetTime offsetTime43 = offsetTime38.plus((java.time.temporal.TemporalAmount) duration41);
        java.time.OffsetTime offsetTime45 = offsetTime38.plusNanos((long) 0);
        java.time.LocalTime localTime50 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime51 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime50);
        java.time.temporal.ChronoField chronoField52 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime54 = localTime50.with((java.time.temporal.TemporalField) chronoField52, (long) (short) 1);
        java.util.Locale locale55 = java.util.Locale.GERMANY;
        java.lang.String str56 = chronoField52.getDisplayName(locale55);
        java.time.OffsetTime offsetTime58 = offsetTime45.with((java.time.temporal.TemporalField) chronoField52, (long) 28);
        java.time.OffsetDateTime offsetDateTime59 = localDate37.atTime(offsetTime45);
        int int60 = localDate37.getYear();
        java.time.OffsetDateTime offsetDateTime61 = offsetTime25.atDate(localDate37);
        java.time.OffsetDateTime offsetDateTime63 = offsetDateTime61.withNano((int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            java.time.OffsetDateTime offsetDateTime65 = offsetDateTime61.minusWeeks(364740218880L);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for Year (valid values -999999999 - 999999999): -6990371678");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(offsetTime0);
        org.junit.Assert.assertNotNull(localTime1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "23:59:59.999999999-18:00" + "'", str2, "23:59:59.999999999-18:00");
        org.junit.Assert.assertNotNull(offsetTime3);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertTrue("'" + chronoField18 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField18.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 3601000000001L + "'", long21 == 3601000000001L);
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(offsetTime25);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(offsetTime28);
        org.junit.Assert.assertNotNull(localTime29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "23:59:59.999999999-18:00" + "'", str30, "23:59:59.999999999-18:00");
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "PT0S" + "'", str32, "PT0S");
        org.junit.Assert.assertNotNull(offsetTime33);
        org.junit.Assert.assertNotNull(localTime34);
        org.junit.Assert.assertNotNull(wildcardChronoLocalDateTime35);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertNotNull(offsetTime38);
        org.junit.Assert.assertNotNull(localTime39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "23:59:59.999999999-18:00" + "'", str40, "23:59:59.999999999-18:00");
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "PT0S" + "'", str42, "PT0S");
        org.junit.Assert.assertNotNull(offsetTime43);
        org.junit.Assert.assertNotNull(offsetTime45);
        org.junit.Assert.assertNotNull(localTime50);
        org.junit.Assert.assertNotNull(localTime51);
        org.junit.Assert.assertTrue("'" + chronoField52 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField52.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime54);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "NanoOfDay" + "'", str56, "NanoOfDay");
        org.junit.Assert.assertNotNull(offsetTime58);
        org.junit.Assert.assertNotNull(offsetDateTime59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1929 + "'", int60 == 1929);
        org.junit.Assert.assertNotNull(offsetDateTime61);
        org.junit.Assert.assertNotNull(offsetDateTime63);
    }

    @Test
    public void test2237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2237");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes2 = minutes0.minus(12);
        org.joda.time.Minutes minutes3 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes5 = minutes3.minus(12);
        org.joda.time.Minutes minutes6 = minutes0.minus(minutes3);
        org.joda.time.Minutes minutes7 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes9 = minutes7.minus(12);
        org.joda.time.Minutes minutes10 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes12 = minutes10.minus(12);
        org.joda.time.Minutes minutes13 = minutes7.minus(minutes10);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Minutes minutes14 = minutes0.plus(minutes10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: The calculation caused an overflow: 2147483647 + 2147483647");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes3);
        org.junit.Assert.assertNotNull(minutes5);
        org.junit.Assert.assertNotNull(minutes6);
        org.junit.Assert.assertNotNull(minutes7);
        org.junit.Assert.assertNotNull(minutes9);
        org.junit.Assert.assertNotNull(minutes10);
        org.junit.Assert.assertNotNull(minutes12);
        org.junit.Assert.assertNotNull(minutes13);
    }

    @Test
    public void test2238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2238");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((long) 0, chronology2);
        org.joda.time.Chronology chronology4 = localTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField5 = chronology4.weekyearOfCentury();
        org.joda.time.DurationField durationField6 = chronology4.weekyears();
        org.joda.time.DurationField durationField7 = chronology4.seconds();
        org.joda.time.LocalTime localTime8 = org.joda.time.LocalTime.fromMillisOfDay((long) (byte) 0, chronology4);
        org.joda.time.LocalTime.Property property9 = localTime8.millisOfSecond();
        org.joda.time.LocalTime localTime10 = property9.roundCeilingCopy();
        org.joda.time.LocalTime localTime11 = property9.withMinimumValue();
        int int12 = property9.getMaximumValueOverall();
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 999 + "'", int12 == 999);
    }

    @Test
    public void test2239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2239");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.yearOfCentury();
        int int3 = property2.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime5 = property2.addToCopy((int) ':');
        org.joda.time.LocalDateTime localDateTime6 = property2.roundHalfEvenCopy();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 99 + "'", int3 == 99);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
    }

    @Test
    public void test2240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2240");
        java.util.Locale locale3 = new java.util.Locale("ParseCaseSensitive(false)(Value(Year,4,10,EXCEEDS_PAD)'-'Value(MonthOfYear,2)'-'Value(DayOfMonth,2))[Offset(+HH:MM:ss,'Z')]", "UNDERFLOW", "Years");
        boolean boolean4 = locale3.hasExtensions();
        org.junit.Assert.assertEquals(locale3.toString(), "parsecasesensitive(false)(value(year,4,10,exceeds_pad)'-'value(monthofyear,2)'-'value(dayofmonth,2))[offset(+hh:mm:ss,'z')]_UNDERFLOW_Years");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test2241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2241");
        org.joda.time.Period period0 = org.joda.time.Period.ZERO;
        org.joda.time.Period period1 = period0.normalizedStandard();
        org.joda.time.Period period3 = period0.plusHours(2);
        java.time.chrono.IsoEra isoEra4 = java.time.chrono.IsoEra.CE;
        boolean boolean5 = period3.equals((java.lang.Object) isoEra4);
        java.time.LocalTime localTime10 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime11 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime10);
        java.time.LocalTime localTime16 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime17 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime16);
        java.time.temporal.ChronoField chronoField18 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime20 = localTime16.with((java.time.temporal.TemporalField) chronoField18, (long) (short) 1);
        long long21 = localTime10.getLong((java.time.temporal.TemporalField) chronoField18);
        boolean boolean22 = isoEra4.isSupported((java.time.temporal.TemporalField) chronoField18);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery23 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period24 = isoEra4.query(periodTemporalQuery23);
        boolean boolean25 = period24.isNegative();
        java.time.Period period27 = period24.plusDays((long) ' ');
        boolean boolean28 = period24.isNegative();
        java.time.Period period30 = period24.minusYears((long) 10);
        org.joda.time.Period period31 = org.joda.time.Period.ZERO;
        org.joda.time.Period period32 = period31.normalizedStandard();
        org.joda.time.Period period34 = period31.plusHours(2);
        java.time.chrono.IsoEra isoEra35 = java.time.chrono.IsoEra.CE;
        boolean boolean36 = period34.equals((java.lang.Object) isoEra35);
        java.time.LocalTime localTime41 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime42 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime41);
        java.time.LocalTime localTime47 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime48 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime47);
        java.time.temporal.ChronoField chronoField49 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime51 = localTime47.with((java.time.temporal.TemporalField) chronoField49, (long) (short) 1);
        long long52 = localTime41.getLong((java.time.temporal.TemporalField) chronoField49);
        boolean boolean53 = isoEra35.isSupported((java.time.temporal.TemporalField) chronoField49);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery54 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period55 = isoEra35.query(periodTemporalQuery54);
        java.time.chrono.ChronoPeriod chronoPeriod56 = period30.minus((java.time.temporal.TemporalAmount) period55);
        java.time.LocalDateTime localDateTime57 = java.time.LocalDateTime.now();
        java.time.temporal.ChronoField chronoField58 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime60 = localDateTime57.with((java.time.temporal.TemporalField) chronoField58, (long) 10);
        java.time.LocalDateTime localDateTime62 = localDateTime57.minusMinutes((long) 12);
        java.time.LocalDateTime localDateTime64 = localDateTime62.minusNanos((long) (byte) 1);
        java.time.temporal.Temporal temporal65 = chronoPeriod56.addTo((java.time.temporal.Temporal) localDateTime62);
        org.junit.Assert.assertNotNull(period0);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertTrue("'" + isoEra4 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra4.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertTrue("'" + chronoField18 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField18.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 3601000000001L + "'", long21 == 3601000000001L);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(periodTemporalQuery23);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertTrue("'" + isoEra35 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra35.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(localTime41);
        org.junit.Assert.assertNotNull(localTime42);
        org.junit.Assert.assertNotNull(localTime47);
        org.junit.Assert.assertNotNull(localTime48);
        org.junit.Assert.assertTrue("'" + chronoField49 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField49.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime51);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 3601000000001L + "'", long52 == 3601000000001L);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(periodTemporalQuery54);
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertNotNull(chronoPeriod56);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertTrue("'" + chronoField58 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField58.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime60);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertNotNull(temporal65);
    }

    @Test
    public void test2242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2242");
        java.nio.CharBuffer charBuffer1 = java.nio.CharBuffer.wrap((java.lang.CharSequence) "BIG_ENDIAN");
        // The following exception was thrown during execution in test generation
        try {
            char char3 = charBuffer1.get(1728000);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: 1728000");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charBuffer1);
    }

    @Test
    public void test2243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2243");
        java.time.Period period1 = java.time.Period.ofYears(28);
        java.time.Period period3 = java.time.Period.ofYears(28);
        java.time.Period period4 = period1.minus((java.time.temporal.TemporalAmount) period3);
        java.time.chrono.ChronoPeriod chronoPeriod5 = period1.negated();
        java.time.Duration duration7 = java.time.Duration.ofMinutes((long) 3);
        java.time.Duration duration8 = duration7.abs();
        int int9 = duration8.getNano();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.LocalTime localTime12 = new org.joda.time.LocalTime((long) 0, chronology11);
        org.joda.time.LocalTime localTime14 = localTime12.minusMillis(2022);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.monthOfYear();
        boolean boolean16 = localTime14.isSupported(dateTimeFieldType15);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.centuryOfEra();
        int int18 = localTime14.indexOf(dateTimeFieldType17);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.LocalTime localTime21 = new org.joda.time.LocalTime((long) 0, chronology20);
        org.joda.time.LocalTime localTime23 = localTime21.minusMillis(2022);
        org.joda.time.LocalTime localTime25 = localTime21.plusMillis((int) (byte) 0);
        org.joda.time.LocalTime localTime26 = localTime14.withFields((org.joda.time.ReadablePartial) localTime25);
        boolean boolean27 = duration8.equals((java.lang.Object) localTime26);
        // The following exception was thrown during execution in test generation
        try {
            java.time.chrono.ChronoPeriod chronoPeriod28 = chronoPeriod5.minus((java.time.temporal.TemporalAmount) duration8);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Unit must be Years, Months or Days, but was Seconds");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(chronoPeriod5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertNotNull(localTime26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test2244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2244");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 3, chronology1);
        org.joda.time.DateTime.Property property3 = dateTime2.dayOfYear();
        org.joda.time.Interval interval4 = property3.toInterval();
        org.joda.time.DateTimeField dateTimeField5 = property3.getField();
        org.joda.time.DateTime dateTime7 = property3.addToCopy((long) (byte) 1);
        org.joda.time.DateTime dateTime9 = dateTime7.withYear(4);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) 3, chronology11);
        org.joda.time.Period period13 = org.joda.time.Period.ZERO;
        org.joda.time.Period period14 = period13.normalizedStandard();
        org.joda.time.Period period16 = period14.minusMinutes((int) ' ');
        org.joda.time.Period period18 = period16.minusMonths((int) (byte) 0);
        org.joda.time.PeriodType periodType19 = period18.getPeriodType();
        org.joda.time.DateTime dateTime20 = dateTime12.minus((org.joda.time.ReadablePeriod) period18);
        org.joda.time.Duration duration21 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((long) 3, chronology23);
        org.joda.time.DateTime.Property property25 = dateTime24.dayOfYear();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight((java.lang.Object) dateTime24, chronology26);
        org.joda.time.MutableDateTime mutableDateTime28 = dateTime24.toMutableDateTime();
        mutableDateTime28.addYears((int) (short) 100);
        mutableDateTime28.setMillis((long) 21);
        org.joda.time.MutableDateTime.Property property33 = mutableDateTime28.weekOfWeekyear();
        org.joda.time.TimeOfDay timeOfDay35 = org.joda.time.TimeOfDay.fromMillisOfDay((long) (short) 0);
        org.joda.time.TimeOfDay timeOfDay37 = org.joda.time.TimeOfDay.fromMillisOfDay((long) (short) 0);
        org.joda.time.Hours hours38 = org.joda.time.Hours.hoursBetween((org.joda.time.ReadablePartial) timeOfDay35, (org.joda.time.ReadablePartial) timeOfDay37);
        org.joda.time.DurationFieldType durationFieldType39 = org.joda.time.DurationFieldType.hours();
        org.joda.time.TimeOfDay timeOfDay41 = timeOfDay37.withFieldAdded(durationFieldType39, (int) (byte) 0);
        org.joda.time.TimeOfDay timeOfDay43 = org.joda.time.TimeOfDay.fromMillisOfDay((long) (short) 0);
        org.joda.time.TimeOfDay timeOfDay45 = org.joda.time.TimeOfDay.fromMillisOfDay((long) (short) 0);
        org.joda.time.Hours hours46 = org.joda.time.Hours.hoursBetween((org.joda.time.ReadablePartial) timeOfDay43, (org.joda.time.ReadablePartial) timeOfDay45);
        org.joda.time.TimeOfDay timeOfDay48 = timeOfDay43.withSecondOfMinute(0);
        boolean boolean49 = timeOfDay41.isAfter((org.joda.time.ReadablePartial) timeOfDay48);
        org.joda.time.TimeOfDay timeOfDay51 = timeOfDay41.minusSeconds(32769);
        org.joda.time.DateTime dateTime52 = timeOfDay41.toDateTimeToday();
        boolean boolean53 = mutableDateTime28.isBefore((org.joda.time.ReadableInstant) dateTime52);
        org.joda.time.MutableInterval mutableInterval54 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration21, (org.joda.time.ReadableInstant) mutableDateTime28);
        org.joda.time.MutableInterval mutableInterval55 = mutableInterval54.copy();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(mutableDateTime28);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(timeOfDay35);
        org.junit.Assert.assertNotNull(timeOfDay37);
        org.junit.Assert.assertNotNull(hours38);
        org.junit.Assert.assertNotNull(durationFieldType39);
        org.junit.Assert.assertNotNull(timeOfDay41);
        org.junit.Assert.assertNotNull(timeOfDay43);
        org.junit.Assert.assertNotNull(timeOfDay45);
        org.junit.Assert.assertNotNull(hours46);
        org.junit.Assert.assertNotNull(timeOfDay48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(timeOfDay51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(mutableInterval55);
    }

    @Test
    public void test2245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2245");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 3, chronology1);
        org.joda.time.DateTime.Property property3 = dateTime2.dayOfYear();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight((java.lang.Object) dateTime2, chronology4);
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight5.minusMonths((-1));
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight5.withDayOfYear((int) ' ');
        org.joda.time.DateMidnight.Property property10 = dateMidnight9.monthOfYear();
        java.lang.String str11 = dateMidnight9.toString();
        int int12 = dateMidnight9.getYearOfCentury();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "1970-02-01T00:00:00.000Z" + "'", str11, "1970-02-01T00:00:00.000Z");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 70 + "'", int12 == 70);
    }

    @Test
    public void test2246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2246");
        org.joda.time.PeriodType periodType0 = org.joda.time.PeriodType.yearMonthDay();
        org.junit.Assert.assertNotNull(periodType0);
    }

    @Test
    public void test2247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2247");
        org.joda.time.TimeOfDay timeOfDay1 = org.joda.time.TimeOfDay.fromMillisOfDay((long) (short) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = timeOfDay1.getFieldType((int) (short) 0);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalTime localTime6 = new org.joda.time.LocalTime((long) 0, chronology5);
        org.joda.time.Chronology chronology7 = localTime6.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.weekyearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime9 = org.joda.time.MutableDateTime.now(chronology7);
        org.joda.time.TimeOfDay timeOfDay10 = timeOfDay1.withChronologyRetainFields(chronology7);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay12 = timeOfDay1.withMinuteOfHour((-39));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -39 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeOfDay1);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(timeOfDay10);
    }

    @Test
    public void test2248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2248");
        java.util.Hashtable<java.util.function.LongUnaryOperator, java.time.Period> longUnaryOperatorMap1 = new java.util.Hashtable<java.util.function.LongUnaryOperator, java.time.Period>(1097);
    }

    @Test
    public void test2249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2249");
        java.util.Calendar calendar0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay1 = org.joda.time.TimeOfDay.fromCalendarFields(calendar0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The calendar must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test2250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2250");
        java.util.GregorianCalendar gregorianCalendar5 = new java.util.GregorianCalendar(12, 4096, 7, (-1), (int) (short) 10);
        int int6 = gregorianCalendar5.getWeeksInWeekYear();
        java.lang.String str7 = gregorianCalendar5.getCalendarType();
        java.time.ZonedDateTime zonedDateTime8 = gregorianCalendar5.toZonedDateTime();
        java.util.Date date15 = new java.util.Date((int) 'a', 3, 0, (-1), (int) '/', 28);
        int int16 = date15.getTimezoneOffset();
        gregorianCalendar5.setGregorianChange(date15);
        java.util.GregorianCalendar gregorianCalendar23 = new java.util.GregorianCalendar(12, 4096, 7, (-1), (int) (short) 10);
        int int24 = gregorianCalendar23.getWeeksInWeekYear();
        java.lang.String str25 = gregorianCalendar23.getCalendarType();
        java.time.ZonedDateTime zonedDateTime26 = gregorianCalendar23.toZonedDateTime();
        java.util.Date date33 = new java.util.Date((int) 'a', 3, 0, (-1), (int) '/', 28);
        int int34 = date33.getTimezoneOffset();
        gregorianCalendar23.setGregorianChange(date33);
        boolean boolean36 = date15.after(date33);
        date15.setMinutes(679);
        int int39 = date15.getMonth();
        date15.setTime(6603384152749567654L);
        org.joda.time.YearMonthDay yearMonthDay42 = new org.joda.time.YearMonthDay();
        java.util.TimeZone timeZone45 = null;
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.forTimeZone(timeZone45);
        org.joda.time.DateMidnight dateMidnight47 = new org.joda.time.DateMidnight((long) 1970, dateTimeZone46);
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime((long) 3600000, dateTimeZone46);
        org.joda.time.DateMidnight dateMidnight49 = yearMonthDay42.toDateMidnight(dateTimeZone46);
        org.joda.time.LocalDate localDate50 = yearMonthDay42.toLocalDate();
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime((long) 3, chronology52);
        org.joda.time.DateTime.Property property54 = dateTime53.dayOfYear();
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime((long) 3, chronology56);
        org.joda.time.DateTime.Property property58 = dateTime57.dayOfYear();
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.DateMidnight dateMidnight60 = new org.joda.time.DateMidnight((java.lang.Object) dateTime57, chronology59);
        org.joda.time.DateMidnight dateMidnight62 = dateMidnight60.minusMonths((-1));
        org.joda.time.DateMidnight dateMidnight64 = dateMidnight60.withDayOfYear((int) ' ');
        int int65 = dateMidnight60.getWeekOfWeekyear();
        long long66 = property54.getDifferenceAsLong((org.joda.time.ReadableInstant) dateMidnight60);
        boolean boolean68 = dateMidnight60.isAfter(10L);
        boolean boolean69 = localDate50.equals((java.lang.Object) dateMidnight60);
        org.joda.time.Period period70 = org.joda.time.Period.ZERO;
        org.joda.time.Period period71 = period70.normalizedStandard();
        org.joda.time.Period period73 = period71.minusMinutes((int) ' ');
        org.joda.time.Period period75 = period73.minusMonths((int) (byte) 0);
        org.joda.time.LocalDate localDate76 = localDate50.plus((org.joda.time.ReadablePeriod) period75);
        org.joda.time.LocalDate.Property property77 = localDate76.era();
        java.util.Date date78 = localDate76.toDate();
        boolean boolean79 = date15.equals((java.lang.Object) date78);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 52 + "'", int6 == 52);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "gregory" + "'", str7, "gregory");
        org.junit.Assert.assertNotNull(zonedDateTime8);
        org.junit.Assert.assertEquals(date15.toString(), "Sat Sep 04 11:46:07 UTC 209254883");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 52 + "'", int24 == 52);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "gregory" + "'", str25, "gregory");
        org.junit.Assert.assertNotNull(zonedDateTime26);
        org.junit.Assert.assertEquals(date33.toString(), "Sun Mar 30 23:47:28 UTC 1997");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2 + "'", int39 == 2);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertNotNull(dateMidnight49);
        org.junit.Assert.assertNotNull(localDate50);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(dateMidnight62);
        org.junit.Assert.assertNotNull(dateMidnight64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 0L + "'", long66 == 0L);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(period70);
        org.junit.Assert.assertNotNull(period71);
        org.junit.Assert.assertNotNull(period73);
        org.junit.Assert.assertNotNull(period75);
        org.junit.Assert.assertNotNull(localDate76);
        org.junit.Assert.assertNotNull(property77);
        org.junit.Assert.assertNotNull(date78);
        org.junit.Assert.assertEquals(date78.toString(), "Mon Feb 21 00:00:00 UTC 2022");
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
    }

    @Test
    public void test2251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2251");
        java.time.Duration duration0 = java.time.Duration.ZERO;
        java.time.Duration duration2 = duration0.minusHours((long) 8);
        java.time.Duration duration4 = duration0.minusDays((long) 17);
        java.time.Duration duration6 = duration0.plusDays((long) 32769);
        boolean boolean7 = duration0.isNegative();
        org.junit.Assert.assertNotNull(duration0);
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test2252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2252");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.nio.LongBuffer longBuffer3 = java.nio.LongBuffer.allocate((int) (short) 0);
        java.nio.Buffer buffer4 = longBuffer3.mark();
        boolean boolean5 = properties1.containsKey((java.lang.Object) longBuffer3);
        long[] longArray6 = longBuffer3.array();
        java.nio.LongBuffer longBuffer7 = longBuffer3.duplicate();
        java.nio.Buffer buffer8 = longBuffer7.flip();
        java.nio.LongBuffer longBuffer9 = longBuffer7.duplicate();
        org.junit.Assert.assertNotNull(longBuffer3);
        org.junit.Assert.assertNotNull(buffer4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[]");
        org.junit.Assert.assertNotNull(longBuffer7);
        org.junit.Assert.assertNotNull(buffer8);
        org.junit.Assert.assertNotNull(longBuffer9);
    }

    @Test
    public void test2253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2253");
        java.util.Calendar calendar0 = java.util.Calendar.getInstance();
        calendar0.roll((int) (short) 1, 7);
        calendar0.setTimeInMillis((long) '-');
        org.junit.Assert.assertNotNull(calendar0);
// flaky:         org.junit.Assert.assertEquals(calendar0.toString(), "java.util.GregorianCalendar[time=45,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=35,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=80,ZONE_OFFSET=35,DST_OFFSET=0]");
    }

    @Test
    public void test2254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2254");
        java.util.GregorianCalendar gregorianCalendar5 = new java.util.GregorianCalendar(12, 4096, 7, (-1), (int) (short) 10);
        int int6 = gregorianCalendar5.getWeeksInWeekYear();
        java.util.Date date7 = new java.util.Date();
        org.joda.time.LocalTime localTime8 = org.joda.time.LocalTime.fromDateFields(date7);
        gregorianCalendar5.setGregorianChange(date7);
        date7.setHours(22);
        int int12 = date7.getSeconds();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 52 + "'", int6 == 52);
// flaky:         org.junit.Assert.assertEquals(date7.toString(), "Mon Feb 21 22:37:33 UTC 2022");
        org.junit.Assert.assertNotNull(localTime8);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 33 + "'", int12 == 33);
    }

    @Test
    public void test2255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2255");
        java.time.DayOfWeek dayOfWeek0 = java.time.DayOfWeek.WEDNESDAY;
        int int1 = dayOfWeek0.getValue();
        // The following exception was thrown during execution in test generation
        try {
            java.time.LocalDate localDate2 = java.time.LocalDate.from((java.time.temporal.TemporalAccessor) dayOfWeek0);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Unable to obtain LocalDate from TemporalAccessor: WEDNESDAY of type java.time.DayOfWeek");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + dayOfWeek0 + "' != '" + java.time.DayOfWeek.WEDNESDAY + "'", dayOfWeek0.equals(java.time.DayOfWeek.WEDNESDAY));
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 3 + "'", int1 == 3);
    }

    @Test
    public void test2256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2256");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) 3, chronology2);
        org.joda.time.DateTime.Property property4 = dateTime3.dayOfYear();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight((java.lang.Object) dateTime3, chronology5);
        org.joda.time.MutableDateTime mutableDateTime7 = dateTime3.toMutableDateTime();
        mutableDateTime7.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime7.dayOfWeek();
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime7.year();
        java.util.TimeZone timeZone12 = null;
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forTimeZone(timeZone12);
        mutableDateTime7.setZone(dateTimeZone13);
        java.util.TimeZone timeZone15 = dateTimeZone13.toTimeZone();
        mutableDateTime0.setZone(dateTimeZone13);
        int int17 = mutableDateTime0.getDayOfMonth();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime0.setWeekOfWeekyear((int) (short) 0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(timeZone15);
        org.junit.Assert.assertEquals(timeZone15.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 21 + "'", int17 == 21);
    }

    @Test
    public void test2257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2257");
        java.time.Period period1 = java.time.Period.ofYears(28);
        java.time.chrono.IsoChronology isoChronology2 = period1.getChronology();
        java.util.List<java.time.chrono.Era> eraList3 = isoChronology2.eras();
        java.util.Properties properties4 = null;
        java.util.Properties properties5 = new java.util.Properties(properties4);
        java.time.LocalTime localTime10 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime11 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime10);
        java.time.LocalTime localTime16 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime17 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime16);
        java.time.temporal.ChronoField chronoField18 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime20 = localTime16.with((java.time.temporal.TemporalField) chronoField18, (long) (short) 1);
        long long21 = localTime10.getLong((java.time.temporal.TemporalField) chronoField18);
        java.time.LocalTime localTime23 = localTime10.withSecond((int) (short) 1);
        java.lang.Object obj25 = properties5.put((java.lang.Object) localTime23, (java.lang.Object) "117");
        boolean boolean27 = properties5.containsValue((java.lang.Object) 6);
        java.time.LocalDate localDate30 = java.time.LocalDate.ofEpochDay((long) ' ');
        int int31 = localDate30.getMonthValue();
        java.lang.Object obj32 = properties5.replace((java.lang.Object) 21, (java.lang.Object) localDate30);
        java.time.LocalDateTime localDateTime33 = java.time.LocalDateTime.MIN;
        java.time.Month month34 = java.time.Month.NOVEMBER;
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime35 = localDateTime33.with((java.time.temporal.TemporalAdjuster) month34);
        java.time.LocalDate localDate38 = java.time.LocalDate.ofEpochDay((long) ' ');
        int int39 = localDate38.getMonthValue();
        org.joda.time.Period period40 = org.joda.time.Period.ZERO;
        org.joda.time.Period period41 = period40.normalizedStandard();
        org.joda.time.Period period43 = period40.plusHours(2);
        java.time.chrono.IsoEra isoEra44 = java.time.chrono.IsoEra.CE;
        boolean boolean45 = period43.equals((java.lang.Object) isoEra44);
        java.time.LocalTime localTime50 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime51 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime50);
        java.time.LocalTime localTime56 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime57 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime56);
        java.time.temporal.ChronoField chronoField58 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime60 = localTime56.with((java.time.temporal.TemporalField) chronoField58, (long) (short) 1);
        long long61 = localTime50.getLong((java.time.temporal.TemporalField) chronoField58);
        boolean boolean62 = isoEra44.isSupported((java.time.temporal.TemporalField) chronoField58);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery63 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period64 = isoEra44.query(periodTemporalQuery63);
        boolean boolean65 = period64.isNegative();
        java.time.Period period67 = period64.plusDays((long) ' ');
        java.time.temporal.ChronoField chronoField68 = java.time.temporal.ChronoField.SECOND_OF_DAY;
        boolean boolean69 = period64.equals((java.lang.Object) chronoField68);
        boolean boolean70 = localDate38.isSupported((java.time.temporal.TemporalField) chronoField68);
        java.time.temporal.TemporalUnit temporalUnit71 = chronoField68.getRangeUnit();
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime72 = localDateChronoLocalDateTime35.plus(1L, temporalUnit71);
        boolean boolean73 = localDate30.isSupported(temporalUnit71);
        java.time.Duration duration74 = java.time.Duration.ZERO;
        java.time.Duration duration76 = duration74.minusHours((long) 8);
        java.time.Duration duration78 = duration74.minusDays((long) 17);
        java.time.LocalDate localDate79 = localDate30.plus((java.time.temporal.TemporalAmount) duration74);
        java.time.chrono.Era era80 = localDate30.getEra();
        // The following exception was thrown during execution in test generation
        try {
            java.time.chrono.ChronoLocalDate chronoLocalDate84 = isoChronology2.date(era80, (int) (short) 1, 3, (-32769));
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for DayOfMonth (valid values 1 - 28/31): -32769");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(isoChronology2);
        org.junit.Assert.assertNotNull(eraList3);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertTrue("'" + chronoField18 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField18.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 3601000000001L + "'", long21 == 3601000000001L);
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertNull(obj25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2 + "'", int31 == 2);
        org.junit.Assert.assertNull(obj32);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertTrue("'" + month34 + "' != '" + java.time.Month.NOVEMBER + "'", month34.equals(java.time.Month.NOVEMBER));
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime35);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2 + "'", int39 == 2);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertTrue("'" + isoEra44 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra44.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(localTime50);
        org.junit.Assert.assertNotNull(localTime51);
        org.junit.Assert.assertNotNull(localTime56);
        org.junit.Assert.assertNotNull(localTime57);
        org.junit.Assert.assertTrue("'" + chronoField58 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField58.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime60);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 3601000000001L + "'", long61 == 3601000000001L);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(periodTemporalQuery63);
        org.junit.Assert.assertNotNull(period64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(period67);
        org.junit.Assert.assertTrue("'" + chronoField68 + "' != '" + java.time.temporal.ChronoField.SECOND_OF_DAY + "'", chronoField68.equals(java.time.temporal.ChronoField.SECOND_OF_DAY));
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + temporalUnit71 + "' != '" + java.time.temporal.ChronoUnit.DAYS + "'", temporalUnit71.equals(java.time.temporal.ChronoUnit.DAYS));
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(duration74);
        org.junit.Assert.assertNotNull(duration76);
        org.junit.Assert.assertNotNull(duration78);
        org.junit.Assert.assertNotNull(localDate79);
        org.junit.Assert.assertTrue("'" + era80 + "' != '" + java.time.chrono.IsoEra.CE + "'", era80.equals(java.time.chrono.IsoEra.CE));
    }

    @Test
    public void test2258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2258");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 3, chronology1);
        org.joda.time.DateTime.Property property3 = dateTime2.dayOfYear();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight((java.lang.Object) dateTime2, chronology4);
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight5.minusMonths((-1));
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight5.withDayOfYear((int) ' ');
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight9.minusMonths(1024);
        org.joda.time.DateMidnight.Property property12 = dateMidnight11.year();
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight11.minusMonths(7);
        org.joda.time.DateMidnight.Property property15 = dateMidnight14.centuryOfEra();
        org.joda.time.DateMidnight.Property property16 = dateMidnight14.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField17 = property16.getField();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.LocalTime localTime21 = new org.joda.time.LocalTime((long) 0, chronology20);
        org.joda.time.Chronology chronology22 = localTime21.getChronology();
        java.util.Locale locale23 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale24 = java.util.Locale.GERMANY;
        java.lang.String str25 = locale23.getDisplayScript(locale24);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket27 = new org.joda.time.format.DateTimeParserBucket((long) 1970, chronology22, locale23, (java.lang.Integer) 1);
        org.joda.time.DateTimeField dateTimeField28 = chronology22.clockhourOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight29 = new org.joda.time.DateMidnight((java.lang.Object) property16, chronology22);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: org.joda.time.DateMidnight$Property");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(dateTimeField28);
    }

    @Test
    public void test2259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2259");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        int int1 = localDate0.getCenturyOfEra();
        org.joda.time.LocalDate.Property property2 = localDate0.dayOfWeek();
        org.joda.time.LocalDate localDate4 = property2.addToCopy(2097);
        org.joda.time.Minutes minutes5 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes7 = minutes5.minus(12);
        org.joda.time.Minutes minutes8 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes10 = minutes8.minus(12);
        org.joda.time.Minutes minutes11 = minutes5.minus(minutes8);
        org.joda.time.DurationFieldType durationFieldType12 = minutes5.getFieldType();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate14 = localDate4.withFieldAdded(durationFieldType12, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'minutes' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 20 + "'", int1 == 20);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(minutes5);
        org.junit.Assert.assertNotNull(minutes7);
        org.junit.Assert.assertNotNull(minutes8);
        org.junit.Assert.assertNotNull(minutes10);
        org.junit.Assert.assertNotNull(minutes11);
        org.junit.Assert.assertNotNull(durationFieldType12);
    }

    @Test
    public void test2260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2260");
        java.util.stream.DoubleStream doubleStream1 = java.util.stream.DoubleStream.of((double) 1024);
        java.util.stream.DoubleStream doubleStream2 = doubleStream1.sorted();
        java.util.OptionalDouble optionalDouble3 = doubleStream2.findFirst();
        java.util.function.DoublePredicate doublePredicate4 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean5 = doubleStream2.noneMatch(doublePredicate4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleStream1);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertNotNull(optionalDouble3);
    }

    @Test
    public void test2261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2261");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((long) 0, chronology1);
        org.joda.time.Chronology chronology3 = localTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField4 = chronology3.weekyearOfCentury();
        long long6 = dateTimeField4.roundHalfEven((long) 16);
        java.util.Locale locale9 = new java.util.Locale("Subject:\n", "German");
        int int10 = dateTimeField4.getMaximumTextLength(locale9);
        int int12 = dateTimeField4.getMinimumValue((long) 3);
        int int13 = dateTimeField4.getMaximumValue();
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertEquals(locale9.toString(), "subject:\n_GERMAN");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 99 + "'", int13 == 99);
    }

    @Test
    public void test2262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2262");
        org.joda.time.Period period0 = org.joda.time.Period.ZERO;
        org.joda.time.Period period1 = period0.normalizedStandard();
        org.joda.time.Period period3 = period0.plusHours(2);
        java.time.chrono.IsoEra isoEra4 = java.time.chrono.IsoEra.CE;
        boolean boolean5 = period3.equals((java.lang.Object) isoEra4);
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofHoursMinutes(1, 10);
        java.time.temporal.ChronoField chronoField9 = java.time.temporal.ChronoField.HOUR_OF_DAY;
        java.time.temporal.ValueRange valueRange10 = chronoField9.range();
        boolean boolean11 = zoneOffset8.isSupported((java.time.temporal.TemporalField) chronoField9);
        int int13 = chronoField9.checkValidIntValue((long) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            long long14 = isoEra4.getLong((java.time.temporal.TemporalField) chronoField9);
            org.junit.Assert.fail("Expected exception of type java.time.temporal.UnsupportedTemporalTypeException; message: Unsupported field: HourOfDay");
        } catch (java.time.temporal.UnsupportedTemporalTypeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period0);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertTrue("'" + isoEra4 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra4.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertTrue("'" + chronoField9 + "' != '" + java.time.temporal.ChronoField.HOUR_OF_DAY + "'", chronoField9.equals(java.time.temporal.ChronoField.HOUR_OF_DAY));
        org.junit.Assert.assertNotNull(valueRange10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 10 + "'", int13 == 10);
    }

    @Test
    public void test2263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2263");
        org.joda.time.YearMonthDay yearMonthDay0 = new org.joda.time.YearMonthDay();
        java.util.TimeZone timeZone3 = null;
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight((long) 1970, dateTimeZone4);
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((long) 3600000, dateTimeZone4);
        org.joda.time.DateMidnight dateMidnight7 = yearMonthDay0.toDateMidnight(dateTimeZone4);
        java.io.File file8 = null;
        java.io.File file10 = new java.io.File(file8, "1970-01-01T00:00:00.003Z");
        java.net.URL uRL11 = file10.toURL();
        java.io.File file12 = null;
        java.io.File file14 = new java.io.File(file12, "1970-01-01T00:00:00.003Z");
        java.net.URL uRL15 = file14.toURL();
        boolean boolean16 = uRL11.sameFile(uRL15);
        boolean boolean17 = dateTimeZone4.equals((java.lang.Object) uRL11);
        java.net.URLConnection uRLConnection18 = uRL11.openConnection();
        uRLConnection18.setAllowUserInteraction(true);
        long long21 = uRLConnection18.getContentLengthLong();
        int int22 = uRLConnection18.getContentLength();
        // The following exception was thrown during execution in test generation
        try {
            uRLConnection18.setDoOutput(false);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Already connected");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNull("file10.getParent() == null", file10.getParent());
        org.junit.Assert.assertEquals(file10.toString(), "1970-01-01T00:00:00.003Z");
        org.junit.Assert.assertNotNull(uRL11);
// flaky:         org.junit.Assert.assertEquals(uRL11.toString(), "file:/experiment/1970-01-01T00:00:00.003Z/");
        org.junit.Assert.assertNull("file14.getParent() == null", file14.getParent());
        org.junit.Assert.assertEquals(file14.toString(), "1970-01-01T00:00:00.003Z");
        org.junit.Assert.assertNotNull(uRL15);
// flaky:         org.junit.Assert.assertEquals(uRL15.toString(), "file:/experiment/1970-01-01T00:00:00.003Z/");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(uRLConnection18);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 4096L + "'", long21 == 4096L);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 4096 + "'", int22 == 4096);
    }

    @Test
    public void test2264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2264");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Locale locale3 = java.util.Locale.JAPAN;
        java.util.Locale[] localeArray4 = new java.util.Locale[] { locale3 };
        java.util.ArrayList<java.util.Locale> localeList5 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList5, localeArray4);
        java.util.List<java.util.Locale> localeList7 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList5);
        org.joda.time.Period period8 = org.joda.time.Period.ZERO;
        org.joda.time.Period period9 = period8.normalizedStandard();
        org.joda.time.Period period11 = period8.plusHours(2);
        java.time.chrono.IsoEra isoEra12 = java.time.chrono.IsoEra.CE;
        boolean boolean13 = period11.equals((java.lang.Object) isoEra12);
        java.time.LocalTime localTime18 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime19 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime18);
        java.time.LocalTime localTime24 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime25 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime24);
        java.time.temporal.ChronoField chronoField26 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime28 = localTime24.with((java.time.temporal.TemporalField) chronoField26, (long) (short) 1);
        long long29 = localTime18.getLong((java.time.temporal.TemporalField) chronoField26);
        boolean boolean30 = isoEra12.isSupported((java.time.temporal.TemporalField) chronoField26);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery31 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period32 = isoEra12.query(periodTemporalQuery31);
        boolean boolean33 = period32.isNegative();
        java.time.Period period35 = period32.plusDays((long) ' ');
        boolean boolean36 = period32.isNegative();
        java.time.Period period38 = period32.minusYears((long) 10);
        int int39 = localeList7.lastIndexOf((java.lang.Object) period32);
        java.util.Iterator<java.util.Locale> localeItor40 = localeList7.iterator();
        java.util.Set<java.lang.String> strSet41 = java.time.ZoneId.getAvailableZoneIds();
        java.util.stream.Stream<java.lang.String> strStream42 = strSet41.parallelStream();
        boolean boolean44 = strSet41.remove((java.lang.Object) 0);
        boolean boolean45 = localeList7.retainAll((java.util.Collection<java.lang.String>) strSet41);
        int int46 = localeList7.size();
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(localeArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(localeList7);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertTrue("'" + isoEra12 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra12.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertNotNull(localTime24);
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertTrue("'" + chronoField26 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField26.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime28);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 3601000000001L + "'", long29 == 3601000000001L);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(periodTemporalQuery31);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertNotNull(localeItor40);
        org.junit.Assert.assertNotNull(strSet41);
        org.junit.Assert.assertNotNull(strStream42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
    }

    @Test
    public void test2265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2265");
        org.joda.time.Days days0 = org.joda.time.Days.ZERO;
        org.joda.time.Days days2 = days0.dividedBy(4096);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) 3, chronology4);
        org.joda.time.DateTime.Property property6 = dateTime5.dayOfYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateMidnight dateMidnight8 = new org.joda.time.DateMidnight((java.lang.Object) dateTime5, chronology7);
        org.joda.time.MutableDateTime mutableDateTime9 = dateTime5.toMutableDateTime();
        org.joda.time.Days days10 = org.joda.time.Days.ONE;
        org.joda.time.MutableInterval mutableInterval11 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime5, (org.joda.time.ReadablePeriod) days10);
        org.joda.time.Days days13 = days10.dividedBy(34482);
        org.joda.time.Days days14 = days2.plus(days10);
        java.lang.String str15 = days14.toString();
        org.junit.Assert.assertNotNull(days0);
        org.junit.Assert.assertNotNull(days2);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(days10);
        org.junit.Assert.assertNotNull(days13);
        org.junit.Assert.assertNotNull(days14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "P1D" + "'", str15, "P1D");
    }

    @Test
    public void test2266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2266");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 3, chronology1);
        org.joda.time.DateTime.Property property3 = dateTime2.dayOfYear();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight((java.lang.Object) dateTime2, chronology4);
        org.joda.time.DateMidnight.Property property6 = dateMidnight5.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight7 = property6.roundCeilingCopy();
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight7.withMillis(364740218880L);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(chronology10);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.withYearOfCentury((int) 'a');
        int int14 = localDateTime13.getDayOfMonth();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime13.plusYears((int) (short) 100);
        int int17 = localDateTime13.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime13.minusYears(64);
        org.joda.time.DateMidnight dateMidnight20 = dateMidnight9.withFields((org.joda.time.ReadablePartial) localDateTime13);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 21 + "'", int14 == 21);
        org.junit.Assert.assertNotNull(localDateTime16);
// flaky:         org.junit.Assert.assertTrue("'" + int17 + "' != '" + 34 + "'", int17 == 34);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(dateMidnight20);
    }

    @Test
    public void test2267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2267");
        java.nio.charset.Charset charset0 = java.nio.charset.Charset.defaultCharset();
        java.nio.charset.CharsetDecoder charsetDecoder1 = charset0.newDecoder();
        java.nio.charset.Charset charset2 = java.nio.charset.Charset.defaultCharset();
        java.nio.charset.CharsetDecoder charsetDecoder3 = charset2.newDecoder();
        java.nio.charset.Charset charset4 = java.nio.charset.Charset.defaultCharset();
        boolean boolean5 = charset2.contains(charset4);
        int int6 = charset0.compareTo(charset2);
        java.util.Locale locale9 = new java.util.Locale("PT0S", "2022-02-21T09:34:06.670Z");
        java.lang.String str10 = charset2.displayName(locale9);
        java.lang.String str11 = charset2.displayName();
        boolean boolean12 = charset2.isRegistered();
        org.junit.Assert.assertNotNull(charset0);
        org.junit.Assert.assertNotNull(charsetDecoder1);
        org.junit.Assert.assertNotNull(charset2);
        org.junit.Assert.assertNotNull(charsetDecoder3);
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertEquals(locale9.toString(), "pt0s_2022-02-21T09:34:06.670Z");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "US-ASCII" + "'", str10, "US-ASCII");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "US-ASCII" + "'", str11, "US-ASCII");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test2268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2268");
        java.util.LongSummaryStatistics longSummaryStatistics0 = new java.util.LongSummaryStatistics();
        longSummaryStatistics0.accept(3);
        long long3 = longSummaryStatistics0.getMax();
        java.util.LongSummaryStatistics longSummaryStatistics4 = new java.util.LongSummaryStatistics();
        longSummaryStatistics4.accept(3);
        java.util.function.LongConsumer longConsumer7 = longSummaryStatistics0.andThen((java.util.function.LongConsumer) longSummaryStatistics4);
        java.util.LongSummaryStatistics longSummaryStatistics8 = new java.util.LongSummaryStatistics();
        longSummaryStatistics8.accept(3);
        long long11 = longSummaryStatistics8.getMax();
        double double12 = longSummaryStatistics8.getAverage();
        longSummaryStatistics8.accept(6);
        java.util.function.LongConsumer longConsumer15 = longSummaryStatistics0.andThen((java.util.function.LongConsumer) longSummaryStatistics8);
        double double16 = longSummaryStatistics0.getAverage();
        java.util.LongSummaryStatistics longSummaryStatistics17 = new java.util.LongSummaryStatistics();
        longSummaryStatistics17.accept(3);
        java.util.function.LongConsumer longConsumer20 = longSummaryStatistics0.andThen((java.util.function.LongConsumer) longSummaryStatistics17);
        long long21 = longSummaryStatistics0.getMin();
        org.junit.Assert.assertEquals(longSummaryStatistics0.toString(), "LongSummaryStatistics{count=1, sum=3, min=3, average=3.000000, max=3}");
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 3L + "'", long3 == 3L);
        org.junit.Assert.assertEquals(longSummaryStatistics4.toString(), "LongSummaryStatistics{count=1, sum=3, min=3, average=3.000000, max=3}");
        org.junit.Assert.assertNotNull(longConsumer7);
        org.junit.Assert.assertEquals(longSummaryStatistics8.toString(), "LongSummaryStatistics{count=2, sum=9, min=3, average=4.500000, max=6}");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 3L + "'", long11 == 3L);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 3.0d + "'", double12 == 3.0d);
        org.junit.Assert.assertNotNull(longConsumer15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 3.0d + "'", double16 == 3.0d);
        org.junit.Assert.assertEquals(longSummaryStatistics17.toString(), "LongSummaryStatistics{count=1, sum=3, min=3, average=3.000000, max=3}");
        org.junit.Assert.assertNotNull(longConsumer20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 3L + "'", long21 == 3L);
    }

    @Test
    public void test2269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2269");
        org.joda.time.Period period1 = org.joda.time.Period.years(2);
        org.junit.Assert.assertNotNull(period1);
    }

    @Test
    public void test2270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2270");
        org.joda.time.Period period0 = org.joda.time.Period.ZERO;
        org.joda.time.TimeOfDay timeOfDay2 = org.joda.time.TimeOfDay.fromMillisOfDay((long) (short) 0);
        org.joda.time.TimeOfDay timeOfDay4 = org.joda.time.TimeOfDay.fromMillisOfDay((long) (short) 0);
        org.joda.time.Hours hours5 = org.joda.time.Hours.hoursBetween((org.joda.time.ReadablePartial) timeOfDay2, (org.joda.time.ReadablePartial) timeOfDay4);
        org.joda.time.DurationFieldType durationFieldType6 = org.joda.time.DurationFieldType.hours();
        org.joda.time.TimeOfDay timeOfDay8 = timeOfDay4.withFieldAdded(durationFieldType6, (int) (byte) 0);
        org.joda.time.Period period10 = period0.withFieldAdded(durationFieldType6, 4);
        // The following exception was thrown during execution in test generation
        try {
            int int12 = period10.getValue(733000000);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 733000000");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period0);
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(hours5);
        org.junit.Assert.assertNotNull(durationFieldType6);
        org.junit.Assert.assertNotNull(timeOfDay8);
        org.junit.Assert.assertNotNull(period10);
    }

    @Test
    public void test2271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2271");
        org.joda.time.MutableDateTime mutableDateTime3 = org.joda.time.MutableDateTime.now();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((long) 3, chronology5);
        org.joda.time.DateTime.Property property7 = dateTime6.dayOfYear();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight((java.lang.Object) dateTime6, chronology8);
        org.joda.time.MutableDateTime mutableDateTime10 = dateTime6.toMutableDateTime();
        mutableDateTime10.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime10.dayOfWeek();
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime10.year();
        java.util.TimeZone timeZone15 = null;
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forTimeZone(timeZone15);
        mutableDateTime10.setZone(dateTimeZone16);
        java.util.TimeZone timeZone18 = dateTimeZone16.toTimeZone();
        mutableDateTime3.setZone(dateTimeZone16);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight(46, 3, (int) '+', dateTimeZone16);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 43 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(timeZone18);
        org.junit.Assert.assertEquals(timeZone18.getDisplayName(), "Coordinated Universal Time");
    }

    @Test
    public void test2272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2272");
        double[] doubleArray4 = new double[] { (byte) 0, 59, 83400000000000L, '4' };
        java.util.stream.DoubleStream doubleStream5 = java.util.stream.DoubleStream.of(doubleArray4);
        java.nio.DoubleBuffer doubleBuffer6 = java.nio.DoubleBuffer.wrap(doubleArray4);
        double[] doubleArray11 = new double[] { (byte) 0, 59, 83400000000000L, '4' };
        java.util.stream.DoubleStream doubleStream12 = java.util.stream.DoubleStream.of(doubleArray11);
        java.nio.DoubleBuffer doubleBuffer13 = java.nio.DoubleBuffer.wrap(doubleArray11);
        java.nio.DoubleBuffer doubleBuffer14 = doubleBuffer6.put(doubleBuffer13);
        boolean boolean15 = doubleBuffer6.isDirect();
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[0.0, 59.0, 8.34E13, 52.0]");
        org.junit.Assert.assertNotNull(doubleStream5);
        org.junit.Assert.assertNotNull(doubleBuffer6);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0, 59.0, 8.34E13, 52.0]");
        org.junit.Assert.assertNotNull(doubleStream12);
        org.junit.Assert.assertNotNull(doubleBuffer13);
        org.junit.Assert.assertNotNull(doubleBuffer14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test2273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2273");
        java.util.Date date6 = new java.util.Date(16384, 679, 0, 32770, 97, (int) ' ');
        int int7 = date6.getSeconds();
        java.util.GregorianCalendar gregorianCalendar13 = new java.util.GregorianCalendar(12, 4096, 7, (-1), (int) (short) 10);
        int int14 = gregorianCalendar13.getMinimalDaysInFirstWeek();
        java.time.Instant instant15 = gregorianCalendar13.toInstant();
        org.joda.time.LocalDateTime localDateTime16 = org.joda.time.LocalDateTime.fromCalendarFields((java.util.Calendar) gregorianCalendar13);
        java.util.Date date17 = gregorianCalendar13.getGregorianChange();
        int int18 = date6.compareTo(date17);
        org.junit.Assert.assertEquals(date6.toString(), "Wed Apr 26 11:37:32 UTC 18344");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 32 + "'", int7 == 32);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(instant15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Fri Oct 15 00:00:00 UTC 1582");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
    }

    @Test
    public void test2274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2274");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 3, chronology1);
        org.joda.time.DateTime.Property property3 = dateTime2.dayOfYear();
        org.joda.time.Interval interval4 = property3.toInterval();
        org.joda.time.DateTimeField dateTimeField5 = property3.getField();
        int int6 = dateTimeField5.getMaximumValue();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate();
        org.joda.time.Interval interval8 = localDate7.toInterval();
        int int9 = localDate7.getDayOfYear();
        java.util.TimeZone timeZone13 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone13);
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight((long) 1970, dateTimeZone14);
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) 3600000, dateTimeZone14);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) 22, dateTimeZone14);
        org.joda.time.Interval interval18 = localDate7.toInterval(dateTimeZone14);
        org.joda.time.TimeOfDay timeOfDay21 = org.joda.time.TimeOfDay.fromMillisOfDay((long) (short) 0);
        org.joda.time.TimeOfDay timeOfDay23 = org.joda.time.TimeOfDay.fromMillisOfDay((long) (short) 0);
        org.joda.time.Hours hours24 = org.joda.time.Hours.hoursBetween((org.joda.time.ReadablePartial) timeOfDay21, (org.joda.time.ReadablePartial) timeOfDay23);
        org.joda.time.TimeOfDay timeOfDay26 = timeOfDay21.withSecondOfMinute(0);
        int int27 = timeOfDay21.size();
        int[] intArray28 = timeOfDay21.getValues();
        java.util.Locale locale30 = java.util.Locale.CHINA;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray31 = dateTimeField5.set((org.joda.time.ReadablePartial) localDate7, (int) (short) 10, intArray28, "P1WT97H0.035S", locale30);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"P1WT97H0.035S\" for dayOfYear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 366 + "'", int6 == 366);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 52 + "'", int9 == 52);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(timeOfDay21);
        org.junit.Assert.assertNotNull(timeOfDay23);
        org.junit.Assert.assertNotNull(hours24);
        org.junit.Assert.assertNotNull(timeOfDay26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 4 + "'", int27 == 4);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "zh_CN");
    }

    @Test
    public void test2275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2275");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 3, chronology1);
        org.joda.time.DateTime.Property property3 = dateTime2.dayOfYear();
        org.joda.time.Interval interval4 = property3.toInterval();
        org.joda.time.DateTimeField dateTimeField5 = property3.getField();
        org.joda.time.DateTime dateTime7 = property3.addToCopy((long) (byte) 1);
        org.joda.time.DateTime dateTime9 = dateTime7.withYear(4);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) 3, chronology11);
        org.joda.time.Period period13 = org.joda.time.Period.ZERO;
        org.joda.time.Period period14 = period13.normalizedStandard();
        org.joda.time.Period period16 = period14.minusMinutes((int) ' ');
        org.joda.time.Period period18 = period16.minusMonths((int) (byte) 0);
        org.joda.time.PeriodType periodType19 = period18.getPeriodType();
        org.joda.time.DateTime dateTime20 = dateTime12.minus((org.joda.time.ReadablePeriod) period18);
        org.joda.time.Duration duration21 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.DateTime dateTime23 = dateTime20.plusMonths((int) (short) -1);
        org.joda.time.DateTime dateTime25 = dateTime23.minusDays(96000000);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.LocalTime localTime28 = new org.joda.time.LocalTime((long) 0, chronology27);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((long) 3, chronology30);
        org.joda.time.DateTime.Property property32 = dateTime31.dayOfYear();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.DateMidnight dateMidnight34 = new org.joda.time.DateMidnight((java.lang.Object) dateTime31, chronology33);
        org.joda.time.DateTime dateTime35 = localTime28.toDateTime((org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.DateTime dateTime38 = dateTime31.withDurationAdded((long) (short) 1, (int) (byte) 1);
        int int39 = dateTime38.getCenturyOfEra();
        boolean boolean40 = dateTime23.isAfter((org.joda.time.ReadableInstant) dateTime38);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 19 + "'", int39 == 19);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test2276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2276");
        java.util.GregorianCalendar gregorianCalendar5 = new java.util.GregorianCalendar(12, 4096, 7, (-1), (int) (short) 10);
        int int6 = gregorianCalendar5.getWeeksInWeekYear();
        java.lang.String str7 = gregorianCalendar5.getCalendarType();
        java.time.ZonedDateTime zonedDateTime8 = gregorianCalendar5.toZonedDateTime();
        java.util.Date date15 = new java.util.Date((int) 'a', 3, 0, (-1), (int) '/', 28);
        int int16 = date15.getTimezoneOffset();
        gregorianCalendar5.setGregorianChange(date15);
        java.util.GregorianCalendar gregorianCalendar23 = new java.util.GregorianCalendar(12, 4096, 7, (-1), (int) (short) 10);
        int int24 = gregorianCalendar23.getWeeksInWeekYear();
        java.lang.String str25 = gregorianCalendar23.getCalendarType();
        java.time.ZonedDateTime zonedDateTime26 = gregorianCalendar23.toZonedDateTime();
        java.util.Date date33 = new java.util.Date((int) 'a', 3, 0, (-1), (int) '/', 28);
        int int34 = date33.getTimezoneOffset();
        gregorianCalendar23.setGregorianChange(date33);
        boolean boolean36 = date15.after(date33);
        java.lang.String str37 = date15.toLocaleString();
        java.lang.String str38 = date15.toLocaleString();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 52 + "'", int6 == 52);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "gregory" + "'", str7, "gregory");
        org.junit.Assert.assertNotNull(zonedDateTime8);
        org.junit.Assert.assertEquals(date15.toString(), "Sun Mar 30 23:47:28 UTC 1997");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 52 + "'", int24 == 52);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "gregory" + "'", str25, "gregory");
        org.junit.Assert.assertNotNull(zonedDateTime26);
        org.junit.Assert.assertEquals(date33.toString(), "Sun Mar 30 23:47:28 UTC 1997");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "Mar 30, 1997 11:47:28 PM" + "'", str37, "Mar 30, 1997 11:47:28 PM");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Mar 30, 1997 11:47:28 PM" + "'", str38, "Mar 30, 1997 11:47:28 PM");
    }

    @Test
    public void test2277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2277");
        java.time.Month month0 = java.time.Month.MARCH;
        org.junit.Assert.assertTrue("'" + month0 + "' != '" + java.time.Month.MARCH + "'", month0.equals(java.time.Month.MARCH));
    }

    @Test
    public void test2278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2278");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((long) 0, chronology1);
        org.joda.time.Chronology chronology3 = localTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField4 = chronology3.weekyearOfCentury();
        org.joda.time.DurationField durationField5 = chronology3.weekyears();
        org.joda.time.Chronology chronology6 = chronology3.withUTC();
        org.joda.time.Weeks weeks7 = org.joda.time.Weeks.ONE;
        java.util.concurrent.TimeUnit timeUnit8 = java.util.concurrent.TimeUnit.NANOSECONDS;
        boolean boolean9 = weeks7.equals((java.lang.Object) timeUnit8);
        org.joda.time.MutablePeriod mutablePeriod10 = weeks7.toMutablePeriod();
        int int11 = mutablePeriod10.getSeconds();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) 3, chronology13);
        org.joda.time.DateTime.Property property15 = dateTime14.dayOfYear();
        org.joda.time.Interval interval16 = property15.toInterval();
        org.joda.time.DateTime dateTime17 = interval16.getEnd();
        mutablePeriod10.setPeriod((org.joda.time.ReadableInterval) interval16);
        mutablePeriod10.setWeeks(20);
        mutablePeriod10.setMinutes((int) 'a');
        long long25 = chronology3.add((org.joda.time.ReadablePeriod) mutablePeriod10, 3601000000001L, 23);
        org.joda.time.DurationField durationField26 = chronology3.minutes();
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(weeks7);
        org.junit.Assert.assertNotNull(timeUnit8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(mutablePeriod10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 3881329060001L + "'", long25 == 3881329060001L);
        org.junit.Assert.assertNotNull(durationField26);
    }

    @Test
    public void test2279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2279");
        java.time.Period period1 = java.time.Period.ofYears(28);
        java.time.chrono.IsoChronology isoChronology2 = period1.getChronology();
        boolean boolean4 = isoChronology2.isLeapYear((long) 35);
        java.util.GregorianCalendar gregorianCalendar10 = new java.util.GregorianCalendar(12, 4096, 7, (-1), (int) (short) 10);
        int int11 = gregorianCalendar10.getWeeksInWeekYear();
        java.lang.String str12 = gregorianCalendar10.getCalendarType();
        java.time.ZonedDateTime zonedDateTime13 = gregorianCalendar10.toZonedDateTime();
        java.time.ZonedDateTime zonedDateTime15 = zonedDateTime13.minusMonths((long) 10);
        java.time.ZonedDateTime zonedDateTime17 = zonedDateTime15.minusHours((long) 9);
        java.time.ZoneOffset zoneOffset18 = zonedDateTime15.getOffset();
        java.time.chrono.ChronoLocalDateTime<? extends java.time.chrono.ChronoLocalDate> wildcardChronoLocalDateTime19 = isoChronology2.localDateTime((java.time.temporal.TemporalAccessor) zonedDateTime15);
        java.util.Map<java.time.temporal.TemporalField, java.lang.Long> temporalFieldMap20 = null;
        java.time.format.ResolverStyle resolverStyle21 = java.time.format.ResolverStyle.LENIENT;
        // The following exception was thrown during execution in test generation
        try {
            java.time.chrono.ChronoLocalDate chronoLocalDate22 = isoChronology2.resolveDate(temporalFieldMap20, resolverStyle21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(isoChronology2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "gregory" + "'", str12, "gregory");
        org.junit.Assert.assertNotNull(zonedDateTime13);
        org.junit.Assert.assertNotNull(zonedDateTime15);
        org.junit.Assert.assertNotNull(zonedDateTime17);
        org.junit.Assert.assertNotNull(zoneOffset18);
        org.junit.Assert.assertNotNull(wildcardChronoLocalDateTime19);
        org.junit.Assert.assertTrue("'" + resolverStyle21 + "' != '" + java.time.format.ResolverStyle.LENIENT + "'", resolverStyle21.equals(java.time.format.ResolverStyle.LENIENT));
    }

    @Test
    public void test2280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2280");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Duration duration2 = new org.joda.time.Duration(readableInstant0, readableInstant1);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = duration2.toPeriodTo(readableInstant3, periodType4);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.Duration duration8 = new org.joda.time.Duration(readableInstant6, readableInstant7);
        long long9 = duration8.getMillis();
        boolean boolean10 = duration2.isShorterThan((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) 3, chronology12);
        org.joda.time.DateTime.Property property14 = dateTime13.dayOfYear();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight((java.lang.Object) dateTime13, chronology15);
        org.joda.time.MutableDateTime mutableDateTime17 = dateTime13.toMutableDateTime();
        mutableDateTime17.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime17.dayOfWeek();
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime17.year();
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime17.weekyear();
        boolean boolean23 = duration2.equals((java.lang.Object) mutableDateTime17);
        mutableDateTime17.addMonths((int) ' ');
        mutableDateTime17.add((long) (byte) 10);
        org.joda.time.Period period28 = org.joda.time.Period.ZERO;
        org.joda.time.Period period29 = period28.normalizedStandard();
        org.joda.time.Period period31 = period28.plusHours(2);
        java.time.chrono.IsoEra isoEra32 = java.time.chrono.IsoEra.CE;
        boolean boolean33 = period31.equals((java.lang.Object) isoEra32);
        int int34 = period31.getMinutes();
        mutableDateTime17.add((org.joda.time.ReadablePeriod) period31);
        java.util.TimeZone timeZone37 = null;
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forTimeZone(timeZone37);
        org.joda.time.DateMidnight dateMidnight39 = new org.joda.time.DateMidnight((long) 1970, dateTimeZone38);
        long long42 = dateTimeZone38.convertLocalToUTC((long) 3, false);
        long long45 = dateTimeZone38.convertLocalToUTC(0L, true);
        mutableDateTime17.setZoneRetainFields(dateTimeZone38);
        java.lang.String str47 = dateTimeZone38.toString();
        org.joda.time.chrono.EthiopicChronology ethiopicChronology48 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone38);
        org.joda.time.DateTimeField dateTimeField49 = ethiopicChronology48.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone50 = ethiopicChronology48.getZone();
        org.joda.time.DateTimeField dateTimeField51 = ethiopicChronology48.era();
        org.joda.time.DurationField durationField52 = ethiopicChronology48.eras();
        org.joda.time.Chronology chronology53 = ethiopicChronology48.withUTC();
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertTrue("'" + isoEra32 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra32.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 3L + "'", long42 == 3L);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Etc/UTC" + "'", str47, "Etc/UTC");
        org.junit.Assert.assertNotNull(ethiopicChronology48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(durationField52);
        org.junit.Assert.assertNotNull(chronology53);
    }

    @Test
    public void test2281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2281");
        org.joda.time.Days days0 = org.joda.time.Days.THREE;
        org.joda.time.Period period5 = new org.joda.time.Period((int) '#', 0, 2, (int) (short) 100);
        org.joda.time.Period period7 = period5.withSeconds(12);
        org.joda.time.Days days8 = period5.toStandardDays();
        boolean boolean9 = days0.isGreaterThan(days8);
        org.junit.Assert.assertNotNull(days0);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(days8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test2282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2282");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((long) 0, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) 3, chronology4);
        org.joda.time.DateTime.Property property6 = dateTime5.dayOfYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateMidnight dateMidnight8 = new org.joda.time.DateMidnight((java.lang.Object) dateTime5, chronology7);
        org.joda.time.DateTime dateTime9 = localTime2.toDateTime((org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.LocalTime localTime11 = localTime2.plusHours(3);
        org.joda.time.TimeOfDay timeOfDay13 = org.joda.time.TimeOfDay.fromMillisOfDay((long) (short) 0);
        org.joda.time.TimeOfDay timeOfDay15 = org.joda.time.TimeOfDay.fromMillisOfDay((long) (short) 0);
        org.joda.time.Hours hours16 = org.joda.time.Hours.hoursBetween((org.joda.time.ReadablePartial) timeOfDay13, (org.joda.time.ReadablePartial) timeOfDay15);
        org.joda.time.DurationFieldType durationFieldType17 = org.joda.time.DurationFieldType.hours();
        org.joda.time.TimeOfDay timeOfDay19 = timeOfDay15.withFieldAdded(durationFieldType17, (int) (byte) 0);
        org.joda.time.Chronology chronology20 = null;
        boolean boolean21 = durationFieldType17.isSupported(chronology20);
        boolean boolean22 = localTime11.isSupported(durationFieldType17);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime(chronology23);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime24.withField(dateTimeFieldType25, (int) 'a');
        org.joda.time.Period period28 = org.joda.time.Period.ZERO;
        org.joda.time.Seconds seconds29 = period28.toStandardSeconds();
        org.joda.time.LocalDateTime localDateTime31 = localDateTime24.withPeriodAdded((org.joda.time.ReadablePeriod) period28, 4096);
        // The following exception was thrown during execution in test generation
        try {
            int int32 = localTime11.compareTo((org.joda.time.ReadablePartial) localDateTime24);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: ReadablePartial objects must have matching field types");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertNotNull(timeOfDay15);
        org.junit.Assert.assertNotNull(hours16);
        org.junit.Assert.assertNotNull(durationFieldType17);
        org.junit.Assert.assertNotNull(timeOfDay19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(seconds29);
        org.junit.Assert.assertNotNull(localDateTime31);
    }

    @Test
    public void test2283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2283");
        java.time.OffsetTime offsetTime0 = java.time.OffsetTime.MAX;
        java.time.LocalTime localTime1 = offsetTime0.toLocalTime();
        java.lang.String str2 = offsetTime0.toString();
        java.time.Duration duration3 = java.time.Duration.ZERO;
        java.lang.String str4 = duration3.toString();
        java.time.OffsetTime offsetTime5 = offsetTime0.plus((java.time.temporal.TemporalAmount) duration3);
        java.time.OffsetTime offsetTime7 = offsetTime0.plusNanos((long) 0);
        org.joda.time.TimeOfDay timeOfDay9 = org.joda.time.TimeOfDay.fromMillisOfDay((long) (short) 0);
        org.joda.time.TimeOfDay timeOfDay11 = org.joda.time.TimeOfDay.fromMillisOfDay((long) (short) 0);
        org.joda.time.Hours hours12 = org.joda.time.Hours.hoursBetween((org.joda.time.ReadablePartial) timeOfDay9, (org.joda.time.ReadablePartial) timeOfDay11);
        org.joda.time.DurationFieldType durationFieldType13 = org.joda.time.DurationFieldType.hours();
        org.joda.time.TimeOfDay timeOfDay15 = timeOfDay11.withFieldAdded(durationFieldType13, (int) (byte) 0);
        org.joda.time.TimeOfDay timeOfDay17 = timeOfDay11.minusMillis((int) '#');
        boolean boolean18 = offsetTime0.equals((java.lang.Object) timeOfDay17);
        org.joda.time.TimeOfDay timeOfDay20 = timeOfDay17.minusMinutes(1024);
        org.junit.Assert.assertNotNull(offsetTime0);
        org.junit.Assert.assertNotNull(localTime1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "23:59:59.999999999-18:00" + "'", str2, "23:59:59.999999999-18:00");
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "PT0S" + "'", str4, "PT0S");
        org.junit.Assert.assertNotNull(offsetTime5);
        org.junit.Assert.assertNotNull(offsetTime7);
        org.junit.Assert.assertNotNull(timeOfDay9);
        org.junit.Assert.assertNotNull(timeOfDay11);
        org.junit.Assert.assertNotNull(hours12);
        org.junit.Assert.assertNotNull(durationFieldType13);
        org.junit.Assert.assertNotNull(timeOfDay15);
        org.junit.Assert.assertNotNull(timeOfDay17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(timeOfDay20);
    }

    @Test
    public void test2284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2284");
        org.joda.time.YearMonthDay yearMonthDay0 = new org.joda.time.YearMonthDay();
        java.util.TimeZone timeZone3 = null;
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight((long) 1970, dateTimeZone4);
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((long) 3600000, dateTimeZone4);
        org.joda.time.DateMidnight dateMidnight7 = yearMonthDay0.toDateMidnight(dateTimeZone4);
        java.io.File file8 = null;
        java.io.File file10 = new java.io.File(file8, "1970-01-01T00:00:00.003Z");
        java.net.URL uRL11 = file10.toURL();
        java.io.File file12 = null;
        java.io.File file14 = new java.io.File(file12, "1970-01-01T00:00:00.003Z");
        java.net.URL uRL15 = file14.toURL();
        boolean boolean16 = uRL11.sameFile(uRL15);
        boolean boolean17 = dateTimeZone4.equals((java.lang.Object) uRL11);
        java.net.URLConnection uRLConnection18 = uRL11.openConnection();
        uRLConnection18.setAllowUserInteraction(true);
        long long21 = uRLConnection18.getContentLengthLong();
        int int22 = uRLConnection18.getContentLength();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str24 = uRLConnection18.getRequestProperty("02:00:00.000");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Already connected");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNull("file10.getParent() == null", file10.getParent());
        org.junit.Assert.assertEquals(file10.toString(), "1970-01-01T00:00:00.003Z");
        org.junit.Assert.assertNotNull(uRL11);
// flaky:         org.junit.Assert.assertEquals(uRL11.toString(), "file:/experiment/1970-01-01T00:00:00.003Z/");
        org.junit.Assert.assertNull("file14.getParent() == null", file14.getParent());
        org.junit.Assert.assertEquals(file14.toString(), "1970-01-01T00:00:00.003Z");
        org.junit.Assert.assertNotNull(uRL15);
// flaky:         org.junit.Assert.assertEquals(uRL15.toString(), "file:/experiment/1970-01-01T00:00:00.003Z/");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(uRLConnection18);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 4096L + "'", long21 == 4096L);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 4096 + "'", int22 == 4096);
    }

    @Test
    public void test2285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2285");
        java.nio.LongBuffer longBuffer1 = java.nio.LongBuffer.allocate((int) (short) 0);
        long[] longArray2 = longBuffer1.array();
        java.util.stream.LongStream longStream3 = java.util.stream.LongStream.of(longArray2);
        java.util.stream.LongStream longStream4 = java.util.stream.LongStream.of(longArray2);
        java.util.stream.LongStream longStream6 = longStream4.limit((long) 1024);
        // The following exception was thrown during execution in test generation
        try {
            long long7 = longStream4.count();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: stream has already been operated upon or closed");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(longBuffer1);
        org.junit.Assert.assertNotNull(longArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray2), "[]");
        org.junit.Assert.assertNotNull(longStream3);
        org.junit.Assert.assertNotNull(longStream4);
        org.junit.Assert.assertNotNull(longStream6);
    }

    @Test
    public void test2286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2286");
        java.util.IntSummaryStatistics intSummaryStatistics0 = new java.util.IntSummaryStatistics();
        intSummaryStatistics0.accept(57);
        long long3 = intSummaryStatistics0.getSum();
        double double4 = intSummaryStatistics0.getAverage();
        org.junit.Assert.assertEquals(intSummaryStatistics0.toString(), "IntSummaryStatistics{count=1, sum=57, min=57, average=57.000000, max=57}");
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 57L + "'", long3 == 57L);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 57.0d + "'", double4 == 57.0d);
    }

    @Test
    public void test2287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2287");
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.Duration duration9 = new org.joda.time.Duration(readableInstant7, readableInstant8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.Period period12 = duration9.toPeriodTo(readableInstant10, periodType11);
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.Duration duration15 = new org.joda.time.Duration(readableInstant13, readableInstant14);
        long long16 = duration15.getMillis();
        boolean boolean17 = duration9.isShorterThan((org.joda.time.ReadableDuration) duration15);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.LocalTime localTime20 = new org.joda.time.LocalTime((long) 0, chronology19);
        org.joda.time.Chronology chronology21 = localTime20.getChronology();
        org.joda.time.DateTimeField dateTimeField22 = chronology21.weekyearOfCentury();
        org.joda.time.DurationField durationField23 = chronology21.weekyears();
        org.joda.time.DurationField durationField24 = chronology21.seconds();
        org.joda.time.Chronology chronology25 = chronology21.withUTC();
        org.joda.time.Period period26 = duration9.toPeriod(chronology25);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime(34608308, 999, 16, 12, 34, 34555048, (int) 'x', chronology25);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 34555048 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(period26);
    }

    @Test
    public void test2288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2288");
        org.joda.time.Period period8 = new org.joda.time.Period(0, 2022, 120, 70, 34561718, (int) 'u', 10800000, 9);
        int int9 = period8.getSeconds();
        org.joda.time.PeriodType periodType11 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.LocalTime localTime14 = new org.joda.time.LocalTime((long) 0, chronology13);
        org.joda.time.Chronology chronology15 = localTime14.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.weekyearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime17 = org.joda.time.MutableDateTime.now(chronology15);
        org.joda.time.DateTimeField dateTimeField18 = chronology15.monthOfYear();
        org.joda.time.Period period19 = new org.joda.time.Period(3601000000001L, periodType11, chronology15);
        org.joda.time.MutablePeriod mutablePeriod20 = period19.toMutablePeriod();
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.Duration duration23 = new org.joda.time.Duration(readableInstant21, readableInstant22);
        org.joda.time.Seconds seconds24 = duration23.toStandardSeconds();
        int int25 = seconds24.getSeconds();
        org.joda.time.Seconds seconds27 = seconds24.dividedBy(28);
        org.joda.time.Seconds seconds28 = seconds27.negated();
        org.joda.time.DurationFieldType durationFieldType29 = seconds28.getFieldType();
        boolean boolean30 = mutablePeriod20.isSupported(durationFieldType29);
        boolean boolean31 = period8.isSupported(durationFieldType29);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 10800000 + "'", int9 == 10800000);
        org.junit.Assert.assertNotNull(periodType11);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(mutablePeriod20);
        org.junit.Assert.assertNotNull(seconds24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(seconds27);
        org.junit.Assert.assertNotNull(seconds28);
        org.junit.Assert.assertNotNull(durationFieldType29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
    }

    @Test
    public void test2289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2289");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder4 = builder0.setDate(0, 0, (int) (byte) 100);
        java.util.Calendar.Builder builder8 = builder0.setDate((int) (byte) 10, 57, 0);
        java.util.Calendar calendar9 = builder0.build();
        java.lang.String str10 = calendar9.getCalendarType();
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(calendar9);
// flaky:         org.junit.Assert.assertEquals(calendar9.toString(), "java.util.GregorianCalendar[time=-61702041600035,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=35,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=14,MONTH=8,WEEK_OF_YEAR=40,WEEK_OF_MONTH=6,DAY_OF_MONTH=30,DAY_OF_YEAR=273,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=35,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "gregory" + "'", str10, "gregory");
    }

    @Test
    public void test2290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2290");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 3, chronology1);
        org.joda.time.DateTime.Property property3 = dateTime2.dayOfYear();
        int int4 = property3.getLeapAmount();
        int int5 = property3.getMinimumValueOverall();
        org.joda.time.DateTime dateTime6 = property3.roundHalfEvenCopy();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(dateTime6);
    }

    @Test
    public void test2291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2291");
        // The following exception was thrown during execution in test generation
        try {
            java.net.URI uRI7 = new java.net.URI("Days", "java.security.PrivilegedActionException: java.nio.charset.CharacterCodingException", "java.util.GregorianCalendar[time=-51016611000000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=353,MONTH=4,WEEK_OF_YEAR=19,WEEK_OF_MONTH=2,DAY_OF_MONTH=6,DAY_OF_YEAR=126,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=10,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", 86, "2021-12-02T09:35:53.233", "CHN", "Property[dayOfWeek]");
            org.junit.Assert.fail("Expected exception of type java.net.URISyntaxException; message: Relative path in absolute URI: Days://java.security.PrivilegedActionException:%20java.nio.charset.CharacterCodingException@java.util.GregorianCalendar[time=-51016611000000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=353,MONTH=4,WEEK_OF_YEAR=19,WEEK_OF_MONTH=2,DAY_OF_MONTH=6,DAY_OF_YEAR=126,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=10,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]:862021-12-02T09:35:53.233?CHN#Property[dayOfWeek]");
        } catch (java.net.URISyntaxException e) {
            // Expected exception.
        }
    }

    @Test
    public void test2292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2292");
        java.time.format.DateTimeFormatter dateTimeFormatter0 = java.time.format.DateTimeFormatter.ISO_DATE;
        java.lang.String str1 = dateTimeFormatter0.toString();
        java.time.LocalDateTime localDateTime2 = java.time.LocalDateTime.now();
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery3 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period4 = localDateTime2.query(periodTemporalQuery3);
        java.text.Format format5 = dateTimeFormatter0.toFormat(periodTemporalQuery3);
        java.time.chrono.Chronology chronology6 = dateTimeFormatter0.getChronology();
        java.time.format.DateTimeFormatter dateTimeFormatter7 = java.time.format.DateTimeFormatter.ISO_DATE;
        java.lang.String str8 = dateTimeFormatter7.toString();
        java.time.LocalDateTime localDateTime9 = java.time.LocalDateTime.now();
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery10 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period11 = localDateTime9.query(periodTemporalQuery10);
        java.text.Format format12 = dateTimeFormatter7.toFormat(periodTemporalQuery10);
        java.time.chrono.Chronology chronology13 = dateTimeFormatter7.getChronology();
        int int14 = chronology6.compareTo(chronology13);
        java.util.List<java.time.chrono.Era> eraList15 = chronology13.eras();
        java.time.ZoneOffset zoneOffset18 = java.time.ZoneOffset.ofHoursMinutes(1, 10);
        java.time.LocalDate localDate19 = java.time.LocalDate.now((java.time.ZoneId) zoneOffset18);
        java.time.Clock clock20 = java.time.Clock.system((java.time.ZoneId) zoneOffset18);
        java.time.ZoneOffset zoneOffset23 = java.time.ZoneOffset.ofHoursMinutes(1, 10);
        java.time.LocalDate localDate24 = java.time.LocalDate.now((java.time.ZoneId) zoneOffset23);
        java.time.Clock clock25 = java.time.Clock.system((java.time.ZoneId) zoneOffset23);
        int int26 = zoneOffset18.compareTo(zoneOffset23);
        java.time.chrono.ChronoLocalDate chronoLocalDate27 = chronology13.dateNow((java.time.ZoneId) zoneOffset23);
        java.time.chrono.IsoEra isoEra28 = java.time.chrono.IsoEra.CE;
        int int29 = isoEra28.getValue();
        int int30 = isoEra28.getValue();
        int int32 = chronology13.prolepticYear((java.time.chrono.Era) isoEra28, 0);
        java.time.LocalTime localTime37 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime38 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime37);
        java.time.temporal.ChronoField chronoField39 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime41 = localTime37.with((java.time.temporal.TemporalField) chronoField39, (long) (short) 1);
        java.util.Locale locale42 = java.util.Locale.GERMANY;
        java.lang.String str43 = chronoField39.getDisplayName(locale42);
        boolean boolean44 = isoEra28.isSupported((java.time.temporal.TemporalField) chronoField39);
        java.util.Optional<java.lang.Exception> exceptionOptional45 = java.util.Optional.empty();
        java.lang.String str46 = exceptionOptional45.toString();
        java.time.LocalDateTime localDateTime47 = java.time.LocalDateTime.now();
        java.time.temporal.ChronoField chronoField48 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime50 = localDateTime47.with((java.time.temporal.TemporalField) chronoField48, (long) 10);
        java.time.LocalDateTime localDateTime52 = localDateTime47.withDayOfYear((int) '/');
        boolean boolean53 = exceptionOptional45.equals((java.lang.Object) localDateTime52);
        java.time.LocalDateTime localDateTime55 = localDateTime52.withNano(2);
        java.time.temporal.ChronoField chronoField56 = java.time.temporal.ChronoField.AMPM_OF_DAY;
        int int57 = localDateTime52.get((java.time.temporal.TemporalField) chronoField56);
        // The following exception was thrown during execution in test generation
        try {
            long long58 = isoEra28.getLong((java.time.temporal.TemporalField) chronoField56);
            org.junit.Assert.fail("Expected exception of type java.time.temporal.UnsupportedTemporalTypeException; message: Unsupported field: AmPmOfDay");
        } catch (java.time.temporal.UnsupportedTemporalTypeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "ParseCaseSensitive(false)(Value(Year,4,10,EXCEEDS_PAD)'-'Value(MonthOfYear,2)'-'Value(DayOfMonth,2))[Offset(+HH:MM:ss,'Z')]" + "'", str1, "ParseCaseSensitive(false)(Value(Year,4,10,EXCEEDS_PAD)'-'Value(MonthOfYear,2)'-'Value(DayOfMonth,2))[Offset(+HH:MM:ss,'Z')]");
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(periodTemporalQuery3);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(format5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "ParseCaseSensitive(false)(Value(Year,4,10,EXCEEDS_PAD)'-'Value(MonthOfYear,2)'-'Value(DayOfMonth,2))[Offset(+HH:MM:ss,'Z')]" + "'", str8, "ParseCaseSensitive(false)(Value(Year,4,10,EXCEEDS_PAD)'-'Value(MonthOfYear,2)'-'Value(DayOfMonth,2))[Offset(+HH:MM:ss,'Z')]");
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(periodTemporalQuery10);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(format12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(eraList15);
        org.junit.Assert.assertNotNull(zoneOffset18);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(clock20);
        org.junit.Assert.assertNotNull(zoneOffset23);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(clock25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(chronoLocalDate27);
        org.junit.Assert.assertTrue("'" + isoEra28 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra28.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(localTime37);
        org.junit.Assert.assertNotNull(localTime38);
        org.junit.Assert.assertTrue("'" + chronoField39 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField39.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime41);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "NanoOfDay" + "'", str43, "NanoOfDay");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(exceptionOptional45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "Optional.empty" + "'", str46, "Optional.empty");
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertTrue("'" + chronoField48 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField48.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime50);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertTrue("'" + chronoField56 + "' != '" + java.time.temporal.ChronoField.AMPM_OF_DAY + "'", chronoField56.equals(java.time.temporal.ChronoField.AMPM_OF_DAY));
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
    }

    @Test
    public void test2293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2293");
        // The following exception was thrown during execution in test generation
        try {
            java.net.URI uRI4 = new java.net.URI("P1D", "PT2H", ":", "2022-02-21T09:35:56.501Z");
            org.junit.Assert.fail("Expected exception of type java.net.URISyntaxException; message: Relative path in absolute URI: P1D://PT2H:#2022-02-21T09:35:56.501Z");
        } catch (java.net.URISyntaxException e) {
            // Expected exception.
        }
    }

    @Test
    public void test2294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2294");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 3, chronology1);
        org.joda.time.DateTime.Property property3 = dateTime2.dayOfYear();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight((java.lang.Object) dateTime2, chronology4);
        org.joda.time.MutableDateTime mutableDateTime6 = dateTime2.toMutableDateTime();
        mutableDateTime6.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime6.millisOfDay();
        org.joda.time.PeriodType periodType10 = org.joda.time.PeriodType.years();
        org.joda.time.DurationFieldType durationFieldType11 = org.joda.time.DurationFieldType.halfdays();
        int int12 = periodType10.indexOf(durationFieldType11);
        mutableDateTime6.add(durationFieldType11, (int) 'a');
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime6.millisOfSecond();
        org.joda.time.MutableDateTime.Property property16 = mutableDateTime6.millisOfDay();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertNotNull(durationFieldType11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(property16);
    }

    @Test
    public void test2295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2295");
        java.time.zone.ZoneOffsetTransitionRule.TimeDefinition timeDefinition0 = java.time.zone.ZoneOffsetTransitionRule.TimeDefinition.STANDARD;
        org.junit.Assert.assertTrue("'" + timeDefinition0 + "' != '" + java.time.zone.ZoneOffsetTransitionRule.TimeDefinition.STANDARD + "'", timeDefinition0.equals(java.time.zone.ZoneOffsetTransitionRule.TimeDefinition.STANDARD));
    }

    @Test
    public void test2296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2296");
        java.time.OffsetDateTime offsetDateTime0 = java.time.OffsetDateTime.now();
        java.time.temporal.ChronoField chronoField1 = java.time.temporal.ChronoField.HOUR_OF_DAY;
        boolean boolean2 = offsetDateTime0.isSupported((java.time.temporal.TemporalField) chronoField1);
        java.util.Locale locale3 = java.util.Locale.GERMANY;
        java.lang.String str4 = locale3.getDisplayLanguage();
        java.lang.String str5 = chronoField1.getDisplayName(locale3);
        java.lang.String str6 = locale3.getDisplayName();
        org.junit.Assert.assertNotNull(offsetDateTime0);
        org.junit.Assert.assertTrue("'" + chronoField1 + "' != '" + java.time.temporal.ChronoField.HOUR_OF_DAY + "'", chronoField1.equals(java.time.temporal.ChronoField.HOUR_OF_DAY));
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "German" + "'", str4, "German");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Stunde" + "'", str5, "Stunde");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "German (Germany)" + "'", str6, "German (Germany)");
    }

    @Test
    public void test2297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2297");
        org.joda.time.PeriodType periodType0 = org.joda.time.PeriodType.years();
        org.joda.time.DurationFieldType durationFieldType1 = org.joda.time.DurationFieldType.halfdays();
        int int2 = periodType0.indexOf(durationFieldType1);
        org.joda.time.PeriodType periodType3 = periodType0.withDaysRemoved();
        org.junit.Assert.assertNotNull(periodType0);
        org.junit.Assert.assertNotNull(durationFieldType1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(periodType3);
    }

    @Test
    public void test2298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2298");
        java.util.stream.Stream.Builder<java.io.OutputStream> outputStreamBuilder0 = java.util.stream.Stream.builder();
        java.io.OutputStream outputStream1 = null;
        java.io.FilterOutputStream filterOutputStream2 = new java.io.FilterOutputStream(outputStream1);
        java.io.PrintStream printStream4 = new java.io.PrintStream((java.io.OutputStream) filterOutputStream2, false);
        char[] charArray5 = new char[] {};
        java.nio.CharBuffer charBuffer6 = java.nio.CharBuffer.wrap(charArray5);
        printStream4.print(charArray5);
        java.util.stream.Stream.Builder<java.io.OutputStream> outputStreamBuilder8 = outputStreamBuilder0.add((java.io.OutputStream) printStream4);
        java.io.OutputStream outputStream9 = null;
        outputStreamBuilder0.accept(outputStream9);
        org.junit.Assert.assertNotNull(outputStreamBuilder0);
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[]");
        org.junit.Assert.assertNotNull(charBuffer6);
        org.junit.Assert.assertNotNull(outputStreamBuilder8);
    }

    @Test
    public void test2299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2299");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((long) 0, chronology1);
        org.joda.time.Chronology chronology3 = localTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField4 = chronology3.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField5 = chronology3.centuryOfEra();
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
    }

    @Test
    public void test2300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2300");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Duration duration2 = new org.joda.time.Duration(readableInstant0, readableInstant1);
        org.joda.time.Duration duration4 = duration2.withMillis((-1L));
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((long) 3, chronology6);
        org.joda.time.DateTime.Property property8 = dateTime7.dayOfYear();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight((java.lang.Object) dateTime7, chronology9);
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight10.minusMonths((-1));
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight10.withDayOfYear((int) ' ');
        org.joda.time.PeriodType periodType15 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period16 = duration4.toPeriodFrom((org.joda.time.ReadableInstant) dateMidnight10, periodType15);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.Duration duration19 = new org.joda.time.Duration(readableInstant17, readableInstant18);
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.PeriodType periodType21 = null;
        org.joda.time.Period period22 = duration19.toPeriodTo(readableInstant20, periodType21);
        long long23 = duration19.getStandardSeconds();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((long) 3, chronology25);
        org.joda.time.DateTime.Property property27 = dateTime26.dayOfYear();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateMidnight dateMidnight29 = new org.joda.time.DateMidnight((java.lang.Object) dateTime26, chronology28);
        org.joda.time.DateMidnight dateMidnight31 = dateMidnight29.minusMonths((-1));
        org.joda.time.DateMidnight dateMidnight33 = dateMidnight29.withDayOfYear((int) ' ');
        org.joda.time.Interval interval34 = duration19.toIntervalTo((org.joda.time.ReadableInstant) dateMidnight33);
        org.joda.time.PeriodType periodType36 = org.joda.time.PeriodType.time();
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod((long) 'a', periodType36);
        org.joda.time.Period period38 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight10, (org.joda.time.ReadableDuration) duration19, periodType36);
        org.joda.time.Period period40 = period38.minusMinutes(10800000);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period42 = period38.withMonths((int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Field is not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(periodType15);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateMidnight31);
        org.junit.Assert.assertNotNull(dateMidnight33);
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertNotNull(period40);
    }

    @Test
    public void test2301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2301");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withYearOfCentury((int) 'a');
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.plusSeconds(6);
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime3.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod6, 11);
        java.lang.String str9 = mutablePeriod6.toString();
        mutablePeriod6.setPeriod(710, 3601, 31, (int) (byte) 100, (int) '0', 32770, 32769, 15);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "PT0S" + "'", str9, "PT0S");
    }

    @Test
    public void test2302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2302");
        java.io.File file0 = null;
        java.io.File file2 = new java.io.File(file0, "1970-01-01T00:00:00.003Z");
        java.net.URL uRL3 = file2.toURL();
        boolean boolean6 = file2.setExecutable(true, false);
        long long7 = file2.getFreeSpace();
        java.lang.String str8 = file2.toString();
        org.junit.Assert.assertNull("file2.getParent() == null", file2.getParent());
        org.junit.Assert.assertEquals(file2.toString(), "1970-01-01T00:00:00.003Z");
        org.junit.Assert.assertNotNull(uRL3);
// flaky:         org.junit.Assert.assertEquals(uRL3.toString(), "file:/experiment/1970-01-01T00:00:00.003Z/");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
// flaky:         org.junit.Assert.assertTrue("'" + long7 + "' != '" + 299102285824L + "'", long7 == 299102285824L);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "1970-01-01T00:00:00.003Z" + "'", str8, "1970-01-01T00:00:00.003Z");
    }

    @Test
    public void test2303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2303");
        java.time.LocalDate localDate1 = java.time.LocalDate.ofEpochDay((long) ' ');
        java.time.OffsetTime offsetTime2 = java.time.OffsetTime.MAX;
        java.time.LocalTime localTime3 = offsetTime2.toLocalTime();
        java.lang.String str4 = offsetTime2.toString();
        java.time.Duration duration5 = java.time.Duration.ZERO;
        java.lang.String str6 = duration5.toString();
        java.time.OffsetTime offsetTime7 = offsetTime2.plus((java.time.temporal.TemporalAmount) duration5);
        java.time.LocalTime localTime8 = offsetTime2.toLocalTime();
        java.time.chrono.ChronoLocalDateTime<?> wildcardChronoLocalDateTime9 = localDate1.atTime(localTime8);
        java.time.LocalDate localDate11 = localDate1.minusWeeks((long) 2097);
        java.time.LocalDate localDate13 = localDate11.minusMonths((long) (byte) 0);
        java.time.ZoneOffset zoneOffset16 = java.time.ZoneOffset.ofHoursMinutes(1, 10);
        java.time.LocalDate localDate17 = java.time.LocalDate.now((java.time.ZoneId) zoneOffset16);
        java.time.LocalDate localDate18 = java.time.LocalDate.now((java.time.ZoneId) zoneOffset16);
        java.time.OffsetDateTime offsetDateTime20 = java.time.OffsetDateTime.now();
        java.time.LocalDate localDate22 = java.time.LocalDate.ofEpochDay((long) ' ');
        int int23 = localDate22.getMonthValue();
        org.joda.time.Period period24 = org.joda.time.Period.ZERO;
        org.joda.time.Period period25 = period24.normalizedStandard();
        org.joda.time.Period period27 = period24.plusHours(2);
        java.time.chrono.IsoEra isoEra28 = java.time.chrono.IsoEra.CE;
        boolean boolean29 = period27.equals((java.lang.Object) isoEra28);
        java.time.LocalTime localTime34 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime35 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime34);
        java.time.LocalTime localTime40 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime41 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime40);
        java.time.temporal.ChronoField chronoField42 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime44 = localTime40.with((java.time.temporal.TemporalField) chronoField42, (long) (short) 1);
        long long45 = localTime34.getLong((java.time.temporal.TemporalField) chronoField42);
        boolean boolean46 = isoEra28.isSupported((java.time.temporal.TemporalField) chronoField42);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery47 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period48 = isoEra28.query(periodTemporalQuery47);
        boolean boolean49 = period48.isNegative();
        java.time.Period period51 = period48.plusDays((long) ' ');
        java.time.temporal.ChronoField chronoField52 = java.time.temporal.ChronoField.SECOND_OF_DAY;
        boolean boolean53 = period48.equals((java.lang.Object) chronoField52);
        boolean boolean54 = localDate22.isSupported((java.time.temporal.TemporalField) chronoField52);
        java.time.temporal.TemporalUnit temporalUnit55 = chronoField52.getRangeUnit();
        java.time.OffsetDateTime offsetDateTime56 = offsetDateTime20.truncatedTo(temporalUnit55);
        java.time.LocalDate localDate59 = java.time.LocalDate.ofEpochDay((long) ' ');
        int int60 = localDate59.getMonthValue();
        org.joda.time.Period period61 = org.joda.time.Period.ZERO;
        org.joda.time.Period period62 = period61.normalizedStandard();
        org.joda.time.Period period64 = period61.plusHours(2);
        java.time.chrono.IsoEra isoEra65 = java.time.chrono.IsoEra.CE;
        boolean boolean66 = period64.equals((java.lang.Object) isoEra65);
        java.time.LocalTime localTime71 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime72 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime71);
        java.time.LocalTime localTime77 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime78 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime77);
        java.time.temporal.ChronoField chronoField79 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime81 = localTime77.with((java.time.temporal.TemporalField) chronoField79, (long) (short) 1);
        long long82 = localTime71.getLong((java.time.temporal.TemporalField) chronoField79);
        boolean boolean83 = isoEra65.isSupported((java.time.temporal.TemporalField) chronoField79);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery84 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period85 = isoEra65.query(periodTemporalQuery84);
        boolean boolean86 = period85.isNegative();
        java.time.Period period88 = period85.plusDays((long) ' ');
        java.time.temporal.ChronoField chronoField89 = java.time.temporal.ChronoField.SECOND_OF_DAY;
        boolean boolean90 = period85.equals((java.lang.Object) chronoField89);
        boolean boolean91 = localDate59.isSupported((java.time.temporal.TemporalField) chronoField89);
        java.time.temporal.TemporalUnit temporalUnit92 = chronoField89.getRangeUnit();
        java.time.OffsetDateTime offsetDateTime93 = offsetDateTime56.minus(8L, temporalUnit92);
        java.time.LocalDate localDate94 = localDate18.minus((long) '4', temporalUnit92);
        java.time.Duration duration95 = temporalUnit92.getDuration();
        boolean boolean96 = localDate11.isSupported(temporalUnit92);
        boolean boolean97 = localDate11.isLeapYear();
        org.junit.Assert.assertNotNull(localDate1);
        org.junit.Assert.assertNotNull(offsetTime2);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "23:59:59.999999999-18:00" + "'", str4, "23:59:59.999999999-18:00");
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "PT0S" + "'", str6, "PT0S");
        org.junit.Assert.assertNotNull(offsetTime7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(wildcardChronoLocalDateTime9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(zoneOffset16);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(offsetDateTime20);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2 + "'", int23 == 2);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertTrue("'" + isoEra28 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra28.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(localTime34);
        org.junit.Assert.assertNotNull(localTime35);
        org.junit.Assert.assertNotNull(localTime40);
        org.junit.Assert.assertNotNull(localTime41);
        org.junit.Assert.assertTrue("'" + chronoField42 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField42.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime44);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 3601000000001L + "'", long45 == 3601000000001L);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(periodTemporalQuery47);
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertTrue("'" + chronoField52 + "' != '" + java.time.temporal.ChronoField.SECOND_OF_DAY + "'", chronoField52.equals(java.time.temporal.ChronoField.SECOND_OF_DAY));
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + temporalUnit55 + "' != '" + java.time.temporal.ChronoUnit.DAYS + "'", temporalUnit55.equals(java.time.temporal.ChronoUnit.DAYS));
        org.junit.Assert.assertNotNull(offsetDateTime56);
        org.junit.Assert.assertNotNull(localDate59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2 + "'", int60 == 2);
        org.junit.Assert.assertNotNull(period61);
        org.junit.Assert.assertNotNull(period62);
        org.junit.Assert.assertNotNull(period64);
        org.junit.Assert.assertTrue("'" + isoEra65 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra65.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(localTime71);
        org.junit.Assert.assertNotNull(localTime72);
        org.junit.Assert.assertNotNull(localTime77);
        org.junit.Assert.assertNotNull(localTime78);
        org.junit.Assert.assertTrue("'" + chronoField79 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField79.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime81);
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + 3601000000001L + "'", long82 == 3601000000001L);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(periodTemporalQuery84);
        org.junit.Assert.assertNotNull(period85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(period88);
        org.junit.Assert.assertTrue("'" + chronoField89 + "' != '" + java.time.temporal.ChronoField.SECOND_OF_DAY + "'", chronoField89.equals(java.time.temporal.ChronoField.SECOND_OF_DAY));
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + temporalUnit92 + "' != '" + java.time.temporal.ChronoUnit.DAYS + "'", temporalUnit92.equals(java.time.temporal.ChronoUnit.DAYS));
        org.junit.Assert.assertNotNull(offsetDateTime93);
        org.junit.Assert.assertNotNull(localDate94);
        org.junit.Assert.assertNotNull(duration95);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + true + "'", boolean96 == true);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
    }

    @Test
    public void test2304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2304");
        java.io.UnsupportedEncodingException unsupportedEncodingException2 = new java.io.UnsupportedEncodingException("2022-02-21T09:34:07.170");
        java.util.concurrent.ExecutionException executionException3 = new java.util.concurrent.ExecutionException("PT35H12.100S", (java.lang.Throwable) unsupportedEncodingException2);
    }

    @Test
    public void test2305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2305");
        org.joda.time.PeriodType periodType0 = org.joda.time.PeriodType.days();
        org.joda.time.PeriodType periodType1 = periodType0.withYearsRemoved();
        org.junit.Assert.assertNotNull(periodType0);
        org.junit.Assert.assertNotNull(periodType1);
    }

    @Test
    public void test2306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2306");
        int int0 = java.util.Calendar.WEEK_OF_MONTH;
        org.junit.Assert.assertTrue("'" + int0 + "' != '" + 4 + "'", int0 == 4);
    }

    @Test
    public void test2307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2307");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 3, chronology1);
        org.joda.time.DateTime.Property property3 = dateTime2.dayOfYear();
        org.joda.time.Interval interval4 = property3.toInterval();
        org.joda.time.DateTimeField dateTimeField5 = property3.getField();
        org.joda.time.DateTime dateTime7 = property3.addToCopy((long) (byte) 1);
        org.joda.time.DateTime dateTime9 = dateTime7.withYear(4);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) 3, chronology11);
        org.joda.time.Period period13 = org.joda.time.Period.ZERO;
        org.joda.time.Period period14 = period13.normalizedStandard();
        org.joda.time.Period period16 = period14.minusMinutes((int) ' ');
        org.joda.time.Period period18 = period16.minusMonths((int) (byte) 0);
        org.joda.time.PeriodType periodType19 = period18.getPeriodType();
        org.joda.time.DateTime dateTime20 = dateTime12.minus((org.joda.time.ReadablePeriod) period18);
        org.joda.time.Duration duration21 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.DateTime dateTime23 = dateTime20.plusMonths((int) (short) -1);
        org.joda.time.DateTime.Property property24 = dateTime23.year();
        int int25 = property24.getMaximumValueOverall();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 292278993 + "'", int25 == 292278993);
    }

    @Test
    public void test2308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2308");
        // The following exception was thrown during execution in test generation
        try {
            java.net.URI uRI7 = new java.net.URI("1970-02-01T00:00:00.000Z/1970-02-01T00:00:00.000Z", "Mo", "70", (int) (byte) 0, "2022-02-21T09:34:25.512", "java.io.FileNotFoundException", "2022-02-21T09:36:33.559Z");
            org.junit.Assert.fail("Expected exception of type java.net.URISyntaxException; message: Relative path in absolute URI: 1970-02-01T00:00:00.000Z/1970-02-01T00:00:00.000Z://Mo@70:02022-02-21T09:34:25.512?java.io.FileNotFoundException#2022-02-21T09:36:33.559Z");
        } catch (java.net.URISyntaxException e) {
            // Expected exception.
        }
    }

    @Test
    public void test2309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2309");
        java.util.stream.Stream<java.time.chrono.IsoEra> isoEraStream0 = java.util.stream.Stream.empty();
        org.junit.Assert.assertNotNull(isoEraStream0);
    }

    @Test
    public void test2310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2310");
        java.util.concurrent.TimeoutException timeoutException0 = new java.util.concurrent.TimeoutException();
        java.security.GeneralSecurityException generalSecurityException1 = new java.security.GeneralSecurityException((java.lang.Throwable) timeoutException0);
    }

    @Test
    public void test2311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2311");
        java.util.List<java.util.Locale.LanguageRange> languageRangeList0 = null;
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList0, strMap1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test2312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2312");
        org.joda.time.chrono.EthiopicChronology ethiopicChronology0 = org.joda.time.chrono.EthiopicChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = ethiopicChronology0.dayOfWeek();
        long long4 = dateTimeField1.add((long) 558, (long) 574);
        org.junit.Assert.assertNotNull(ethiopicChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 49593600558L + "'", long4 == 49593600558L);
    }

    @Test
    public void test2313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2313");
        java.time.Duration duration0 = java.time.Duration.ZERO;
        java.time.LocalTime localTime5 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime6 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime5);
        java.time.temporal.ChronoField chronoField7 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime9 = localTime5.with((java.time.temporal.TemporalField) chronoField7, (long) (short) 1);
        java.time.Duration duration11 = java.time.Duration.ofMinutes((long) 3);
        java.time.LocalTime localTime12 = localTime5.minus((java.time.temporal.TemporalAmount) duration11);
        java.time.temporal.Temporal temporal13 = duration0.subtractFrom((java.time.temporal.Temporal) localTime12);
        java.time.Duration duration15 = java.time.Duration.ofMinutes((long) 3);
        java.time.Duration duration16 = duration15.abs();
        java.time.Duration duration18 = duration16.plusMinutes(0L);
        java.time.LocalTime localTime19 = localTime12.plus((java.time.temporal.TemporalAmount) duration16);
        java.time.LocalTime localTime24 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime25 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime24);
        long long26 = localTime25.toNanoOfDay();
        java.time.LocalTime localTime28 = localTime25.minusSeconds((long) '+');
        java.time.LocalTime localTime30 = localTime25.plusHours(32L);
        boolean boolean31 = localTime19.isBefore(localTime25);
        org.junit.Assert.assertNotNull(duration0);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertTrue("'" + chronoField7 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField7.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(temporal13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertNotNull(localTime24);
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 3601000000001L + "'", long26 == 3601000000001L);
        org.junit.Assert.assertNotNull(localTime28);
        org.junit.Assert.assertNotNull(localTime30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test2314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2314");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Duration duration2 = new org.joda.time.Duration(readableInstant0, readableInstant1);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = duration2.toPeriodTo(readableInstant3, periodType4);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.Duration duration8 = new org.joda.time.Duration(readableInstant6, readableInstant7);
        long long9 = duration8.getMillis();
        boolean boolean10 = duration2.isShorterThan((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) 3, chronology12);
        org.joda.time.DateTime.Property property14 = dateTime13.dayOfYear();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight((java.lang.Object) dateTime13, chronology15);
        org.joda.time.MutableDateTime mutableDateTime17 = dateTime13.toMutableDateTime();
        mutableDateTime17.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime17.dayOfWeek();
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime17.year();
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime17.weekyear();
        boolean boolean23 = duration2.equals((java.lang.Object) mutableDateTime17);
        mutableDateTime17.addMonths((int) ' ');
        mutableDateTime17.add((long) (byte) 10);
        org.joda.time.Period period28 = org.joda.time.Period.ZERO;
        org.joda.time.Period period29 = period28.normalizedStandard();
        org.joda.time.Period period31 = period28.plusHours(2);
        java.time.chrono.IsoEra isoEra32 = java.time.chrono.IsoEra.CE;
        boolean boolean33 = period31.equals((java.lang.Object) isoEra32);
        int int34 = period31.getMinutes();
        mutableDateTime17.add((org.joda.time.ReadablePeriod) period31);
        java.util.TimeZone timeZone37 = null;
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forTimeZone(timeZone37);
        org.joda.time.DateMidnight dateMidnight39 = new org.joda.time.DateMidnight((long) 1970, dateTimeZone38);
        long long42 = dateTimeZone38.convertLocalToUTC((long) 3, false);
        long long45 = dateTimeZone38.convertLocalToUTC(0L, true);
        mutableDateTime17.setZoneRetainFields(dateTimeZone38);
        java.lang.String str47 = dateTimeZone38.toString();
        org.joda.time.chrono.EthiopicChronology ethiopicChronology48 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone38);
        org.joda.time.DateTimeField dateTimeField49 = ethiopicChronology48.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone50 = ethiopicChronology48.getZone();
        org.joda.time.DateTimeField dateTimeField51 = ethiopicChronology48.era();
        org.joda.time.DateTimeField dateTimeField52 = ethiopicChronology48.secondOfDay();
        org.joda.time.DateTimeField dateTimeField53 = ethiopicChronology48.minuteOfHour();
        org.joda.time.DurationField durationField54 = ethiopicChronology48.months();
        org.joda.time.DateTimeField dateTimeField55 = ethiopicChronology48.weekyearOfCentury();
        org.joda.time.Minutes minutes56 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes58 = minutes56.minus(12);
        org.joda.time.Minutes minutes59 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes61 = minutes59.minus(12);
        org.joda.time.Minutes minutes62 = minutes56.minus(minutes59);
        org.joda.time.DurationFieldType durationFieldType63 = minutes56.getFieldType();
        int[] intArray66 = ethiopicChronology48.get((org.joda.time.ReadablePeriod) minutes56, (long) 30, (long) 741000000);
        java.nio.IntBuffer intBuffer67 = java.nio.IntBuffer.wrap(intArray66);
        java.nio.IntBuffer intBuffer68 = intBuffer67.duplicate();
        int[] intArray69 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.nio.IntBuffer intBuffer70 = intBuffer68.put(intArray69);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertTrue("'" + isoEra32 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra32.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 3L + "'", long42 == 3L);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Etc/UTC" + "'", str47, "Etc/UTC");
        org.junit.Assert.assertNotNull(ethiopicChronology48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(durationField54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(minutes56);
        org.junit.Assert.assertNotNull(minutes58);
        org.junit.Assert.assertNotNull(minutes59);
        org.junit.Assert.assertNotNull(minutes61);
        org.junit.Assert.assertNotNull(minutes62);
        org.junit.Assert.assertNotNull(durationFieldType63);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[12349]");
        org.junit.Assert.assertNotNull(intBuffer67);
        org.junit.Assert.assertNotNull(intBuffer68);
    }

    @Test
    public void test2315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2315");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Weeks weeks1 = org.joda.time.Weeks.parseWeeks("weekyearOfCentury");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"weekyearOfCentury\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test2316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2316");
        java.time.format.DateTimeFormatter dateTimeFormatter0 = java.time.format.DateTimeFormatter.ISO_DATE_TIME;
        java.util.GregorianCalendar gregorianCalendar6 = new java.util.GregorianCalendar(12, 4096, 7, (-1), (int) (short) 10);
        int int7 = gregorianCalendar6.getWeeksInWeekYear();
        java.lang.String str8 = gregorianCalendar6.getCalendarType();
        java.time.ZonedDateTime zonedDateTime9 = gregorianCalendar6.toZonedDateTime();
        java.util.GregorianCalendar gregorianCalendar15 = new java.util.GregorianCalendar(12, 4096, 7, (-1), (int) (short) 10);
        int int16 = gregorianCalendar15.getWeeksInWeekYear();
        java.lang.String str17 = gregorianCalendar15.getCalendarType();
        java.time.ZonedDateTime zonedDateTime18 = gregorianCalendar15.toZonedDateTime();
        int int19 = zonedDateTime9.compareTo((java.time.chrono.ChronoZonedDateTime<java.time.LocalDate>) zonedDateTime18);
        java.time.ZonedDateTime zonedDateTime21 = zonedDateTime9.plusDays((long) 2022);
        java.time.Instant instant22 = zonedDateTime9.toInstant();
        java.time.chrono.Chronology chronology23 = zonedDateTime9.getChronology();
        java.time.format.DateTimeFormatter dateTimeFormatter24 = dateTimeFormatter0.withChronology(chronology23);
        java.time.OffsetTime offsetTime25 = java.time.OffsetTime.MAX;
        java.time.LocalTime localTime26 = offsetTime25.toLocalTime();
        java.time.chrono.Chronology chronology27 = java.time.chrono.Chronology.from((java.time.temporal.TemporalAccessor) localTime26);
        java.time.format.DateTimeFormatter dateTimeFormatter28 = dateTimeFormatter0.withChronology(chronology27);
        // The following exception was thrown during execution in test generation
        try {
            java.time.chrono.ChronoLocalDate chronoLocalDate31 = chronology27.dateYearDay((int) '\uffff', 508);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for DayOfYear (valid values 1 - 365/366): 508");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "gregory" + "'", str8, "gregory");
        org.junit.Assert.assertNotNull(zonedDateTime9);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 52 + "'", int16 == 52);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "gregory" + "'", str17, "gregory");
        org.junit.Assert.assertNotNull(zonedDateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(zonedDateTime21);
        org.junit.Assert.assertNotNull(instant22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeFormatter24);
        org.junit.Assert.assertNotNull(offsetTime25);
        org.junit.Assert.assertNotNull(localTime26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeFormatter28);
    }

    @Test
    public void test2317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2317");
        java.util.stream.Stream.Builder<java.io.OutputStream> outputStreamBuilder0 = java.util.stream.Stream.builder();
        java.util.stream.Stream.Builder<java.io.OutputStream> outputStreamBuilder1 = java.util.stream.Stream.builder();
        java.util.function.Consumer<java.io.OutputStream> outputStreamConsumer2 = outputStreamBuilder0.andThen((java.util.function.Consumer<java.io.OutputStream>) outputStreamBuilder1);
        java.io.PrintStream printStream4 = new java.io.PrintStream("subject:\n (GERMAN)");
        java.util.stream.Stream.Builder<java.io.OutputStream> outputStreamBuilder5 = outputStreamBuilder1.add((java.io.OutputStream) printStream4);
        java.util.stream.Stream<java.io.OutputStream> outputStreamStream6 = outputStreamBuilder1.build();
        org.junit.Assert.assertNotNull(outputStreamBuilder0);
        org.junit.Assert.assertNotNull(outputStreamBuilder1);
        org.junit.Assert.assertNotNull(outputStreamConsumer2);
        org.junit.Assert.assertNotNull(outputStreamBuilder5);
        org.junit.Assert.assertNotNull(outputStreamStream6);
    }

    @Test
    public void test2318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2318");
        org.joda.time.Duration duration1 = org.joda.time.Duration.millis((-8L));
        org.junit.Assert.assertNotNull(duration1);
    }

    @Test
    public void test2319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2319");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 3, chronology1);
        org.joda.time.Period period3 = org.joda.time.Period.ZERO;
        org.joda.time.Period period4 = period3.normalizedStandard();
        org.joda.time.Period period6 = period4.minusMinutes((int) ' ');
        org.joda.time.Period period8 = period6.minusMonths((int) (byte) 0);
        org.joda.time.PeriodType periodType9 = period8.getPeriodType();
        org.joda.time.DateTime dateTime10 = dateTime2.minus((org.joda.time.ReadablePeriod) period8);
        org.joda.time.DateTime dateTime12 = dateTime2.plusHours(34);
        org.joda.time.DateTime dateTime14 = dateTime12.minusSeconds((int) '#');
        org.joda.time.Period period19 = new org.joda.time.Period((int) '#', 0, 2, (int) (short) 100);
        org.joda.time.Period period21 = period19.withSeconds(12);
        int int22 = period21.getMillis();
        org.joda.time.DateTime dateTime23 = dateTime14.plus((org.joda.time.ReadablePeriod) period21);
        org.joda.time.MutableDateTime mutableDateTime24 = new org.joda.time.MutableDateTime();
        org.joda.time.MutableDateTime.Property property25 = mutableDateTime24.era();
        boolean boolean26 = dateTime23.isAfter((org.joda.time.ReadableInstant) mutableDateTime24);
        org.joda.time.DateTime dateTime28 = dateTime23.plusMillis(127);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 100 + "'", int22 == 100);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(dateTime28);
    }

    @Test
    public void test2320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2320");
        java.time.LocalTime localTime4 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime5 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime4);
        java.time.LocalTime localTime10 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime11 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime10);
        java.time.temporal.ChronoField chronoField12 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime14 = localTime10.with((java.time.temporal.TemporalField) chronoField12, (long) (short) 1);
        long long15 = localTime4.getLong((java.time.temporal.TemporalField) chronoField12);
        java.time.LocalTime localTime17 = localTime4.withSecond((int) (short) 1);
        int int18 = localTime17.getMinute();
        java.time.LocalTime localTime20 = localTime17.plusHours((long) (-1));
        java.lang.String str21 = localTime20.toString();
        org.joda.time.Period period22 = org.joda.time.Period.ZERO;
        org.joda.time.Period period23 = period22.normalizedStandard();
        org.joda.time.Period period25 = period22.plusHours(2);
        java.time.chrono.IsoEra isoEra26 = java.time.chrono.IsoEra.CE;
        boolean boolean27 = period25.equals((java.lang.Object) isoEra26);
        java.time.LocalTime localTime32 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime33 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime32);
        java.time.LocalTime localTime38 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime39 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime38);
        java.time.temporal.ChronoField chronoField40 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime42 = localTime38.with((java.time.temporal.TemporalField) chronoField40, (long) (short) 1);
        long long43 = localTime32.getLong((java.time.temporal.TemporalField) chronoField40);
        boolean boolean44 = isoEra26.isSupported((java.time.temporal.TemporalField) chronoField40);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery45 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period46 = isoEra26.query(periodTemporalQuery45);
        boolean boolean47 = period46.isNegative();
        java.time.Period period49 = period46.plusDays((long) ' ');
        boolean boolean50 = period46.isNegative();
        java.time.Period period52 = period46.minusYears((long) 10);
        org.joda.time.Period period53 = org.joda.time.Period.ZERO;
        org.joda.time.Period period54 = period53.normalizedStandard();
        org.joda.time.Period period56 = period53.plusHours(2);
        java.time.chrono.IsoEra isoEra57 = java.time.chrono.IsoEra.CE;
        boolean boolean58 = period56.equals((java.lang.Object) isoEra57);
        java.time.LocalTime localTime63 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime64 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime63);
        java.time.LocalTime localTime69 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime70 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime69);
        java.time.temporal.ChronoField chronoField71 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime73 = localTime69.with((java.time.temporal.TemporalField) chronoField71, (long) (short) 1);
        long long74 = localTime63.getLong((java.time.temporal.TemporalField) chronoField71);
        boolean boolean75 = isoEra57.isSupported((java.time.temporal.TemporalField) chronoField71);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery76 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period77 = isoEra57.query(periodTemporalQuery76);
        java.time.chrono.ChronoPeriod chronoPeriod78 = period52.minus((java.time.temporal.TemporalAmount) period77);
        java.util.List<java.time.temporal.TemporalUnit> temporalUnitList79 = period77.getUnits();
        int int80 = period77.getMonths();
        java.time.chrono.ChronoPeriod chronoPeriod82 = period77.multipliedBy((int) '\uffff');
        java.time.temporal.Temporal temporal83 = localTime20.plus((java.time.temporal.TemporalAmount) chronoPeriod82);
        java.util.Properties properties84 = null;
        java.util.Properties properties85 = new java.util.Properties(properties84);
        java.nio.LongBuffer longBuffer87 = java.nio.LongBuffer.allocate((int) (short) 0);
        java.nio.Buffer buffer88 = longBuffer87.mark();
        boolean boolean89 = properties85.containsKey((java.lang.Object) longBuffer87);
        java.util.Enumeration<java.lang.Object> objEnumeration90 = properties85.elements();
        boolean boolean91 = chronoPeriod82.equals((java.lang.Object) objEnumeration90);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj92 = objEnumeration90.nextElement();
            org.junit.Assert.fail("Expected exception of type java.util.NoSuchElementException; message: null");
        } catch (java.util.NoSuchElementException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertTrue("'" + chronoField12 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField12.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 3601000000001L + "'", long15 == 3601000000001L);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "00:00:01.000000001" + "'", str21, "00:00:01.000000001");
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertTrue("'" + isoEra26 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra26.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(localTime32);
        org.junit.Assert.assertNotNull(localTime33);
        org.junit.Assert.assertNotNull(localTime38);
        org.junit.Assert.assertNotNull(localTime39);
        org.junit.Assert.assertTrue("'" + chronoField40 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField40.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime42);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 3601000000001L + "'", long43 == 3601000000001L);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(periodTemporalQuery45);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(period49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(period54);
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertTrue("'" + isoEra57 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra57.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(localTime63);
        org.junit.Assert.assertNotNull(localTime64);
        org.junit.Assert.assertNotNull(localTime69);
        org.junit.Assert.assertNotNull(localTime70);
        org.junit.Assert.assertTrue("'" + chronoField71 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField71.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime73);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 3601000000001L + "'", long74 == 3601000000001L);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(periodTemporalQuery76);
        org.junit.Assert.assertNotNull(period77);
        org.junit.Assert.assertNotNull(chronoPeriod78);
        org.junit.Assert.assertNotNull(temporalUnitList79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertNotNull(chronoPeriod82);
        org.junit.Assert.assertNotNull(temporal83);
        org.junit.Assert.assertNotNull(longBuffer87);
        org.junit.Assert.assertNotNull(buffer88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(objEnumeration90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
    }

    @Test
    public void test2321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2321");
        java.util.GregorianCalendar gregorianCalendar5 = new java.util.GregorianCalendar(12, 4096, 7, (-1), (int) (short) 10);
        int int6 = gregorianCalendar5.getWeeksInWeekYear();
        java.lang.String str7 = gregorianCalendar5.getCalendarType();
        java.time.ZonedDateTime zonedDateTime8 = gregorianCalendar5.toZonedDateTime();
        java.time.ZonedDateTime zonedDateTime10 = zonedDateTime8.minusMonths((long) 10);
        int int11 = zonedDateTime8.getMonthValue();
        int int12 = zonedDateTime8.getSecond();
        java.util.GregorianCalendar gregorianCalendar18 = new java.util.GregorianCalendar(12, 4096, 7, (-1), (int) (short) 10);
        int int19 = gregorianCalendar18.getWeeksInWeekYear();
        java.lang.String str20 = gregorianCalendar18.getCalendarType();
        java.time.ZonedDateTime zonedDateTime21 = gregorianCalendar18.toZonedDateTime();
        java.time.ZonedDateTime zonedDateTime23 = zonedDateTime21.minusMonths((long) 10);
        java.time.chrono.ChronoZonedDateTime<java.time.LocalDate> localDateChronoZonedDateTime24 = zonedDateTime21.withEarlierOffsetAtOverlap();
        java.time.ZonedDateTime zonedDateTime26 = zonedDateTime21.minusMonths((long) 4200);
        boolean boolean27 = zonedDateTime8.isBefore((java.time.chrono.ChronoZonedDateTime<java.time.LocalDate>) zonedDateTime26);
        java.time.ZonedDateTime zonedDateTime29 = zonedDateTime8.withYear(53);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 52 + "'", int6 == 52);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "gregory" + "'", str7, "gregory");
        org.junit.Assert.assertNotNull(zonedDateTime8);
        org.junit.Assert.assertNotNull(zonedDateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 5 + "'", int11 == 5);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 59 + "'", int12 == 59);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 52 + "'", int19 == 52);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "gregory" + "'", str20, "gregory");
        org.junit.Assert.assertNotNull(zonedDateTime21);
        org.junit.Assert.assertNotNull(zonedDateTime23);
        org.junit.Assert.assertNotNull(localDateChronoZonedDateTime24);
        org.junit.Assert.assertNotNull(zonedDateTime26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(zonedDateTime29);
    }

    @Test
    public void test2322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2322");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardMinutes((long) 292269054);
        java.lang.String str2 = duration1.toString();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalTime localTime7 = new org.joda.time.LocalTime((long) 0, chronology6);
        org.joda.time.Chronology chronology8 = localTime7.getChronology();
        java.util.Locale locale9 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale10 = java.util.Locale.GERMANY;
        java.lang.String str11 = locale9.getDisplayScript(locale10);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket13 = new org.joda.time.format.DateTimeParserBucket((long) 1970, chronology8, locale9, (java.lang.Integer) 1);
        org.joda.time.DateTimeField dateTimeField14 = chronology8.clockhourOfDay();
        org.joda.time.Period period19 = new org.joda.time.Period((int) '#', 0, 2, (int) (short) 100);
        org.joda.time.Period period21 = period19.withSeconds(12);
        int int22 = period21.getMillis();
        int[] intArray24 = chronology8.get((org.joda.time.ReadablePeriod) period21, (long) (byte) 10);
        org.joda.time.DateMidnight dateMidnight25 = new org.joda.time.DateMidnight((-9223372036854775808L), chronology8);
        org.joda.time.DateMidnight dateMidnight27 = dateMidnight25.withYearOfEra(1728000);
        org.joda.time.Period period28 = duration1.toPeriodTo((org.joda.time.ReadableInstant) dateMidnight25);
        org.joda.time.Period period30 = period28.plusWeeks(47);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "PT17536143240S" + "'", str2, "PT17536143240S");
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 100 + "'", int22 == 100);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[0, 0, 0, 0, 0, 0, 0, 10]");
        org.junit.Assert.assertNotNull(dateMidnight27);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(period30);
    }

    @Test
    public void test2323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2323");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Duration duration2 = new org.joda.time.Duration(readableInstant0, readableInstant1);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = duration2.toPeriodTo(readableInstant3, periodType4);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.Duration duration8 = new org.joda.time.Duration(readableInstant6, readableInstant7);
        long long9 = duration8.getMillis();
        boolean boolean10 = duration2.isShorterThan((org.joda.time.ReadableDuration) duration8);
        java.time.LocalDateTime localDateTime11 = java.time.LocalDateTime.now();
        java.time.temporal.ChronoField chronoField12 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime14 = localDateTime11.with((java.time.temporal.TemporalField) chronoField12, (long) 10);
        java.time.LocalDateTime localDateTime16 = localDateTime11.minusMinutes((long) 12);
        org.joda.time.Period period17 = org.joda.time.Period.ZERO;
        org.joda.time.Period period18 = period17.normalizedStandard();
        org.joda.time.Period period20 = period17.plusHours(2);
        org.joda.time.DurationFieldType durationFieldType21 = org.joda.time.DurationFieldType.hours();
        int int22 = period17.indexOf(durationFieldType21);
        org.joda.time.Weeks weeks23 = period17.toStandardWeeks();
        boolean boolean24 = localDateTime16.equals((java.lang.Object) weeks23);
        org.joda.time.PeriodType periodType25 = weeks23.getPeriodType();
        org.joda.time.PeriodType periodType26 = weeks23.getPeriodType();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.Period period28 = duration2.toPeriod(periodType26, chronology27);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + chronoField12 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField12.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(durationFieldType21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 4 + "'", int22 == 4);
        org.junit.Assert.assertNotNull(weeks23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(periodType25);
        org.junit.Assert.assertNotNull(periodType26);
        org.junit.Assert.assertNotNull(period28);
    }

    @Test
    public void test2324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2324");
        java.time.LocalTime localTime4 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime5 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime4);
        java.time.temporal.ChronoField chronoField6 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime8 = localTime4.with((java.time.temporal.TemporalField) chronoField6, (long) (short) 1);
        java.time.Duration duration10 = java.time.Duration.ofMinutes((long) 3);
        java.time.LocalTime localTime11 = localTime4.minus((java.time.temporal.TemporalAmount) duration10);
        java.time.Duration duration13 = java.time.Duration.ofSeconds((long) 256);
        java.time.Duration duration14 = duration10.minus(duration13);
        int int15 = duration13.getNano();
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertTrue("'" + chronoField6 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField6.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
    }

    @Test
    public void test2325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2325");
        java.net.Proxy proxy0 = java.net.Proxy.NO_PROXY;
        java.net.Proxy.Type type1 = proxy0.type();
        java.net.SocketAddress socketAddress2 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.net.Proxy proxy3 = new java.net.Proxy(type1, socketAddress2);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: type DIRECT is not compatible with address null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(proxy0);
        org.junit.Assert.assertTrue("'" + type1 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type1.equals(java.net.Proxy.Type.DIRECT));
    }

    @Test
    public void test2326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2326");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Duration duration2 = new org.joda.time.Duration(readableInstant0, readableInstant1);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = duration2.toPeriodTo(readableInstant3, periodType4);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.Duration duration8 = new org.joda.time.Duration(readableInstant6, readableInstant7);
        long long9 = duration8.getMillis();
        boolean boolean10 = duration2.isShorterThan((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) 3, chronology12);
        org.joda.time.DateTime.Property property14 = dateTime13.dayOfYear();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight((java.lang.Object) dateTime13, chronology15);
        org.joda.time.MutableDateTime mutableDateTime17 = dateTime13.toMutableDateTime();
        mutableDateTime17.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime17.dayOfWeek();
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime17.year();
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime17.weekyear();
        boolean boolean23 = duration2.equals((java.lang.Object) mutableDateTime17);
        mutableDateTime17.addMonths((int) ' ');
        mutableDateTime17.add((long) (byte) 10);
        org.joda.time.Period period28 = org.joda.time.Period.ZERO;
        org.joda.time.Period period29 = period28.normalizedStandard();
        org.joda.time.Period period31 = period28.plusHours(2);
        java.time.chrono.IsoEra isoEra32 = java.time.chrono.IsoEra.CE;
        boolean boolean33 = period31.equals((java.lang.Object) isoEra32);
        int int34 = period31.getMinutes();
        mutableDateTime17.add((org.joda.time.ReadablePeriod) period31);
        java.util.TimeZone timeZone37 = null;
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forTimeZone(timeZone37);
        org.joda.time.DateMidnight dateMidnight39 = new org.joda.time.DateMidnight((long) 1970, dateTimeZone38);
        long long42 = dateTimeZone38.convertLocalToUTC((long) 3, false);
        long long45 = dateTimeZone38.convertLocalToUTC(0L, true);
        mutableDateTime17.setZoneRetainFields(dateTimeZone38);
        java.lang.String str47 = dateTimeZone38.toString();
        org.joda.time.chrono.EthiopicChronology ethiopicChronology48 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone38);
        org.joda.time.DateTimeField dateTimeField49 = ethiopicChronology48.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone50 = ethiopicChronology48.getZone();
        org.joda.time.DateTimeField dateTimeField51 = ethiopicChronology48.era();
        org.joda.time.DateTimeField dateTimeField52 = ethiopicChronology48.secondOfDay();
        org.joda.time.DateTimeField dateTimeField53 = ethiopicChronology48.minuteOfHour();
        org.joda.time.DurationField durationField54 = ethiopicChronology48.months();
        org.joda.time.DateTimeField dateTimeField55 = ethiopicChronology48.weekyearOfCentury();
        org.joda.time.Minutes minutes56 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes58 = minutes56.minus(12);
        org.joda.time.Minutes minutes59 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes61 = minutes59.minus(12);
        org.joda.time.Minutes minutes62 = minutes56.minus(minutes59);
        org.joda.time.DurationFieldType durationFieldType63 = minutes56.getFieldType();
        int[] intArray66 = ethiopicChronology48.get((org.joda.time.ReadablePeriod) minutes56, (long) 30, (long) 741000000);
        java.nio.IntBuffer intBuffer67 = java.nio.IntBuffer.wrap(intArray66);
        java.nio.IntBuffer intBuffer68 = intBuffer67.duplicate();
        java.util.GregorianCalendar gregorianCalendar74 = new java.util.GregorianCalendar(12, 4096, 7, (-1), (int) (short) 10);
        int int75 = gregorianCalendar74.getWeeksInWeekYear();
        org.joda.time.YearMonthDay yearMonthDay76 = org.joda.time.YearMonthDay.fromCalendarFields((java.util.Calendar) gregorianCalendar74);
        org.joda.time.YearMonthDay yearMonthDay78 = yearMonthDay76.withYear(0);
        int int79 = yearMonthDay76.getMonthOfYear();
        org.joda.time.Chronology chronology80 = yearMonthDay76.getChronology();
        int[] intArray81 = yearMonthDay76.getValues();
        // The following exception was thrown during execution in test generation
        try {
            java.nio.IntBuffer intBuffer84 = intBuffer68.put(intArray81, 197, 1970);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertTrue("'" + isoEra32 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra32.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 3L + "'", long42 == 3L);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Etc/UTC" + "'", str47, "Etc/UTC");
        org.junit.Assert.assertNotNull(ethiopicChronology48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(durationField54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(minutes56);
        org.junit.Assert.assertNotNull(minutes58);
        org.junit.Assert.assertNotNull(minutes59);
        org.junit.Assert.assertNotNull(minutes61);
        org.junit.Assert.assertNotNull(minutes62);
        org.junit.Assert.assertNotNull(durationFieldType63);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[12349]");
        org.junit.Assert.assertNotNull(intBuffer67);
        org.junit.Assert.assertNotNull(intBuffer68);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 52 + "'", int75 == 52);
        org.junit.Assert.assertNotNull(yearMonthDay76);
        org.junit.Assert.assertNotNull(yearMonthDay78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 5 + "'", int79 == 5);
        org.junit.Assert.assertNotNull(chronology80);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[353, 5, 6]");
    }

    @Test
    public void test2327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2327");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 3, chronology1);
        org.joda.time.DateTime.Property property3 = dateTime2.dayOfYear();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight((java.lang.Object) dateTime2, chronology4);
        org.joda.time.DateMidnight.Property property6 = dateMidnight5.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight7 = property6.roundCeilingCopy();
        org.joda.time.DateMidnight dateMidnight8 = property6.roundHalfFloorCopy();
        org.joda.time.DateMidnight dateMidnight9 = property6.roundHalfFloorCopy();
        int int10 = dateMidnight9.getDayOfWeek();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(dateMidnight8);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 4 + "'", int10 == 4);
    }

    @Test
    public void test2328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2328");
        org.joda.time.Weeks weeks0 = org.joda.time.Weeks.ONE;
        java.util.concurrent.TimeUnit timeUnit1 = java.util.concurrent.TimeUnit.NANOSECONDS;
        boolean boolean2 = weeks0.equals((java.lang.Object) timeUnit1);
        org.joda.time.MutablePeriod mutablePeriod3 = weeks0.toMutablePeriod();
        mutablePeriod3.add((int) '#', 0, 10, 0, (int) (byte) 0, (int) (short) 0, 1, (-1));
        mutablePeriod3.clear();
        org.joda.time.Period period14 = org.joda.time.Period.ZERO;
        org.joda.time.Period period15 = period14.normalizedStandard();
        org.joda.time.Period period17 = period14.plusHours(2);
        org.joda.time.DurationFieldType durationFieldType18 = org.joda.time.DurationFieldType.hours();
        int int19 = period14.indexOf(durationFieldType18);
        mutablePeriod3.set(durationFieldType18, (int) (byte) 10);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.LocalTime localTime25 = new org.joda.time.LocalTime((long) 0, chronology24);
        org.joda.time.Chronology chronology26 = localTime25.getChronology();
        java.util.Locale locale27 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale28 = java.util.Locale.GERMANY;
        java.lang.String str29 = locale27.getDisplayScript(locale28);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket31 = new org.joda.time.format.DateTimeParserBucket((long) 1970, chronology26, locale27, (java.lang.Integer) 1);
        org.joda.time.DateTime dateTime32 = org.joda.time.DateTime.now(chronology26);
        org.joda.time.DurationField durationField33 = durationFieldType18.getField(chronology26);
        long long36 = durationField33.add(57L, 365);
        long long38 = durationField33.getMillis((-4));
        long long41 = durationField33.add(34450799000000L, 99);
        long long43 = durationField33.getMillis(30);
        org.junit.Assert.assertNotNull(weeks0);
        org.junit.Assert.assertNotNull(timeUnit1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(mutablePeriod3);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(durationFieldType18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 4 + "'", int19 == 4);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 1314000057L + "'", long36 == 1314000057L);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + (-14400000L) + "'", long38 == (-14400000L));
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 34451155400000L + "'", long41 == 34451155400000L);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 108000000L + "'", long43 == 108000000L);
    }

    @Test
    public void test2329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2329");
        float[] floatArray2 = new float[] { (-1L), (byte) -1 };
        java.nio.FloatBuffer floatBuffer3 = java.nio.FloatBuffer.wrap(floatArray2);
        java.nio.FloatBuffer floatBuffer4 = floatBuffer3.compact();
        boolean boolean5 = floatBuffer4.isDirect();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) 3, chronology7);
        org.joda.time.DateTime.Property property9 = dateTime8.dayOfYear();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight((java.lang.Object) dateTime8, chronology10);
        org.joda.time.MutableDateTime mutableDateTime12 = dateTime8.toMutableDateTime();
        mutableDateTime12.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime12.dayOfWeek();
        int int16 = property15.get();
        boolean boolean17 = floatBuffer4.equals((java.lang.Object) int16);
        // The following exception was thrown during execution in test generation
        try {
            float float18 = floatBuffer4.get();
            org.junit.Assert.fail("Expected exception of type java.nio.BufferUnderflowException; message: null");
        } catch (java.nio.BufferUnderflowException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[-1.0, -1.0]");
        org.junit.Assert.assertNotNull(floatBuffer3);
        org.junit.Assert.assertNotNull(floatBuffer4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 3 + "'", int16 == 3);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test2330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2330");
        java.time.Duration duration1 = java.time.Duration.ofNanos((long) 9);
        org.junit.Assert.assertNotNull(duration1);
    }

    @Test
    public void test2331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2331");
        org.joda.time.chrono.EthiopicChronology ethiopicChronology0 = org.joda.time.chrono.EthiopicChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = ethiopicChronology0.dayOfWeek();
        org.joda.time.DurationField durationField2 = ethiopicChronology0.centuries();
        org.joda.time.DateTimeField dateTimeField3 = ethiopicChronology0.weekyear();
        org.joda.time.LocalTime localTime5 = org.joda.time.LocalTime.parse("1");
        org.joda.time.Period period6 = org.joda.time.Period.ZERO;
        org.joda.time.Period period7 = period6.normalizedStandard();
        org.joda.time.Period period9 = period7.minusMinutes((int) ' ');
        org.joda.time.Period period11 = period9.minusMonths((int) (byte) 0);
        org.joda.time.LocalTime localTime12 = localTime5.minus((org.joda.time.ReadablePeriod) period11);
        java.util.Locale locale13 = java.util.Locale.US;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str14 = dateTimeField3.getAsText((org.joda.time.ReadablePartial) localTime12, locale13);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'weekyear' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(ethiopicChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en_US");
    }

    @Test
    public void test2332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2332");
        int int0 = java.util.Spliterator.SORTED;
        org.junit.Assert.assertTrue("'" + int0 + "' != '" + 4 + "'", int0 == 4);
    }

    @Test
    public void test2333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2333");
        java.util.stream.IntStream intStream2 = java.util.stream.IntStream.rangeClosed(100, (int) '4');
        java.util.stream.IntStream intStream3 = intStream2.sequential();
        java.util.function.IntUnaryOperator intUnaryOperator4 = java.util.function.IntUnaryOperator.identity();
        java.util.stream.IntStream intStream5 = intStream2.map(intUnaryOperator4);
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.LongStream longStream6 = intStream2.asLongStream();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: stream has already been operated upon or closed");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intStream2);
        org.junit.Assert.assertNotNull(intStream3);
        org.junit.Assert.assertNotNull(intUnaryOperator4);
        org.junit.Assert.assertNotNull(intStream5);
    }

    @Test
    public void test2334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2334");
        java.time.OffsetDateTime offsetDateTime0 = java.time.OffsetDateTime.now();
        java.time.LocalDate localDate1 = offsetDateTime0.toLocalDate();
        java.time.OffsetDateTime offsetDateTime2 = java.time.OffsetDateTime.now();
        java.time.temporal.ChronoField chronoField3 = java.time.temporal.ChronoField.HOUR_OF_DAY;
        boolean boolean4 = offsetDateTime2.isSupported((java.time.temporal.TemporalField) chronoField3);
        boolean boolean5 = offsetDateTime0.isEqual(offsetDateTime2);
        java.time.OffsetDateTime offsetDateTime7 = offsetDateTime2.withNano(19043);
        // The following exception was thrown during execution in test generation
        try {
            java.time.OffsetDateTime offsetDateTime9 = offsetDateTime2.minusWeeks(115430400000L);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for Year (valid values -999999999 - 999999999): -2212261885");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(offsetDateTime0);
        org.junit.Assert.assertNotNull(localDate1);
        org.junit.Assert.assertNotNull(offsetDateTime2);
        org.junit.Assert.assertTrue("'" + chronoField3 + "' != '" + java.time.temporal.ChronoField.HOUR_OF_DAY + "'", chronoField3.equals(java.time.temporal.ChronoField.HOUR_OF_DAY));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(offsetDateTime7);
    }

    @Test
    public void test2335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2335");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.nio.LongBuffer longBuffer3 = java.nio.LongBuffer.allocate((int) (short) 0);
        java.nio.Buffer buffer4 = longBuffer3.mark();
        boolean boolean5 = properties1.containsKey((java.lang.Object) longBuffer3);
        java.util.Collection<java.lang.Object> objCollection6 = properties1.values();
        java.util.Properties properties7 = new java.util.Properties(properties1);
        java.time.format.DecimalStyle decimalStyle8 = java.time.format.DecimalStyle.STANDARD;
        java.time.format.DecimalStyle decimalStyle10 = decimalStyle8.withNegativeSign('/');
        java.time.format.DecimalStyle decimalStyle12 = decimalStyle8.withPositiveSign('\uffff');
        java.util.GregorianCalendar gregorianCalendar18 = new java.util.GregorianCalendar(12, 4096, 7, (-1), (int) (short) 10);
        int int19 = gregorianCalendar18.getWeeksInWeekYear();
        java.lang.String str20 = gregorianCalendar18.getCalendarType();
        java.time.ZonedDateTime zonedDateTime21 = gregorianCalendar18.toZonedDateTime();
        java.util.GregorianCalendar gregorianCalendar27 = new java.util.GregorianCalendar(12, 4096, 7, (-1), (int) (short) 10);
        int int28 = gregorianCalendar27.getWeeksInWeekYear();
        java.lang.String str29 = gregorianCalendar27.getCalendarType();
        java.time.ZonedDateTime zonedDateTime30 = gregorianCalendar27.toZonedDateTime();
        int int31 = zonedDateTime21.compareTo((java.time.chrono.ChronoZonedDateTime<java.time.LocalDate>) zonedDateTime30);
        java.time.ZonedDateTime zonedDateTime33 = zonedDateTime21.plusDays((long) 2022);
        java.time.Instant instant34 = zonedDateTime21.toInstant();
        java.time.chrono.Chronology chronology35 = zonedDateTime21.getChronology();
        java.util.GregorianCalendar gregorianCalendar41 = new java.util.GregorianCalendar(12, 4096, 7, (-1), (int) (short) 10);
        int int42 = gregorianCalendar41.getWeeksInWeekYear();
        java.lang.String str43 = gregorianCalendar41.getCalendarType();
        java.time.ZonedDateTime zonedDateTime44 = gregorianCalendar41.toZonedDateTime();
        java.time.ZonedDateTime zonedDateTime46 = zonedDateTime44.minusMonths((long) 10);
        boolean boolean47 = zonedDateTime21.isBefore((java.time.chrono.ChronoZonedDateTime<java.time.LocalDate>) zonedDateTime46);
        java.time.OffsetDateTime offsetDateTime48 = java.time.OffsetDateTime.from((java.time.temporal.TemporalAccessor) zonedDateTime21);
        java.time.temporal.ChronoField chronoField49 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        java.time.OffsetDateTime offsetDateTime51 = offsetDateTime48.with((java.time.temporal.TemporalField) chronoField49, (long) 17);
        boolean boolean52 = decimalStyle8.equals((java.lang.Object) offsetDateTime48);
        int int53 = offsetDateTime48.getMinute();
        java.lang.Object obj54 = properties7.get((java.lang.Object) offsetDateTime48);
        org.junit.Assert.assertNotNull(longBuffer3);
        org.junit.Assert.assertNotNull(buffer4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(objCollection6);
        org.junit.Assert.assertNotNull(decimalStyle8);
        org.junit.Assert.assertNotNull(decimalStyle10);
        org.junit.Assert.assertNotNull(decimalStyle12);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 52 + "'", int19 == 52);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "gregory" + "'", str20, "gregory");
        org.junit.Assert.assertNotNull(zonedDateTime21);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 52 + "'", int28 == 52);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "gregory" + "'", str29, "gregory");
        org.junit.Assert.assertNotNull(zonedDateTime30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(zonedDateTime33);
        org.junit.Assert.assertNotNull(instant34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 52 + "'", int42 == 52);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "gregory" + "'", str43, "gregory");
        org.junit.Assert.assertNotNull(zonedDateTime44);
        org.junit.Assert.assertNotNull(zonedDateTime46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(offsetDateTime48);
        org.junit.Assert.assertTrue("'" + chronoField49 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField49.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertNotNull(offsetDateTime51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int53 + "' != '" + 9 + "'", int53 == 9);
        org.junit.Assert.assertNull(obj54);
    }

    @Test
    public void test2336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2336");
        java.io.File file0 = null;
        java.io.File file2 = new java.io.File(file0, "1970-01-01T00:00:00.003Z");
        java.net.URL uRL3 = file2.toURL();
        boolean boolean6 = file2.setExecutable(true, false);
        boolean boolean8 = file2.setLastModified((long) (short) 0);
        org.junit.Assert.assertNull("file2.getParent() == null", file2.getParent());
        org.junit.Assert.assertEquals(file2.toString(), "1970-01-01T00:00:00.003Z");
        org.junit.Assert.assertNotNull(uRL3);
// flaky:         org.junit.Assert.assertEquals(uRL3.toString(), "file:/experiment/1970-01-01T00:00:00.003Z/");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void test2337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2337");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Duration duration2 = new org.joda.time.Duration(readableInstant0, readableInstant1);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = duration2.toPeriodTo(readableInstant3, periodType4);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.Duration duration8 = new org.joda.time.Duration(readableInstant6, readableInstant7);
        long long9 = duration8.getMillis();
        boolean boolean10 = duration2.isShorterThan((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) 3, chronology12);
        org.joda.time.DateTime.Property property14 = dateTime13.dayOfYear();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight((java.lang.Object) dateTime13, chronology15);
        org.joda.time.MutableDateTime mutableDateTime17 = dateTime13.toMutableDateTime();
        mutableDateTime17.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime17.dayOfWeek();
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime17.year();
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime17.weekyear();
        boolean boolean23 = duration2.equals((java.lang.Object) mutableDateTime17);
        mutableDateTime17.addMonths((int) ' ');
        mutableDateTime17.add((long) (byte) 10);
        org.joda.time.Period period28 = org.joda.time.Period.ZERO;
        org.joda.time.Period period29 = period28.normalizedStandard();
        org.joda.time.Period period31 = period28.plusHours(2);
        java.time.chrono.IsoEra isoEra32 = java.time.chrono.IsoEra.CE;
        boolean boolean33 = period31.equals((java.lang.Object) isoEra32);
        int int34 = period31.getMinutes();
        mutableDateTime17.add((org.joda.time.ReadablePeriod) period31);
        java.util.TimeZone timeZone37 = null;
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forTimeZone(timeZone37);
        org.joda.time.DateMidnight dateMidnight39 = new org.joda.time.DateMidnight((long) 1970, dateTimeZone38);
        long long42 = dateTimeZone38.convertLocalToUTC((long) 3, false);
        long long45 = dateTimeZone38.convertLocalToUTC(0L, true);
        mutableDateTime17.setZoneRetainFields(dateTimeZone38);
        java.lang.String str47 = dateTimeZone38.toString();
        org.joda.time.chrono.EthiopicChronology ethiopicChronology48 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone38);
        org.joda.time.DateTimeField dateTimeField49 = ethiopicChronology48.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone50 = ethiopicChronology48.getZone();
        org.joda.time.DateTimeField dateTimeField51 = ethiopicChronology48.era();
        org.joda.time.DurationField durationField52 = ethiopicChronology48.seconds();
        long long54 = durationField52.getValueAsLong((long) (short) 100);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertTrue("'" + isoEra32 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra32.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 3L + "'", long42 == 3L);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Etc/UTC" + "'", str47, "Etc/UTC");
        org.junit.Assert.assertNotNull(ethiopicChronology48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(durationField52);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 0L + "'", long54 == 0L);
    }

    @Test
    public void test2338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2338");
        // The following exception was thrown during execution in test generation
        try {
            java.time.temporal.ValueRange valueRange2 = java.time.temporal.ValueRange.of((long) 0, (long) (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minimum value must be less than maximum value");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test2339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2339");
        org.joda.time.YearMonthDay yearMonthDay0 = new org.joda.time.YearMonthDay();
        java.util.TimeZone timeZone3 = null;
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight((long) 1970, dateTimeZone4);
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((long) 3600000, dateTimeZone4);
        org.joda.time.DateMidnight dateMidnight7 = yearMonthDay0.toDateMidnight(dateTimeZone4);
        org.joda.time.LocalDate localDate8 = yearMonthDay0.toLocalDate();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) 3, chronology10);
        org.joda.time.DateTime.Property property12 = dateTime11.dayOfYear();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) 3, chronology14);
        org.joda.time.DateTime.Property property16 = dateTime15.dayOfYear();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight((java.lang.Object) dateTime15, chronology17);
        org.joda.time.DateMidnight dateMidnight20 = dateMidnight18.minusMonths((-1));
        org.joda.time.DateMidnight dateMidnight22 = dateMidnight18.withDayOfYear((int) ' ');
        int int23 = dateMidnight18.getWeekOfWeekyear();
        long long24 = property12.getDifferenceAsLong((org.joda.time.ReadableInstant) dateMidnight18);
        boolean boolean26 = dateMidnight18.isAfter(10L);
        boolean boolean27 = localDate8.equals((java.lang.Object) dateMidnight18);
        org.joda.time.Period period28 = org.joda.time.Period.ZERO;
        org.joda.time.Period period29 = period28.normalizedStandard();
        org.joda.time.Period period31 = period29.minusMinutes((int) ' ');
        org.joda.time.Period period33 = period31.minusMonths((int) (byte) 0);
        org.joda.time.LocalDate localDate34 = localDate8.plus((org.joda.time.ReadablePeriod) period33);
        org.joda.time.LocalDate.Property property35 = localDate34.era();
        int int36 = localDate34.getYearOfEra();
        java.util.TimeZone timeZone38 = null;
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forTimeZone(timeZone38);
        org.joda.time.DateMidnight dateMidnight40 = new org.joda.time.DateMidnight((long) 1970, dateTimeZone39);
        org.joda.time.DateTime dateTime41 = localDate34.toDateTimeAtCurrentTime(dateTimeZone39);
        java.lang.String str43 = dateTimeZone39.getShortName((long) 710);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2022 + "'", int36 == 2022);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "+00:00" + "'", str43, "+00:00");
    }

    @Test
    public void test2340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2340");
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintWriter printWriter2 = new java.io.PrintWriter("23:59:59.999999999", "2022-02-21T09:36:03.019Z");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: 2022-02-21T09:36:03.019Z");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test2341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2341");
        java.time.LocalTime localTime1 = java.time.LocalTime.ofSecondOfDay((long) ' ');
        org.junit.Assert.assertNotNull(localTime1);
    }

    @Test
    public void test2342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2342");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.yearOfCentury();
        int int3 = property2.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime5 = property2.addToCopy((long) (-1));
        org.joda.time.LocalDateTime localDateTime6 = property2.roundHalfFloorCopy();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime8 = localDateTime6.withDayOfWeek(508);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 508 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 99 + "'", int3 == 99);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
    }

    @Test
    public void test2343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2343");
        java.util.GregorianCalendar gregorianCalendar5 = new java.util.GregorianCalendar(12, 4096, 7, (-1), (int) (short) 10);
        int int6 = gregorianCalendar5.getWeeksInWeekYear();
        java.lang.String str7 = gregorianCalendar5.getCalendarType();
        java.time.ZonedDateTime zonedDateTime8 = gregorianCalendar5.toZonedDateTime();
        java.time.ZonedDateTime zonedDateTime10 = zonedDateTime8.minusMonths((long) 10);
        java.time.ZonedDateTime zonedDateTime12 = zonedDateTime10.minusHours((long) 9);
        java.time.LocalDate localDate13 = zonedDateTime10.toLocalDate();
        java.time.ZoneId zoneId14 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.time.ZonedDateTime zonedDateTime15 = zonedDateTime10.withZoneSameLocal(zoneId14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: zone");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 52 + "'", int6 == 52);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "gregory" + "'", str7, "gregory");
        org.junit.Assert.assertNotNull(zonedDateTime8);
        org.junit.Assert.assertNotNull(zonedDateTime10);
        org.junit.Assert.assertNotNull(zonedDateTime12);
        org.junit.Assert.assertNotNull(localDate13);
    }

    @Test
    public void test2344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2344");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.time.LocalTime localTime6 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime7 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime6);
        java.time.LocalTime localTime12 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime13 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime12);
        java.time.temporal.ChronoField chronoField14 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime16 = localTime12.with((java.time.temporal.TemporalField) chronoField14, (long) (short) 1);
        long long17 = localTime6.getLong((java.time.temporal.TemporalField) chronoField14);
        java.time.LocalTime localTime19 = localTime6.withSecond((int) (short) 1);
        java.lang.Object obj21 = properties1.put((java.lang.Object) localTime19, (java.lang.Object) "117");
        java.time.LocalDateTime localDateTime22 = java.time.LocalDateTime.MIN;
        java.time.Month month23 = java.time.Month.NOVEMBER;
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime24 = localDateTime22.with((java.time.temporal.TemporalAdjuster) month23);
        java.time.LocalDate localDate27 = java.time.LocalDate.ofEpochDay((long) ' ');
        int int28 = localDate27.getMonthValue();
        org.joda.time.Period period29 = org.joda.time.Period.ZERO;
        org.joda.time.Period period30 = period29.normalizedStandard();
        org.joda.time.Period period32 = period29.plusHours(2);
        java.time.chrono.IsoEra isoEra33 = java.time.chrono.IsoEra.CE;
        boolean boolean34 = period32.equals((java.lang.Object) isoEra33);
        java.time.LocalTime localTime39 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime40 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime39);
        java.time.LocalTime localTime45 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime46 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime45);
        java.time.temporal.ChronoField chronoField47 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime49 = localTime45.with((java.time.temporal.TemporalField) chronoField47, (long) (short) 1);
        long long50 = localTime39.getLong((java.time.temporal.TemporalField) chronoField47);
        boolean boolean51 = isoEra33.isSupported((java.time.temporal.TemporalField) chronoField47);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery52 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period53 = isoEra33.query(periodTemporalQuery52);
        boolean boolean54 = period53.isNegative();
        java.time.Period period56 = period53.plusDays((long) ' ');
        java.time.temporal.ChronoField chronoField57 = java.time.temporal.ChronoField.SECOND_OF_DAY;
        boolean boolean58 = period53.equals((java.lang.Object) chronoField57);
        boolean boolean59 = localDate27.isSupported((java.time.temporal.TemporalField) chronoField57);
        java.time.temporal.TemporalUnit temporalUnit60 = chronoField57.getRangeUnit();
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime61 = localDateChronoLocalDateTime24.plus(1L, temporalUnit60);
        java.time.LocalTime localTime62 = localTime19.truncatedTo(temporalUnit60);
        int int63 = localTime62.getSecond();
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertTrue("'" + chronoField14 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField14.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 3601000000001L + "'", long17 == 3601000000001L);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertTrue("'" + month23 + "' != '" + java.time.Month.NOVEMBER + "'", month23.equals(java.time.Month.NOVEMBER));
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime24);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertTrue("'" + isoEra33 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra33.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(localTime39);
        org.junit.Assert.assertNotNull(localTime40);
        org.junit.Assert.assertNotNull(localTime45);
        org.junit.Assert.assertNotNull(localTime46);
        org.junit.Assert.assertTrue("'" + chronoField47 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField47.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime49);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 3601000000001L + "'", long50 == 3601000000001L);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(periodTemporalQuery52);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertTrue("'" + chronoField57 + "' != '" + java.time.temporal.ChronoField.SECOND_OF_DAY + "'", chronoField57.equals(java.time.temporal.ChronoField.SECOND_OF_DAY));
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + temporalUnit60 + "' != '" + java.time.temporal.ChronoUnit.DAYS + "'", temporalUnit60.equals(java.time.temporal.ChronoUnit.DAYS));
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime61);
        org.junit.Assert.assertNotNull(localTime62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
    }

    @Test
    public void test2345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2345");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.now();
        java.time.temporal.ChronoField chronoField1 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime3 = localDateTime0.with((java.time.temporal.TemporalField) chronoField1, (long) 10);
        java.time.LocalDateTime localDateTime5 = localDateTime0.withDayOfYear((int) '/');
        // The following exception was thrown during execution in test generation
        try {
            java.time.LocalDateTime localDateTime7 = localDateTime5.minusYears(9223372036854775807L);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for Year (valid values -999999999 - 999999999): -9223372036854773785");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertTrue("'" + chronoField1 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField1.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
    }

    @Test
    public void test2346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2346");
        java.util.GregorianCalendar gregorianCalendar5 = new java.util.GregorianCalendar(12, 4096, 7, (-1), (int) (short) 10);
        gregorianCalendar5.setLenient(false);
        // The following exception was thrown during execution in test generation
        try {
            int int9 = gregorianCalendar5.getActualMinimum(1097);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1097");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test2347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2347");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Duration duration2 = new org.joda.time.Duration(readableInstant0, readableInstant1);
        org.joda.time.Duration duration4 = duration2.withMillis((-1L));
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((long) 3, chronology6);
        org.joda.time.DateTime.Property property8 = dateTime7.dayOfYear();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight((java.lang.Object) dateTime7, chronology9);
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight10.minusMonths((-1));
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight10.withDayOfYear((int) ' ');
        org.joda.time.PeriodType periodType15 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period16 = duration4.toPeriodFrom((org.joda.time.ReadableInstant) dateMidnight10, periodType15);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.Duration duration19 = new org.joda.time.Duration(readableInstant17, readableInstant18);
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.PeriodType periodType21 = null;
        org.joda.time.Period period22 = duration19.toPeriodTo(readableInstant20, periodType21);
        long long23 = duration19.getStandardSeconds();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((long) 3, chronology25);
        org.joda.time.DateTime.Property property27 = dateTime26.dayOfYear();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateMidnight dateMidnight29 = new org.joda.time.DateMidnight((java.lang.Object) dateTime26, chronology28);
        org.joda.time.DateMidnight dateMidnight31 = dateMidnight29.minusMonths((-1));
        org.joda.time.DateMidnight dateMidnight33 = dateMidnight29.withDayOfYear((int) ' ');
        org.joda.time.Interval interval34 = duration19.toIntervalTo((org.joda.time.ReadableInstant) dateMidnight33);
        org.joda.time.PeriodType periodType36 = org.joda.time.PeriodType.time();
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod((long) 'a', periodType36);
        org.joda.time.Period period38 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight10, (org.joda.time.ReadableDuration) duration19, periodType36);
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.Duration duration41 = new org.joda.time.Duration(readableInstant39, readableInstant40);
        org.joda.time.Seconds seconds42 = duration41.toStandardSeconds();
        int int43 = seconds42.getSeconds();
        org.joda.time.DateMidnight dateMidnight45 = dateMidnight10.withPeriodAdded((org.joda.time.ReadablePeriod) seconds42, 0);
        org.joda.time.ReadableInstant readableInstant46 = null;
        org.joda.time.MutableInterval mutableInterval47 = new org.joda.time.MutableInterval((org.joda.time.ReadablePeriod) seconds42, readableInstant46);
        org.joda.time.DateTime dateTime48 = mutableInterval47.getStart();
        org.joda.time.ReadableInstant readableInstant49 = null;
        org.joda.time.ReadableInstant readableInstant50 = null;
        org.joda.time.Duration duration51 = new org.joda.time.Duration(readableInstant49, readableInstant50);
        org.joda.time.MutableInterval mutableInterval52 = new org.joda.time.MutableInterval((java.lang.Object) readableInstant50);
        boolean boolean53 = mutableInterval52.isAfterNow();
        mutableInterval47.setInterval((org.joda.time.ReadableInterval) mutableInterval52);
        org.joda.time.Interval interval57 = new org.joda.time.Interval(100L, (long) 1970);
        mutableInterval52.setInterval((org.joda.time.ReadableInterval) interval57);
        mutableInterval52.setInterval((-4831848L), (long) 16384);
        org.joda.time.DateTime dateTime62 = mutableInterval52.getEnd();
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(periodType15);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateMidnight31);
        org.junit.Assert.assertNotNull(dateMidnight33);
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertNotNull(seconds42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(dateMidnight45);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(dateTime62);
    }

    @Test
    public void test2348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2348");
        java.util.function.DoubleUnaryOperator doubleUnaryOperator0 = java.util.function.DoubleUnaryOperator.identity();
        java.util.function.DoubleUnaryOperator doubleUnaryOperator1 = java.util.function.DoubleUnaryOperator.identity();
        double double3 = doubleUnaryOperator1.applyAsDouble((double) (-1L));
        java.util.function.DoubleUnaryOperator doubleUnaryOperator4 = doubleUnaryOperator0.compose(doubleUnaryOperator1);
        double double6 = doubleUnaryOperator0.applyAsDouble(3.0d);
        org.junit.Assert.assertNotNull(doubleUnaryOperator0);
        org.junit.Assert.assertNotNull(doubleUnaryOperator1);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + (-1.0d) + "'", double3 == (-1.0d));
        org.junit.Assert.assertNotNull(doubleUnaryOperator4);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 3.0d + "'", double6 == 3.0d);
    }

    @Test
    public void test2349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2349");
        java.util.stream.DoubleStream doubleStream1 = java.util.stream.DoubleStream.of((double) 115430400000L);
        java.util.stream.DoubleStream doubleStream2 = doubleStream1.sequential();
        org.junit.Assert.assertNotNull(doubleStream1);
        org.junit.Assert.assertNotNull(doubleStream2);
    }

    @Test
    public void test2350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2350");
        java.text.Format.Field field0 = null;
        java.text.FieldPosition fieldPosition1 = new java.text.FieldPosition(field0);
        fieldPosition1.setBeginIndex((int) (short) 100);
        int int4 = fieldPosition1.getEndIndex();
        java.text.Format.Field field5 = fieldPosition1.getFieldAttribute();
        boolean boolean7 = fieldPosition1.equals((java.lang.Object) 6552109211L);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNull(field5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test2351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2351");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withYearOfCentury((int) 'a');
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.plusSeconds(6);
        org.joda.time.DateTime dateTime6 = localDateTime3.toDateTime();
        int int7 = localDateTime3.getMinuteOfHour();
        org.joda.time.LocalDateTime.Property property8 = localDateTime3.dayOfYear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime10 = localDateTime3.withEra(3600000);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 3600000 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(dateTime6);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 37 + "'", int7 == 37);
        org.junit.Assert.assertNotNull(property8);
    }

    @Test
    public void test2352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2352");
        java.time.format.DateTimeFormatter dateTimeFormatter0 = java.time.format.DateTimeFormatter.ISO_DATE_TIME;
        java.util.GregorianCalendar gregorianCalendar6 = new java.util.GregorianCalendar(12, 4096, 7, (-1), (int) (short) 10);
        int int7 = gregorianCalendar6.getWeeksInWeekYear();
        java.lang.String str8 = gregorianCalendar6.getCalendarType();
        java.time.ZonedDateTime zonedDateTime9 = gregorianCalendar6.toZonedDateTime();
        java.util.GregorianCalendar gregorianCalendar15 = new java.util.GregorianCalendar(12, 4096, 7, (-1), (int) (short) 10);
        int int16 = gregorianCalendar15.getWeeksInWeekYear();
        java.lang.String str17 = gregorianCalendar15.getCalendarType();
        java.time.ZonedDateTime zonedDateTime18 = gregorianCalendar15.toZonedDateTime();
        int int19 = zonedDateTime9.compareTo((java.time.chrono.ChronoZonedDateTime<java.time.LocalDate>) zonedDateTime18);
        java.time.ZonedDateTime zonedDateTime21 = zonedDateTime9.plusDays((long) 2022);
        java.time.Instant instant22 = zonedDateTime9.toInstant();
        java.time.chrono.Chronology chronology23 = zonedDateTime9.getChronology();
        java.time.format.DateTimeFormatter dateTimeFormatter24 = dateTimeFormatter0.withChronology(chronology23);
        java.time.OffsetTime offsetTime25 = java.time.OffsetTime.MAX;
        java.time.LocalTime localTime26 = offsetTime25.toLocalTime();
        java.time.chrono.Chronology chronology27 = java.time.chrono.Chronology.from((java.time.temporal.TemporalAccessor) localTime26);
        java.time.format.DateTimeFormatter dateTimeFormatter28 = dateTimeFormatter0.withChronology(chronology27);
        java.time.OffsetTime offsetTime29 = java.time.OffsetTime.MAX;
        java.time.LocalTime localTime30 = offsetTime29.toLocalTime();
        java.lang.String str31 = offsetTime29.toString();
        java.time.Duration duration32 = java.time.Duration.ZERO;
        java.lang.String str33 = duration32.toString();
        java.time.OffsetTime offsetTime34 = offsetTime29.plus((java.time.temporal.TemporalAmount) duration32);
        java.time.OffsetTime offsetTime36 = offsetTime29.plusNanos((long) 0);
        java.time.OffsetTime offsetTime38 = offsetTime29.plusNanos((-1L));
        java.lang.String str39 = offsetTime29.toString();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str40 = dateTimeFormatter28.format((java.time.temporal.TemporalAccessor) offsetTime29);
            org.junit.Assert.fail("Expected exception of type java.time.temporal.UnsupportedTemporalTypeException; message: Unsupported field: Year");
        } catch (java.time.temporal.UnsupportedTemporalTypeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "gregory" + "'", str8, "gregory");
        org.junit.Assert.assertNotNull(zonedDateTime9);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 52 + "'", int16 == 52);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "gregory" + "'", str17, "gregory");
        org.junit.Assert.assertNotNull(zonedDateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(zonedDateTime21);
        org.junit.Assert.assertNotNull(instant22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeFormatter24);
        org.junit.Assert.assertNotNull(offsetTime25);
        org.junit.Assert.assertNotNull(localTime26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeFormatter28);
        org.junit.Assert.assertNotNull(offsetTime29);
        org.junit.Assert.assertNotNull(localTime30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "23:59:59.999999999-18:00" + "'", str31, "23:59:59.999999999-18:00");
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "PT0S" + "'", str33, "PT0S");
        org.junit.Assert.assertNotNull(offsetTime34);
        org.junit.Assert.assertNotNull(offsetTime36);
        org.junit.Assert.assertNotNull(offsetTime38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "23:59:59.999999999-18:00" + "'", str39, "23:59:59.999999999-18:00");
    }

    @Test
    public void test2353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2353");
        org.joda.time.Period period0 = org.joda.time.Period.ZERO;
        org.joda.time.Period period1 = period0.normalizedStandard();
        org.joda.time.Period period3 = period0.plusHours(2);
        java.time.chrono.IsoEra isoEra4 = java.time.chrono.IsoEra.CE;
        boolean boolean5 = period3.equals((java.lang.Object) isoEra4);
        java.time.LocalTime localTime10 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime11 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime10);
        java.time.LocalTime localTime16 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime17 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime16);
        java.time.temporal.ChronoField chronoField18 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime20 = localTime16.with((java.time.temporal.TemporalField) chronoField18, (long) (short) 1);
        long long21 = localTime10.getLong((java.time.temporal.TemporalField) chronoField18);
        boolean boolean22 = isoEra4.isSupported((java.time.temporal.TemporalField) chronoField18);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery23 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period24 = isoEra4.query(periodTemporalQuery23);
        boolean boolean25 = period24.isNegative();
        java.time.Period period27 = period24.plusDays((long) ' ');
        java.time.temporal.ChronoField chronoField28 = java.time.temporal.ChronoField.SECOND_OF_DAY;
        boolean boolean29 = period24.equals((java.lang.Object) chronoField28);
        java.time.chrono.ChronoPeriod chronoPeriod30 = period24.negated();
        java.time.OffsetDateTime offsetDateTime31 = java.time.OffsetDateTime.now();
        java.time.temporal.ChronoField chronoField32 = java.time.temporal.ChronoField.HOUR_OF_DAY;
        boolean boolean33 = offsetDateTime31.isSupported((java.time.temporal.TemporalField) chronoField32);
        java.time.Month month34 = offsetDateTime31.getMonth();
        java.time.temporal.Temporal temporal35 = period24.addTo((java.time.temporal.Temporal) offsetDateTime31);
        java.time.OffsetDateTime offsetDateTime37 = offsetDateTime31.minusMinutes((long) '4');
        java.time.OffsetDateTime offsetDateTime39 = offsetDateTime37.plusDays(10L);
        java.time.OffsetDateTime offsetDateTime40 = java.time.OffsetDateTime.now();
        java.time.LocalDate localDate41 = offsetDateTime40.toLocalDate();
        org.joda.time.Period period42 = org.joda.time.Period.ZERO;
        org.joda.time.Period period43 = period42.normalizedStandard();
        org.joda.time.Period period45 = period42.plusHours(2);
        java.time.chrono.IsoEra isoEra46 = java.time.chrono.IsoEra.CE;
        boolean boolean47 = period45.equals((java.lang.Object) isoEra46);
        java.time.LocalTime localTime52 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime53 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime52);
        java.time.LocalTime localTime58 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime59 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime58);
        java.time.temporal.ChronoField chronoField60 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime62 = localTime58.with((java.time.temporal.TemporalField) chronoField60, (long) (short) 1);
        long long63 = localTime52.getLong((java.time.temporal.TemporalField) chronoField60);
        boolean boolean64 = isoEra46.isSupported((java.time.temporal.TemporalField) chronoField60);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery65 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period66 = isoEra46.query(periodTemporalQuery65);
        boolean boolean67 = period66.isNegative();
        java.time.Period period69 = period66.plusDays((long) ' ');
        java.time.temporal.ChronoField chronoField70 = java.time.temporal.ChronoField.SECOND_OF_DAY;
        boolean boolean71 = period66.equals((java.lang.Object) chronoField70);
        java.time.chrono.ChronoPeriod chronoPeriod72 = period66.negated();
        java.time.OffsetDateTime offsetDateTime73 = java.time.OffsetDateTime.now();
        java.time.temporal.ChronoField chronoField74 = java.time.temporal.ChronoField.HOUR_OF_DAY;
        boolean boolean75 = offsetDateTime73.isSupported((java.time.temporal.TemporalField) chronoField74);
        java.time.Month month76 = offsetDateTime73.getMonth();
        java.time.temporal.Temporal temporal77 = period66.addTo((java.time.temporal.Temporal) offsetDateTime73);
        java.time.chrono.ChronoLocalDate chronoLocalDate78 = localDate41.minus((java.time.temporal.TemporalAmount) period66);
        java.time.OffsetDateTime offsetDateTime79 = offsetDateTime39.plus((java.time.temporal.TemporalAmount) period66);
        // The following exception was thrown during execution in test generation
        try {
            java.time.Period period81 = period66.minusYears(3597523200000L);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: integer overflow");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period0);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertTrue("'" + isoEra4 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra4.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertTrue("'" + chronoField18 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField18.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 3601000000001L + "'", long21 == 3601000000001L);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(periodTemporalQuery23);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertTrue("'" + chronoField28 + "' != '" + java.time.temporal.ChronoField.SECOND_OF_DAY + "'", chronoField28.equals(java.time.temporal.ChronoField.SECOND_OF_DAY));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(chronoPeriod30);
        org.junit.Assert.assertNotNull(offsetDateTime31);
        org.junit.Assert.assertTrue("'" + chronoField32 + "' != '" + java.time.temporal.ChronoField.HOUR_OF_DAY + "'", chronoField32.equals(java.time.temporal.ChronoField.HOUR_OF_DAY));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + month34 + "' != '" + java.time.Month.FEBRUARY + "'", month34.equals(java.time.Month.FEBRUARY));
        org.junit.Assert.assertNotNull(temporal35);
        org.junit.Assert.assertNotNull(offsetDateTime37);
        org.junit.Assert.assertNotNull(offsetDateTime39);
        org.junit.Assert.assertNotNull(offsetDateTime40);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertTrue("'" + isoEra46 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra46.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(localTime52);
        org.junit.Assert.assertNotNull(localTime53);
        org.junit.Assert.assertNotNull(localTime58);
        org.junit.Assert.assertNotNull(localTime59);
        org.junit.Assert.assertTrue("'" + chronoField60 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField60.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime62);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 3601000000001L + "'", long63 == 3601000000001L);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(periodTemporalQuery65);
        org.junit.Assert.assertNotNull(period66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(period69);
        org.junit.Assert.assertTrue("'" + chronoField70 + "' != '" + java.time.temporal.ChronoField.SECOND_OF_DAY + "'", chronoField70.equals(java.time.temporal.ChronoField.SECOND_OF_DAY));
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(chronoPeriod72);
        org.junit.Assert.assertNotNull(offsetDateTime73);
        org.junit.Assert.assertTrue("'" + chronoField74 + "' != '" + java.time.temporal.ChronoField.HOUR_OF_DAY + "'", chronoField74.equals(java.time.temporal.ChronoField.HOUR_OF_DAY));
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + month76 + "' != '" + java.time.Month.FEBRUARY + "'", month76.equals(java.time.Month.FEBRUARY));
        org.junit.Assert.assertNotNull(temporal77);
        org.junit.Assert.assertNotNull(chronoLocalDate78);
        org.junit.Assert.assertNotNull(offsetDateTime79);
    }

    @Test
    public void test2354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2354");
        java.time.ZoneOffset zoneOffset1 = java.time.ZoneOffset.UTC;
        // The following exception was thrown during execution in test generation
        try {
            java.time.ZoneId zoneId2 = java.time.ZoneId.ofOffset("2021-12-31", zoneOffset1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: prefix should be GMT, UTC or UT, is: 2021-12-31");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(zoneOffset1);
    }

    @Test
    public void test2355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2355");
        java.util.List<java.util.Locale.LanguageRange> languageRangeList0 = null;
        java.util.Set<java.lang.String> strSet1 = java.time.ZoneId.getAvailableZoneIds();
        java.util.stream.Stream<java.lang.String> strStream2 = strSet1.parallelStream();
        boolean boolean4 = strSet1.remove((java.lang.Object) 0);
        boolean boolean6 = strSet1.add("0 - 86399");
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.String> strList7 = java.util.Locale.filterTags(languageRangeList0, (java.util.Collection<java.lang.String>) strSet1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNotNull(strStream2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
    }

    @Test
    public void test2356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2356");
        java.util.GregorianCalendar gregorianCalendar5 = new java.util.GregorianCalendar(12, 4096, 7, (-1), (int) (short) 10);
        int int6 = gregorianCalendar5.getWeeksInWeekYear();
        java.lang.String str7 = gregorianCalendar5.getCalendarType();
        java.time.ZonedDateTime zonedDateTime8 = gregorianCalendar5.toZonedDateTime();
        java.util.GregorianCalendar gregorianCalendar14 = new java.util.GregorianCalendar(12, 4096, 7, (-1), (int) (short) 10);
        int int15 = gregorianCalendar14.getWeeksInWeekYear();
        java.lang.String str16 = gregorianCalendar14.getCalendarType();
        java.time.ZonedDateTime zonedDateTime17 = gregorianCalendar14.toZonedDateTime();
        int int18 = zonedDateTime8.compareTo((java.time.chrono.ChronoZonedDateTime<java.time.LocalDate>) zonedDateTime17);
        java.time.ZonedDateTime zonedDateTime20 = zonedDateTime8.plusDays((long) 2022);
        java.time.Instant instant21 = zonedDateTime8.toInstant();
        java.time.chrono.Chronology chronology22 = zonedDateTime8.getChronology();
        java.util.GregorianCalendar gregorianCalendar28 = new java.util.GregorianCalendar(12, 4096, 7, (-1), (int) (short) 10);
        int int29 = gregorianCalendar28.getWeeksInWeekYear();
        java.lang.String str30 = gregorianCalendar28.getCalendarType();
        java.time.ZonedDateTime zonedDateTime31 = gregorianCalendar28.toZonedDateTime();
        java.time.ZonedDateTime zonedDateTime33 = zonedDateTime31.minusMonths((long) 10);
        boolean boolean34 = zonedDateTime8.isBefore((java.time.chrono.ChronoZonedDateTime<java.time.LocalDate>) zonedDateTime33);
        java.time.ZonedDateTime zonedDateTime36 = zonedDateTime33.plusSeconds((long) 10800000);
        // The following exception was thrown during execution in test generation
        try {
            java.time.ZonedDateTime zonedDateTime38 = zonedDateTime33.withDayOfMonth((int) '-');
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for DayOfMonth (valid values 1 - 28/31): 45");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 52 + "'", int6 == 52);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "gregory" + "'", str7, "gregory");
        org.junit.Assert.assertNotNull(zonedDateTime8);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 52 + "'", int15 == 52);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "gregory" + "'", str16, "gregory");
        org.junit.Assert.assertNotNull(zonedDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(zonedDateTime20);
        org.junit.Assert.assertNotNull(instant21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 52 + "'", int29 == 52);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "gregory" + "'", str30, "gregory");
        org.junit.Assert.assertNotNull(zonedDateTime31);
        org.junit.Assert.assertNotNull(zonedDateTime33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(zonedDateTime36);
    }

    @Test
    public void test2357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2357");
        javax.security.auth.Subject subject0 = new javax.security.auth.Subject();
        java.util.Set<java.lang.Object> objSet1 = subject0.getPrivateCredentials();
        java.util.Set<java.security.Principal> principalSet2 = subject0.getPrincipals();
        java.util.Set<java.security.Principal> principalSet3 = subject0.getPrincipals();
        java.util.Set<java.lang.Object> objSet4 = subject0.getPublicCredentials();
        boolean boolean5 = subject0.isReadOnly();
        org.junit.Assert.assertNotNull(objSet1);
        org.junit.Assert.assertNotNull(principalSet2);
        org.junit.Assert.assertNotNull(principalSet3);
        org.junit.Assert.assertNotNull(objSet4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test2358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2358");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((long) 0, chronology2);
        org.joda.time.Chronology chronology4 = localTime3.getChronology();
        java.util.Locale locale5 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale6 = java.util.Locale.GERMANY;
        java.lang.String str7 = locale5.getDisplayScript(locale6);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket9 = new org.joda.time.format.DateTimeParserBucket((long) 1970, chronology4, locale5, (java.lang.Integer) 1);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.LocalTime localTime12 = new org.joda.time.LocalTime((long) 0, chronology11);
        org.joda.time.Chronology chronology13 = localTime12.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.weekyearOfCentury();
        org.joda.time.DurationField durationField15 = dateTimeField14.getLeapDurationField();
        dateTimeParserBucket9.saveField(dateTimeField14, (int) 'u');
        java.util.Locale locale19 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str20 = dateTimeField14.getAsShortText((int) 'u', locale19);
        boolean boolean21 = dateTimeField14.isSupported();
        java.util.Locale locale26 = new java.util.Locale("ParseCaseSensitive(false)(Value(Year,4,10,EXCEEDS_PAD)'-'Value(MonthOfYear,2)'-'Value(DayOfMonth,2))[Offset(+HH:MM:ss,'Z')]", "UNDERFLOW", "Years");
        java.lang.String str27 = dateTimeField14.getAsText((long) 14, locale26);
        java.lang.String str28 = locale26.getDisplayLanguage();
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNull(durationField15);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "117" + "'", str20, "117");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertEquals(locale26.toString(), "parsecasesensitive(false)(value(year,4,10,exceeds_pad)'-'value(monthofyear,2)'-'value(dayofmonth,2))[offset(+hh:mm:ss,'z')]_UNDERFLOW_Years");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "70" + "'", str27, "70");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "parsecasesensitive(false)(value(year,4,10,exceeds_pad)'-'value(monthofyear,2)'-'value(dayofmonth,2))[offset(+hh:mm:ss,'z')]" + "'", str28, "parsecasesensitive(false)(value(year,4,10,exceeds_pad)'-'value(monthofyear,2)'-'value(dayofmonth,2))[offset(+hh:mm:ss,'z')]");
    }

    @Test
    public void test2359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2359");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.nio.LongBuffer longBuffer3 = java.nio.LongBuffer.allocate((int) (short) 0);
        java.nio.Buffer buffer4 = longBuffer3.mark();
        boolean boolean5 = properties1.containsKey((java.lang.Object) longBuffer3);
        java.nio.charset.Charset charset6 = java.nio.charset.Charset.defaultCharset();
        boolean boolean7 = charset6.canEncode();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) 3, chronology9);
        org.joda.time.DateTime.Property property11 = dateTime10.dayOfYear();
        java.lang.Object obj12 = properties1.getOrDefault((java.lang.Object) boolean7, (java.lang.Object) property11);
        properties1.clear();
        java.io.OutputStream outputStream14 = null;
        java.io.FilterOutputStream filterOutputStream15 = new java.io.FilterOutputStream(outputStream14);
        java.io.PrintStream printStream17 = new java.io.PrintStream((java.io.OutputStream) filterOutputStream15, false);
        // The following exception was thrown during execution in test generation
        try {
            properties1.save((java.io.OutputStream) printStream17, "2022-02-21T09:34:36.512Z");
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(longBuffer3);
        org.junit.Assert.assertNotNull(buffer4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(charset6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(obj12);
        org.junit.Assert.assertEquals(obj12.toString(), "Property[dayOfYear]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj12), "Property[dayOfYear]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj12), "Property[dayOfYear]");
    }

    @Test
    public void test2360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2360");
        java.time.format.DateTimeFormatter dateTimeFormatter0 = java.time.format.DateTimeFormatter.ISO_TIME;
        java.time.format.DecimalStyle decimalStyle1 = dateTimeFormatter0.getDecimalStyle();
        java.nio.CharBuffer charBuffer3 = java.nio.CharBuffer.wrap((java.lang.CharSequence) "2022-02-21T09:34:12.478Z");
        java.nio.CharBuffer charBuffer4 = charBuffer3.slice();
        java.time.temporal.TemporalQuery<?> wildcardTemporalQuery5 = null;
        java.time.temporal.TemporalQuery[] temporalQueryArray7 = new java.time.temporal.TemporalQuery[1];
        @SuppressWarnings("unchecked")
        java.time.temporal.TemporalQuery<?>[] wildcardTemporalQueryArray8 = (java.time.temporal.TemporalQuery<?>[]) temporalQueryArray7;
        wildcardTemporalQueryArray8[0] = wildcardTemporalQuery5;
        // The following exception was thrown during execution in test generation
        try {
            java.time.temporal.TemporalAccessor temporalAccessor11 = dateTimeFormatter0.parseBest((java.lang.CharSequence) charBuffer4, wildcardTemporalQueryArray8);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: At least two queries must be specified");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(decimalStyle1);
        org.junit.Assert.assertNotNull(charBuffer3);
        org.junit.Assert.assertNotNull(charBuffer4);
        org.junit.Assert.assertNotNull(temporalQueryArray7);
        org.junit.Assert.assertNotNull(wildcardTemporalQueryArray8);
    }

    @Test
    public void test2361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2361");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.yearOfCentury();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) 3, chronology4);
        org.joda.time.DateTime.Property property6 = dateTime5.dayOfYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateMidnight dateMidnight8 = new org.joda.time.DateMidnight((java.lang.Object) dateTime5, chronology7);
        org.joda.time.MutableDateTime mutableDateTime9 = dateTime5.toMutableDateTime();
        mutableDateTime9.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime9.dayOfWeek();
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime9.year();
        java.util.TimeZone timeZone14 = null;
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forTimeZone(timeZone14);
        mutableDateTime9.setZone(dateTimeZone15);
        java.util.Locale locale18 = java.util.Locale.TAIWAN;
        java.lang.String str19 = dateTimeZone15.getShortName((long) 64, locale18);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) 3, chronology21);
        org.joda.time.DateTime.Property property23 = dateTime22.dayOfYear();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateMidnight dateMidnight25 = new org.joda.time.DateMidnight((java.lang.Object) dateTime22, chronology24);
        org.joda.time.MutableDateTime mutableDateTime26 = dateTime22.toMutableDateTime();
        mutableDateTime26.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property29 = mutableDateTime26.dayOfWeek();
        org.joda.time.MutableDateTime.Property property30 = mutableDateTime26.year();
        java.util.TimeZone timeZone31 = null;
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forTimeZone(timeZone31);
        mutableDateTime26.setZone(dateTimeZone32);
        java.util.Locale locale35 = java.util.Locale.TAIWAN;
        java.lang.String str36 = dateTimeZone32.getShortName((long) 64, locale35);
        long long38 = dateTimeZone15.getMillisKeepLocal(dateTimeZone32, (long) 64);
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime(dateTimeZone15);
        org.joda.time.LocalDate localDate40 = new org.joda.time.LocalDate(dateTimeZone15);
        org.joda.time.LocalDate localDate42 = localDate40.minusYears(1);
        org.joda.time.LocalDate localDate43 = new org.joda.time.LocalDate();
        org.joda.time.Interval interval44 = localDate43.toInterval();
        org.joda.time.Weeks weeks45 = org.joda.time.Weeks.ONE;
        java.util.concurrent.TimeUnit timeUnit46 = java.util.concurrent.TimeUnit.NANOSECONDS;
        boolean boolean47 = weeks45.equals((java.lang.Object) timeUnit46);
        org.joda.time.MutablePeriod mutablePeriod48 = weeks45.toMutablePeriod();
        int int49 = mutablePeriod48.getSeconds();
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime((long) 3, chronology51);
        org.joda.time.DateTime.Property property53 = dateTime52.dayOfYear();
        org.joda.time.Interval interval54 = property53.toInterval();
        org.joda.time.DateTime dateTime55 = interval54.getEnd();
        mutablePeriod48.setPeriod((org.joda.time.ReadableInterval) interval54);
        boolean boolean57 = interval44.isAfter((org.joda.time.ReadableInterval) interval54);
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.DateTime dateTime60 = new org.joda.time.DateTime((long) 3, chronology59);
        org.joda.time.DateTime.Property property61 = dateTime60.dayOfYear();
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.DateMidnight dateMidnight63 = new org.joda.time.DateMidnight((java.lang.Object) dateTime60, chronology62);
        org.joda.time.DateMidnight.Property property64 = dateMidnight63.dayOfMonth();
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.DateTime dateTime67 = new org.joda.time.DateTime((long) 3, chronology66);
        org.joda.time.DateTime.Property property68 = dateTime67.dayOfYear();
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.DateMidnight dateMidnight70 = new org.joda.time.DateMidnight((java.lang.Object) dateTime67, chronology69);
        org.joda.time.DateMidnight dateMidnight72 = dateMidnight70.minusMonths((-1));
        org.joda.time.DateMidnight dateMidnight74 = dateMidnight70.withDayOfYear((int) ' ');
        org.joda.time.Weeks weeks75 = org.joda.time.Weeks.weeksBetween((org.joda.time.ReadableInstant) dateMidnight63, (org.joda.time.ReadableInstant) dateMidnight74);
        org.joda.time.Interval interval76 = interval44.withPeriodAfterStart((org.joda.time.ReadablePeriod) weeks75);
        org.joda.time.Weeks weeks77 = org.joda.time.Weeks.ONE;
        java.util.concurrent.TimeUnit timeUnit78 = java.util.concurrent.TimeUnit.NANOSECONDS;
        boolean boolean79 = weeks77.equals((java.lang.Object) timeUnit78);
        org.joda.time.Weeks weeks80 = weeks77.negated();
        org.joda.time.Weeks weeks82 = weeks80.plus((int) (short) 1);
        org.joda.time.Weeks weeks83 = weeks75.plus(weeks82);
        org.joda.time.LocalDate localDate85 = localDate42.withPeriodAdded((org.joda.time.ReadablePeriod) weeks83, 0);
        // The following exception was thrown during execution in test generation
        try {
            int int86 = localDateTime1.compareTo((org.joda.time.ReadablePartial) localDate85);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: ReadablePartial objects must have matching field types");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+00:00" + "'", str19, "+00:00");
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(mutableDateTime26);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "+00:00" + "'", str36, "+00:00");
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 64L + "'", long38 == 64L);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertNotNull(interval44);
        org.junit.Assert.assertNotNull(weeks45);
        org.junit.Assert.assertNotNull(timeUnit46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(mutablePeriod48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertNotNull(dateMidnight72);
        org.junit.Assert.assertNotNull(dateMidnight74);
        org.junit.Assert.assertNotNull(weeks75);
        org.junit.Assert.assertNotNull(interval76);
        org.junit.Assert.assertNotNull(weeks77);
        org.junit.Assert.assertNotNull(timeUnit78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(weeks80);
        org.junit.Assert.assertNotNull(weeks82);
        org.junit.Assert.assertNotNull(weeks83);
        org.junit.Assert.assertNotNull(localDate85);
    }

    @Test
    public void test2362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2362");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withYearOfCentury((int) 'a');
        int int4 = localDateTime3.getDayOfMonth();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.plusYears((int) (short) 100);
        int int7 = localDateTime3.getSecondOfMinute();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime(chronology8);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.withYearOfCentury((int) 'a');
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.plusSeconds(6);
        boolean boolean14 = localDateTime3.isEqual((org.joda.time.ReadablePartial) localDateTime11);
        int int15 = localDateTime3.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime3.minusMinutes(353);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.withMillisOfDay(574);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 21 + "'", int4 == 21);
        org.junit.Assert.assertNotNull(localDateTime6);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 45 + "'", int7 == 45);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
// flaky:         org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 4 + "'", int15 == 4);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
    }

    @Test
    public void test2363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2363");
        org.joda.time.Chronology chronology4 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((int) '\000', (int) '#', 65, 960000, chronology4);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 65 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test2364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2364");
        java.net.InetAddress inetAddress0 = java.net.InetAddress.getLocalHost();
        boolean boolean1 = inetAddress0.isLoopbackAddress();
        java.lang.String str2 = inetAddress0.getHostName();
        boolean boolean3 = inetAddress0.isMCGlobal();
        boolean boolean4 = inetAddress0.isLoopbackAddress();
        boolean boolean5 = inetAddress0.isMCSiteLocal();
        org.junit.Assert.assertNotNull(inetAddress0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "599b081c1808" + "'", str2, "599b081c1808");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test2365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2365");
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.LocalTime localTime10 = new org.joda.time.LocalTime((long) 0, chronology9);
        org.joda.time.Chronology chronology11 = localTime10.getChronology();
        java.util.Locale locale12 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale13 = java.util.Locale.GERMANY;
        java.lang.String str14 = locale12.getDisplayScript(locale13);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket((long) 1970, chronology11, locale12, (java.lang.Integer) 1);
        org.joda.time.DateTime dateTime17 = org.joda.time.DateTime.now(chronology11);
        org.joda.time.Weeks weeks18 = org.joda.time.Weeks.ONE;
        java.util.concurrent.TimeUnit timeUnit19 = java.util.concurrent.TimeUnit.NANOSECONDS;
        boolean boolean20 = weeks18.equals((java.lang.Object) timeUnit19);
        org.joda.time.MutablePeriod mutablePeriod21 = weeks18.toMutablePeriod();
        org.joda.time.Chronology chronology24 = null;
        mutablePeriod21.setPeriod((long) 2, (long) 2, chronology24);
        org.joda.time.Period period30 = new org.joda.time.Period((int) '#', 0, 2, (int) (short) 100);
        mutablePeriod21.add((org.joda.time.ReadablePeriod) period30);
        int int32 = period30.getMillis();
        org.joda.time.Period period34 = period30.minusMonths(99);
        int[] intArray37 = chronology11.get((org.joda.time.ReadablePeriod) period34, 0L, (-32L));
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime(1728000, (int) ' ', 4200, 576, 99, (-1000000), 34561718, chronology11);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 576 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(weeks18);
        org.junit.Assert.assertNotNull(timeUnit19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(mutablePeriod21);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 100 + "'", int32 == 100);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[0, 0, 0, 0, 0, 0, 0, -32]");
    }

    @Test
    public void test2366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2366");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Locale locale3 = java.util.Locale.JAPAN;
        java.util.Locale[] localeArray4 = new java.util.Locale[] { locale3 };
        java.util.ArrayList<java.util.Locale> localeList5 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList5, localeArray4);
        java.util.List<java.util.Locale> localeList7 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList5);
        int int9 = localeList5.indexOf((java.lang.Object) (byte) -1);
        java.util.Set<java.lang.String> strSet10 = java.time.ZoneId.getAvailableZoneIds();
        java.util.stream.Stream<java.lang.String> strStream11 = strSet10.parallelStream();
        boolean boolean13 = strSet10.remove((java.lang.Object) 0);
        java.time.LocalTime localTime18 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime19 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime18);
        java.time.LocalTime localTime24 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime25 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime24);
        java.time.temporal.ChronoField chronoField26 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime28 = localTime24.with((java.time.temporal.TemporalField) chronoField26, (long) (short) 1);
        long long29 = localTime18.getLong((java.time.temporal.TemporalField) chronoField26);
        java.time.LocalTime localTime31 = localTime18.withSecond((int) (short) 1);
        java.time.temporal.ChronoField chronoField32 = java.time.temporal.ChronoField.SECOND_OF_DAY;
        java.time.temporal.ValueRange valueRange33 = localTime31.range((java.time.temporal.TemporalField) chronoField32);
        boolean boolean34 = strSet10.remove((java.lang.Object) chronoField32);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime((long) 3, chronology36);
        org.joda.time.DateTime.Property property38 = dateTime37.dayOfYear();
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.DateMidnight dateMidnight40 = new org.joda.time.DateMidnight((java.lang.Object) dateTime37, chronology39);
        org.joda.time.MutableDateTime mutableDateTime41 = dateTime37.toMutableDateTime();
        org.joda.time.Days days42 = org.joda.time.Days.ONE;
        org.joda.time.MutableInterval mutableInterval43 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime37, (org.joda.time.ReadablePeriod) days42);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((long) 3, chronology45);
        org.joda.time.DateTime.Property property47 = dateTime46.dayOfYear();
        org.joda.time.Interval interval48 = property47.toInterval();
        mutableInterval43.setInterval((org.joda.time.ReadableInterval) interval48);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime((long) 3, chronology51);
        org.joda.time.DateTime.Property property53 = dateTime52.dayOfYear();
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.DateMidnight dateMidnight55 = new org.joda.time.DateMidnight((java.lang.Object) dateTime52, chronology54);
        org.joda.time.DateMidnight.Property property56 = dateMidnight55.dayOfMonth();
        org.joda.time.ReadableInstant readableInstant57 = null;
        org.joda.time.ReadableInstant readableInstant58 = null;
        org.joda.time.Duration duration59 = new org.joda.time.Duration(readableInstant57, readableInstant58);
        org.joda.time.Duration duration61 = duration59.withMillis((-1L));
        org.joda.time.ReadableDuration readableDuration62 = null;
        org.joda.time.Duration duration63 = duration59.minus(readableDuration62);
        org.joda.time.DateMidnight dateMidnight64 = dateMidnight55.plus((org.joda.time.ReadableDuration) duration63);
        mutableInterval43.setDurationAfterStart((org.joda.time.ReadableDuration) duration63);
        boolean boolean66 = strSet10.contains((java.lang.Object) mutableInterval43);
        java.util.Set<java.lang.String> strSet67 = java.time.ZoneId.getAvailableZoneIds();
        java.util.stream.Stream<java.lang.String> strStream68 = strSet67.parallelStream();
        java.util.stream.Stream<java.lang.String> strStream69 = strSet67.parallelStream();
        boolean boolean70 = strSet10.addAll((java.util.Collection<java.lang.String>) strSet67);
        boolean boolean71 = localeList5.containsAll((java.util.Collection<java.lang.String>) strSet10);
        java.util.Iterator<java.lang.String> strItor72 = strSet10.iterator();
        org.joda.time.LocalDate localDate73 = new org.joda.time.LocalDate();
        int int74 = localDate73.getCenturyOfEra();
        org.joda.time.LocalDate.Property property75 = localDate73.dayOfWeek();
        org.joda.time.LocalDate localDate77 = property75.addToCopy(7);
        org.joda.time.LocalDate localDate78 = property75.roundCeilingCopy();
        int int79 = localDate78.getMonthOfYear();
        org.joda.time.DurationFieldType durationFieldType80 = org.joda.time.DurationFieldType.weeks();
        boolean boolean81 = localDate78.isSupported(durationFieldType80);
        boolean boolean82 = strSet10.equals((java.lang.Object) durationFieldType80);
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(localeArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(localeList7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertNotNull(strStream11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertNotNull(localTime24);
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertTrue("'" + chronoField26 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField26.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime28);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 3601000000001L + "'", long29 == 3601000000001L);
        org.junit.Assert.assertNotNull(localTime31);
        org.junit.Assert.assertTrue("'" + chronoField32 + "' != '" + java.time.temporal.ChronoField.SECOND_OF_DAY + "'", chronoField32.equals(java.time.temporal.ChronoField.SECOND_OF_DAY));
        org.junit.Assert.assertNotNull(valueRange33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(mutableDateTime41);
        org.junit.Assert.assertNotNull(days42);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(duration61);
        org.junit.Assert.assertNotNull(duration63);
        org.junit.Assert.assertNotNull(dateMidnight64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(strSet67);
        org.junit.Assert.assertNotNull(strStream68);
        org.junit.Assert.assertNotNull(strStream69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(strItor72);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 20 + "'", int74 == 20);
        org.junit.Assert.assertNotNull(property75);
        org.junit.Assert.assertNotNull(localDate77);
        org.junit.Assert.assertNotNull(localDate78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 2 + "'", int79 == 2);
        org.junit.Assert.assertNotNull(durationFieldType80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
    }

    @Test
    public void test2367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2367");
        java.util.stream.DoubleStream doubleStream1 = java.util.stream.DoubleStream.of((double) 1024);
        java.util.stream.DoubleStream doubleStream2 = doubleStream1.sorted();
        java.util.OptionalDouble optionalDouble3 = doubleStream2.findFirst();
        java.util.function.DoubleToIntFunction doubleToIntFunction4 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.IntStream intStream5 = doubleStream2.mapToInt(doubleToIntFunction4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleStream1);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertNotNull(optionalDouble3);
    }

    @Test
    public void test2368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2368");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 3, chronology1);
        org.joda.time.DateTime.Property property3 = dateTime2.dayOfYear();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight((java.lang.Object) dateTime2, chronology4);
        org.joda.time.MutableDateTime mutableDateTime6 = dateTime2.toMutableDateTime();
        mutableDateTime6.addYears((int) (short) 100);
        int int9 = mutableDateTime6.getHourOfDay();
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.Duration duration12 = new org.joda.time.Duration(readableInstant10, readableInstant11);
        org.joda.time.Duration duration14 = duration12.withMillis((-1L));
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) 3, chronology16);
        org.joda.time.DateTime.Property property18 = dateTime17.dayOfYear();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight((java.lang.Object) dateTime17, chronology19);
        org.joda.time.DateMidnight dateMidnight22 = dateMidnight20.minusMonths((-1));
        org.joda.time.DateMidnight dateMidnight24 = dateMidnight20.withDayOfYear((int) ' ');
        org.joda.time.PeriodType periodType25 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period26 = duration14.toPeriodFrom((org.joda.time.ReadableInstant) dateMidnight20, periodType25);
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.Duration duration29 = new org.joda.time.Duration(readableInstant27, readableInstant28);
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.PeriodType periodType31 = null;
        org.joda.time.Period period32 = duration29.toPeriodTo(readableInstant30, periodType31);
        long long33 = duration29.getStandardSeconds();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((long) 3, chronology35);
        org.joda.time.DateTime.Property property37 = dateTime36.dayOfYear();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.DateMidnight dateMidnight39 = new org.joda.time.DateMidnight((java.lang.Object) dateTime36, chronology38);
        org.joda.time.DateMidnight dateMidnight41 = dateMidnight39.minusMonths((-1));
        org.joda.time.DateMidnight dateMidnight43 = dateMidnight39.withDayOfYear((int) ' ');
        org.joda.time.Interval interval44 = duration29.toIntervalTo((org.joda.time.ReadableInstant) dateMidnight43);
        org.joda.time.PeriodType periodType46 = org.joda.time.PeriodType.time();
        org.joda.time.MutablePeriod mutablePeriod47 = new org.joda.time.MutablePeriod((long) 'a', periodType46);
        org.joda.time.Period period48 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight20, (org.joda.time.ReadableDuration) duration29, periodType46);
        org.joda.time.ReadableInstant readableInstant49 = null;
        org.joda.time.ReadableInstant readableInstant50 = null;
        org.joda.time.Duration duration51 = new org.joda.time.Duration(readableInstant49, readableInstant50);
        org.joda.time.Seconds seconds52 = duration51.toStandardSeconds();
        int int53 = seconds52.getSeconds();
        org.joda.time.DateMidnight dateMidnight55 = dateMidnight20.withPeriodAdded((org.joda.time.ReadablePeriod) seconds52, 0);
        mutableDateTime6.setMillis((org.joda.time.ReadableInstant) dateMidnight20);
        org.joda.time.DateMidnight.Property property57 = dateMidnight20.dayOfMonth();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertNotNull(periodType25);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(dateMidnight41);
        org.junit.Assert.assertNotNull(dateMidnight43);
        org.junit.Assert.assertNotNull(interval44);
        org.junit.Assert.assertNotNull(periodType46);
        org.junit.Assert.assertNotNull(seconds52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(dateMidnight55);
        org.junit.Assert.assertNotNull(property57);
    }

    @Test
    public void test2369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2369");
        org.joda.time.Period period0 = org.joda.time.Period.ZERO;
        org.joda.time.Period period1 = period0.normalizedStandard();
        org.joda.time.Period period3 = period0.plusHours(2);
        int int4 = period0.getDays();
        org.joda.time.Period period6 = period0.plusWeeks(366);
        org.joda.time.Period period8 = period6.withDays(3);
        int int9 = period6.getWeeks();
        org.junit.Assert.assertNotNull(period0);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 366 + "'", int9 == 366);
    }

    @Test
    public void test2370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2370");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) 3, chronology2);
        org.joda.time.DateTime.Property property4 = dateTime3.dayOfYear();
        org.joda.time.Interval interval5 = property4.toInterval();
        org.joda.time.DateTimeField dateTimeField6 = property4.getField();
        org.joda.time.DateTime dateTime8 = property4.addToCopy((long) (byte) 1);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.LocalTime localTime11 = new org.joda.time.LocalTime((long) 0, chronology10);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) 3, chronology13);
        org.joda.time.DateTime.Property property15 = dateTime14.dayOfYear();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight((java.lang.Object) dateTime14, chronology16);
        org.joda.time.DateTime dateTime18 = localTime11.toDateTime((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.DateTime dateTime20 = dateTime18.minusMillis((int) (byte) 0);
        org.joda.time.DateTime dateTime22 = dateTime18.withYearOfCentury((int) (byte) 10);
        org.joda.time.DateTime.Property property23 = dateTime22.hourOfDay();
        boolean boolean24 = dateTime8.isEqual((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.Duration duration25 = new org.joda.time.Duration(readableInstant0, (org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod(3601000000001L, (long) 28);
        int int29 = mutablePeriod28.getMonths();
        org.joda.time.DateTime dateTime30 = dateTime22.minus((org.joda.time.ReadablePeriod) mutablePeriod28);
        mutablePeriod28.addMillis(34482);
        mutablePeriod28.addYears(8);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(interval5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(dateTime30);
    }

    @Test
    public void test2371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2371");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Duration duration2 = new org.joda.time.Duration(readableInstant0, readableInstant1);
        org.joda.time.Duration duration4 = duration2.withMillis((-1L));
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((long) 3, chronology6);
        org.joda.time.DateTime.Property property8 = dateTime7.dayOfYear();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight((java.lang.Object) dateTime7, chronology9);
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight10.minusMonths((-1));
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight10.withDayOfYear((int) ' ');
        org.joda.time.PeriodType periodType15 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period16 = duration4.toPeriodFrom((org.joda.time.ReadableInstant) dateMidnight10, periodType15);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.Duration duration19 = new org.joda.time.Duration(readableInstant17, readableInstant18);
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.PeriodType periodType21 = null;
        org.joda.time.Period period22 = duration19.toPeriodTo(readableInstant20, periodType21);
        long long23 = duration19.getStandardSeconds();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((long) 3, chronology25);
        org.joda.time.DateTime.Property property27 = dateTime26.dayOfYear();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateMidnight dateMidnight29 = new org.joda.time.DateMidnight((java.lang.Object) dateTime26, chronology28);
        org.joda.time.DateMidnight dateMidnight31 = dateMidnight29.minusMonths((-1));
        org.joda.time.DateMidnight dateMidnight33 = dateMidnight29.withDayOfYear((int) ' ');
        org.joda.time.Interval interval34 = duration19.toIntervalTo((org.joda.time.ReadableInstant) dateMidnight33);
        org.joda.time.PeriodType periodType36 = org.joda.time.PeriodType.time();
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod((long) 'a', periodType36);
        org.joda.time.Period period38 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight10, (org.joda.time.ReadableDuration) duration19, periodType36);
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.Duration duration41 = new org.joda.time.Duration(readableInstant39, readableInstant40);
        org.joda.time.Seconds seconds42 = duration41.toStandardSeconds();
        int int43 = seconds42.getSeconds();
        org.joda.time.DateMidnight dateMidnight45 = dateMidnight10.withPeriodAdded((org.joda.time.ReadablePeriod) seconds42, 0);
        org.joda.time.ReadableInstant readableInstant46 = null;
        org.joda.time.MutableInterval mutableInterval47 = new org.joda.time.MutableInterval((org.joda.time.ReadablePeriod) seconds42, readableInstant46);
        org.joda.time.Seconds seconds48 = org.joda.time.Seconds.THREE;
        org.joda.time.Seconds seconds49 = seconds42.minus(seconds48);
        org.joda.time.ReadableInstant readableInstant50 = null;
        org.joda.time.ReadableInstant readableInstant51 = null;
        org.joda.time.Duration duration52 = new org.joda.time.Duration(readableInstant50, readableInstant51);
        org.joda.time.Duration duration54 = duration52.withMillis((-1L));
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime((long) 3, chronology56);
        org.joda.time.DateTime.Property property58 = dateTime57.dayOfYear();
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.DateMidnight dateMidnight60 = new org.joda.time.DateMidnight((java.lang.Object) dateTime57, chronology59);
        org.joda.time.DateMidnight dateMidnight62 = dateMidnight60.minusMonths((-1));
        org.joda.time.DateMidnight dateMidnight64 = dateMidnight60.withDayOfYear((int) ' ');
        org.joda.time.PeriodType periodType65 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period66 = duration54.toPeriodFrom((org.joda.time.ReadableInstant) dateMidnight60, periodType65);
        org.joda.time.ReadableInstant readableInstant67 = null;
        org.joda.time.ReadableInstant readableInstant68 = null;
        org.joda.time.Duration duration69 = new org.joda.time.Duration(readableInstant67, readableInstant68);
        org.joda.time.ReadableInstant readableInstant70 = null;
        org.joda.time.PeriodType periodType71 = null;
        org.joda.time.Period period72 = duration69.toPeriodTo(readableInstant70, periodType71);
        long long73 = duration69.getStandardSeconds();
        org.joda.time.Chronology chronology75 = null;
        org.joda.time.DateTime dateTime76 = new org.joda.time.DateTime((long) 3, chronology75);
        org.joda.time.DateTime.Property property77 = dateTime76.dayOfYear();
        org.joda.time.Chronology chronology78 = null;
        org.joda.time.DateMidnight dateMidnight79 = new org.joda.time.DateMidnight((java.lang.Object) dateTime76, chronology78);
        org.joda.time.DateMidnight dateMidnight81 = dateMidnight79.minusMonths((-1));
        org.joda.time.DateMidnight dateMidnight83 = dateMidnight79.withDayOfYear((int) ' ');
        org.joda.time.Interval interval84 = duration69.toIntervalTo((org.joda.time.ReadableInstant) dateMidnight83);
        org.joda.time.PeriodType periodType86 = org.joda.time.PeriodType.time();
        org.joda.time.MutablePeriod mutablePeriod87 = new org.joda.time.MutablePeriod((long) 'a', periodType86);
        org.joda.time.Period period88 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight60, (org.joda.time.ReadableDuration) duration69, periodType86);
        org.joda.time.ReadableInstant readableInstant89 = null;
        org.joda.time.ReadableInstant readableInstant90 = null;
        org.joda.time.Duration duration91 = new org.joda.time.Duration(readableInstant89, readableInstant90);
        org.joda.time.Seconds seconds92 = duration91.toStandardSeconds();
        int int93 = seconds92.getSeconds();
        org.joda.time.DateMidnight dateMidnight95 = dateMidnight60.withPeriodAdded((org.joda.time.ReadablePeriod) seconds92, 0);
        org.joda.time.ReadableInstant readableInstant96 = null;
        org.joda.time.MutableInterval mutableInterval97 = new org.joda.time.MutableInterval((org.joda.time.ReadablePeriod) seconds92, readableInstant96);
        org.joda.time.Seconds seconds98 = seconds42.minus(seconds92);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(periodType15);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateMidnight31);
        org.junit.Assert.assertNotNull(dateMidnight33);
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertNotNull(seconds42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(dateMidnight45);
        org.junit.Assert.assertNotNull(seconds48);
        org.junit.Assert.assertNotNull(seconds49);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(dateMidnight62);
        org.junit.Assert.assertNotNull(dateMidnight64);
        org.junit.Assert.assertNotNull(periodType65);
        org.junit.Assert.assertNotNull(period66);
        org.junit.Assert.assertNotNull(period72);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 0L + "'", long73 == 0L);
        org.junit.Assert.assertNotNull(property77);
        org.junit.Assert.assertNotNull(dateMidnight81);
        org.junit.Assert.assertNotNull(dateMidnight83);
        org.junit.Assert.assertNotNull(interval84);
        org.junit.Assert.assertNotNull(periodType86);
        org.junit.Assert.assertNotNull(seconds92);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 0 + "'", int93 == 0);
        org.junit.Assert.assertNotNull(dateMidnight95);
        org.junit.Assert.assertNotNull(seconds98);
    }

    @Test
    public void test2372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2372");
        java.util.Map<java.lang.String, java.lang.String> strMap0 = java.time.ZoneId.SHORT_IDS;
        boolean boolean2 = strMap0.containsValue((java.lang.Object) "2022-02-21T09:34:23.848Z");
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod();
        org.joda.time.Period period4 = org.joda.time.Period.ZERO;
        org.joda.time.Period period5 = period4.normalizedStandard();
        org.joda.time.Period period7 = period4.plusHours(2);
        org.joda.time.DurationFieldType durationFieldType8 = org.joda.time.DurationFieldType.hours();
        int int9 = period4.indexOf(durationFieldType8);
        mutablePeriod3.add(durationFieldType8, (int) (short) -1);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime((long) 0, chronology14);
        org.joda.time.Chronology chronology16 = localTime15.getChronology();
        org.joda.time.DateTimeField dateTimeField17 = chronology16.weekyearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime18 = org.joda.time.MutableDateTime.now(chronology16);
        org.joda.time.DateTimeField dateTimeField19 = chronology16.monthOfYear();
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) 1, chronology16);
        org.joda.time.DurationField durationField21 = durationFieldType8.getField(chronology16);
        org.joda.time.DateTimeField dateTimeField22 = chronology16.year();
        boolean boolean23 = strMap0.equals((java.lang.Object) dateTimeField22);
        org.joda.time.Weeks weeks24 = org.joda.time.Weeks.ONE;
        java.util.concurrent.TimeUnit timeUnit25 = java.util.concurrent.TimeUnit.NANOSECONDS;
        boolean boolean26 = weeks24.equals((java.lang.Object) timeUnit25);
        org.joda.time.MutablePeriod mutablePeriod27 = weeks24.toMutablePeriod();
        int int28 = mutablePeriod27.getSeconds();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((long) 3, chronology30);
        org.joda.time.DateTime.Property property32 = dateTime31.dayOfYear();
        org.joda.time.Interval interval33 = property32.toInterval();
        org.joda.time.DateTime dateTime34 = interval33.getEnd();
        mutablePeriod27.setPeriod((org.joda.time.ReadableInterval) interval33);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime((long) 3, chronology37);
        org.joda.time.DateTime.Property property39 = dateTime38.dayOfYear();
        org.joda.time.Interval interval40 = property39.toInterval();
        org.joda.time.DateTime dateTime41 = interval40.getEnd();
        org.joda.time.ReadableInstant readableInstant42 = null;
        org.joda.time.ReadableInstant readableInstant43 = null;
        org.joda.time.Duration duration44 = new org.joda.time.Duration(readableInstant42, readableInstant43);
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.PeriodType periodType46 = null;
        org.joda.time.Period period47 = duration44.toPeriodTo(readableInstant45, periodType46);
        long long48 = duration44.getStandardSeconds();
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime((long) 3, chronology50);
        org.joda.time.DateTime.Property property52 = dateTime51.dayOfYear();
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.DateMidnight dateMidnight54 = new org.joda.time.DateMidnight((java.lang.Object) dateTime51, chronology53);
        org.joda.time.DateMidnight dateMidnight56 = dateMidnight54.minusMonths((-1));
        org.joda.time.DateMidnight dateMidnight58 = dateMidnight54.withDayOfYear((int) ' ');
        org.joda.time.Interval interval59 = duration44.toIntervalTo((org.joda.time.ReadableInstant) dateMidnight58);
        java.time.DayOfWeek dayOfWeek60 = java.time.DayOfWeek.MONDAY;
        boolean boolean61 = interval59.equals((java.lang.Object) dayOfWeek60);
        boolean boolean62 = interval40.isBefore((org.joda.time.ReadableInterval) interval59);
        org.joda.time.Interval interval63 = interval33.overlap((org.joda.time.ReadableInterval) interval40);
        boolean boolean64 = strMap0.containsKey((java.lang.Object) interval40);
        org.junit.Assert.assertNotNull(strMap0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(durationFieldType8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 4 + "'", int9 == 4);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(weeks24);
        org.junit.Assert.assertNotNull(timeUnit25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(mutablePeriod27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(interval40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(dateMidnight56);
        org.junit.Assert.assertNotNull(dateMidnight58);
        org.junit.Assert.assertNotNull(interval59);
        org.junit.Assert.assertTrue("'" + dayOfWeek60 + "' != '" + java.time.DayOfWeek.MONDAY + "'", dayOfWeek60.equals(java.time.DayOfWeek.MONDAY));
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(interval63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
    }

    @Test
    public void test2373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2373");
        java.io.File file0 = null;
        java.io.File file2 = new java.io.File(file0, "1970-01-01T00:00:00.003Z");
        java.net.URL uRL3 = file2.toURL();
        java.io.File file4 = null;
        java.io.File file6 = new java.io.File(file4, "1970-01-01T00:00:00.003Z");
        java.net.URL uRL7 = file6.toURL();
        boolean boolean8 = uRL3.sameFile(uRL7);
        java.lang.String str9 = uRL3.getPath();
        java.net.URLConnection uRLConnection10 = uRL3.openConnection();
        java.lang.String str11 = uRLConnection10.getContentType();
        // The following exception was thrown during execution in test generation
        try {
            uRLConnection10.setDoOutput(true);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: Already connected");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull("file2.getParent() == null", file2.getParent());
        org.junit.Assert.assertEquals(file2.toString(), "1970-01-01T00:00:00.003Z");
        org.junit.Assert.assertNotNull(uRL3);
// flaky:         org.junit.Assert.assertEquals(uRL3.toString(), "file:/experiment/1970-01-01T00:00:00.003Z/");
        org.junit.Assert.assertNull("file6.getParent() == null", file6.getParent());
        org.junit.Assert.assertEquals(file6.toString(), "1970-01-01T00:00:00.003Z");
        org.junit.Assert.assertNotNull(uRL7);
// flaky:         org.junit.Assert.assertEquals(uRL7.toString(), "file:/experiment/1970-01-01T00:00:00.003Z/");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "/experiment/1970-01-01T00:00:00.003Z/" + "'", str9, "/experiment/1970-01-01T00:00:00.003Z/");
        org.junit.Assert.assertNotNull(uRLConnection10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "text/plain" + "'", str11, "text/plain");
    }

    @Test
    public void test2374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2374");
        java.util.stream.DoubleStream doubleStream1 = java.util.stream.DoubleStream.of((double) 1024);
        java.util.stream.DoubleStream doubleStream2 = doubleStream1.sorted();
        java.util.function.DoubleUnaryOperator doubleUnaryOperator3 = java.util.function.DoubleUnaryOperator.identity();
        java.util.function.DoubleUnaryOperator doubleUnaryOperator4 = java.util.function.DoubleUnaryOperator.identity();
        double double6 = doubleUnaryOperator4.applyAsDouble((double) (-1L));
        java.util.function.DoubleUnaryOperator doubleUnaryOperator7 = doubleUnaryOperator3.compose(doubleUnaryOperator4);
        java.util.stream.DoubleStream doubleStream8 = doubleStream2.map(doubleUnaryOperator3);
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.DoubleStream doubleStream10 = doubleStream2.limit((long) 32769);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: stream has already been operated upon or closed");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleStream1);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertNotNull(doubleUnaryOperator3);
        org.junit.Assert.assertNotNull(doubleUnaryOperator4);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + (-1.0d) + "'", double6 == (-1.0d));
        org.junit.Assert.assertNotNull(doubleUnaryOperator7);
        org.junit.Assert.assertNotNull(doubleStream8);
    }

    @Test
    public void test2375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2375");
        java.util.InvalidPropertiesFormatException invalidPropertiesFormatException1 = new java.util.InvalidPropertiesFormatException("yearOfCentury");
    }

    @Test
    public void test2376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2376");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 3, chronology1);
        org.joda.time.DateTime.Property property3 = dateTime2.dayOfYear();
        org.joda.time.Interval interval4 = property3.toInterval();
        org.joda.time.DateTimeField dateTimeField5 = property3.getField();
        org.joda.time.DateTime dateTime7 = property3.addToCopy((long) (byte) 1);
        org.joda.time.DateTime dateTime9 = dateTime7.withYear(4);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) 3, chronology11);
        org.joda.time.Period period13 = org.joda.time.Period.ZERO;
        org.joda.time.Period period14 = period13.normalizedStandard();
        org.joda.time.Period period16 = period14.minusMinutes((int) ' ');
        org.joda.time.Period period18 = period16.minusMonths((int) (byte) 0);
        org.joda.time.PeriodType periodType19 = period18.getPeriodType();
        org.joda.time.DateTime dateTime20 = dateTime12.minus((org.joda.time.ReadablePeriod) period18);
        org.joda.time.Duration duration21 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.DateTime dateTime22 = dateTime9.withTimeAtStartOfDay();
        java.util.TimeZone timeZone23 = null;
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forTimeZone(timeZone23);
        java.util.TimeZone timeZone26 = null;
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forTimeZone(timeZone26);
        org.joda.time.DateMidnight dateMidnight28 = new org.joda.time.DateMidnight((long) 1970, dateTimeZone27);
        long long31 = dateTimeZone27.convertLocalToUTC((long) 3, false);
        long long33 = dateTimeZone24.getMillisKeepLocal(dateTimeZone27, (long) ':');
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((java.lang.Object) dateTime9, dateTimeZone27);
        int int35 = dateTime34.getCenturyOfEra();
        org.joda.time.DateTime dateTime37 = dateTime34.withDayOfYear(365);
        int int38 = dateTime37.getDayOfWeek();
        int int39 = dateTime37.getDayOfYear();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 3L + "'", long31 == 3L);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 58L + "'", long33 == 58L);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 4 + "'", int38 == 4);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 365 + "'", int39 == 365);
    }

    @Test
    public void test2377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2377");
        org.joda.time.Period period0 = org.joda.time.Period.ZERO;
        org.joda.time.Period period1 = period0.normalizedStandard();
        org.joda.time.Period period3 = period0.plusHours(2);
        java.time.chrono.IsoEra isoEra4 = java.time.chrono.IsoEra.CE;
        boolean boolean5 = period3.equals((java.lang.Object) isoEra4);
        java.time.LocalTime localTime10 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime11 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime10);
        java.time.LocalTime localTime16 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime17 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime16);
        java.time.temporal.ChronoField chronoField18 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime20 = localTime16.with((java.time.temporal.TemporalField) chronoField18, (long) (short) 1);
        long long21 = localTime10.getLong((java.time.temporal.TemporalField) chronoField18);
        boolean boolean22 = isoEra4.isSupported((java.time.temporal.TemporalField) chronoField18);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery23 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period24 = isoEra4.query(periodTemporalQuery23);
        boolean boolean25 = period24.isNegative();
        java.time.Period period27 = period24.plusDays((long) ' ');
        java.time.temporal.ChronoField chronoField28 = java.time.temporal.ChronoField.SECOND_OF_DAY;
        boolean boolean29 = period24.equals((java.lang.Object) chronoField28);
        java.time.chrono.ChronoPeriod chronoPeriod30 = period24.negated();
        java.time.OffsetDateTime offsetDateTime31 = java.time.OffsetDateTime.now();
        java.time.temporal.ChronoField chronoField32 = java.time.temporal.ChronoField.HOUR_OF_DAY;
        boolean boolean33 = offsetDateTime31.isSupported((java.time.temporal.TemporalField) chronoField32);
        java.time.Month month34 = offsetDateTime31.getMonth();
        java.time.temporal.Temporal temporal35 = period24.addTo((java.time.temporal.Temporal) offsetDateTime31);
        java.time.OffsetDateTime offsetDateTime37 = offsetDateTime31.minusMinutes((long) '4');
        java.time.OffsetDateTime offsetDateTime39 = offsetDateTime37.plusDays(10L);
        java.time.OffsetDateTime offsetDateTime40 = java.time.OffsetDateTime.now();
        java.time.LocalDate localDate41 = offsetDateTime40.toLocalDate();
        org.joda.time.Period period42 = org.joda.time.Period.ZERO;
        org.joda.time.Period period43 = period42.normalizedStandard();
        org.joda.time.Period period45 = period42.plusHours(2);
        java.time.chrono.IsoEra isoEra46 = java.time.chrono.IsoEra.CE;
        boolean boolean47 = period45.equals((java.lang.Object) isoEra46);
        java.time.LocalTime localTime52 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime53 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime52);
        java.time.LocalTime localTime58 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime59 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime58);
        java.time.temporal.ChronoField chronoField60 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime62 = localTime58.with((java.time.temporal.TemporalField) chronoField60, (long) (short) 1);
        long long63 = localTime52.getLong((java.time.temporal.TemporalField) chronoField60);
        boolean boolean64 = isoEra46.isSupported((java.time.temporal.TemporalField) chronoField60);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery65 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period66 = isoEra46.query(periodTemporalQuery65);
        boolean boolean67 = period66.isNegative();
        java.time.Period period69 = period66.plusDays((long) ' ');
        java.time.temporal.ChronoField chronoField70 = java.time.temporal.ChronoField.SECOND_OF_DAY;
        boolean boolean71 = period66.equals((java.lang.Object) chronoField70);
        java.time.chrono.ChronoPeriod chronoPeriod72 = period66.negated();
        java.time.OffsetDateTime offsetDateTime73 = java.time.OffsetDateTime.now();
        java.time.temporal.ChronoField chronoField74 = java.time.temporal.ChronoField.HOUR_OF_DAY;
        boolean boolean75 = offsetDateTime73.isSupported((java.time.temporal.TemporalField) chronoField74);
        java.time.Month month76 = offsetDateTime73.getMonth();
        java.time.temporal.Temporal temporal77 = period66.addTo((java.time.temporal.Temporal) offsetDateTime73);
        java.time.chrono.ChronoLocalDate chronoLocalDate78 = localDate41.minus((java.time.temporal.TemporalAmount) period66);
        java.time.OffsetDateTime offsetDateTime79 = offsetDateTime39.plus((java.time.temporal.TemporalAmount) period66);
        java.time.OffsetDateTime offsetDateTime81 = offsetDateTime79.minusYears((long) 2097);
        int int82 = offsetDateTime81.getNano();
        org.junit.Assert.assertNotNull(period0);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertTrue("'" + isoEra4 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra4.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertTrue("'" + chronoField18 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField18.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 3601000000001L + "'", long21 == 3601000000001L);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(periodTemporalQuery23);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertTrue("'" + chronoField28 + "' != '" + java.time.temporal.ChronoField.SECOND_OF_DAY + "'", chronoField28.equals(java.time.temporal.ChronoField.SECOND_OF_DAY));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(chronoPeriod30);
        org.junit.Assert.assertNotNull(offsetDateTime31);
        org.junit.Assert.assertTrue("'" + chronoField32 + "' != '" + java.time.temporal.ChronoField.HOUR_OF_DAY + "'", chronoField32.equals(java.time.temporal.ChronoField.HOUR_OF_DAY));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + month34 + "' != '" + java.time.Month.FEBRUARY + "'", month34.equals(java.time.Month.FEBRUARY));
        org.junit.Assert.assertNotNull(temporal35);
        org.junit.Assert.assertNotNull(offsetDateTime37);
        org.junit.Assert.assertNotNull(offsetDateTime39);
        org.junit.Assert.assertNotNull(offsetDateTime40);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertTrue("'" + isoEra46 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra46.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(localTime52);
        org.junit.Assert.assertNotNull(localTime53);
        org.junit.Assert.assertNotNull(localTime58);
        org.junit.Assert.assertNotNull(localTime59);
        org.junit.Assert.assertTrue("'" + chronoField60 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField60.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime62);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 3601000000001L + "'", long63 == 3601000000001L);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(periodTemporalQuery65);
        org.junit.Assert.assertNotNull(period66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(period69);
        org.junit.Assert.assertTrue("'" + chronoField70 + "' != '" + java.time.temporal.ChronoField.SECOND_OF_DAY + "'", chronoField70.equals(java.time.temporal.ChronoField.SECOND_OF_DAY));
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(chronoPeriod72);
        org.junit.Assert.assertNotNull(offsetDateTime73);
        org.junit.Assert.assertTrue("'" + chronoField74 + "' != '" + java.time.temporal.ChronoField.HOUR_OF_DAY + "'", chronoField74.equals(java.time.temporal.ChronoField.HOUR_OF_DAY));
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + month76 + "' != '" + java.time.Month.FEBRUARY + "'", month76.equals(java.time.Month.FEBRUARY));
        org.junit.Assert.assertNotNull(temporal77);
        org.junit.Assert.assertNotNull(chronoLocalDate78);
        org.junit.Assert.assertNotNull(offsetDateTime79);
        org.junit.Assert.assertNotNull(offsetDateTime81);
// flaky:         org.junit.Assert.assertTrue("'" + int82 + "' != '" + 740000000 + "'", int82 == 740000000);
    }

    @Test
    public void test2378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2378");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("2000-02-21T09:37:03.012", (double) (-4));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: weight=-4.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test2379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2379");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.now();
        java.time.LocalTime localTime1 = localDateTime0.toLocalTime();
        // The following exception was thrown during execution in test generation
        try {
            java.time.LocalTime localTime3 = localTime1.withHour(679);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for HourOfDay (valid values 0 - 23): 679");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localTime1);
    }

    @Test
    public void test2380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2380");
        java.time.format.DateTimeFormatter dateTimeFormatter0 = java.time.format.DateTimeFormatter.ISO_DATE;
        java.text.Format format1 = dateTimeFormatter0.toFormat();
        java.text.Format format2 = dateTimeFormatter0.toFormat();
        java.time.ZoneId zoneId3 = null;
        java.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter0.withZone(zoneId3);
        java.text.Format format5 = dateTimeFormatter0.toFormat();
        java.text.ParsePosition parsePosition8 = new java.text.ParsePosition((-624));
        java.lang.Object obj9 = format5.parseObject("2022-02-21T09:34:42.358Z", parsePosition8);
        java.util.Properties properties10 = null;
        java.util.Properties properties11 = new java.util.Properties(properties10);
        java.time.LocalTime localTime16 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime17 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime16);
        java.time.LocalTime localTime22 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime23 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime22);
        java.time.temporal.ChronoField chronoField24 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime26 = localTime22.with((java.time.temporal.TemporalField) chronoField24, (long) (short) 1);
        long long27 = localTime16.getLong((java.time.temporal.TemporalField) chronoField24);
        java.time.LocalTime localTime29 = localTime16.withSecond((int) (short) 1);
        java.lang.Object obj31 = properties11.put((java.lang.Object) localTime29, (java.lang.Object) "117");
        boolean boolean33 = properties11.containsValue((java.lang.Object) 6);
        java.time.LocalDate localDate36 = java.time.LocalDate.ofEpochDay((long) ' ');
        int int37 = localDate36.getMonthValue();
        java.lang.Object obj38 = properties11.replace((java.lang.Object) 21, (java.lang.Object) localDate36);
        java.lang.StringBuffer stringBuffer39 = null;
        java.text.Format.Field field40 = null;
        java.text.FieldPosition fieldPosition41 = new java.text.FieldPosition(field40);
        int int42 = fieldPosition41.getField();
        int int43 = fieldPosition41.getBeginIndex();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.StringBuffer stringBuffer44 = format5.format((java.lang.Object) properties11, stringBuffer39, fieldPosition41);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: toAppendTo");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(format1);
        org.junit.Assert.assertNotNull(format2);
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(format5);
        org.junit.Assert.assertNull(obj9);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertTrue("'" + chronoField24 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField24.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime26);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 3601000000001L + "'", long27 == 3601000000001L);
        org.junit.Assert.assertNotNull(localTime29);
        org.junit.Assert.assertNull(obj31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2 + "'", int37 == 2);
        org.junit.Assert.assertNull(obj38);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
    }

    @Test
    public void test2381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2381");
        java.nio.LongBuffer longBuffer1 = java.nio.LongBuffer.allocate(32769);
        boolean boolean2 = longBuffer1.isDirect();
        java.nio.LongBuffer longBuffer3 = longBuffer1.compact();
        java.nio.ByteOrder byteOrder4 = longBuffer3.order();
        org.junit.Assert.assertNotNull(longBuffer1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(longBuffer3);
        org.junit.Assert.assertNotNull(byteOrder4);
    }

    @Test
    public void test2382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2382");
        java.nio.charset.Charset charset0 = java.nio.charset.Charset.defaultCharset();
        java.nio.charset.CharsetDecoder charsetDecoder1 = charset0.newDecoder();
        java.nio.charset.Charset charset2 = java.nio.charset.Charset.defaultCharset();
        boolean boolean3 = charset0.contains(charset2);
        java.nio.charset.CharsetEncoder charsetEncoder4 = charset0.newEncoder();
        char[] charArray5 = new char[] {};
        java.nio.CharBuffer charBuffer6 = java.nio.CharBuffer.wrap(charArray5);
        java.nio.ByteBuffer byteBuffer7 = charsetEncoder4.encode(charBuffer6);
        java.nio.CharBuffer charBuffer8 = charBuffer6.slice();
        java.nio.CharBuffer charBuffer9 = charBuffer6.compact();
        java.util.stream.IntStream intStream10 = charBuffer9.codePoints();
        java.nio.CharBuffer charBuffer11 = charBuffer9.asReadOnlyBuffer();
        org.junit.Assert.assertNotNull(charset0);
        org.junit.Assert.assertNotNull(charsetDecoder1);
        org.junit.Assert.assertNotNull(charset2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(charsetEncoder4);
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[]");
        org.junit.Assert.assertNotNull(charBuffer6);
        org.junit.Assert.assertNotNull(byteBuffer7);
        org.junit.Assert.assertNotNull(charBuffer8);
        org.junit.Assert.assertNotNull(charBuffer9);
        org.junit.Assert.assertNotNull(intStream10);
        org.junit.Assert.assertNotNull(charBuffer11);
    }

    @Test
    public void test2383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2383");
        long long6 = java.util.Date.UTC(197, 16384, 5, (int) ':', 101, 4096);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 47093921356000L + "'", long6 == 47093921356000L);
    }

    @Test
    public void test2384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2384");
        java.time.format.DateTimeFormatter dateTimeFormatter0 = java.time.format.DateTimeFormatter.ISO_DATE;
        java.lang.String str1 = dateTimeFormatter0.toString();
        java.time.LocalDateTime localDateTime2 = java.time.LocalDateTime.now();
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery3 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period4 = localDateTime2.query(periodTemporalQuery3);
        java.text.Format format5 = dateTimeFormatter0.toFormat(periodTemporalQuery3);
        java.lang.Object obj6 = format5.clone();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Object obj8 = format5.parseObject("java.io.FileNotFoundException");
            org.junit.Assert.fail("Expected exception of type java.text.ParseException; message: Text 'java.io.FileNotFoundException' could not be parsed at index 0");
        } catch (java.text.ParseException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "ParseCaseSensitive(false)(Value(Year,4,10,EXCEEDS_PAD)'-'Value(MonthOfYear,2)'-'Value(DayOfMonth,2))[Offset(+HH:MM:ss,'Z')]" + "'", str1, "ParseCaseSensitive(false)(Value(Year,4,10,EXCEEDS_PAD)'-'Value(MonthOfYear,2)'-'Value(DayOfMonth,2))[Offset(+HH:MM:ss,'Z')]");
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(periodTemporalQuery3);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(format5);
        org.junit.Assert.assertNotNull(obj6);
    }

    @Test
    public void test2385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2385");
        java.time.chrono.IsoEra isoEra0 = java.time.chrono.IsoEra.BCE;
        org.junit.Assert.assertTrue("'" + isoEra0 + "' != '" + java.time.chrono.IsoEra.BCE + "'", isoEra0.equals(java.time.chrono.IsoEra.BCE));
    }

    @Test
    public void test2386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2386");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 3, chronology1);
        org.joda.time.DateTime.Property property3 = dateTime2.dayOfYear();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight((java.lang.Object) dateTime2, chronology4);
        org.joda.time.MutableDateTime mutableDateTime6 = dateTime2.toMutableDateTime();
        org.joda.time.Days days7 = org.joda.time.Days.ONE;
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadablePeriod) days7);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) 3, chronology10);
        org.joda.time.DateTime.Property property12 = dateTime11.dayOfYear();
        org.joda.time.Interval interval13 = property12.toInterval();
        mutableInterval8.setInterval((org.joda.time.ReadableInterval) interval13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.Duration duration17 = new org.joda.time.Duration(readableInstant15, readableInstant16);
        org.joda.time.Duration duration19 = duration17.withMillis((-1L));
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.Duration duration21 = duration17.minus(readableDuration20);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((long) 3, chronology23);
        org.joda.time.DateTime.Property property25 = dateTime24.dayOfYear();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight((java.lang.Object) dateTime24, chronology26);
        org.joda.time.DateMidnight.Property property28 = dateMidnight27.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight29 = property28.getDateMidnight();
        org.joda.time.Interval interval30 = new org.joda.time.Interval((org.joda.time.ReadableDuration) duration21, (org.joda.time.ReadableInstant) dateMidnight29);
        mutableInterval8.setEnd((org.joda.time.ReadableInstant) dateMidnight29);
        org.joda.time.DateMidnight.Property property32 = dateMidnight29.dayOfWeek();
        org.joda.time.DateMidnight dateMidnight34 = property32.addToCopy(6);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(days7);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(dateMidnight34);
    }

    @Test
    public void test2387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2387");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 3, chronology1);
        org.joda.time.DateTime.Property property3 = dateTime2.dayOfYear();
        org.joda.time.Interval interval4 = property3.toInterval();
        org.joda.time.Period period5 = org.joda.time.Period.ZERO;
        org.joda.time.Period period6 = period5.normalizedStandard();
        org.joda.time.Period period8 = period6.minusMinutes((int) ' ');
        org.joda.time.Period period10 = period8.withMinutes(32769);
        boolean boolean11 = interval4.equals((java.lang.Object) period10);
        org.joda.time.Period period12 = org.joda.time.Period.ZERO;
        org.joda.time.Period period13 = period12.normalizedStandard();
        org.joda.time.Period period15 = period12.plusHours(2);
        int int16 = period12.getDays();
        org.joda.time.Interval interval17 = interval4.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period12);
        long long18 = interval17.getEndMillis();
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.Duration duration21 = new org.joda.time.Duration(readableInstant19, readableInstant20);
        org.joda.time.Duration duration23 = duration21.withMillis((-1L));
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.Duration duration25 = duration21.minus(readableDuration24);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((long) 3, chronology27);
        org.joda.time.DateTime.Property property29 = dateTime28.dayOfYear();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.DateMidnight dateMidnight31 = new org.joda.time.DateMidnight((java.lang.Object) dateTime28, chronology30);
        org.joda.time.DateMidnight.Property property32 = dateMidnight31.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight33 = property32.getDateMidnight();
        org.joda.time.Interval interval34 = new org.joda.time.Interval((org.joda.time.ReadableDuration) duration25, (org.joda.time.ReadableInstant) dateMidnight33);
        org.joda.time.Interval interval35 = interval17.withDurationAfterStart((org.joda.time.ReadableDuration) duration25);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.LocalTime localTime38 = new org.joda.time.LocalTime((long) 0, chronology37);
        org.joda.time.Chronology chronology39 = localTime38.getChronology();
        org.joda.time.DateTimeField dateTimeField40 = chronology39.weekyearOfCentury();
        org.joda.time.Period period41 = duration25.toPeriod(chronology39);
        int int42 = period41.getYears();
        org.joda.time.Period period44 = period41.minusMonths((int) (byte) 1);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 86400000L + "'", long18 == 86400000L);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(dateMidnight33);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(period44);
    }

    @Test
    public void test2388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2388");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((long) 0, chronology1);
        org.joda.time.Chronology chronology3 = localTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField4 = chronology3.weekyearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime5 = org.joda.time.MutableDateTime.now(chronology3);
        org.joda.time.DateTimeField dateTimeField6 = chronology3.monthOfYear();
        java.lang.String str8 = dateTimeField6.getAsText((long) 2);
        long long10 = dateTimeField6.roundHalfCeiling(3601000000001L);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) 3, chronology13);
        org.joda.time.DateTime.Property property15 = dateTime14.dayOfYear();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight((java.lang.Object) dateTime14, chronology16);
        org.joda.time.MutableDateTime mutableDateTime18 = dateTime14.toMutableDateTime();
        mutableDateTime18.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime18.dayOfWeek();
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime18.year();
        java.util.TimeZone timeZone23 = null;
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forTimeZone(timeZone23);
        mutableDateTime18.setZone(dateTimeZone24);
        java.util.Locale locale27 = java.util.Locale.TAIWAN;
        java.lang.String str28 = dateTimeZone24.getShortName((long) 64, locale27);
        java.lang.String str29 = dateTimeField6.getAsText(0, locale27);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "January" + "'", str8, "January");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 3600201600000L + "'", long10 == 3600201600000L);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "+00:00" + "'", str28, "+00:00");
        org.junit.Assert.assertNull(str29);
    }

    @Test
    public void test2389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2389");
        java.time.OffsetTime offsetTime0 = java.time.OffsetTime.now();
        int int1 = offsetTime0.getNano();
        java.time.OffsetTime offsetTime3 = offsetTime0.minusMinutes((long) 9);
        org.junit.Assert.assertNotNull(offsetTime0);
// flaky:         org.junit.Assert.assertTrue("'" + int1 + "' != '" + 78000000 + "'", int1 == 78000000);
        org.junit.Assert.assertNotNull(offsetTime3);
    }

    @Test
    public void test2390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2390");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.Interval interval1 = localDate0.toInterval();
        int int2 = localDate0.getDayOfYear();
        java.util.TimeZone timeZone6 = null;
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forTimeZone(timeZone6);
        org.joda.time.DateMidnight dateMidnight8 = new org.joda.time.DateMidnight((long) 1970, dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 3600000, dateTimeZone7);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) 22, dateTimeZone7);
        org.joda.time.Interval interval11 = localDate0.toInterval(dateTimeZone7);
        org.joda.time.LocalDate localDate13 = localDate0.withDayOfYear(45);
        int int14 = localDate13.getYearOfEra();
        org.junit.Assert.assertNotNull(interval1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 52 + "'", int2 == 52);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2022 + "'", int14 == 2022);
    }

    @Test
    public void test2391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2391");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 3, chronology1);
        org.joda.time.DateTime.Property property3 = dateTime2.dayOfYear();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight((java.lang.Object) dateTime2, chronology4);
        org.joda.time.MutableDateTime mutableDateTime6 = dateTime2.toMutableDateTime();
        mutableDateTime6.addYears((int) (short) 100);
        org.joda.time.Period period9 = org.joda.time.Period.ZERO;
        org.joda.time.TimeOfDay timeOfDay11 = org.joda.time.TimeOfDay.fromMillisOfDay((long) (short) 0);
        org.joda.time.TimeOfDay timeOfDay13 = org.joda.time.TimeOfDay.fromMillisOfDay((long) (short) 0);
        org.joda.time.Hours hours14 = org.joda.time.Hours.hoursBetween((org.joda.time.ReadablePartial) timeOfDay11, (org.joda.time.ReadablePartial) timeOfDay13);
        org.joda.time.DurationFieldType durationFieldType15 = org.joda.time.DurationFieldType.hours();
        org.joda.time.TimeOfDay timeOfDay17 = timeOfDay13.withFieldAdded(durationFieldType15, (int) (byte) 0);
        org.joda.time.Period period19 = period9.withFieldAdded(durationFieldType15, 4);
        mutableDateTime6.add((org.joda.time.ReadablePeriod) period9);
        mutableDateTime6.addMonths(1970);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.Duration duration25 = new org.joda.time.Duration(readableInstant23, readableInstant24);
        org.joda.time.Duration duration27 = duration25.withMillis((-1L));
        mutableDateTime6.add((org.joda.time.ReadableDuration) duration27, 0);
        org.joda.time.Duration duration31 = duration27.withMillis(3600000L);
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.Duration duration34 = new org.joda.time.Duration(readableInstant32, readableInstant33);
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.PeriodType periodType36 = null;
        org.joda.time.Period period37 = duration34.toPeriodTo(readableInstant35, periodType36);
        org.joda.time.ReadableInstant readableInstant38 = null;
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.Duration duration40 = new org.joda.time.Duration(readableInstant38, readableInstant39);
        long long41 = duration40.getMillis();
        boolean boolean42 = duration34.isShorterThan((org.joda.time.ReadableDuration) duration40);
        org.joda.time.ReadableInstant readableInstant43 = null;
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.Duration duration45 = new org.joda.time.Duration(readableInstant43, readableInstant44);
        org.joda.time.ReadableInstant readableInstant46 = null;
        org.joda.time.PeriodType periodType47 = null;
        org.joda.time.Period period48 = duration45.toPeriodTo(readableInstant46, periodType47);
        org.joda.time.ReadableInstant readableInstant49 = null;
        org.joda.time.ReadableInstant readableInstant50 = null;
        org.joda.time.Duration duration51 = new org.joda.time.Duration(readableInstant49, readableInstant50);
        long long52 = duration51.getMillis();
        boolean boolean53 = duration45.isShorterThan((org.joda.time.ReadableDuration) duration51);
        org.joda.time.Duration duration54 = duration40.plus((org.joda.time.ReadableDuration) duration45);
        org.joda.time.Duration duration55 = duration27.plus((org.joda.time.ReadableDuration) duration40);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(timeOfDay11);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertNotNull(hours14);
        org.junit.Assert.assertNotNull(durationFieldType15);
        org.junit.Assert.assertNotNull(timeOfDay17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertNotNull(duration55);
    }

    @Test
    public void test2392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2392");
        org.joda.time.Period period0 = org.joda.time.Period.ZERO;
        org.joda.time.Period period1 = period0.normalizedStandard();
        org.joda.time.Period period3 = period0.plusHours(2);
        org.joda.time.DurationFieldType durationFieldType4 = org.joda.time.DurationFieldType.hours();
        int int5 = period0.indexOf(durationFieldType4);
        org.joda.time.Weeks weeks6 = period0.toStandardWeeks();
        int int7 = period0.getMillis();
        org.junit.Assert.assertNotNull(period0);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 4 + "'", int5 == 4);
        org.junit.Assert.assertNotNull(weeks6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test2393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2393");
        // The following exception was thrown during execution in test generation
        try {
            java.time.ZonedDateTime zonedDateTime1 = java.time.ZonedDateTime.parse((java.lang.CharSequence) "");
            org.junit.Assert.fail("Expected exception of type java.time.format.DateTimeParseException; message: Text '' could not be parsed at index 0");
        } catch (java.time.format.DateTimeParseException e) {
            // Expected exception.
        }
    }

    @Test
    public void test2394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2394");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Set<java.lang.String> strSet3 = java.time.ZoneId.getAvailableZoneIds();
        java.util.stream.Stream<java.lang.String> strStream4 = strSet3.parallelStream();
        java.lang.Object[] objArray5 = strSet3.toArray();
        java.util.Spliterator<java.lang.String> strSpliterator6 = strSet3.spliterator();
        boolean boolean7 = strSet3.isEmpty();
        java.util.Set<java.lang.String> strSet8 = java.time.ZoneId.getAvailableZoneIds();
        java.util.stream.Stream<java.lang.String> strStream9 = strSet8.parallelStream();
        boolean boolean11 = strSet8.contains((java.lang.Object) 1.0d);
        java.util.stream.Stream<java.lang.String> strStream12 = strSet8.parallelStream();
        org.joda.time.YearMonthDay yearMonthDay13 = new org.joda.time.YearMonthDay();
        java.util.TimeZone timeZone16 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight((long) 1970, dateTimeZone17);
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) 3600000, dateTimeZone17);
        org.joda.time.DateMidnight dateMidnight20 = yearMonthDay13.toDateMidnight(dateTimeZone17);
        boolean boolean21 = strSet8.equals((java.lang.Object) dateMidnight20);
        boolean boolean23 = strSet8.add("0");
        boolean boolean24 = strSet3.removeAll((java.util.Collection<java.lang.String>) strSet8);
        java.util.List<java.lang.String> strList25 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet3);
        java.util.Spliterator<java.lang.String> strSpliterator26 = strSet3.spliterator();
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(strStream4);
        org.junit.Assert.assertNotNull(objArray5);
        org.junit.Assert.assertNotNull(strSpliterator6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertNotNull(strStream9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(strStream12);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(strList25);
        org.junit.Assert.assertNotNull(strSpliterator26);
    }

    @Test
    public void test2395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2395");
        java.util.Set<java.lang.String> strSet0 = java.time.ZoneId.getAvailableZoneIds();
        java.util.stream.Stream<java.lang.String> strStream1 = strSet0.parallelStream();
        boolean boolean3 = strSet0.remove((java.lang.Object) 0);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalTime localTime6 = new org.joda.time.LocalTime((long) 0, chronology5);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 3, chronology8);
        org.joda.time.DateTime.Property property10 = dateTime9.dayOfYear();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight((java.lang.Object) dateTime9, chronology11);
        org.joda.time.DateTime dateTime13 = localTime6.toDateTime((org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.LocalTime localTime15 = localTime6.plusHours(3);
        int int16 = localTime15.getMillisOfDay();
        org.joda.time.LocalTime.Property property17 = localTime15.millisOfSecond();
        org.joda.time.LocalTime localTime18 = property17.roundFloorCopy();
        org.joda.time.LocalTime localTime20 = property17.addCopy((long) 59);
        boolean boolean21 = strSet0.equals((java.lang.Object) 59);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((long) 3, chronology23);
        org.joda.time.DateTime.Property property25 = dateTime24.dayOfYear();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight((java.lang.Object) dateTime24, chronology26);
        org.joda.time.MutableDateTime mutableDateTime28 = dateTime24.toMutableDateTime();
        org.joda.time.Days days29 = org.joda.time.Days.ONE;
        org.joda.time.MutableInterval mutableInterval30 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime24, (org.joda.time.ReadablePeriod) days29);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((long) 3, chronology32);
        org.joda.time.DateTime.Property property34 = dateTime33.dayOfYear();
        org.joda.time.Interval interval35 = property34.toInterval();
        mutableInterval30.setInterval((org.joda.time.ReadableInterval) interval35);
        org.joda.time.MutableInterval mutableInterval37 = interval35.toMutableInterval();
        boolean boolean38 = strSet0.equals((java.lang.Object) mutableInterval37);
        // The following exception was thrown during execution in test generation
        try {
            mutableInterval37.setDurationBeforeEnd((-4831848L));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strSet0);
        org.junit.Assert.assertNotNull(strStream1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 10800000 + "'", int16 == 10800000);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(mutableDateTime28);
        org.junit.Assert.assertNotNull(days29);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertNotNull(mutableInterval37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test2396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2396");
        java.time.Period period1 = java.time.Period.ofYears(28);
        java.time.Period period3 = java.time.Period.ofYears(28);
        java.time.Period period4 = period1.minus((java.time.temporal.TemporalAmount) period3);
        java.time.Period period6 = period3.withYears(16);
        // The following exception was thrown during execution in test generation
        try {
            java.time.Period period8 = period6.plusMonths(185068800000L);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: integer overflow");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(period6);
    }

    @Test
    public void test2397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2397");
        java.util.GregorianCalendar gregorianCalendar5 = new java.util.GregorianCalendar(12, 4096, 7, (-1), (int) (short) 10);
        int int6 = gregorianCalendar5.getWeeksInWeekYear();
        java.lang.String str7 = gregorianCalendar5.getCalendarType();
        java.time.ZonedDateTime zonedDateTime8 = gregorianCalendar5.toZonedDateTime();
        java.time.ZonedDateTime zonedDateTime10 = zonedDateTime8.minusMonths((long) 10);
        java.time.ZonedDateTime zonedDateTime12 = zonedDateTime10.withNano(52);
        java.time.LocalTime localTime17 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime18 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime17);
        long long19 = localTime18.toNanoOfDay();
        java.util.GregorianCalendar gregorianCalendar25 = new java.util.GregorianCalendar(12, 4096, 7, (-1), (int) (short) 10);
        int int26 = gregorianCalendar25.getWeeksInWeekYear();
        java.lang.String str27 = gregorianCalendar25.getCalendarType();
        java.time.ZonedDateTime zonedDateTime28 = gregorianCalendar25.toZonedDateTime();
        java.time.ZonedDateTime zonedDateTime30 = zonedDateTime28.minusMonths((long) 10);
        java.time.temporal.Temporal temporal31 = localTime18.adjustInto((java.time.temporal.Temporal) zonedDateTime30);
        java.time.LocalDateTime localDateTime32 = java.time.LocalDateTime.now();
        java.time.LocalDateTime localDateTime34 = localDateTime32.minusYears((long) (byte) 10);
        java.time.LocalDateTime localDateTime35 = java.time.LocalDateTime.now();
        java.time.LocalDateTime localDateTime37 = localDateTime35.minusYears((long) (byte) 10);
        boolean boolean38 = localDateTime32.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime37);
        java.time.OffsetTime offsetTime39 = java.time.OffsetTime.MAX;
        java.time.LocalTime localTime40 = offsetTime39.toLocalTime();
        java.time.OffsetTime offsetTime41 = java.time.OffsetTime.MAX;
        java.time.LocalTime localTime42 = offsetTime41.toLocalTime();
        java.lang.String str43 = offsetTime41.toString();
        java.time.Duration duration44 = java.time.Duration.ZERO;
        java.lang.String str45 = duration44.toString();
        java.time.OffsetTime offsetTime46 = offsetTime41.plus((java.time.temporal.TemporalAmount) duration44);
        java.time.OffsetTime offsetTime48 = offsetTime41.plusNanos((long) 0);
        java.time.LocalTime localTime53 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime54 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime53);
        java.time.temporal.ChronoField chronoField55 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime57 = localTime53.with((java.time.temporal.TemporalField) chronoField55, (long) (short) 1);
        java.util.Locale locale58 = java.util.Locale.GERMANY;
        java.lang.String str59 = chronoField55.getDisplayName(locale58);
        java.time.OffsetTime offsetTime61 = offsetTime48.with((java.time.temporal.TemporalField) chronoField55, (long) 28);
        long long62 = localTime40.getLong((java.time.temporal.TemporalField) chronoField55);
        java.time.temporal.TemporalUnit temporalUnit63 = chronoField55.getRangeUnit();
        boolean boolean64 = localDateTime32.isSupported(temporalUnit63);
        java.time.ZonedDateTime zonedDateTime65 = zonedDateTime30.truncatedTo(temporalUnit63);
        boolean boolean66 = zonedDateTime12.isEqual((java.time.chrono.ChronoZonedDateTime<java.time.LocalDate>) zonedDateTime30);
        java.time.ZonedDateTime zonedDateTime68 = zonedDateTime12.minusYears(0L);
        java.time.ZoneOffset zoneOffset69 = java.time.ZoneOffset.from((java.time.temporal.TemporalAccessor) zonedDateTime12);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 52 + "'", int6 == 52);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "gregory" + "'", str7, "gregory");
        org.junit.Assert.assertNotNull(zonedDateTime8);
        org.junit.Assert.assertNotNull(zonedDateTime10);
        org.junit.Assert.assertNotNull(zonedDateTime12);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 3601000000001L + "'", long19 == 3601000000001L);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 52 + "'", int26 == 52);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "gregory" + "'", str27, "gregory");
        org.junit.Assert.assertNotNull(zonedDateTime28);
        org.junit.Assert.assertNotNull(zonedDateTime30);
        org.junit.Assert.assertNotNull(temporal31);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(offsetTime39);
        org.junit.Assert.assertNotNull(localTime40);
        org.junit.Assert.assertNotNull(offsetTime41);
        org.junit.Assert.assertNotNull(localTime42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "23:59:59.999999999-18:00" + "'", str43, "23:59:59.999999999-18:00");
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "PT0S" + "'", str45, "PT0S");
        org.junit.Assert.assertNotNull(offsetTime46);
        org.junit.Assert.assertNotNull(offsetTime48);
        org.junit.Assert.assertNotNull(localTime53);
        org.junit.Assert.assertNotNull(localTime54);
        org.junit.Assert.assertTrue("'" + chronoField55 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField55.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime57);
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "NanoOfDay" + "'", str59, "NanoOfDay");
        org.junit.Assert.assertNotNull(offsetTime61);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 86399999999999L + "'", long62 == 86399999999999L);
        org.junit.Assert.assertTrue("'" + temporalUnit63 + "' != '" + java.time.temporal.ChronoUnit.DAYS + "'", temporalUnit63.equals(java.time.temporal.ChronoUnit.DAYS));
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(zonedDateTime65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(zonedDateTime68);
        org.junit.Assert.assertNotNull(zoneOffset69);
    }

    @Test
    public void test2398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2398");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 3, chronology1);
        org.joda.time.DateTime.Property property3 = dateTime2.dayOfYear();
        org.joda.time.Interval interval4 = property3.toInterval();
        org.joda.time.DateTimeField dateTimeField5 = property3.getField();
        org.joda.time.DateTime dateTime7 = property3.addToCopy((long) (byte) 1);
        org.joda.time.DateTime dateTime9 = dateTime7.withYear(4);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) 3, chronology11);
        org.joda.time.Period period13 = org.joda.time.Period.ZERO;
        org.joda.time.Period period14 = period13.normalizedStandard();
        org.joda.time.Period period16 = period14.minusMinutes((int) ' ');
        org.joda.time.Period period18 = period16.minusMonths((int) (byte) 0);
        org.joda.time.PeriodType periodType19 = period18.getPeriodType();
        org.joda.time.DateTime dateTime20 = dateTime12.minus((org.joda.time.ReadablePeriod) period18);
        org.joda.time.Duration duration21 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.LocalTime localTime24 = new org.joda.time.LocalTime((long) 0, chronology23);
        org.joda.time.Chronology chronology25 = localTime24.getChronology();
        org.joda.time.DateTimeField dateTimeField26 = chronology25.weekyearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime27 = org.joda.time.MutableDateTime.now(chronology25);
        mutableDateTime27.setWeekOfWeekyear((int) '#');
        mutableDateTime27.addHours(0);
        boolean boolean32 = dateTime20.isBefore((org.joda.time.ReadableInstant) mutableDateTime27);
        int int33 = mutableDateTime27.getDayOfYear();
        mutableDateTime27.setMillisOfDay(65);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(mutableDateTime27);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 241 + "'", int33 == 241);
    }

    @Test
    public void test2399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2399");
        java.util.TimeZone timeZone3 = null;
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight((long) 1970, dateTimeZone4);
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((long) 3600000, dateTimeZone4);
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((long) 22, dateTimeZone4);
        java.lang.String str8 = dateTimeZone4.getID();
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Etc/UTC" + "'", str8, "Etc/UTC");
    }

    @Test
    public void test2400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2400");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.now();
        java.time.temporal.ChronoField chronoField1 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime3 = localDateTime0.with((java.time.temporal.TemporalField) chronoField1, (long) 10);
        java.time.LocalDateTime localDateTime5 = localDateTime0.minusMinutes((long) 12);
        java.time.OffsetDateTime offsetDateTime6 = java.time.OffsetDateTime.now();
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofHours(9);
        java.time.OffsetDateTime offsetDateTime9 = offsetDateTime6.withOffsetSameLocal(zoneOffset8);
        java.time.ZoneOffset zoneOffset11 = java.time.ZoneOffset.ofHours(9);
        java.time.ZonedDateTime zonedDateTime12 = java.time.ZonedDateTime.ofInstant(localDateTime0, zoneOffset8, (java.time.ZoneId) zoneOffset11);
        java.time.zone.ZoneRules zoneRules13 = java.time.zone.ZoneRules.of(zoneOffset8);
        java.time.Instant instant14 = java.time.Instant.EPOCH;
        java.time.Instant instant15 = java.time.Instant.now();
        java.time.Instant instant16 = java.time.Instant.now();
        boolean boolean17 = instant15.isAfter(instant16);
        java.time.Duration duration18 = java.time.Duration.ZERO;
        java.time.Instant instant19 = instant16.minus((java.time.temporal.TemporalAmount) duration18);
        boolean boolean20 = instant14.isAfter(instant19);
        java.time.ZoneOffset zoneOffset21 = zoneRules13.getStandardOffset(instant14);
        java.time.Instant instant22 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean23 = instant14.isBefore(instant22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertTrue("'" + chronoField1 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField1.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(offsetDateTime6);
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(offsetDateTime9);
        org.junit.Assert.assertNotNull(zoneOffset11);
        org.junit.Assert.assertNotNull(zonedDateTime12);
        org.junit.Assert.assertNotNull(zoneRules13);
        org.junit.Assert.assertNotNull(instant14);
        org.junit.Assert.assertNotNull(instant15);
        org.junit.Assert.assertNotNull(instant16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(instant19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(zoneOffset21);
    }

    @Test
    public void test2401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2401");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 3, chronology1);
        org.joda.time.DateTime.Property property3 = dateTime2.dayOfYear();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight((java.lang.Object) dateTime2, chronology4);
        org.joda.time.MutableDateTime mutableDateTime6 = dateTime2.toMutableDateTime();
        org.joda.time.DateTime.Property property7 = dateTime2.monthOfYear();
        org.joda.time.DateTime.Property property8 = dateTime2.dayOfWeek();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(property8);
    }

    @Test
    public void test2402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2402");
        org.joda.time.Period period0 = org.joda.time.Period.ZERO;
        org.joda.time.Period period1 = period0.normalizedStandard();
        org.joda.time.Period period3 = period0.plusHours(2);
        java.time.chrono.IsoEra isoEra4 = java.time.chrono.IsoEra.CE;
        boolean boolean5 = period3.equals((java.lang.Object) isoEra4);
        java.time.LocalTime localTime10 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime11 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime10);
        java.time.LocalTime localTime16 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime17 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime16);
        java.time.temporal.ChronoField chronoField18 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime20 = localTime16.with((java.time.temporal.TemporalField) chronoField18, (long) (short) 1);
        long long21 = localTime10.getLong((java.time.temporal.TemporalField) chronoField18);
        boolean boolean22 = isoEra4.isSupported((java.time.temporal.TemporalField) chronoField18);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery23 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period24 = isoEra4.query(periodTemporalQuery23);
        boolean boolean25 = period24.isNegative();
        java.time.Period period27 = period24.plusDays((long) ' ');
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.LocalTime localTime30 = new org.joda.time.LocalTime((long) 0, chronology29);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((long) 3, chronology32);
        org.joda.time.DateTime.Property property34 = dateTime33.dayOfYear();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.DateMidnight dateMidnight36 = new org.joda.time.DateMidnight((java.lang.Object) dateTime33, chronology35);
        org.joda.time.DateTime dateTime37 = localTime30.toDateTime((org.joda.time.ReadableInstant) dateTime33);
        boolean boolean38 = period27.equals((java.lang.Object) localTime30);
        org.joda.time.Period period40 = org.joda.time.Period.hours((int) (short) 1);
        org.joda.time.LocalTime localTime42 = localTime30.withPeriodAdded((org.joda.time.ReadablePeriod) period40, 4);
        org.joda.time.LocalTime.Property property43 = localTime30.millisOfSecond();
        org.junit.Assert.assertNotNull(period0);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertTrue("'" + isoEra4 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra4.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertTrue("'" + chronoField18 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField18.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 3601000000001L + "'", long21 == 3601000000001L);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(periodTemporalQuery23);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(localTime42);
        org.junit.Assert.assertNotNull(property43);
    }

    @Test
    public void test2403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2403");
        java.util.stream.IntStream intStream2 = java.util.stream.IntStream.rangeClosed(100, (int) '4');
        java.util.stream.IntStream intStream3 = intStream2.sequential();
        java.util.stream.IntStream intStream4 = intStream3.sequential();
        java.util.LongSummaryStatistics longSummaryStatistics5 = new java.util.LongSummaryStatistics();
        longSummaryStatistics5.accept(3);
        long long8 = longSummaryStatistics5.getMax();
        java.util.LongSummaryStatistics longSummaryStatistics9 = new java.util.LongSummaryStatistics();
        longSummaryStatistics9.accept(3);
        java.util.function.LongConsumer longConsumer12 = longSummaryStatistics5.andThen((java.util.function.LongConsumer) longSummaryStatistics9);
        java.util.LongSummaryStatistics longSummaryStatistics13 = new java.util.LongSummaryStatistics();
        longSummaryStatistics13.accept(3);
        long long16 = longSummaryStatistics13.getMax();
        double double17 = longSummaryStatistics13.getAverage();
        longSummaryStatistics13.accept(6);
        java.util.function.LongConsumer longConsumer20 = longSummaryStatistics5.andThen((java.util.function.LongConsumer) longSummaryStatistics13);
        java.util.stream.IntStream intStream23 = java.util.stream.IntStream.rangeClosed(100, (int) '4');
        java.util.IntSummaryStatistics intSummaryStatistics24 = new java.util.IntSummaryStatistics();
        intStream23.forEach((java.util.function.IntConsumer) intSummaryStatistics24);
        java.util.IntSummaryStatistics intSummaryStatistics26 = new java.util.IntSummaryStatistics();
        intSummaryStatistics26.accept(57);
        intSummaryStatistics24.combine(intSummaryStatistics26);
        java.util.function.IntConsumer intConsumer30 = longSummaryStatistics13.andThen((java.util.function.IntConsumer) intSummaryStatistics24);
        intStream3.forEach(intConsumer30);
        // The following exception was thrown during execution in test generation
        try {
            java.util.PrimitiveIterator.OfInt ofInt32 = intStream3.iterator();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: stream has already been operated upon or closed");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intStream2);
        org.junit.Assert.assertNotNull(intStream3);
        org.junit.Assert.assertNotNull(intStream4);
        org.junit.Assert.assertEquals(longSummaryStatistics5.toString(), "LongSummaryStatistics{count=1, sum=3, min=3, average=3.000000, max=3}");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 3L + "'", long8 == 3L);
        org.junit.Assert.assertEquals(longSummaryStatistics9.toString(), "LongSummaryStatistics{count=1, sum=3, min=3, average=3.000000, max=3}");
        org.junit.Assert.assertNotNull(longConsumer12);
        org.junit.Assert.assertEquals(longSummaryStatistics13.toString(), "LongSummaryStatistics{count=2, sum=9, min=3, average=4.500000, max=6}");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 3L + "'", long16 == 3L);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 3.0d + "'", double17 == 3.0d);
        org.junit.Assert.assertNotNull(longConsumer20);
        org.junit.Assert.assertNotNull(intStream23);
        org.junit.Assert.assertEquals(intSummaryStatistics24.toString(), "IntSummaryStatistics{count=1, sum=57, min=57, average=57.000000, max=57}");
        org.junit.Assert.assertEquals(intSummaryStatistics26.toString(), "IntSummaryStatistics{count=1, sum=57, min=57, average=57.000000, max=57}");
        org.junit.Assert.assertNotNull(intConsumer30);
    }

    @Test
    public void test2404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2404");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale1 = java.util.Locale.ROOT;
        java.util.Locale.setDefault(category0, locale1);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
    }

    @Test
    public void test2405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2405");
        org.joda.time.YearMonthDay yearMonthDay0 = new org.joda.time.YearMonthDay();
        java.util.TimeZone timeZone3 = null;
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight((long) 1970, dateTimeZone4);
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((long) 3600000, dateTimeZone4);
        org.joda.time.DateMidnight dateMidnight7 = yearMonthDay0.toDateMidnight(dateTimeZone4);
        java.io.File file8 = null;
        java.io.File file10 = new java.io.File(file8, "1970-01-01T00:00:00.003Z");
        java.net.URL uRL11 = file10.toURL();
        java.io.File file12 = null;
        java.io.File file14 = new java.io.File(file12, "1970-01-01T00:00:00.003Z");
        java.net.URL uRL15 = file14.toURL();
        boolean boolean16 = uRL11.sameFile(uRL15);
        boolean boolean17 = dateTimeZone4.equals((java.lang.Object) uRL11);
        java.net.URLConnection uRLConnection18 = uRL11.openConnection();
        uRLConnection18.setAllowUserInteraction(true);
        // The following exception was thrown during execution in test generation
        try {
            java.io.OutputStream outputStream21 = uRLConnection18.getOutputStream();
            org.junit.Assert.fail("Expected exception of type java.net.UnknownServiceException; message: protocol doesn't support output");
        } catch (java.net.UnknownServiceException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNull("file10.getParent() == null", file10.getParent());
        org.junit.Assert.assertEquals(file10.toString(), "1970-01-01T00:00:00.003Z");
        org.junit.Assert.assertNotNull(uRL11);
// flaky:         org.junit.Assert.assertEquals(uRL11.toString(), "file:/experiment/1970-01-01T00:00:00.003Z/");
        org.junit.Assert.assertNull("file14.getParent() == null", file14.getParent());
        org.junit.Assert.assertEquals(file14.toString(), "1970-01-01T00:00:00.003Z");
        org.junit.Assert.assertNotNull(uRL15);
// flaky:         org.junit.Assert.assertEquals(uRL15.toString(), "file:/experiment/1970-01-01T00:00:00.003Z/");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(uRLConnection18);
    }

    @Test
    public void test2406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2406");
        java.io.OutputStream outputStream0 = null;
        java.io.FilterOutputStream filterOutputStream1 = new java.io.FilterOutputStream(outputStream0);
        java.io.PrintStream printStream3 = new java.io.PrintStream((java.io.OutputStream) filterOutputStream1, false);
        char[] charArray4 = new char[] {};
        java.nio.CharBuffer charBuffer5 = java.nio.CharBuffer.wrap(charArray4);
        printStream3.print(charArray4);
        // The following exception was thrown during execution in test generation
        try {
            printStream3.println(30);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray4);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray4), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray4), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray4), "[]");
        org.junit.Assert.assertNotNull(charBuffer5);
    }

    @Test
    public void test2407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2407");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((long) 0, chronology2);
        org.joda.time.Chronology chronology4 = localTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField5 = chronology4.weekyearOfCentury();
        org.joda.time.DurationField durationField6 = chronology4.weekyears();
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime((long) 21, chronology4);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) 3, chronology9);
        org.joda.time.DateTime.Property property11 = dateTime10.dayOfYear();
        org.joda.time.Interval interval12 = property11.toInterval();
        org.joda.time.DateTimeField dateTimeField13 = property11.getField();
        org.joda.time.DateTime dateTime15 = property11.addToCopy((long) (byte) 1);
        org.joda.time.DateTime dateTime17 = dateTime15.withYear(4);
        org.joda.time.Period period18 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime7, (org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.Period period20 = period18.minusMillis(4200);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(period20);
    }

    @Test
    public void test2408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2408");
        float[] floatArray2 = new float[] { (-1L), (byte) -1 };
        java.nio.FloatBuffer floatBuffer3 = java.nio.FloatBuffer.wrap(floatArray2);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.FloatBuffer floatBuffer6 = floatBuffer3.put(2088, (float) 35);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[-1.0, -1.0]");
        org.junit.Assert.assertNotNull(floatBuffer3);
    }

    @Test
    public void test2409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2409");
        java.time.LocalTime localTime4 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime5 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime4);
        java.time.temporal.ChronoField chronoField6 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime8 = localTime4.with((java.time.temporal.TemporalField) chronoField6, (long) (short) 1);
        java.util.Optional<java.lang.Exception> exceptionOptional9 = java.util.Optional.empty();
        java.lang.String str10 = exceptionOptional9.toString();
        java.time.LocalDateTime localDateTime11 = java.time.LocalDateTime.now();
        java.time.temporal.ChronoField chronoField12 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime14 = localDateTime11.with((java.time.temporal.TemporalField) chronoField12, (long) 10);
        java.time.LocalDateTime localDateTime16 = localDateTime11.withDayOfYear((int) '/');
        boolean boolean17 = exceptionOptional9.equals((java.lang.Object) localDateTime16);
        java.time.LocalDateTime localDateTime18 = java.time.LocalDateTime.now();
        java.time.temporal.ChronoField chronoField19 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime21 = localDateTime18.with((java.time.temporal.TemporalField) chronoField19, (long) 10);
        java.time.LocalDateTime localDateTime23 = localDateTime18.minusMinutes((long) 12);
        java.time.LocalDateTime localDateTime25 = localDateTime23.minusNanos((long) (byte) 1);
        java.time.temporal.ChronoField chronoField26 = java.time.temporal.ChronoField.OFFSET_SECONDS;
        boolean boolean27 = localDateTime25.isSupported((java.time.temporal.TemporalField) chronoField26);
        int int28 = localDateTime25.getMonthValue();
        boolean boolean29 = localDateTime16.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime25);
        java.time.LocalDateTime localDateTime31 = chronoField6.adjustInto(localDateTime25, 718066L);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertTrue("'" + chronoField6 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField6.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(exceptionOptional9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Optional.empty" + "'", str10, "Optional.empty");
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + chronoField12 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField12.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertTrue("'" + chronoField19 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField19.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertTrue("'" + chronoField26 + "' != '" + java.time.temporal.ChronoField.OFFSET_SECONDS + "'", chronoField26.equals(java.time.temporal.ChronoField.OFFSET_SECONDS));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(localDateTime31);
    }

    @Test
    public void test2410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2410");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        int int1 = localDate0.getCenturyOfEra();
        org.joda.time.LocalDate.Property property2 = localDate0.dayOfWeek();
        org.joda.time.LocalDate localDate4 = property2.addToCopy(7);
        org.joda.time.LocalDate.Property property5 = localDate4.dayOfMonth();
        org.joda.time.LocalDate localDate7 = property5.addToCopy((-4));
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 20 + "'", int1 == 20);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDate7);
    }

    @Test
    public void test2411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2411");
        java.nio.charset.Charset charset0 = java.nio.charset.Charset.defaultCharset();
        java.nio.charset.CharsetDecoder charsetDecoder1 = charset0.newDecoder();
        float float2 = charsetDecoder1.maxCharsPerByte();
        java.nio.charset.Charset charset3 = java.nio.charset.Charset.defaultCharset();
        java.nio.charset.CharsetDecoder charsetDecoder4 = charset3.newDecoder();
        java.nio.charset.Charset charset5 = java.nio.charset.Charset.defaultCharset();
        boolean boolean6 = charset3.contains(charset5);
        java.nio.charset.CharsetEncoder charsetEncoder7 = charset3.newEncoder();
        char[] charArray8 = new char[] {};
        java.nio.CharBuffer charBuffer9 = java.nio.CharBuffer.wrap(charArray8);
        java.nio.ByteBuffer byteBuffer10 = charsetEncoder7.encode(charBuffer9);
        char[] charArray17 = new char[] { '#', '/', '4', 'a', '4', 'u' };
        java.nio.CharBuffer charBuffer18 = java.nio.CharBuffer.wrap(charArray17);
        java.nio.charset.CoderResult coderResult20 = charsetDecoder1.decode(byteBuffer10, charBuffer18, false);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.CharBuffer charBuffer23 = charBuffer18.subSequence(0, 12);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charset0);
        org.junit.Assert.assertNotNull(charsetDecoder1);
        org.junit.Assert.assertTrue("'" + float2 + "' != '" + 1.0f + "'", float2 == 1.0f);
        org.junit.Assert.assertNotNull(charset3);
        org.junit.Assert.assertNotNull(charsetDecoder4);
        org.junit.Assert.assertNotNull(charset5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(charsetEncoder7);
        org.junit.Assert.assertNotNull(charArray8);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray8), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray8), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray8), "[]");
        org.junit.Assert.assertNotNull(charBuffer9);
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertNotNull(charArray17);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray17), "#/4a4u");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray17), "#/4a4u");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray17), "[#, /, 4, a, 4, u]");
        org.junit.Assert.assertNotNull(charBuffer18);
        org.junit.Assert.assertNotNull(coderResult20);
    }

    @Test
    public void test2412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2412");
        java.util.GregorianCalendar gregorianCalendar5 = new java.util.GregorianCalendar(12, 4096, 7, (-1), (int) (short) 10);
        int int6 = gregorianCalendar5.getWeeksInWeekYear();
        org.joda.time.YearMonthDay yearMonthDay7 = org.joda.time.YearMonthDay.fromCalendarFields((java.util.Calendar) gregorianCalendar5);
        org.joda.time.YearMonthDay yearMonthDay9 = yearMonthDay7.withYear(0);
        org.joda.time.Hours hours10 = org.joda.time.Hours.ZERO;
        org.joda.time.YearMonthDay yearMonthDay11 = yearMonthDay9.minus((org.joda.time.ReadablePeriod) hours10);
        org.joda.time.DateTime dateTime12 = yearMonthDay9.toDateTimeAtCurrentTime();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 52 + "'", int6 == 52);
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(hours10);
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertNotNull(dateTime12);
    }

    @Test
    public void test2413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2413");
        java.util.stream.LongStream longStream2 = java.util.stream.LongStream.rangeClosed((long) (short) -1, (long) 7);
        long long3 = longStream2.count();
        java.util.stream.LongStream longStream4 = longStream2.parallel();
        // The following exception was thrown during execution in test generation
        try {
            java.util.OptionalLong optionalLong5 = longStream2.findFirst();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: stream has already been operated upon or closed");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(longStream2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 9L + "'", long3 == 9L);
        org.junit.Assert.assertNotNull(longStream4);
    }

    @Test
    public void test2414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2414");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 3, chronology1);
        org.joda.time.DateTime.Property property3 = dateTime2.dayOfYear();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight((java.lang.Object) dateTime2, chronology4);
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight5.minusMonths((-1));
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight5.withDayOfYear((int) ' ');
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight9.minusMonths(1024);
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight11.withMillis((long) 366);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight15 = dateMidnight11.withYearOfEra((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1 for yearOfEra must be in the range [1,292278993]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(dateMidnight13);
    }

    @Test
    public void test2415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2415");
        java.time.Period period3 = java.time.Period.of((int) (byte) 10, (int) (byte) 10, 86);
        java.time.Duration duration5 = java.time.Duration.ofMinutes((long) 3);
        java.time.Duration duration6 = duration5.abs();
        java.time.Duration duration8 = duration6.dividedBy((long) 365);
        // The following exception was thrown during execution in test generation
        try {
            java.time.chrono.ChronoPeriod chronoPeriod9 = period3.plus((java.time.temporal.TemporalAmount) duration6);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Unit must be Years, Months or Days, but was Seconds");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration8);
    }

    @Test
    public void test2416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2416");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((long) 0, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) 3, chronology4);
        org.joda.time.DateTime.Property property6 = dateTime5.dayOfYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateMidnight dateMidnight8 = new org.joda.time.DateMidnight((java.lang.Object) dateTime5, chronology7);
        org.joda.time.DateTime dateTime9 = localTime2.toDateTime((org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.LocalTime localTime11 = localTime2.plusHours(3);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) 3, chronology13);
        org.joda.time.DateTime.Property property15 = dateTime14.dayOfYear();
        org.joda.time.Interval interval16 = property15.toInterval();
        org.joda.time.Period period17 = org.joda.time.Period.ZERO;
        org.joda.time.Period period18 = period17.normalizedStandard();
        org.joda.time.Period period20 = period18.minusMinutes((int) ' ');
        org.joda.time.Period period22 = period20.withMinutes(32769);
        boolean boolean23 = interval16.equals((java.lang.Object) period22);
        org.joda.time.LocalTime localTime25 = localTime11.withPeriodAdded((org.joda.time.ReadablePeriod) period22, (int) (byte) 100);
        org.joda.time.Period period27 = period22.minusMinutes((int) ':');
        int int28 = period22.getSeconds();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType30 = period22.getFieldType(83399);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
    }

    @Test
    public void test2417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2417");
        java.util.DoubleSummaryStatistics doubleSummaryStatistics0 = new java.util.DoubleSummaryStatistics();
        doubleSummaryStatistics0.accept((double) 97);
        long long3 = doubleSummaryStatistics0.getCount();
        org.junit.Assert.assertEquals(doubleSummaryStatistics0.toString(), "DoubleSummaryStatistics{count=1, sum=97.000000, min=97.000000, average=97.000000, max=97.000000}");
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
    }

    @Test
    public void test2418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2418");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Duration duration2 = new org.joda.time.Duration(readableInstant0, readableInstant1);
        org.joda.time.Seconds seconds3 = duration2.toStandardSeconds();
        org.joda.time.Duration duration4 = duration2.toDuration();
        org.junit.Assert.assertNotNull(seconds3);
        org.junit.Assert.assertNotNull(duration4);
    }

    @Test
    public void test2419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2419");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.nio.LongBuffer longBuffer3 = java.nio.LongBuffer.allocate((int) (short) 0);
        java.nio.Buffer buffer4 = longBuffer3.mark();
        boolean boolean5 = properties1.containsKey((java.lang.Object) longBuffer3);
        java.nio.charset.Charset charset6 = java.nio.charset.Charset.defaultCharset();
        boolean boolean7 = charset6.canEncode();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) 3, chronology9);
        org.joda.time.DateTime.Property property11 = dateTime10.dayOfYear();
        java.lang.Object obj12 = properties1.getOrDefault((java.lang.Object) boolean7, (java.lang.Object) property11);
        java.util.Collection<java.lang.Object> objCollection13 = properties1.values();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.LocalTime localTime16 = new org.joda.time.LocalTime((long) 0, chronology15);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) 3, chronology18);
        org.joda.time.DateTime.Property property20 = dateTime19.dayOfYear();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight((java.lang.Object) dateTime19, chronology21);
        org.joda.time.DateTime dateTime23 = localTime16.toDateTime((org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.DateTime dateTime25 = dateTime23.minusMillis((int) (byte) 0);
        org.joda.time.DateTime dateTime27 = dateTime23.withYearOfCentury((int) (byte) 10);
        org.joda.time.DateTime.Property property28 = dateTime27.hourOfDay();
        org.joda.time.DateTime dateTime30 = dateTime27.plus((long) 3600000);
        org.joda.time.DateTime dateTime33 = dateTime30.withDurationAdded((long) 366, (int) '#');
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.Interval interval35 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateTime30, readableInstant34);
        boolean boolean36 = properties1.containsValue((java.lang.Object) interval35);
        org.junit.Assert.assertNotNull(longBuffer3);
        org.junit.Assert.assertNotNull(buffer4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(charset6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(obj12);
        org.junit.Assert.assertEquals(obj12.toString(), "Property[dayOfYear]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj12), "Property[dayOfYear]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj12), "Property[dayOfYear]");
        org.junit.Assert.assertNotNull(objCollection13);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test2420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2420");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 3, chronology1);
        org.joda.time.DateTime.Property property3 = dateTime2.dayOfYear();
        org.joda.time.Interval interval4 = property3.toInterval();
        org.joda.time.DateTimeField dateTimeField5 = property3.getField();
        java.util.Locale locale10 = new java.util.Locale("ParseCaseSensitive(false)(Value(Year,4,10,EXCEEDS_PAD)'-'Value(MonthOfYear,2)'-'Value(DayOfMonth,2))[Offset(+HH:MM:ss,'Z')]", "UNDERFLOW", "Years");
        java.lang.String str11 = dateTimeField5.getAsShortText((int) 'u', locale10);
        java.util.GregorianCalendar gregorianCalendar17 = new java.util.GregorianCalendar(12, 4096, 7, (-1), (int) (short) 10);
        int int18 = gregorianCalendar17.getWeeksInWeekYear();
        org.joda.time.YearMonthDay yearMonthDay19 = org.joda.time.YearMonthDay.fromCalendarFields((java.util.Calendar) gregorianCalendar17);
        org.joda.time.YearMonthDay yearMonthDay21 = yearMonthDay19.withYear(0);
        java.util.stream.IntStream intStream24 = java.util.stream.IntStream.rangeClosed(100, (int) '4');
        int[] intArray25 = intStream24.toArray();
        int int26 = dateTimeField5.getMinimumValue((org.joda.time.ReadablePartial) yearMonthDay21, intArray25);
        org.joda.time.YearMonthDay yearMonthDay28 = yearMonthDay21.plusDays(19043);
        java.util.Properties properties29 = null;
        java.util.Properties properties30 = new java.util.Properties(properties29);
        java.time.LocalTime localTime35 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime36 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime35);
        java.time.LocalTime localTime41 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime42 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime41);
        java.time.temporal.ChronoField chronoField43 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime45 = localTime41.with((java.time.temporal.TemporalField) chronoField43, (long) (short) 1);
        long long46 = localTime35.getLong((java.time.temporal.TemporalField) chronoField43);
        java.time.LocalTime localTime48 = localTime35.withSecond((int) (short) 1);
        java.lang.Object obj50 = properties30.put((java.lang.Object) localTime48, (java.lang.Object) "117");
        java.lang.Object obj51 = properties30.clone();
        properties30.clear();
        int int53 = properties30.size();
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        boolean boolean55 = properties30.equals((java.lang.Object) dateTimeFieldType54);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay57 = yearMonthDay28.withField(dateTimeFieldType54, 59);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'weekOfWeekyear' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertEquals(locale10.toString(), "parsecasesensitive(false)(value(year,4,10,exceeds_pad)'-'value(monthofyear,2)'-'value(dayofmonth,2))[offset(+hh:mm:ss,'z')]_UNDERFLOW_Years");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "117" + "'", str11, "117");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 52 + "'", int18 == 52);
        org.junit.Assert.assertNotNull(yearMonthDay19);
        org.junit.Assert.assertNotNull(yearMonthDay21);
        org.junit.Assert.assertNotNull(intStream24);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(yearMonthDay28);
        org.junit.Assert.assertNotNull(localTime35);
        org.junit.Assert.assertNotNull(localTime36);
        org.junit.Assert.assertNotNull(localTime41);
        org.junit.Assert.assertNotNull(localTime42);
        org.junit.Assert.assertTrue("'" + chronoField43 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField43.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime45);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 3601000000001L + "'", long46 == 3601000000001L);
        org.junit.Assert.assertNotNull(localTime48);
        org.junit.Assert.assertNull(obj50);
        org.junit.Assert.assertNotNull(obj51);
        org.junit.Assert.assertEquals(obj51.toString(), "{01:00:01.000000001=117}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj51), "{01:00:01.000000001=117}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj51), "{01:00:01.000000001=117}");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
    }

    @Test
    public void test2421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2421");
        java.util.GregorianCalendar gregorianCalendar5 = new java.util.GregorianCalendar(12, 4096, 7, (-1), (int) (short) 10);
        gregorianCalendar5.setLenient(false);
        java.util.Locale locale10 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale11 = java.util.Locale.GERMANY;
        java.lang.String str12 = locale10.getDisplayScript(locale11);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.LocalTime localTime16 = new org.joda.time.LocalTime((long) 0, chronology15);
        org.joda.time.Chronology chronology17 = localTime16.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.weekyearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime19 = org.joda.time.MutableDateTime.now(chronology17);
        org.joda.time.DateTimeField dateTimeField20 = chronology17.monthOfYear();
        java.util.Locale locale21 = java.util.Locale.getDefault();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket23 = new org.joda.time.format.DateTimeParserBucket((long) 28, chronology17, locale21, (java.lang.Integer) 0);
        java.lang.String str24 = locale10.getDisplayName(locale21);
        java.util.Map<java.lang.String, java.lang.Integer> strMap25 = gregorianCalendar5.getDisplayNames(14, 1, locale21);
        // The following exception was thrown during execution in test generation
        try {
            int int27 = gregorianCalendar5.getMaximum(335);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 335");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(mutableDateTime19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Chinese (China)" + "'", str24, "Chinese (China)");
        org.junit.Assert.assertNull(strMap25);
    }

    @Test
    public void test2422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2422");
        int[] intArray6 = new int[] { 3600000, 3600000, 256, 21, (byte) 100, (short) -1 };
        java.util.stream.IntStream intStream7 = java.util.stream.IntStream.of(intArray6);
        java.util.stream.IntStream intStream8 = intStream7.sorted();
        java.util.function.IntPredicate intPredicate9 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean10 = intStream8.allMatch(intPredicate9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[3600000, 3600000, 256, 21, 100, -1]");
        org.junit.Assert.assertNotNull(intStream7);
        org.junit.Assert.assertNotNull(intStream8);
    }

    @Test
    public void test2423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2423");
        java.io.File file0 = null;
        java.io.File file2 = new java.io.File(file0, "1970-01-01T00:00:00.003Z");
        java.net.URL uRL3 = file2.toURL();
        boolean boolean4 = file2.canRead();
        java.nio.file.Path path5 = file2.toPath();
        java.nio.file.WatchService watchService6 = null;
        java.nio.file.WatchEvent.Kind<?> wildcardKind7 = null;
        java.nio.file.WatchEvent.Kind[] kindArray9 = new java.nio.file.WatchEvent.Kind[1];
        @SuppressWarnings("unchecked")
        java.nio.file.WatchEvent.Kind<?>[] wildcardKindArray10 = (java.nio.file.WatchEvent.Kind<?>[]) kindArray9;
        wildcardKindArray10[0] = wildcardKind7;
        java.nio.file.WatchEvent.Modifier modifier13 = null;
        java.nio.file.WatchEvent.Modifier[] modifierArray14 = new java.nio.file.WatchEvent.Modifier[] { modifier13 };
        // The following exception was thrown during execution in test generation
        try {
            java.nio.file.WatchKey watchKey15 = path5.register(watchService6, wildcardKindArray10, modifierArray14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull("file2.getParent() == null", file2.getParent());
        org.junit.Assert.assertEquals(file2.toString(), "1970-01-01T00:00:00.003Z");
        org.junit.Assert.assertNotNull(uRL3);
// flaky:         org.junit.Assert.assertEquals(uRL3.toString(), "file:/experiment/1970-01-01T00:00:00.003Z/");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(path5);
        org.junit.Assert.assertNotNull(kindArray9);
        org.junit.Assert.assertNotNull(wildcardKindArray10);
        org.junit.Assert.assertNotNull(modifierArray14);
    }

    @Test
    public void test2424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2424");
        org.joda.time.Minutes minutes1 = org.joda.time.Minutes.minutes(679);
        org.junit.Assert.assertNotNull(minutes1);
    }

    @Test
    public void test2425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2425");
        java.time.format.DateTimeFormatter dateTimeFormatter0 = java.time.format.DateTimeFormatter.ISO_DATE;
        java.text.Format format1 = dateTimeFormatter0.toFormat();
        java.time.LocalDateTime localDateTime2 = java.time.LocalDateTime.now();
        java.time.LocalDateTime localDateTime4 = localDateTime2.minusYears((long) (byte) 10);
        int int5 = localDateTime2.getHour();
        java.lang.String str6 = dateTimeFormatter0.format((java.time.temporal.TemporalAccessor) localDateTime2);
        java.nio.CharBuffer charBuffer8 = java.nio.CharBuffer.wrap((java.lang.CharSequence) "German");
        java.text.ParsePosition parsePosition10 = new java.text.ParsePosition((-624));
        java.time.temporal.TemporalAccessor temporalAccessor11 = dateTimeFormatter0.parseUnresolved((java.lang.CharSequence) charBuffer8, parsePosition10);
        char[] charArray18 = new char[] { '#', '/', '4', 'a', '4', 'u' };
        java.nio.CharBuffer charBuffer19 = java.nio.CharBuffer.wrap(charArray18);
        java.nio.CharBuffer charBuffer20 = java.nio.CharBuffer.wrap(charArray18);
        java.nio.CharBuffer charBuffer21 = charBuffer8.get(charArray18);
        java.nio.charset.Charset charset22 = java.nio.charset.Charset.defaultCharset();
        java.nio.charset.CharsetDecoder charsetDecoder23 = charset22.newDecoder();
        java.nio.charset.Charset charset24 = java.nio.charset.Charset.defaultCharset();
        boolean boolean25 = charset22.contains(charset24);
        java.nio.charset.CharsetEncoder charsetEncoder26 = charset22.newEncoder();
        byte[] byteArray27 = charsetEncoder26.replacement();
        java.nio.charset.Charset charset28 = java.nio.charset.Charset.defaultCharset();
        java.nio.charset.CharsetDecoder charsetDecoder29 = charset28.newDecoder();
        float float30 = charsetDecoder29.maxCharsPerByte();
        float float31 = charsetDecoder29.averageCharsPerByte();
        java.nio.charset.CodingErrorAction codingErrorAction32 = charsetDecoder29.unmappableCharacterAction();
        java.nio.charset.CharsetEncoder charsetEncoder33 = charsetEncoder26.onUnmappableCharacter(codingErrorAction32);
        java.nio.charset.Charset charset34 = java.nio.charset.Charset.defaultCharset();
        java.nio.charset.CharsetDecoder charsetDecoder35 = charset34.newDecoder();
        java.nio.charset.Charset charset36 = java.nio.charset.Charset.defaultCharset();
        boolean boolean37 = charset34.contains(charset36);
        java.nio.charset.CharsetEncoder charsetEncoder38 = charset34.newEncoder();
        char[] charArray39 = new char[] {};
        java.nio.CharBuffer charBuffer40 = java.nio.CharBuffer.wrap(charArray39);
        java.nio.ByteBuffer byteBuffer41 = charsetEncoder38.encode(charBuffer40);
        java.nio.CharBuffer charBuffer42 = charBuffer40.slice();
        java.nio.ByteBuffer byteBuffer43 = charsetEncoder33.encode(charBuffer42);
        java.nio.CharBuffer charBuffer44 = byteBuffer43.asCharBuffer();
        int int45 = charBuffer21.compareTo(charBuffer44);
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(format1);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 9 + "'", int5 == 9);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "2022-02-21" + "'", str6, "2022-02-21");
        org.junit.Assert.assertNotNull(charBuffer8);
        org.junit.Assert.assertNull(temporalAccessor11);
        org.junit.Assert.assertNotNull(charArray18);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray18), "German");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray18), "German");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray18), "[G, e, r, m, a, n]");
        org.junit.Assert.assertNotNull(charBuffer19);
        org.junit.Assert.assertNotNull(charBuffer20);
        org.junit.Assert.assertNotNull(charBuffer21);
        org.junit.Assert.assertNotNull(charset22);
        org.junit.Assert.assertNotNull(charsetDecoder23);
        org.junit.Assert.assertNotNull(charset24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(charsetEncoder26);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[63]");
        org.junit.Assert.assertNotNull(charset28);
        org.junit.Assert.assertNotNull(charsetDecoder29);
        org.junit.Assert.assertTrue("'" + float30 + "' != '" + 1.0f + "'", float30 == 1.0f);
        org.junit.Assert.assertTrue("'" + float31 + "' != '" + 1.0f + "'", float31 == 1.0f);
        org.junit.Assert.assertNotNull(codingErrorAction32);
        org.junit.Assert.assertNotNull(charsetEncoder33);
        org.junit.Assert.assertNotNull(charset34);
        org.junit.Assert.assertNotNull(charsetDecoder35);
        org.junit.Assert.assertNotNull(charset36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(charsetEncoder38);
        org.junit.Assert.assertNotNull(charArray39);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray39), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray39), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray39), "[]");
        org.junit.Assert.assertNotNull(charBuffer40);
        org.junit.Assert.assertNotNull(byteBuffer41);
        org.junit.Assert.assertNotNull(charBuffer42);
        org.junit.Assert.assertNotNull(byteBuffer43);
        org.junit.Assert.assertNotNull(charBuffer44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
    }

    @Test
    public void test2426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2426");
        java.util.GregorianCalendar gregorianCalendar5 = new java.util.GregorianCalendar(12, 4096, 7, (-1), (int) (short) 10);
        int int6 = gregorianCalendar5.getWeeksInWeekYear();
        java.lang.String str7 = gregorianCalendar5.getCalendarType();
        java.time.ZonedDateTime zonedDateTime8 = gregorianCalendar5.toZonedDateTime();
        int int10 = gregorianCalendar5.getLeastMaximum((int) (short) 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 52 + "'", int6 == 52);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "gregory" + "'", str7, "gregory");
        org.junit.Assert.assertNotNull(zonedDateTime8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
    }

    @Test
    public void test2427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2427");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Instant instant2 = org.joda.time.Instant.parse("DateTimeField[dayOfYear]", dateTimeFormatter1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test2428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2428");
        java.time.ZoneOffset zoneOffset0 = java.time.ZoneOffset.MIN;
        // The following exception was thrown during execution in test generation
        try {
            java.time.Month month1 = java.time.Month.from((java.time.temporal.TemporalAccessor) zoneOffset0);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Unable to obtain Month from TemporalAccessor: -18:00 of type java.time.ZoneOffset");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(zoneOffset0);
    }

    @Test
    public void test2429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2429");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.time.LocalTime localTime6 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime7 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime6);
        java.time.LocalTime localTime12 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime13 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime12);
        java.time.temporal.ChronoField chronoField14 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime16 = localTime12.with((java.time.temporal.TemporalField) chronoField14, (long) (short) 1);
        long long17 = localTime6.getLong((java.time.temporal.TemporalField) chronoField14);
        java.time.LocalTime localTime19 = localTime6.withSecond((int) (short) 1);
        java.lang.Object obj21 = properties1.put((java.lang.Object) localTime19, (java.lang.Object) "117");
        boolean boolean23 = properties1.containsValue((java.lang.Object) 6);
        properties1.clear();
        java.util.Enumeration<java.lang.Object> objEnumeration25 = properties1.keys();
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertTrue("'" + chronoField14 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField14.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 3601000000001L + "'", long17 == 3601000000001L);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(objEnumeration25);
    }

    @Test
    public void test2430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2430");
        org.joda.time.Period period3 = org.joda.time.Period.ZERO;
        org.joda.time.Period period4 = period3.normalizedStandard();
        org.joda.time.Period period6 = period4.minusMinutes((int) ' ');
        org.joda.time.Period period8 = period6.minusMonths((int) (byte) 0);
        org.joda.time.PeriodType periodType9 = period8.getPeriodType();
        org.joda.time.PeriodType periodType10 = periodType9.withHoursRemoved();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalTime localTime13 = new org.joda.time.LocalTime((long) 0, chronology12);
        org.joda.time.Chronology chronology14 = localTime13.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.weekyearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime16 = org.joda.time.MutableDateTime.now(chronology14);
        org.joda.time.DateTimeField dateTimeField17 = chronology14.monthOfYear();
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod((long) 679, (long) '/', periodType9, chronology14);
        org.joda.time.PeriodType periodType19 = periodType9.withMonthsRemoved();
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod(34451155400000L, periodType19);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(periodType19);
    }

    @Test
    public void test2431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2431");
        java.io.PrintStream printStream1 = new java.io.PrintStream("subject:\n (GERMAN)");
        printStream1.write((int) '#');
        java.util.GregorianCalendar gregorianCalendar9 = new java.util.GregorianCalendar(12, 4096, 7, (-1), (int) (short) 10);
        int int10 = gregorianCalendar9.getWeeksInWeekYear();
        java.util.TimeZone timeZone11 = gregorianCalendar9.getTimeZone();
        int int13 = gregorianCalendar9.getMaximum((int) (short) 10);
        printStream1.print((java.lang.Object) gregorianCalendar9);
        printStream1.println((long) 20);
        java.nio.charset.Charset charset17 = java.nio.charset.Charset.defaultCharset();
        java.nio.charset.CharsetDecoder charsetDecoder18 = charset17.newDecoder();
        java.nio.charset.Charset charset19 = java.nio.charset.Charset.defaultCharset();
        boolean boolean20 = charset17.contains(charset19);
        java.nio.charset.CharsetEncoder charsetEncoder21 = charset17.newEncoder();
        char[] charArray22 = new char[] {};
        java.nio.CharBuffer charBuffer23 = java.nio.CharBuffer.wrap(charArray22);
        java.nio.ByteBuffer byteBuffer24 = charsetEncoder21.encode(charBuffer23);
        java.nio.CharBuffer charBuffer25 = charBuffer23.slice();
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream28 = printStream1.append((java.lang.CharSequence) charBuffer23, 99, 65);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52 + "'", int10 == 52);
        org.junit.Assert.assertNotNull(timeZone11);
        org.junit.Assert.assertEquals(timeZone11.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 11 + "'", int13 == 11);
        org.junit.Assert.assertNotNull(charset17);
        org.junit.Assert.assertNotNull(charsetDecoder18);
        org.junit.Assert.assertNotNull(charset19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(charsetEncoder21);
        org.junit.Assert.assertNotNull(charArray22);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray22), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray22), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray22), "[]");
        org.junit.Assert.assertNotNull(charBuffer23);
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertNotNull(charBuffer25);
    }

    @Test
    public void test2432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2432");
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay(299102343168L);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField3 = timeOfDay1.getField(36);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 36");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test2433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2433");
        java.nio.charset.Charset charset0 = java.nio.charset.Charset.defaultCharset();
        java.nio.charset.CharsetDecoder charsetDecoder1 = charset0.newDecoder();
        java.nio.charset.Charset charset2 = java.nio.charset.Charset.defaultCharset();
        boolean boolean3 = charset0.contains(charset2);
        java.nio.charset.CharsetEncoder charsetEncoder4 = charset0.newEncoder();
        char[] charArray5 = new char[] {};
        java.nio.CharBuffer charBuffer6 = java.nio.CharBuffer.wrap(charArray5);
        java.nio.ByteBuffer byteBuffer7 = charsetEncoder4.encode(charBuffer6);
        java.nio.ByteOrder byteOrder8 = byteBuffer7.order();
        java.nio.ShortBuffer shortBuffer9 = byteBuffer7.asShortBuffer();
        java.nio.charset.Charset charset10 = java.nio.charset.Charset.defaultCharset();
        java.nio.charset.CharsetDecoder charsetDecoder11 = charset10.newDecoder();
        java.nio.charset.Charset charset12 = java.nio.charset.Charset.defaultCharset();
        boolean boolean13 = charset10.contains(charset12);
        java.nio.charset.CharsetEncoder charsetEncoder14 = charset10.newEncoder();
        byte[] byteArray15 = charsetEncoder14.replacement();
        java.nio.charset.Charset charset16 = java.nio.charset.Charset.defaultCharset();
        java.nio.charset.CharsetDecoder charsetDecoder17 = charset16.newDecoder();
        float float18 = charsetDecoder17.maxCharsPerByte();
        float float19 = charsetDecoder17.averageCharsPerByte();
        java.nio.charset.CodingErrorAction codingErrorAction20 = charsetDecoder17.unmappableCharacterAction();
        java.nio.charset.CharsetEncoder charsetEncoder21 = charsetEncoder14.onUnmappableCharacter(codingErrorAction20);
        java.nio.charset.Charset charset22 = java.nio.charset.Charset.defaultCharset();
        java.nio.charset.CharsetDecoder charsetDecoder23 = charset22.newDecoder();
        java.nio.charset.Charset charset24 = java.nio.charset.Charset.defaultCharset();
        boolean boolean25 = charset22.contains(charset24);
        java.nio.charset.CharsetEncoder charsetEncoder26 = charset22.newEncoder();
        char[] charArray27 = new char[] {};
        java.nio.CharBuffer charBuffer28 = java.nio.CharBuffer.wrap(charArray27);
        java.nio.ByteBuffer byteBuffer29 = charsetEncoder26.encode(charBuffer28);
        java.nio.CharBuffer charBuffer30 = charBuffer28.slice();
        java.nio.ByteBuffer byteBuffer31 = charsetEncoder21.encode(charBuffer30);
        java.nio.ByteBuffer byteBuffer32 = byteBuffer31.asReadOnlyBuffer();
        int int33 = byteBuffer7.compareTo(byteBuffer32);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer36 = byteBuffer7.put(999, (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charset0);
        org.junit.Assert.assertNotNull(charsetDecoder1);
        org.junit.Assert.assertNotNull(charset2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(charsetEncoder4);
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[]");
        org.junit.Assert.assertNotNull(charBuffer6);
        org.junit.Assert.assertNotNull(byteBuffer7);
        org.junit.Assert.assertNotNull(byteOrder8);
        org.junit.Assert.assertNotNull(shortBuffer9);
        org.junit.Assert.assertNotNull(charset10);
        org.junit.Assert.assertNotNull(charsetDecoder11);
        org.junit.Assert.assertNotNull(charset12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(charsetEncoder14);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[63]");
        org.junit.Assert.assertNotNull(charset16);
        org.junit.Assert.assertNotNull(charsetDecoder17);
        org.junit.Assert.assertTrue("'" + float18 + "' != '" + 1.0f + "'", float18 == 1.0f);
        org.junit.Assert.assertTrue("'" + float19 + "' != '" + 1.0f + "'", float19 == 1.0f);
        org.junit.Assert.assertNotNull(codingErrorAction20);
        org.junit.Assert.assertNotNull(charsetEncoder21);
        org.junit.Assert.assertNotNull(charset22);
        org.junit.Assert.assertNotNull(charsetDecoder23);
        org.junit.Assert.assertNotNull(charset24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(charsetEncoder26);
        org.junit.Assert.assertNotNull(charArray27);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray27), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray27), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray27), "[]");
        org.junit.Assert.assertNotNull(charBuffer28);
        org.junit.Assert.assertNotNull(byteBuffer29);
        org.junit.Assert.assertNotNull(charBuffer30);
        org.junit.Assert.assertNotNull(byteBuffer31);
        org.junit.Assert.assertNotNull(byteBuffer32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
    }

    @Test
    public void test2434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2434");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 3, chronology1);
        org.joda.time.DateTime.Property property3 = dateTime2.dayOfYear();
        org.joda.time.Interval interval4 = property3.toInterval();
        org.joda.time.DateTimeField dateTimeField5 = property3.getField();
        org.joda.time.DateTime dateTime7 = property3.addToCopy((long) (byte) 1);
        org.joda.time.DateTime dateTime9 = dateTime7.withYear(4);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) 3, chronology11);
        org.joda.time.Period period13 = org.joda.time.Period.ZERO;
        org.joda.time.Period period14 = period13.normalizedStandard();
        org.joda.time.Period period16 = period14.minusMinutes((int) ' ');
        org.joda.time.Period period18 = period16.minusMonths((int) (byte) 0);
        org.joda.time.PeriodType periodType19 = period18.getPeriodType();
        org.joda.time.DateTime dateTime20 = dateTime12.minus((org.joda.time.ReadablePeriod) period18);
        org.joda.time.Duration duration21 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.DateTime dateTime23 = dateTime20.withWeekOfWeekyear(14);
        java.util.TimeZone timeZone27 = null;
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forTimeZone(timeZone27);
        org.joda.time.DateMidnight dateMidnight29 = new org.joda.time.DateMidnight((long) 1970, dateTimeZone28);
        long long32 = dateTimeZone28.convertLocalToUTC((long) 3, false);
        org.joda.time.Interval interval33 = new org.joda.time.Interval(10L, (long) 2097, dateTimeZone28);
        int int35 = dateTimeZone28.getOffsetFromLocal(58L);
        org.joda.time.DateMidnight dateMidnight36 = org.joda.time.DateMidnight.now(dateTimeZone28);
        org.joda.time.DateTime dateTime37 = dateTime20.withZoneRetainFields(dateTimeZone28);
        int int38 = dateTime37.getDayOfYear();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 3L + "'", long32 == 3L);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
    }

    @Test
    public void test2435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2435");
        java.time.LocalDate localDate1 = java.time.LocalDate.ofEpochDay((long) ' ');
        java.time.OffsetTime offsetTime2 = java.time.OffsetTime.MAX;
        java.time.LocalTime localTime3 = offsetTime2.toLocalTime();
        java.lang.String str4 = offsetTime2.toString();
        java.time.Duration duration5 = java.time.Duration.ZERO;
        java.lang.String str6 = duration5.toString();
        java.time.OffsetTime offsetTime7 = offsetTime2.plus((java.time.temporal.TemporalAmount) duration5);
        java.time.LocalTime localTime8 = offsetTime2.toLocalTime();
        java.time.chrono.ChronoLocalDateTime<?> wildcardChronoLocalDateTime9 = localDate1.atTime(localTime8);
        java.time.LocalDate localDate11 = localDate1.minusWeeks((long) 2097);
        java.util.TimeZone timeZone13 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone13);
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight((long) 1970, dateTimeZone14);
        long long18 = dateTimeZone14.convertLocalToUTC((long) 3, false);
        long long21 = dateTimeZone14.convertLocalToUTC(0L, true);
        boolean boolean22 = localDate1.equals((java.lang.Object) true);
        int int23 = localDate1.lengthOfMonth();
        java.time.LocalDate localDate25 = localDate1.plusDays((long) 11);
        // The following exception was thrown during execution in test generation
        try {
            java.time.LocalDateTime localDateTime30 = localDate1.atTime(88, (int) (short) 1, 1024, (-1000000));
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for HourOfDay (valid values 0 - 23): 88");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate1);
        org.junit.Assert.assertNotNull(offsetTime2);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "23:59:59.999999999-18:00" + "'", str4, "23:59:59.999999999-18:00");
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "PT0S" + "'", str6, "PT0S");
        org.junit.Assert.assertNotNull(offsetTime7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(wildcardChronoLocalDateTime9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 3L + "'", long18 == 3L);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 28 + "'", int23 == 28);
        org.junit.Assert.assertNotNull(localDate25);
    }

    @Test
    public void test2436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2436");
        java.util.Date date0 = new java.util.Date();
        java.lang.String str1 = date0.toString();
// flaky:         org.junit.Assert.assertEquals(date0.toString(), "Mon Feb 21 09:37:50 UTC 2022");
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Mon Feb 21 09:37:50 UTC 2022" + "'", str1, "Mon Feb 21 09:37:50 UTC 2022");
    }

    @Test
    public void test2437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2437");
        org.joda.time.chrono.EthiopicChronology ethiopicChronology0 = org.joda.time.chrono.EthiopicChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = ethiopicChronology0.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField2 = ethiopicChronology0.era();
        org.joda.time.ReadablePartial readablePartial3 = null;
        java.util.Locale locale5 = java.util.Locale.GERMANY;
        java.lang.String str6 = locale5.getDisplayName();
        java.lang.String str7 = dateTimeField2.getAsText(readablePartial3, (int) '0', locale5);
        // The following exception was thrown during execution in test generation
        try {
            long long10 = dateTimeField2.set(57L, "Feb 21, 2022 9:35:33 AM");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"Feb 21, 2022 9:35:33 AM\" for era is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(ethiopicChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "German (Germany)" + "'", str6, "German (Germany)");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "48" + "'", str7, "48");
    }

    @Test
    public void test2438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2438");
        java.nio.LongBuffer longBuffer1 = java.nio.LongBuffer.allocate((int) (short) 0);
        long[] longArray2 = longBuffer1.array();
        java.util.stream.LongStream longStream3 = java.util.stream.LongStream.of(longArray2);
        java.util.stream.LongStream longStream4 = java.util.stream.LongStream.of(longArray2);
        java.util.stream.LongStream longStream6 = longStream4.limit((long) 1024);
        java.util.stream.LongStream longStream8 = java.util.stream.LongStream.of(34476908998976L);
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.LongStream longStream9 = java.util.stream.LongStream.concat(longStream4, longStream8);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: stream has already been operated upon or closed");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(longBuffer1);
        org.junit.Assert.assertNotNull(longArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray2), "[]");
        org.junit.Assert.assertNotNull(longStream3);
        org.junit.Assert.assertNotNull(longStream4);
        org.junit.Assert.assertNotNull(longStream6);
        org.junit.Assert.assertNotNull(longStream8);
    }

    @Test
    public void test2439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2439");
        org.joda.time.TimeOfDay timeOfDay1 = org.joda.time.TimeOfDay.fromMillisOfDay((long) (short) 0);
        org.joda.time.TimeOfDay timeOfDay3 = org.joda.time.TimeOfDay.fromMillisOfDay((long) (short) 0);
        org.joda.time.Hours hours4 = org.joda.time.Hours.hoursBetween((org.joda.time.ReadablePartial) timeOfDay1, (org.joda.time.ReadablePartial) timeOfDay3);
        org.joda.time.DurationFieldType durationFieldType5 = org.joda.time.DurationFieldType.hours();
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay3.withFieldAdded(durationFieldType5, (int) (byte) 0);
        int int8 = timeOfDay3.getMillisOfSecond();
        org.joda.time.TimeOfDay timeOfDay10 = timeOfDay3.plusHours(9);
        org.joda.time.TimeOfDay timeOfDay12 = timeOfDay10.minusSeconds(558);
        java.util.TimeZone timeZone14 = null;
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forTimeZone(timeZone14);
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight((long) 12, dateTimeZone15);
        org.joda.time.DateMidnight dateMidnight17 = org.joda.time.DateMidnight.now(dateTimeZone15);
        org.joda.time.DateTime dateTime18 = timeOfDay10.toDateTimeToday(dateTimeZone15);
        org.junit.Assert.assertNotNull(timeOfDay1);
        org.junit.Assert.assertNotNull(timeOfDay3);
        org.junit.Assert.assertNotNull(hours4);
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(timeOfDay12);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(dateTime18);
    }

    @Test
    public void test2440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2440");
        org.joda.time.Interval interval2 = new org.joda.time.Interval(100L, (long) 1970);
        long long3 = interval2.toDurationMillis();
        java.lang.String str4 = interval2.toString();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1870L + "'", long3 == 1870L);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1970-01-01T00:00:00.100Z/1970-01-01T00:00:01.970Z" + "'", str4, "1970-01-01T00:00:00.100Z/1970-01-01T00:00:01.970Z");
    }

    @Test
    public void test2441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2441");
        java.io.File file2 = java.io.File.createTempFile("PT3600S", "secondOfMinute");
        java.io.File file3 = file2.getCanonicalFile();
        file3.deleteOnExit();
        org.junit.Assert.assertNotNull(file2);
        org.junit.Assert.assertEquals(file2.getParent(), "/tmp");
// flaky:         org.junit.Assert.assertEquals(file2.toString(), "/tmp/PT3600S4796146097390508504secondOfMinute");
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "/tmp");
// flaky:         org.junit.Assert.assertEquals(file3.toString(), "/tmp/PT3600S4796146097390508504secondOfMinute");
    }

    @Test
    public void test2442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2442");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Duration duration2 = new org.joda.time.Duration(readableInstant0, readableInstant1);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = duration2.toPeriodTo(readableInstant3, periodType4);
        long long6 = duration2.getStandardSeconds();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 3, chronology8);
        org.joda.time.DateTime.Property property10 = dateTime9.dayOfYear();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight((java.lang.Object) dateTime9, chronology11);
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight12.minusMonths((-1));
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight12.withDayOfYear((int) ' ');
        org.joda.time.Interval interval17 = duration2.toIntervalTo((org.joda.time.ReadableInstant) dateMidnight16);
        long long18 = duration2.getStandardSeconds();
        long long19 = duration2.getStandardMinutes();
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
    }

    @Test
    public void test2443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2443");
        java.io.File file2 = java.io.File.createTempFile("PT3600S", "secondOfMinute");
        java.io.File file3 = file2.getCanonicalFile();
        java.io.File file4 = file3.getAbsoluteFile();
        java.io.PrintStream printStream5 = new java.io.PrintStream(file3);
        java.nio.charset.Charset charset6 = java.nio.charset.Charset.defaultCharset();
        java.nio.charset.CharsetDecoder charsetDecoder7 = charset6.newDecoder();
        java.nio.charset.Charset charset8 = java.nio.charset.Charset.defaultCharset();
        boolean boolean9 = charset6.contains(charset8);
        java.nio.charset.CharsetEncoder charsetEncoder10 = charset6.newEncoder();
        byte[] byteArray11 = charsetEncoder10.replacement();
        java.nio.charset.Charset charset12 = java.nio.charset.Charset.defaultCharset();
        java.nio.charset.CharsetDecoder charsetDecoder13 = charset12.newDecoder();
        float float14 = charsetDecoder13.maxCharsPerByte();
        float float15 = charsetDecoder13.averageCharsPerByte();
        java.nio.charset.CodingErrorAction codingErrorAction16 = charsetDecoder13.unmappableCharacterAction();
        java.nio.charset.CharsetEncoder charsetEncoder17 = charsetEncoder10.onUnmappableCharacter(codingErrorAction16);
        java.nio.charset.Charset charset18 = java.nio.charset.Charset.defaultCharset();
        java.nio.charset.CharsetDecoder charsetDecoder19 = charset18.newDecoder();
        java.nio.charset.Charset charset20 = java.nio.charset.Charset.defaultCharset();
        boolean boolean21 = charset18.contains(charset20);
        java.nio.charset.CharsetEncoder charsetEncoder22 = charset18.newEncoder();
        byte[] byteArray23 = charsetEncoder22.replacement();
        java.nio.charset.CharsetEncoder charsetEncoder24 = charsetEncoder10.replaceWith(byteArray23);
        // The following exception was thrown during execution in test generation
        try {
            printStream5.write(byteArray23, (-32769), 24);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(file2);
        org.junit.Assert.assertEquals(file2.getParent(), "/tmp");
// flaky:         org.junit.Assert.assertEquals(file2.toString(), "/tmp/PT3600S4639560421403912571secondOfMinute");
        org.junit.Assert.assertNotNull(file3);
        org.junit.Assert.assertEquals(file3.getParent(), "/tmp");
// flaky:         org.junit.Assert.assertEquals(file3.toString(), "/tmp/PT3600S4639560421403912571secondOfMinute");
        org.junit.Assert.assertNotNull(file4);
        org.junit.Assert.assertEquals(file4.getParent(), "/tmp");
// flaky:         org.junit.Assert.assertEquals(file4.toString(), "/tmp/PT3600S4639560421403912571secondOfMinute");
        org.junit.Assert.assertNotNull(charset6);
        org.junit.Assert.assertNotNull(charsetDecoder7);
        org.junit.Assert.assertNotNull(charset8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(charsetEncoder10);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[63]");
        org.junit.Assert.assertNotNull(charset12);
        org.junit.Assert.assertNotNull(charsetDecoder13);
        org.junit.Assert.assertTrue("'" + float14 + "' != '" + 1.0f + "'", float14 == 1.0f);
        org.junit.Assert.assertTrue("'" + float15 + "' != '" + 1.0f + "'", float15 == 1.0f);
        org.junit.Assert.assertNotNull(codingErrorAction16);
        org.junit.Assert.assertNotNull(charsetEncoder17);
        org.junit.Assert.assertNotNull(charset18);
        org.junit.Assert.assertNotNull(charsetDecoder19);
        org.junit.Assert.assertNotNull(charset20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(charsetEncoder22);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[63]");
        org.junit.Assert.assertNotNull(charsetEncoder24);
    }

    @Test
    public void test2444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2444");
        java.net.MalformedURLException malformedURLException1 = new java.net.MalformedURLException("GMT+00:00");
    }

    @Test
    public void test2445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2445");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.Interval interval1 = localDate0.toInterval();
        int int2 = localDate0.getDayOfYear();
        int int3 = localDate0.getYearOfEra();
        org.joda.time.LocalDate localDate5 = localDate0.withYearOfCentury((int) ':');
        org.joda.time.LocalDate.Property property6 = localDate5.dayOfMonth();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate8 = property6.setCopy("EthiopicChronology[Etc/UTC]");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"EthiopicChronology[Etc/UTC]\" for dayOfMonth is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(interval1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 52 + "'", int2 == 52);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2022 + "'", int3 == 2022);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(property6);
    }

    @Test
    public void test2446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2446");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.now();
        java.time.temporal.ChronoField chronoField1 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime3 = localDateTime0.with((java.time.temporal.TemporalField) chronoField1, (long) 10);
        java.time.LocalDateTime localDateTime5 = localDateTime0.minusMinutes((long) 12);
        java.time.chrono.Chronology chronology6 = localDateTime0.getChronology();
        java.util.Properties properties7 = null;
        java.util.Properties properties8 = new java.util.Properties(properties7);
        java.time.LocalTime localTime13 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime14 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime13);
        java.time.LocalTime localTime19 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime20 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime19);
        java.time.temporal.ChronoField chronoField21 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime23 = localTime19.with((java.time.temporal.TemporalField) chronoField21, (long) (short) 1);
        long long24 = localTime13.getLong((java.time.temporal.TemporalField) chronoField21);
        java.time.LocalTime localTime26 = localTime13.withSecond((int) (short) 1);
        java.lang.Object obj28 = properties8.put((java.lang.Object) localTime26, (java.lang.Object) "117");
        java.time.LocalDateTime localDateTime29 = java.time.LocalDateTime.MIN;
        java.time.Month month30 = java.time.Month.NOVEMBER;
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime31 = localDateTime29.with((java.time.temporal.TemporalAdjuster) month30);
        java.time.LocalDate localDate34 = java.time.LocalDate.ofEpochDay((long) ' ');
        int int35 = localDate34.getMonthValue();
        org.joda.time.Period period36 = org.joda.time.Period.ZERO;
        org.joda.time.Period period37 = period36.normalizedStandard();
        org.joda.time.Period period39 = period36.plusHours(2);
        java.time.chrono.IsoEra isoEra40 = java.time.chrono.IsoEra.CE;
        boolean boolean41 = period39.equals((java.lang.Object) isoEra40);
        java.time.LocalTime localTime46 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime47 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime46);
        java.time.LocalTime localTime52 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime53 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime52);
        java.time.temporal.ChronoField chronoField54 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime56 = localTime52.with((java.time.temporal.TemporalField) chronoField54, (long) (short) 1);
        long long57 = localTime46.getLong((java.time.temporal.TemporalField) chronoField54);
        boolean boolean58 = isoEra40.isSupported((java.time.temporal.TemporalField) chronoField54);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery59 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period60 = isoEra40.query(periodTemporalQuery59);
        boolean boolean61 = period60.isNegative();
        java.time.Period period63 = period60.plusDays((long) ' ');
        java.time.temporal.ChronoField chronoField64 = java.time.temporal.ChronoField.SECOND_OF_DAY;
        boolean boolean65 = period60.equals((java.lang.Object) chronoField64);
        boolean boolean66 = localDate34.isSupported((java.time.temporal.TemporalField) chronoField64);
        java.time.temporal.TemporalUnit temporalUnit67 = chronoField64.getRangeUnit();
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime68 = localDateChronoLocalDateTime31.plus(1L, temporalUnit67);
        java.time.LocalTime localTime69 = localTime26.truncatedTo(temporalUnit67);
        java.time.LocalTime localTime71 = localTime69.minusSeconds((long) 3601);
        // The following exception was thrown during execution in test generation
        try {
            java.time.temporal.Temporal temporal72 = localDateTime0.adjustInto((java.time.temporal.Temporal) localTime71);
            org.junit.Assert.fail("Expected exception of type java.time.temporal.UnsupportedTemporalTypeException; message: Unsupported field: EpochDay");
        } catch (java.time.temporal.UnsupportedTemporalTypeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertTrue("'" + chronoField1 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField1.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertTrue("'" + chronoField21 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField21.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 3601000000001L + "'", long24 == 3601000000001L);
        org.junit.Assert.assertNotNull(localTime26);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertTrue("'" + month30 + "' != '" + java.time.Month.NOVEMBER + "'", month30.equals(java.time.Month.NOVEMBER));
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime31);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2 + "'", int35 == 2);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertTrue("'" + isoEra40 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra40.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(localTime46);
        org.junit.Assert.assertNotNull(localTime47);
        org.junit.Assert.assertNotNull(localTime52);
        org.junit.Assert.assertNotNull(localTime53);
        org.junit.Assert.assertTrue("'" + chronoField54 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField54.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime56);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 3601000000001L + "'", long57 == 3601000000001L);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(periodTemporalQuery59);
        org.junit.Assert.assertNotNull(period60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(period63);
        org.junit.Assert.assertTrue("'" + chronoField64 + "' != '" + java.time.temporal.ChronoField.SECOND_OF_DAY + "'", chronoField64.equals(java.time.temporal.ChronoField.SECOND_OF_DAY));
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + temporalUnit67 + "' != '" + java.time.temporal.ChronoUnit.DAYS + "'", temporalUnit67.equals(java.time.temporal.ChronoUnit.DAYS));
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime68);
        org.junit.Assert.assertNotNull(localTime69);
        org.junit.Assert.assertNotNull(localTime71);
    }

    @Test
    public void test2447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2447");
        java.util.stream.Stream<java.lang.Object> objStream0 = java.util.stream.Stream.empty();
        java.util.stream.Stream<java.lang.Object> objStream1 = objStream0.parallel();
        java.util.stream.Stream<java.lang.Object> objStream2 = objStream0.unordered();
        java.util.stream.Stream<java.lang.Object> objStream4 = objStream0.skip((long) 574);
        java.util.function.BinaryOperator<java.lang.Object> objBinaryOperator5 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Optional<java.lang.Object> objOptional6 = objStream4.reduce(objBinaryOperator5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objStream0);
        org.junit.Assert.assertNotNull(objStream1);
        org.junit.Assert.assertNotNull(objStream2);
        org.junit.Assert.assertNotNull(objStream4);
    }

    @Test
    public void test2448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2448");
        java.nio.LongBuffer longBuffer1 = java.nio.LongBuffer.allocate((int) (short) 0);
        long[] longArray2 = longBuffer1.array();
        java.util.stream.LongStream longStream3 = java.util.stream.LongStream.of(longArray2);
        java.util.OptionalLong optionalLong4 = longStream3.findAny();
        long long6 = optionalLong4.orElse((long) 32769);
        org.junit.Assert.assertNotNull(longBuffer1);
        org.junit.Assert.assertNotNull(longArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray2), "[]");
        org.junit.Assert.assertNotNull(longStream3);
        org.junit.Assert.assertNotNull(optionalLong4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 32769L + "'", long6 == 32769L);
    }

    @Test
    public void test2449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2449");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 3, chronology1);
        org.joda.time.Period period3 = org.joda.time.Period.ZERO;
        org.joda.time.Period period4 = period3.normalizedStandard();
        org.joda.time.Period period6 = period4.minusMinutes((int) ' ');
        org.joda.time.Period period8 = period6.minusMonths((int) (byte) 0);
        org.joda.time.PeriodType periodType9 = period8.getPeriodType();
        org.joda.time.DateTime dateTime10 = dateTime2.minus((org.joda.time.ReadablePeriod) period8);
        org.joda.time.DateTime dateTime12 = dateTime2.plusHours(34);
        org.joda.time.DateTime dateTime14 = dateTime12.minusSeconds((int) '#');
        org.joda.time.Period period19 = new org.joda.time.Period((int) '#', 0, 2, (int) (short) 100);
        org.joda.time.Period period21 = period19.withSeconds(12);
        int int22 = period21.getMillis();
        org.joda.time.DateTime dateTime23 = dateTime14.plus((org.joda.time.ReadablePeriod) period21);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType25 = period21.getFieldType(32769);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 100 + "'", int22 == 100);
        org.junit.Assert.assertNotNull(dateTime23);
    }

    @Test
    public void test2450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2450");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 3, chronology1);
        org.joda.time.DateTime.Property property3 = dateTime2.dayOfYear();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight((java.lang.Object) dateTime2, chronology4);
        org.joda.time.MutableDateTime mutableDateTime6 = dateTime2.toMutableDateTime();
        mutableDateTime6.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime6.millisOfDay();
        org.joda.time.PeriodType periodType10 = org.joda.time.PeriodType.years();
        org.joda.time.DurationFieldType durationFieldType11 = org.joda.time.DurationFieldType.halfdays();
        int int12 = periodType10.indexOf(durationFieldType11);
        mutableDateTime6.add(durationFieldType11, (int) 'a');
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime6.millisOfSecond();
        org.joda.time.MutableDateTime.Property property16 = mutableDateTime6.yearOfEra();
        org.joda.time.MutableDateTime mutableDateTime17 = property16.roundCeiling();
        int int18 = property16.getMaximumValueOverall();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertNotNull(durationFieldType11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 292278993 + "'", int18 == 292278993);
    }

    @Test
    public void test2451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2451");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((long) 0, chronology2);
        org.joda.time.Chronology chronology4 = localTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField5 = chronology4.weekyearOfCentury();
        org.joda.time.DurationField durationField6 = chronology4.weekyears();
        org.joda.time.DurationField durationField7 = chronology4.seconds();
        org.joda.time.LocalTime localTime8 = org.joda.time.LocalTime.fromMillisOfDay((long) (byte) 0, chronology4);
        org.joda.time.LocalTime.Property property9 = localTime8.millisOfSecond();
        int int10 = localTime8.getMillisOfSecond();
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test2452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2452");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 3, chronology1);
        org.joda.time.DateTime.Property property3 = dateTime2.dayOfYear();
        org.joda.time.Interval interval4 = property3.toInterval();
        org.joda.time.DateTime dateTime5 = interval4.getEnd();
        org.joda.time.Minutes minutes6 = org.joda.time.Minutes.minutesIn((org.joda.time.ReadableInterval) interval4);
        org.joda.time.Minutes minutes7 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes9 = minutes7.minus(12);
        org.joda.time.Minutes minutes10 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes12 = minutes10.minus(12);
        org.joda.time.Minutes minutes13 = minutes7.minus(minutes10);
        org.joda.time.Minutes minutes14 = minutes10.negated();
        org.joda.time.Minutes minutes15 = org.joda.time.Minutes.MIN_VALUE;
        boolean boolean16 = minutes10.isGreaterThan(minutes15);
        boolean boolean17 = minutes6.isGreaterThan(minutes15);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(minutes6);
        org.junit.Assert.assertNotNull(minutes7);
        org.junit.Assert.assertNotNull(minutes9);
        org.junit.Assert.assertNotNull(minutes10);
        org.junit.Assert.assertNotNull(minutes12);
        org.junit.Assert.assertNotNull(minutes13);
        org.junit.Assert.assertNotNull(minutes14);
        org.junit.Assert.assertNotNull(minutes15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
    }

    @Test
    public void test2453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2453");
        double[] doubleArray4 = new double[] { (byte) 0, 59, 83400000000000L, '4' };
        java.util.stream.DoubleStream doubleStream5 = java.util.stream.DoubleStream.of(doubleArray4);
        java.util.function.DoubleToIntFunction doubleToIntFunction6 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.IntStream intStream7 = doubleStream5.mapToInt(doubleToIntFunction6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[0.0, 59.0, 8.34E13, 52.0]");
        org.junit.Assert.assertNotNull(doubleStream5);
    }

    @Test
    public void test2454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2454");
        java.time.format.DateTimeFormatter dateTimeFormatter0 = java.time.format.DateTimeFormatter.ISO_DATE;
        java.lang.String str1 = dateTimeFormatter0.toString();
        java.time.LocalDateTime localDateTime2 = java.time.LocalDateTime.now();
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery3 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period4 = localDateTime2.query(periodTemporalQuery3);
        java.text.Format format5 = dateTimeFormatter0.toFormat(periodTemporalQuery3);
        java.time.chrono.Chronology chronology6 = dateTimeFormatter0.getChronology();
        java.time.format.DateTimeFormatter dateTimeFormatter7 = java.time.format.DateTimeFormatter.ISO_DATE;
        java.lang.String str8 = dateTimeFormatter7.toString();
        java.time.LocalDateTime localDateTime9 = java.time.LocalDateTime.now();
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery10 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period11 = localDateTime9.query(periodTemporalQuery10);
        java.text.Format format12 = dateTimeFormatter7.toFormat(periodTemporalQuery10);
        java.time.chrono.Chronology chronology13 = dateTimeFormatter7.getChronology();
        int int14 = chronology6.compareTo(chronology13);
        java.time.ZoneOffset zoneOffset17 = java.time.ZoneOffset.ofHoursMinutes(1, 10);
        java.time.temporal.ChronoField chronoField18 = java.time.temporal.ChronoField.HOUR_OF_DAY;
        java.time.temporal.ValueRange valueRange19 = chronoField18.range();
        boolean boolean20 = zoneOffset17.isSupported((java.time.temporal.TemporalField) chronoField18);
        java.time.LocalDateTime localDateTime21 = java.time.LocalDateTime.now((java.time.ZoneId) zoneOffset17);
        java.time.chrono.ChronoLocalDate chronoLocalDate22 = chronology13.dateNow((java.time.ZoneId) zoneOffset17);
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "ParseCaseSensitive(false)(Value(Year,4,10,EXCEEDS_PAD)'-'Value(MonthOfYear,2)'-'Value(DayOfMonth,2))[Offset(+HH:MM:ss,'Z')]" + "'", str1, "ParseCaseSensitive(false)(Value(Year,4,10,EXCEEDS_PAD)'-'Value(MonthOfYear,2)'-'Value(DayOfMonth,2))[Offset(+HH:MM:ss,'Z')]");
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(periodTemporalQuery3);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(format5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "ParseCaseSensitive(false)(Value(Year,4,10,EXCEEDS_PAD)'-'Value(MonthOfYear,2)'-'Value(DayOfMonth,2))[Offset(+HH:MM:ss,'Z')]" + "'", str8, "ParseCaseSensitive(false)(Value(Year,4,10,EXCEEDS_PAD)'-'Value(MonthOfYear,2)'-'Value(DayOfMonth,2))[Offset(+HH:MM:ss,'Z')]");
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(periodTemporalQuery10);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(format12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(zoneOffset17);
        org.junit.Assert.assertTrue("'" + chronoField18 + "' != '" + java.time.temporal.ChronoField.HOUR_OF_DAY + "'", chronoField18.equals(java.time.temporal.ChronoField.HOUR_OF_DAY));
        org.junit.Assert.assertNotNull(valueRange19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(chronoLocalDate22);
    }

    @Test
    public void test2455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2455");
        java.util.function.IntUnaryOperator intUnaryOperator1 = java.util.function.IntUnaryOperator.identity();
        java.util.stream.IntStream intStream4 = java.util.stream.IntStream.rangeClosed(100, (int) '4');
        java.util.stream.IntStream intStream5 = intStream4.sequential();
        java.util.function.IntUnaryOperator intUnaryOperator6 = java.util.function.IntUnaryOperator.identity();
        java.util.stream.IntStream intStream7 = intStream4.map(intUnaryOperator6);
        java.util.function.IntUnaryOperator intUnaryOperator8 = intUnaryOperator1.compose(intUnaryOperator6);
        java.util.function.IntUnaryOperator intUnaryOperator9 = java.util.function.IntUnaryOperator.identity();
        java.util.stream.IntStream intStream12 = java.util.stream.IntStream.rangeClosed(100, (int) '4');
        java.util.stream.IntStream intStream13 = intStream12.sequential();
        java.util.function.IntUnaryOperator intUnaryOperator14 = java.util.function.IntUnaryOperator.identity();
        java.util.stream.IntStream intStream15 = intStream12.map(intUnaryOperator14);
        java.util.function.IntUnaryOperator intUnaryOperator16 = intUnaryOperator9.compose(intUnaryOperator14);
        java.util.function.IntUnaryOperator intUnaryOperator17 = intUnaryOperator1.andThen(intUnaryOperator16);
        java.util.stream.IntStream intStream18 = java.util.stream.IntStream.iterate(46, intUnaryOperator1);
        org.junit.Assert.assertNotNull(intUnaryOperator1);
        org.junit.Assert.assertNotNull(intStream4);
        org.junit.Assert.assertNotNull(intStream5);
        org.junit.Assert.assertNotNull(intUnaryOperator6);
        org.junit.Assert.assertNotNull(intStream7);
        org.junit.Assert.assertNotNull(intUnaryOperator8);
        org.junit.Assert.assertNotNull(intUnaryOperator9);
        org.junit.Assert.assertNotNull(intStream12);
        org.junit.Assert.assertNotNull(intStream13);
        org.junit.Assert.assertNotNull(intUnaryOperator14);
        org.junit.Assert.assertNotNull(intStream15);
        org.junit.Assert.assertNotNull(intUnaryOperator16);
        org.junit.Assert.assertNotNull(intUnaryOperator17);
        org.junit.Assert.assertNotNull(intStream18);
    }

    @Test
    public void test2456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2456");
        java.time.Clock clock0 = java.time.Clock.systemUTC();
        java.time.Duration duration2 = java.time.Duration.ofSeconds((long) 256);
        java.time.Clock clock3 = java.time.Clock.tick(clock0, duration2);
        java.time.Duration duration5 = java.time.Duration.ofMinutes((long) 3);
        java.time.Duration duration6 = duration5.abs();
        java.time.Clock clock7 = java.time.Clock.offset(clock0, duration5);
        java.time.LocalDate localDate8 = java.time.LocalDate.now(clock7);
        java.time.LocalDate localDate10 = java.time.LocalDate.ofEpochDay((long) ' ');
        java.time.OffsetTime offsetTime11 = java.time.OffsetTime.MAX;
        java.time.LocalTime localTime12 = offsetTime11.toLocalTime();
        java.lang.String str13 = offsetTime11.toString();
        java.time.Duration duration14 = java.time.Duration.ZERO;
        java.lang.String str15 = duration14.toString();
        java.time.OffsetTime offsetTime16 = offsetTime11.plus((java.time.temporal.TemporalAmount) duration14);
        java.time.LocalTime localTime17 = offsetTime11.toLocalTime();
        java.time.chrono.ChronoLocalDateTime<?> wildcardChronoLocalDateTime18 = localDate10.atTime(localTime17);
        java.time.LocalDate localDate20 = localDate10.minusWeeks((long) 2097);
        java.time.OffsetTime offsetTime21 = java.time.OffsetTime.MAX;
        java.time.LocalTime localTime22 = offsetTime21.toLocalTime();
        java.lang.String str23 = offsetTime21.toString();
        java.time.Duration duration24 = java.time.Duration.ZERO;
        java.lang.String str25 = duration24.toString();
        java.time.OffsetTime offsetTime26 = offsetTime21.plus((java.time.temporal.TemporalAmount) duration24);
        java.time.OffsetTime offsetTime28 = offsetTime21.plusNanos((long) 0);
        java.time.LocalTime localTime33 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime34 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime33);
        java.time.temporal.ChronoField chronoField35 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime37 = localTime33.with((java.time.temporal.TemporalField) chronoField35, (long) (short) 1);
        java.util.Locale locale38 = java.util.Locale.GERMANY;
        java.lang.String str39 = chronoField35.getDisplayName(locale38);
        java.time.OffsetTime offsetTime41 = offsetTime28.with((java.time.temporal.TemporalField) chronoField35, (long) 28);
        java.time.OffsetDateTime offsetDateTime42 = localDate20.atTime(offsetTime28);
        int int43 = localDate20.getYear();
        boolean boolean44 = localDate8.isBefore((java.time.chrono.ChronoLocalDate) localDate20);
        int int45 = localDate8.getDayOfMonth();
        // The following exception was thrown during execution in test generation
        try {
            java.time.LocalDate localDate47 = localDate8.withDayOfMonth(36);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for DayOfMonth (valid values 1 - 28/31): 36");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(clock0);
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertNotNull(clock3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(clock7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(offsetTime11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "23:59:59.999999999-18:00" + "'", str13, "23:59:59.999999999-18:00");
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "PT0S" + "'", str15, "PT0S");
        org.junit.Assert.assertNotNull(offsetTime16);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(wildcardChronoLocalDateTime18);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(offsetTime21);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "23:59:59.999999999-18:00" + "'", str23, "23:59:59.999999999-18:00");
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "PT0S" + "'", str25, "PT0S");
        org.junit.Assert.assertNotNull(offsetTime26);
        org.junit.Assert.assertNotNull(offsetTime28);
        org.junit.Assert.assertNotNull(localTime33);
        org.junit.Assert.assertNotNull(localTime34);
        org.junit.Assert.assertTrue("'" + chronoField35 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField35.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime37);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "NanoOfDay" + "'", str39, "NanoOfDay");
        org.junit.Assert.assertNotNull(offsetTime41);
        org.junit.Assert.assertNotNull(offsetDateTime42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1929 + "'", int43 == 1929);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 21 + "'", int45 == 21);
    }

    @Test
    public void test2457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2457");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Duration duration2 = new org.joda.time.Duration(readableInstant0, readableInstant1);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = duration2.toPeriodTo(readableInstant3, periodType4);
        long long6 = duration2.getStandardSeconds();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 3, chronology8);
        org.joda.time.DateTime.Property property10 = dateTime9.dayOfYear();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight((java.lang.Object) dateTime9, chronology11);
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight12.minusMonths((-1));
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight12.withDayOfYear((int) ' ');
        org.joda.time.Interval interval17 = duration2.toIntervalTo((org.joda.time.ReadableInstant) dateMidnight16);
        org.joda.time.DateMidnight.Property property18 = dateMidnight16.dayOfYear();
        org.joda.time.DateMidnight.Property property19 = dateMidnight16.yearOfEra();
        org.joda.time.DateMidnight dateMidnight20 = property19.withMaximumValue();
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateMidnight20);
    }

    @Test
    public void test2458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2458");
        org.joda.time.Period period1 = org.joda.time.Period.months((int) '.');
        org.junit.Assert.assertNotNull(period1);
    }

    @Test
    public void test2459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2459");
        org.joda.time.TimeOfDay timeOfDay1 = new org.joda.time.TimeOfDay((-9223372036854775808L));
        java.util.function.Predicate<org.joda.time.DateTimeFieldType> dateTimeFieldTypePredicate3 = java.util.function.Predicate.isEqual((java.lang.Object) 1.0d);
        java.util.Map<java.lang.String, java.lang.String> strMap4 = java.time.ZoneId.SHORT_IDS;
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        boolean boolean6 = strMap4.containsValue((java.lang.Object) dateTimeFieldType5);
        boolean boolean7 = dateTimeFieldTypePredicate3.test(dateTimeFieldType5);
        java.lang.String str8 = dateTimeFieldType5.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.TimeOfDay timeOfDay10 = timeOfDay1.withField(dateTimeFieldType5, 624);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'halfdayOfDay' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldTypePredicate3);
        org.junit.Assert.assertNotNull(strMap4);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "halfdayOfDay" + "'", str8, "halfdayOfDay");
    }

    @Test
    public void test2460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2460");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Duration duration2 = new org.joda.time.Duration(readableInstant0, readableInstant1);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = duration2.toPeriodTo(readableInstant3, periodType4);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.Duration duration8 = new org.joda.time.Duration(readableInstant6, readableInstant7);
        long long9 = duration8.getMillis();
        boolean boolean10 = duration2.isShorterThan((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) 3, chronology12);
        org.joda.time.DateTime.Property property14 = dateTime13.dayOfYear();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight((java.lang.Object) dateTime13, chronology15);
        org.joda.time.MutableDateTime mutableDateTime17 = dateTime13.toMutableDateTime();
        mutableDateTime17.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime17.dayOfWeek();
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime17.year();
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime17.weekyear();
        boolean boolean23 = duration2.equals((java.lang.Object) mutableDateTime17);
        mutableDateTime17.addMonths((int) ' ');
        mutableDateTime17.add((long) (byte) 10);
        org.joda.time.Period period28 = org.joda.time.Period.ZERO;
        org.joda.time.Period period29 = period28.normalizedStandard();
        org.joda.time.Period period31 = period28.plusHours(2);
        java.time.chrono.IsoEra isoEra32 = java.time.chrono.IsoEra.CE;
        boolean boolean33 = period31.equals((java.lang.Object) isoEra32);
        int int34 = period31.getMinutes();
        mutableDateTime17.add((org.joda.time.ReadablePeriod) period31);
        java.util.TimeZone timeZone37 = null;
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forTimeZone(timeZone37);
        org.joda.time.DateMidnight dateMidnight39 = new org.joda.time.DateMidnight((long) 1970, dateTimeZone38);
        long long42 = dateTimeZone38.convertLocalToUTC((long) 3, false);
        long long45 = dateTimeZone38.convertLocalToUTC(0L, true);
        mutableDateTime17.setZoneRetainFields(dateTimeZone38);
        java.lang.String str47 = dateTimeZone38.toString();
        org.joda.time.chrono.EthiopicChronology ethiopicChronology48 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone38);
        org.joda.time.DateTimeField dateTimeField49 = ethiopicChronology48.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone50 = ethiopicChronology48.getZone();
        org.joda.time.DateTimeField dateTimeField51 = ethiopicChronology48.era();
        org.joda.time.DateTimeField dateTimeField52 = ethiopicChronology48.millisOfDay();
        org.joda.time.LocalTime localTime53 = org.joda.time.LocalTime.now((org.joda.time.Chronology) ethiopicChronology48);
        org.joda.time.DateTimeZone dateTimeZone54 = ethiopicChronology48.getZone();
        org.joda.time.DateTimeField dateTimeField55 = ethiopicChronology48.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField56 = ethiopicChronology48.hourOfHalfday();
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertTrue("'" + isoEra32 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra32.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 3L + "'", long42 == 3L);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Etc/UTC" + "'", str47, "Etc/UTC");
        org.junit.Assert.assertNotNull(ethiopicChronology48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(localTime53);
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(dateTimeField56);
    }

    @Test
    public void test2461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2461");
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) 3, chronology9);
        org.joda.time.Period period11 = org.joda.time.Period.ZERO;
        org.joda.time.Period period12 = period11.normalizedStandard();
        org.joda.time.Period period14 = period12.minusMinutes((int) ' ');
        org.joda.time.Period period16 = period14.minusMonths((int) (byte) 0);
        org.joda.time.PeriodType periodType17 = period16.getPeriodType();
        org.joda.time.DateTime dateTime18 = dateTime10.minus((org.joda.time.ReadablePeriod) period16);
        org.joda.time.DateTime dateTime20 = dateTime10.plusHours(34);
        org.joda.time.DateTime dateTime22 = dateTime10.plusMonths(5);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.LocalTime localTime25 = new org.joda.time.LocalTime((long) 0, chronology24);
        org.joda.time.Chronology chronology26 = localTime25.getChronology();
        org.joda.time.DateTimeField dateTimeField27 = chronology26.weekyearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime28 = org.joda.time.MutableDateTime.now(chronology26);
        mutableDateTime28.setWeekOfWeekyear((int) '#');
        mutableDateTime28.addHours(0);
        org.joda.time.Days days33 = org.joda.time.Days.daysBetween((org.joda.time.ReadableInstant) dateTime22, (org.joda.time.ReadableInstant) mutableDateTime28);
        org.joda.time.DateTimeZone dateTimeZone34 = dateTime22.getZone();
        org.joda.time.DateMidnight dateMidnight35 = new org.joda.time.DateMidnight((long) 53, dateTimeZone34);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((int) '4', (-624), 600, 83399, (int) (byte) 0, 19, 0, dateTimeZone34);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 83399 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(mutableDateTime28);
        org.junit.Assert.assertNotNull(days33);
        org.junit.Assert.assertNotNull(dateTimeZone34);
    }

    @Test
    public void test2462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2462");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Duration duration2 = new org.joda.time.Duration(readableInstant0, readableInstant1);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = duration2.toPeriodTo(readableInstant3, periodType4);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.Duration duration8 = new org.joda.time.Duration(readableInstant6, readableInstant7);
        long long9 = duration8.getMillis();
        boolean boolean10 = duration2.isShorterThan((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) 3, chronology12);
        org.joda.time.DateTime.Property property14 = dateTime13.dayOfYear();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight((java.lang.Object) dateTime13, chronology15);
        org.joda.time.MutableDateTime mutableDateTime17 = dateTime13.toMutableDateTime();
        mutableDateTime17.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime17.dayOfWeek();
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime17.year();
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime17.weekyear();
        boolean boolean23 = duration2.equals((java.lang.Object) mutableDateTime17);
        mutableDateTime17.addMonths((int) ' ');
        mutableDateTime17.add((long) (byte) 10);
        org.joda.time.Period period28 = org.joda.time.Period.ZERO;
        org.joda.time.Period period29 = period28.normalizedStandard();
        org.joda.time.Period period31 = period28.plusHours(2);
        java.time.chrono.IsoEra isoEra32 = java.time.chrono.IsoEra.CE;
        boolean boolean33 = period31.equals((java.lang.Object) isoEra32);
        int int34 = period31.getMinutes();
        mutableDateTime17.add((org.joda.time.ReadablePeriod) period31);
        java.util.TimeZone timeZone37 = null;
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forTimeZone(timeZone37);
        org.joda.time.DateMidnight dateMidnight39 = new org.joda.time.DateMidnight((long) 1970, dateTimeZone38);
        long long42 = dateTimeZone38.convertLocalToUTC((long) 3, false);
        long long45 = dateTimeZone38.convertLocalToUTC(0L, true);
        mutableDateTime17.setZoneRetainFields(dateTimeZone38);
        java.lang.String str47 = dateTimeZone38.toString();
        org.joda.time.chrono.EthiopicChronology ethiopicChronology48 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone38);
        org.joda.time.DateTimeField dateTimeField49 = ethiopicChronology48.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone50 = ethiopicChronology48.getZone();
        org.joda.time.DateTimeField dateTimeField51 = ethiopicChronology48.centuryOfEra();
        org.joda.time.DurationField durationField52 = ethiopicChronology48.weeks();
        org.joda.time.DateTimeField dateTimeField53 = ethiopicChronology48.clockhourOfHalfday();
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertTrue("'" + isoEra32 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra32.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 3L + "'", long42 == 3L);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Etc/UTC" + "'", str47, "Etc/UTC");
        org.junit.Assert.assertNotNull(ethiopicChronology48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(durationField52);
        org.junit.Assert.assertNotNull(dateTimeField53);
    }

    @Test
    public void test2463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2463");
        java.util.GregorianCalendar gregorianCalendar5 = new java.util.GregorianCalendar(12, 4096, 7, (-1), (int) (short) 10);
        int int6 = gregorianCalendar5.getWeeksInWeekYear();
        java.lang.String str7 = gregorianCalendar5.getCalendarType();
        java.time.ZonedDateTime zonedDateTime8 = gregorianCalendar5.toZonedDateTime();
        java.time.ZonedDateTime zonedDateTime10 = zonedDateTime8.minusMonths((long) 10);
        java.time.chrono.ChronoZonedDateTime<java.time.LocalDate> localDateChronoZonedDateTime11 = zonedDateTime8.withEarlierOffsetAtOverlap();
        int int12 = zonedDateTime8.getDayOfYear();
        java.time.ZonedDateTime zonedDateTime13 = zonedDateTime8.withLaterOffsetAtOverlap();
        int int14 = zonedDateTime13.getSecond();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 52 + "'", int6 == 52);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "gregory" + "'", str7, "gregory");
        org.junit.Assert.assertNotNull(zonedDateTime8);
        org.junit.Assert.assertNotNull(zonedDateTime10);
        org.junit.Assert.assertNotNull(localDateChronoZonedDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 127 + "'", int12 == 127);
        org.junit.Assert.assertNotNull(zonedDateTime13);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 59 + "'", int14 == 59);
    }

    @Test
    public void test2464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2464");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.time.LocalTime localTime6 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime7 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime6);
        java.time.LocalTime localTime12 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime13 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime12);
        java.time.temporal.ChronoField chronoField14 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime16 = localTime12.with((java.time.temporal.TemporalField) chronoField14, (long) (short) 1);
        long long17 = localTime6.getLong((java.time.temporal.TemporalField) chronoField14);
        java.time.LocalTime localTime19 = localTime6.withSecond((int) (short) 1);
        java.lang.Object obj21 = properties1.put((java.lang.Object) localTime19, (java.lang.Object) "117");
        boolean boolean23 = properties1.containsValue((java.lang.Object) 6);
        java.time.LocalDate localDate26 = java.time.LocalDate.ofEpochDay((long) ' ');
        int int27 = localDate26.getMonthValue();
        java.lang.Object obj28 = properties1.replace((java.lang.Object) 21, (java.lang.Object) localDate26);
        java.time.LocalDateTime localDateTime29 = java.time.LocalDateTime.MIN;
        java.time.Month month30 = java.time.Month.NOVEMBER;
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime31 = localDateTime29.with((java.time.temporal.TemporalAdjuster) month30);
        java.time.LocalDate localDate34 = java.time.LocalDate.ofEpochDay((long) ' ');
        int int35 = localDate34.getMonthValue();
        org.joda.time.Period period36 = org.joda.time.Period.ZERO;
        org.joda.time.Period period37 = period36.normalizedStandard();
        org.joda.time.Period period39 = period36.plusHours(2);
        java.time.chrono.IsoEra isoEra40 = java.time.chrono.IsoEra.CE;
        boolean boolean41 = period39.equals((java.lang.Object) isoEra40);
        java.time.LocalTime localTime46 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime47 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime46);
        java.time.LocalTime localTime52 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime53 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime52);
        java.time.temporal.ChronoField chronoField54 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime56 = localTime52.with((java.time.temporal.TemporalField) chronoField54, (long) (short) 1);
        long long57 = localTime46.getLong((java.time.temporal.TemporalField) chronoField54);
        boolean boolean58 = isoEra40.isSupported((java.time.temporal.TemporalField) chronoField54);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery59 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period60 = isoEra40.query(periodTemporalQuery59);
        boolean boolean61 = period60.isNegative();
        java.time.Period period63 = period60.plusDays((long) ' ');
        java.time.temporal.ChronoField chronoField64 = java.time.temporal.ChronoField.SECOND_OF_DAY;
        boolean boolean65 = period60.equals((java.lang.Object) chronoField64);
        boolean boolean66 = localDate34.isSupported((java.time.temporal.TemporalField) chronoField64);
        java.time.temporal.TemporalUnit temporalUnit67 = chronoField64.getRangeUnit();
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime68 = localDateChronoLocalDateTime31.plus(1L, temporalUnit67);
        boolean boolean69 = localDate26.isSupported(temporalUnit67);
        java.time.Duration duration70 = java.time.Duration.ZERO;
        java.time.Duration duration72 = duration70.minusHours((long) 8);
        java.time.Duration duration74 = duration70.minusDays((long) 17);
        java.time.LocalDate localDate75 = localDate26.plus((java.time.temporal.TemporalAmount) duration70);
        java.time.chrono.IsoChronology isoChronology76 = localDate26.getChronology();
        java.util.GregorianCalendar gregorianCalendar82 = new java.util.GregorianCalendar(12, 4096, 7, (-1), (int) (short) 10);
        int int83 = gregorianCalendar82.getWeeksInWeekYear();
        java.util.TimeZone timeZone84 = gregorianCalendar82.getTimeZone();
        java.util.Locale locale86 = new java.util.Locale("hi!");
        java.util.Calendar calendar87 = java.util.Calendar.getInstance(timeZone84, locale86);
        java.time.Instant instant88 = calendar87.toInstant();
        java.time.Instant instant89 = calendar87.toInstant();
        java.time.ZoneOffset zoneOffset91 = java.time.ZoneOffset.ofHours(9);
        java.time.ZonedDateTime zonedDateTime92 = isoChronology76.zonedDateTime(instant89, (java.time.ZoneId) zoneOffset91);
        // The following exception was thrown during execution in test generation
        try {
            java.time.chrono.ChronoLocalDate chronoLocalDate96 = isoChronology76.date(7, 23, (int) 'u');
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for MonthOfYear (valid values 1 - 12): 23");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertTrue("'" + chronoField14 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField14.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 3601000000001L + "'", long17 == 3601000000001L);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2 + "'", int27 == 2);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertTrue("'" + month30 + "' != '" + java.time.Month.NOVEMBER + "'", month30.equals(java.time.Month.NOVEMBER));
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime31);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2 + "'", int35 == 2);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertTrue("'" + isoEra40 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra40.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(localTime46);
        org.junit.Assert.assertNotNull(localTime47);
        org.junit.Assert.assertNotNull(localTime52);
        org.junit.Assert.assertNotNull(localTime53);
        org.junit.Assert.assertTrue("'" + chronoField54 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField54.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime56);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 3601000000001L + "'", long57 == 3601000000001L);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(periodTemporalQuery59);
        org.junit.Assert.assertNotNull(period60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(period63);
        org.junit.Assert.assertTrue("'" + chronoField64 + "' != '" + java.time.temporal.ChronoField.SECOND_OF_DAY + "'", chronoField64.equals(java.time.temporal.ChronoField.SECOND_OF_DAY));
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + temporalUnit67 + "' != '" + java.time.temporal.ChronoUnit.DAYS + "'", temporalUnit67.equals(java.time.temporal.ChronoUnit.DAYS));
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(duration70);
        org.junit.Assert.assertNotNull(duration72);
        org.junit.Assert.assertNotNull(duration74);
        org.junit.Assert.assertNotNull(localDate75);
        org.junit.Assert.assertNotNull(isoChronology76);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 52 + "'", int83 == 52);
        org.junit.Assert.assertNotNull(timeZone84);
        org.junit.Assert.assertEquals(timeZone84.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertEquals(locale86.toString(), "hi!");
        org.junit.Assert.assertNotNull(calendar87);
// flaky:         org.junit.Assert.assertEquals(calendar87.toString(), "java.util.GregorianCalendar[time=1645436271315,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=35,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=37,SECOND=51,MILLISECOND=350,ZONE_OFFSET=35,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(instant88);
        org.junit.Assert.assertNotNull(instant89);
        org.junit.Assert.assertNotNull(zoneOffset91);
        org.junit.Assert.assertNotNull(zonedDateTime92);
    }

    @Test
    public void test2465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2465");
        java.util.Date date6 = new java.util.Date((int) (byte) 100, 4, 306, (int) ':', 52, (int) ' ');
        int int7 = date6.getTimezoneOffset();
        org.junit.Assert.assertEquals(date6.toString(), "Sun Mar 04 10:52:32 UTC 2001");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test2466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2466");
        java.time.Instant instant0 = java.time.Instant.now();
        java.time.Instant instant1 = java.time.Instant.now();
        boolean boolean2 = instant0.isAfter(instant1);
        java.time.LocalDate localDate4 = java.time.LocalDate.ofEpochDay((long) ' ');
        int int5 = localDate4.getMonthValue();
        org.joda.time.Period period6 = org.joda.time.Period.ZERO;
        org.joda.time.Period period7 = period6.normalizedStandard();
        org.joda.time.Period period9 = period6.plusHours(2);
        java.time.chrono.IsoEra isoEra10 = java.time.chrono.IsoEra.CE;
        boolean boolean11 = period9.equals((java.lang.Object) isoEra10);
        java.time.LocalTime localTime16 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime17 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime16);
        java.time.LocalTime localTime22 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime23 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime22);
        java.time.temporal.ChronoField chronoField24 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime26 = localTime22.with((java.time.temporal.TemporalField) chronoField24, (long) (short) 1);
        long long27 = localTime16.getLong((java.time.temporal.TemporalField) chronoField24);
        boolean boolean28 = isoEra10.isSupported((java.time.temporal.TemporalField) chronoField24);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery29 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period30 = isoEra10.query(periodTemporalQuery29);
        boolean boolean31 = period30.isNegative();
        java.time.Period period33 = period30.plusDays((long) ' ');
        java.time.temporal.ChronoField chronoField34 = java.time.temporal.ChronoField.SECOND_OF_DAY;
        boolean boolean35 = period30.equals((java.lang.Object) chronoField34);
        boolean boolean36 = localDate4.isSupported((java.time.temporal.TemporalField) chronoField34);
        java.time.temporal.TemporalUnit temporalUnit37 = chronoField34.getRangeUnit();
        java.time.Instant instant38 = instant1.truncatedTo(temporalUnit37);
        int int39 = instant38.getNano();
        java.nio.file.attribute.FileTime fileTime40 = java.nio.file.attribute.FileTime.from(instant38);
        java.lang.String str41 = fileTime40.toString();
        org.junit.Assert.assertNotNull(instant0);
        org.junit.Assert.assertNotNull(instant1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2 + "'", int5 == 2);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertTrue("'" + isoEra10 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra10.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertTrue("'" + chronoField24 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField24.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime26);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 3601000000001L + "'", long27 == 3601000000001L);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(periodTemporalQuery29);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertTrue("'" + chronoField34 + "' != '" + java.time.temporal.ChronoField.SECOND_OF_DAY + "'", chronoField34.equals(java.time.temporal.ChronoField.SECOND_OF_DAY));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + temporalUnit37 + "' != '" + java.time.temporal.ChronoUnit.DAYS + "'", temporalUnit37.equals(java.time.temporal.ChronoUnit.DAYS));
        org.junit.Assert.assertNotNull(instant38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(fileTime40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "2022-02-21T00:00:00Z" + "'", str41, "2022-02-21T00:00:00Z");
    }

    @Test
    public void test2467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2467");
        org.joda.time.PeriodType periodType1 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalTime localTime4 = new org.joda.time.LocalTime((long) 0, chronology3);
        org.joda.time.Chronology chronology5 = localTime4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.weekyearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime7 = org.joda.time.MutableDateTime.now(chronology5);
        org.joda.time.DateTimeField dateTimeField8 = chronology5.monthOfYear();
        org.joda.time.Period period9 = new org.joda.time.Period(3601000000001L, periodType1, chronology5);
        org.joda.time.DurationField durationField10 = chronology5.weeks();
        java.lang.String str11 = chronology5.toString();
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ISOChronology[UTC]" + "'", str11, "ISOChronology[UTC]");
    }

    @Test
    public void test2468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2468");
        java.util.Set<java.lang.String> strSet0 = java.time.ZoneId.getAvailableZoneIds();
        java.util.stream.Stream<java.lang.String> strStream1 = strSet0.parallelStream();
        boolean boolean3 = strSet0.remove((java.lang.Object) 0);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.Duration duration6 = new org.joda.time.Duration(readableInstant4, readableInstant5);
        org.joda.time.Seconds seconds7 = duration6.toStandardSeconds();
        int int8 = seconds7.getSeconds();
        org.joda.time.Seconds seconds10 = seconds7.dividedBy(28);
        boolean boolean11 = strSet0.remove((java.lang.Object) seconds10);
        org.junit.Assert.assertNotNull(strSet0);
        org.junit.Assert.assertNotNull(strStream1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(seconds7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(seconds10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test2469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2469");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.nio.LongBuffer longBuffer3 = java.nio.LongBuffer.allocate((int) (short) 0);
        java.nio.Buffer buffer4 = longBuffer3.mark();
        boolean boolean5 = properties1.containsKey((java.lang.Object) longBuffer3);
        java.nio.charset.Charset charset6 = java.nio.charset.Charset.defaultCharset();
        boolean boolean7 = charset6.canEncode();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) 3, chronology9);
        org.joda.time.DateTime.Property property11 = dateTime10.dayOfYear();
        java.lang.Object obj12 = properties1.getOrDefault((java.lang.Object) boolean7, (java.lang.Object) property11);
        properties1.clear();
        int int14 = properties1.size();
        java.io.PrintStream printStream16 = new java.io.PrintStream("subject:\n (GERMAN)");
        printStream16.write((int) '#');
        java.security.CodeSource codeSource20 = null;
        java.security.PermissionCollection permissionCollection21 = null;
        java.security.ProtectionDomain protectionDomain22 = new java.security.ProtectionDomain(codeSource20, permissionCollection21);
        java.lang.ClassLoader classLoader23 = protectionDomain22.getClassLoader();
        java.security.CodeSource codeSource24 = null;
        java.security.PermissionCollection permissionCollection25 = null;
        java.security.ProtectionDomain protectionDomain26 = new java.security.ProtectionDomain(codeSource24, permissionCollection25);
        java.security.Permission permission27 = null;
        boolean boolean28 = protectionDomain26.implies(permission27);
        java.security.CodeSource codeSource29 = null;
        java.security.PermissionCollection permissionCollection30 = null;
        java.security.ProtectionDomain protectionDomain31 = new java.security.ProtectionDomain(codeSource29, permissionCollection30);
        java.security.CodeSource codeSource32 = null;
        java.security.PermissionCollection permissionCollection33 = null;
        java.security.ProtectionDomain protectionDomain34 = new java.security.ProtectionDomain(codeSource32, permissionCollection33);
        java.security.ProtectionDomain[] protectionDomainArray35 = new java.security.ProtectionDomain[] { protectionDomain22, protectionDomain26, protectionDomain31, protectionDomain34 };
        java.security.AccessControlContext accessControlContext36 = new java.security.AccessControlContext(protectionDomainArray35);
        java.io.PrintStream printStream37 = printStream16.printf("Property[secondOfMinute]", (java.lang.Object[]) protectionDomainArray35);
        properties1.list(printStream37);
        printStream37.print(241);
        java.nio.charset.Charset charset41 = java.nio.charset.Charset.defaultCharset();
        java.nio.charset.CharsetDecoder charsetDecoder42 = charset41.newDecoder();
        java.nio.charset.Charset charset43 = java.nio.charset.Charset.defaultCharset();
        boolean boolean44 = charset41.contains(charset43);
        java.nio.charset.CharsetEncoder charsetEncoder45 = charset41.newEncoder();
        byte[] byteArray46 = charsetEncoder45.replacement();
        java.nio.charset.Charset charset47 = java.nio.charset.Charset.defaultCharset();
        java.nio.charset.CharsetDecoder charsetDecoder48 = charset47.newDecoder();
        float float49 = charsetDecoder48.maxCharsPerByte();
        float float50 = charsetDecoder48.averageCharsPerByte();
        java.nio.charset.CodingErrorAction codingErrorAction51 = charsetDecoder48.unmappableCharacterAction();
        java.nio.charset.CharsetEncoder charsetEncoder52 = charsetEncoder45.onUnmappableCharacter(codingErrorAction51);
        java.nio.charset.Charset charset53 = java.nio.charset.Charset.defaultCharset();
        java.nio.charset.CharsetDecoder charsetDecoder54 = charset53.newDecoder();
        java.nio.charset.Charset charset55 = java.nio.charset.Charset.defaultCharset();
        boolean boolean56 = charset53.contains(charset55);
        java.nio.charset.CharsetEncoder charsetEncoder57 = charset53.newEncoder();
        byte[] byteArray58 = charsetEncoder57.replacement();
        java.nio.charset.CharsetEncoder charsetEncoder59 = charsetEncoder45.replaceWith(byteArray58);
        java.io.OutputStream outputStream60 = null;
        java.io.FilterOutputStream filterOutputStream61 = new java.io.FilterOutputStream(outputStream60);
        byte[] byteArray63 = new byte[] { (byte) 100 };
        filterOutputStream61.write(byteArray63, (int) (byte) 0, (int) (byte) 0);
        java.nio.charset.CharsetEncoder charsetEncoder67 = charsetEncoder45.replaceWith(byteArray63);
        java.nio.charset.CodingErrorAction codingErrorAction68 = charsetEncoder67.malformedInputAction();
        java.io.OutputStream outputStream69 = null;
        java.io.FilterOutputStream filterOutputStream70 = new java.io.FilterOutputStream(outputStream69);
        byte[] byteArray72 = new byte[] { (byte) 100 };
        filterOutputStream70.write(byteArray72, (int) (byte) 0, (int) (byte) 0);
        boolean boolean76 = charsetEncoder67.isLegalReplacement(byteArray72);
        // The following exception was thrown during execution in test generation
        try {
            printStream37.write(byteArray72, 558, 601);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(longBuffer3);
        org.junit.Assert.assertNotNull(buffer4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(charset6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(obj12);
        org.junit.Assert.assertEquals(obj12.toString(), "Property[dayOfYear]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj12), "Property[dayOfYear]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj12), "Property[dayOfYear]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertEquals(protectionDomain22.toString(), "ProtectionDomain  null\n null\n <no principals>\n null\n");
        org.junit.Assert.assertNull(classLoader23);
        org.junit.Assert.assertEquals(protectionDomain26.toString(), "ProtectionDomain  null\n null\n <no principals>\n null\n");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals(protectionDomain31.toString(), "ProtectionDomain  null\n null\n <no principals>\n null\n");
        org.junit.Assert.assertEquals(protectionDomain34.toString(), "ProtectionDomain  null\n null\n <no principals>\n null\n");
        org.junit.Assert.assertNotNull(protectionDomainArray35);
        org.junit.Assert.assertNotNull(printStream37);
        org.junit.Assert.assertNotNull(charset41);
        org.junit.Assert.assertNotNull(charsetDecoder42);
        org.junit.Assert.assertNotNull(charset43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(charsetEncoder45);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[63]");
        org.junit.Assert.assertNotNull(charset47);
        org.junit.Assert.assertNotNull(charsetDecoder48);
        org.junit.Assert.assertTrue("'" + float49 + "' != '" + 1.0f + "'", float49 == 1.0f);
        org.junit.Assert.assertTrue("'" + float50 + "' != '" + 1.0f + "'", float50 == 1.0f);
        org.junit.Assert.assertNotNull(codingErrorAction51);
        org.junit.Assert.assertNotNull(charsetEncoder52);
        org.junit.Assert.assertNotNull(charset53);
        org.junit.Assert.assertNotNull(charsetDecoder54);
        org.junit.Assert.assertNotNull(charset55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(charsetEncoder57);
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[63]");
        org.junit.Assert.assertNotNull(charsetEncoder59);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[100]");
        org.junit.Assert.assertNotNull(charsetEncoder67);
        org.junit.Assert.assertNotNull(codingErrorAction68);
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[100]");
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
    }

    @Test
    public void test2470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2470");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.withField(dateTimeFieldType2, (int) 'a');
        org.joda.time.Period period5 = org.joda.time.Period.ZERO;
        org.joda.time.Seconds seconds6 = period5.toStandardSeconds();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime1.withPeriodAdded((org.joda.time.ReadablePeriod) period5, 4096);
        int int9 = localDateTime8.getDayOfYear();
        org.joda.time.LocalDateTime.Property property10 = localDateTime8.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime11 = property10.withMinimumValue();
        // The following exception was thrown during execution in test generation
        try {
            int int13 = localDateTime11.getValue(65);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 65");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(seconds6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 52 + "'", int9 == 52);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime11);
    }

    @Test
    public void test2471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2471");
        java.time.Duration duration0 = java.time.Duration.ZERO;
        java.time.Duration duration2 = duration0.minusHours((long) 8);
        java.time.ZoneOffset zoneOffset6 = java.time.ZoneOffset.ofHoursMinutes(1, 10);
        java.time.LocalDate localDate7 = java.time.LocalDate.now((java.time.ZoneId) zoneOffset6);
        java.time.LocalDate localDate8 = java.time.LocalDate.now((java.time.ZoneId) zoneOffset6);
        java.time.OffsetDateTime offsetDateTime10 = java.time.OffsetDateTime.now();
        java.time.LocalDate localDate12 = java.time.LocalDate.ofEpochDay((long) ' ');
        int int13 = localDate12.getMonthValue();
        org.joda.time.Period period14 = org.joda.time.Period.ZERO;
        org.joda.time.Period period15 = period14.normalizedStandard();
        org.joda.time.Period period17 = period14.plusHours(2);
        java.time.chrono.IsoEra isoEra18 = java.time.chrono.IsoEra.CE;
        boolean boolean19 = period17.equals((java.lang.Object) isoEra18);
        java.time.LocalTime localTime24 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime25 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime24);
        java.time.LocalTime localTime30 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime31 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime30);
        java.time.temporal.ChronoField chronoField32 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime34 = localTime30.with((java.time.temporal.TemporalField) chronoField32, (long) (short) 1);
        long long35 = localTime24.getLong((java.time.temporal.TemporalField) chronoField32);
        boolean boolean36 = isoEra18.isSupported((java.time.temporal.TemporalField) chronoField32);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery37 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period38 = isoEra18.query(periodTemporalQuery37);
        boolean boolean39 = period38.isNegative();
        java.time.Period period41 = period38.plusDays((long) ' ');
        java.time.temporal.ChronoField chronoField42 = java.time.temporal.ChronoField.SECOND_OF_DAY;
        boolean boolean43 = period38.equals((java.lang.Object) chronoField42);
        boolean boolean44 = localDate12.isSupported((java.time.temporal.TemporalField) chronoField42);
        java.time.temporal.TemporalUnit temporalUnit45 = chronoField42.getRangeUnit();
        java.time.OffsetDateTime offsetDateTime46 = offsetDateTime10.truncatedTo(temporalUnit45);
        java.time.LocalDate localDate49 = java.time.LocalDate.ofEpochDay((long) ' ');
        int int50 = localDate49.getMonthValue();
        org.joda.time.Period period51 = org.joda.time.Period.ZERO;
        org.joda.time.Period period52 = period51.normalizedStandard();
        org.joda.time.Period period54 = period51.plusHours(2);
        java.time.chrono.IsoEra isoEra55 = java.time.chrono.IsoEra.CE;
        boolean boolean56 = period54.equals((java.lang.Object) isoEra55);
        java.time.LocalTime localTime61 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime62 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime61);
        java.time.LocalTime localTime67 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime68 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime67);
        java.time.temporal.ChronoField chronoField69 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime71 = localTime67.with((java.time.temporal.TemporalField) chronoField69, (long) (short) 1);
        long long72 = localTime61.getLong((java.time.temporal.TemporalField) chronoField69);
        boolean boolean73 = isoEra55.isSupported((java.time.temporal.TemporalField) chronoField69);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery74 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period75 = isoEra55.query(periodTemporalQuery74);
        boolean boolean76 = period75.isNegative();
        java.time.Period period78 = period75.plusDays((long) ' ');
        java.time.temporal.ChronoField chronoField79 = java.time.temporal.ChronoField.SECOND_OF_DAY;
        boolean boolean80 = period75.equals((java.lang.Object) chronoField79);
        boolean boolean81 = localDate49.isSupported((java.time.temporal.TemporalField) chronoField79);
        java.time.temporal.TemporalUnit temporalUnit82 = chronoField79.getRangeUnit();
        java.time.OffsetDateTime offsetDateTime83 = offsetDateTime46.minus(8L, temporalUnit82);
        java.time.LocalDate localDate84 = localDate8.minus((long) '4', temporalUnit82);
        java.time.Duration duration85 = temporalUnit82.getDuration();
        java.time.Duration duration86 = duration0.plus((long) 306, temporalUnit82);
        java.time.Duration duration88 = duration0.withSeconds((long) 24);
        org.junit.Assert.assertNotNull(duration0);
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertNotNull(zoneOffset6);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(offsetDateTime10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertTrue("'" + isoEra18 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra18.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(localTime24);
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertNotNull(localTime30);
        org.junit.Assert.assertNotNull(localTime31);
        org.junit.Assert.assertTrue("'" + chronoField32 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField32.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime34);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 3601000000001L + "'", long35 == 3601000000001L);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(periodTemporalQuery37);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertTrue("'" + chronoField42 + "' != '" + java.time.temporal.ChronoField.SECOND_OF_DAY + "'", chronoField42.equals(java.time.temporal.ChronoField.SECOND_OF_DAY));
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + temporalUnit45 + "' != '" + java.time.temporal.ChronoUnit.DAYS + "'", temporalUnit45.equals(java.time.temporal.ChronoUnit.DAYS));
        org.junit.Assert.assertNotNull(offsetDateTime46);
        org.junit.Assert.assertNotNull(localDate49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2 + "'", int50 == 2);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertNotNull(period54);
        org.junit.Assert.assertTrue("'" + isoEra55 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra55.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(localTime61);
        org.junit.Assert.assertNotNull(localTime62);
        org.junit.Assert.assertNotNull(localTime67);
        org.junit.Assert.assertNotNull(localTime68);
        org.junit.Assert.assertTrue("'" + chronoField69 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField69.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime71);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 3601000000001L + "'", long72 == 3601000000001L);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(periodTemporalQuery74);
        org.junit.Assert.assertNotNull(period75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(period78);
        org.junit.Assert.assertTrue("'" + chronoField79 + "' != '" + java.time.temporal.ChronoField.SECOND_OF_DAY + "'", chronoField79.equals(java.time.temporal.ChronoField.SECOND_OF_DAY));
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + temporalUnit82 + "' != '" + java.time.temporal.ChronoUnit.DAYS + "'", temporalUnit82.equals(java.time.temporal.ChronoUnit.DAYS));
        org.junit.Assert.assertNotNull(offsetDateTime83);
        org.junit.Assert.assertNotNull(localDate84);
        org.junit.Assert.assertNotNull(duration85);
        org.junit.Assert.assertNotNull(duration86);
        org.junit.Assert.assertNotNull(duration88);
    }

    @Test
    public void test2472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2472");
        java.time.Month month0 = java.time.Month.JANUARY;
        java.time.LocalDateTime localDateTime1 = java.time.LocalDateTime.now();
        java.time.temporal.ChronoField chronoField2 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime4 = localDateTime1.with((java.time.temporal.TemporalField) chronoField2, (long) 10);
        java.time.LocalDateTime localDateTime6 = localDateTime1.minusMinutes((long) 12);
        java.time.LocalDateTime localDateTime7 = java.time.LocalDateTime.now();
        java.time.temporal.ChronoField chronoField8 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime10 = localDateTime7.with((java.time.temporal.TemporalField) chronoField8, (long) 10);
        java.time.Duration duration12 = java.time.Duration.ofSeconds((long) 0);
        java.time.temporal.Temporal temporal13 = localDateTime7.minus((java.time.temporal.TemporalAmount) duration12);
        boolean boolean14 = localDateTime6.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime7);
        java.time.LocalDate localDate16 = java.time.LocalDate.ofEpochDay((long) ' ');
        java.time.OffsetTime offsetTime17 = java.time.OffsetTime.MAX;
        java.time.LocalTime localTime18 = offsetTime17.toLocalTime();
        java.lang.String str19 = offsetTime17.toString();
        java.time.Duration duration20 = java.time.Duration.ZERO;
        java.lang.String str21 = duration20.toString();
        java.time.OffsetTime offsetTime22 = offsetTime17.plus((java.time.temporal.TemporalAmount) duration20);
        java.time.LocalTime localTime23 = offsetTime17.toLocalTime();
        java.time.chrono.ChronoLocalDateTime<?> wildcardChronoLocalDateTime24 = localDate16.atTime(localTime23);
        java.time.LocalDate localDate26 = localDate16.minusWeeks((long) 2097);
        java.lang.String str27 = localDate26.toString();
        java.time.LocalDate localDate29 = java.time.LocalDate.ofEpochDay((long) ' ');
        java.time.OffsetTime offsetTime30 = java.time.OffsetTime.MAX;
        java.time.LocalTime localTime31 = offsetTime30.toLocalTime();
        java.lang.String str32 = offsetTime30.toString();
        java.time.Duration duration33 = java.time.Duration.ZERO;
        java.lang.String str34 = duration33.toString();
        java.time.OffsetTime offsetTime35 = offsetTime30.plus((java.time.temporal.TemporalAmount) duration33);
        java.time.LocalTime localTime36 = offsetTime30.toLocalTime();
        java.time.chrono.ChronoLocalDateTime<?> wildcardChronoLocalDateTime37 = localDate29.atTime(localTime36);
        java.time.LocalDate localDate39 = localDate29.minusWeeks((long) 2097);
        java.util.TimeZone timeZone41 = null;
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forTimeZone(timeZone41);
        org.joda.time.DateMidnight dateMidnight43 = new org.joda.time.DateMidnight((long) 1970, dateTimeZone42);
        long long46 = dateTimeZone42.convertLocalToUTC((long) 3, false);
        long long49 = dateTimeZone42.convertLocalToUTC(0L, true);
        boolean boolean50 = localDate29.equals((java.lang.Object) true);
        int int51 = localDate29.lengthOfMonth();
        java.time.temporal.Temporal temporal52 = localDate26.adjustInto((java.time.temporal.Temporal) localDate29);
        java.time.LocalDateTime localDateTime53 = localDate26.atStartOfDay();
        boolean boolean54 = localDateTime7.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime53);
        java.time.chrono.Chronology chronology55 = localDateTime53.getChronology();
        java.time.temporal.Temporal temporal56 = month0.adjustInto((java.time.temporal.Temporal) localDateTime53);
        org.junit.Assert.assertTrue("'" + month0 + "' != '" + java.time.Month.JANUARY + "'", month0.equals(java.time.Month.JANUARY));
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertTrue("'" + chronoField2 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField2.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertTrue("'" + chronoField8 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField8.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(temporal13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(offsetTime17);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "23:59:59.999999999-18:00" + "'", str19, "23:59:59.999999999-18:00");
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "PT0S" + "'", str21, "PT0S");
        org.junit.Assert.assertNotNull(offsetTime22);
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertNotNull(wildcardChronoLocalDateTime24);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "1929-11-25" + "'", str27, "1929-11-25");
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(offsetTime30);
        org.junit.Assert.assertNotNull(localTime31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "23:59:59.999999999-18:00" + "'", str32, "23:59:59.999999999-18:00");
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "PT0S" + "'", str34, "PT0S");
        org.junit.Assert.assertNotNull(offsetTime35);
        org.junit.Assert.assertNotNull(localTime36);
        org.junit.Assert.assertNotNull(wildcardChronoLocalDateTime37);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 3L + "'", long46 == 3L);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 28 + "'", int51 == 28);
        org.junit.Assert.assertNotNull(temporal52);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(temporal56);
    }

    @Test
    public void test2473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2473");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 3, chronology1);
        org.joda.time.DateTime.Property property3 = dateTime2.dayOfYear();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight((java.lang.Object) dateTime2, chronology4);
        org.joda.time.MutableDateTime mutableDateTime6 = dateTime2.toMutableDateTime();
        mutableDateTime6.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime6.dayOfWeek();
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime6.year();
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime6.weekyear();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) 3, chronology13);
        org.joda.time.Period period15 = org.joda.time.Period.ZERO;
        org.joda.time.Period period16 = period15.normalizedStandard();
        org.joda.time.Period period18 = period16.minusMinutes((int) ' ');
        org.joda.time.Period period20 = period18.minusMonths((int) (byte) 0);
        org.joda.time.PeriodType periodType21 = period20.getPeriodType();
        org.joda.time.DateTime dateTime22 = dateTime14.minus((org.joda.time.ReadablePeriod) period20);
        org.joda.time.DateTime dateTime24 = dateTime14.plusHours(34);
        org.joda.time.DateTime dateTime26 = dateTime14.plusMonths(5);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.LocalTime localTime29 = new org.joda.time.LocalTime((long) 0, chronology28);
        org.joda.time.Chronology chronology30 = localTime29.getChronology();
        org.joda.time.DateTimeField dateTimeField31 = chronology30.weekyearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime32 = org.joda.time.MutableDateTime.now(chronology30);
        mutableDateTime32.setWeekOfWeekyear((int) '#');
        mutableDateTime32.addHours(0);
        org.joda.time.Days days37 = org.joda.time.Days.daysBetween((org.joda.time.ReadableInstant) dateTime26, (org.joda.time.ReadableInstant) mutableDateTime32);
        long long38 = property11.getDifferenceAsLong((org.joda.time.ReadableInstant) mutableDateTime32);
        org.joda.time.MutableDateTime mutableDateTime39 = property11.getMutableDateTime();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime39.setDayOfWeek((-624));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -624 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(mutableDateTime32);
        org.junit.Assert.assertNotNull(days37);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 47L + "'", long38 == 47L);
        org.junit.Assert.assertNotNull(mutableDateTime39);
    }

    @Test
    public void test2474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2474");
        java.time.temporal.ChronoField chronoField0 = java.time.temporal.ChronoField.ALIGNED_DAY_OF_WEEK_IN_YEAR;
        java.time.OffsetDateTime offsetDateTime1 = java.time.OffsetDateTime.now();
        java.time.LocalDate localDate3 = java.time.LocalDate.ofEpochDay((long) ' ');
        int int4 = localDate3.getMonthValue();
        org.joda.time.Period period5 = org.joda.time.Period.ZERO;
        org.joda.time.Period period6 = period5.normalizedStandard();
        org.joda.time.Period period8 = period5.plusHours(2);
        java.time.chrono.IsoEra isoEra9 = java.time.chrono.IsoEra.CE;
        boolean boolean10 = period8.equals((java.lang.Object) isoEra9);
        java.time.LocalTime localTime15 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime16 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime15);
        java.time.LocalTime localTime21 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime22 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime21);
        java.time.temporal.ChronoField chronoField23 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime25 = localTime21.with((java.time.temporal.TemporalField) chronoField23, (long) (short) 1);
        long long26 = localTime15.getLong((java.time.temporal.TemporalField) chronoField23);
        boolean boolean27 = isoEra9.isSupported((java.time.temporal.TemporalField) chronoField23);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery28 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period29 = isoEra9.query(periodTemporalQuery28);
        boolean boolean30 = period29.isNegative();
        java.time.Period period32 = period29.plusDays((long) ' ');
        java.time.temporal.ChronoField chronoField33 = java.time.temporal.ChronoField.SECOND_OF_DAY;
        boolean boolean34 = period29.equals((java.lang.Object) chronoField33);
        boolean boolean35 = localDate3.isSupported((java.time.temporal.TemporalField) chronoField33);
        boolean boolean36 = offsetDateTime1.isSupported((java.time.temporal.TemporalField) chronoField33);
        java.time.Clock clock37 = java.time.Clock.systemUTC();
        java.time.Duration duration39 = java.time.Duration.ofSeconds((long) 256);
        java.time.Clock clock40 = java.time.Clock.tick(clock37, duration39);
        java.time.OffsetTime offsetTime41 = java.time.OffsetTime.MAX;
        java.time.LocalTime localTime42 = offsetTime41.toLocalTime();
        java.lang.String str43 = offsetTime41.toString();
        java.time.Duration duration44 = java.time.Duration.ZERO;
        java.lang.String str45 = duration44.toString();
        java.time.OffsetTime offsetTime46 = offsetTime41.plus((java.time.temporal.TemporalAmount) duration44);
        int int47 = duration39.compareTo(duration44);
        java.time.OffsetDateTime offsetDateTime48 = offsetDateTime1.plus((java.time.temporal.TemporalAmount) duration44);
        boolean boolean49 = chronoField0.isSupportedBy((java.time.temporal.TemporalAccessor) offsetDateTime1);
        // The following exception was thrown during execution in test generation
        try {
            java.time.OffsetDateTime offsetDateTime51 = offsetDateTime1.withMinute(2012);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for MinuteOfHour (valid values 0 - 59): 2012");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + chronoField0 + "' != '" + java.time.temporal.ChronoField.ALIGNED_DAY_OF_WEEK_IN_YEAR + "'", chronoField0.equals(java.time.temporal.ChronoField.ALIGNED_DAY_OF_WEEK_IN_YEAR));
        org.junit.Assert.assertNotNull(offsetDateTime1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2 + "'", int4 == 2);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertTrue("'" + isoEra9 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra9.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertTrue("'" + chronoField23 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField23.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 3601000000001L + "'", long26 == 3601000000001L);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(periodTemporalQuery28);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertTrue("'" + chronoField33 + "' != '" + java.time.temporal.ChronoField.SECOND_OF_DAY + "'", chronoField33.equals(java.time.temporal.ChronoField.SECOND_OF_DAY));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(clock37);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(clock40);
        org.junit.Assert.assertNotNull(offsetTime41);
        org.junit.Assert.assertNotNull(localTime42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "23:59:59.999999999-18:00" + "'", str43, "23:59:59.999999999-18:00");
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "PT0S" + "'", str45, "PT0S");
        org.junit.Assert.assertNotNull(offsetTime46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(offsetDateTime48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
    }

    @Test
    public void test2475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2475");
        java.time.OffsetTime offsetTime0 = java.time.OffsetTime.MAX;
        java.time.LocalTime localTime1 = offsetTime0.toLocalTime();
        java.time.LocalTime localTime6 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime7 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime6);
        java.time.LocalTime localTime12 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime13 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime12);
        java.time.temporal.ChronoField chronoField14 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime16 = localTime12.with((java.time.temporal.TemporalField) chronoField14, (long) (short) 1);
        long long17 = localTime6.getLong((java.time.temporal.TemporalField) chronoField14);
        java.time.LocalTime localTime19 = localTime6.withSecond((int) (short) 1);
        int int20 = localTime19.getMinute();
        java.time.LocalTime localTime22 = localTime19.plusHours((long) (-1));
        java.time.OffsetTime offsetTime23 = offsetTime0.with((java.time.temporal.TemporalAdjuster) localTime19);
        java.time.OffsetTime offsetTime25 = offsetTime0.minusHours((long) 3);
        java.time.OffsetTime offsetTime27 = offsetTime0.minusMinutes((long) 101);
        java.lang.String str28 = offsetTime27.toString();
        // The following exception was thrown during execution in test generation
        try {
            java.time.OffsetTime offsetTime30 = offsetTime27.withMinute(2088);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for MinuteOfHour (valid values 0 - 59): 2088");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(offsetTime0);
        org.junit.Assert.assertNotNull(localTime1);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertTrue("'" + chronoField14 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField14.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 3601000000001L + "'", long17 == 3601000000001L);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertNotNull(offsetTime23);
        org.junit.Assert.assertNotNull(offsetTime25);
        org.junit.Assert.assertNotNull(offsetTime27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "22:18:59.999999999-18:00" + "'", str28, "22:18:59.999999999-18:00");
    }

    @Test
    public void test2476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2476");
        long[] longArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.nio.LongBuffer longBuffer3 = java.nio.LongBuffer.wrap(longArray0, 34595674, (int) '-');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test2477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2477");
        java.time.OffsetTime offsetTime0 = java.time.OffsetTime.MAX;
        java.time.LocalTime localTime1 = offsetTime0.toLocalTime();
        java.time.chrono.Chronology chronology2 = java.time.chrono.Chronology.from((java.time.temporal.TemporalAccessor) localTime1);
        java.time.OffsetDateTime offsetDateTime3 = java.time.OffsetDateTime.now();
        int int4 = offsetDateTime3.getDayOfMonth();
        java.time.OffsetDateTime offsetDateTime6 = offsetDateTime3.withMinute((int) (byte) 10);
        long long7 = offsetDateTime6.toEpochSecond();
        java.time.chrono.IsoEra isoEra8 = java.time.chrono.IsoEra.CE;
        int int9 = isoEra8.getValue();
        java.time.OffsetDateTime offsetDateTime10 = offsetDateTime6.with((java.time.temporal.TemporalAdjuster) isoEra8);
        int int12 = chronology2.prolepticYear((java.time.chrono.Era) isoEra8, (-624));
        java.util.GregorianCalendar gregorianCalendar18 = new java.util.GregorianCalendar(12, 4096, 7, (-1), (int) (short) 10);
        int int19 = gregorianCalendar18.getWeeksInWeekYear();
        java.lang.String str20 = gregorianCalendar18.getCalendarType();
        java.time.ZonedDateTime zonedDateTime21 = gregorianCalendar18.toZonedDateTime();
        java.time.ZonedDateTime zonedDateTime23 = zonedDateTime21.minusMonths((long) 10);
        java.time.ZonedDateTime zonedDateTime25 = zonedDateTime23.minusHours((long) 9);
        java.time.chrono.ChronoZonedDateTime<java.time.LocalDate> localDateChronoZonedDateTime26 = zonedDateTime23.withLaterOffsetAtOverlap();
        java.time.OffsetDateTime offsetDateTime27 = java.time.OffsetDateTime.now();
        java.time.LocalDate localDate28 = offsetDateTime27.toLocalDate();
        java.time.OffsetDateTime offsetDateTime29 = java.time.OffsetDateTime.now();
        java.time.LocalDate localDate30 = offsetDateTime29.toLocalDate();
        java.time.OffsetDateTime offsetDateTime31 = java.time.OffsetDateTime.now();
        java.time.temporal.ChronoField chronoField32 = java.time.temporal.ChronoField.HOUR_OF_DAY;
        boolean boolean33 = offsetDateTime31.isSupported((java.time.temporal.TemporalField) chronoField32);
        boolean boolean34 = offsetDateTime29.isEqual(offsetDateTime31);
        java.lang.String str35 = offsetDateTime31.toString();
        boolean boolean36 = offsetDateTime27.isAfter(offsetDateTime31);
        java.time.chrono.IsoEra isoEra37 = java.time.chrono.IsoEra.CE;
        java.time.format.DateTimeFormatter dateTimeFormatter38 = java.time.format.DateTimeFormatter.ISO_DATE;
        java.lang.String str39 = dateTimeFormatter38.toString();
        java.time.LocalDateTime localDateTime40 = java.time.LocalDateTime.now();
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery41 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period42 = localDateTime40.query(periodTemporalQuery41);
        java.text.Format format43 = dateTimeFormatter38.toFormat(periodTemporalQuery41);
        java.time.Period period44 = isoEra37.query(periodTemporalQuery41);
        java.time.Period period45 = offsetDateTime27.query(periodTemporalQuery41);
        java.time.Period period46 = zonedDateTime23.query(periodTemporalQuery41);
        java.time.Period period47 = isoEra8.query(periodTemporalQuery41);
        org.junit.Assert.assertNotNull(offsetTime0);
        org.junit.Assert.assertNotNull(localTime1);
        org.junit.Assert.assertNotNull(chronology2);
        org.junit.Assert.assertNotNull(offsetDateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 21 + "'", int4 == 21);
        org.junit.Assert.assertNotNull(offsetDateTime6);
// flaky:         org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1645434651L + "'", long7 == 1645434651L);
        org.junit.Assert.assertTrue("'" + isoEra8 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra8.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(offsetDateTime10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-624) + "'", int12 == (-624));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 52 + "'", int19 == 52);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "gregory" + "'", str20, "gregory");
        org.junit.Assert.assertNotNull(zonedDateTime21);
        org.junit.Assert.assertNotNull(zonedDateTime23);
        org.junit.Assert.assertNotNull(zonedDateTime25);
        org.junit.Assert.assertNotNull(localDateChronoZonedDateTime26);
        org.junit.Assert.assertNotNull(offsetDateTime27);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(offsetDateTime29);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(offsetDateTime31);
        org.junit.Assert.assertTrue("'" + chronoField32 + "' != '" + java.time.temporal.ChronoField.HOUR_OF_DAY + "'", chronoField32.equals(java.time.temporal.ChronoField.HOUR_OF_DAY));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str35 + "' != '" + "2022-02-21T09:37:51.688Z" + "'", str35, "2022-02-21T09:37:51.688Z");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + isoEra37 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra37.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertNotNull(dateTimeFormatter38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "ParseCaseSensitive(false)(Value(Year,4,10,EXCEEDS_PAD)'-'Value(MonthOfYear,2)'-'Value(DayOfMonth,2))[Offset(+HH:MM:ss,'Z')]" + "'", str39, "ParseCaseSensitive(false)(Value(Year,4,10,EXCEEDS_PAD)'-'Value(MonthOfYear,2)'-'Value(DayOfMonth,2))[Offset(+HH:MM:ss,'Z')]");
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(periodTemporalQuery41);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertNotNull(format43);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertNotNull(period47);
    }

    @Test
    public void test2478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2478");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 3, chronology1);
        org.joda.time.DateTime.Property property3 = dateTime2.dayOfYear();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight((java.lang.Object) dateTime2, chronology4);
        org.joda.time.MutableDateTime mutableDateTime6 = dateTime2.toMutableDateTime();
        mutableDateTime6.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime6.dayOfWeek();
        java.util.Locale locale10 = java.util.Locale.JAPAN;
        int int11 = property9.getMaximumTextLength(locale10);
        org.joda.time.MutableDateTime mutableDateTime12 = property9.roundHalfEven();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime12.setTime((int) '\000', (-2), (int) '\uffff', (int) ':');
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -2 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ja_JP");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 3 + "'", int11 == 3);
        org.junit.Assert.assertNotNull(mutableDateTime12);
    }

    @Test
    public void test2479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2479");
        java.time.LocalDate localDate1 = java.time.LocalDate.ofEpochDay((long) ' ');
        java.time.OffsetTime offsetTime2 = java.time.OffsetTime.MAX;
        java.time.LocalTime localTime3 = offsetTime2.toLocalTime();
        java.lang.String str4 = offsetTime2.toString();
        java.time.Duration duration5 = java.time.Duration.ZERO;
        java.lang.String str6 = duration5.toString();
        java.time.OffsetTime offsetTime7 = offsetTime2.plus((java.time.temporal.TemporalAmount) duration5);
        java.time.LocalTime localTime8 = offsetTime2.toLocalTime();
        java.time.chrono.ChronoLocalDateTime<?> wildcardChronoLocalDateTime9 = localDate1.atTime(localTime8);
        java.time.LocalDate localDate11 = localDate1.minusWeeks((long) 2097);
        java.time.LocalDate localDate13 = java.time.LocalDate.ofEpochDay((long) ' ');
        java.time.OffsetTime offsetTime14 = java.time.OffsetTime.MAX;
        java.time.LocalTime localTime15 = offsetTime14.toLocalTime();
        java.lang.String str16 = offsetTime14.toString();
        java.time.Duration duration17 = java.time.Duration.ZERO;
        java.lang.String str18 = duration17.toString();
        java.time.OffsetTime offsetTime19 = offsetTime14.plus((java.time.temporal.TemporalAmount) duration17);
        java.time.LocalTime localTime20 = offsetTime14.toLocalTime();
        java.time.chrono.ChronoLocalDateTime<?> wildcardChronoLocalDateTime21 = localDate13.atTime(localTime20);
        java.time.LocalDate localDate23 = localDate13.minusYears((long) 34);
        java.time.ZoneOffset zoneOffset27 = java.time.ZoneOffset.ofHoursMinutes(1, 10);
        java.time.LocalDate localDate28 = java.time.LocalDate.now((java.time.ZoneId) zoneOffset27);
        java.util.Properties properties30 = null;
        java.util.Properties properties31 = new java.util.Properties(properties30);
        java.time.LocalTime localTime36 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime37 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime36);
        java.time.LocalTime localTime42 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime43 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime42);
        java.time.temporal.ChronoField chronoField44 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime46 = localTime42.with((java.time.temporal.TemporalField) chronoField44, (long) (short) 1);
        long long47 = localTime36.getLong((java.time.temporal.TemporalField) chronoField44);
        java.time.LocalTime localTime49 = localTime36.withSecond((int) (short) 1);
        java.lang.Object obj51 = properties31.put((java.lang.Object) localTime49, (java.lang.Object) "117");
        java.time.LocalDateTime localDateTime52 = java.time.LocalDateTime.MIN;
        java.time.Month month53 = java.time.Month.NOVEMBER;
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime54 = localDateTime52.with((java.time.temporal.TemporalAdjuster) month53);
        java.time.LocalDate localDate57 = java.time.LocalDate.ofEpochDay((long) ' ');
        int int58 = localDate57.getMonthValue();
        org.joda.time.Period period59 = org.joda.time.Period.ZERO;
        org.joda.time.Period period60 = period59.normalizedStandard();
        org.joda.time.Period period62 = period59.plusHours(2);
        java.time.chrono.IsoEra isoEra63 = java.time.chrono.IsoEra.CE;
        boolean boolean64 = period62.equals((java.lang.Object) isoEra63);
        java.time.LocalTime localTime69 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime70 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime69);
        java.time.LocalTime localTime75 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime76 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime75);
        java.time.temporal.ChronoField chronoField77 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime79 = localTime75.with((java.time.temporal.TemporalField) chronoField77, (long) (short) 1);
        long long80 = localTime69.getLong((java.time.temporal.TemporalField) chronoField77);
        boolean boolean81 = isoEra63.isSupported((java.time.temporal.TemporalField) chronoField77);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery82 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period83 = isoEra63.query(periodTemporalQuery82);
        boolean boolean84 = period83.isNegative();
        java.time.Period period86 = period83.plusDays((long) ' ');
        java.time.temporal.ChronoField chronoField87 = java.time.temporal.ChronoField.SECOND_OF_DAY;
        boolean boolean88 = period83.equals((java.lang.Object) chronoField87);
        boolean boolean89 = localDate57.isSupported((java.time.temporal.TemporalField) chronoField87);
        java.time.temporal.TemporalUnit temporalUnit90 = chronoField87.getRangeUnit();
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime91 = localDateChronoLocalDateTime54.plus(1L, temporalUnit90);
        java.time.LocalTime localTime92 = localTime49.truncatedTo(temporalUnit90);
        java.time.chrono.ChronoLocalDate chronoLocalDate93 = localDate28.minus((long) 3600000, temporalUnit90);
        java.time.LocalDate localDate94 = localDate13.plus((-4831848L), temporalUnit90);
        boolean boolean95 = localDate11.isAfter((java.time.chrono.ChronoLocalDate) localDate94);
        // The following exception was thrown during execution in test generation
        try {
            java.time.LocalDate localDate97 = localDate94.minusYears(34642346000000L);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for Year (valid values -999999999 - 999999999): -34642346011260");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate1);
        org.junit.Assert.assertNotNull(offsetTime2);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "23:59:59.999999999-18:00" + "'", str4, "23:59:59.999999999-18:00");
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "PT0S" + "'", str6, "PT0S");
        org.junit.Assert.assertNotNull(offsetTime7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(wildcardChronoLocalDateTime9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(offsetTime14);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "23:59:59.999999999-18:00" + "'", str16, "23:59:59.999999999-18:00");
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "PT0S" + "'", str18, "PT0S");
        org.junit.Assert.assertNotNull(offsetTime19);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(wildcardChronoLocalDateTime21);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(zoneOffset27);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(localTime36);
        org.junit.Assert.assertNotNull(localTime37);
        org.junit.Assert.assertNotNull(localTime42);
        org.junit.Assert.assertNotNull(localTime43);
        org.junit.Assert.assertTrue("'" + chronoField44 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField44.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime46);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 3601000000001L + "'", long47 == 3601000000001L);
        org.junit.Assert.assertNotNull(localTime49);
        org.junit.Assert.assertNull(obj51);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertTrue("'" + month53 + "' != '" + java.time.Month.NOVEMBER + "'", month53.equals(java.time.Month.NOVEMBER));
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime54);
        org.junit.Assert.assertNotNull(localDate57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 2 + "'", int58 == 2);
        org.junit.Assert.assertNotNull(period59);
        org.junit.Assert.assertNotNull(period60);
        org.junit.Assert.assertNotNull(period62);
        org.junit.Assert.assertTrue("'" + isoEra63 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra63.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(localTime69);
        org.junit.Assert.assertNotNull(localTime70);
        org.junit.Assert.assertNotNull(localTime75);
        org.junit.Assert.assertNotNull(localTime76);
        org.junit.Assert.assertTrue("'" + chronoField77 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField77.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime79);
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 3601000000001L + "'", long80 == 3601000000001L);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(periodTemporalQuery82);
        org.junit.Assert.assertNotNull(period83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(period86);
        org.junit.Assert.assertTrue("'" + chronoField87 + "' != '" + java.time.temporal.ChronoField.SECOND_OF_DAY + "'", chronoField87.equals(java.time.temporal.ChronoField.SECOND_OF_DAY));
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + temporalUnit90 + "' != '" + java.time.temporal.ChronoUnit.DAYS + "'", temporalUnit90.equals(java.time.temporal.ChronoUnit.DAYS));
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime91);
        org.junit.Assert.assertNotNull(localTime92);
        org.junit.Assert.assertNotNull(chronoLocalDate93);
        org.junit.Assert.assertNotNull(localDate94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + true + "'", boolean95 == true);
    }

    @Test
    public void test2480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2480");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 3, chronology1);
        org.joda.time.DateTime.Property property3 = dateTime2.dayOfYear();
        org.joda.time.Interval interval4 = property3.toInterval();
        org.joda.time.DateTimeField dateTimeField5 = property3.getField();
        java.util.Locale locale10 = new java.util.Locale("ParseCaseSensitive(false)(Value(Year,4,10,EXCEEDS_PAD)'-'Value(MonthOfYear,2)'-'Value(DayOfMonth,2))[Offset(+HH:MM:ss,'Z')]", "UNDERFLOW", "Years");
        java.lang.String str11 = dateTimeField5.getAsShortText((int) 'u', locale10);
        java.lang.String str12 = locale10.getDisplayVariant();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertEquals(locale10.toString(), "parsecasesensitive(false)(value(year,4,10,exceeds_pad)'-'value(monthofyear,2)'-'value(dayofmonth,2))[offset(+hh:mm:ss,'z')]_UNDERFLOW_Years");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "117" + "'", str11, "117");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Years" + "'", str12, "Years");
    }

    @Test
    public void test2481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2481");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        int int1 = localDate0.getDayOfWeek();
        org.joda.time.LocalDate.Property property2 = localDate0.dayOfMonth();
        org.joda.time.LocalDate localDate3 = property2.withMaximumValue();
        org.joda.time.DateTime dateTime4 = localDate3.toDateTimeAtMidnight();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate6 = localDate3.withDayOfWeek(679);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 679 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(dateTime4);
    }

    @Test
    public void test2482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2482");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Duration duration2 = new org.joda.time.Duration(readableInstant0, readableInstant1);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = duration2.toPeriodTo(readableInstant3, periodType4);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.Duration duration8 = new org.joda.time.Duration(readableInstant6, readableInstant7);
        long long9 = duration8.getMillis();
        boolean boolean10 = duration2.isShorterThan((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) 3, chronology12);
        org.joda.time.DateTime.Property property14 = dateTime13.dayOfYear();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight((java.lang.Object) dateTime13, chronology15);
        org.joda.time.MutableDateTime mutableDateTime17 = dateTime13.toMutableDateTime();
        mutableDateTime17.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime17.dayOfWeek();
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime17.year();
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime17.weekyear();
        boolean boolean23 = duration2.equals((java.lang.Object) mutableDateTime17);
        mutableDateTime17.addMonths((int) ' ');
        mutableDateTime17.add((long) (byte) 10);
        org.joda.time.Period period28 = org.joda.time.Period.ZERO;
        org.joda.time.Period period29 = period28.normalizedStandard();
        org.joda.time.Period period31 = period28.plusHours(2);
        java.time.chrono.IsoEra isoEra32 = java.time.chrono.IsoEra.CE;
        boolean boolean33 = period31.equals((java.lang.Object) isoEra32);
        int int34 = period31.getMinutes();
        mutableDateTime17.add((org.joda.time.ReadablePeriod) period31);
        java.util.TimeZone timeZone37 = null;
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forTimeZone(timeZone37);
        org.joda.time.DateMidnight dateMidnight39 = new org.joda.time.DateMidnight((long) 1970, dateTimeZone38);
        long long42 = dateTimeZone38.convertLocalToUTC((long) 3, false);
        long long45 = dateTimeZone38.convertLocalToUTC(0L, true);
        mutableDateTime17.setZoneRetainFields(dateTimeZone38);
        java.lang.String str47 = dateTimeZone38.toString();
        org.joda.time.chrono.EthiopicChronology ethiopicChronology48 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone38);
        org.joda.time.DateTimeField dateTimeField49 = ethiopicChronology48.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone50 = ethiopicChronology48.getZone();
        org.joda.time.DateTimeField dateTimeField51 = ethiopicChronology48.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField52 = ethiopicChronology48.minuteOfDay();
        org.joda.time.Chronology chronology53 = ethiopicChronology48.withUTC();
        org.joda.time.DateTimeZone dateTimeZone54 = ethiopicChronology48.getZone();
        org.joda.time.DateTimeField dateTimeField55 = ethiopicChronology48.weekyearOfCentury();
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertTrue("'" + isoEra32 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra32.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 3L + "'", long42 == 3L);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Etc/UTC" + "'", str47, "Etc/UTC");
        org.junit.Assert.assertNotNull(ethiopicChronology48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertNotNull(dateTimeField55);
    }

    @Test
    public void test2483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2483");
        org.joda.time.Weeks weeks1 = org.joda.time.Weeks.weeks(600);
        org.joda.time.DurationFieldType durationFieldType2 = weeks1.getFieldType();
        org.junit.Assert.assertNotNull(weeks1);
        org.junit.Assert.assertNotNull(durationFieldType2);
    }

    @Test
    public void test2484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2484");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((long) 0, chronology1);
        org.joda.time.LocalTime localTime4 = localTime2.minusMillis(2022);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.monthOfYear();
        boolean boolean6 = localTime4.isSupported(dateTimeFieldType5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.centuryOfEra();
        int int8 = localTime4.indexOf(dateTimeFieldType7);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.LocalTime localTime11 = new org.joda.time.LocalTime((long) 0, chronology10);
        org.joda.time.LocalTime localTime13 = localTime11.minusMillis(2022);
        org.joda.time.LocalTime localTime15 = localTime11.plusMillis((int) (byte) 0);
        org.joda.time.LocalTime localTime16 = localTime4.withFields((org.joda.time.ReadablePartial) localTime15);
        org.joda.time.LocalTime localTime18 = localTime4.plusSeconds(32769);
        int int19 = localTime4.getSecondOfMinute();
        int int20 = localTime4.getHourOfDay();
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 57 + "'", int19 == 57);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 23 + "'", int20 == 23);
    }

    @Test
    public void test2485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2485");
        java.io.IOException iOException1 = new java.io.IOException("");
    }

    @Test
    public void test2486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2486");
        // The following exception was thrown during execution in test generation
        try {
            java.time.LocalTime localTime1 = java.time.LocalTime.parse((java.lang.CharSequence) "Mo");
            org.junit.Assert.fail("Expected exception of type java.time.format.DateTimeParseException; message: Text 'Mo' could not be parsed at index 0");
        } catch (java.time.format.DateTimeParseException e) {
            // Expected exception.
        }
    }

    @Test
    public void test2487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2487");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.nio.LongBuffer longBuffer3 = java.nio.LongBuffer.allocate((int) (short) 0);
        java.nio.Buffer buffer4 = longBuffer3.mark();
        boolean boolean5 = properties1.containsKey((java.lang.Object) longBuffer3);
        java.nio.charset.Charset charset6 = java.nio.charset.Charset.defaultCharset();
        boolean boolean7 = charset6.canEncode();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) 3, chronology9);
        org.joda.time.DateTime.Property property11 = dateTime10.dayOfYear();
        java.lang.Object obj12 = properties1.getOrDefault((java.lang.Object) boolean7, (java.lang.Object) property11);
        properties1.clear();
        int int14 = properties1.size();
        java.io.PrintStream printStream16 = new java.io.PrintStream("subject:\n (GERMAN)");
        printStream16.write((int) '#');
        java.security.CodeSource codeSource20 = null;
        java.security.PermissionCollection permissionCollection21 = null;
        java.security.ProtectionDomain protectionDomain22 = new java.security.ProtectionDomain(codeSource20, permissionCollection21);
        java.lang.ClassLoader classLoader23 = protectionDomain22.getClassLoader();
        java.security.CodeSource codeSource24 = null;
        java.security.PermissionCollection permissionCollection25 = null;
        java.security.ProtectionDomain protectionDomain26 = new java.security.ProtectionDomain(codeSource24, permissionCollection25);
        java.security.Permission permission27 = null;
        boolean boolean28 = protectionDomain26.implies(permission27);
        java.security.CodeSource codeSource29 = null;
        java.security.PermissionCollection permissionCollection30 = null;
        java.security.ProtectionDomain protectionDomain31 = new java.security.ProtectionDomain(codeSource29, permissionCollection30);
        java.security.CodeSource codeSource32 = null;
        java.security.PermissionCollection permissionCollection33 = null;
        java.security.ProtectionDomain protectionDomain34 = new java.security.ProtectionDomain(codeSource32, permissionCollection33);
        java.security.ProtectionDomain[] protectionDomainArray35 = new java.security.ProtectionDomain[] { protectionDomain22, protectionDomain26, protectionDomain31, protectionDomain34 };
        java.security.AccessControlContext accessControlContext36 = new java.security.AccessControlContext(protectionDomainArray35);
        java.io.PrintStream printStream37 = printStream16.printf("Property[secondOfMinute]", (java.lang.Object[]) protectionDomainArray35);
        properties1.list(printStream37);
        java.util.Set<java.lang.Object> objSet39 = properties1.keySet();
        org.junit.Assert.assertNotNull(longBuffer3);
        org.junit.Assert.assertNotNull(buffer4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(charset6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(obj12);
        org.junit.Assert.assertEquals(obj12.toString(), "Property[dayOfYear]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj12), "Property[dayOfYear]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj12), "Property[dayOfYear]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertEquals(protectionDomain22.toString(), "ProtectionDomain  null\n null\n <no principals>\n null\n");
        org.junit.Assert.assertNull(classLoader23);
        org.junit.Assert.assertEquals(protectionDomain26.toString(), "ProtectionDomain  null\n null\n <no principals>\n null\n");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals(protectionDomain31.toString(), "ProtectionDomain  null\n null\n <no principals>\n null\n");
        org.junit.Assert.assertEquals(protectionDomain34.toString(), "ProtectionDomain  null\n null\n <no principals>\n null\n");
        org.junit.Assert.assertNotNull(protectionDomainArray35);
        org.junit.Assert.assertNotNull(printStream37);
        org.junit.Assert.assertNotNull(objSet39);
    }

    @Test
    public void test2488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2488");
        java.util.Locale locale1 = new java.util.Locale("hi!");
        boolean boolean2 = locale1.hasExtensions();
        java.time.format.DecimalStyle decimalStyle3 = java.time.format.DecimalStyle.of(locale1);
        java.util.Set<java.lang.String> strSet4 = locale1.getUnicodeLocaleKeys();
        java.util.Set<java.lang.String> strSet5 = java.time.ZoneId.getAvailableZoneIds();
        boolean boolean6 = strSet4.containsAll((java.util.Collection<java.lang.String>) strSet5);
        java.net.InetAddress inetAddress7 = java.net.InetAddress.getLocalHost();
        boolean boolean8 = inetAddress7.isMCOrgLocal();
        float[] floatArray11 = new float[] { (-1L), (byte) -1 };
        java.nio.FloatBuffer floatBuffer12 = java.nio.FloatBuffer.wrap(floatArray11);
        boolean boolean13 = inetAddress7.equals((java.lang.Object) floatBuffer12);
        float[] floatArray16 = new float[] { (-1L), (byte) -1 };
        java.nio.FloatBuffer floatBuffer17 = java.nio.FloatBuffer.wrap(floatArray16);
        java.nio.FloatBuffer floatBuffer18 = floatBuffer17.compact();
        java.nio.FloatBuffer floatBuffer19 = floatBuffer17.asReadOnlyBuffer();
        java.nio.ByteOrder byteOrder20 = floatBuffer17.order();
        boolean boolean21 = floatBuffer12.equals((java.lang.Object) floatBuffer17);
        int int22 = floatBuffer17.arrayOffset();
        boolean boolean23 = floatBuffer17.isDirect();
        float[] floatArray26 = new float[] { (-1L), (byte) -1 };
        java.nio.FloatBuffer floatBuffer27 = java.nio.FloatBuffer.wrap(floatArray26);
        java.nio.FloatBuffer floatBuffer28 = floatBuffer27.compact();
        java.nio.FloatBuffer floatBuffer29 = floatBuffer27.asReadOnlyBuffer();
        java.nio.ByteOrder byteOrder30 = floatBuffer27.order();
        java.nio.Buffer buffer31 = floatBuffer27.clear();
        float[] floatArray34 = new float[] { (-1L), (byte) -1 };
        java.nio.FloatBuffer floatBuffer35 = java.nio.FloatBuffer.wrap(floatArray34);
        float[] floatArray38 = new float[] { (-1L), (byte) -1 };
        java.nio.FloatBuffer floatBuffer39 = java.nio.FloatBuffer.wrap(floatArray38);
        java.nio.FloatBuffer floatBuffer40 = floatBuffer39.compact();
        boolean boolean41 = floatBuffer40.isDirect();
        int int42 = floatBuffer40.limit();
        java.nio.FloatBuffer floatBuffer43 = floatBuffer35.put(floatBuffer40);
        float[] floatArray46 = new float[] { (-1L), (byte) -1 };
        java.nio.FloatBuffer floatBuffer47 = java.nio.FloatBuffer.wrap(floatArray46);
        java.nio.FloatBuffer floatBuffer48 = floatBuffer47.compact();
        java.nio.FloatBuffer floatBuffer49 = floatBuffer47.asReadOnlyBuffer();
        java.nio.ByteOrder byteOrder50 = floatBuffer47.order();
        java.nio.FloatBuffer floatBuffer51 = floatBuffer47.asReadOnlyBuffer();
        java.nio.FloatBuffer floatBuffer52 = floatBuffer35.put(floatBuffer51);
        java.nio.FloatBuffer[] floatBufferArray53 = new java.nio.FloatBuffer[] { floatBuffer17, floatBuffer27, floatBuffer52 };
        java.nio.FloatBuffer[] floatBufferArray54 = strSet4.toArray(floatBufferArray53);
        org.junit.Assert.assertEquals(locale1.toString(), "hi!");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(decimalStyle3);
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(inetAddress7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(floatArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray11), "[-1.0, -1.0]");
        org.junit.Assert.assertNotNull(floatBuffer12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(floatArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray16), "[-1.0, -1.0]");
        org.junit.Assert.assertNotNull(floatBuffer17);
        org.junit.Assert.assertNotNull(floatBuffer18);
        org.junit.Assert.assertNotNull(floatBuffer19);
        org.junit.Assert.assertNotNull(byteOrder20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(floatArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray26), "[-1.0, -1.0]");
        org.junit.Assert.assertNotNull(floatBuffer27);
        org.junit.Assert.assertNotNull(floatBuffer28);
        org.junit.Assert.assertNotNull(floatBuffer29);
        org.junit.Assert.assertNotNull(byteOrder30);
        org.junit.Assert.assertNotNull(buffer31);
        org.junit.Assert.assertNotNull(floatArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray34), "[-1.0, -1.0]");
        org.junit.Assert.assertNotNull(floatBuffer35);
        org.junit.Assert.assertNotNull(floatArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray38), "[-1.0, -1.0]");
        org.junit.Assert.assertNotNull(floatBuffer39);
        org.junit.Assert.assertNotNull(floatBuffer40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2 + "'", int42 == 2);
        org.junit.Assert.assertNotNull(floatBuffer43);
        org.junit.Assert.assertNotNull(floatArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray46), "[-1.0, -1.0]");
        org.junit.Assert.assertNotNull(floatBuffer47);
        org.junit.Assert.assertNotNull(floatBuffer48);
        org.junit.Assert.assertNotNull(floatBuffer49);
        org.junit.Assert.assertNotNull(byteOrder50);
        org.junit.Assert.assertNotNull(floatBuffer51);
        org.junit.Assert.assertNotNull(floatBuffer52);
        org.junit.Assert.assertNotNull(floatBufferArray53);
        org.junit.Assert.assertNotNull(floatBufferArray54);
    }

    @Test
    public void test2489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2489");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.time.LocalTime localTime6 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime7 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime6);
        java.time.LocalTime localTime12 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime13 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime12);
        java.time.temporal.ChronoField chronoField14 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime16 = localTime12.with((java.time.temporal.TemporalField) chronoField14, (long) (short) 1);
        long long17 = localTime6.getLong((java.time.temporal.TemporalField) chronoField14);
        java.time.LocalTime localTime19 = localTime6.withSecond((int) (short) 1);
        java.lang.Object obj21 = properties1.put((java.lang.Object) localTime19, (java.lang.Object) "117");
        boolean boolean23 = properties1.containsValue((java.lang.Object) 6);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((long) 3, chronology25);
        org.joda.time.DateTime.Property property27 = dateTime26.dayOfYear();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateMidnight dateMidnight29 = new org.joda.time.DateMidnight((java.lang.Object) dateTime26, chronology28);
        org.joda.time.MutableDateTime mutableDateTime30 = dateTime26.toMutableDateTime();
        mutableDateTime30.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property33 = mutableDateTime30.millisOfDay();
        org.joda.time.PeriodType periodType34 = org.joda.time.PeriodType.years();
        org.joda.time.DurationFieldType durationFieldType35 = org.joda.time.DurationFieldType.halfdays();
        int int36 = periodType34.indexOf(durationFieldType35);
        mutableDateTime30.add(durationFieldType35, (int) 'a');
        org.joda.time.MutableDateTime.Property property39 = mutableDateTime30.millisOfSecond();
        org.joda.time.MutableDateTime mutableDateTime40 = property39.roundHalfFloor();
        boolean boolean41 = properties1.containsValue((java.lang.Object) property39);
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        org.joda.time.DurationFieldType durationFieldType43 = dateTimeFieldType42.getDurationType();
        java.util.stream.IntStream intStream46 = java.util.stream.IntStream.rangeClosed(100, (int) '4');
        java.util.stream.IntStream intStream48 = intStream46.skip((long) 256);
        java.util.PrimitiveIterator.OfInt ofInt49 = intStream48.iterator();
        java.util.LongSummaryStatistics longSummaryStatistics50 = new java.util.LongSummaryStatistics();
        longSummaryStatistics50.accept(3);
        long long53 = longSummaryStatistics50.getMax();
        java.util.LongSummaryStatistics longSummaryStatistics54 = new java.util.LongSummaryStatistics();
        longSummaryStatistics54.accept(3);
        java.util.function.LongConsumer longConsumer57 = longSummaryStatistics50.andThen((java.util.function.LongConsumer) longSummaryStatistics54);
        java.util.LongSummaryStatistics longSummaryStatistics58 = new java.util.LongSummaryStatistics();
        longSummaryStatistics58.accept(3);
        long long61 = longSummaryStatistics58.getMax();
        double double62 = longSummaryStatistics58.getAverage();
        longSummaryStatistics58.accept(6);
        java.util.function.LongConsumer longConsumer65 = longSummaryStatistics50.andThen((java.util.function.LongConsumer) longSummaryStatistics58);
        double double66 = longSummaryStatistics50.getAverage();
        java.util.LongSummaryStatistics longSummaryStatistics67 = new java.util.LongSummaryStatistics();
        longSummaryStatistics67.accept(3);
        java.util.function.LongConsumer longConsumer70 = longSummaryStatistics50.andThen((java.util.function.LongConsumer) longSummaryStatistics67);
        long long71 = longSummaryStatistics67.getSum();
        ofInt49.forEachRemaining((java.util.function.IntConsumer) longSummaryStatistics67);
        boolean boolean73 = ofInt49.hasNext();
        java.lang.Object obj74 = properties1.putIfAbsent((java.lang.Object) durationFieldType43, (java.lang.Object) ofInt49);
        java.util.LongSummaryStatistics longSummaryStatistics75 = new java.util.LongSummaryStatistics();
        ofInt49.forEachRemaining((java.util.function.IntConsumer) longSummaryStatistics75);
        java.util.IntSummaryStatistics intSummaryStatistics77 = new java.util.IntSummaryStatistics();
        ofInt49.forEachRemaining((java.util.function.IntConsumer) intSummaryStatistics77);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertTrue("'" + chronoField14 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField14.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 3601000000001L + "'", long17 == 3601000000001L);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(mutableDateTime30);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(periodType34);
        org.junit.Assert.assertNotNull(durationFieldType35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(mutableDateTime40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType42);
        org.junit.Assert.assertNotNull(durationFieldType43);
        org.junit.Assert.assertNotNull(intStream46);
        org.junit.Assert.assertNotNull(intStream48);
        org.junit.Assert.assertNotNull(ofInt49);
        org.junit.Assert.assertEquals(longSummaryStatistics50.toString(), "LongSummaryStatistics{count=1, sum=3, min=3, average=3.000000, max=3}");
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 3L + "'", long53 == 3L);
        org.junit.Assert.assertEquals(longSummaryStatistics54.toString(), "LongSummaryStatistics{count=1, sum=3, min=3, average=3.000000, max=3}");
        org.junit.Assert.assertNotNull(longConsumer57);
        org.junit.Assert.assertEquals(longSummaryStatistics58.toString(), "LongSummaryStatistics{count=2, sum=9, min=3, average=4.500000, max=6}");
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 3L + "'", long61 == 3L);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 3.0d + "'", double62 == 3.0d);
        org.junit.Assert.assertNotNull(longConsumer65);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 3.0d + "'", double66 == 3.0d);
        org.junit.Assert.assertEquals(longSummaryStatistics67.toString(), "LongSummaryStatistics{count=1, sum=3, min=3, average=3.000000, max=3}");
        org.junit.Assert.assertNotNull(longConsumer70);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 3L + "'", long71 == 3L);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNull(obj74);
        org.junit.Assert.assertEquals(longSummaryStatistics75.toString(), "LongSummaryStatistics{count=0, sum=0, min=9223372036854775807, average=0.000000, max=-9223372036854775808}");
        org.junit.Assert.assertEquals(intSummaryStatistics77.toString(), "IntSummaryStatistics{count=0, sum=0, min=2147483647, average=0.000000, max=-2147483648}");
    }

    @Test
    public void test2490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2490");
        org.joda.time.YearMonthDay yearMonthDay1 = new org.joda.time.YearMonthDay(34451155400000L);
        int int2 = yearMonthDay1.getMonthOfYear();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 9 + "'", int2 == 9);
    }

    @Test
    public void test2491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2491");
        java.time.temporal.ChronoField chronoField0 = java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM;
        boolean boolean1 = chronoField0.isDateBased();
        org.junit.Assert.assertTrue("'" + chronoField0 + "' != '" + java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM + "'", chronoField0.equals(java.time.temporal.ChronoField.CLOCK_HOUR_OF_AMPM));
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test2492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2492");
        org.joda.time.tz.Provider provider0 = org.joda.time.DateTimeZone.getProvider();
        org.joda.time.DateTimeZone.setProvider(provider0);
        org.joda.time.DateTimeZone dateTimeZone3 = provider0.getZone("2022-02-21T09:34:42.500Z");
        org.junit.Assert.assertNotNull(provider0);
        org.junit.Assert.assertNull(dateTimeZone3);
    }

    @Test
    public void test2493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2493");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Hours hours1 = org.joda.time.Hours.parseHours("2022-02-21T09:34:12.478Z");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"2022-02-21T09:34:12.478Z\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test2494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2494");
        java.util.stream.Stream<java.lang.Object> objStream0 = java.util.stream.Stream.empty();
        java.util.stream.Stream<java.lang.Object> objStream1 = objStream0.parallel();
        java.util.stream.Stream<java.lang.Object> objStream2 = objStream0.unordered();
        java.lang.Object[] objArray3 = objStream0.toArray();
        java.util.stream.Stream<java.lang.Object> objStream4 = objStream0.unordered();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Optional<java.lang.Object> objOptional5 = objStream0.findFirst();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: stream has already been operated upon or closed");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objStream0);
        org.junit.Assert.assertNotNull(objStream1);
        org.junit.Assert.assertNotNull(objStream2);
        org.junit.Assert.assertNotNull(objArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray3), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray3), "[]");
        org.junit.Assert.assertNotNull(objStream4);
    }

    @Test
    public void test2495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2495");
        // The following exception was thrown during execution in test generation
        try {
            java.time.OffsetDateTime offsetDateTime1 = java.time.OffsetDateTime.parse((java.lang.CharSequence) "8");
            org.junit.Assert.fail("Expected exception of type java.time.format.DateTimeParseException; message: Text '8' could not be parsed at index 0");
        } catch (java.time.format.DateTimeParseException e) {
            // Expected exception.
        }
    }

    @Test
    public void test2496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2496");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Duration duration2 = new org.joda.time.Duration(readableInstant0, readableInstant1);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = duration2.toPeriodTo(readableInstant3, periodType4);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.Duration duration8 = new org.joda.time.Duration(readableInstant6, readableInstant7);
        long long9 = duration8.getMillis();
        boolean boolean10 = duration2.isShorterThan((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) 3, chronology12);
        org.joda.time.DateTime.Property property14 = dateTime13.dayOfYear();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight((java.lang.Object) dateTime13, chronology15);
        org.joda.time.MutableDateTime mutableDateTime17 = dateTime13.toMutableDateTime();
        mutableDateTime17.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime17.dayOfWeek();
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime17.year();
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime17.weekyear();
        boolean boolean23 = duration2.equals((java.lang.Object) mutableDateTime17);
        mutableDateTime17.addMonths((int) ' ');
        mutableDateTime17.add((long) (byte) 10);
        org.joda.time.Period period28 = org.joda.time.Period.ZERO;
        org.joda.time.Period period29 = period28.normalizedStandard();
        org.joda.time.Period period31 = period28.plusHours(2);
        java.time.chrono.IsoEra isoEra32 = java.time.chrono.IsoEra.CE;
        boolean boolean33 = period31.equals((java.lang.Object) isoEra32);
        int int34 = period31.getMinutes();
        mutableDateTime17.add((org.joda.time.ReadablePeriod) period31);
        java.util.TimeZone timeZone37 = null;
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forTimeZone(timeZone37);
        org.joda.time.DateMidnight dateMidnight39 = new org.joda.time.DateMidnight((long) 1970, dateTimeZone38);
        long long42 = dateTimeZone38.convertLocalToUTC((long) 3, false);
        long long45 = dateTimeZone38.convertLocalToUTC(0L, true);
        mutableDateTime17.setZoneRetainFields(dateTimeZone38);
        java.lang.String str47 = dateTimeZone38.toString();
        org.joda.time.chrono.EthiopicChronology ethiopicChronology48 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone38);
        org.joda.time.DateTimeField dateTimeField49 = ethiopicChronology48.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone50 = ethiopicChronology48.getZone();
        org.joda.time.DateTimeField dateTimeField51 = ethiopicChronology48.era();
        org.joda.time.DateTimeField dateTimeField52 = ethiopicChronology48.secondOfDay();
        org.joda.time.DateTimeField dateTimeField53 = ethiopicChronology48.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField54 = ethiopicChronology48.halfdayOfDay();
        org.joda.time.DurationField durationField55 = ethiopicChronology48.weekyears();
        org.joda.time.DateTimeField dateTimeField56 = ethiopicChronology48.yearOfEra();
        org.joda.time.DateTimeField dateTimeField57 = ethiopicChronology48.centuryOfEra();
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertTrue("'" + isoEra32 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra32.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 3L + "'", long42 == 3L);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Etc/UTC" + "'", str47, "Etc/UTC");
        org.junit.Assert.assertNotNull(ethiopicChronology48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(durationField55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(dateTimeField57);
    }

    @Test
    public void test2497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2497");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((long) 0, chronology1);
        org.joda.time.Chronology chronology3 = localTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField4 = chronology3.weekyearOfCentury();
        org.joda.time.DurationField durationField5 = chronology3.weekyears();
        long long8 = durationField5.getValueAsLong((long) (short) 10, (long) 32769);
        // The following exception was thrown during execution in test generation
        try {
            long long10 = durationField5.getMillis(8380800010L);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows a long: 8380800010 * 31556952000");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
    }

    @Test
    public void test2498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2498");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withYearOfCentury((int) 'a');
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.plusSeconds(6);
        org.joda.time.DateTime dateTime6 = localDateTime3.toDateTime();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime3.minusMillis((int) '/');
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minusMonths(100);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withDayOfYear(17);
        int int13 = localDateTime12.getEra();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
    }

    @Test
    public void test2499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2499");
        java.time.Instant instant0 = java.time.Instant.now();
        java.time.Instant instant1 = java.time.Instant.now();
        boolean boolean2 = instant0.isAfter(instant1);
        java.time.LocalDate localDate4 = java.time.LocalDate.ofEpochDay((long) ' ');
        int int5 = localDate4.getMonthValue();
        org.joda.time.Period period6 = org.joda.time.Period.ZERO;
        org.joda.time.Period period7 = period6.normalizedStandard();
        org.joda.time.Period period9 = period6.plusHours(2);
        java.time.chrono.IsoEra isoEra10 = java.time.chrono.IsoEra.CE;
        boolean boolean11 = period9.equals((java.lang.Object) isoEra10);
        java.time.LocalTime localTime16 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime17 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime16);
        java.time.LocalTime localTime22 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime23 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime22);
        java.time.temporal.ChronoField chronoField24 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime26 = localTime22.with((java.time.temporal.TemporalField) chronoField24, (long) (short) 1);
        long long27 = localTime16.getLong((java.time.temporal.TemporalField) chronoField24);
        boolean boolean28 = isoEra10.isSupported((java.time.temporal.TemporalField) chronoField24);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery29 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period30 = isoEra10.query(periodTemporalQuery29);
        boolean boolean31 = period30.isNegative();
        java.time.Period period33 = period30.plusDays((long) ' ');
        java.time.temporal.ChronoField chronoField34 = java.time.temporal.ChronoField.SECOND_OF_DAY;
        boolean boolean35 = period30.equals((java.lang.Object) chronoField34);
        boolean boolean36 = localDate4.isSupported((java.time.temporal.TemporalField) chronoField34);
        java.time.temporal.TemporalUnit temporalUnit37 = chronoField34.getRangeUnit();
        java.time.Instant instant38 = instant1.truncatedTo(temporalUnit37);
        java.time.ZoneOffset zoneOffset41 = java.time.ZoneOffset.ofHoursMinutes(1, 10);
        java.time.LocalDate localDate42 = java.time.LocalDate.now((java.time.ZoneId) zoneOffset41);
        java.time.ZonedDateTime zonedDateTime43 = java.time.ZonedDateTime.ofInstant(instant38, (java.time.ZoneId) zoneOffset41);
        java.util.GregorianCalendar gregorianCalendar49 = new java.util.GregorianCalendar(12, 4096, 7, (-1), (int) (short) 10);
        int int50 = gregorianCalendar49.getWeeksInWeekYear();
        java.lang.String str51 = gregorianCalendar49.getCalendarType();
        java.time.ZonedDateTime zonedDateTime52 = gregorianCalendar49.toZonedDateTime();
        java.time.ZonedDateTime zonedDateTime54 = zonedDateTime52.minusMonths((long) 10);
        java.time.chrono.ChronoZonedDateTime<java.time.LocalDate> localDateChronoZonedDateTime55 = zonedDateTime52.withEarlierOffsetAtOverlap();
        java.time.ZonedDateTime zonedDateTime57 = zonedDateTime52.minusMonths((long) 4200);
        java.time.ZonedDateTime zonedDateTime59 = zonedDateTime57.plusNanos(8L);
        org.joda.time.Period period60 = org.joda.time.Period.ZERO;
        org.joda.time.Period period61 = period60.normalizedStandard();
        org.joda.time.Period period63 = period60.plusHours(2);
        java.time.chrono.IsoEra isoEra64 = java.time.chrono.IsoEra.CE;
        boolean boolean65 = period63.equals((java.lang.Object) isoEra64);
        java.time.LocalTime localTime70 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime71 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime70);
        java.time.LocalTime localTime76 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime77 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime76);
        java.time.temporal.ChronoField chronoField78 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime80 = localTime76.with((java.time.temporal.TemporalField) chronoField78, (long) (short) 1);
        long long81 = localTime70.getLong((java.time.temporal.TemporalField) chronoField78);
        boolean boolean82 = isoEra64.isSupported((java.time.temporal.TemporalField) chronoField78);
        boolean boolean83 = zonedDateTime57.isSupported((java.time.temporal.TemporalField) chronoField78);
        java.time.temporal.ValueRange valueRange84 = zonedDateTime43.range((java.time.temporal.TemporalField) chronoField78);
        java.time.ZoneOffset zoneOffset86 = java.time.ZoneOffset.ofHours(9);
        java.lang.String str87 = zoneOffset86.toString();
        java.time.ZonedDateTime zonedDateTime88 = zonedDateTime43.withZoneSameInstant((java.time.ZoneId) zoneOffset86);
        java.time.ZonedDateTime zonedDateTime90 = zonedDateTime43.plusDays(0L);
        org.junit.Assert.assertNotNull(instant0);
        org.junit.Assert.assertNotNull(instant1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2 + "'", int5 == 2);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertTrue("'" + isoEra10 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra10.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertTrue("'" + chronoField24 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField24.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime26);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 3601000000001L + "'", long27 == 3601000000001L);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(periodTemporalQuery29);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertTrue("'" + chronoField34 + "' != '" + java.time.temporal.ChronoField.SECOND_OF_DAY + "'", chronoField34.equals(java.time.temporal.ChronoField.SECOND_OF_DAY));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + temporalUnit37 + "' != '" + java.time.temporal.ChronoUnit.DAYS + "'", temporalUnit37.equals(java.time.temporal.ChronoUnit.DAYS));
        org.junit.Assert.assertNotNull(instant38);
        org.junit.Assert.assertNotNull(zoneOffset41);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertNotNull(zonedDateTime43);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 52 + "'", int50 == 52);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "gregory" + "'", str51, "gregory");
        org.junit.Assert.assertNotNull(zonedDateTime52);
        org.junit.Assert.assertNotNull(zonedDateTime54);
        org.junit.Assert.assertNotNull(localDateChronoZonedDateTime55);
        org.junit.Assert.assertNotNull(zonedDateTime57);
        org.junit.Assert.assertNotNull(zonedDateTime59);
        org.junit.Assert.assertNotNull(period60);
        org.junit.Assert.assertNotNull(period61);
        org.junit.Assert.assertNotNull(period63);
        org.junit.Assert.assertTrue("'" + isoEra64 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra64.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(localTime70);
        org.junit.Assert.assertNotNull(localTime71);
        org.junit.Assert.assertNotNull(localTime76);
        org.junit.Assert.assertNotNull(localTime77);
        org.junit.Assert.assertTrue("'" + chronoField78 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField78.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime80);
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + 3601000000001L + "'", long81 == 3601000000001L);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertNotNull(valueRange84);
        org.junit.Assert.assertNotNull(zoneOffset86);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "+09:00" + "'", str87, "+09:00");
        org.junit.Assert.assertNotNull(zonedDateTime88);
        org.junit.Assert.assertNotNull(zonedDateTime90);
    }

    @Test
    public void test2500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2500");
        java.time.format.DateTimeFormatter dateTimeFormatter0 = java.time.format.DateTimeFormatter.ISO_DATE;
        java.text.Format format1 = dateTimeFormatter0.toFormat();
        java.text.Format format2 = dateTimeFormatter0.toFormat();
        java.time.ZoneId zoneId3 = null;
        java.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter0.withZone(zoneId3);
        java.text.Format format5 = dateTimeFormatter0.toFormat();
        java.time.format.DateTimeFormatter dateTimeFormatter7 = java.time.format.DateTimeFormatter.ISO_DATE;
        java.text.Format format8 = dateTimeFormatter7.toFormat();
        java.text.Format format9 = dateTimeFormatter7.toFormat();
        java.time.ZoneId zoneId10 = null;
        java.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter7.withZone(zoneId10);
        java.text.Format format12 = dateTimeFormatter7.toFormat();
        java.text.ParsePosition parsePosition15 = new java.text.ParsePosition((-624));
        java.lang.Object obj16 = format12.parseObject("2022-02-21T09:34:42.358Z", parsePosition15);
        java.time.temporal.TemporalAccessor temporalAccessor17 = dateTimeFormatter0.parseUnresolved((java.lang.CharSequence) "AD", parsePosition15);
        int int18 = parsePosition15.getIndex();
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(format1);
        org.junit.Assert.assertNotNull(format2);
        org.junit.Assert.assertNotNull(dateTimeFormatter4);
        org.junit.Assert.assertNotNull(format5);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertNotNull(format8);
        org.junit.Assert.assertNotNull(format9);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertNotNull(format12);
        org.junit.Assert.assertNull(obj16);
        org.junit.Assert.assertNull(temporalAccessor17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-624) + "'", int18 == (-624));
    }
}

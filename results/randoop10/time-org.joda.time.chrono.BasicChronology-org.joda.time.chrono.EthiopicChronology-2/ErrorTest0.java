import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class ErrorTest0 {

    public static boolean debug = false;

    @Test
    public void test01() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test01");
        org.joda.time.MutablePeriod mutablePeriod0 = new org.joda.time.MutablePeriod();
        org.joda.time.Period period1 = org.joda.time.Period.ZERO;
        org.joda.time.Period period2 = period1.normalizedStandard();
        org.joda.time.Period period4 = period1.plusHours(2);
        org.joda.time.DurationFieldType durationFieldType5 = org.joda.time.DurationFieldType.hours();
        int int6 = period1.indexOf(durationFieldType5);
        mutablePeriod0.add(durationFieldType5, (int) (short) -1);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.LocalTime localTime12 = new org.joda.time.LocalTime((long) 0, chronology11);
        org.joda.time.Chronology chronology13 = localTime12.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.weekyearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime15 = org.joda.time.MutableDateTime.now(chronology13);
        org.joda.time.DateTimeField dateTimeField16 = chronology13.monthOfYear();
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) 1, chronology13);
        org.joda.time.DurationField durationField18 = durationFieldType5.getField(chronology13);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.LocalTime localTime21 = new org.joda.time.LocalTime((long) 0, chronology20);
        org.joda.time.Chronology chronology22 = localTime21.getChronology();
        org.joda.time.DateTimeField dateTimeField23 = chronology22.weekyearOfCentury();
        org.joda.time.DurationField durationField24 = chronology22.weekyears();
        org.joda.time.DurationField durationField25 = chronology22.seconds();
        org.joda.time.Chronology chronology26 = chronology22.withUTC();
        org.joda.time.DateTimeField dateTimeField27 = chronology22.hourOfDay();
        org.joda.time.DurationField durationField28 = chronology22.years();
        int int29 = durationField18.compareTo(durationField28);
        java.lang.String str30 = durationField18.toString();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on durationField24 and durationField28", (durationField24.compareTo(durationField28) == 0) == durationField24.equals(durationField28));
    }

    @Test
    public void test02() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test02");
        java.util.TimeZone timeZone1 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight((long) 12, dateTimeZone2);
        org.joda.time.Instant instant4 = dateMidnight3.toInstant();
        org.joda.time.DateMidnight.Property property5 = dateMidnight3.centuryOfEra();
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.Duration duration8 = new org.joda.time.Duration(readableInstant6, readableInstant7);
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.PeriodType periodType10 = null;
        org.joda.time.Period period11 = duration8.toPeriodTo(readableInstant9, periodType10);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.Duration duration14 = new org.joda.time.Duration(readableInstant12, readableInstant13);
        long long15 = duration14.getMillis();
        boolean boolean16 = duration8.isShorterThan((org.joda.time.ReadableDuration) duration14);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) 3, chronology18);
        org.joda.time.DateTime.Property property20 = dateTime19.dayOfYear();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight((java.lang.Object) dateTime19, chronology21);
        org.joda.time.MutableDateTime mutableDateTime23 = dateTime19.toMutableDateTime();
        mutableDateTime23.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property26 = mutableDateTime23.dayOfWeek();
        org.joda.time.MutableDateTime.Property property27 = mutableDateTime23.year();
        org.joda.time.MutableDateTime.Property property28 = mutableDateTime23.weekyear();
        boolean boolean29 = duration8.equals((java.lang.Object) mutableDateTime23);
        mutableDateTime23.addMonths((int) ' ');
        mutableDateTime23.add((long) (byte) 10);
        org.joda.time.Period period34 = org.joda.time.Period.ZERO;
        org.joda.time.Period period35 = period34.normalizedStandard();
        org.joda.time.Period period37 = period34.plusHours(2);
        java.time.chrono.IsoEra isoEra38 = java.time.chrono.IsoEra.CE;
        boolean boolean39 = period37.equals((java.lang.Object) isoEra38);
        int int40 = period37.getMinutes();
        mutableDateTime23.add((org.joda.time.ReadablePeriod) period37);
        java.util.TimeZone timeZone43 = null;
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forTimeZone(timeZone43);
        org.joda.time.DateMidnight dateMidnight45 = new org.joda.time.DateMidnight((long) 1970, dateTimeZone44);
        long long48 = dateTimeZone44.convertLocalToUTC((long) 3, false);
        long long51 = dateTimeZone44.convertLocalToUTC(0L, true);
        mutableDateTime23.setZoneRetainFields(dateTimeZone44);
        java.lang.String str53 = dateTimeZone44.toString();
        org.joda.time.chrono.EthiopicChronology ethiopicChronology54 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone44);
        org.joda.time.DateTimeField dateTimeField55 = ethiopicChronology54.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone56 = ethiopicChronology54.getZone();
        org.joda.time.DateTimeField dateTimeField57 = ethiopicChronology54.era();
        org.joda.time.DateTimeField dateTimeField58 = ethiopicChronology54.secondOfDay();
        org.joda.time.DateTimeField dateTimeField59 = ethiopicChronology54.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField60 = ethiopicChronology54.halfdayOfDay();
        org.joda.time.DurationField durationField61 = ethiopicChronology54.weekyears();
        org.joda.time.DateTimeField dateTimeField62 = ethiopicChronology54.hourOfHalfday();
        org.joda.time.DateTime dateTime63 = dateMidnight3.toDateTime((org.joda.time.Chronology) ethiopicChronology54);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant4 and dateMidnight22", (instant4.compareTo(dateMidnight22) == 0) == instant4.equals(dateMidnight22));
    }

    @Test
    public void test03() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test03");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((long) 0, chronology1);
        org.joda.time.Chronology chronology3 = localTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField4 = chronology3.weekyearOfCentury();
        org.joda.time.DurationField durationField5 = chronology3.weekyears();
        org.joda.time.DurationField durationField6 = chronology3.seconds();
        org.joda.time.Chronology chronology7 = chronology3.withUTC();
        org.joda.time.DateTimeField dateTimeField8 = chronology3.hourOfDay();
        org.joda.time.DurationField durationField9 = chronology3.years();
        org.joda.time.LocalDate localDate10 = org.joda.time.LocalDate.now(chronology3);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on durationField5 and durationField9", (durationField5.compareTo(durationField9) == 0) == durationField5.equals(durationField9));
    }

    @Test
    public void test04() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test04");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Duration duration2 = new org.joda.time.Duration(readableInstant0, readableInstant1);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = duration2.toPeriodTo(readableInstant3, periodType4);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.Duration duration8 = new org.joda.time.Duration(readableInstant6, readableInstant7);
        long long9 = duration8.getMillis();
        boolean boolean10 = duration2.isShorterThan((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) 3, chronology12);
        org.joda.time.DateTime.Property property14 = dateTime13.dayOfYear();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight((java.lang.Object) dateTime13, chronology15);
        org.joda.time.MutableDateTime mutableDateTime17 = dateTime13.toMutableDateTime();
        mutableDateTime17.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime17.dayOfWeek();
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime17.year();
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime17.weekyear();
        boolean boolean23 = duration2.equals((java.lang.Object) mutableDateTime17);
        mutableDateTime17.addMonths((int) ' ');
        mutableDateTime17.add((long) (byte) 10);
        org.joda.time.Period period28 = org.joda.time.Period.ZERO;
        org.joda.time.Period period29 = period28.normalizedStandard();
        org.joda.time.Period period31 = period28.plusHours(2);
        java.time.chrono.IsoEra isoEra32 = java.time.chrono.IsoEra.CE;
        boolean boolean33 = period31.equals((java.lang.Object) isoEra32);
        int int34 = period31.getMinutes();
        mutableDateTime17.add((org.joda.time.ReadablePeriod) period31);
        java.util.TimeZone timeZone37 = null;
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forTimeZone(timeZone37);
        org.joda.time.DateMidnight dateMidnight39 = new org.joda.time.DateMidnight((long) 1970, dateTimeZone38);
        long long42 = dateTimeZone38.convertLocalToUTC((long) 3, false);
        long long45 = dateTimeZone38.convertLocalToUTC(0L, true);
        mutableDateTime17.setZoneRetainFields(dateTimeZone38);
        java.lang.String str47 = dateTimeZone38.toString();
        org.joda.time.chrono.EthiopicChronology ethiopicChronology48 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone38);
        org.joda.time.DateTimeField dateTimeField49 = ethiopicChronology48.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone50 = ethiopicChronology48.getZone();
        org.joda.time.DateTimeField dateTimeField51 = ethiopicChronology48.era();
        org.joda.time.DurationField durationField52 = ethiopicChronology48.eras();
        org.joda.time.DateTimeField dateTimeField53 = ethiopicChronology48.halfdayOfDay();
        org.joda.time.DurationField durationField54 = ethiopicChronology48.seconds();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField52, durationField54, and durationField52", !(durationField52.compareTo(durationField54) == 0) || (Math.signum(durationField52.compareTo(durationField52)) == Math.signum(durationField54.compareTo(durationField52))));
    }

    @Test
    public void test05() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test05");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Duration duration2 = new org.joda.time.Duration(readableInstant0, readableInstant1);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = duration2.toPeriodTo(readableInstant3, periodType4);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.Duration duration8 = new org.joda.time.Duration(readableInstant6, readableInstant7);
        long long9 = duration8.getMillis();
        boolean boolean10 = duration2.isShorterThan((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) 3, chronology12);
        org.joda.time.DateTime.Property property14 = dateTime13.dayOfYear();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight((java.lang.Object) dateTime13, chronology15);
        org.joda.time.MutableDateTime mutableDateTime17 = dateTime13.toMutableDateTime();
        mutableDateTime17.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime17.dayOfWeek();
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime17.year();
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime17.weekyear();
        boolean boolean23 = duration2.equals((java.lang.Object) mutableDateTime17);
        mutableDateTime17.addMonths((int) ' ');
        mutableDateTime17.add((long) (byte) 10);
        org.joda.time.Period period28 = org.joda.time.Period.ZERO;
        org.joda.time.Period period29 = period28.normalizedStandard();
        org.joda.time.Period period31 = period28.plusHours(2);
        java.time.chrono.IsoEra isoEra32 = java.time.chrono.IsoEra.CE;
        boolean boolean33 = period31.equals((java.lang.Object) isoEra32);
        int int34 = period31.getMinutes();
        mutableDateTime17.add((org.joda.time.ReadablePeriod) period31);
        java.util.TimeZone timeZone37 = null;
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forTimeZone(timeZone37);
        org.joda.time.DateMidnight dateMidnight39 = new org.joda.time.DateMidnight((long) 1970, dateTimeZone38);
        long long42 = dateTimeZone38.convertLocalToUTC((long) 3, false);
        long long45 = dateTimeZone38.convertLocalToUTC(0L, true);
        mutableDateTime17.setZoneRetainFields(dateTimeZone38);
        java.lang.String str47 = dateTimeZone38.toString();
        org.joda.time.chrono.EthiopicChronology ethiopicChronology48 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone38);
        org.joda.time.DateTimeField dateTimeField49 = ethiopicChronology48.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone50 = ethiopicChronology48.getZone();
        org.joda.time.DateTimeField dateTimeField51 = ethiopicChronology48.era();
        org.joda.time.DurationField durationField52 = ethiopicChronology48.eras();
        org.joda.time.DateTimeField dateTimeField53 = ethiopicChronology48.halfdayOfDay();
        org.joda.time.DurationField durationField54 = ethiopicChronology48.halfdays();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField52, durationField54, and durationField52", !(durationField52.compareTo(durationField54) == 0) || (Math.signum(durationField52.compareTo(durationField52)) == Math.signum(durationField54.compareTo(durationField52))));
    }

    @Test
    public void test06() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test06");
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.Duration duration3 = new org.joda.time.Duration(readableInstant1, readableInstant2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.PeriodType periodType5 = null;
        org.joda.time.Period period6 = duration3.toPeriodTo(readableInstant4, periodType5);
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.Duration duration9 = new org.joda.time.Duration(readableInstant7, readableInstant8);
        long long10 = duration9.getMillis();
        boolean boolean11 = duration3.isShorterThan((org.joda.time.ReadableDuration) duration9);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) 3, chronology13);
        org.joda.time.DateTime.Property property15 = dateTime14.dayOfYear();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight((java.lang.Object) dateTime14, chronology16);
        org.joda.time.MutableDateTime mutableDateTime18 = dateTime14.toMutableDateTime();
        mutableDateTime18.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime18.dayOfWeek();
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime18.year();
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime18.weekyear();
        boolean boolean24 = duration3.equals((java.lang.Object) mutableDateTime18);
        mutableDateTime18.addMonths((int) ' ');
        mutableDateTime18.add((long) (byte) 10);
        org.joda.time.Period period29 = org.joda.time.Period.ZERO;
        org.joda.time.Period period30 = period29.normalizedStandard();
        org.joda.time.Period period32 = period29.plusHours(2);
        java.time.chrono.IsoEra isoEra33 = java.time.chrono.IsoEra.CE;
        boolean boolean34 = period32.equals((java.lang.Object) isoEra33);
        int int35 = period32.getMinutes();
        mutableDateTime18.add((org.joda.time.ReadablePeriod) period32);
        java.util.TimeZone timeZone38 = null;
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forTimeZone(timeZone38);
        org.joda.time.DateMidnight dateMidnight40 = new org.joda.time.DateMidnight((long) 1970, dateTimeZone39);
        long long43 = dateTimeZone39.convertLocalToUTC((long) 3, false);
        long long46 = dateTimeZone39.convertLocalToUTC(0L, true);
        mutableDateTime18.setZoneRetainFields(dateTimeZone39);
        java.lang.String str48 = dateTimeZone39.toString();
        org.joda.time.chrono.EthiopicChronology ethiopicChronology49 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone39);
        org.joda.time.DateTimeField dateTimeField50 = ethiopicChronology49.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone51 = ethiopicChronology49.getZone();
        org.joda.time.DateTimeField dateTimeField52 = ethiopicChronology49.era();
        org.joda.time.DateTimeField dateTimeField53 = ethiopicChronology49.secondOfDay();
        org.joda.time.DateTimeField dateTimeField54 = ethiopicChronology49.minuteOfHour();
        org.joda.time.DurationField durationField55 = ethiopicChronology49.months();
        org.joda.time.DateTimeField dateTimeField56 = ethiopicChronology49.monthOfYear();
        org.joda.time.DateMidnight dateMidnight57 = new org.joda.time.DateMidnight((long) 5, (org.joda.time.Chronology) ethiopicChronology49);
        org.joda.time.DurationField durationField58 = ethiopicChronology49.years();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateMidnight17 and dateMidnight57", (dateMidnight17.compareTo(dateMidnight57) == 0) == dateMidnight17.equals(dateMidnight57));
    }

    @Test
    public void test07() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test07");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Duration duration2 = new org.joda.time.Duration(readableInstant0, readableInstant1);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = duration2.toPeriodTo(readableInstant3, periodType4);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.Duration duration8 = new org.joda.time.Duration(readableInstant6, readableInstant7);
        long long9 = duration8.getMillis();
        boolean boolean10 = duration2.isShorterThan((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) 3, chronology12);
        org.joda.time.DateTime.Property property14 = dateTime13.dayOfYear();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight((java.lang.Object) dateTime13, chronology15);
        org.joda.time.MutableDateTime mutableDateTime17 = dateTime13.toMutableDateTime();
        mutableDateTime17.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime17.dayOfWeek();
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime17.year();
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime17.weekyear();
        boolean boolean23 = duration2.equals((java.lang.Object) mutableDateTime17);
        mutableDateTime17.addMonths((int) ' ');
        mutableDateTime17.add((long) (byte) 10);
        org.joda.time.Period period28 = org.joda.time.Period.ZERO;
        org.joda.time.Period period29 = period28.normalizedStandard();
        org.joda.time.Period period31 = period28.plusHours(2);
        java.time.chrono.IsoEra isoEra32 = java.time.chrono.IsoEra.CE;
        boolean boolean33 = period31.equals((java.lang.Object) isoEra32);
        int int34 = period31.getMinutes();
        mutableDateTime17.add((org.joda.time.ReadablePeriod) period31);
        java.util.TimeZone timeZone37 = null;
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forTimeZone(timeZone37);
        org.joda.time.DateMidnight dateMidnight39 = new org.joda.time.DateMidnight((long) 1970, dateTimeZone38);
        long long42 = dateTimeZone38.convertLocalToUTC((long) 3, false);
        long long45 = dateTimeZone38.convertLocalToUTC(0L, true);
        mutableDateTime17.setZoneRetainFields(dateTimeZone38);
        java.lang.String str47 = dateTimeZone38.toString();
        org.joda.time.chrono.EthiopicChronology ethiopicChronology48 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone38);
        org.joda.time.DateTimeField dateTimeField49 = ethiopicChronology48.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone50 = ethiopicChronology48.getZone();
        org.joda.time.DateTimeField dateTimeField51 = ethiopicChronology48.era();
        org.joda.time.DateTimeField dateTimeField52 = ethiopicChronology48.secondOfDay();
        org.joda.time.DateTimeField dateTimeField53 = ethiopicChronology48.minuteOfHour();
        org.joda.time.DurationField durationField54 = ethiopicChronology48.months();
        org.joda.time.DurationField durationField55 = ethiopicChronology48.eras();
        org.joda.time.DurationField durationField56 = ethiopicChronology48.hours();
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField54 and durationField55", Math.signum(durationField54.compareTo(durationField55)) == -Math.signum(durationField55.compareTo(durationField54)));
    }

    @Test
    public void test08() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test08");
        java.util.TimeZone timeZone1 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight((long) 12, dateTimeZone2);
        org.joda.time.Instant instant4 = dateMidnight3.toInstant();
        org.joda.time.DateMidnight dateMidnight6 = dateMidnight3.withDayOfYear((int) (byte) 1);
        org.joda.time.DateMidnight.Property property7 = dateMidnight3.monthOfYear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant4 and dateMidnight3", (instant4.compareTo(dateMidnight3) == 0) == instant4.equals(dateMidnight3));
    }

    @Test
    public void test09() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test09");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Duration duration2 = new org.joda.time.Duration(readableInstant0, readableInstant1);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = duration2.toPeriodTo(readableInstant3, periodType4);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.Duration duration8 = new org.joda.time.Duration(readableInstant6, readableInstant7);
        long long9 = duration8.getMillis();
        boolean boolean10 = duration2.isShorterThan((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) 3, chronology12);
        org.joda.time.DateTime.Property property14 = dateTime13.dayOfYear();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight((java.lang.Object) dateTime13, chronology15);
        org.joda.time.MutableDateTime mutableDateTime17 = dateTime13.toMutableDateTime();
        mutableDateTime17.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime17.dayOfWeek();
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime17.year();
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime17.weekyear();
        boolean boolean23 = duration2.equals((java.lang.Object) mutableDateTime17);
        mutableDateTime17.addMonths((int) ' ');
        mutableDateTime17.add((long) (byte) 10);
        org.joda.time.Period period28 = org.joda.time.Period.ZERO;
        org.joda.time.Period period29 = period28.normalizedStandard();
        org.joda.time.Period period31 = period28.plusHours(2);
        java.time.chrono.IsoEra isoEra32 = java.time.chrono.IsoEra.CE;
        boolean boolean33 = period31.equals((java.lang.Object) isoEra32);
        int int34 = period31.getMinutes();
        mutableDateTime17.add((org.joda.time.ReadablePeriod) period31);
        java.util.TimeZone timeZone37 = null;
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forTimeZone(timeZone37);
        org.joda.time.DateMidnight dateMidnight39 = new org.joda.time.DateMidnight((long) 1970, dateTimeZone38);
        long long42 = dateTimeZone38.convertLocalToUTC((long) 3, false);
        long long45 = dateTimeZone38.convertLocalToUTC(0L, true);
        mutableDateTime17.setZoneRetainFields(dateTimeZone38);
        java.lang.String str47 = dateTimeZone38.toString();
        org.joda.time.chrono.EthiopicChronology ethiopicChronology48 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone38);
        org.joda.time.DateTimeField dateTimeField49 = ethiopicChronology48.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone50 = ethiopicChronology48.getZone();
        org.joda.time.DateTimeField dateTimeField51 = ethiopicChronology48.era();
        org.joda.time.DateTimeField dateTimeField52 = ethiopicChronology48.secondOfDay();
        org.joda.time.DateTimeField dateTimeField53 = ethiopicChronology48.minuteOfHour();
        org.joda.time.DurationField durationField54 = ethiopicChronology48.months();
        org.joda.time.DurationField durationField55 = ethiopicChronology48.eras();
        org.joda.time.DateTimeField dateTimeField56 = ethiopicChronology48.minuteOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField54 and durationField55", Math.signum(durationField54.compareTo(durationField55)) == -Math.signum(durationField55.compareTo(durationField54)));
    }

    @Test
    public void test10() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test10");
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.Duration duration3 = new org.joda.time.Duration(readableInstant1, readableInstant2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.PeriodType periodType5 = null;
        org.joda.time.Period period6 = duration3.toPeriodTo(readableInstant4, periodType5);
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.Duration duration9 = new org.joda.time.Duration(readableInstant7, readableInstant8);
        long long10 = duration9.getMillis();
        boolean boolean11 = duration3.isShorterThan((org.joda.time.ReadableDuration) duration9);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) 3, chronology13);
        org.joda.time.DateTime.Property property15 = dateTime14.dayOfYear();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight((java.lang.Object) dateTime14, chronology16);
        org.joda.time.MutableDateTime mutableDateTime18 = dateTime14.toMutableDateTime();
        mutableDateTime18.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime18.dayOfWeek();
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime18.year();
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime18.weekyear();
        boolean boolean24 = duration3.equals((java.lang.Object) mutableDateTime18);
        mutableDateTime18.addMonths((int) ' ');
        mutableDateTime18.add((long) (byte) 10);
        org.joda.time.Period period29 = org.joda.time.Period.ZERO;
        org.joda.time.Period period30 = period29.normalizedStandard();
        org.joda.time.Period period32 = period29.plusHours(2);
        java.time.chrono.IsoEra isoEra33 = java.time.chrono.IsoEra.CE;
        boolean boolean34 = period32.equals((java.lang.Object) isoEra33);
        int int35 = period32.getMinutes();
        mutableDateTime18.add((org.joda.time.ReadablePeriod) period32);
        java.util.TimeZone timeZone38 = null;
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forTimeZone(timeZone38);
        org.joda.time.DateMidnight dateMidnight40 = new org.joda.time.DateMidnight((long) 1970, dateTimeZone39);
        long long43 = dateTimeZone39.convertLocalToUTC((long) 3, false);
        long long46 = dateTimeZone39.convertLocalToUTC(0L, true);
        mutableDateTime18.setZoneRetainFields(dateTimeZone39);
        java.lang.String str48 = dateTimeZone39.toString();
        org.joda.time.chrono.EthiopicChronology ethiopicChronology49 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone39);
        org.joda.time.DateTimeField dateTimeField50 = ethiopicChronology49.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone51 = ethiopicChronology49.getZone();
        org.joda.time.DateTimeField dateTimeField52 = ethiopicChronology49.era();
        org.joda.time.DateTimeField dateTimeField53 = ethiopicChronology49.secondOfDay();
        org.joda.time.DateTimeField dateTimeField54 = ethiopicChronology49.minuteOfHour();
        org.joda.time.DurationField durationField55 = ethiopicChronology49.months();
        org.joda.time.DateTimeField dateTimeField56 = ethiopicChronology49.monthOfYear();
        org.joda.time.DateMidnight dateMidnight57 = new org.joda.time.DateMidnight((long) 5, (org.joda.time.Chronology) ethiopicChronology49);
        org.joda.time.DateTimeField dateTimeField58 = ethiopicChronology49.clockhourOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateMidnight17 and dateMidnight57", (dateMidnight17.compareTo(dateMidnight57) == 0) == dateMidnight17.equals(dateMidnight57));
    }

    @Test
    public void test11() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test11");
        org.joda.time.Period period0 = org.joda.time.Period.ZERO;
        org.joda.time.Period period1 = period0.normalizedStandard();
        org.joda.time.Period period3 = period0.plusHours(2);
        org.joda.time.DurationFieldType durationFieldType4 = org.joda.time.DurationFieldType.hours();
        int int5 = period0.indexOf(durationFieldType4);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.Duration duration8 = new org.joda.time.Duration(readableInstant6, readableInstant7);
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.PeriodType periodType10 = null;
        org.joda.time.Period period11 = duration8.toPeriodTo(readableInstant9, periodType10);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.Duration duration14 = new org.joda.time.Duration(readableInstant12, readableInstant13);
        long long15 = duration14.getMillis();
        boolean boolean16 = duration8.isShorterThan((org.joda.time.ReadableDuration) duration14);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) 3, chronology18);
        org.joda.time.DateTime.Property property20 = dateTime19.dayOfYear();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight((java.lang.Object) dateTime19, chronology21);
        org.joda.time.MutableDateTime mutableDateTime23 = dateTime19.toMutableDateTime();
        mutableDateTime23.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property26 = mutableDateTime23.dayOfWeek();
        org.joda.time.MutableDateTime.Property property27 = mutableDateTime23.year();
        org.joda.time.MutableDateTime.Property property28 = mutableDateTime23.weekyear();
        boolean boolean29 = duration8.equals((java.lang.Object) mutableDateTime23);
        mutableDateTime23.addMonths((int) ' ');
        mutableDateTime23.add((long) (byte) 10);
        org.joda.time.Period period34 = org.joda.time.Period.ZERO;
        org.joda.time.Period period35 = period34.normalizedStandard();
        org.joda.time.Period period37 = period34.plusHours(2);
        java.time.chrono.IsoEra isoEra38 = java.time.chrono.IsoEra.CE;
        boolean boolean39 = period37.equals((java.lang.Object) isoEra38);
        int int40 = period37.getMinutes();
        mutableDateTime23.add((org.joda.time.ReadablePeriod) period37);
        java.util.TimeZone timeZone43 = null;
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forTimeZone(timeZone43);
        org.joda.time.DateMidnight dateMidnight45 = new org.joda.time.DateMidnight((long) 1970, dateTimeZone44);
        long long48 = dateTimeZone44.convertLocalToUTC((long) 3, false);
        long long51 = dateTimeZone44.convertLocalToUTC(0L, true);
        mutableDateTime23.setZoneRetainFields(dateTimeZone44);
        java.lang.String str53 = dateTimeZone44.toString();
        org.joda.time.chrono.EthiopicChronology ethiopicChronology54 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone44);
        org.joda.time.DateTimeField dateTimeField55 = ethiopicChronology54.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone56 = ethiopicChronology54.getZone();
        org.joda.time.DateTimeField dateTimeField57 = ethiopicChronology54.era();
        org.joda.time.DurationField durationField58 = ethiopicChronology54.eras();
        org.joda.time.DateTimeField dateTimeField59 = ethiopicChronology54.halfdayOfDay();
        org.joda.time.TimeOfDay timeOfDay60 = new org.joda.time.TimeOfDay((org.joda.time.Chronology) ethiopicChronology54);
        int int61 = ethiopicChronology54.getMinimumDaysInFirstWeek();
        org.joda.time.DurationField durationField62 = durationFieldType4.getField((org.joda.time.Chronology) ethiopicChronology54);
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField58, durationField62, and durationField58", !(durationField58.compareTo(durationField62) == 0) || (Math.signum(durationField58.compareTo(durationField58)) == Math.signum(durationField62.compareTo(durationField58))));
    }

    @Test
    public void test12() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test12");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 3, chronology1);
        org.joda.time.DateTime.Property property3 = dateTime2.dayOfYear();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight((java.lang.Object) dateTime2, chronology4);
        org.joda.time.MutableDateTime mutableDateTime6 = dateTime2.toMutableDateTime();
        mutableDateTime6.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime6.dayOfWeek();
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime6.year();
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime6.weekyear();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) 3, chronology13);
        org.joda.time.Period period15 = org.joda.time.Period.ZERO;
        org.joda.time.Period period16 = period15.normalizedStandard();
        org.joda.time.Period period18 = period16.minusMinutes((int) ' ');
        org.joda.time.Period period20 = period18.minusMonths((int) (byte) 0);
        org.joda.time.PeriodType periodType21 = period20.getPeriodType();
        org.joda.time.DateTime dateTime22 = dateTime14.minus((org.joda.time.ReadablePeriod) period20);
        org.joda.time.DateTime dateTime24 = dateTime14.plusHours(34);
        org.joda.time.DateTime dateTime26 = dateTime14.plusMonths(5);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.LocalTime localTime29 = new org.joda.time.LocalTime((long) 0, chronology28);
        org.joda.time.Chronology chronology30 = localTime29.getChronology();
        org.joda.time.DateTimeField dateTimeField31 = chronology30.weekyearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime32 = org.joda.time.MutableDateTime.now(chronology30);
        mutableDateTime32.setWeekOfWeekyear((int) '#');
        mutableDateTime32.addHours(0);
        org.joda.time.Days days37 = org.joda.time.Days.daysBetween((org.joda.time.ReadableInstant) dateTime26, (org.joda.time.ReadableInstant) mutableDateTime32);
        long long38 = property11.getDifferenceAsLong((org.joda.time.ReadableInstant) mutableDateTime32);
        org.joda.time.MutableDateTime mutableDateTime39 = property11.getMutableDateTime();
        mutableDateTime39.addWeeks((int) ':');
        org.joda.time.MutableDateTime mutableDateTime42 = mutableDateTime39.copy();
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.LocalTime localTime47 = new org.joda.time.LocalTime((long) 0, chronology46);
        org.joda.time.Chronology chronology48 = localTime47.getChronology();
        java.util.Locale locale49 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale50 = java.util.Locale.GERMANY;
        java.lang.String str51 = locale49.getDisplayScript(locale50);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket53 = new org.joda.time.format.DateTimeParserBucket((long) 1970, chronology48, locale49, (java.lang.Integer) 1);
        org.joda.time.DateTimeField dateTimeField54 = chronology48.clockhourOfDay();
        org.joda.time.Period period59 = new org.joda.time.Period((int) '#', 0, 2, (int) (short) 100);
        org.joda.time.Period period61 = period59.withSeconds(12);
        int int62 = period61.getMillis();
        int[] intArray64 = chronology48.get((org.joda.time.ReadablePeriod) period61, (long) (byte) 10);
        org.joda.time.DateTime dateTime65 = new org.joda.time.DateTime((long) 2147483647, chronology48);
        mutableDateTime42.setChronology(chronology48);
        org.joda.time.LocalTime localTime67 = new org.joda.time.LocalTime(chronology48);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime6 and mutableDateTime42", (mutableDateTime6.compareTo(mutableDateTime42) == 0) == mutableDateTime6.equals(mutableDateTime42));
    }

    @Test
    public void test13() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test13");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((long) 0, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) 3, chronology4);
        org.joda.time.DateTime.Property property6 = dateTime5.dayOfYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateMidnight dateMidnight8 = new org.joda.time.DateMidnight((java.lang.Object) dateTime5, chronology7);
        org.joda.time.DateTime dateTime9 = localTime2.toDateTime((org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTime dateTime11 = dateTime9.minusMillis((int) (byte) 0);
        org.joda.time.DateTime dateTime13 = dateTime9.withYearOfCentury((int) (byte) 10);
        org.joda.time.DateTime.Property property14 = dateTime13.hourOfDay();
        org.joda.time.DateTime dateTime16 = dateTime13.minusDays((int) (short) 10);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.Duration duration19 = new org.joda.time.Duration(readableInstant17, readableInstant18);
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.PeriodType periodType21 = null;
        org.joda.time.Period period22 = duration19.toPeriodTo(readableInstant20, periodType21);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.Duration duration25 = new org.joda.time.Duration(readableInstant23, readableInstant24);
        long long26 = duration25.getMillis();
        boolean boolean27 = duration19.isShorterThan((org.joda.time.ReadableDuration) duration25);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((long) 3, chronology29);
        org.joda.time.DateTime.Property property31 = dateTime30.dayOfYear();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.DateMidnight dateMidnight33 = new org.joda.time.DateMidnight((java.lang.Object) dateTime30, chronology32);
        org.joda.time.MutableDateTime mutableDateTime34 = dateTime30.toMutableDateTime();
        mutableDateTime34.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property37 = mutableDateTime34.dayOfWeek();
        org.joda.time.MutableDateTime.Property property38 = mutableDateTime34.year();
        org.joda.time.MutableDateTime.Property property39 = mutableDateTime34.weekyear();
        boolean boolean40 = duration19.equals((java.lang.Object) mutableDateTime34);
        mutableDateTime34.addMonths((int) ' ');
        mutableDateTime34.add((long) (byte) 10);
        org.joda.time.Period period45 = org.joda.time.Period.ZERO;
        org.joda.time.Period period46 = period45.normalizedStandard();
        org.joda.time.Period period48 = period45.plusHours(2);
        java.time.chrono.IsoEra isoEra49 = java.time.chrono.IsoEra.CE;
        boolean boolean50 = period48.equals((java.lang.Object) isoEra49);
        int int51 = period48.getMinutes();
        mutableDateTime34.add((org.joda.time.ReadablePeriod) period48);
        java.util.TimeZone timeZone54 = null;
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.forTimeZone(timeZone54);
        org.joda.time.DateMidnight dateMidnight56 = new org.joda.time.DateMidnight((long) 1970, dateTimeZone55);
        long long59 = dateTimeZone55.convertLocalToUTC((long) 3, false);
        long long62 = dateTimeZone55.convertLocalToUTC(0L, true);
        mutableDateTime34.setZoneRetainFields(dateTimeZone55);
        java.lang.String str64 = dateTimeZone55.toString();
        org.joda.time.chrono.EthiopicChronology ethiopicChronology65 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone55);
        org.joda.time.DateTimeField dateTimeField66 = ethiopicChronology65.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone67 = ethiopicChronology65.getZone();
        org.joda.time.DateTimeField dateTimeField68 = ethiopicChronology65.era();
        org.joda.time.DateTimeField dateTimeField69 = ethiopicChronology65.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone70 = ethiopicChronology65.getZone();
        org.joda.time.DateTime dateTime71 = dateTime16.toDateTime((org.joda.time.Chronology) ethiopicChronology65);
        org.joda.time.DurationField durationField72 = ethiopicChronology65.days();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime16 and dateTime71", (dateTime16.compareTo(dateTime71) == 0) == dateTime16.equals(dateTime71));
    }

    @Test
    public void test14() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test14");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 3, chronology1);
        org.joda.time.DateTime.Property property3 = dateTime2.dayOfYear();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight((java.lang.Object) dateTime2, chronology4);
        org.joda.time.MutableDateTime mutableDateTime6 = dateTime2.toMutableDateTime();
        mutableDateTime6.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime6.dayOfWeek();
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime6.year();
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime6.weekyear();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) 3, chronology13);
        org.joda.time.Period period15 = org.joda.time.Period.ZERO;
        org.joda.time.Period period16 = period15.normalizedStandard();
        org.joda.time.Period period18 = period16.minusMinutes((int) ' ');
        org.joda.time.Period period20 = period18.minusMonths((int) (byte) 0);
        org.joda.time.PeriodType periodType21 = period20.getPeriodType();
        org.joda.time.DateTime dateTime22 = dateTime14.minus((org.joda.time.ReadablePeriod) period20);
        org.joda.time.DateTime dateTime24 = dateTime14.plusHours(34);
        org.joda.time.DateTime dateTime26 = dateTime14.plusMonths(5);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.LocalTime localTime29 = new org.joda.time.LocalTime((long) 0, chronology28);
        org.joda.time.Chronology chronology30 = localTime29.getChronology();
        org.joda.time.DateTimeField dateTimeField31 = chronology30.weekyearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime32 = org.joda.time.MutableDateTime.now(chronology30);
        mutableDateTime32.setWeekOfWeekyear((int) '#');
        mutableDateTime32.addHours(0);
        org.joda.time.Days days37 = org.joda.time.Days.daysBetween((org.joda.time.ReadableInstant) dateTime26, (org.joda.time.ReadableInstant) mutableDateTime32);
        long long38 = property11.getDifferenceAsLong((org.joda.time.ReadableInstant) mutableDateTime32);
        org.joda.time.MutableDateTime mutableDateTime39 = property11.getMutableDateTime();
        mutableDateTime39.addWeeks((int) ':');
        org.joda.time.MutableDateTime mutableDateTime42 = mutableDateTime39.copy();
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.LocalTime localTime47 = new org.joda.time.LocalTime((long) 0, chronology46);
        org.joda.time.Chronology chronology48 = localTime47.getChronology();
        java.util.Locale locale49 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale50 = java.util.Locale.GERMANY;
        java.lang.String str51 = locale49.getDisplayScript(locale50);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket53 = new org.joda.time.format.DateTimeParserBucket((long) 1970, chronology48, locale49, (java.lang.Integer) 1);
        org.joda.time.DateTimeField dateTimeField54 = chronology48.clockhourOfDay();
        org.joda.time.Period period59 = new org.joda.time.Period((int) '#', 0, 2, (int) (short) 100);
        org.joda.time.Period period61 = period59.withSeconds(12);
        int int62 = period61.getMillis();
        int[] intArray64 = chronology48.get((org.joda.time.ReadablePeriod) period61, (long) (byte) 10);
        org.joda.time.DateTime dateTime65 = new org.joda.time.DateTime((long) 2147483647, chronology48);
        mutableDateTime42.setChronology(chronology48);
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.DateTime dateTime69 = new org.joda.time.DateTime((long) 3, chronology68);
        org.joda.time.DateTime.Property property70 = dateTime69.dayOfYear();
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.DateMidnight dateMidnight72 = new org.joda.time.DateMidnight((java.lang.Object) dateTime69, chronology71);
        org.joda.time.MutableDateTime mutableDateTime73 = dateTime69.toMutableDateTime();
        org.joda.time.Days days74 = org.joda.time.Days.ONE;
        org.joda.time.MutableInterval mutableInterval75 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime69, (org.joda.time.ReadablePeriod) days74);
        org.joda.time.Days days77 = days74.dividedBy(34482);
        int[] intArray80 = chronology48.get((org.joda.time.ReadablePeriod) days74, 999999999L, (long) 15);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime6 and mutableDateTime42", (mutableDateTime6.compareTo(mutableDateTime42) == 0) == mutableDateTime6.equals(mutableDateTime42));
    }

    @Test
    public void test15() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test15");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((long) 0, chronology2);
        org.joda.time.Chronology chronology4 = localTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField5 = chronology4.weekyearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime6 = org.joda.time.MutableDateTime.now(chronology4);
        org.joda.time.DateTimeField dateTimeField7 = chronology4.monthOfYear();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) 1, chronology4);
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Duration duration11 = new org.joda.time.Duration(readableInstant9, readableInstant10);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.PeriodType periodType13 = null;
        org.joda.time.Period period14 = duration11.toPeriodTo(readableInstant12, periodType13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.Duration duration17 = new org.joda.time.Duration(readableInstant15, readableInstant16);
        long long18 = duration17.getMillis();
        boolean boolean19 = duration11.isShorterThan((org.joda.time.ReadableDuration) duration17);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) 3, chronology21);
        org.joda.time.DateTime.Property property23 = dateTime22.dayOfYear();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateMidnight dateMidnight25 = new org.joda.time.DateMidnight((java.lang.Object) dateTime22, chronology24);
        org.joda.time.MutableDateTime mutableDateTime26 = dateTime22.toMutableDateTime();
        mutableDateTime26.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property29 = mutableDateTime26.dayOfWeek();
        org.joda.time.MutableDateTime.Property property30 = mutableDateTime26.year();
        org.joda.time.MutableDateTime.Property property31 = mutableDateTime26.weekyear();
        boolean boolean32 = duration11.equals((java.lang.Object) mutableDateTime26);
        mutableDateTime26.addMonths((int) ' ');
        mutableDateTime26.add((long) (byte) 10);
        org.joda.time.Period period37 = org.joda.time.Period.ZERO;
        org.joda.time.Period period38 = period37.normalizedStandard();
        org.joda.time.Period period40 = period37.plusHours(2);
        java.time.chrono.IsoEra isoEra41 = java.time.chrono.IsoEra.CE;
        boolean boolean42 = period40.equals((java.lang.Object) isoEra41);
        int int43 = period40.getMinutes();
        mutableDateTime26.add((org.joda.time.ReadablePeriod) period40);
        java.util.TimeZone timeZone46 = null;
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.forTimeZone(timeZone46);
        org.joda.time.DateMidnight dateMidnight48 = new org.joda.time.DateMidnight((long) 1970, dateTimeZone47);
        long long51 = dateTimeZone47.convertLocalToUTC((long) 3, false);
        long long54 = dateTimeZone47.convertLocalToUTC(0L, true);
        mutableDateTime26.setZoneRetainFields(dateTimeZone47);
        java.lang.String str56 = dateTimeZone47.toString();
        org.joda.time.chrono.EthiopicChronology ethiopicChronology57 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone47);
        org.joda.time.DateTimeField dateTimeField58 = ethiopicChronology57.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone59 = ethiopicChronology57.getZone();
        org.joda.time.DateTimeField dateTimeField60 = ethiopicChronology57.centuryOfEra();
        org.joda.time.DateTime dateTime61 = dateTime8.withChronology((org.joda.time.Chronology) ethiopicChronology57);
        org.joda.time.DateTime dateTime62 = dateTime61.toDateTimeISO();
        org.joda.time.LocalDateTime localDateTime63 = dateTime62.toLocalDateTime();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime8 and dateTime61", (dateTime8.compareTo(dateTime61) == 0) == dateTime8.equals(dateTime61));
    }

    @Test
    public void test16() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test16");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 3, chronology1);
        org.joda.time.DateTime.Property property3 = dateTime2.dayOfYear();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight((java.lang.Object) dateTime2, chronology4);
        org.joda.time.MutableDateTime mutableDateTime6 = dateTime2.toMutableDateTime();
        boolean boolean7 = mutableDateTime6.isBeforeNow();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.LocalTime localTime11 = new org.joda.time.LocalTime((long) 0, chronology10);
        org.joda.time.Chronology chronology12 = localTime11.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.weekyearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime14 = org.joda.time.MutableDateTime.now(chronology12);
        org.joda.time.DateTimeField dateTimeField15 = chronology12.monthOfYear();
        java.util.Locale locale16 = java.util.Locale.getDefault();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket18 = new org.joda.time.format.DateTimeParserBucket((long) 28, chronology12, locale16, (java.lang.Integer) 0);
        long long21 = dateTimeParserBucket18.computeMillis(true, "Years");
        long long23 = dateTimeParserBucket18.computeMillis(false);
        org.joda.time.Instant instant24 = new org.joda.time.Instant();
        org.joda.time.Instant instant27 = instant24.withDurationAdded(86400000L, (int) '/');
        org.joda.time.MutableDateTime mutableDateTime28 = instant27.toMutableDateTimeISO();
        boolean boolean29 = dateTimeParserBucket18.restoreState((java.lang.Object) instant27);
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.Duration duration32 = new org.joda.time.Duration(readableInstant30, readableInstant31);
        org.joda.time.Duration duration34 = duration32.withMillis((-1L));
        org.joda.time.Period period35 = duration34.toPeriod();
        org.joda.time.Instant instant36 = instant27.minus((org.joda.time.ReadableDuration) duration34);
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime6, (org.joda.time.ReadableDuration) duration34);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant27 and mutableDateTime28", (instant27.compareTo(mutableDateTime28) == 0) == instant27.equals(mutableDateTime28));
    }

    @Test
    public void test17() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test17");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((long) 0, chronology2);
        org.joda.time.Chronology chronology4 = localTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField5 = chronology4.weekyearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime6 = org.joda.time.MutableDateTime.now(chronology4);
        org.joda.time.DateTimeField dateTimeField7 = chronology4.monthOfYear();
        java.util.Locale locale8 = java.util.Locale.getDefault();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket10 = new org.joda.time.format.DateTimeParserBucket((long) 28, chronology4, locale8, (java.lang.Integer) 0);
        long long13 = dateTimeParserBucket10.computeMillis(true, "Years");
        long long15 = dateTimeParserBucket10.computeMillis(false);
        dateTimeParserBucket10.setOffset(25);
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.Duration duration20 = new org.joda.time.Duration(readableInstant18, readableInstant19);
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.PeriodType periodType22 = null;
        org.joda.time.Period period23 = duration20.toPeriodTo(readableInstant21, periodType22);
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.Duration duration26 = new org.joda.time.Duration(readableInstant24, readableInstant25);
        long long27 = duration26.getMillis();
        boolean boolean28 = duration20.isShorterThan((org.joda.time.ReadableDuration) duration26);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((long) 3, chronology30);
        org.joda.time.DateTime.Property property32 = dateTime31.dayOfYear();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.DateMidnight dateMidnight34 = new org.joda.time.DateMidnight((java.lang.Object) dateTime31, chronology33);
        org.joda.time.MutableDateTime mutableDateTime35 = dateTime31.toMutableDateTime();
        mutableDateTime35.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property38 = mutableDateTime35.dayOfWeek();
        org.joda.time.MutableDateTime.Property property39 = mutableDateTime35.year();
        org.joda.time.MutableDateTime.Property property40 = mutableDateTime35.weekyear();
        boolean boolean41 = duration20.equals((java.lang.Object) mutableDateTime35);
        mutableDateTime35.addMonths((int) ' ');
        mutableDateTime35.add((long) (byte) 10);
        org.joda.time.Period period46 = org.joda.time.Period.ZERO;
        org.joda.time.Period period47 = period46.normalizedStandard();
        org.joda.time.Period period49 = period46.plusHours(2);
        java.time.chrono.IsoEra isoEra50 = java.time.chrono.IsoEra.CE;
        boolean boolean51 = period49.equals((java.lang.Object) isoEra50);
        int int52 = period49.getMinutes();
        mutableDateTime35.add((org.joda.time.ReadablePeriod) period49);
        java.util.TimeZone timeZone55 = null;
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.forTimeZone(timeZone55);
        org.joda.time.DateMidnight dateMidnight57 = new org.joda.time.DateMidnight((long) 1970, dateTimeZone56);
        long long60 = dateTimeZone56.convertLocalToUTC((long) 3, false);
        long long63 = dateTimeZone56.convertLocalToUTC(0L, true);
        mutableDateTime35.setZoneRetainFields(dateTimeZone56);
        org.joda.time.MutableDateTime mutableDateTime65 = org.joda.time.MutableDateTime.now(dateTimeZone56);
        org.joda.time.LocalTime localTime66 = org.joda.time.LocalTime.now(dateTimeZone56);
        dateTimeParserBucket10.setZone(dateTimeZone56);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime6 and mutableDateTime65", (mutableDateTime6.compareTo(mutableDateTime65) == 0) == mutableDateTime6.equals(mutableDateTime65));
    }

    @Test
    public void test18() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test18");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 3, chronology1);
        org.joda.time.DateTime.Property property3 = dateTime2.dayOfYear();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight((java.lang.Object) dateTime2, chronology4);
        org.joda.time.MutableDateTime mutableDateTime6 = dateTime2.toMutableDateTime();
        mutableDateTime6.addYears((int) (short) 100);
        org.joda.time.Period period9 = org.joda.time.Period.ZERO;
        org.joda.time.TimeOfDay timeOfDay11 = org.joda.time.TimeOfDay.fromMillisOfDay((long) (short) 0);
        org.joda.time.TimeOfDay timeOfDay13 = org.joda.time.TimeOfDay.fromMillisOfDay((long) (short) 0);
        org.joda.time.Hours hours14 = org.joda.time.Hours.hoursBetween((org.joda.time.ReadablePartial) timeOfDay11, (org.joda.time.ReadablePartial) timeOfDay13);
        org.joda.time.DurationFieldType durationFieldType15 = org.joda.time.DurationFieldType.hours();
        org.joda.time.TimeOfDay timeOfDay17 = timeOfDay13.withFieldAdded(durationFieldType15, (int) (byte) 0);
        org.joda.time.Period period19 = period9.withFieldAdded(durationFieldType15, 4);
        mutableDateTime6.add((org.joda.time.ReadablePeriod) period9);
        mutableDateTime6.addMonths(1970);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.Duration duration25 = new org.joda.time.Duration(readableInstant23, readableInstant24);
        org.joda.time.Duration duration27 = duration25.withMillis((-1L));
        mutableDateTime6.add((org.joda.time.ReadableDuration) duration27, 0);
        org.joda.time.Instant instant30 = new org.joda.time.Instant();
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.Duration duration33 = new org.joda.time.Duration(readableInstant31, readableInstant32);
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.PeriodType periodType35 = null;
        org.joda.time.Period period36 = duration33.toPeriodTo(readableInstant34, periodType35);
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.ReadableInstant readableInstant38 = null;
        org.joda.time.Duration duration39 = new org.joda.time.Duration(readableInstant37, readableInstant38);
        long long40 = duration39.getMillis();
        boolean boolean41 = duration33.isShorterThan((org.joda.time.ReadableDuration) duration39);
        org.joda.time.Instant instant42 = instant30.minus((org.joda.time.ReadableDuration) duration33);
        mutableDateTime6.setMillis((org.joda.time.ReadableInstant) instant30);
        org.joda.time.MutableDateTime mutableDateTime44 = instant30.toMutableDateTimeISO();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime6 and instant30", (mutableDateTime6.compareTo(instant30) == 0) == mutableDateTime6.equals(instant30));
    }

    @Test
    public void test19() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test19");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Duration duration2 = new org.joda.time.Duration(readableInstant0, readableInstant1);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = duration2.toPeriodTo(readableInstant3, periodType4);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.Duration duration8 = new org.joda.time.Duration(readableInstant6, readableInstant7);
        long long9 = duration8.getMillis();
        boolean boolean10 = duration2.isShorterThan((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) 3, chronology12);
        org.joda.time.DateTime.Property property14 = dateTime13.dayOfYear();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight((java.lang.Object) dateTime13, chronology15);
        org.joda.time.MutableDateTime mutableDateTime17 = dateTime13.toMutableDateTime();
        mutableDateTime17.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime17.dayOfWeek();
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime17.year();
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime17.weekyear();
        boolean boolean23 = duration2.equals((java.lang.Object) mutableDateTime17);
        mutableDateTime17.addMonths((int) ' ');
        mutableDateTime17.add((long) (byte) 10);
        org.joda.time.Period period28 = org.joda.time.Period.ZERO;
        org.joda.time.Period period29 = period28.normalizedStandard();
        org.joda.time.Period period31 = period28.plusHours(2);
        java.time.chrono.IsoEra isoEra32 = java.time.chrono.IsoEra.CE;
        boolean boolean33 = period31.equals((java.lang.Object) isoEra32);
        int int34 = period31.getMinutes();
        mutableDateTime17.add((org.joda.time.ReadablePeriod) period31);
        java.util.TimeZone timeZone37 = null;
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forTimeZone(timeZone37);
        org.joda.time.DateMidnight dateMidnight39 = new org.joda.time.DateMidnight((long) 1970, dateTimeZone38);
        long long42 = dateTimeZone38.convertLocalToUTC((long) 3, false);
        long long45 = dateTimeZone38.convertLocalToUTC(0L, true);
        mutableDateTime17.setZoneRetainFields(dateTimeZone38);
        java.lang.String str47 = dateTimeZone38.toString();
        org.joda.time.chrono.EthiopicChronology ethiopicChronology48 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone38);
        org.joda.time.DateTimeField dateTimeField49 = ethiopicChronology48.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone50 = ethiopicChronology48.getZone();
        org.joda.time.DateTimeField dateTimeField51 = ethiopicChronology48.era();
        org.joda.time.DurationField durationField52 = ethiopicChronology48.eras();
        org.joda.time.DateTimeField dateTimeField53 = ethiopicChronology48.halfdayOfDay();
        org.joda.time.TimeOfDay timeOfDay54 = new org.joda.time.TimeOfDay((org.joda.time.Chronology) ethiopicChronology48);
        int int55 = ethiopicChronology48.getMinimumDaysInFirstWeek();
        org.joda.time.DurationField durationField56 = ethiopicChronology48.minutes();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField52, durationField56, and durationField52", !(durationField52.compareTo(durationField56) == 0) || (Math.signum(durationField52.compareTo(durationField52)) == Math.signum(durationField56.compareTo(durationField52))));
    }

    @Test
    public void test20() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test20");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((long) 0, chronology2);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((long) 3, chronology5);
        org.joda.time.DateTime.Property property7 = dateTime6.dayOfYear();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight((java.lang.Object) dateTime6, chronology8);
        org.joda.time.DateTime dateTime10 = localTime3.toDateTime((org.joda.time.ReadableInstant) dateTime6);
        org.joda.time.DateTime dateTime12 = dateTime10.minusMillis((int) (byte) 0);
        org.joda.time.DateTime dateTime14 = dateTime10.withYearOfCentury((int) (byte) 10);
        org.joda.time.DateTime.Property property15 = dateTime14.hourOfDay();
        org.joda.time.DateTime dateTime17 = dateTime14.minusDays((int) (short) 10);
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.Duration duration20 = new org.joda.time.Duration(readableInstant18, readableInstant19);
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.PeriodType periodType22 = null;
        org.joda.time.Period period23 = duration20.toPeriodTo(readableInstant21, periodType22);
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.Duration duration26 = new org.joda.time.Duration(readableInstant24, readableInstant25);
        long long27 = duration26.getMillis();
        boolean boolean28 = duration20.isShorterThan((org.joda.time.ReadableDuration) duration26);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((long) 3, chronology30);
        org.joda.time.DateTime.Property property32 = dateTime31.dayOfYear();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.DateMidnight dateMidnight34 = new org.joda.time.DateMidnight((java.lang.Object) dateTime31, chronology33);
        org.joda.time.MutableDateTime mutableDateTime35 = dateTime31.toMutableDateTime();
        mutableDateTime35.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property38 = mutableDateTime35.dayOfWeek();
        org.joda.time.MutableDateTime.Property property39 = mutableDateTime35.year();
        org.joda.time.MutableDateTime.Property property40 = mutableDateTime35.weekyear();
        boolean boolean41 = duration20.equals((java.lang.Object) mutableDateTime35);
        mutableDateTime35.addMonths((int) ' ');
        mutableDateTime35.add((long) (byte) 10);
        org.joda.time.Period period46 = org.joda.time.Period.ZERO;
        org.joda.time.Period period47 = period46.normalizedStandard();
        org.joda.time.Period period49 = period46.plusHours(2);
        java.time.chrono.IsoEra isoEra50 = java.time.chrono.IsoEra.CE;
        boolean boolean51 = period49.equals((java.lang.Object) isoEra50);
        int int52 = period49.getMinutes();
        mutableDateTime35.add((org.joda.time.ReadablePeriod) period49);
        java.util.TimeZone timeZone55 = null;
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.forTimeZone(timeZone55);
        org.joda.time.DateMidnight dateMidnight57 = new org.joda.time.DateMidnight((long) 1970, dateTimeZone56);
        long long60 = dateTimeZone56.convertLocalToUTC((long) 3, false);
        long long63 = dateTimeZone56.convertLocalToUTC(0L, true);
        mutableDateTime35.setZoneRetainFields(dateTimeZone56);
        java.lang.String str65 = dateTimeZone56.toString();
        org.joda.time.chrono.EthiopicChronology ethiopicChronology66 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone56);
        org.joda.time.DateTimeField dateTimeField67 = ethiopicChronology66.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone68 = ethiopicChronology66.getZone();
        org.joda.time.DateTimeField dateTimeField69 = ethiopicChronology66.era();
        org.joda.time.DateTimeField dateTimeField70 = ethiopicChronology66.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone71 = ethiopicChronology66.getZone();
        org.joda.time.DateTime dateTime72 = dateTime17.toDateTime((org.joda.time.Chronology) ethiopicChronology66);
        org.joda.time.LocalTime localTime73 = new org.joda.time.LocalTime((long) 3, (org.joda.time.Chronology) ethiopicChronology66);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime17 and dateTime72", (dateTime17.compareTo(dateTime72) == 0) == dateTime17.equals(dateTime72));
    }

    @Test
    public void test21() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test21");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 3, chronology1);
        org.joda.time.DateTime.Property property3 = dateTime2.dayOfYear();
        org.joda.time.Interval interval4 = property3.toInterval();
        org.joda.time.DateTimeField dateTimeField5 = property3.getField();
        org.joda.time.DateTime dateTime7 = property3.addToCopy((long) (byte) 1);
        org.joda.time.DateTime dateTime9 = dateTime7.withYear(4);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) 3, chronology11);
        org.joda.time.Period period13 = org.joda.time.Period.ZERO;
        org.joda.time.Period period14 = period13.normalizedStandard();
        org.joda.time.Period period16 = period14.minusMinutes((int) ' ');
        org.joda.time.Period period18 = period16.minusMonths((int) (byte) 0);
        org.joda.time.PeriodType periodType19 = period18.getPeriodType();
        org.joda.time.DateTime dateTime20 = dateTime12.minus((org.joda.time.ReadablePeriod) period18);
        org.joda.time.Duration duration21 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.DateTime dateTime23 = dateTime20.withYear(45);
        org.joda.time.DateTime dateTime25 = dateTime20.plusMillis((int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.Duration duration28 = new org.joda.time.Duration(readableInstant26, readableInstant27);
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.PeriodType periodType30 = null;
        org.joda.time.Period period31 = duration28.toPeriodTo(readableInstant29, periodType30);
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.Duration duration34 = new org.joda.time.Duration(readableInstant32, readableInstant33);
        long long35 = duration34.getMillis();
        boolean boolean36 = duration28.isShorterThan((org.joda.time.ReadableDuration) duration34);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime((long) 3, chronology38);
        org.joda.time.DateTime.Property property40 = dateTime39.dayOfYear();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.DateMidnight dateMidnight42 = new org.joda.time.DateMidnight((java.lang.Object) dateTime39, chronology41);
        org.joda.time.MutableDateTime mutableDateTime43 = dateTime39.toMutableDateTime();
        mutableDateTime43.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property46 = mutableDateTime43.dayOfWeek();
        org.joda.time.MutableDateTime.Property property47 = mutableDateTime43.year();
        org.joda.time.MutableDateTime.Property property48 = mutableDateTime43.weekyear();
        boolean boolean49 = duration28.equals((java.lang.Object) mutableDateTime43);
        mutableDateTime43.addMonths((int) ' ');
        mutableDateTime43.add((long) (byte) 10);
        org.joda.time.Period period54 = org.joda.time.Period.ZERO;
        org.joda.time.Period period55 = period54.normalizedStandard();
        org.joda.time.Period period57 = period54.plusHours(2);
        java.time.chrono.IsoEra isoEra58 = java.time.chrono.IsoEra.CE;
        boolean boolean59 = period57.equals((java.lang.Object) isoEra58);
        int int60 = period57.getMinutes();
        mutableDateTime43.add((org.joda.time.ReadablePeriod) period57);
        java.util.TimeZone timeZone63 = null;
        org.joda.time.DateTimeZone dateTimeZone64 = org.joda.time.DateTimeZone.forTimeZone(timeZone63);
        org.joda.time.DateMidnight dateMidnight65 = new org.joda.time.DateMidnight((long) 1970, dateTimeZone64);
        long long68 = dateTimeZone64.convertLocalToUTC((long) 3, false);
        long long71 = dateTimeZone64.convertLocalToUTC(0L, true);
        mutableDateTime43.setZoneRetainFields(dateTimeZone64);
        java.lang.String str73 = dateTimeZone64.toString();
        org.joda.time.chrono.EthiopicChronology ethiopicChronology74 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone64);
        org.joda.time.DateTimeField dateTimeField75 = ethiopicChronology74.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone76 = ethiopicChronology74.getZone();
        org.joda.time.DateTimeField dateTimeField77 = ethiopicChronology74.era();
        org.joda.time.DateTimeField dateTimeField78 = ethiopicChronology74.secondOfDay();
        org.joda.time.DateTimeField dateTimeField79 = ethiopicChronology74.minuteOfHour();
        org.joda.time.DurationField durationField80 = ethiopicChronology74.months();
        org.joda.time.DateTimeField dateTimeField81 = ethiopicChronology74.weekyearOfCentury();
        org.joda.time.Minutes minutes82 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes84 = minutes82.minus(12);
        org.joda.time.Minutes minutes85 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes87 = minutes85.minus(12);
        org.joda.time.Minutes minutes88 = minutes82.minus(minutes85);
        org.joda.time.DurationFieldType durationFieldType89 = minutes82.getFieldType();
        int[] intArray92 = ethiopicChronology74.get((org.joda.time.ReadablePeriod) minutes82, (long) 30, (long) 741000000);
        org.joda.time.DateTime dateTime93 = dateTime25.withChronology((org.joda.time.Chronology) ethiopicChronology74);
        org.joda.time.DateTimeField dateTimeField94 = ethiopicChronology74.clockhourOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime25 and dateTime93", (dateTime25.compareTo(dateTime93) == 0) == dateTime25.equals(dateTime93));
    }

    @Test
    public void test22() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test22");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 3, chronology1);
        org.joda.time.Period period3 = org.joda.time.Period.ZERO;
        org.joda.time.Period period4 = period3.normalizedStandard();
        org.joda.time.Period period6 = period4.minusMinutes((int) ' ');
        org.joda.time.Period period8 = period6.minusMonths((int) (byte) 0);
        org.joda.time.PeriodType periodType9 = period8.getPeriodType();
        org.joda.time.DateTime dateTime10 = dateTime2.minus((org.joda.time.ReadablePeriod) period8);
        org.joda.time.DateTime dateTime12 = dateTime2.plusHours(34);
        org.joda.time.Period period13 = org.joda.time.Period.ZERO;
        org.joda.time.Period period14 = period13.normalizedStandard();
        org.joda.time.Period period16 = period14.minusMinutes((int) ' ');
        org.joda.time.Period period18 = period16.minusMonths((int) (byte) 0);
        org.joda.time.DateTime dateTime19 = dateTime2.plus((org.joda.time.ReadablePeriod) period18);
        int int20 = dateTime2.getYearOfCentury();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) 3, chronology22);
        org.joda.time.DateTime.Property property24 = dateTime23.dayOfYear();
        org.joda.time.Interval interval25 = property24.toInterval();
        org.joda.time.Period period26 = org.joda.time.Period.ZERO;
        org.joda.time.Period period27 = period26.normalizedStandard();
        org.joda.time.Period period29 = period27.minusMinutes((int) ' ');
        org.joda.time.Period period31 = period29.withMinutes(32769);
        boolean boolean32 = interval25.equals((java.lang.Object) period31);
        org.joda.time.Period period33 = org.joda.time.Period.ZERO;
        org.joda.time.Period period34 = period33.normalizedStandard();
        org.joda.time.Period period36 = period33.plusHours(2);
        int int37 = period33.getDays();
        org.joda.time.Interval interval38 = interval25.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period33);
        long long39 = interval38.getEndMillis();
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.Duration duration42 = new org.joda.time.Duration(readableInstant40, readableInstant41);
        org.joda.time.Duration duration44 = duration42.withMillis((-1L));
        org.joda.time.ReadableDuration readableDuration45 = null;
        org.joda.time.Duration duration46 = duration42.minus(readableDuration45);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime((long) 3, chronology48);
        org.joda.time.DateTime.Property property50 = dateTime49.dayOfYear();
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.DateMidnight dateMidnight52 = new org.joda.time.DateMidnight((java.lang.Object) dateTime49, chronology51);
        org.joda.time.DateMidnight.Property property53 = dateMidnight52.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight54 = property53.getDateMidnight();
        org.joda.time.Interval interval55 = new org.joda.time.Interval((org.joda.time.ReadableDuration) duration46, (org.joda.time.ReadableInstant) dateMidnight54);
        org.joda.time.Interval interval56 = interval38.withDurationAfterStart((org.joda.time.ReadableDuration) duration46);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.LocalTime localTime59 = new org.joda.time.LocalTime((long) 0, chronology58);
        org.joda.time.Chronology chronology60 = localTime59.getChronology();
        org.joda.time.DateTimeField dateTimeField61 = chronology60.weekyearOfCentury();
        org.joda.time.Period period62 = duration46.toPeriod(chronology60);
        org.joda.time.DurationField durationField63 = chronology60.months();
        org.joda.time.DateTimeField dateTimeField64 = chronology60.era();
        org.joda.time.DateTimeField dateTimeField65 = chronology60.hourOfHalfday();
        org.joda.time.MutableDateTime mutableDateTime66 = dateTime2.toMutableDateTime(chronology60);
        org.joda.time.DateTime dateTime68 = dateTime2.withMillisOfSecond(12);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime23 and mutableDateTime66", (dateTime23.compareTo(mutableDateTime66) == 0) == dateTime23.equals(mutableDateTime66));
    }

    @Test
    public void test23() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test23");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((long) 0, chronology2);
        org.joda.time.Chronology chronology4 = localTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField5 = chronology4.weekyearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime6 = org.joda.time.MutableDateTime.now(chronology4);
        org.joda.time.DateTimeField dateTimeField7 = chronology4.monthOfYear();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) 1, chronology4);
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Duration duration11 = new org.joda.time.Duration(readableInstant9, readableInstant10);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.PeriodType periodType13 = null;
        org.joda.time.Period period14 = duration11.toPeriodTo(readableInstant12, periodType13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.Duration duration17 = new org.joda.time.Duration(readableInstant15, readableInstant16);
        long long18 = duration17.getMillis();
        boolean boolean19 = duration11.isShorterThan((org.joda.time.ReadableDuration) duration17);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) 3, chronology21);
        org.joda.time.DateTime.Property property23 = dateTime22.dayOfYear();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateMidnight dateMidnight25 = new org.joda.time.DateMidnight((java.lang.Object) dateTime22, chronology24);
        org.joda.time.MutableDateTime mutableDateTime26 = dateTime22.toMutableDateTime();
        mutableDateTime26.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property29 = mutableDateTime26.dayOfWeek();
        org.joda.time.MutableDateTime.Property property30 = mutableDateTime26.year();
        org.joda.time.MutableDateTime.Property property31 = mutableDateTime26.weekyear();
        boolean boolean32 = duration11.equals((java.lang.Object) mutableDateTime26);
        mutableDateTime26.addMonths((int) ' ');
        mutableDateTime26.add((long) (byte) 10);
        org.joda.time.Period period37 = org.joda.time.Period.ZERO;
        org.joda.time.Period period38 = period37.normalizedStandard();
        org.joda.time.Period period40 = period37.plusHours(2);
        java.time.chrono.IsoEra isoEra41 = java.time.chrono.IsoEra.CE;
        boolean boolean42 = period40.equals((java.lang.Object) isoEra41);
        int int43 = period40.getMinutes();
        mutableDateTime26.add((org.joda.time.ReadablePeriod) period40);
        java.util.TimeZone timeZone46 = null;
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.forTimeZone(timeZone46);
        org.joda.time.DateMidnight dateMidnight48 = new org.joda.time.DateMidnight((long) 1970, dateTimeZone47);
        long long51 = dateTimeZone47.convertLocalToUTC((long) 3, false);
        long long54 = dateTimeZone47.convertLocalToUTC(0L, true);
        mutableDateTime26.setZoneRetainFields(dateTimeZone47);
        java.lang.String str56 = dateTimeZone47.toString();
        org.joda.time.chrono.EthiopicChronology ethiopicChronology57 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone47);
        org.joda.time.DateTimeField dateTimeField58 = ethiopicChronology57.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone59 = ethiopicChronology57.getZone();
        org.joda.time.DateTimeField dateTimeField60 = ethiopicChronology57.centuryOfEra();
        org.joda.time.DateTime dateTime61 = dateTime8.withChronology((org.joda.time.Chronology) ethiopicChronology57);
        org.joda.time.DurationField durationField62 = ethiopicChronology57.halfdays();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime8 and dateTime61", (dateTime8.compareTo(dateTime61) == 0) == dateTime8.equals(dateTime61));
    }

    @Test
    public void test24() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test24");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 3, chronology1);
        org.joda.time.DateTime.Property property3 = dateTime2.dayOfYear();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight((java.lang.Object) dateTime2, chronology4);
        org.joda.time.MutableDateTime mutableDateTime6 = dateTime2.toMutableDateTime();
        mutableDateTime6.addYears((int) (short) 100);
        org.joda.time.Period period9 = org.joda.time.Period.ZERO;
        org.joda.time.TimeOfDay timeOfDay11 = org.joda.time.TimeOfDay.fromMillisOfDay((long) (short) 0);
        org.joda.time.TimeOfDay timeOfDay13 = org.joda.time.TimeOfDay.fromMillisOfDay((long) (short) 0);
        org.joda.time.Hours hours14 = org.joda.time.Hours.hoursBetween((org.joda.time.ReadablePartial) timeOfDay11, (org.joda.time.ReadablePartial) timeOfDay13);
        org.joda.time.DurationFieldType durationFieldType15 = org.joda.time.DurationFieldType.hours();
        org.joda.time.TimeOfDay timeOfDay17 = timeOfDay13.withFieldAdded(durationFieldType15, (int) (byte) 0);
        org.joda.time.Period period19 = period9.withFieldAdded(durationFieldType15, 4);
        mutableDateTime6.add((org.joda.time.ReadablePeriod) period9);
        mutableDateTime6.addMonths(1970);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.Duration duration25 = new org.joda.time.Duration(readableInstant23, readableInstant24);
        org.joda.time.Duration duration27 = duration25.withMillis((-1L));
        mutableDateTime6.add((org.joda.time.ReadableDuration) duration27, 0);
        org.joda.time.Instant instant30 = new org.joda.time.Instant();
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.Duration duration33 = new org.joda.time.Duration(readableInstant31, readableInstant32);
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.PeriodType periodType35 = null;
        org.joda.time.Period period36 = duration33.toPeriodTo(readableInstant34, periodType35);
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.ReadableInstant readableInstant38 = null;
        org.joda.time.Duration duration39 = new org.joda.time.Duration(readableInstant37, readableInstant38);
        long long40 = duration39.getMillis();
        boolean boolean41 = duration33.isShorterThan((org.joda.time.ReadableDuration) duration39);
        org.joda.time.Instant instant42 = instant30.minus((org.joda.time.ReadableDuration) duration33);
        mutableDateTime6.setMillis((org.joda.time.ReadableInstant) instant30);
        long long44 = instant30.getMillis();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime6 and instant30", (mutableDateTime6.compareTo(instant30) == 0) == mutableDateTime6.equals(instant30));
    }

    @Test
    public void test25() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test25");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((long) 0, chronology2);
        org.joda.time.Chronology chronology4 = localTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField5 = chronology4.weekyearOfCentury();
        org.joda.time.DurationField durationField6 = chronology4.weekyears();
        org.joda.time.DurationField durationField7 = chronology4.seconds();
        org.joda.time.Chronology chronology8 = chronology4.withUTC();
        org.joda.time.DateTimeField dateTimeField9 = chronology4.hourOfDay();
        org.joda.time.DurationField durationField10 = chronology4.years();
        org.joda.time.tz.NameProvider nameProvider11 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime((long) 0, chronology14);
        org.joda.time.Chronology chronology16 = localTime15.getChronology();
        org.joda.time.DateTimeField dateTimeField17 = chronology16.weekyearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime18 = org.joda.time.MutableDateTime.now(chronology16);
        org.joda.time.DateTimeField dateTimeField19 = chronology16.monthOfYear();
        java.util.Locale locale20 = java.util.Locale.getDefault();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket22 = new org.joda.time.format.DateTimeParserBucket((long) 28, chronology16, locale20, (java.lang.Integer) 0);
        java.lang.String str25 = nameProvider11.getShortName(locale20, "22", "Chinese");
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((long) 3, chronology27);
        org.joda.time.DateTime.Property property29 = dateTime28.dayOfYear();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.DateMidnight dateMidnight31 = new org.joda.time.DateMidnight((java.lang.Object) dateTime28, chronology30);
        org.joda.time.MutableDateTime mutableDateTime32 = dateTime28.toMutableDateTime();
        mutableDateTime32.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property35 = mutableDateTime32.dayOfWeek();
        org.joda.time.MutableDateTime.Property property36 = mutableDateTime32.year();
        java.util.TimeZone timeZone37 = null;
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forTimeZone(timeZone37);
        mutableDateTime32.setZone(dateTimeZone38);
        java.util.Locale locale41 = java.util.Locale.TAIWAN;
        java.lang.String str42 = dateTimeZone38.getShortName((long) 64, locale41);
        java.lang.String str45 = nameProvider11.getName(locale41, "P1W", "Wochentag");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket46 = new org.joda.time.format.DateTimeParserBucket(3597523200000L, chronology4, locale41);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on durationField6 and durationField10", (durationField6.compareTo(durationField10) == 0) == durationField6.equals(durationField10));
    }

    @Test
    public void test26() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test26");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((long) 0, chronology2);
        org.joda.time.Chronology chronology4 = localTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField5 = chronology4.weekyearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime6 = org.joda.time.MutableDateTime.now(chronology4);
        org.joda.time.DateTimeField dateTimeField7 = chronology4.monthOfYear();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) 1, chronology4);
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Duration duration11 = new org.joda.time.Duration(readableInstant9, readableInstant10);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.PeriodType periodType13 = null;
        org.joda.time.Period period14 = duration11.toPeriodTo(readableInstant12, periodType13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.Duration duration17 = new org.joda.time.Duration(readableInstant15, readableInstant16);
        long long18 = duration17.getMillis();
        boolean boolean19 = duration11.isShorterThan((org.joda.time.ReadableDuration) duration17);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) 3, chronology21);
        org.joda.time.DateTime.Property property23 = dateTime22.dayOfYear();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateMidnight dateMidnight25 = new org.joda.time.DateMidnight((java.lang.Object) dateTime22, chronology24);
        org.joda.time.MutableDateTime mutableDateTime26 = dateTime22.toMutableDateTime();
        mutableDateTime26.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property29 = mutableDateTime26.dayOfWeek();
        org.joda.time.MutableDateTime.Property property30 = mutableDateTime26.year();
        org.joda.time.MutableDateTime.Property property31 = mutableDateTime26.weekyear();
        boolean boolean32 = duration11.equals((java.lang.Object) mutableDateTime26);
        mutableDateTime26.addMonths((int) ' ');
        mutableDateTime26.add((long) (byte) 10);
        org.joda.time.Period period37 = org.joda.time.Period.ZERO;
        org.joda.time.Period period38 = period37.normalizedStandard();
        org.joda.time.Period period40 = period37.plusHours(2);
        java.time.chrono.IsoEra isoEra41 = java.time.chrono.IsoEra.CE;
        boolean boolean42 = period40.equals((java.lang.Object) isoEra41);
        int int43 = period40.getMinutes();
        mutableDateTime26.add((org.joda.time.ReadablePeriod) period40);
        java.util.TimeZone timeZone46 = null;
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.forTimeZone(timeZone46);
        org.joda.time.DateMidnight dateMidnight48 = new org.joda.time.DateMidnight((long) 1970, dateTimeZone47);
        long long51 = dateTimeZone47.convertLocalToUTC((long) 3, false);
        long long54 = dateTimeZone47.convertLocalToUTC(0L, true);
        mutableDateTime26.setZoneRetainFields(dateTimeZone47);
        java.lang.String str56 = dateTimeZone47.toString();
        org.joda.time.chrono.EthiopicChronology ethiopicChronology57 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone47);
        org.joda.time.DateTimeField dateTimeField58 = ethiopicChronology57.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone59 = ethiopicChronology57.getZone();
        org.joda.time.DateTimeField dateTimeField60 = ethiopicChronology57.centuryOfEra();
        org.joda.time.DateTime dateTime61 = dateTime8.withChronology((org.joda.time.Chronology) ethiopicChronology57);
        org.joda.time.DateTime dateTime62 = dateTime61.toDateTimeISO();
        java.util.Date date63 = dateTime61.toDate();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime8 and dateTime62", (dateTime8.compareTo(dateTime62) == 0) == dateTime8.equals(dateTime62));
    }

    @Test
    public void test27() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test27");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 3, chronology1);
        org.joda.time.DateTime.Property property3 = dateTime2.dayOfYear();
        org.joda.time.Interval interval4 = property3.toInterval();
        org.joda.time.DateTimeField dateTimeField5 = property3.getField();
        org.joda.time.DateTime dateTime6 = property3.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime7 = property3.roundCeilingCopy();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.LocalTime localTime10 = new org.joda.time.LocalTime((long) 0, chronology9);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) 3, chronology12);
        org.joda.time.DateTime.Property property14 = dateTime13.dayOfYear();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight((java.lang.Object) dateTime13, chronology15);
        org.joda.time.DateTime dateTime17 = localTime10.toDateTime((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.LocalTime localTime19 = localTime10.plusHours(3);
        org.joda.time.Chronology chronology20 = localTime10.getChronology();
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight((java.lang.Object) dateTime7, chronology20);
        org.joda.time.DurationField durationField22 = chronology20.minutes();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime7 and dateMidnight21", (dateTime7.compareTo(dateMidnight21) == 0) == dateTime7.equals(dateMidnight21));
    }

    @Test
    public void test28() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test28");
        org.joda.time.DurationFieldType durationFieldType1 = org.joda.time.DurationFieldType.weeks();
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.Duration duration4 = new org.joda.time.Duration(readableInstant2, readableInstant3);
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.PeriodType periodType6 = null;
        org.joda.time.Period period7 = duration4.toPeriodTo(readableInstant5, periodType6);
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.Duration duration10 = new org.joda.time.Duration(readableInstant8, readableInstant9);
        long long11 = duration10.getMillis();
        boolean boolean12 = duration4.isShorterThan((org.joda.time.ReadableDuration) duration10);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) 3, chronology14);
        org.joda.time.DateTime.Property property16 = dateTime15.dayOfYear();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight((java.lang.Object) dateTime15, chronology17);
        org.joda.time.MutableDateTime mutableDateTime19 = dateTime15.toMutableDateTime();
        mutableDateTime19.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime19.dayOfWeek();
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime19.year();
        org.joda.time.MutableDateTime.Property property24 = mutableDateTime19.weekyear();
        boolean boolean25 = duration4.equals((java.lang.Object) mutableDateTime19);
        mutableDateTime19.addMonths((int) ' ');
        mutableDateTime19.add((long) (byte) 10);
        org.joda.time.Period period30 = org.joda.time.Period.ZERO;
        org.joda.time.Period period31 = period30.normalizedStandard();
        org.joda.time.Period period33 = period30.plusHours(2);
        java.time.chrono.IsoEra isoEra34 = java.time.chrono.IsoEra.CE;
        boolean boolean35 = period33.equals((java.lang.Object) isoEra34);
        int int36 = period33.getMinutes();
        mutableDateTime19.add((org.joda.time.ReadablePeriod) period33);
        java.util.TimeZone timeZone39 = null;
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forTimeZone(timeZone39);
        org.joda.time.DateMidnight dateMidnight41 = new org.joda.time.DateMidnight((long) 1970, dateTimeZone40);
        long long44 = dateTimeZone40.convertLocalToUTC((long) 3, false);
        long long47 = dateTimeZone40.convertLocalToUTC(0L, true);
        mutableDateTime19.setZoneRetainFields(dateTimeZone40);
        java.lang.String str49 = dateTimeZone40.toString();
        org.joda.time.chrono.EthiopicChronology ethiopicChronology50 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone40);
        org.joda.time.DateTimeField dateTimeField51 = ethiopicChronology50.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone52 = ethiopicChronology50.getZone();
        org.joda.time.DateTimeField dateTimeField53 = ethiopicChronology50.era();
        org.joda.time.DateTimeField dateTimeField54 = ethiopicChronology50.secondOfDay();
        org.joda.time.DateTimeField dateTimeField55 = ethiopicChronology50.minuteOfHour();
        org.joda.time.DurationField durationField56 = ethiopicChronology50.months();
        org.joda.time.DateTimeField dateTimeField57 = ethiopicChronology50.minuteOfDay();
        boolean boolean58 = durationFieldType1.isSupported((org.joda.time.Chronology) ethiopicChronology50);
        org.joda.time.MutableDateTime mutableDateTime59 = new org.joda.time.MutableDateTime(1000L, (org.joda.time.Chronology) ethiopicChronology50);
        org.joda.time.DurationField durationField60 = ethiopicChronology50.eras();
        org.joda.time.DateTimeField dateTimeField61 = ethiopicChronology50.millisOfSecond();
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField56 and durationField60", Math.signum(durationField56.compareTo(durationField60)) == -Math.signum(durationField60.compareTo(durationField56)));
    }

    @Test
    public void test29() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test29");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((long) 0, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) 3, chronology4);
        org.joda.time.DateTime.Property property6 = dateTime5.dayOfYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateMidnight dateMidnight8 = new org.joda.time.DateMidnight((java.lang.Object) dateTime5, chronology7);
        org.joda.time.DateTime dateTime9 = localTime2.toDateTime((org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTime dateTime11 = dateTime9.minusMillis((int) (byte) 0);
        org.joda.time.DateTime dateTime13 = dateTime9.withYearOfCentury((int) (byte) 10);
        org.joda.time.DateTime.Property property14 = dateTime13.hourOfDay();
        org.joda.time.DateTime dateTime16 = dateTime13.minusDays((int) (short) 10);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.Duration duration19 = new org.joda.time.Duration(readableInstant17, readableInstant18);
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.PeriodType periodType21 = null;
        org.joda.time.Period period22 = duration19.toPeriodTo(readableInstant20, periodType21);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.Duration duration25 = new org.joda.time.Duration(readableInstant23, readableInstant24);
        long long26 = duration25.getMillis();
        boolean boolean27 = duration19.isShorterThan((org.joda.time.ReadableDuration) duration25);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((long) 3, chronology29);
        org.joda.time.DateTime.Property property31 = dateTime30.dayOfYear();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.DateMidnight dateMidnight33 = new org.joda.time.DateMidnight((java.lang.Object) dateTime30, chronology32);
        org.joda.time.MutableDateTime mutableDateTime34 = dateTime30.toMutableDateTime();
        mutableDateTime34.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property37 = mutableDateTime34.dayOfWeek();
        org.joda.time.MutableDateTime.Property property38 = mutableDateTime34.year();
        org.joda.time.MutableDateTime.Property property39 = mutableDateTime34.weekyear();
        boolean boolean40 = duration19.equals((java.lang.Object) mutableDateTime34);
        mutableDateTime34.addMonths((int) ' ');
        mutableDateTime34.add((long) (byte) 10);
        org.joda.time.Period period45 = org.joda.time.Period.ZERO;
        org.joda.time.Period period46 = period45.normalizedStandard();
        org.joda.time.Period period48 = period45.plusHours(2);
        java.time.chrono.IsoEra isoEra49 = java.time.chrono.IsoEra.CE;
        boolean boolean50 = period48.equals((java.lang.Object) isoEra49);
        int int51 = period48.getMinutes();
        mutableDateTime34.add((org.joda.time.ReadablePeriod) period48);
        java.util.TimeZone timeZone54 = null;
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.forTimeZone(timeZone54);
        org.joda.time.DateMidnight dateMidnight56 = new org.joda.time.DateMidnight((long) 1970, dateTimeZone55);
        long long59 = dateTimeZone55.convertLocalToUTC((long) 3, false);
        long long62 = dateTimeZone55.convertLocalToUTC(0L, true);
        mutableDateTime34.setZoneRetainFields(dateTimeZone55);
        java.lang.String str64 = dateTimeZone55.toString();
        org.joda.time.chrono.EthiopicChronology ethiopicChronology65 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone55);
        org.joda.time.DateTimeField dateTimeField66 = ethiopicChronology65.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone67 = ethiopicChronology65.getZone();
        org.joda.time.DateTimeField dateTimeField68 = ethiopicChronology65.era();
        org.joda.time.DateTimeField dateTimeField69 = ethiopicChronology65.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone70 = ethiopicChronology65.getZone();
        org.joda.time.DateTime dateTime71 = dateTime16.toDateTime((org.joda.time.Chronology) ethiopicChronology65);
        org.joda.time.DurationField durationField72 = ethiopicChronology65.centuries();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime16 and dateTime71", (dateTime16.compareTo(dateTime71) == 0) == dateTime16.equals(dateTime71));
    }

    @Test
    public void test30() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test30");
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.Duration duration3 = new org.joda.time.Duration(readableInstant1, readableInstant2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.PeriodType periodType5 = null;
        org.joda.time.Period period6 = duration3.toPeriodTo(readableInstant4, periodType5);
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.Duration duration9 = new org.joda.time.Duration(readableInstant7, readableInstant8);
        long long10 = duration9.getMillis();
        boolean boolean11 = duration3.isShorterThan((org.joda.time.ReadableDuration) duration9);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) 3, chronology13);
        org.joda.time.DateTime.Property property15 = dateTime14.dayOfYear();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight((java.lang.Object) dateTime14, chronology16);
        org.joda.time.MutableDateTime mutableDateTime18 = dateTime14.toMutableDateTime();
        mutableDateTime18.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime18.dayOfWeek();
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime18.year();
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime18.weekyear();
        boolean boolean24 = duration3.equals((java.lang.Object) mutableDateTime18);
        mutableDateTime18.addMonths((int) ' ');
        mutableDateTime18.add((long) (byte) 10);
        org.joda.time.Period period29 = org.joda.time.Period.ZERO;
        org.joda.time.Period period30 = period29.normalizedStandard();
        org.joda.time.Period period32 = period29.plusHours(2);
        java.time.chrono.IsoEra isoEra33 = java.time.chrono.IsoEra.CE;
        boolean boolean34 = period32.equals((java.lang.Object) isoEra33);
        int int35 = period32.getMinutes();
        mutableDateTime18.add((org.joda.time.ReadablePeriod) period32);
        java.util.TimeZone timeZone38 = null;
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forTimeZone(timeZone38);
        org.joda.time.DateMidnight dateMidnight40 = new org.joda.time.DateMidnight((long) 1970, dateTimeZone39);
        long long43 = dateTimeZone39.convertLocalToUTC((long) 3, false);
        long long46 = dateTimeZone39.convertLocalToUTC(0L, true);
        mutableDateTime18.setZoneRetainFields(dateTimeZone39);
        java.lang.String str48 = dateTimeZone39.toString();
        org.joda.time.chrono.EthiopicChronology ethiopicChronology49 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone39);
        org.joda.time.DateTimeField dateTimeField50 = ethiopicChronology49.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone51 = ethiopicChronology49.getZone();
        org.joda.time.DateTimeField dateTimeField52 = ethiopicChronology49.era();
        org.joda.time.DateTimeField dateTimeField53 = ethiopicChronology49.secondOfDay();
        org.joda.time.DateTimeField dateTimeField54 = ethiopicChronology49.minuteOfHour();
        org.joda.time.DurationField durationField55 = ethiopicChronology49.months();
        org.joda.time.DateTimeField dateTimeField56 = ethiopicChronology49.monthOfYear();
        org.joda.time.DateMidnight dateMidnight57 = new org.joda.time.DateMidnight((long) 5, (org.joda.time.Chronology) ethiopicChronology49);
        int int58 = dateMidnight57.getSecondOfDay();
        org.joda.time.DateMidnight.Property property59 = dateMidnight57.yearOfEra();
        org.joda.time.DateMidnight dateMidnight61 = property59.setCopy(22);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateMidnight17 and dateMidnight57", (dateMidnight17.compareTo(dateMidnight57) == 0) == dateMidnight17.equals(dateMidnight57));
    }

    @Test
    public void test31() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test31");
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.Duration duration4 = new org.joda.time.Duration(readableInstant2, readableInstant3);
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.PeriodType periodType6 = null;
        org.joda.time.Period period7 = duration4.toPeriodTo(readableInstant5, periodType6);
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.Duration duration10 = new org.joda.time.Duration(readableInstant8, readableInstant9);
        long long11 = duration10.getMillis();
        boolean boolean12 = duration4.isShorterThan((org.joda.time.ReadableDuration) duration10);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) 3, chronology14);
        org.joda.time.DateTime.Property property16 = dateTime15.dayOfYear();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight((java.lang.Object) dateTime15, chronology17);
        org.joda.time.MutableDateTime mutableDateTime19 = dateTime15.toMutableDateTime();
        mutableDateTime19.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime19.dayOfWeek();
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime19.year();
        org.joda.time.MutableDateTime.Property property24 = mutableDateTime19.weekyear();
        boolean boolean25 = duration4.equals((java.lang.Object) mutableDateTime19);
        mutableDateTime19.addMonths((int) ' ');
        mutableDateTime19.add((long) (byte) 10);
        org.joda.time.Period period30 = org.joda.time.Period.ZERO;
        org.joda.time.Period period31 = period30.normalizedStandard();
        org.joda.time.Period period33 = period30.plusHours(2);
        java.time.chrono.IsoEra isoEra34 = java.time.chrono.IsoEra.CE;
        boolean boolean35 = period33.equals((java.lang.Object) isoEra34);
        int int36 = period33.getMinutes();
        mutableDateTime19.add((org.joda.time.ReadablePeriod) period33);
        java.util.TimeZone timeZone39 = null;
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forTimeZone(timeZone39);
        org.joda.time.DateMidnight dateMidnight41 = new org.joda.time.DateMidnight((long) 1970, dateTimeZone40);
        long long44 = dateTimeZone40.convertLocalToUTC((long) 3, false);
        long long47 = dateTimeZone40.convertLocalToUTC(0L, true);
        mutableDateTime19.setZoneRetainFields(dateTimeZone40);
        java.lang.String str49 = dateTimeZone40.toString();
        org.joda.time.chrono.EthiopicChronology ethiopicChronology50 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone40);
        org.joda.time.DateTimeField dateTimeField51 = ethiopicChronology50.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone52 = ethiopicChronology50.getZone();
        org.joda.time.DateTimeField dateTimeField53 = ethiopicChronology50.era();
        org.joda.time.DateTimeField dateTimeField54 = ethiopicChronology50.secondOfDay();
        org.joda.time.DateTimeField dateTimeField55 = ethiopicChronology50.minuteOfHour();
        org.joda.time.DurationField durationField56 = ethiopicChronology50.months();
        org.joda.time.DurationField durationField57 = ethiopicChronology50.eras();
        org.joda.time.MutableInterval mutableInterval58 = new org.joda.time.MutableInterval((long) 16384, 34476909000000L, (org.joda.time.Chronology) ethiopicChronology50);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField56 and durationField57", Math.signum(durationField56.compareTo(durationField57)) == -Math.signum(durationField57.compareTo(durationField56)));
    }

    @Test
    public void test32() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test32");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Duration duration2 = new org.joda.time.Duration(readableInstant0, readableInstant1);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = duration2.toPeriodTo(readableInstant3, periodType4);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.Duration duration8 = new org.joda.time.Duration(readableInstant6, readableInstant7);
        long long9 = duration8.getMillis();
        boolean boolean10 = duration2.isShorterThan((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) 3, chronology12);
        org.joda.time.DateTime.Property property14 = dateTime13.dayOfYear();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight((java.lang.Object) dateTime13, chronology15);
        org.joda.time.MutableDateTime mutableDateTime17 = dateTime13.toMutableDateTime();
        mutableDateTime17.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime17.dayOfWeek();
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime17.year();
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime17.weekyear();
        boolean boolean23 = duration2.equals((java.lang.Object) mutableDateTime17);
        mutableDateTime17.addMonths((int) ' ');
        mutableDateTime17.add((long) (byte) 10);
        org.joda.time.Period period28 = org.joda.time.Period.ZERO;
        org.joda.time.Period period29 = period28.normalizedStandard();
        org.joda.time.Period period31 = period28.plusHours(2);
        java.time.chrono.IsoEra isoEra32 = java.time.chrono.IsoEra.CE;
        boolean boolean33 = period31.equals((java.lang.Object) isoEra32);
        int int34 = period31.getMinutes();
        mutableDateTime17.add((org.joda.time.ReadablePeriod) period31);
        java.util.TimeZone timeZone37 = null;
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forTimeZone(timeZone37);
        org.joda.time.DateMidnight dateMidnight39 = new org.joda.time.DateMidnight((long) 1970, dateTimeZone38);
        long long42 = dateTimeZone38.convertLocalToUTC((long) 3, false);
        long long45 = dateTimeZone38.convertLocalToUTC(0L, true);
        mutableDateTime17.setZoneRetainFields(dateTimeZone38);
        java.lang.String str47 = dateTimeZone38.toString();
        org.joda.time.chrono.EthiopicChronology ethiopicChronology48 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone38);
        org.joda.time.DateTimeField dateTimeField49 = ethiopicChronology48.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone50 = ethiopicChronology48.getZone();
        org.joda.time.DateTimeField dateTimeField51 = ethiopicChronology48.era();
        org.joda.time.DurationField durationField52 = ethiopicChronology48.eras();
        org.joda.time.DateTimeField dateTimeField53 = ethiopicChronology48.halfdayOfDay();
        org.joda.time.DurationField durationField54 = ethiopicChronology48.centuries();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField52, durationField54, and durationField52", !(durationField52.compareTo(durationField54) == 0) || (Math.signum(durationField52.compareTo(durationField52)) == Math.signum(durationField54.compareTo(durationField52))));
    }

    @Test
    public void test33() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test33");
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.Duration duration3 = new org.joda.time.Duration(readableInstant1, readableInstant2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.PeriodType periodType5 = null;
        org.joda.time.Period period6 = duration3.toPeriodTo(readableInstant4, periodType5);
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.Duration duration9 = new org.joda.time.Duration(readableInstant7, readableInstant8);
        long long10 = duration9.getMillis();
        boolean boolean11 = duration3.isShorterThan((org.joda.time.ReadableDuration) duration9);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) 3, chronology13);
        org.joda.time.DateTime.Property property15 = dateTime14.dayOfYear();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight((java.lang.Object) dateTime14, chronology16);
        org.joda.time.MutableDateTime mutableDateTime18 = dateTime14.toMutableDateTime();
        mutableDateTime18.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime18.dayOfWeek();
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime18.year();
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime18.weekyear();
        boolean boolean24 = duration3.equals((java.lang.Object) mutableDateTime18);
        mutableDateTime18.addMonths((int) ' ');
        mutableDateTime18.add((long) (byte) 10);
        org.joda.time.Period period29 = org.joda.time.Period.ZERO;
        org.joda.time.Period period30 = period29.normalizedStandard();
        org.joda.time.Period period32 = period29.plusHours(2);
        java.time.chrono.IsoEra isoEra33 = java.time.chrono.IsoEra.CE;
        boolean boolean34 = period32.equals((java.lang.Object) isoEra33);
        int int35 = period32.getMinutes();
        mutableDateTime18.add((org.joda.time.ReadablePeriod) period32);
        java.util.TimeZone timeZone38 = null;
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forTimeZone(timeZone38);
        org.joda.time.DateMidnight dateMidnight40 = new org.joda.time.DateMidnight((long) 1970, dateTimeZone39);
        long long43 = dateTimeZone39.convertLocalToUTC((long) 3, false);
        long long46 = dateTimeZone39.convertLocalToUTC(0L, true);
        mutableDateTime18.setZoneRetainFields(dateTimeZone39);
        java.lang.String str48 = dateTimeZone39.toString();
        org.joda.time.chrono.EthiopicChronology ethiopicChronology49 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone39);
        org.joda.time.DateTimeField dateTimeField50 = ethiopicChronology49.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone51 = ethiopicChronology49.getZone();
        org.joda.time.DateTimeField dateTimeField52 = ethiopicChronology49.era();
        org.joda.time.DateTimeField dateTimeField53 = ethiopicChronology49.secondOfDay();
        org.joda.time.DateTimeField dateTimeField54 = ethiopicChronology49.minuteOfHour();
        org.joda.time.DurationField durationField55 = ethiopicChronology49.months();
        org.joda.time.DateTimeField dateTimeField56 = ethiopicChronology49.monthOfYear();
        org.joda.time.DateMidnight dateMidnight57 = new org.joda.time.DateMidnight((long) 5, (org.joda.time.Chronology) ethiopicChronology49);
        org.joda.time.DateTimeField dateTimeField58 = ethiopicChronology49.hourOfHalfday();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateMidnight17 and dateMidnight57", (dateMidnight17.compareTo(dateMidnight57) == 0) == dateMidnight17.equals(dateMidnight57));
    }

    @Test
    public void test34() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test34");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Duration duration2 = new org.joda.time.Duration(readableInstant0, readableInstant1);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = duration2.toPeriodTo(readableInstant3, periodType4);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.Duration duration8 = new org.joda.time.Duration(readableInstant6, readableInstant7);
        long long9 = duration8.getMillis();
        boolean boolean10 = duration2.isShorterThan((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) 3, chronology12);
        org.joda.time.DateTime.Property property14 = dateTime13.dayOfYear();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight((java.lang.Object) dateTime13, chronology15);
        org.joda.time.MutableDateTime mutableDateTime17 = dateTime13.toMutableDateTime();
        mutableDateTime17.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime17.dayOfWeek();
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime17.year();
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime17.weekyear();
        boolean boolean23 = duration2.equals((java.lang.Object) mutableDateTime17);
        mutableDateTime17.addMonths((int) ' ');
        mutableDateTime17.add((long) (byte) 10);
        org.joda.time.Instant instant28 = mutableDateTime17.toInstant();
        org.joda.time.Duration duration30 = org.joda.time.Duration.standardMinutes((long) (byte) 1);
        org.joda.time.Instant instant31 = instant28.plus((org.joda.time.ReadableDuration) duration30);
        long long32 = duration30.getStandardMinutes();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime17 and instant28", (mutableDateTime17.compareTo(instant28) == 0) == mutableDateTime17.equals(instant28));
    }

    @Test
    public void test35() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test35");
        java.util.TimeZone timeZone3 = null;
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight((long) 1970, dateTimeZone4);
        long long8 = dateTimeZone4.convertLocalToUTC((long) 3, false);
        org.joda.time.Interval interval9 = new org.joda.time.Interval(10L, (long) 2097, dateTimeZone4);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(dateTimeZone4);
        org.joda.time.MutableDateTime mutableDateTime11 = dateTime10.toMutableDateTime();
        int int12 = dateTime10.getMonthOfYear();
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.Duration duration15 = new org.joda.time.Duration(readableInstant13, readableInstant14);
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.PeriodType periodType17 = null;
        org.joda.time.Period period18 = duration15.toPeriodTo(readableInstant16, periodType17);
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.Duration duration21 = new org.joda.time.Duration(readableInstant19, readableInstant20);
        long long22 = duration21.getMillis();
        boolean boolean23 = duration15.isShorterThan((org.joda.time.ReadableDuration) duration21);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((long) 3, chronology25);
        org.joda.time.DateTime.Property property27 = dateTime26.dayOfYear();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateMidnight dateMidnight29 = new org.joda.time.DateMidnight((java.lang.Object) dateTime26, chronology28);
        org.joda.time.MutableDateTime mutableDateTime30 = dateTime26.toMutableDateTime();
        mutableDateTime30.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property33 = mutableDateTime30.dayOfWeek();
        org.joda.time.MutableDateTime.Property property34 = mutableDateTime30.year();
        org.joda.time.MutableDateTime.Property property35 = mutableDateTime30.weekyear();
        boolean boolean36 = duration15.equals((java.lang.Object) mutableDateTime30);
        mutableDateTime30.addMonths((int) ' ');
        mutableDateTime30.add((long) (byte) 10);
        org.joda.time.Period period41 = org.joda.time.Period.ZERO;
        org.joda.time.Period period42 = period41.normalizedStandard();
        org.joda.time.Period period44 = period41.plusHours(2);
        java.time.chrono.IsoEra isoEra45 = java.time.chrono.IsoEra.CE;
        boolean boolean46 = period44.equals((java.lang.Object) isoEra45);
        int int47 = period44.getMinutes();
        mutableDateTime30.add((org.joda.time.ReadablePeriod) period44);
        java.util.TimeZone timeZone50 = null;
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.forTimeZone(timeZone50);
        org.joda.time.DateMidnight dateMidnight52 = new org.joda.time.DateMidnight((long) 1970, dateTimeZone51);
        long long55 = dateTimeZone51.convertLocalToUTC((long) 3, false);
        long long58 = dateTimeZone51.convertLocalToUTC(0L, true);
        mutableDateTime30.setZoneRetainFields(dateTimeZone51);
        java.lang.String str60 = dateTimeZone51.toString();
        org.joda.time.chrono.EthiopicChronology ethiopicChronology61 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone51);
        org.joda.time.DateTimeField dateTimeField62 = ethiopicChronology61.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone63 = ethiopicChronology61.getZone();
        org.joda.time.DateTimeField dateTimeField64 = ethiopicChronology61.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField65 = ethiopicChronology61.minuteOfDay();
        org.joda.time.Chronology chronology66 = ethiopicChronology61.withUTC();
        org.joda.time.DateTimeField dateTimeField67 = ethiopicChronology61.secondOfMinute();
        org.joda.time.Period period68 = org.joda.time.Period.ZERO;
        org.joda.time.Period period69 = period68.normalizedStandard();
        org.joda.time.Period period71 = period68.plusHours(2);
        int int72 = period68.getDays();
        org.joda.time.Period period74 = period68.plusWeeks(366);
        long long77 = ethiopicChronology61.add((org.joda.time.ReadablePeriod) period74, (long) ' ', (-100));
        org.joda.time.DateTime dateTime78 = dateTime10.toDateTime((org.joda.time.Chronology) ethiopicChronology61);
        org.joda.time.DateTime dateTime79 = dateTime10.toDateTime();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime11 and dateTime78", (mutableDateTime11.compareTo(dateTime78) == 0) == mutableDateTime11.equals(dateTime78));
    }

    @Test
    public void test36() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test36");
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.Duration duration3 = new org.joda.time.Duration(readableInstant1, readableInstant2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.PeriodType periodType5 = null;
        org.joda.time.Period period6 = duration3.toPeriodTo(readableInstant4, periodType5);
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.Duration duration9 = new org.joda.time.Duration(readableInstant7, readableInstant8);
        long long10 = duration9.getMillis();
        boolean boolean11 = duration3.isShorterThan((org.joda.time.ReadableDuration) duration9);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) 3, chronology13);
        org.joda.time.DateTime.Property property15 = dateTime14.dayOfYear();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight((java.lang.Object) dateTime14, chronology16);
        org.joda.time.MutableDateTime mutableDateTime18 = dateTime14.toMutableDateTime();
        mutableDateTime18.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime18.dayOfWeek();
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime18.year();
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime18.weekyear();
        boolean boolean24 = duration3.equals((java.lang.Object) mutableDateTime18);
        mutableDateTime18.addMonths((int) ' ');
        mutableDateTime18.add((long) (byte) 10);
        org.joda.time.Period period29 = org.joda.time.Period.ZERO;
        org.joda.time.Period period30 = period29.normalizedStandard();
        org.joda.time.Period period32 = period29.plusHours(2);
        java.time.chrono.IsoEra isoEra33 = java.time.chrono.IsoEra.CE;
        boolean boolean34 = period32.equals((java.lang.Object) isoEra33);
        int int35 = period32.getMinutes();
        mutableDateTime18.add((org.joda.time.ReadablePeriod) period32);
        java.util.TimeZone timeZone38 = null;
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forTimeZone(timeZone38);
        org.joda.time.DateMidnight dateMidnight40 = new org.joda.time.DateMidnight((long) 1970, dateTimeZone39);
        long long43 = dateTimeZone39.convertLocalToUTC((long) 3, false);
        long long46 = dateTimeZone39.convertLocalToUTC(0L, true);
        mutableDateTime18.setZoneRetainFields(dateTimeZone39);
        java.lang.String str48 = dateTimeZone39.toString();
        org.joda.time.chrono.EthiopicChronology ethiopicChronology49 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone39);
        org.joda.time.DateTimeField dateTimeField50 = ethiopicChronology49.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone51 = ethiopicChronology49.getZone();
        org.joda.time.DateTimeField dateTimeField52 = ethiopicChronology49.era();
        org.joda.time.DateTimeField dateTimeField53 = ethiopicChronology49.secondOfDay();
        org.joda.time.DateTimeField dateTimeField54 = ethiopicChronology49.minuteOfHour();
        org.joda.time.DurationField durationField55 = ethiopicChronology49.months();
        org.joda.time.DateTimeField dateTimeField56 = ethiopicChronology49.monthOfYear();
        org.joda.time.DateMidnight dateMidnight57 = new org.joda.time.DateMidnight((long) 5, (org.joda.time.Chronology) ethiopicChronology49);
        org.joda.time.DurationField durationField58 = ethiopicChronology49.seconds();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateMidnight17 and dateMidnight57", (dateMidnight17.compareTo(dateMidnight57) == 0) == dateMidnight17.equals(dateMidnight57));
    }

    @Test
    public void test37() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test37");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalTime localTime4 = new org.joda.time.LocalTime((long) 0, chronology3);
        org.joda.time.Chronology chronology5 = localTime4.getChronology();
        java.util.Locale locale6 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale7 = java.util.Locale.GERMANY;
        java.lang.String str8 = locale6.getDisplayScript(locale7);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket10 = new org.joda.time.format.DateTimeParserBucket((long) 1970, chronology5, locale6, (java.lang.Integer) 1);
        org.joda.time.DateTimeField dateTimeField11 = chronology5.clockhourOfDay();
        org.joda.time.Period period16 = new org.joda.time.Period((int) '#', 0, 2, (int) (short) 100);
        org.joda.time.Period period18 = period16.withSeconds(12);
        int int19 = period18.getMillis();
        int[] intArray21 = chronology5.get((org.joda.time.ReadablePeriod) period18, (long) (byte) 10);
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) 2147483647, chronology5);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.Duration duration25 = new org.joda.time.Duration(readableInstant23, readableInstant24);
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.PeriodType periodType27 = null;
        org.joda.time.Period period28 = duration25.toPeriodTo(readableInstant26, periodType27);
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.Duration duration31 = new org.joda.time.Duration(readableInstant29, readableInstant30);
        long long32 = duration31.getMillis();
        boolean boolean33 = duration25.isShorterThan((org.joda.time.ReadableDuration) duration31);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((long) 3, chronology35);
        org.joda.time.DateTime.Property property37 = dateTime36.dayOfYear();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.DateMidnight dateMidnight39 = new org.joda.time.DateMidnight((java.lang.Object) dateTime36, chronology38);
        org.joda.time.MutableDateTime mutableDateTime40 = dateTime36.toMutableDateTime();
        mutableDateTime40.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property43 = mutableDateTime40.dayOfWeek();
        org.joda.time.MutableDateTime.Property property44 = mutableDateTime40.year();
        org.joda.time.MutableDateTime.Property property45 = mutableDateTime40.weekyear();
        boolean boolean46 = duration25.equals((java.lang.Object) mutableDateTime40);
        mutableDateTime40.addMonths((int) ' ');
        mutableDateTime40.add((long) (byte) 10);
        org.joda.time.Period period51 = org.joda.time.Period.ZERO;
        org.joda.time.Period period52 = period51.normalizedStandard();
        org.joda.time.Period period54 = period51.plusHours(2);
        java.time.chrono.IsoEra isoEra55 = java.time.chrono.IsoEra.CE;
        boolean boolean56 = period54.equals((java.lang.Object) isoEra55);
        int int57 = period54.getMinutes();
        mutableDateTime40.add((org.joda.time.ReadablePeriod) period54);
        java.util.TimeZone timeZone60 = null;
        org.joda.time.DateTimeZone dateTimeZone61 = org.joda.time.DateTimeZone.forTimeZone(timeZone60);
        org.joda.time.DateMidnight dateMidnight62 = new org.joda.time.DateMidnight((long) 1970, dateTimeZone61);
        long long65 = dateTimeZone61.convertLocalToUTC((long) 3, false);
        long long68 = dateTimeZone61.convertLocalToUTC(0L, true);
        mutableDateTime40.setZoneRetainFields(dateTimeZone61);
        java.lang.String str70 = dateTimeZone61.toString();
        org.joda.time.chrono.EthiopicChronology ethiopicChronology71 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone61);
        org.joda.time.DateTimeField dateTimeField72 = ethiopicChronology71.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone73 = ethiopicChronology71.getZone();
        org.joda.time.DateTimeField dateTimeField74 = ethiopicChronology71.era();
        org.joda.time.DateTimeField dateTimeField75 = ethiopicChronology71.secondOfDay();
        org.joda.time.DateTimeField dateTimeField76 = ethiopicChronology71.minuteOfHour();
        org.joda.time.DurationField durationField77 = ethiopicChronology71.months();
        org.joda.time.DateTimeField dateTimeField78 = ethiopicChronology71.monthOfYear();
        org.joda.time.LocalTime localTime79 = new org.joda.time.LocalTime((org.joda.time.Chronology) ethiopicChronology71);
        org.joda.time.DateTimeField dateTimeField80 = ethiopicChronology71.weekyearOfCentury();
        org.joda.time.DateTime dateTime81 = dateTime22.withChronology((org.joda.time.Chronology) ethiopicChronology71);
        org.joda.time.DateTimeField dateTimeField82 = ethiopicChronology71.dayOfMonth();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime22 and dateTime81", (dateTime22.compareTo(dateTime81) == 0) == dateTime22.equals(dateTime81));
    }

    @Test
    public void test38() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test38");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.time.LocalTime localTime6 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime7 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime6);
        java.time.LocalTime localTime12 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime13 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime12);
        java.time.temporal.ChronoField chronoField14 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime16 = localTime12.with((java.time.temporal.TemporalField) chronoField14, (long) (short) 1);
        long long17 = localTime6.getLong((java.time.temporal.TemporalField) chronoField14);
        java.time.LocalTime localTime19 = localTime6.withSecond((int) (short) 1);
        java.lang.Object obj21 = properties1.put((java.lang.Object) localTime19, (java.lang.Object) "117");
        java.lang.Object obj22 = properties1.clone();
        properties1.clear();
        org.joda.time.Weeks weeks24 = org.joda.time.Weeks.ONE;
        java.util.concurrent.TimeUnit timeUnit25 = java.util.concurrent.TimeUnit.NANOSECONDS;
        boolean boolean26 = weeks24.equals((java.lang.Object) timeUnit25);
        org.joda.time.MutablePeriod mutablePeriod27 = weeks24.toMutablePeriod();
        int int28 = mutablePeriod27.getSeconds();
        mutablePeriod27.addSeconds(10);
        org.joda.time.Weeks weeks32 = org.joda.time.Weeks.ONE;
        java.util.concurrent.TimeUnit timeUnit33 = java.util.concurrent.TimeUnit.NANOSECONDS;
        boolean boolean34 = weeks32.equals((java.lang.Object) timeUnit33);
        org.joda.time.MutablePeriod mutablePeriod35 = weeks32.toMutablePeriod();
        int int36 = mutablePeriod35.getSeconds();
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.ReadableInstant readableInstant38 = null;
        org.joda.time.Duration duration39 = new org.joda.time.Duration(readableInstant37, readableInstant38);
        long long40 = duration39.getMillis();
        org.joda.time.Duration duration42 = duration39.plus((long) (byte) 1);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.LocalTime localTime46 = new org.joda.time.LocalTime((long) 0, chronology45);
        org.joda.time.Chronology chronology47 = localTime46.getChronology();
        java.util.Locale locale48 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale49 = java.util.Locale.GERMANY;
        java.lang.String str50 = locale48.getDisplayScript(locale49);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket52 = new org.joda.time.format.DateTimeParserBucket((long) 1970, chronology47, locale48, (java.lang.Integer) 1);
        mutablePeriod35.setPeriod((org.joda.time.ReadableDuration) duration39, chronology47);
        mutablePeriod27.setPeriod(86399L, chronology47);
        org.joda.time.Chronology chronology55 = chronology47.withUTC();
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.DateTime dateTime58 = new org.joda.time.DateTime((long) 3, chronology57);
        org.joda.time.DateTime.Property property59 = dateTime58.dayOfYear();
        org.joda.time.Interval interval60 = property59.toInterval();
        org.joda.time.DateTimeField dateTimeField61 = property59.getField();
        org.joda.time.DateTime dateTime62 = property59.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime63 = property59.roundCeilingCopy();
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.LocalTime localTime66 = new org.joda.time.LocalTime((long) 0, chronology65);
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.DateTime dateTime69 = new org.joda.time.DateTime((long) 3, chronology68);
        org.joda.time.DateTime.Property property70 = dateTime69.dayOfYear();
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.DateMidnight dateMidnight72 = new org.joda.time.DateMidnight((java.lang.Object) dateTime69, chronology71);
        org.joda.time.DateTime dateTime73 = localTime66.toDateTime((org.joda.time.ReadableInstant) dateTime69);
        org.joda.time.LocalTime localTime75 = localTime66.plusHours(3);
        org.joda.time.Chronology chronology76 = localTime66.getChronology();
        org.joda.time.DateMidnight dateMidnight77 = new org.joda.time.DateMidnight((java.lang.Object) dateTime63, chronology76);
        java.lang.Object obj78 = properties1.put((java.lang.Object) chronology47, (java.lang.Object) dateTime63);
        org.joda.time.DurationField durationField79 = chronology47.weeks();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime63 and dateMidnight77", (dateTime63.compareTo(dateMidnight77) == 0) == dateTime63.equals(dateMidnight77));
    }

    @Test
    public void test39() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test39");
        java.util.GregorianCalendar gregorianCalendar5 = new java.util.GregorianCalendar(12, 4096, 7, (-1), (int) (short) 10);
        int int6 = gregorianCalendar5.getWeeksInWeekYear();
        java.lang.String str7 = gregorianCalendar5.getCalendarType();
        java.time.ZonedDateTime zonedDateTime8 = gregorianCalendar5.toZonedDateTime();
        java.util.Date date15 = new java.util.Date((int) 'a', 3, 0, (-1), (int) '/', 28);
        int int16 = date15.getTimezoneOffset();
        gregorianCalendar5.setGregorianChange(date15);
        java.util.GregorianCalendar gregorianCalendar23 = new java.util.GregorianCalendar(12, 4096, 7, (-1), (int) (short) 10);
        int int24 = gregorianCalendar23.getWeeksInWeekYear();
        java.lang.String str25 = gregorianCalendar23.getCalendarType();
        java.time.ZonedDateTime zonedDateTime26 = gregorianCalendar23.toZonedDateTime();
        java.util.Date date33 = new java.util.Date((int) 'a', 3, 0, (-1), (int) '/', 28);
        int int34 = date33.getTimezoneOffset();
        gregorianCalendar23.setGregorianChange(date33);
        boolean boolean36 = date15.after(date33);
        java.lang.String str37 = date15.toLocaleString();
        java.lang.String str38 = date15.toLocaleString();
        java.util.GregorianCalendar gregorianCalendar44 = new java.util.GregorianCalendar(12, 4096, 7, (-1), (int) (short) 10);
        int int45 = gregorianCalendar44.getWeeksInWeekYear();
        java.util.Date date46 = new java.util.Date();
        org.joda.time.LocalTime localTime47 = org.joda.time.LocalTime.fromDateFields(date46);
        gregorianCalendar44.setGregorianChange(date46);
        java.util.Date date49 = new java.util.Date();
        boolean boolean50 = date46.after(date49);
        boolean boolean51 = date15.after(date49);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on gregorianCalendar5 and gregorianCalendar44", (gregorianCalendar5.compareTo(gregorianCalendar44) == 0) == gregorianCalendar5.equals(gregorianCalendar44));
    }
}


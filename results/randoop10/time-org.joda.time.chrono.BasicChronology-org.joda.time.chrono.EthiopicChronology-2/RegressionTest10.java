import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest10 {

    public static boolean debug = false;

    @Test
    public void test5001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5001");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder4 = builder0.setDate(0, 0, (int) (byte) 100);
        java.util.Calendar.Builder builder8 = builder0.setDate((int) (byte) 10, 57, 0);
        java.util.Calendar calendar9 = builder0.build();
        java.util.Calendar.Builder builder14 = builder0.setTimeOfDay(10, (int) 'x', (int) '#', 25);
        java.util.Calendar.Builder builder19 = builder14.setTimeOfDay(1728000, 52, 2, (int) (byte) 10);
        java.util.Calendar.Builder builder24 = builder14.setTimeOfDay(34482, 21, (int) 'a', 34846);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(calendar9);
// flaky:         org.junit.Assert.assertEquals(calendar9.toString(), "java.util.GregorianCalendar[time=-61702041600035,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=35,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=14,MONTH=8,WEEK_OF_YEAR=39,WEEK_OF_MONTH=4,DAY_OF_MONTH=30,DAY_OF_YEAR=273,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=35,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder24);
    }

    @Test
    public void test5002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5002");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Duration duration2 = new org.joda.time.Duration(readableInstant0, readableInstant1);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = duration2.toPeriodTo(readableInstant3, periodType4);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.Duration duration8 = new org.joda.time.Duration(readableInstant6, readableInstant7);
        long long9 = duration8.getMillis();
        boolean boolean10 = duration2.isShorterThan((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) 3, chronology12);
        org.joda.time.DateTime.Property property14 = dateTime13.dayOfYear();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight((java.lang.Object) dateTime13, chronology15);
        org.joda.time.MutableDateTime mutableDateTime17 = dateTime13.toMutableDateTime();
        mutableDateTime17.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime17.dayOfWeek();
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime17.year();
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime17.weekyear();
        boolean boolean23 = duration2.equals((java.lang.Object) mutableDateTime17);
        mutableDateTime17.setYear(365);
        mutableDateTime17.add((long) 21);
        java.time.LocalDateTime localDateTime28 = java.time.LocalDateTime.now();
        java.time.temporal.ChronoField chronoField29 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime31 = localDateTime28.with((java.time.temporal.TemporalField) chronoField29, (long) 10);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.LocalTime localTime34 = new org.joda.time.LocalTime((long) 0, chronology33);
        org.joda.time.Chronology chronology35 = localTime34.getChronology();
        org.joda.time.DateTimeField dateTimeField36 = chronology35.weekyearOfCentury();
        org.joda.time.DurationField durationField37 = chronology35.weekyears();
        org.joda.time.DurationField durationField38 = chronology35.seconds();
        org.joda.time.Chronology chronology39 = chronology35.withUTC();
        boolean boolean40 = localDateChronoLocalDateTime31.equals((java.lang.Object) chronology35);
        org.joda.time.DateTimeField dateTimeField41 = chronology35.yearOfEra();
        mutableDateTime17.setRounding(dateTimeField41);
        int int43 = mutableDateTime17.getDayOfMonth();
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertTrue("'" + chronoField29 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField29.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime31);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
    }

    @Test
    public void test5003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5003");
        java.text.Format.Field field0 = null;
        java.text.FieldPosition fieldPosition1 = new java.text.FieldPosition(field0);
        fieldPosition1.setBeginIndex((int) (short) 100);
        java.text.Format.Field field4 = fieldPosition1.getFieldAttribute();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((long) 3, chronology6);
        org.joda.time.DateTime.Property property8 = dateTime7.dayOfYear();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight((java.lang.Object) dateTime7, chronology9);
        org.joda.time.MutableDateTime mutableDateTime11 = dateTime7.toMutableDateTime();
        mutableDateTime11.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime11.dayOfWeek();
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime11.year();
        org.joda.time.MutableDateTime.Property property16 = mutableDateTime11.weekyear();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) 3, chronology18);
        org.joda.time.Period period20 = org.joda.time.Period.ZERO;
        org.joda.time.Period period21 = period20.normalizedStandard();
        org.joda.time.Period period23 = period21.minusMinutes((int) ' ');
        org.joda.time.Period period25 = period23.minusMonths((int) (byte) 0);
        org.joda.time.PeriodType periodType26 = period25.getPeriodType();
        org.joda.time.DateTime dateTime27 = dateTime19.minus((org.joda.time.ReadablePeriod) period25);
        org.joda.time.DateTime dateTime29 = dateTime19.plusHours(34);
        org.joda.time.DateTime dateTime31 = dateTime19.plusMonths(5);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.LocalTime localTime34 = new org.joda.time.LocalTime((long) 0, chronology33);
        org.joda.time.Chronology chronology35 = localTime34.getChronology();
        org.joda.time.DateTimeField dateTimeField36 = chronology35.weekyearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime37 = org.joda.time.MutableDateTime.now(chronology35);
        mutableDateTime37.setWeekOfWeekyear((int) '#');
        mutableDateTime37.addHours(0);
        org.joda.time.Days days42 = org.joda.time.Days.daysBetween((org.joda.time.ReadableInstant) dateTime31, (org.joda.time.ReadableInstant) mutableDateTime37);
        long long43 = property16.getDifferenceAsLong((org.joda.time.ReadableInstant) mutableDateTime37);
        java.lang.String str44 = property16.getAsString();
        boolean boolean45 = fieldPosition1.equals((java.lang.Object) property16);
        java.lang.String str46 = property16.toString();
        org.junit.Assert.assertNull(field4);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(periodType26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(mutableDateTime37);
        org.junit.Assert.assertNotNull(days42);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 47L + "'", long43 == 47L);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "2070" + "'", str44, "2070");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "Property[weekyear]" + "'", str46, "Property[weekyear]");
    }

    @Test
    public void test5004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5004");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Duration duration2 = new org.joda.time.Duration(readableInstant0, readableInstant1);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = duration2.toPeriodTo(readableInstant3, periodType4);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.Duration duration8 = new org.joda.time.Duration(readableInstant6, readableInstant7);
        long long9 = duration8.getMillis();
        boolean boolean10 = duration2.isShorterThan((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) 3, chronology12);
        org.joda.time.DateTime.Property property14 = dateTime13.dayOfYear();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight((java.lang.Object) dateTime13, chronology15);
        org.joda.time.MutableDateTime mutableDateTime17 = dateTime13.toMutableDateTime();
        mutableDateTime17.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime17.dayOfWeek();
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime17.year();
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime17.weekyear();
        boolean boolean23 = duration2.equals((java.lang.Object) mutableDateTime17);
        mutableDateTime17.addMonths((int) ' ');
        mutableDateTime17.add((long) (byte) 10);
        org.joda.time.Period period28 = org.joda.time.Period.ZERO;
        org.joda.time.Period period29 = period28.normalizedStandard();
        org.joda.time.Period period31 = period28.plusHours(2);
        java.time.chrono.IsoEra isoEra32 = java.time.chrono.IsoEra.CE;
        boolean boolean33 = period31.equals((java.lang.Object) isoEra32);
        int int34 = period31.getMinutes();
        mutableDateTime17.add((org.joda.time.ReadablePeriod) period31);
        java.util.TimeZone timeZone37 = null;
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forTimeZone(timeZone37);
        org.joda.time.DateMidnight dateMidnight39 = new org.joda.time.DateMidnight((long) 1970, dateTimeZone38);
        long long42 = dateTimeZone38.convertLocalToUTC((long) 3, false);
        long long45 = dateTimeZone38.convertLocalToUTC(0L, true);
        mutableDateTime17.setZoneRetainFields(dateTimeZone38);
        java.lang.String str47 = dateTimeZone38.toString();
        org.joda.time.chrono.EthiopicChronology ethiopicChronology48 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone38);
        org.joda.time.DateTimeField dateTimeField49 = ethiopicChronology48.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone50 = ethiopicChronology48.getZone();
        org.joda.time.DateTimeField dateTimeField51 = ethiopicChronology48.era();
        org.joda.time.DateTimeField dateTimeField52 = ethiopicChronology48.millisOfDay();
        org.joda.time.DurationField durationField53 = ethiopicChronology48.halfdays();
        org.joda.time.DurationFieldType durationFieldType54 = durationField53.getType();
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertTrue("'" + isoEra32 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra32.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 3L + "'", long42 == 3L);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Etc/UTC" + "'", str47, "Etc/UTC");
        org.junit.Assert.assertNotNull(ethiopicChronology48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(durationField53);
        org.junit.Assert.assertNotNull(durationFieldType54);
    }

    @Test
    public void test5005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5005");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval1 = org.joda.time.Interval.parse("Wochentag");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Format requires a '/' separator: Wochentag");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test5006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5006");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 3, chronology1);
        org.joda.time.DateTime.Property property3 = dateTime2.dayOfYear();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight((java.lang.Object) dateTime2, chronology4);
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight5.plus((long) (byte) -1);
        int int8 = dateMidnight5.getSecondOfMinute();
        org.joda.time.DateMidnight dateMidnight10 = dateMidnight5.plusYears(12);
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight10.plusWeeks(17480);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(dateMidnight12);
    }

    @Test
    public void test5007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5007");
        // The following exception was thrown during execution in test generation
        try {
            java.time.LocalDateTime localDateTime5 = java.time.LocalDateTime.of(1024, 2147483647, 58, 16, 2147483647);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for MonthOfYear (valid values 1 - 12): 2147483647");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
    }

    @Test
    public void test5008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5008");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(741000000, 50, (int) (byte) 100, (-1000000), 1024);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1000000 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test5009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5009");
        float[] floatArray2 = new float[] { (-1L), (byte) -1 };
        java.nio.FloatBuffer floatBuffer3 = java.nio.FloatBuffer.wrap(floatArray2);
        java.nio.FloatBuffer floatBuffer4 = floatBuffer3.compact();
        boolean boolean5 = floatBuffer4.isDirect();
        float[] floatArray6 = floatBuffer4.array();
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[-1.0, -1.0]");
        org.junit.Assert.assertNotNull(floatBuffer3);
        org.junit.Assert.assertNotNull(floatBuffer4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(floatArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray6), "[-1.0, -1.0]");
    }

    @Test
    public void test5010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5010");
        java.util.Date date3 = new java.util.Date((int) '-', 926000000, 0);
        org.junit.Assert.assertEquals(date3.toString(), "Sat Aug 31 00:00:00 UTC 77168611");
    }

    @Test
    public void test5011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5011");
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.yearWeekDay();
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.Duration duration5 = new org.joda.time.Duration(readableInstant3, readableInstant4);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.PeriodType periodType7 = null;
        org.joda.time.Period period8 = duration5.toPeriodTo(readableInstant6, periodType7);
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Duration duration11 = new org.joda.time.Duration(readableInstant9, readableInstant10);
        long long12 = duration11.getMillis();
        boolean boolean13 = duration5.isShorterThan((org.joda.time.ReadableDuration) duration11);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) 3, chronology15);
        org.joda.time.DateTime.Property property17 = dateTime16.dayOfYear();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight((java.lang.Object) dateTime16, chronology18);
        org.joda.time.MutableDateTime mutableDateTime20 = dateTime16.toMutableDateTime();
        mutableDateTime20.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime20.dayOfWeek();
        org.joda.time.MutableDateTime.Property property24 = mutableDateTime20.year();
        org.joda.time.MutableDateTime.Property property25 = mutableDateTime20.weekyear();
        boolean boolean26 = duration5.equals((java.lang.Object) mutableDateTime20);
        mutableDateTime20.addMonths((int) ' ');
        mutableDateTime20.add((long) (byte) 10);
        org.joda.time.Period period31 = org.joda.time.Period.ZERO;
        org.joda.time.Period period32 = period31.normalizedStandard();
        org.joda.time.Period period34 = period31.plusHours(2);
        java.time.chrono.IsoEra isoEra35 = java.time.chrono.IsoEra.CE;
        boolean boolean36 = period34.equals((java.lang.Object) isoEra35);
        int int37 = period34.getMinutes();
        mutableDateTime20.add((org.joda.time.ReadablePeriod) period34);
        java.util.TimeZone timeZone40 = null;
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forTimeZone(timeZone40);
        org.joda.time.DateMidnight dateMidnight42 = new org.joda.time.DateMidnight((long) 1970, dateTimeZone41);
        long long45 = dateTimeZone41.convertLocalToUTC((long) 3, false);
        long long48 = dateTimeZone41.convertLocalToUTC(0L, true);
        mutableDateTime20.setZoneRetainFields(dateTimeZone41);
        java.lang.String str50 = dateTimeZone41.toString();
        org.joda.time.chrono.EthiopicChronology ethiopicChronology51 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone41);
        org.joda.time.DateTimeField dateTimeField52 = ethiopicChronology51.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone53 = ethiopicChronology51.getZone();
        org.joda.time.DateTimeField dateTimeField54 = ethiopicChronology51.era();
        org.joda.time.DateTimeField dateTimeField55 = ethiopicChronology51.secondOfDay();
        org.joda.time.DateTimeField dateTimeField56 = ethiopicChronology51.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField57 = ethiopicChronology51.halfdayOfDay();
        org.joda.time.DurationField durationField58 = ethiopicChronology51.weekyears();
        org.joda.time.DateTimeField dateTimeField59 = ethiopicChronology51.hourOfHalfday();
        org.joda.time.MutablePeriod mutablePeriod60 = new org.joda.time.MutablePeriod((long) (short) 1, (long) 58, periodType2, (org.joda.time.Chronology) ethiopicChronology51);
        java.lang.Object obj61 = mutablePeriod60.clone();
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod60.addHours((int) '0');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'hours'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertTrue("'" + isoEra35 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra35.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 3L + "'", long45 == 3L);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "Etc/UTC" + "'", str50, "Etc/UTC");
        org.junit.Assert.assertNotNull(ethiopicChronology51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(durationField58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(obj61);
        org.junit.Assert.assertEquals(obj61.toString(), "P0D");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj61), "P0D");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj61), "P0D");
    }

    @Test
    public void test5012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5012");
        short[] shortArray2 = new short[] { (byte) 0, (short) 1 };
        java.nio.ShortBuffer shortBuffer3 = java.nio.ShortBuffer.wrap(shortArray2);
        short[] shortArray6 = new short[] { (short) 1, (byte) 10 };
        java.nio.ShortBuffer shortBuffer7 = java.nio.ShortBuffer.wrap(shortArray6);
        short[] shortArray10 = new short[] { (short) 1, (byte) 10 };
        java.nio.ShortBuffer shortBuffer11 = java.nio.ShortBuffer.wrap(shortArray10);
        java.nio.ShortBuffer shortBuffer12 = shortBuffer7.put(shortBuffer11);
        int int13 = shortBuffer12.limit();
        boolean boolean14 = shortBuffer12.isReadOnly();
        java.nio.ShortBuffer shortBuffer15 = shortBuffer3.put(shortBuffer12);
        boolean boolean16 = shortBuffer15.hasArray();
        java.nio.ShortBuffer shortBuffer17 = shortBuffer15.duplicate();
        java.nio.Buffer buffer18 = shortBuffer15.mark();
        org.junit.Assert.assertNotNull(shortArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray2), "[0, 1]");
        org.junit.Assert.assertNotNull(shortBuffer3);
        org.junit.Assert.assertNotNull(shortArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray6), "[1, 10]");
        org.junit.Assert.assertNotNull(shortBuffer7);
        org.junit.Assert.assertNotNull(shortArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray10), "[1, 10]");
        org.junit.Assert.assertNotNull(shortBuffer11);
        org.junit.Assert.assertNotNull(shortBuffer12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(shortBuffer15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(shortBuffer17);
        org.junit.Assert.assertNotNull(buffer18);
    }

    @Test
    public void test5013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5013");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Duration duration2 = new org.joda.time.Duration(readableInstant0, readableInstant1);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = duration2.toPeriodTo(readableInstant3, periodType4);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.Duration duration8 = new org.joda.time.Duration(readableInstant6, readableInstant7);
        long long9 = duration8.getMillis();
        boolean boolean10 = duration2.isShorterThan((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) 3, chronology12);
        org.joda.time.DateTime.Property property14 = dateTime13.dayOfYear();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight((java.lang.Object) dateTime13, chronology15);
        org.joda.time.MutableDateTime mutableDateTime17 = dateTime13.toMutableDateTime();
        mutableDateTime17.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime17.dayOfWeek();
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime17.year();
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime17.weekyear();
        boolean boolean23 = duration2.equals((java.lang.Object) mutableDateTime17);
        mutableDateTime17.addMonths((int) ' ');
        mutableDateTime17.add((long) (byte) 10);
        org.joda.time.Period period28 = org.joda.time.Period.ZERO;
        org.joda.time.Period period29 = period28.normalizedStandard();
        org.joda.time.Period period31 = period28.plusHours(2);
        java.time.chrono.IsoEra isoEra32 = java.time.chrono.IsoEra.CE;
        boolean boolean33 = period31.equals((java.lang.Object) isoEra32);
        int int34 = period31.getMinutes();
        mutableDateTime17.add((org.joda.time.ReadablePeriod) period31);
        java.util.TimeZone timeZone37 = null;
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forTimeZone(timeZone37);
        org.joda.time.DateMidnight dateMidnight39 = new org.joda.time.DateMidnight((long) 1970, dateTimeZone38);
        long long42 = dateTimeZone38.convertLocalToUTC((long) 3, false);
        long long45 = dateTimeZone38.convertLocalToUTC(0L, true);
        mutableDateTime17.setZoneRetainFields(dateTimeZone38);
        java.lang.String str47 = dateTimeZone38.toString();
        org.joda.time.chrono.EthiopicChronology ethiopicChronology48 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone38);
        org.joda.time.DateTimeField dateTimeField49 = ethiopicChronology48.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone50 = ethiopicChronology48.getZone();
        org.joda.time.DateTimeField dateTimeField51 = ethiopicChronology48.era();
        org.joda.time.DateTimeField dateTimeField52 = ethiopicChronology48.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone53 = ethiopicChronology48.getZone();
        org.joda.time.Chronology chronology54 = ethiopicChronology48.withUTC();
        org.joda.time.DurationField durationField55 = ethiopicChronology48.months();
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertTrue("'" + isoEra32 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra32.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 3L + "'", long42 == 3L);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Etc/UTC" + "'", str47, "Etc/UTC");
        org.junit.Assert.assertNotNull(ethiopicChronology48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(durationField55);
    }

    @Test
    public void test5014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5014");
        org.joda.time.YearMonthDay yearMonthDay0 = new org.joda.time.YearMonthDay();
        org.joda.time.DateMidnight dateMidnight1 = yearMonthDay0.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight2 = yearMonthDay0.toDateMidnight();
        org.joda.time.YearMonthDay yearMonthDay4 = yearMonthDay0.plusMonths(3);
        org.joda.time.YearMonthDay yearMonthDay6 = yearMonthDay0.minusMonths(65);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 3, chronology8);
        org.joda.time.DateTime.Property property10 = dateTime9.dayOfYear();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight((java.lang.Object) dateTime9, chronology11);
        org.joda.time.DateMidnight.Property property13 = dateMidnight12.dayOfMonth();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) 3, chronology15);
        org.joda.time.DateTime.Property property17 = dateTime16.dayOfYear();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight((java.lang.Object) dateTime16, chronology18);
        org.joda.time.DateMidnight dateMidnight21 = dateMidnight19.minusMonths((-1));
        org.joda.time.DateMidnight dateMidnight23 = dateMidnight19.withDayOfYear((int) ' ');
        org.joda.time.Weeks weeks24 = org.joda.time.Weeks.weeksBetween((org.joda.time.ReadableInstant) dateMidnight12, (org.joda.time.ReadableInstant) dateMidnight23);
        org.joda.time.DateMidnight.Property property25 = dateMidnight12.year();
        org.joda.time.DateMidnight.Property property26 = dateMidnight12.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime27 = org.joda.time.LocalDateTime.now();
        int int28 = property26.compareTo((org.joda.time.ReadablePartial) localDateTime27);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Minutes minutes29 = org.joda.time.Minutes.minutesBetween((org.joda.time.ReadablePartial) yearMonthDay6, (org.joda.time.ReadablePartial) localDateTime27);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: ReadablePartial objects must have the same set of fields");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateMidnight1);
        org.junit.Assert.assertNotNull(dateMidnight2);
        org.junit.Assert.assertNotNull(yearMonthDay4);
        org.junit.Assert.assertNotNull(yearMonthDay6);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertNotNull(dateMidnight23);
        org.junit.Assert.assertNotNull(weeks24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
    }

    @Test
    public void test5015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5015");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 3, chronology1);
        org.joda.time.DateTime.Property property3 = dateTime2.dayOfYear();
        org.joda.time.Interval interval4 = property3.toInterval();
        org.joda.time.DateTime dateTime5 = property3.roundFloorCopy();
        org.joda.time.DateTime dateTime7 = property3.addWrapFieldToCopy(52);
        org.joda.time.DateTimeField dateTimeField8 = property3.getField();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTimeField8);
    }

    @Test
    public void test5016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5016");
        java.io.PrintStream printStream1 = new java.io.PrintStream("subject:\n (GERMAN)");
        java.io.PrintStream printStream2 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        char[] charArray9 = new char[] { '#', '/', '4', 'a', '4', 'u' };
        java.nio.CharBuffer charBuffer10 = java.nio.CharBuffer.wrap(charArray9);
        java.nio.CharBuffer charBuffer11 = java.nio.CharBuffer.wrap(charArray9);
        printStream1.println(charArray9);
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "#/4a4u");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "#/4a4u");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[#, /, 4, a, 4, u]");
        org.junit.Assert.assertNotNull(charBuffer10);
        org.junit.Assert.assertNotNull(charBuffer11);
    }

    @Test
    public void test5017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5017");
        java.nio.charset.Charset charset0 = java.nio.charset.Charset.defaultCharset();
        java.nio.charset.CharsetDecoder charsetDecoder1 = charset0.newDecoder();
        java.nio.charset.Charset charset2 = java.nio.charset.Charset.defaultCharset();
        boolean boolean3 = charset0.contains(charset2);
        java.nio.charset.CharsetEncoder charsetEncoder4 = charset0.newEncoder();
        byte[] byteArray5 = charsetEncoder4.replacement();
        java.nio.charset.Charset charset6 = java.nio.charset.Charset.defaultCharset();
        java.nio.charset.CharsetDecoder charsetDecoder7 = charset6.newDecoder();
        float float8 = charsetDecoder7.maxCharsPerByte();
        float float9 = charsetDecoder7.averageCharsPerByte();
        java.nio.charset.CodingErrorAction codingErrorAction10 = charsetDecoder7.unmappableCharacterAction();
        java.nio.charset.CharsetEncoder charsetEncoder11 = charsetEncoder4.onUnmappableCharacter(codingErrorAction10);
        java.nio.charset.Charset charset12 = java.nio.charset.Charset.defaultCharset();
        java.nio.charset.CharsetDecoder charsetDecoder13 = charset12.newDecoder();
        java.nio.charset.Charset charset14 = java.nio.charset.Charset.defaultCharset();
        boolean boolean15 = charset12.contains(charset14);
        java.nio.charset.CharsetEncoder charsetEncoder16 = charset12.newEncoder();
        byte[] byteArray17 = charsetEncoder16.replacement();
        java.nio.charset.CharsetEncoder charsetEncoder18 = charsetEncoder4.replaceWith(byteArray17);
        java.nio.charset.Charset charset19 = java.nio.charset.Charset.defaultCharset();
        java.nio.charset.CharsetDecoder charsetDecoder20 = charset19.newDecoder();
        java.nio.charset.Charset charset21 = java.nio.charset.Charset.defaultCharset();
        boolean boolean22 = charset19.contains(charset21);
        java.nio.charset.CharsetEncoder charsetEncoder23 = charset19.newEncoder();
        char[] charArray24 = new char[] {};
        java.nio.CharBuffer charBuffer25 = java.nio.CharBuffer.wrap(charArray24);
        java.nio.ByteBuffer byteBuffer26 = charsetEncoder23.encode(charBuffer25);
        java.nio.CharBuffer charBuffer27 = charBuffer25.slice();
        java.nio.CharBuffer charBuffer28 = charBuffer25.compact();
        java.nio.CharBuffer charBuffer29 = charBuffer25.duplicate();
        java.nio.ByteBuffer byteBuffer30 = charsetEncoder4.encode(charBuffer25);
        java.lang.Object obj31 = charBuffer25.array();
        org.junit.Assert.assertNotNull(charset0);
        org.junit.Assert.assertNotNull(charsetDecoder1);
        org.junit.Assert.assertNotNull(charset2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(charsetEncoder4);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[63]");
        org.junit.Assert.assertNotNull(charset6);
        org.junit.Assert.assertNotNull(charsetDecoder7);
        org.junit.Assert.assertTrue("'" + float8 + "' != '" + 1.0f + "'", float8 == 1.0f);
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + 1.0f + "'", float9 == 1.0f);
        org.junit.Assert.assertNotNull(codingErrorAction10);
        org.junit.Assert.assertNotNull(charsetEncoder11);
        org.junit.Assert.assertNotNull(charset12);
        org.junit.Assert.assertNotNull(charsetDecoder13);
        org.junit.Assert.assertNotNull(charset14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(charsetEncoder16);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[63]");
        org.junit.Assert.assertNotNull(charsetEncoder18);
        org.junit.Assert.assertNotNull(charset19);
        org.junit.Assert.assertNotNull(charsetDecoder20);
        org.junit.Assert.assertNotNull(charset21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(charsetEncoder23);
        org.junit.Assert.assertNotNull(charArray24);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray24), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray24), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray24), "[]");
        org.junit.Assert.assertNotNull(charBuffer25);
        org.junit.Assert.assertNotNull(byteBuffer26);
        org.junit.Assert.assertNotNull(charBuffer27);
        org.junit.Assert.assertNotNull(charBuffer28);
        org.junit.Assert.assertNotNull(charBuffer29);
        org.junit.Assert.assertNotNull(byteBuffer30);
        org.junit.Assert.assertNotNull(obj31);
    }

    @Test
    public void test5018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5018");
        org.joda.time.PeriodType periodType0 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType1 = periodType0.withMinutesRemoved();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType3 = periodType0.getFieldType(2922789);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 2922789");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType0);
        org.junit.Assert.assertNotNull(periodType1);
    }

    @Test
    public void test5019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5019");
        java.util.stream.IntStream intStream3 = java.util.stream.IntStream.rangeClosed(100, (int) '4');
        java.util.stream.IntStream intStream4 = intStream3.sequential();
        java.util.function.IntUnaryOperator intUnaryOperator5 = java.util.function.IntUnaryOperator.identity();
        java.util.stream.IntStream intStream6 = intStream3.map(intUnaryOperator5);
        java.util.function.IntUnaryOperator intUnaryOperator7 = java.util.function.IntUnaryOperator.identity();
        java.util.stream.IntStream intStream10 = java.util.stream.IntStream.rangeClosed(100, (int) '4');
        java.util.stream.IntStream intStream11 = intStream10.sequential();
        java.util.function.IntUnaryOperator intUnaryOperator12 = java.util.function.IntUnaryOperator.identity();
        java.util.stream.IntStream intStream13 = intStream10.map(intUnaryOperator12);
        java.util.function.IntUnaryOperator intUnaryOperator14 = intUnaryOperator7.compose(intUnaryOperator12);
        java.util.stream.IntStream intStream15 = intStream6.map(intUnaryOperator7);
        java.util.stream.IntStream intStream16 = java.util.stream.IntStream.iterate((int) 'a', intUnaryOperator7);
        org.junit.Assert.assertNotNull(intStream3);
        org.junit.Assert.assertNotNull(intStream4);
        org.junit.Assert.assertNotNull(intUnaryOperator5);
        org.junit.Assert.assertNotNull(intStream6);
        org.junit.Assert.assertNotNull(intUnaryOperator7);
        org.junit.Assert.assertNotNull(intStream10);
        org.junit.Assert.assertNotNull(intStream11);
        org.junit.Assert.assertNotNull(intUnaryOperator12);
        org.junit.Assert.assertNotNull(intStream13);
        org.junit.Assert.assertNotNull(intUnaryOperator14);
        org.junit.Assert.assertNotNull(intStream15);
        org.junit.Assert.assertNotNull(intStream16);
    }

    @Test
    public void test5020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5020");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        int int1 = localDate0.getCenturyOfEra();
        org.joda.time.LocalDate.Property property2 = localDate0.dayOfWeek();
        org.joda.time.LocalDate localDate4 = property2.addToCopy(7);
        org.joda.time.LocalDate localDate5 = property2.roundCeilingCopy();
        org.joda.time.LocalDate localDate6 = property2.roundHalfEvenCopy();
        org.joda.time.LocalDate localDate8 = localDate6.plusWeeks((-201));
        org.joda.time.LocalDate.Property property9 = localDate6.weekyear();
        int int10 = localDate6.size();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 20 + "'", int1 == 20);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 3 + "'", int10 == 3);
    }

    @Test
    public void test5021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5021");
        java.util.stream.IntStream intStream2 = java.util.stream.IntStream.rangeClosed(100, (int) '4');
        java.util.OptionalDouble optionalDouble3 = intStream2.average();
        java.util.function.IntToDoubleFunction intToDoubleFunction4 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.DoubleStream doubleStream5 = intStream2.mapToDouble(intToDoubleFunction4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intStream2);
        org.junit.Assert.assertNotNull(optionalDouble3);
    }

    @Test
    public void test5022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5022");
        java.time.Instant instant0 = java.time.Instant.now();
        java.nio.file.attribute.FileTime fileTime1 = java.nio.file.attribute.FileTime.from(instant0);
        org.joda.time.Period period2 = org.joda.time.Period.ZERO;
        org.joda.time.Period period3 = period2.normalizedStandard();
        org.joda.time.Period period5 = period2.plusHours(2);
        java.time.chrono.IsoEra isoEra6 = java.time.chrono.IsoEra.CE;
        boolean boolean7 = period5.equals((java.lang.Object) isoEra6);
        java.time.LocalTime localTime12 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime13 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime12);
        java.time.LocalTime localTime18 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime19 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime18);
        java.time.temporal.ChronoField chronoField20 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime22 = localTime18.with((java.time.temporal.TemporalField) chronoField20, (long) (short) 1);
        long long23 = localTime12.getLong((java.time.temporal.TemporalField) chronoField20);
        boolean boolean24 = isoEra6.isSupported((java.time.temporal.TemporalField) chronoField20);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery25 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period26 = isoEra6.query(periodTemporalQuery25);
        boolean boolean27 = period26.isNegative();
        java.time.Period period29 = period26.plusDays((long) ' ');
        java.time.temporal.ChronoField chronoField30 = java.time.temporal.ChronoField.SECOND_OF_DAY;
        boolean boolean31 = period26.equals((java.lang.Object) chronoField30);
        java.time.chrono.ChronoPeriod chronoPeriod32 = period26.negated();
        java.time.Instant instant33 = instant0.minus((java.time.temporal.TemporalAmount) chronoPeriod32);
        java.util.Properties properties34 = null;
        java.util.Properties properties35 = new java.util.Properties(properties34);
        java.time.LocalTime localTime40 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime41 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime40);
        java.time.LocalTime localTime46 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime47 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime46);
        java.time.temporal.ChronoField chronoField48 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime50 = localTime46.with((java.time.temporal.TemporalField) chronoField48, (long) (short) 1);
        long long51 = localTime40.getLong((java.time.temporal.TemporalField) chronoField48);
        java.time.LocalTime localTime53 = localTime40.withSecond((int) (short) 1);
        java.lang.Object obj55 = properties35.put((java.lang.Object) localTime53, (java.lang.Object) "117");
        java.lang.Object obj56 = properties35.clone();
        properties35.clear();
        properties35.clear();
        java.time.ZoneOffset zoneOffset61 = java.time.ZoneOffset.ofHoursMinutes(1, 10);
        java.time.LocalDate localDate62 = java.time.LocalDate.now((java.time.ZoneId) zoneOffset61);
        java.time.Clock clock63 = java.time.Clock.system((java.time.ZoneId) zoneOffset61);
        short[] shortArray66 = new short[] { (short) 1, (byte) 10 };
        java.nio.ShortBuffer shortBuffer67 = java.nio.ShortBuffer.wrap(shortArray66);
        short[] shortArray70 = new short[] { (short) 1, (byte) 10 };
        java.nio.ShortBuffer shortBuffer71 = java.nio.ShortBuffer.wrap(shortArray70);
        java.nio.ShortBuffer shortBuffer72 = shortBuffer67.put(shortBuffer71);
        short[] shortArray75 = new short[] { (byte) 0, (short) 1 };
        java.nio.ShortBuffer shortBuffer76 = java.nio.ShortBuffer.wrap(shortArray75);
        short[] shortArray79 = new short[] { (short) 1, (byte) 10 };
        java.nio.ShortBuffer shortBuffer80 = java.nio.ShortBuffer.wrap(shortArray79);
        short[] shortArray83 = new short[] { (short) 1, (byte) 10 };
        java.nio.ShortBuffer shortBuffer84 = java.nio.ShortBuffer.wrap(shortArray83);
        java.nio.ShortBuffer shortBuffer85 = shortBuffer80.put(shortBuffer84);
        int int86 = shortBuffer85.limit();
        boolean boolean87 = shortBuffer85.isReadOnly();
        java.nio.ShortBuffer shortBuffer88 = shortBuffer76.put(shortBuffer85);
        boolean boolean89 = shortBuffer88.hasArray();
        int int90 = shortBuffer71.compareTo(shortBuffer88);
        java.nio.ShortBuffer shortBuffer91 = shortBuffer71.slice();
        boolean boolean92 = properties35.remove((java.lang.Object) zoneOffset61, (java.lang.Object) shortBuffer91);
        java.time.ZoneId zoneId93 = zoneOffset61.normalized();
        java.time.OffsetDateTime offsetDateTime94 = instant33.atOffset(zoneOffset61);
        org.junit.Assert.assertNotNull(instant0);
        org.junit.Assert.assertNotNull(fileTime1);
        org.junit.Assert.assertNotNull(period2);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertTrue("'" + isoEra6 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra6.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertTrue("'" + chronoField20 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField20.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 3601000000001L + "'", long23 == 3601000000001L);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(periodTemporalQuery25);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertTrue("'" + chronoField30 + "' != '" + java.time.temporal.ChronoField.SECOND_OF_DAY + "'", chronoField30.equals(java.time.temporal.ChronoField.SECOND_OF_DAY));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(chronoPeriod32);
        org.junit.Assert.assertNotNull(instant33);
        org.junit.Assert.assertNotNull(localTime40);
        org.junit.Assert.assertNotNull(localTime41);
        org.junit.Assert.assertNotNull(localTime46);
        org.junit.Assert.assertNotNull(localTime47);
        org.junit.Assert.assertTrue("'" + chronoField48 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField48.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime50);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 3601000000001L + "'", long51 == 3601000000001L);
        org.junit.Assert.assertNotNull(localTime53);
        org.junit.Assert.assertNull(obj55);
        org.junit.Assert.assertNotNull(obj56);
        org.junit.Assert.assertEquals(obj56.toString(), "{01:00:01.000000001=117}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj56), "{01:00:01.000000001=117}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj56), "{01:00:01.000000001=117}");
        org.junit.Assert.assertNotNull(zoneOffset61);
        org.junit.Assert.assertNotNull(localDate62);
        org.junit.Assert.assertNotNull(clock63);
        org.junit.Assert.assertNotNull(shortArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray66), "[1, 10]");
        org.junit.Assert.assertNotNull(shortBuffer67);
        org.junit.Assert.assertNotNull(shortArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray70), "[1, 10]");
        org.junit.Assert.assertNotNull(shortBuffer71);
        org.junit.Assert.assertNotNull(shortBuffer72);
        org.junit.Assert.assertNotNull(shortArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray75), "[0, 1]");
        org.junit.Assert.assertNotNull(shortBuffer76);
        org.junit.Assert.assertNotNull(shortArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray79), "[1, 10]");
        org.junit.Assert.assertNotNull(shortBuffer80);
        org.junit.Assert.assertNotNull(shortArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray83), "[1, 10]");
        org.junit.Assert.assertNotNull(shortBuffer84);
        org.junit.Assert.assertNotNull(shortBuffer85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 2 + "'", int86 == 2);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(shortBuffer88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + (-2) + "'", int90 == (-2));
        org.junit.Assert.assertNotNull(shortBuffer91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(zoneId93);
        org.junit.Assert.assertNotNull(offsetDateTime94);
    }

    @Test
    public void test5023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5023");
        java.util.OptionalLong optionalLong1 = java.util.OptionalLong.of((long) 366);
        org.junit.Assert.assertNotNull(optionalLong1);
    }

    @Test
    public void test5024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5024");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalTime localTime4 = new org.joda.time.LocalTime((long) 0, chronology3);
        org.joda.time.Chronology chronology5 = localTime4.getChronology();
        java.util.Locale locale6 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale7 = java.util.Locale.GERMANY;
        java.lang.String str8 = locale6.getDisplayScript(locale7);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket10 = new org.joda.time.format.DateTimeParserBucket((long) 1970, chronology5, locale6, (java.lang.Integer) 1);
        dateTimeParserBucket10.setOffset((-1));
        org.joda.time.DateTimeZone dateTimeZone13 = dateTimeParserBucket10.getZone();
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime((long) '#', dateTimeZone13);
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime14.yearOfEra();
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.Duration duration18 = new org.joda.time.Duration(readableInstant16, readableInstant17);
        org.joda.time.Duration duration20 = duration18.withMillis((-1L));
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) 3, chronology22);
        org.joda.time.DateTime.Property property24 = dateTime23.dayOfYear();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight((java.lang.Object) dateTime23, chronology25);
        org.joda.time.DateMidnight dateMidnight28 = dateMidnight26.minusMonths((-1));
        org.joda.time.DateMidnight dateMidnight30 = dateMidnight26.withDayOfYear((int) ' ');
        org.joda.time.PeriodType periodType31 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period32 = duration20.toPeriodFrom((org.joda.time.ReadableInstant) dateMidnight26, periodType31);
        org.joda.time.Duration duration34 = org.joda.time.Duration.standardHours((long) 1);
        org.joda.time.DateMidnight dateMidnight35 = dateMidnight26.plus((org.joda.time.ReadableDuration) duration34);
        long long36 = duration34.getMillis();
        org.joda.time.Duration duration38 = org.joda.time.Duration.standardMinutes((long) 292269054);
        boolean boolean39 = duration34.isLongerThan((org.joda.time.ReadableDuration) duration38);
        org.joda.time.Duration duration42 = duration34.withDurationAdded((long) 37, 22);
        org.joda.time.PeriodType periodType43 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType44 = periodType43.withMinutesRemoved();
        org.joda.time.PeriodType periodType45 = periodType43.withMinutesRemoved();
        org.joda.time.MutablePeriod mutablePeriod46 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime14, (org.joda.time.ReadableDuration) duration42, periodType45);
        boolean boolean47 = mutableDateTime14.isBeforeNow();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertNotNull(dateMidnight30);
        org.junit.Assert.assertNotNull(periodType31);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(dateMidnight35);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 3600000L + "'", long36 == 3600000L);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(periodType43);
        org.junit.Assert.assertNotNull(periodType44);
        org.junit.Assert.assertNotNull(periodType45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
    }

    @Test
    public void test5025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5025");
        java.time.format.DateTimeFormatter dateTimeFormatter0 = java.time.format.DateTimeFormatter.ISO_ORDINAL_DATE;
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
    }

    @Test
    public void test5026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5026");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.stream.IntStream intStream3 = java.util.stream.IntStream.rangeClosed(100, (int) '4');
        int[] intArray4 = intStream3.toArray();
        java.util.Calendar.Builder builder5 = builder0.setFields(intArray4);
        java.util.GregorianCalendar gregorianCalendar11 = new java.util.GregorianCalendar(12, 4096, 7, (-1), (int) (short) 10);
        int int12 = gregorianCalendar11.getWeeksInWeekYear();
        java.util.TimeZone timeZone13 = gregorianCalendar11.getTimeZone();
        java.time.ZoneId zoneId14 = timeZone13.toZoneId();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.forTimeZone(timeZone13);
        java.util.Calendar.Builder builder16 = builder0.setTimeZone(timeZone13);
        org.junit.Assert.assertNotNull(intStream3);
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[]");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertNotNull(timeZone13);
// flaky:         org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(zoneId14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test5027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5027");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 3, chronology1);
        org.joda.time.DateTime.Property property3 = dateTime2.dayOfYear();
        org.joda.time.Interval interval4 = property3.toInterval();
        org.joda.time.DateTimeField dateTimeField5 = property3.getField();
        org.joda.time.DateTime dateTime6 = property3.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime7 = property3.roundCeilingCopy();
        org.joda.time.DateTime dateTime9 = dateTime7.withEra(1);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
    }

    @Test
    public void test5028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5028");
        java.nio.CharBuffer charBuffer1 = java.nio.CharBuffer.wrap((java.lang.CharSequence) "2022-02-21T09:34:12.478Z");
        java.nio.CharBuffer charBuffer2 = charBuffer1.slice();
        // The following exception was thrown during execution in test generation
        try {
            java.nio.CharBuffer charBuffer4 = charBuffer1.append('#');
            org.junit.Assert.fail("Expected exception of type java.nio.ReadOnlyBufferException; message: null");
        } catch (java.nio.ReadOnlyBufferException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charBuffer1);
        org.junit.Assert.assertNotNull(charBuffer2);
    }

    @Test
    public void test5029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5029");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 3, chronology1);
        org.joda.time.DateTime.Property property3 = dateTime2.dayOfYear();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight((java.lang.Object) dateTime2, chronology4);
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight5.minusMonths((-1));
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight5.withDayOfYear((int) ' ');
        int int10 = dateMidnight5.getWeekOfWeekyear();
        java.util.Calendar.Builder builder11 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder15 = builder11.setDate(0, 0, (int) (byte) 100);
        java.util.GregorianCalendar gregorianCalendar21 = new java.util.GregorianCalendar(12, 4096, 7, (-1), (int) (short) 10);
        int int22 = gregorianCalendar21.getWeeksInWeekYear();
        java.util.TimeZone timeZone23 = gregorianCalendar21.getTimeZone();
        java.util.Calendar.Builder builder24 = builder15.setTimeZone(timeZone23);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forTimeZone(timeZone23);
        org.joda.time.DateMidnight dateMidnight26 = dateMidnight5.withZoneRetainFields(dateTimeZone25);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 52 + "'", int22 == 52);
        org.junit.Assert.assertNotNull(timeZone23);
// flaky:         org.junit.Assert.assertEquals(timeZone23.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(dateMidnight26);
    }

    @Test
    public void test5030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5030");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 3, chronology1);
        org.joda.time.DateTime.Property property3 = dateTime2.dayOfYear();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight((java.lang.Object) dateTime2, chronology4);
        org.joda.time.MutableDateTime mutableDateTime6 = dateTime2.toMutableDateTime();
        mutableDateTime6.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime6.dayOfWeek();
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime6.year();
        java.util.TimeZone timeZone11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        mutableDateTime6.setZone(dateTimeZone12);
        java.util.Locale locale15 = java.util.Locale.TAIWAN;
        java.lang.String str16 = dateTimeZone12.getShortName((long) 64, locale15);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) 3, chronology18);
        org.joda.time.DateTime.Property property20 = dateTime19.dayOfYear();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight((java.lang.Object) dateTime19, chronology21);
        org.joda.time.MutableDateTime mutableDateTime23 = dateTime19.toMutableDateTime();
        mutableDateTime23.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property26 = mutableDateTime23.dayOfWeek();
        org.joda.time.MutableDateTime.Property property27 = mutableDateTime23.year();
        java.util.TimeZone timeZone28 = null;
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forTimeZone(timeZone28);
        mutableDateTime23.setZone(dateTimeZone29);
        java.util.Locale locale32 = java.util.Locale.TAIWAN;
        java.lang.String str33 = dateTimeZone29.getShortName((long) 64, locale32);
        long long35 = dateTimeZone12.getMillisKeepLocal(dateTimeZone29, (long) 64);
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime(dateTimeZone12);
        org.joda.time.DateTime dateTime38 = dateTime36.withCenturyOfEra(2098);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+00:00" + "'", str16, "+00:00");
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(mutableDateTime23);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "+00:00" + "'", str33, "+00:00");
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 64L + "'", long35 == 64L);
        org.junit.Assert.assertNotNull(dateTime38);
    }

    @Test
    public void test5031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5031");
        java.util.stream.LongStream longStream0 = java.util.stream.LongStream.empty();
        java.util.stream.LongStream longStream3 = java.util.stream.LongStream.rangeClosed((long) (short) -1, (long) 7);
        long long4 = longStream3.count();
        java.util.stream.LongStream longStream5 = longStream3.parallel();
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.LongStream longStream6 = java.util.stream.LongStream.concat(longStream0, longStream3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: stream has already been operated upon or closed");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(longStream0);
        org.junit.Assert.assertNotNull(longStream3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 9L + "'", long4 == 9L);
        org.junit.Assert.assertNotNull(longStream5);
    }

    @Test
    public void test5032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5032");
        java.util.stream.LongStream longStream2 = java.util.stream.LongStream.range((long) (byte) 0, (long) 8);
        java.util.OptionalLong optionalLong3 = longStream2.findAny();
        java.util.function.LongPredicate longPredicate4 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean5 = longStream2.noneMatch(longPredicate4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(longStream2);
        org.junit.Assert.assertNotNull(optionalLong3);
    }

    @Test
    public void test5033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5033");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((long) 0, chronology2);
        org.joda.time.Chronology chronology4 = localTime3.getChronology();
        java.util.Locale locale5 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale6 = java.util.Locale.GERMANY;
        java.lang.String str7 = locale5.getDisplayScript(locale6);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket9 = new org.joda.time.format.DateTimeParserBucket((long) 1970, chronology4, locale5, (java.lang.Integer) 1);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.LocalTime localTime12 = new org.joda.time.LocalTime((long) 0, chronology11);
        org.joda.time.Chronology chronology13 = localTime12.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.weekyearOfCentury();
        org.joda.time.DurationField durationField15 = dateTimeField14.getLeapDurationField();
        dateTimeParserBucket9.saveField(dateTimeField14, (int) 'u');
        java.util.Locale locale19 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str20 = dateTimeField14.getAsShortText((int) 'u', locale19);
        long long22 = dateTimeField14.roundCeiling((long) (byte) 10);
        int int23 = dateTimeField14.getMinimumValue();
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNull(durationField15);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "117" + "'", str20, "117");
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 31536000000L + "'", long22 == 31536000000L);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
    }

    @Test
    public void test5034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5034");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withYearOfCentury((int) 'a');
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.plusSeconds(6);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime3.withWeekyear(10);
        java.time.OffsetDateTime offsetDateTime8 = java.time.OffsetDateTime.now();
        java.time.temporal.ChronoField chronoField9 = java.time.temporal.ChronoField.HOUR_OF_DAY;
        boolean boolean10 = offsetDateTime8.isSupported((java.time.temporal.TemporalField) chronoField9);
        java.lang.String str11 = offsetDateTime8.toString();
        boolean boolean12 = localDateTime7.equals((java.lang.Object) offsetDateTime8);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) 3, chronology14);
        org.joda.time.DateTime.Property property16 = dateTime15.dayOfYear();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight((java.lang.Object) dateTime15, chronology17);
        org.joda.time.MutableDateTime mutableDateTime19 = dateTime15.toMutableDateTime();
        mutableDateTime19.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime19.dayOfWeek();
        java.util.Locale locale23 = java.util.Locale.JAPAN;
        int int24 = property22.getMaximumTextLength(locale23);
        org.joda.time.MutableDateTime mutableDateTime25 = property22.roundCeiling();
        org.joda.time.DurationFieldType durationFieldType26 = org.joda.time.DurationFieldType.days();
        mutableDateTime25.add(durationFieldType26, 127);
        boolean boolean29 = localDateTime7.isSupported(durationFieldType26);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(offsetDateTime8);
        org.junit.Assert.assertTrue("'" + chronoField9 + "' != '" + java.time.temporal.ChronoField.HOUR_OF_DAY + "'", chronoField9.equals(java.time.temporal.ChronoField.HOUR_OF_DAY));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "2022-02-21T09:41:28.623Z" + "'", str11, "2022-02-21T09:41:28.623Z");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(mutableDateTime19);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ja_JP");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 3 + "'", int24 == 3);
        org.junit.Assert.assertNotNull(mutableDateTime25);
        org.junit.Assert.assertNotNull(durationFieldType26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
    }

    @Test
    public void test5035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5035");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 3, chronology1);
        org.joda.time.DateTime.Property property3 = dateTime2.dayOfYear();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((long) 3, chronology5);
        org.joda.time.DateTime.Property property7 = dateTime6.dayOfYear();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateMidnight dateMidnight9 = new org.joda.time.DateMidnight((java.lang.Object) dateTime6, chronology8);
        org.joda.time.DateMidnight dateMidnight11 = dateMidnight9.minusMonths((-1));
        org.joda.time.DateMidnight dateMidnight13 = dateMidnight9.withDayOfYear((int) ' ');
        int int14 = dateMidnight9.getWeekOfWeekyear();
        long long15 = property3.getDifferenceAsLong((org.joda.time.ReadableInstant) dateMidnight9);
        boolean boolean17 = dateMidnight9.isAfter(10L);
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime((java.lang.Object) 10L);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.LocalTime localTime22 = new org.joda.time.LocalTime((long) 0, chronology21);
        org.joda.time.Chronology chronology23 = localTime22.getChronology();
        java.util.Locale locale24 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale25 = java.util.Locale.GERMANY;
        java.lang.String str26 = locale24.getDisplayScript(locale25);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket28 = new org.joda.time.format.DateTimeParserBucket((long) 1970, chronology23, locale24, (java.lang.Integer) 1);
        dateTimeParserBucket28.setOffset((-1));
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.Duration duration33 = new org.joda.time.Duration(readableInstant31, readableInstant32);
        org.joda.time.Seconds seconds34 = duration33.toStandardSeconds();
        int int35 = seconds34.getSeconds();
        org.joda.time.Seconds seconds37 = seconds34.dividedBy(28);
        org.joda.time.Seconds seconds38 = seconds37.negated();
        org.joda.time.DurationFieldType durationFieldType39 = seconds38.getFieldType();
        boolean boolean40 = dateTimeParserBucket28.restoreState((java.lang.Object) durationFieldType39);
        java.util.Locale locale41 = dateTimeParserBucket28.getLocale();
        java.util.Calendar calendar42 = mutableDateTime18.toCalendar(locale41);
        mutableDateTime18.setDate((-3155241599900L));
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(seconds34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(seconds37);
        org.junit.Assert.assertNotNull(seconds38);
        org.junit.Assert.assertNotNull(durationFieldType39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(calendar42);
        org.junit.Assert.assertEquals(calendar42.toString(), "java.util.GregorianCalendar[time=10,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=Etc/UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=10,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test5036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5036");
        java.time.Clock clock0 = java.time.Clock.systemUTC();
        java.time.Duration duration2 = java.time.Duration.ofSeconds((long) 256);
        java.time.Clock clock3 = java.time.Clock.tick(clock0, duration2);
        java.time.Duration duration5 = java.time.Duration.ofMinutes((long) 3);
        java.time.Duration duration6 = duration5.abs();
        java.time.Clock clock7 = java.time.Clock.offset(clock0, duration5);
        java.time.LocalDateTime localDateTime8 = java.time.LocalDateTime.now(clock0);
        java.time.Instant instant9 = clock0.instant();
        java.time.temporal.ChronoField chronoField10 = java.time.temporal.ChronoField.MINUTE_OF_DAY;
        boolean boolean11 = chronoField10.isDateBased();
        // The following exception was thrown during execution in test generation
        try {
            long long12 = instant9.getLong((java.time.temporal.TemporalField) chronoField10);
            org.junit.Assert.fail("Expected exception of type java.time.temporal.UnsupportedTemporalTypeException; message: Unsupported field: MinuteOfDay");
        } catch (java.time.temporal.UnsupportedTemporalTypeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(clock0);
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertNotNull(clock3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(clock7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertTrue("'" + chronoField10 + "' != '" + java.time.temporal.ChronoField.MINUTE_OF_DAY + "'", chronoField10.equals(java.time.temporal.ChronoField.MINUTE_OF_DAY));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test5037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5037");
        java.io.File file0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.io.PrintStream printStream2 = new java.io.PrintStream(file0, "SecondOfDay");
            org.junit.Assert.fail("Expected exception of type java.io.UnsupportedEncodingException; message: SecondOfDay");
        } catch (java.io.UnsupportedEncodingException e) {
            // Expected exception.
        }
    }

    @Test
    public void test5038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5038");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.now();
        java.time.temporal.ChronoField chronoField1 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime3 = localDateTime0.with((java.time.temporal.TemporalField) chronoField1, (long) 10);
        java.time.LocalDateTime localDateTime5 = localDateTime0.minusMinutes((long) 12);
        java.time.chrono.Chronology chronology6 = localDateTime0.getChronology();
        java.util.GregorianCalendar gregorianCalendar12 = new java.util.GregorianCalendar(12, 4096, 7, (-1), (int) (short) 10);
        int int13 = gregorianCalendar12.getWeeksInWeekYear();
        java.lang.String str14 = gregorianCalendar12.getCalendarType();
        java.time.ZonedDateTime zonedDateTime15 = gregorianCalendar12.toZonedDateTime();
        java.util.GregorianCalendar gregorianCalendar21 = new java.util.GregorianCalendar(12, 4096, 7, (-1), (int) (short) 10);
        int int22 = gregorianCalendar21.getWeeksInWeekYear();
        java.lang.String str23 = gregorianCalendar21.getCalendarType();
        java.time.ZonedDateTime zonedDateTime24 = gregorianCalendar21.toZonedDateTime();
        int int25 = zonedDateTime15.compareTo((java.time.chrono.ChronoZonedDateTime<java.time.LocalDate>) zonedDateTime24);
        java.time.ZonedDateTime zonedDateTime27 = zonedDateTime15.plusDays((long) 2022);
        java.time.Instant instant28 = zonedDateTime15.toInstant();
        java.time.chrono.Chronology chronology29 = zonedDateTime15.getChronology();
        java.util.GregorianCalendar gregorianCalendar35 = new java.util.GregorianCalendar(12, 4096, 7, (-1), (int) (short) 10);
        int int36 = gregorianCalendar35.getWeeksInWeekYear();
        java.lang.String str37 = gregorianCalendar35.getCalendarType();
        java.time.ZonedDateTime zonedDateTime38 = gregorianCalendar35.toZonedDateTime();
        java.time.ZonedDateTime zonedDateTime40 = zonedDateTime38.minusMonths((long) 10);
        boolean boolean41 = zonedDateTime15.isBefore((java.time.chrono.ChronoZonedDateTime<java.time.LocalDate>) zonedDateTime40);
        java.time.OffsetDateTime offsetDateTime42 = java.time.OffsetDateTime.from((java.time.temporal.TemporalAccessor) zonedDateTime15);
        java.util.GregorianCalendar gregorianCalendar48 = new java.util.GregorianCalendar(12, 4096, 7, (-1), (int) (short) 10);
        int int49 = gregorianCalendar48.getWeeksInWeekYear();
        java.lang.String str50 = gregorianCalendar48.getCalendarType();
        java.time.ZonedDateTime zonedDateTime51 = gregorianCalendar48.toZonedDateTime();
        java.time.ZonedDateTime zonedDateTime53 = zonedDateTime51.minusMonths((long) 10);
        java.time.chrono.ChronoZonedDateTime<java.time.LocalDate> localDateChronoZonedDateTime54 = zonedDateTime51.withEarlierOffsetAtOverlap();
        java.time.ZonedDateTime zonedDateTime56 = zonedDateTime51.minusMonths((long) 4200);
        java.time.ZonedDateTime zonedDateTime58 = zonedDateTime56.plusNanos(8L);
        org.joda.time.Period period59 = org.joda.time.Period.ZERO;
        org.joda.time.Period period60 = period59.normalizedStandard();
        org.joda.time.Period period62 = period59.plusHours(2);
        java.time.chrono.IsoEra isoEra63 = java.time.chrono.IsoEra.CE;
        boolean boolean64 = period62.equals((java.lang.Object) isoEra63);
        java.time.LocalTime localTime69 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime70 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime69);
        java.time.LocalTime localTime75 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime76 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime75);
        java.time.temporal.ChronoField chronoField77 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime79 = localTime75.with((java.time.temporal.TemporalField) chronoField77, (long) (short) 1);
        long long80 = localTime69.getLong((java.time.temporal.TemporalField) chronoField77);
        boolean boolean81 = isoEra63.isSupported((java.time.temporal.TemporalField) chronoField77);
        boolean boolean82 = zonedDateTime56.isSupported((java.time.temporal.TemporalField) chronoField77);
        java.time.OffsetDateTime offsetDateTime84 = offsetDateTime42.with((java.time.temporal.TemporalField) chronoField77, (long) 122);
        java.time.OffsetDateTime offsetDateTime86 = offsetDateTime42.plusYears((long) 19043);
        java.time.temporal.Temporal temporal87 = localDateTime0.adjustInto((java.time.temporal.Temporal) offsetDateTime86);
        java.time.OffsetDateTime offsetDateTime89 = offsetDateTime86.minusHours(115430400000L);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertTrue("'" + chronoField1 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField1.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 52 + "'", int13 == 52);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "gregory" + "'", str14, "gregory");
        org.junit.Assert.assertNotNull(zonedDateTime15);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 52 + "'", int22 == 52);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "gregory" + "'", str23, "gregory");
        org.junit.Assert.assertNotNull(zonedDateTime24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(zonedDateTime27);
        org.junit.Assert.assertNotNull(instant28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 52 + "'", int36 == 52);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "gregory" + "'", str37, "gregory");
        org.junit.Assert.assertNotNull(zonedDateTime38);
        org.junit.Assert.assertNotNull(zonedDateTime40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(offsetDateTime42);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 52 + "'", int49 == 52);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "gregory" + "'", str50, "gregory");
        org.junit.Assert.assertNotNull(zonedDateTime51);
        org.junit.Assert.assertNotNull(zonedDateTime53);
        org.junit.Assert.assertNotNull(localDateChronoZonedDateTime54);
        org.junit.Assert.assertNotNull(zonedDateTime56);
        org.junit.Assert.assertNotNull(zonedDateTime58);
        org.junit.Assert.assertNotNull(period59);
        org.junit.Assert.assertNotNull(period60);
        org.junit.Assert.assertNotNull(period62);
        org.junit.Assert.assertTrue("'" + isoEra63 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra63.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(localTime69);
        org.junit.Assert.assertNotNull(localTime70);
        org.junit.Assert.assertNotNull(localTime75);
        org.junit.Assert.assertNotNull(localTime76);
        org.junit.Assert.assertTrue("'" + chronoField77 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField77.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime79);
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 3601000000001L + "'", long80 == 3601000000001L);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNotNull(offsetDateTime84);
        org.junit.Assert.assertNotNull(offsetDateTime86);
        org.junit.Assert.assertNotNull(temporal87);
        org.junit.Assert.assertNotNull(offsetDateTime89);
    }

    @Test
    public void test5039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5039");
        org.joda.time.Duration duration1 = new org.joda.time.Duration(0L);
    }

    @Test
    public void test5040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5040");
        java.time.temporal.ChronoField chronoField0 = java.time.temporal.ChronoField.PROLEPTIC_MONTH;
        long long2 = chronoField0.checkValidValue((long) 40);
        org.junit.Assert.assertTrue("'" + chronoField0 + "' != '" + java.time.temporal.ChronoField.PROLEPTIC_MONTH + "'", chronoField0.equals(java.time.temporal.ChronoField.PROLEPTIC_MONTH));
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 40L + "'", long2 == 40L);
    }

    @Test
    public void test5041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5041");
        java.time.LocalDate localDate1 = java.time.LocalDate.ofEpochDay((long) ' ');
        java.time.OffsetTime offsetTime2 = java.time.OffsetTime.MAX;
        java.time.LocalTime localTime3 = offsetTime2.toLocalTime();
        java.lang.String str4 = offsetTime2.toString();
        java.time.Duration duration5 = java.time.Duration.ZERO;
        java.lang.String str6 = duration5.toString();
        java.time.OffsetTime offsetTime7 = offsetTime2.plus((java.time.temporal.TemporalAmount) duration5);
        java.time.LocalTime localTime8 = offsetTime2.toLocalTime();
        java.time.chrono.ChronoLocalDateTime<?> wildcardChronoLocalDateTime9 = localDate1.atTime(localTime8);
        java.time.LocalDate localDate11 = localDate1.minusWeeks((long) 2097);
        java.lang.String str12 = localDate11.toString();
        java.time.chrono.Era era13 = localDate11.getEra();
        int int14 = era13.getValue();
        java.time.LocalDateTime localDateTime15 = java.time.LocalDateTime.now();
        java.time.temporal.ChronoField chronoField16 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime18 = localDateTime15.with((java.time.temporal.TemporalField) chronoField16, (long) 10);
        java.time.LocalDateTime localDateTime20 = localDateTime15.withDayOfYear((int) '/');
        java.time.temporal.Temporal temporal21 = era13.adjustInto((java.time.temporal.Temporal) localDateTime20);
        org.junit.Assert.assertNotNull(localDate1);
        org.junit.Assert.assertNotNull(offsetTime2);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "23:59:59.999999999-18:00" + "'", str4, "23:59:59.999999999-18:00");
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "PT0S" + "'", str6, "PT0S");
        org.junit.Assert.assertNotNull(offsetTime7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(wildcardChronoLocalDateTime9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "1929-11-25" + "'", str12, "1929-11-25");
        org.junit.Assert.assertTrue("'" + era13 + "' != '" + java.time.chrono.IsoEra.CE + "'", era13.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertTrue("'" + chronoField16 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField16.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(temporal21);
    }

    @Test
    public void test5042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5042");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 3, chronology1);
        org.joda.time.DateTime.Property property3 = dateTime2.dayOfYear();
        org.joda.time.Interval interval4 = property3.toInterval();
        java.lang.String str5 = interval4.toString();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) 3, chronology7);
        org.joda.time.DateTime.Property property9 = dateTime8.dayOfYear();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight((java.lang.Object) dateTime8, chronology10);
        org.joda.time.MutableDateTime mutableDateTime12 = dateTime8.toMutableDateTime();
        org.joda.time.Days days13 = org.joda.time.Days.ONE;
        org.joda.time.MutableInterval mutableInterval14 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadablePeriod) days13);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) 3, chronology16);
        org.joda.time.DateTime.Property property18 = dateTime17.dayOfYear();
        org.joda.time.Interval interval19 = property18.toInterval();
        mutableInterval14.setInterval((org.joda.time.ReadableInterval) interval19);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) 3, chronology22);
        org.joda.time.DateTime.Property property24 = dateTime23.dayOfYear();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight((java.lang.Object) dateTime23, chronology25);
        org.joda.time.DateMidnight.Property property27 = dateMidnight26.dayOfMonth();
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.Duration duration30 = new org.joda.time.Duration(readableInstant28, readableInstant29);
        org.joda.time.Duration duration32 = duration30.withMillis((-1L));
        org.joda.time.ReadableDuration readableDuration33 = null;
        org.joda.time.Duration duration34 = duration30.minus(readableDuration33);
        org.joda.time.DateMidnight dateMidnight35 = dateMidnight26.plus((org.joda.time.ReadableDuration) duration34);
        mutableInterval14.setDurationAfterStart((org.joda.time.ReadableDuration) duration34);
        org.joda.time.MutableDateTime mutableDateTime37 = new org.joda.time.MutableDateTime();
        boolean boolean38 = mutableInterval14.isBefore((org.joda.time.ReadableInstant) mutableDateTime37);
        boolean boolean39 = interval4.isAfter((org.joda.time.ReadableInstant) mutableDateTime37);
        org.joda.time.Chronology chronology40 = interval4.getChronology();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1970-01-01T00:00:00.000Z/1970-01-02T00:00:00.000Z" + "'", str5, "1970-01-01T00:00:00.000Z/1970-01-02T00:00:00.000Z");
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertNotNull(days13);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(dateMidnight35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(chronology40);
    }

    @Test
    public void test5043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5043");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.now();
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery1 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period2 = localDateTime0.query(periodTemporalQuery1);
        java.time.chrono.IsoChronology isoChronology3 = period2.getChronology();
        java.time.Clock clock4 = java.time.Clock.systemUTC();
        java.time.Duration duration6 = java.time.Duration.ofSeconds((long) 256);
        java.time.Clock clock7 = java.time.Clock.tick(clock4, duration6);
        java.time.Duration duration9 = java.time.Duration.ofMinutes((long) 3);
        java.time.Duration duration10 = duration9.abs();
        java.time.Clock clock11 = java.time.Clock.offset(clock4, duration9);
        java.time.LocalDate localDate12 = java.time.LocalDate.now(clock11);
        java.time.LocalDate localDate13 = isoChronology3.dateNow(clock11);
        java.lang.String str14 = isoChronology3.toString();
        java.time.chrono.ChronoLocalDate chronoLocalDate16 = isoChronology3.dateEpochDay((long) (short) 1);
        java.time.LocalDateTime localDateTime17 = java.time.LocalDateTime.now();
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery18 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period19 = localDateTime17.query(periodTemporalQuery18);
        java.time.chrono.IsoChronology isoChronology20 = period19.getChronology();
        java.time.Clock clock21 = java.time.Clock.systemUTC();
        java.time.Duration duration23 = java.time.Duration.ofSeconds((long) 256);
        java.time.Clock clock24 = java.time.Clock.tick(clock21, duration23);
        java.time.Duration duration26 = java.time.Duration.ofMinutes((long) 3);
        java.time.Duration duration27 = duration26.abs();
        java.time.Clock clock28 = java.time.Clock.offset(clock21, duration26);
        java.time.LocalDate localDate29 = java.time.LocalDate.now(clock28);
        java.time.LocalDate localDate30 = isoChronology20.dateNow(clock28);
        java.lang.String str31 = isoChronology20.toString();
        java.time.chrono.IsoEra isoEra32 = java.time.chrono.IsoEra.CE;
        int int33 = isoEra32.getValue();
        int int35 = isoChronology20.prolepticYear((java.time.chrono.Era) isoEra32, 96000000);
        int int37 = isoChronology3.prolepticYear((java.time.chrono.Era) isoEra32, 31);
        java.time.LocalDateTime localDateTime38 = java.time.LocalDateTime.now();
        java.time.temporal.ChronoField chronoField39 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime41 = localDateTime38.with((java.time.temporal.TemporalField) chronoField39, (long) 10);
        java.time.LocalDateTime localDateTime43 = localDateTime38.minusMinutes((long) 12);
        java.time.LocalDateTime localDateTime44 = java.time.LocalDateTime.now();
        java.time.temporal.ChronoField chronoField45 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime47 = localDateTime44.with((java.time.temporal.TemporalField) chronoField45, (long) 10);
        java.time.Duration duration49 = java.time.Duration.ofSeconds((long) 0);
        java.time.temporal.Temporal temporal50 = localDateTime44.minus((java.time.temporal.TemporalAmount) duration49);
        boolean boolean51 = localDateTime38.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime44);
        int int52 = localDateTime44.getMonthValue();
        java.time.LocalDate localDate53 = localDateTime44.toLocalDate();
        java.time.LocalDate localDate54 = isoChronology3.date((java.time.temporal.TemporalAccessor) localDate53);
        java.nio.file.attribute.FileTime fileTime57 = java.nio.file.attribute.FileTime.fromMillis((long) 21);
        java.time.Instant instant58 = fileTime57.toInstant();
        java.util.GregorianCalendar gregorianCalendar65 = new java.util.GregorianCalendar(12, 4096, 7, (-1), (int) (short) 10);
        int int66 = gregorianCalendar65.getWeeksInWeekYear();
        java.lang.String str67 = gregorianCalendar65.getCalendarType();
        java.time.ZonedDateTime zonedDateTime68 = gregorianCalendar65.toZonedDateTime();
        java.time.ZonedDateTime zonedDateTime70 = zonedDateTime68.minusMonths((long) 10);
        java.time.OffsetDateTime offsetDateTime71 = zonedDateTime70.toOffsetDateTime();
        java.time.ZoneOffset zoneOffset75 = java.time.ZoneOffset.ofHoursMinutes(1, 10);
        java.time.temporal.ChronoField chronoField76 = java.time.temporal.ChronoField.HOUR_OF_DAY;
        java.time.temporal.ValueRange valueRange77 = chronoField76.range();
        boolean boolean78 = zoneOffset75.isSupported((java.time.temporal.TemporalField) chronoField76);
        java.time.temporal.TemporalUnit temporalUnit79 = chronoField76.getBaseUnit();
        java.time.OffsetDateTime offsetDateTime80 = offsetDateTime71.plus((long) 'u', temporalUnit79);
        java.time.Instant instant81 = instant58.minus((long) 78000000, temporalUnit79);
        // The following exception was thrown during execution in test generation
        try {
            java.time.chrono.ChronoLocalDate chronoLocalDate82 = localDate54.plus(1645434632L, temporalUnit79);
            org.junit.Assert.fail("Expected exception of type java.time.temporal.UnsupportedTemporalTypeException; message: Unsupported unit: Hours");
        } catch (java.time.temporal.UnsupportedTemporalTypeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(periodTemporalQuery1);
        org.junit.Assert.assertNotNull(period2);
        org.junit.Assert.assertNotNull(isoChronology3);
        org.junit.Assert.assertNotNull(clock4);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(clock7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(clock11);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ISO" + "'", str14, "ISO");
        org.junit.Assert.assertNotNull(chronoLocalDate16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(periodTemporalQuery18);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(isoChronology20);
        org.junit.Assert.assertNotNull(clock21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(clock24);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(clock28);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "ISO" + "'", str31, "ISO");
        org.junit.Assert.assertTrue("'" + isoEra32 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra32.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 96000000 + "'", int35 == 96000000);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 31 + "'", int37 == 31);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertTrue("'" + chronoField39 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField39.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertTrue("'" + chronoField45 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField45.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime47);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(temporal50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2 + "'", int52 == 2);
        org.junit.Assert.assertNotNull(localDate53);
        org.junit.Assert.assertNotNull(localDate54);
        org.junit.Assert.assertNotNull(fileTime57);
        org.junit.Assert.assertNotNull(instant58);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 52 + "'", int66 == 52);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "gregory" + "'", str67, "gregory");
        org.junit.Assert.assertNotNull(zonedDateTime68);
        org.junit.Assert.assertNotNull(zonedDateTime70);
        org.junit.Assert.assertNotNull(offsetDateTime71);
        org.junit.Assert.assertNotNull(zoneOffset75);
        org.junit.Assert.assertTrue("'" + chronoField76 + "' != '" + java.time.temporal.ChronoField.HOUR_OF_DAY + "'", chronoField76.equals(java.time.temporal.ChronoField.HOUR_OF_DAY));
        org.junit.Assert.assertNotNull(valueRange77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + temporalUnit79 + "' != '" + java.time.temporal.ChronoUnit.HOURS + "'", temporalUnit79.equals(java.time.temporal.ChronoUnit.HOURS));
        org.junit.Assert.assertNotNull(offsetDateTime80);
        org.junit.Assert.assertNotNull(instant81);
    }

    @Test
    public void test5044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5044");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((long) 0, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) 3, chronology4);
        org.joda.time.DateTime.Property property6 = dateTime5.dayOfYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateMidnight dateMidnight8 = new org.joda.time.DateMidnight((java.lang.Object) dateTime5, chronology7);
        org.joda.time.DateTime dateTime9 = localTime2.toDateTime((org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTime dateTime11 = dateTime9.minusMillis((int) (byte) 0);
        boolean boolean13 = dateTime11.isAfter((long) (byte) -1);
        boolean boolean15 = dateTime11.isBefore(3881329060001L);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    }

    @Test
    public void test5045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5045");
        java.util.TimeZone timeZone3 = null;
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight((long) 1970, dateTimeZone4);
        long long8 = dateTimeZone4.convertLocalToUTC((long) 3, false);
        org.joda.time.Interval interval9 = new org.joda.time.Interval(10L, (long) 2097, dateTimeZone4);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(dateTimeZone4);
        org.joda.time.MutableDateTime mutableDateTime11 = dateTime10.toMutableDateTime();
        int int12 = dateTime10.getMonthOfYear();
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.Duration duration15 = new org.joda.time.Duration(readableInstant13, readableInstant14);
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.PeriodType periodType17 = null;
        org.joda.time.Period period18 = duration15.toPeriodTo(readableInstant16, periodType17);
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.Duration duration21 = new org.joda.time.Duration(readableInstant19, readableInstant20);
        long long22 = duration21.getMillis();
        boolean boolean23 = duration15.isShorterThan((org.joda.time.ReadableDuration) duration21);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((long) 3, chronology25);
        org.joda.time.DateTime.Property property27 = dateTime26.dayOfYear();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateMidnight dateMidnight29 = new org.joda.time.DateMidnight((java.lang.Object) dateTime26, chronology28);
        org.joda.time.MutableDateTime mutableDateTime30 = dateTime26.toMutableDateTime();
        mutableDateTime30.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property33 = mutableDateTime30.dayOfWeek();
        org.joda.time.MutableDateTime.Property property34 = mutableDateTime30.year();
        org.joda.time.MutableDateTime.Property property35 = mutableDateTime30.weekyear();
        boolean boolean36 = duration15.equals((java.lang.Object) mutableDateTime30);
        mutableDateTime30.addMonths((int) ' ');
        mutableDateTime30.add((long) (byte) 10);
        org.joda.time.Period period41 = org.joda.time.Period.ZERO;
        org.joda.time.Period period42 = period41.normalizedStandard();
        org.joda.time.Period period44 = period41.plusHours(2);
        java.time.chrono.IsoEra isoEra45 = java.time.chrono.IsoEra.CE;
        boolean boolean46 = period44.equals((java.lang.Object) isoEra45);
        int int47 = period44.getMinutes();
        mutableDateTime30.add((org.joda.time.ReadablePeriod) period44);
        java.util.TimeZone timeZone50 = null;
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.forTimeZone(timeZone50);
        org.joda.time.DateMidnight dateMidnight52 = new org.joda.time.DateMidnight((long) 1970, dateTimeZone51);
        long long55 = dateTimeZone51.convertLocalToUTC((long) 3, false);
        long long58 = dateTimeZone51.convertLocalToUTC(0L, true);
        mutableDateTime30.setZoneRetainFields(dateTimeZone51);
        java.lang.String str60 = dateTimeZone51.toString();
        org.joda.time.chrono.EthiopicChronology ethiopicChronology61 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone51);
        org.joda.time.DateTimeField dateTimeField62 = ethiopicChronology61.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone63 = ethiopicChronology61.getZone();
        org.joda.time.DateTimeField dateTimeField64 = ethiopicChronology61.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField65 = ethiopicChronology61.minuteOfDay();
        org.joda.time.Chronology chronology66 = ethiopicChronology61.withUTC();
        org.joda.time.DateTimeField dateTimeField67 = ethiopicChronology61.secondOfMinute();
        org.joda.time.Period period68 = org.joda.time.Period.ZERO;
        org.joda.time.Period period69 = period68.normalizedStandard();
        org.joda.time.Period period71 = period68.plusHours(2);
        int int72 = period68.getDays();
        org.joda.time.Period period74 = period68.plusWeeks(366);
        long long77 = ethiopicChronology61.add((org.joda.time.ReadablePeriod) period74, (long) ' ', (-100));
        org.joda.time.DateTime dateTime78 = dateTime10.toDateTime((org.joda.time.Chronology) ethiopicChronology61);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 3L + "'", long8 == 3L);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(mutableDateTime30);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertTrue("'" + isoEra45 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra45.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 3L + "'", long55 == 3L);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 0L + "'", long58 == 0L);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "Etc/UTC" + "'", str60, "Etc/UTC");
        org.junit.Assert.assertNotNull(ethiopicChronology61);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertNotNull(dateTimeZone63);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(period68);
        org.junit.Assert.assertNotNull(period69);
        org.junit.Assert.assertNotNull(period71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(period74);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + (-22135679999968L) + "'", long77 == (-22135679999968L));
        org.junit.Assert.assertNotNull(dateTime78);
    }

    @Test
    public void test5046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5046");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.nio.LongBuffer longBuffer3 = java.nio.LongBuffer.allocate((int) (short) 0);
        java.nio.Buffer buffer4 = longBuffer3.mark();
        boolean boolean5 = properties1.containsKey((java.lang.Object) longBuffer3);
        java.util.Collection<java.lang.Object> objCollection6 = properties1.values();
        java.util.Properties properties7 = new java.util.Properties(properties1);
        java.lang.String str8 = properties7.toString();
        org.junit.Assert.assertNotNull(longBuffer3);
        org.junit.Assert.assertNotNull(buffer4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(objCollection6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "{}" + "'", str8, "{}");
    }

    @Test
    public void test5047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5047");
        java.text.FieldPosition fieldPosition1 = new java.text.FieldPosition(4096);
        fieldPosition1.setBeginIndex(41);
    }

    @Test
    public void test5048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5048");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 3, chronology1);
        org.joda.time.DateTime.Property property3 = dateTime2.dayOfYear();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight((java.lang.Object) dateTime2, chronology4);
        org.joda.time.MutableDateTime mutableDateTime6 = dateTime2.toMutableDateTime();
        org.joda.time.Days days7 = org.joda.time.Days.ONE;
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadablePeriod) days7);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) 3, chronology10);
        org.joda.time.DateTime.Property property12 = dateTime11.dayOfYear();
        org.joda.time.Interval interval13 = property12.toInterval();
        mutableInterval8.setInterval((org.joda.time.ReadableInterval) interval13);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) 3, chronology16);
        org.joda.time.DateTime.Property property18 = dateTime17.dayOfYear();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight((java.lang.Object) dateTime17, chronology19);
        org.joda.time.DateMidnight dateMidnight22 = dateMidnight20.minusMonths((-1));
        boolean boolean23 = interval13.isAfter((org.joda.time.ReadableInstant) dateMidnight20);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((long) 3, chronology25);
        org.joda.time.DateTime.Property property27 = dateTime26.dayOfYear();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateMidnight dateMidnight29 = new org.joda.time.DateMidnight((java.lang.Object) dateTime26, chronology28);
        org.joda.time.MutableDateTime mutableDateTime30 = dateTime26.toMutableDateTime();
        org.joda.time.Days days31 = org.joda.time.Days.ONE;
        org.joda.time.MutableInterval mutableInterval32 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime26, (org.joda.time.ReadablePeriod) days31);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime((long) 3, chronology34);
        org.joda.time.DateTime.Property property36 = dateTime35.dayOfYear();
        org.joda.time.Interval interval37 = property36.toInterval();
        mutableInterval32.setInterval((org.joda.time.ReadableInterval) interval37);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime((long) 3, chronology40);
        org.joda.time.DateTime.Property property42 = dateTime41.dayOfYear();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.DateMidnight dateMidnight44 = new org.joda.time.DateMidnight((java.lang.Object) dateTime41, chronology43);
        org.joda.time.DateMidnight dateMidnight46 = dateMidnight44.minusMonths((-1));
        boolean boolean47 = interval37.isAfter((org.joda.time.ReadableInstant) dateMidnight44);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime((long) 3, chronology49);
        org.joda.time.DateTime.Property property51 = dateTime50.dayOfYear();
        org.joda.time.Interval interval52 = property51.toInterval();
        org.joda.time.Period period53 = org.joda.time.Period.ZERO;
        org.joda.time.Period period54 = period53.normalizedStandard();
        org.joda.time.Period period56 = period54.minusMinutes((int) ' ');
        org.joda.time.Period period58 = period56.withMinutes(32769);
        boolean boolean59 = interval52.equals((java.lang.Object) period58);
        boolean boolean60 = interval37.contains((org.joda.time.ReadableInterval) interval52);
        boolean boolean61 = interval13.contains((org.joda.time.ReadableInterval) interval37);
        org.joda.time.DateTime dateTime62 = interval13.getEnd();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(days7);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(mutableDateTime30);
        org.junit.Assert.assertNotNull(days31);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(dateMidnight46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(interval52);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(period54);
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertNotNull(period58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(dateTime62);
    }

    @Test
    public void test5049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5049");
        java.time.LocalDate localDate1 = java.time.LocalDate.ofEpochDay((long) ' ');
        java.time.OffsetTime offsetTime2 = java.time.OffsetTime.MAX;
        java.time.LocalTime localTime3 = offsetTime2.toLocalTime();
        java.lang.String str4 = offsetTime2.toString();
        java.time.Duration duration5 = java.time.Duration.ZERO;
        java.lang.String str6 = duration5.toString();
        java.time.OffsetTime offsetTime7 = offsetTime2.plus((java.time.temporal.TemporalAmount) duration5);
        java.time.LocalTime localTime8 = offsetTime2.toLocalTime();
        java.time.chrono.ChronoLocalDateTime<?> wildcardChronoLocalDateTime9 = localDate1.atTime(localTime8);
        java.time.LocalDate localDate11 = localDate1.minusWeeks((long) 2097);
        java.time.LocalDate localDate13 = localDate11.minusMonths((long) (byte) 0);
        java.time.LocalDate localDate15 = java.time.LocalDate.ofEpochDay((long) ' ');
        int int16 = localDate15.getMonthValue();
        org.joda.time.Period period17 = org.joda.time.Period.ZERO;
        org.joda.time.Period period18 = period17.normalizedStandard();
        org.joda.time.Period period20 = period17.plusHours(2);
        java.time.chrono.IsoEra isoEra21 = java.time.chrono.IsoEra.CE;
        boolean boolean22 = period20.equals((java.lang.Object) isoEra21);
        java.time.LocalTime localTime27 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime28 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime27);
        java.time.LocalTime localTime33 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime34 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime33);
        java.time.temporal.ChronoField chronoField35 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime37 = localTime33.with((java.time.temporal.TemporalField) chronoField35, (long) (short) 1);
        long long38 = localTime27.getLong((java.time.temporal.TemporalField) chronoField35);
        boolean boolean39 = isoEra21.isSupported((java.time.temporal.TemporalField) chronoField35);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery40 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period41 = isoEra21.query(periodTemporalQuery40);
        boolean boolean42 = period41.isNegative();
        java.time.Period period44 = period41.plusDays((long) ' ');
        java.time.temporal.ChronoField chronoField45 = java.time.temporal.ChronoField.SECOND_OF_DAY;
        boolean boolean46 = period41.equals((java.lang.Object) chronoField45);
        boolean boolean47 = localDate15.isSupported((java.time.temporal.TemporalField) chronoField45);
        java.time.temporal.TemporalUnit temporalUnit48 = chronoField45.getRangeUnit();
        // The following exception was thrown during execution in test generation
        try {
            java.time.temporal.Temporal temporal50 = localDate11.with((java.time.temporal.TemporalField) chronoField45, 1644481495L);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for SecondOfDay (valid values 0 - 86399): 1644481495");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate1);
        org.junit.Assert.assertNotNull(offsetTime2);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "23:59:59.999999999-18:00" + "'", str4, "23:59:59.999999999-18:00");
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "PT0S" + "'", str6, "PT0S");
        org.junit.Assert.assertNotNull(offsetTime7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(wildcardChronoLocalDateTime9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertTrue("'" + isoEra21 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra21.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(localTime27);
        org.junit.Assert.assertNotNull(localTime28);
        org.junit.Assert.assertNotNull(localTime33);
        org.junit.Assert.assertNotNull(localTime34);
        org.junit.Assert.assertTrue("'" + chronoField35 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField35.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime37);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 3601000000001L + "'", long38 == 3601000000001L);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(periodTemporalQuery40);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertTrue("'" + chronoField45 + "' != '" + java.time.temporal.ChronoField.SECOND_OF_DAY + "'", chronoField45.equals(java.time.temporal.ChronoField.SECOND_OF_DAY));
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + temporalUnit48 + "' != '" + java.time.temporal.ChronoUnit.DAYS + "'", temporalUnit48.equals(java.time.temporal.ChronoUnit.DAYS));
    }

    @Test
    public void test5050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5050");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((long) 0, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) 3, chronology4);
        org.joda.time.DateTime.Property property6 = dateTime5.dayOfYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateMidnight dateMidnight8 = new org.joda.time.DateMidnight((java.lang.Object) dateTime5, chronology7);
        org.joda.time.DateTime dateTime9 = localTime2.toDateTime((org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTime dateTime11 = dateTime9.minusMillis((int) (byte) 0);
        org.joda.time.DateTime dateTime13 = dateTime9.withYearOfCentury((int) (byte) 10);
        org.joda.time.DateMidnight dateMidnight14 = dateTime13.toDateMidnight();
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateMidnight14);
    }

    @Test
    public void test5051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5051");
        java.io.PrintStream printStream1 = new java.io.PrintStream("subject:\n (GERMAN)");
        printStream1.write((int) '#');
        java.util.GregorianCalendar gregorianCalendar9 = new java.util.GregorianCalendar(12, 4096, 7, (-1), (int) (short) 10);
        int int10 = gregorianCalendar9.getWeeksInWeekYear();
        java.util.TimeZone timeZone11 = gregorianCalendar9.getTimeZone();
        int int13 = gregorianCalendar9.getMaximum((int) (short) 10);
        printStream1.print((java.lang.Object) gregorianCalendar9);
        printStream1.println((long) 20);
        printStream1.write(100);
        printStream1.close();
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52 + "'", int10 == 52);
        org.junit.Assert.assertNotNull(timeZone11);
// flaky:         org.junit.Assert.assertEquals(timeZone11.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 11 + "'", int13 == 11);
    }

    @Test
    public void test5052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5052");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Duration duration2 = new org.joda.time.Duration(readableInstant0, readableInstant1);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = duration2.toPeriodTo(readableInstant3, periodType4);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.Duration duration8 = new org.joda.time.Duration(readableInstant6, readableInstant7);
        long long9 = duration8.getMillis();
        boolean boolean10 = duration2.isShorterThan((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) 3, chronology12);
        org.joda.time.DateTime.Property property14 = dateTime13.dayOfYear();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight((java.lang.Object) dateTime13, chronology15);
        org.joda.time.MutableDateTime mutableDateTime17 = dateTime13.toMutableDateTime();
        mutableDateTime17.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime17.dayOfWeek();
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime17.year();
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime17.weekyear();
        boolean boolean23 = duration2.equals((java.lang.Object) mutableDateTime17);
        mutableDateTime17.addMonths((int) ' ');
        mutableDateTime17.add((long) (byte) 10);
        org.joda.time.Period period28 = org.joda.time.Period.ZERO;
        org.joda.time.Period period29 = period28.normalizedStandard();
        org.joda.time.Period period31 = period28.plusHours(2);
        java.time.chrono.IsoEra isoEra32 = java.time.chrono.IsoEra.CE;
        boolean boolean33 = period31.equals((java.lang.Object) isoEra32);
        int int34 = period31.getMinutes();
        mutableDateTime17.add((org.joda.time.ReadablePeriod) period31);
        java.util.TimeZone timeZone37 = null;
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forTimeZone(timeZone37);
        org.joda.time.DateMidnight dateMidnight39 = new org.joda.time.DateMidnight((long) 1970, dateTimeZone38);
        long long42 = dateTimeZone38.convertLocalToUTC((long) 3, false);
        long long45 = dateTimeZone38.convertLocalToUTC(0L, true);
        mutableDateTime17.setZoneRetainFields(dateTimeZone38);
        java.lang.String str47 = dateTimeZone38.toString();
        org.joda.time.chrono.EthiopicChronology ethiopicChronology48 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone38);
        org.joda.time.DateTimeField dateTimeField49 = ethiopicChronology48.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone50 = ethiopicChronology48.getZone();
        org.joda.time.DateTimeField dateTimeField51 = ethiopicChronology48.era();
        org.joda.time.DateTimeField dateTimeField52 = ethiopicChronology48.secondOfDay();
        org.joda.time.DateTimeField dateTimeField53 = ethiopicChronology48.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField54 = ethiopicChronology48.halfdayOfDay();
        org.joda.time.DurationField durationField55 = ethiopicChronology48.weekyears();
        org.joda.time.DateTimeField dateTimeField56 = ethiopicChronology48.yearOfEra();
        org.joda.time.DateTimeField dateTimeField57 = ethiopicChronology48.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField58 = ethiopicChronology48.millisOfDay();
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertTrue("'" + isoEra32 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra32.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 3L + "'", long42 == 3L);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Etc/UTC" + "'", str47, "Etc/UTC");
        org.junit.Assert.assertNotNull(ethiopicChronology48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(durationField55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(dateTimeField58);
    }

    @Test
    public void test5053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5053");
        java.util.stream.IntStream.Builder builder0 = java.util.stream.IntStream.builder();
        java.util.stream.IntStream.Builder builder2 = builder0.add(2021);
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(builder2);
    }

    @Test
    public void test5054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5054");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((long) 0, chronology2);
        org.joda.time.Chronology chronology4 = localTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField5 = chronology4.weekyearOfCentury();
        org.joda.time.DurationField durationField6 = chronology4.weekyears();
        org.joda.time.DurationField durationField7 = chronology4.seconds();
        org.joda.time.LocalTime localTime8 = org.joda.time.LocalTime.fromMillisOfDay((long) (byte) 0, chronology4);
        org.joda.time.LocalTime.Property property9 = localTime8.millisOfSecond();
        org.joda.time.LocalTime localTime10 = property9.roundCeilingCopy();
        org.joda.time.LocalTime localTime12 = property9.addCopy((-1));
        org.joda.time.LocalTime localTime14 = property9.setCopy(0);
        org.joda.time.LocalTime localTime15 = property9.roundHalfCeilingCopy();
        org.joda.time.LocalTime localTime16 = property9.withMinimumValue();
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(localTime16);
    }

    @Test
    public void test5055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5055");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Duration duration2 = new org.joda.time.Duration(readableInstant0, readableInstant1);
        org.joda.time.Duration duration4 = duration2.withMillis((-1L));
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((long) 3, chronology6);
        org.joda.time.DateTime.Property property8 = dateTime7.dayOfYear();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight((java.lang.Object) dateTime7, chronology9);
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight10.minusMonths((-1));
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight10.withDayOfYear((int) ' ');
        org.joda.time.PeriodType periodType15 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period16 = duration4.toPeriodFrom((org.joda.time.ReadableInstant) dateMidnight10, periodType15);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.Duration duration19 = new org.joda.time.Duration(readableInstant17, readableInstant18);
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.PeriodType periodType21 = null;
        org.joda.time.Period period22 = duration19.toPeriodTo(readableInstant20, periodType21);
        long long23 = duration19.getStandardSeconds();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((long) 3, chronology25);
        org.joda.time.DateTime.Property property27 = dateTime26.dayOfYear();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateMidnight dateMidnight29 = new org.joda.time.DateMidnight((java.lang.Object) dateTime26, chronology28);
        org.joda.time.DateMidnight dateMidnight31 = dateMidnight29.minusMonths((-1));
        org.joda.time.DateMidnight dateMidnight33 = dateMidnight29.withDayOfYear((int) ' ');
        org.joda.time.Interval interval34 = duration19.toIntervalTo((org.joda.time.ReadableInstant) dateMidnight33);
        org.joda.time.PeriodType periodType36 = org.joda.time.PeriodType.time();
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod((long) 'a', periodType36);
        org.joda.time.Period period38 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight10, (org.joda.time.ReadableDuration) duration19, periodType36);
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.Duration duration41 = new org.joda.time.Duration(readableInstant39, readableInstant40);
        org.joda.time.Seconds seconds42 = duration41.toStandardSeconds();
        int int43 = seconds42.getSeconds();
        org.joda.time.DateMidnight dateMidnight45 = dateMidnight10.withPeriodAdded((org.joda.time.ReadablePeriod) seconds42, 0);
        org.joda.time.ReadableInstant readableInstant46 = null;
        org.joda.time.MutableInterval mutableInterval47 = new org.joda.time.MutableInterval((org.joda.time.ReadablePeriod) seconds42, readableInstant46);
        org.joda.time.Duration duration48 = mutableInterval47.toDuration();
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.LocalTime localTime52 = new org.joda.time.LocalTime((long) 0, chronology51);
        org.joda.time.Chronology chronology53 = localTime52.getChronology();
        org.joda.time.DateTimeField dateTimeField54 = chronology53.weekyearOfCentury();
        org.joda.time.DurationField durationField55 = chronology53.weekyears();
        org.joda.time.DurationField durationField56 = chronology53.seconds();
        org.joda.time.Chronology chronology57 = chronology53.withUTC();
        org.joda.time.DateTimeField dateTimeField58 = chronology53.hourOfDay();
        org.joda.time.LocalTime localTime59 = org.joda.time.LocalTime.fromMillisOfDay(8L, chronology53);
        mutableInterval47.setChronology(chronology53);
        mutableInterval47.setInterval(8380800010L, 34451155400000L);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(periodType15);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateMidnight31);
        org.junit.Assert.assertNotNull(dateMidnight33);
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertNotNull(seconds42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(dateMidnight45);
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(durationField55);
        org.junit.Assert.assertNotNull(durationField56);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(localTime59);
    }

    @Test
    public void test5056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5056");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.now();
        java.time.temporal.ChronoField chronoField1 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime3 = localDateTime0.with((java.time.temporal.TemporalField) chronoField1, (long) 10);
        java.time.LocalDateTime localDateTime5 = localDateTime0.minusMinutes((long) 12);
        java.time.LocalDateTime localDateTime7 = localDateTime5.minusNanos((long) (byte) 1);
        java.time.temporal.ChronoField chronoField8 = java.time.temporal.ChronoField.OFFSET_SECONDS;
        boolean boolean9 = localDateTime7.isSupported((java.time.temporal.TemporalField) chronoField8);
        int int10 = localDateTime7.getMonthValue();
        java.time.Clock clock11 = java.time.Clock.systemUTC();
        java.time.Duration duration13 = java.time.Duration.ofSeconds((long) 256);
        java.time.Clock clock14 = java.time.Clock.tick(clock11, duration13);
        java.time.Duration duration16 = java.time.Duration.ofMinutes((long) 3);
        java.time.Duration duration17 = duration16.abs();
        java.time.Clock clock18 = java.time.Clock.offset(clock11, duration16);
        java.time.LocalDateTime localDateTime19 = java.time.LocalDateTime.now(clock11);
        java.time.LocalDateTime localDateTime21 = localDateTime19.plusNanos((long) (byte) -1);
        boolean boolean22 = localDateTime7.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime19);
        java.time.OffsetTime offsetTime23 = java.time.OffsetTime.MAX;
        java.time.LocalTime localTime24 = offsetTime23.toLocalTime();
        java.lang.String str25 = offsetTime23.toString();
        java.time.Duration duration26 = java.time.Duration.ZERO;
        java.lang.String str27 = duration26.toString();
        java.time.OffsetTime offsetTime28 = offsetTime23.plus((java.time.temporal.TemporalAmount) duration26);
        java.time.OffsetTime offsetTime30 = offsetTime23.plusNanos((long) 0);
        java.time.LocalDate localDate32 = java.time.LocalDate.ofEpochDay((long) ' ');
        java.time.OffsetTime offsetTime33 = java.time.OffsetTime.MAX;
        java.time.LocalTime localTime34 = offsetTime33.toLocalTime();
        java.lang.String str35 = offsetTime33.toString();
        java.time.Duration duration36 = java.time.Duration.ZERO;
        java.lang.String str37 = duration36.toString();
        java.time.OffsetTime offsetTime38 = offsetTime33.plus((java.time.temporal.TemporalAmount) duration36);
        java.time.LocalTime localTime39 = offsetTime33.toLocalTime();
        java.time.chrono.ChronoLocalDateTime<?> wildcardChronoLocalDateTime40 = localDate32.atTime(localTime39);
        java.time.LocalDate localDate42 = localDate32.minusWeeks((long) 2097);
        java.time.OffsetDateTime offsetDateTime43 = offsetTime30.atDate(localDate32);
        java.time.Clock clock44 = java.time.Clock.systemUTC();
        java.time.Duration duration46 = java.time.Duration.ofSeconds((long) 256);
        java.time.Clock clock47 = java.time.Clock.tick(clock44, duration46);
        java.time.OffsetTime offsetTime48 = java.time.OffsetTime.now(clock47);
        java.time.LocalTime localTime49 = java.time.LocalTime.now(clock47);
        java.time.LocalDateTime localDateTime50 = localDate32.atTime(localTime49);
        boolean boolean51 = localDateTime19.isBefore((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime50);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertTrue("'" + chronoField1 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField1.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertTrue("'" + chronoField8 + "' != '" + java.time.temporal.ChronoField.OFFSET_SECONDS + "'", chronoField8.equals(java.time.temporal.ChronoField.OFFSET_SECONDS));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertNotNull(clock11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(clock14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(clock18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(offsetTime23);
        org.junit.Assert.assertNotNull(localTime24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "23:59:59.999999999-18:00" + "'", str25, "23:59:59.999999999-18:00");
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "PT0S" + "'", str27, "PT0S");
        org.junit.Assert.assertNotNull(offsetTime28);
        org.junit.Assert.assertNotNull(offsetTime30);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(offsetTime33);
        org.junit.Assert.assertNotNull(localTime34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "23:59:59.999999999-18:00" + "'", str35, "23:59:59.999999999-18:00");
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "PT0S" + "'", str37, "PT0S");
        org.junit.Assert.assertNotNull(offsetTime38);
        org.junit.Assert.assertNotNull(localTime39);
        org.junit.Assert.assertNotNull(wildcardChronoLocalDateTime40);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertNotNull(offsetDateTime43);
        org.junit.Assert.assertNotNull(clock44);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertNotNull(clock47);
        org.junit.Assert.assertNotNull(offsetTime48);
        org.junit.Assert.assertNotNull(localTime49);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
    }

    @Test
    public void test5057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5057");
        java.nio.charset.Charset charset0 = java.nio.charset.Charset.defaultCharset();
        java.nio.charset.CharsetDecoder charsetDecoder1 = charset0.newDecoder();
        java.nio.charset.Charset charset2 = java.nio.charset.Charset.defaultCharset();
        boolean boolean3 = charset0.contains(charset2);
        java.nio.charset.CharsetEncoder charsetEncoder4 = charset0.newEncoder();
        char[] charArray5 = new char[] {};
        java.nio.CharBuffer charBuffer6 = java.nio.CharBuffer.wrap(charArray5);
        java.nio.ByteBuffer byteBuffer7 = charsetEncoder4.encode(charBuffer6);
        // The following exception was thrown during execution in test generation
        try {
            float float9 = byteBuffer7.getFloat(12);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charset0);
        org.junit.Assert.assertNotNull(charsetDecoder1);
        org.junit.Assert.assertNotNull(charset2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(charsetEncoder4);
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[]");
        org.junit.Assert.assertNotNull(charBuffer6);
        org.junit.Assert.assertNotNull(byteBuffer7);
    }

    @Test
    public void test5058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5058");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Duration duration2 = new org.joda.time.Duration(readableInstant0, readableInstant1);
        org.joda.time.Duration duration4 = duration2.withMillis((-1L));
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((long) 3, chronology6);
        org.joda.time.DateTime.Property property8 = dateTime7.dayOfYear();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight((java.lang.Object) dateTime7, chronology9);
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight10.minusMonths((-1));
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight10.withDayOfYear((int) ' ');
        org.joda.time.PeriodType periodType15 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period16 = duration4.toPeriodFrom((org.joda.time.ReadableInstant) dateMidnight10, periodType15);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.Duration duration19 = new org.joda.time.Duration(readableInstant17, readableInstant18);
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.PeriodType periodType21 = null;
        org.joda.time.Period period22 = duration19.toPeriodTo(readableInstant20, periodType21);
        long long23 = duration19.getStandardSeconds();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((long) 3, chronology25);
        org.joda.time.DateTime.Property property27 = dateTime26.dayOfYear();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateMidnight dateMidnight29 = new org.joda.time.DateMidnight((java.lang.Object) dateTime26, chronology28);
        org.joda.time.DateMidnight dateMidnight31 = dateMidnight29.minusMonths((-1));
        org.joda.time.DateMidnight dateMidnight33 = dateMidnight29.withDayOfYear((int) ' ');
        org.joda.time.Interval interval34 = duration19.toIntervalTo((org.joda.time.ReadableInstant) dateMidnight33);
        org.joda.time.PeriodType periodType36 = org.joda.time.PeriodType.time();
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod((long) 'a', periodType36);
        org.joda.time.Period period38 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight10, (org.joda.time.ReadableDuration) duration19, periodType36);
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.Duration duration41 = new org.joda.time.Duration(readableInstant39, readableInstant40);
        org.joda.time.Seconds seconds42 = duration41.toStandardSeconds();
        int int43 = seconds42.getSeconds();
        org.joda.time.DateMidnight dateMidnight45 = dateMidnight10.withPeriodAdded((org.joda.time.ReadablePeriod) seconds42, 0);
        org.joda.time.Duration duration46 = seconds42.toStandardDuration();
        org.joda.time.Seconds seconds47 = seconds42.negated();
        org.joda.time.ReadableInstant readableInstant48 = null;
        org.joda.time.ReadableInstant readableInstant49 = null;
        org.joda.time.Duration duration50 = new org.joda.time.Duration(readableInstant48, readableInstant49);
        org.joda.time.Seconds seconds51 = duration50.toStandardSeconds();
        int int52 = seconds51.getSeconds();
        org.joda.time.ReadableInstant readableInstant53 = null;
        org.joda.time.ReadableInstant readableInstant54 = null;
        org.joda.time.Duration duration55 = new org.joda.time.Duration(readableInstant53, readableInstant54);
        org.joda.time.Seconds seconds56 = duration55.toStandardSeconds();
        int int57 = seconds56.getSeconds();
        org.joda.time.Seconds seconds59 = seconds56.dividedBy(28);
        boolean boolean60 = seconds51.isGreaterThan(seconds59);
        org.joda.time.ReadableInstant readableInstant61 = null;
        org.joda.time.ReadableInstant readableInstant62 = null;
        org.joda.time.Duration duration63 = new org.joda.time.Duration(readableInstant61, readableInstant62);
        org.joda.time.Seconds seconds64 = duration63.toStandardSeconds();
        int int65 = seconds64.getSeconds();
        org.joda.time.Seconds seconds67 = seconds64.dividedBy(28);
        org.joda.time.Seconds seconds68 = seconds67.negated();
        org.joda.time.Seconds seconds69 = seconds51.plus(seconds68);
        org.joda.time.Seconds seconds71 = seconds51.multipliedBy((int) '/');
        org.joda.time.Seconds seconds72 = seconds42.plus(seconds51);
        org.joda.time.Seconds seconds74 = seconds72.minus(335);
        org.joda.time.Seconds seconds76 = seconds74.minus(3);
        org.joda.time.Seconds seconds78 = seconds76.dividedBy(86399965);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(periodType15);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateMidnight31);
        org.junit.Assert.assertNotNull(dateMidnight33);
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertNotNull(seconds42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(dateMidnight45);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertNotNull(seconds47);
        org.junit.Assert.assertNotNull(seconds51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(seconds56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(seconds59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(seconds64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(seconds67);
        org.junit.Assert.assertNotNull(seconds68);
        org.junit.Assert.assertNotNull(seconds69);
        org.junit.Assert.assertNotNull(seconds71);
        org.junit.Assert.assertNotNull(seconds72);
        org.junit.Assert.assertNotNull(seconds74);
        org.junit.Assert.assertNotNull(seconds76);
        org.junit.Assert.assertNotNull(seconds78);
    }

    @Test
    public void test5059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5059");
        java.util.LongSummaryStatistics longSummaryStatistics0 = new java.util.LongSummaryStatistics();
        longSummaryStatistics0.accept(3);
        long long3 = longSummaryStatistics0.getMax();
        java.util.LongSummaryStatistics longSummaryStatistics4 = new java.util.LongSummaryStatistics();
        longSummaryStatistics4.accept(3);
        java.util.function.LongConsumer longConsumer7 = longSummaryStatistics0.andThen((java.util.function.LongConsumer) longSummaryStatistics4);
        java.util.LongSummaryStatistics longSummaryStatistics8 = new java.util.LongSummaryStatistics();
        longSummaryStatistics8.accept(3);
        long long11 = longSummaryStatistics8.getMax();
        double double12 = longSummaryStatistics8.getAverage();
        longSummaryStatistics8.accept(6);
        java.util.function.LongConsumer longConsumer15 = longSummaryStatistics0.andThen((java.util.function.LongConsumer) longSummaryStatistics8);
        java.lang.String str16 = longSummaryStatistics0.toString();
        org.junit.Assert.assertEquals(longSummaryStatistics0.toString(), "LongSummaryStatistics{count=1, sum=3, min=3, average=3.000000, max=3}");
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 3L + "'", long3 == 3L);
        org.junit.Assert.assertEquals(longSummaryStatistics4.toString(), "LongSummaryStatistics{count=1, sum=3, min=3, average=3.000000, max=3}");
        org.junit.Assert.assertNotNull(longConsumer7);
        org.junit.Assert.assertEquals(longSummaryStatistics8.toString(), "LongSummaryStatistics{count=2, sum=9, min=3, average=4.500000, max=6}");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 3L + "'", long11 == 3L);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 3.0d + "'", double12 == 3.0d);
        org.junit.Assert.assertNotNull(longConsumer15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "LongSummaryStatistics{count=1, sum=3, min=3, average=3.000000, max=3}" + "'", str16, "LongSummaryStatistics{count=1, sum=3, min=3, average=3.000000, max=3}");
    }

    @Test
    public void test5060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5060");
        java.time.Instant instant0 = java.time.Instant.now();
        java.nio.file.attribute.FileTime fileTime1 = java.nio.file.attribute.FileTime.from(instant0);
        java.time.Instant instant2 = java.time.Instant.now();
        java.time.Instant instant3 = java.time.Instant.now();
        boolean boolean4 = instant2.isAfter(instant3);
        java.time.Duration duration5 = java.time.Duration.ZERO;
        java.time.Instant instant6 = instant3.minus((java.time.temporal.TemporalAmount) duration5);
        int int7 = instant0.compareTo(instant6);
        java.util.Properties properties8 = null;
        java.util.Properties properties9 = new java.util.Properties(properties8);
        java.time.LocalTime localTime14 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime15 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime14);
        java.time.LocalTime localTime20 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime21 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime20);
        java.time.temporal.ChronoField chronoField22 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime24 = localTime20.with((java.time.temporal.TemporalField) chronoField22, (long) (short) 1);
        long long25 = localTime14.getLong((java.time.temporal.TemporalField) chronoField22);
        java.time.LocalTime localTime27 = localTime14.withSecond((int) (short) 1);
        java.lang.Object obj29 = properties9.put((java.lang.Object) localTime27, (java.lang.Object) "117");
        java.time.LocalDateTime localDateTime30 = java.time.LocalDateTime.MIN;
        java.time.Month month31 = java.time.Month.NOVEMBER;
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime32 = localDateTime30.with((java.time.temporal.TemporalAdjuster) month31);
        java.time.LocalDate localDate35 = java.time.LocalDate.ofEpochDay((long) ' ');
        int int36 = localDate35.getMonthValue();
        org.joda.time.Period period37 = org.joda.time.Period.ZERO;
        org.joda.time.Period period38 = period37.normalizedStandard();
        org.joda.time.Period period40 = period37.plusHours(2);
        java.time.chrono.IsoEra isoEra41 = java.time.chrono.IsoEra.CE;
        boolean boolean42 = period40.equals((java.lang.Object) isoEra41);
        java.time.LocalTime localTime47 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime48 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime47);
        java.time.LocalTime localTime53 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime54 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime53);
        java.time.temporal.ChronoField chronoField55 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime57 = localTime53.with((java.time.temporal.TemporalField) chronoField55, (long) (short) 1);
        long long58 = localTime47.getLong((java.time.temporal.TemporalField) chronoField55);
        boolean boolean59 = isoEra41.isSupported((java.time.temporal.TemporalField) chronoField55);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery60 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period61 = isoEra41.query(periodTemporalQuery60);
        boolean boolean62 = period61.isNegative();
        java.time.Period period64 = period61.plusDays((long) ' ');
        java.time.temporal.ChronoField chronoField65 = java.time.temporal.ChronoField.SECOND_OF_DAY;
        boolean boolean66 = period61.equals((java.lang.Object) chronoField65);
        boolean boolean67 = localDate35.isSupported((java.time.temporal.TemporalField) chronoField65);
        java.time.temporal.TemporalUnit temporalUnit68 = chronoField65.getRangeUnit();
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime69 = localDateChronoLocalDateTime32.plus(1L, temporalUnit68);
        java.time.LocalTime localTime70 = localTime27.truncatedTo(temporalUnit68);
        boolean boolean71 = instant6.isSupported(temporalUnit68);
        java.time.ZoneOffset zoneOffset74 = java.time.ZoneOffset.ofHoursMinutes(1, 10);
        java.time.temporal.ChronoField chronoField75 = java.time.temporal.ChronoField.HOUR_OF_DAY;
        java.time.temporal.ValueRange valueRange76 = chronoField75.range();
        boolean boolean77 = zoneOffset74.isSupported((java.time.temporal.TemporalField) chronoField75);
        java.time.temporal.TemporalUnit temporalUnit78 = chronoField75.getBaseUnit();
        // The following exception was thrown during execution in test generation
        try {
            int int79 = instant6.get((java.time.temporal.TemporalField) chronoField75);
            org.junit.Assert.fail("Expected exception of type java.time.temporal.UnsupportedTemporalTypeException; message: Unsupported field: HourOfDay");
        } catch (java.time.temporal.UnsupportedTemporalTypeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(instant0);
        org.junit.Assert.assertNotNull(fileTime1);
        org.junit.Assert.assertNotNull(instant2);
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(instant6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertTrue("'" + chronoField22 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField22.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime24);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 3601000000001L + "'", long25 == 3601000000001L);
        org.junit.Assert.assertNotNull(localTime27);
        org.junit.Assert.assertNull(obj29);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertTrue("'" + month31 + "' != '" + java.time.Month.NOVEMBER + "'", month31.equals(java.time.Month.NOVEMBER));
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime32);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2 + "'", int36 == 2);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertTrue("'" + isoEra41 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra41.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(localTime47);
        org.junit.Assert.assertNotNull(localTime48);
        org.junit.Assert.assertNotNull(localTime53);
        org.junit.Assert.assertNotNull(localTime54);
        org.junit.Assert.assertTrue("'" + chronoField55 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField55.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime57);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 3601000000001L + "'", long58 == 3601000000001L);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(periodTemporalQuery60);
        org.junit.Assert.assertNotNull(period61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(period64);
        org.junit.Assert.assertTrue("'" + chronoField65 + "' != '" + java.time.temporal.ChronoField.SECOND_OF_DAY + "'", chronoField65.equals(java.time.temporal.ChronoField.SECOND_OF_DAY));
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + temporalUnit68 + "' != '" + java.time.temporal.ChronoUnit.DAYS + "'", temporalUnit68.equals(java.time.temporal.ChronoUnit.DAYS));
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime69);
        org.junit.Assert.assertNotNull(localTime70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(zoneOffset74);
        org.junit.Assert.assertTrue("'" + chronoField75 + "' != '" + java.time.temporal.ChronoField.HOUR_OF_DAY + "'", chronoField75.equals(java.time.temporal.ChronoField.HOUR_OF_DAY));
        org.junit.Assert.assertNotNull(valueRange76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + temporalUnit78 + "' != '" + java.time.temporal.ChronoUnit.HOURS + "'", temporalUnit78.equals(java.time.temporal.ChronoUnit.HOURS));
    }

    @Test
    public void test5061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5061");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Duration duration2 = new org.joda.time.Duration(readableInstant0, readableInstant1);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = duration2.toPeriodTo(readableInstant3, periodType4);
        long long6 = duration2.getStandardSeconds();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 3, chronology8);
        org.joda.time.DateTime.Property property10 = dateTime9.dayOfYear();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight((java.lang.Object) dateTime9, chronology11);
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight12.minusMonths((-1));
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight12.withDayOfYear((int) ' ');
        org.joda.time.Interval interval17 = duration2.toIntervalTo((org.joda.time.ReadableInstant) dateMidnight16);
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight16.withDayOfYear((int) (short) 100);
        org.joda.time.DateMidnight dateMidnight21 = dateMidnight19.withCenturyOfEra(11);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(dateMidnight21);
    }

    @Test
    public void test5062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5062");
        java.util.GregorianCalendar gregorianCalendar5 = new java.util.GregorianCalendar(12, 4096, 7, (-1), (int) (short) 10);
        gregorianCalendar5.set((int) ':', 3, 256, 5, 17, 3600000);
        int int13 = gregorianCalendar5.getMinimalDaysInFirstWeek();
        java.time.Instant instant14 = gregorianCalendar5.toInstant();
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(instant14);
    }

    @Test
    public void test5063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5063");
        // The following exception was thrown during execution in test generation
        try {
            java.time.temporal.ValueRange valueRange4 = java.time.temporal.ValueRange.of((long) 601, 0L, (long) 145, 10L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Smallest minimum value must be less than largest minimum value");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test5064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5064");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.Interval interval1 = localDate0.toInterval();
        org.joda.time.LocalDate.Property property2 = localDate0.dayOfMonth();
        org.joda.time.LocalDate.Property property3 = localDate0.weekOfWeekyear();
        org.joda.time.LocalDate localDate4 = property3.roundHalfEvenCopy();
        org.junit.Assert.assertNotNull(interval1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDate4);
    }

    @Test
    public void test5065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5065");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 3, chronology1);
        org.joda.time.DateTime.Property property3 = dateTime2.dayOfYear();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight((java.lang.Object) dateTime2, chronology4);
        org.joda.time.MutableDateTime mutableDateTime6 = dateTime2.toMutableDateTime();
        mutableDateTime6.addYears((int) (short) 100);
        mutableDateTime6.setMillis((long) 21);
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime6.weekOfWeekyear();
        mutableDateTime6.setSecondOfMinute(0);
        mutableDateTime6.addHours(0);
        org.joda.time.MutableDateTime.Property property16 = mutableDateTime6.weekyear();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(property16);
    }

    @Test
    public void test5066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5066");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Duration duration2 = new org.joda.time.Duration(readableInstant0, readableInstant1);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = duration2.toPeriodTo(readableInstant3, periodType4);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.Duration duration8 = new org.joda.time.Duration(readableInstant6, readableInstant7);
        long long9 = duration8.getMillis();
        boolean boolean10 = duration2.isShorterThan((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) 3, chronology12);
        org.joda.time.DateTime.Property property14 = dateTime13.dayOfYear();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight((java.lang.Object) dateTime13, chronology15);
        org.joda.time.MutableDateTime mutableDateTime17 = dateTime13.toMutableDateTime();
        mutableDateTime17.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime17.dayOfWeek();
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime17.year();
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime17.weekyear();
        boolean boolean23 = duration2.equals((java.lang.Object) mutableDateTime17);
        mutableDateTime17.addMonths((int) ' ');
        mutableDateTime17.add((long) (byte) 10);
        org.joda.time.Period period28 = org.joda.time.Period.ZERO;
        org.joda.time.Period period29 = period28.normalizedStandard();
        org.joda.time.Period period31 = period28.plusHours(2);
        java.time.chrono.IsoEra isoEra32 = java.time.chrono.IsoEra.CE;
        boolean boolean33 = period31.equals((java.lang.Object) isoEra32);
        int int34 = period31.getMinutes();
        mutableDateTime17.add((org.joda.time.ReadablePeriod) period31);
        java.util.TimeZone timeZone37 = null;
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forTimeZone(timeZone37);
        org.joda.time.DateMidnight dateMidnight39 = new org.joda.time.DateMidnight((long) 1970, dateTimeZone38);
        long long42 = dateTimeZone38.convertLocalToUTC((long) 3, false);
        long long45 = dateTimeZone38.convertLocalToUTC(0L, true);
        mutableDateTime17.setZoneRetainFields(dateTimeZone38);
        java.lang.String str47 = dateTimeZone38.toString();
        org.joda.time.chrono.EthiopicChronology ethiopicChronology48 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone38);
        org.joda.time.DateTimeField dateTimeField49 = ethiopicChronology48.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone50 = ethiopicChronology48.getZone();
        org.joda.time.DateTimeField dateTimeField51 = ethiopicChronology48.era();
        org.joda.time.DateTimeField dateTimeField52 = ethiopicChronology48.secondOfDay();
        org.joda.time.DateTimeField dateTimeField53 = ethiopicChronology48.minuteOfHour();
        org.joda.time.DurationField durationField54 = ethiopicChronology48.months();
        org.joda.time.DateTimeField dateTimeField55 = ethiopicChronology48.monthOfYear();
        org.joda.time.LocalTime localTime56 = new org.joda.time.LocalTime((org.joda.time.Chronology) ethiopicChronology48);
        org.joda.time.DateTimeField dateTimeField57 = ethiopicChronology48.weekyearOfCentury();
        org.joda.time.Period period58 = org.joda.time.Period.ZERO;
        org.joda.time.Period period59 = period58.normalizedStandard();
        org.joda.time.Period period61 = period59.minusMinutes((int) ' ');
        org.joda.time.Period period62 = org.joda.time.Period.ZERO;
        org.joda.time.Period period63 = period62.normalizedStandard();
        org.joda.time.Period period65 = period62.plusHours(2);
        int int66 = period62.getMillis();
        org.joda.time.DurationFieldType durationFieldType67 = org.joda.time.DurationFieldType.hours();
        org.joda.time.Period period69 = period62.withField(durationFieldType67, 292269054);
        boolean boolean70 = period61.isSupported(durationFieldType67);
        int[] intArray72 = ethiopicChronology48.get((org.joda.time.ReadablePeriod) period61, (long) 274);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertTrue("'" + isoEra32 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra32.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 3L + "'", long42 == 3L);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Etc/UTC" + "'", str47, "Etc/UTC");
        org.junit.Assert.assertNotNull(ethiopicChronology48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(durationField54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(period58);
        org.junit.Assert.assertNotNull(period59);
        org.junit.Assert.assertNotNull(period61);
        org.junit.Assert.assertNotNull(period62);
        org.junit.Assert.assertNotNull(period63);
        org.junit.Assert.assertNotNull(period65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(durationFieldType67);
        org.junit.Assert.assertNotNull(period69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[0, 0, 0, 0, 0, 0, 0, 274]");
    }

    @Test
    public void test5067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5067");
        java.nio.LongBuffer longBuffer1 = java.nio.LongBuffer.allocate((int) (short) 0);
        long[] longArray2 = longBuffer1.array();
        java.nio.Buffer buffer3 = longBuffer1.flip();
        java.nio.LongBuffer longBuffer5 = java.nio.LongBuffer.allocate((int) (short) 0);
        java.nio.Buffer buffer6 = longBuffer5.mark();
        java.time.LocalTime localTime11 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime12 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime11);
        java.time.temporal.ChronoField chronoField13 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime15 = localTime11.with((java.time.temporal.TemporalField) chronoField13, (long) (short) 1);
        java.time.Duration duration17 = java.time.Duration.ofMinutes((long) 3);
        java.time.LocalTime localTime18 = localTime11.minus((java.time.temporal.TemporalAmount) duration17);
        boolean boolean19 = longBuffer5.equals((java.lang.Object) localTime11);
        java.nio.LongBuffer longBuffer20 = longBuffer5.slice();
        java.nio.LongBuffer longBuffer22 = java.nio.LongBuffer.allocate((int) (short) 0);
        long[] longArray23 = longBuffer22.array();
        java.util.stream.LongStream longStream24 = java.util.stream.LongStream.of(longArray23);
        java.nio.LongBuffer longBuffer25 = longBuffer20.put(longArray23);
        java.nio.LongBuffer longBuffer26 = longBuffer1.get(longArray23);
        org.junit.Assert.assertNotNull(longBuffer1);
        org.junit.Assert.assertNotNull(longArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray2), "[]");
        org.junit.Assert.assertNotNull(buffer3);
        org.junit.Assert.assertNotNull(longBuffer5);
        org.junit.Assert.assertNotNull(buffer6);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertTrue("'" + chronoField13 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField13.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(longBuffer20);
        org.junit.Assert.assertNotNull(longBuffer22);
        org.junit.Assert.assertNotNull(longArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray23), "[]");
        org.junit.Assert.assertNotNull(longStream24);
        org.junit.Assert.assertNotNull(longBuffer25);
        org.junit.Assert.assertNotNull(longBuffer26);
    }

    @Test
    public void test5068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5068");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        int int1 = localDate0.getCenturyOfEra();
        org.joda.time.LocalDate.Property property2 = localDate0.dayOfWeek();
        org.joda.time.LocalDate localDate4 = property2.addToCopy(7);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate6 = property2.setCopy("parsecasesensitive(false)(value(year,4,10,exceeds_pad)'-'value(monthofyear,2)'-'value(dayofmonth,2))[offset(+hh:mm:ss,'z')]");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"parsecasesensitive(false)(value(year,4,10,exceeds_pad)'-'value(monthofyear,2)'-'value(dayofmonth,2))[offset(+hh:mm:ss,'z')]\" for dayOfWeek is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 20 + "'", int1 == 20);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDate4);
    }

    @Test
    public void test5069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5069");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 3, chronology1);
        org.joda.time.Period period3 = org.joda.time.Period.ZERO;
        org.joda.time.Period period4 = period3.normalizedStandard();
        org.joda.time.Period period6 = period4.minusMinutes((int) ' ');
        org.joda.time.Period period8 = period6.minusMonths((int) (byte) 0);
        org.joda.time.PeriodType periodType9 = period8.getPeriodType();
        org.joda.time.DateTime dateTime10 = dateTime2.minus((org.joda.time.ReadablePeriod) period8);
        org.joda.time.DateTime dateTime12 = dateTime2.plusHours(34);
        org.joda.time.Period period13 = org.joda.time.Period.ZERO;
        org.joda.time.Period period14 = period13.normalizedStandard();
        org.joda.time.Period period16 = period14.minusMinutes((int) ' ');
        org.joda.time.Period period18 = period16.minusMonths((int) (byte) 0);
        org.joda.time.DateTime dateTime19 = dateTime2.plus((org.joda.time.ReadablePeriod) period18);
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.Duration duration22 = new org.joda.time.Duration(readableInstant20, readableInstant21);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.PeriodType periodType24 = null;
        org.joda.time.Period period25 = duration22.toPeriodTo(readableInstant23, periodType24);
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.Duration duration28 = new org.joda.time.Duration(readableInstant26, readableInstant27);
        long long29 = duration28.getMillis();
        boolean boolean30 = duration22.isShorterThan((org.joda.time.ReadableDuration) duration28);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((long) 3, chronology32);
        org.joda.time.DateTime.Property property34 = dateTime33.dayOfYear();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.DateMidnight dateMidnight36 = new org.joda.time.DateMidnight((java.lang.Object) dateTime33, chronology35);
        org.joda.time.MutableDateTime mutableDateTime37 = dateTime33.toMutableDateTime();
        mutableDateTime37.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property40 = mutableDateTime37.dayOfWeek();
        org.joda.time.MutableDateTime.Property property41 = mutableDateTime37.year();
        org.joda.time.MutableDateTime.Property property42 = mutableDateTime37.weekyear();
        boolean boolean43 = duration22.equals((java.lang.Object) mutableDateTime37);
        mutableDateTime37.addMonths((int) ' ');
        mutableDateTime37.add((long) (byte) 10);
        org.joda.time.Period period48 = org.joda.time.Period.ZERO;
        org.joda.time.Period period49 = period48.normalizedStandard();
        org.joda.time.Period period51 = period48.plusHours(2);
        java.time.chrono.IsoEra isoEra52 = java.time.chrono.IsoEra.CE;
        boolean boolean53 = period51.equals((java.lang.Object) isoEra52);
        int int54 = period51.getMinutes();
        mutableDateTime37.add((org.joda.time.ReadablePeriod) period51);
        java.util.TimeZone timeZone57 = null;
        org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeZone.forTimeZone(timeZone57);
        org.joda.time.DateMidnight dateMidnight59 = new org.joda.time.DateMidnight((long) 1970, dateTimeZone58);
        long long62 = dateTimeZone58.convertLocalToUTC((long) 3, false);
        long long65 = dateTimeZone58.convertLocalToUTC(0L, true);
        mutableDateTime37.setZoneRetainFields(dateTimeZone58);
        java.lang.String str67 = dateTimeZone58.toString();
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.DateTime dateTime70 = new org.joda.time.DateTime((long) 3, chronology69);
        org.joda.time.DateTime.Property property71 = dateTime70.dayOfYear();
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.DateMidnight dateMidnight73 = new org.joda.time.DateMidnight((java.lang.Object) dateTime70, chronology72);
        org.joda.time.MutableDateTime mutableDateTime74 = dateTime70.toMutableDateTime();
        mutableDateTime74.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property77 = mutableDateTime74.dayOfWeek();
        org.joda.time.MutableDateTime.Property property78 = mutableDateTime74.year();
        java.util.TimeZone timeZone79 = null;
        org.joda.time.DateTimeZone dateTimeZone80 = org.joda.time.DateTimeZone.forTimeZone(timeZone79);
        mutableDateTime74.setZone(dateTimeZone80);
        java.util.Locale locale83 = java.util.Locale.TAIWAN;
        java.lang.String str84 = dateTimeZone80.getShortName((long) 64, locale83);
        long long86 = dateTimeZone58.getMillisKeepLocal(dateTimeZone80, (long) 7);
        org.joda.time.DateTime dateTime87 = dateTime2.toDateTime(dateTimeZone80);
        int int88 = dateTime2.getMonthOfYear();
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(mutableDateTime37);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertNotNull(period49);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertTrue("'" + isoEra52 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra52.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone58);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 3L + "'", long62 == 3L);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 0L + "'", long65 == 0L);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "Etc/UTC" + "'", str67, "Etc/UTC");
        org.junit.Assert.assertNotNull(property71);
        org.junit.Assert.assertNotNull(mutableDateTime74);
        org.junit.Assert.assertNotNull(property77);
        org.junit.Assert.assertNotNull(property78);
        org.junit.Assert.assertNotNull(dateTimeZone80);
        org.junit.Assert.assertNotNull(locale83);
        org.junit.Assert.assertEquals(locale83.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "+00:00" + "'", str84, "+00:00");
        org.junit.Assert.assertTrue("'" + long86 + "' != '" + 7L + "'", long86 == 7L);
        org.junit.Assert.assertNotNull(dateTime87);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 1 + "'", int88 == 1);
    }

    @Test
    public void test5070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5070");
        java.io.File file0 = null;
        java.io.File file2 = new java.io.File(file0, "1970-01-01T00:00:00.003Z");
        java.net.URL uRL3 = file2.toURL();
        java.io.File file4 = null;
        java.io.File file6 = new java.io.File(file4, "1970-01-01T00:00:00.003Z");
        java.net.URL uRL7 = file6.toURL();
        boolean boolean8 = uRL3.sameFile(uRL7);
        java.security.cert.Certificate certificate9 = null;
        java.security.cert.Certificate[] certificateArray10 = new java.security.cert.Certificate[] { certificate9 };
        java.security.CodeSource codeSource11 = new java.security.CodeSource(uRL3, certificateArray10);
        java.io.FileNotFoundException fileNotFoundException14 = new java.io.FileNotFoundException("\ufffd");
        java.util.concurrent.ExecutionException executionException15 = new java.util.concurrent.ExecutionException((java.lang.Throwable) fileNotFoundException14);
        java.security.KeyException keyException16 = new java.security.KeyException("millis", (java.lang.Throwable) fileNotFoundException14);
        boolean boolean17 = codeSource11.equals((java.lang.Object) fileNotFoundException14);
        org.junit.Assert.assertNull("file2.getParent() == null", file2.getParent());
        org.junit.Assert.assertEquals(file2.toString(), "1970-01-01T00:00:00.003Z");
        org.junit.Assert.assertNotNull(uRL3);
// flaky:         org.junit.Assert.assertEquals(uRL3.toString(), "file:/experiment/1970-01-01T00:00:00.003Z");
        org.junit.Assert.assertNull("file6.getParent() == null", file6.getParent());
        org.junit.Assert.assertEquals(file6.toString(), "1970-01-01T00:00:00.003Z");
        org.junit.Assert.assertNotNull(uRL7);
// flaky:         org.junit.Assert.assertEquals(uRL7.toString(), "file:/experiment/1970-01-01T00:00:00.003Z");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(certificateArray10);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test5071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5071");
        org.joda.time.TimeOfDay timeOfDay1 = org.joda.time.TimeOfDay.fromMillisOfDay((long) (short) 0);
        org.joda.time.TimeOfDay timeOfDay3 = org.joda.time.TimeOfDay.fromMillisOfDay((long) (short) 0);
        org.joda.time.Hours hours4 = org.joda.time.Hours.hoursBetween((org.joda.time.ReadablePartial) timeOfDay1, (org.joda.time.ReadablePartial) timeOfDay3);
        org.joda.time.DurationFieldType durationFieldType5 = org.joda.time.DurationFieldType.hours();
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay3.withFieldAdded(durationFieldType5, (int) (byte) 0);
        int int8 = timeOfDay3.getMillisOfSecond();
        org.joda.time.TimeOfDay timeOfDay10 = timeOfDay3.plusHours(9);
        org.joda.time.TimeOfDay.Property property11 = timeOfDay3.secondOfMinute();
        java.time.ZoneOffset zoneOffset14 = java.time.ZoneOffset.ofHoursMinutes(1, 10);
        java.time.LocalDate localDate15 = java.time.LocalDate.now((java.time.ZoneId) zoneOffset14);
        boolean boolean16 = property11.equals((java.lang.Object) localDate15);
        org.joda.time.DateTimeField dateTimeField17 = property11.getField();
        org.joda.time.DurationField durationField18 = property11.getDurationField();
        org.joda.time.TimeOfDay timeOfDay20 = property11.addNoWrapToCopy(241);
        java.util.Locale locale21 = null;
        int int22 = property11.getMaximumTextLength(locale21);
        org.junit.Assert.assertNotNull(timeOfDay1);
        org.junit.Assert.assertNotNull(timeOfDay3);
        org.junit.Assert.assertNotNull(hours4);
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(zoneOffset14);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(timeOfDay20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
    }

    @Test
    public void test5072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5072");
        java.time.format.DateTimeFormatter dateTimeFormatter0 = java.time.format.DateTimeFormatter.ISO_LOCAL_DATE_TIME;
        java.time.ZoneOffset zoneOffset3 = java.time.ZoneOffset.ofHoursMinutes(1, 10);
        java.time.LocalDate localDate4 = java.time.LocalDate.now((java.time.ZoneId) zoneOffset3);
        java.time.LocalDate localDate5 = java.time.LocalDate.now((java.time.ZoneId) zoneOffset3);
        java.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter0.withZone((java.time.ZoneId) zoneOffset3);
        java.time.temporal.TemporalAccessor temporalAccessor7 = null;
        java.lang.Appendable appendable8 = null;
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter0.formatTo(temporalAccessor7, appendable8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: temporal");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(zoneOffset3);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
    }

    @Test
    public void test5073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5073");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.now();
        java.time.LocalDateTime localDateTime1 = java.time.LocalDateTime.now();
        java.time.temporal.ChronoField chronoField2 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime4 = localDateTime1.with((java.time.temporal.TemporalField) chronoField2, (long) 10);
        boolean boolean5 = localDateTime0.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime1);
        org.joda.time.Period period6 = org.joda.time.Period.ZERO;
        org.joda.time.Period period7 = period6.normalizedStandard();
        org.joda.time.Period period9 = period6.plusHours(2);
        java.time.chrono.IsoEra isoEra10 = java.time.chrono.IsoEra.CE;
        boolean boolean11 = period9.equals((java.lang.Object) isoEra10);
        java.time.LocalTime localTime16 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime17 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime16);
        java.time.LocalTime localTime22 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime23 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime22);
        java.time.temporal.ChronoField chronoField24 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime26 = localTime22.with((java.time.temporal.TemporalField) chronoField24, (long) (short) 1);
        long long27 = localTime16.getLong((java.time.temporal.TemporalField) chronoField24);
        boolean boolean28 = isoEra10.isSupported((java.time.temporal.TemporalField) chronoField24);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery29 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period30 = isoEra10.query(periodTemporalQuery29);
        boolean boolean31 = period30.isNegative();
        java.time.Period period33 = period30.plusDays((long) ' ');
        java.time.temporal.ChronoField chronoField34 = java.time.temporal.ChronoField.SECOND_OF_DAY;
        boolean boolean35 = period30.equals((java.lang.Object) chronoField34);
        java.time.chrono.ChronoPeriod chronoPeriod36 = period30.negated();
        java.time.OffsetDateTime offsetDateTime37 = java.time.OffsetDateTime.now();
        java.time.temporal.ChronoField chronoField38 = java.time.temporal.ChronoField.HOUR_OF_DAY;
        boolean boolean39 = offsetDateTime37.isSupported((java.time.temporal.TemporalField) chronoField38);
        java.time.Month month40 = offsetDateTime37.getMonth();
        java.time.temporal.Temporal temporal41 = period30.addTo((java.time.temporal.Temporal) offsetDateTime37);
        java.time.LocalDateTime localDateTime42 = localDateTime0.minus((java.time.temporal.TemporalAmount) period30);
        java.time.Period period44 = period30.withMonths(4200);
        java.time.LocalDateTime localDateTime45 = java.time.LocalDateTime.now();
        java.time.temporal.ChronoField chronoField46 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime48 = localDateTime45.with((java.time.temporal.TemporalField) chronoField46, (long) 10);
        java.time.OffsetTime offsetTime49 = java.time.OffsetTime.MAX;
        java.time.LocalTime localTime50 = offsetTime49.toLocalTime();
        java.lang.String str51 = offsetTime49.toString();
        java.time.Duration duration52 = java.time.Duration.ZERO;
        java.lang.String str53 = duration52.toString();
        java.time.OffsetTime offsetTime54 = offsetTime49.plus((java.time.temporal.TemporalAmount) duration52);
        java.time.OffsetTime offsetTime56 = offsetTime49.plusNanos((long) 0);
        org.joda.time.TimeOfDay timeOfDay58 = org.joda.time.TimeOfDay.fromMillisOfDay((long) (short) 0);
        org.joda.time.TimeOfDay timeOfDay60 = org.joda.time.TimeOfDay.fromMillisOfDay((long) (short) 0);
        org.joda.time.Hours hours61 = org.joda.time.Hours.hoursBetween((org.joda.time.ReadablePartial) timeOfDay58, (org.joda.time.ReadablePartial) timeOfDay60);
        org.joda.time.DurationFieldType durationFieldType62 = org.joda.time.DurationFieldType.hours();
        org.joda.time.TimeOfDay timeOfDay64 = timeOfDay60.withFieldAdded(durationFieldType62, (int) (byte) 0);
        org.joda.time.TimeOfDay timeOfDay66 = timeOfDay60.minusMillis((int) '#');
        boolean boolean67 = offsetTime49.equals((java.lang.Object) timeOfDay66);
        boolean boolean68 = chronoField46.isSupportedBy((java.time.temporal.TemporalAccessor) offsetTime49);
        // The following exception was thrown during execution in test generation
        try {
            java.time.temporal.Temporal temporal69 = period44.subtractFrom((java.time.temporal.Temporal) offsetTime49);
            org.junit.Assert.fail("Expected exception of type java.time.temporal.UnsupportedTemporalTypeException; message: Unsupported unit: Months");
        } catch (java.time.temporal.UnsupportedTemporalTypeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertTrue("'" + chronoField2 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField2.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertTrue("'" + isoEra10 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra10.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertTrue("'" + chronoField24 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField24.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime26);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 3601000000001L + "'", long27 == 3601000000001L);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(periodTemporalQuery29);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertTrue("'" + chronoField34 + "' != '" + java.time.temporal.ChronoField.SECOND_OF_DAY + "'", chronoField34.equals(java.time.temporal.ChronoField.SECOND_OF_DAY));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(chronoPeriod36);
        org.junit.Assert.assertNotNull(offsetDateTime37);
        org.junit.Assert.assertTrue("'" + chronoField38 + "' != '" + java.time.temporal.ChronoField.HOUR_OF_DAY + "'", chronoField38.equals(java.time.temporal.ChronoField.HOUR_OF_DAY));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + month40 + "' != '" + java.time.Month.FEBRUARY + "'", month40.equals(java.time.Month.FEBRUARY));
        org.junit.Assert.assertNotNull(temporal41);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertTrue("'" + chronoField46 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField46.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime48);
        org.junit.Assert.assertNotNull(offsetTime49);
        org.junit.Assert.assertNotNull(localTime50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "23:59:59.999999999-18:00" + "'", str51, "23:59:59.999999999-18:00");
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "PT0S" + "'", str53, "PT0S");
        org.junit.Assert.assertNotNull(offsetTime54);
        org.junit.Assert.assertNotNull(offsetTime56);
        org.junit.Assert.assertNotNull(timeOfDay58);
        org.junit.Assert.assertNotNull(timeOfDay60);
        org.junit.Assert.assertNotNull(hours61);
        org.junit.Assert.assertNotNull(durationFieldType62);
        org.junit.Assert.assertNotNull(timeOfDay64);
        org.junit.Assert.assertNotNull(timeOfDay66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
    }

    @Test
    public void test5074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5074");
        java.io.File file0 = null;
        java.io.File file2 = new java.io.File(file0, "1970-01-01T00:00:00.003Z");
        long long3 = file2.lastModified();
        java.lang.String str4 = file2.getName();
        java.nio.file.Path path5 = file2.toPath();
        // The following exception was thrown during execution in test generation
        try {
            java.nio.file.Path path8 = path5.subpath(52, 31);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull("file2.getParent() == null", file2.getParent());
        org.junit.Assert.assertEquals(file2.toString(), "1970-01-01T00:00:00.003Z");
// flaky:         org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1645436488000L + "'", long3 == 1645436488000L);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1970-01-01T00:00:00.003Z" + "'", str4, "1970-01-01T00:00:00.003Z");
        org.junit.Assert.assertNotNull(path5);
    }

    @Test
    public void test5075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5075");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder4 = builder0.setDate(0, 0, (int) (byte) 100);
        java.util.Calendar.Builder builder8 = builder0.setDate((int) (byte) 10, 57, 0);
        java.util.Calendar.Builder builder13 = builder8.setTimeOfDay((int) '\uffff', 508, 96000000, (int) (byte) 0);
        java.util.Calendar.Builder builder17 = builder13.setTimeOfDay(256, (int) (short) 1, 679);
        java.util.Calendar.Builder builder21 = builder13.setDate(978, 12, 88);
        java.util.Calendar.Builder builder26 = builder13.setTimeOfDay(256, (int) (byte) -1, 679, 17480);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder26);
    }

    @Test
    public void test5076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5076");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 3, chronology1);
        org.joda.time.DateTime.Property property3 = dateTime2.dayOfYear();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight((java.lang.Object) dateTime2, chronology4);
        org.joda.time.MutableDateTime mutableDateTime6 = dateTime2.toMutableDateTime();
        org.joda.time.Days days7 = org.joda.time.Days.ONE;
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadablePeriod) days7);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) 3, chronology10);
        org.joda.time.DateTime.Property property12 = dateTime11.dayOfYear();
        org.joda.time.Interval interval13 = property12.toInterval();
        mutableInterval8.setInterval((org.joda.time.ReadableInterval) interval13);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) 3, chronology16);
        org.joda.time.DateTime.Property property18 = dateTime17.dayOfYear();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight((java.lang.Object) dateTime17, chronology19);
        org.joda.time.DateMidnight.Property property21 = dateMidnight20.dayOfMonth();
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.Duration duration24 = new org.joda.time.Duration(readableInstant22, readableInstant23);
        org.joda.time.Duration duration26 = duration24.withMillis((-1L));
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.Duration duration28 = duration24.minus(readableDuration27);
        org.joda.time.DateMidnight dateMidnight29 = dateMidnight20.plus((org.joda.time.ReadableDuration) duration28);
        mutableInterval8.setDurationAfterStart((org.joda.time.ReadableDuration) duration28);
        org.joda.time.MutableDateTime mutableDateTime31 = new org.joda.time.MutableDateTime();
        boolean boolean32 = mutableInterval8.isBefore((org.joda.time.ReadableInstant) mutableDateTime31);
        org.joda.time.MutableDateTime mutableDateTime33 = mutableDateTime31.copy();
        java.util.Properties properties34 = null;
        java.util.Properties properties35 = new java.util.Properties(properties34);
        java.time.LocalTime localTime40 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime41 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime40);
        java.time.LocalTime localTime46 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime47 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime46);
        java.time.temporal.ChronoField chronoField48 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime50 = localTime46.with((java.time.temporal.TemporalField) chronoField48, (long) (short) 1);
        long long51 = localTime40.getLong((java.time.temporal.TemporalField) chronoField48);
        java.time.LocalTime localTime53 = localTime40.withSecond((int) (short) 1);
        java.lang.Object obj55 = properties35.put((java.lang.Object) localTime53, (java.lang.Object) "117");
        java.lang.Object obj56 = properties35.clone();
        properties35.clear();
        int int58 = properties35.size();
        org.joda.time.DateTimeFieldType dateTimeFieldType59 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        boolean boolean60 = properties35.equals((java.lang.Object) dateTimeFieldType59);
        org.joda.time.MutableDateTime.Property property61 = mutableDateTime33.property(dateTimeFieldType59);
        int int62 = mutableDateTime33.getDayOfWeek();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(days7);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(mutableDateTime33);
        org.junit.Assert.assertNotNull(localTime40);
        org.junit.Assert.assertNotNull(localTime41);
        org.junit.Assert.assertNotNull(localTime46);
        org.junit.Assert.assertNotNull(localTime47);
        org.junit.Assert.assertTrue("'" + chronoField48 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField48.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime50);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 3601000000001L + "'", long51 == 3601000000001L);
        org.junit.Assert.assertNotNull(localTime53);
        org.junit.Assert.assertNull(obj55);
        org.junit.Assert.assertNotNull(obj56);
        org.junit.Assert.assertEquals(obj56.toString(), "{01:00:01.000000001=117}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj56), "{01:00:01.000000001=117}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj56), "{01:00:01.000000001=117}");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
    }

    @Test
    public void test5077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5077");
        java.nio.charset.Charset charset0 = java.nio.charset.Charset.defaultCharset();
        java.nio.charset.CharsetDecoder charsetDecoder1 = charset0.newDecoder();
        java.nio.charset.Charset charset2 = java.nio.charset.Charset.defaultCharset();
        boolean boolean3 = charset0.contains(charset2);
        java.nio.charset.CharsetEncoder charsetEncoder4 = charset0.newEncoder();
        byte[] byteArray5 = charsetEncoder4.replacement();
        java.nio.charset.Charset charset6 = java.nio.charset.Charset.defaultCharset();
        java.nio.charset.CharsetDecoder charsetDecoder7 = charset6.newDecoder();
        float float8 = charsetDecoder7.maxCharsPerByte();
        float float9 = charsetDecoder7.averageCharsPerByte();
        java.nio.charset.CodingErrorAction codingErrorAction10 = charsetDecoder7.unmappableCharacterAction();
        java.nio.charset.CharsetEncoder charsetEncoder11 = charsetEncoder4.onUnmappableCharacter(codingErrorAction10);
        java.nio.charset.Charset charset12 = java.nio.charset.Charset.defaultCharset();
        java.nio.charset.CharsetDecoder charsetDecoder13 = charset12.newDecoder();
        java.nio.charset.Charset charset14 = java.nio.charset.Charset.defaultCharset();
        boolean boolean15 = charset12.contains(charset14);
        java.nio.charset.CharsetEncoder charsetEncoder16 = charset12.newEncoder();
        byte[] byteArray17 = charsetEncoder16.replacement();
        java.nio.charset.CharsetEncoder charsetEncoder18 = charsetEncoder4.replaceWith(byteArray17);
        java.nio.charset.Charset charset19 = java.nio.charset.Charset.defaultCharset();
        java.nio.charset.CharsetDecoder charsetDecoder20 = charset19.newDecoder();
        java.nio.charset.Charset charset21 = java.nio.charset.Charset.defaultCharset();
        boolean boolean22 = charset19.contains(charset21);
        java.nio.charset.CharsetEncoder charsetEncoder23 = charset19.newEncoder();
        char[] charArray24 = new char[] {};
        java.nio.CharBuffer charBuffer25 = java.nio.CharBuffer.wrap(charArray24);
        java.nio.ByteBuffer byteBuffer26 = charsetEncoder23.encode(charBuffer25);
        java.nio.CharBuffer charBuffer27 = charBuffer25.slice();
        java.nio.CharBuffer charBuffer28 = charBuffer25.compact();
        java.nio.CharBuffer charBuffer29 = charBuffer25.duplicate();
        java.nio.ByteBuffer byteBuffer30 = charsetEncoder4.encode(charBuffer25);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.CharBuffer charBuffer32 = charBuffer25.append('\uffff');
            org.junit.Assert.fail("Expected exception of type java.nio.BufferOverflowException; message: null");
        } catch (java.nio.BufferOverflowException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charset0);
        org.junit.Assert.assertNotNull(charsetDecoder1);
        org.junit.Assert.assertNotNull(charset2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(charsetEncoder4);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[63]");
        org.junit.Assert.assertNotNull(charset6);
        org.junit.Assert.assertNotNull(charsetDecoder7);
        org.junit.Assert.assertTrue("'" + float8 + "' != '" + 1.0f + "'", float8 == 1.0f);
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + 1.0f + "'", float9 == 1.0f);
        org.junit.Assert.assertNotNull(codingErrorAction10);
        org.junit.Assert.assertNotNull(charsetEncoder11);
        org.junit.Assert.assertNotNull(charset12);
        org.junit.Assert.assertNotNull(charsetDecoder13);
        org.junit.Assert.assertNotNull(charset14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(charsetEncoder16);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[63]");
        org.junit.Assert.assertNotNull(charsetEncoder18);
        org.junit.Assert.assertNotNull(charset19);
        org.junit.Assert.assertNotNull(charsetDecoder20);
        org.junit.Assert.assertNotNull(charset21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(charsetEncoder23);
        org.junit.Assert.assertNotNull(charArray24);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray24), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray24), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray24), "[]");
        org.junit.Assert.assertNotNull(charBuffer25);
        org.junit.Assert.assertNotNull(byteBuffer26);
        org.junit.Assert.assertNotNull(charBuffer27);
        org.junit.Assert.assertNotNull(charBuffer28);
        org.junit.Assert.assertNotNull(charBuffer29);
        org.junit.Assert.assertNotNull(byteBuffer30);
    }

    @Test
    public void test5078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5078");
        java.time.LocalDate localDate1 = java.time.LocalDate.ofEpochDay((long) ' ');
        int int2 = localDate1.getMonthValue();
        org.joda.time.Period period3 = org.joda.time.Period.ZERO;
        org.joda.time.Period period4 = period3.normalizedStandard();
        org.joda.time.Period period6 = period3.plusHours(2);
        java.time.chrono.IsoEra isoEra7 = java.time.chrono.IsoEra.CE;
        boolean boolean8 = period6.equals((java.lang.Object) isoEra7);
        java.time.LocalTime localTime13 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime14 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime13);
        java.time.LocalTime localTime19 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime20 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime19);
        java.time.temporal.ChronoField chronoField21 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime23 = localTime19.with((java.time.temporal.TemporalField) chronoField21, (long) (short) 1);
        long long24 = localTime13.getLong((java.time.temporal.TemporalField) chronoField21);
        boolean boolean25 = isoEra7.isSupported((java.time.temporal.TemporalField) chronoField21);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery26 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period27 = isoEra7.query(periodTemporalQuery26);
        boolean boolean28 = period27.isNegative();
        java.time.Period period30 = period27.plusDays((long) ' ');
        java.time.temporal.ChronoField chronoField31 = java.time.temporal.ChronoField.SECOND_OF_DAY;
        boolean boolean32 = period27.equals((java.lang.Object) chronoField31);
        boolean boolean33 = localDate1.isSupported((java.time.temporal.TemporalField) chronoField31);
        long long34 = localDate1.toEpochDay();
        java.lang.String str35 = localDate1.toString();
        org.junit.Assert.assertNotNull(localDate1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2 + "'", int2 == 2);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertTrue("'" + isoEra7 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra7.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertTrue("'" + chronoField21 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField21.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 3601000000001L + "'", long24 == 3601000000001L);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(periodTemporalQuery26);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertTrue("'" + chronoField31 + "' != '" + java.time.temporal.ChronoField.SECOND_OF_DAY + "'", chronoField31.equals(java.time.temporal.ChronoField.SECOND_OF_DAY));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 32L + "'", long34 == 32L);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "1970-02-02" + "'", str35, "1970-02-02");
    }

    @Test
    public void test5079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5079");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 3, chronology1);
        org.joda.time.DateTime.Property property3 = dateTime2.dayOfYear();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight((java.lang.Object) dateTime2, chronology4);
        org.joda.time.MutableDateTime mutableDateTime6 = dateTime2.toMutableDateTime();
        org.joda.time.Days days7 = org.joda.time.Days.ONE;
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadablePeriod) days7);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) 3, chronology10);
        org.joda.time.DateTime.Property property12 = dateTime11.dayOfYear();
        org.joda.time.Interval interval13 = property12.toInterval();
        mutableInterval8.setInterval((org.joda.time.ReadableInterval) interval13);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) 3, chronology16);
        org.joda.time.DateTime.Property property18 = dateTime17.dayOfYear();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight((java.lang.Object) dateTime17, chronology19);
        org.joda.time.MutableDateTime mutableDateTime21 = dateTime17.toMutableDateTime();
        org.joda.time.Days days22 = org.joda.time.Days.ONE;
        org.joda.time.MutableInterval mutableInterval23 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime17, (org.joda.time.ReadablePeriod) days22);
        mutableInterval8.setInterval((org.joda.time.ReadableInterval) mutableInterval23);
        long long25 = mutableInterval23.toDurationMillis();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.LocalTime localTime28 = new org.joda.time.LocalTime((long) 0, chronology27);
        org.joda.time.Chronology chronology29 = localTime28.getChronology();
        org.joda.time.DateTimeField dateTimeField30 = chronology29.weekyearOfCentury();
        org.joda.time.DurationField durationField31 = chronology29.weekyears();
        org.joda.time.DurationField durationField32 = chronology29.seconds();
        org.joda.time.Chronology chronology33 = chronology29.withUTC();
        org.joda.time.DateTimeField dateTimeField34 = chronology29.hourOfDay();
        mutableInterval23.setChronology(chronology29);
        mutableInterval23.setDurationAfterStart(34887240000000L);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(days7);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(mutableDateTime21);
        org.junit.Assert.assertNotNull(days22);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 86400000L + "'", long25 == 86400000L);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
    }

    @Test
    public void test5080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5080");
        java.util.TimeZone timeZone1 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight((long) 1970, dateTimeZone2);
        long long6 = dateTimeZone2.convertLocalToUTC((long) 3, false);
        int int8 = dateTimeZone2.getStandardOffset((long) 1929);
        int int10 = dateTimeZone2.getOffsetFromLocal(3943899511L);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 3L + "'", long6 == 3L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test5081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5081");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 3, chronology1);
        org.joda.time.DateTime.Property property3 = dateTime2.dayOfYear();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight((java.lang.Object) dateTime2, chronology4);
        org.joda.time.DateMidnight dateMidnight7 = dateMidnight5.plus((long) (byte) -1);
        int int8 = dateMidnight5.getSecondOfMinute();
        org.joda.time.DateMidnight dateMidnight10 = dateMidnight5.plusYears(12);
        java.util.TimeZone timeZone15 = null;
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forTimeZone(timeZone15);
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight((long) 1970, dateTimeZone16);
        long long20 = dateTimeZone16.convertLocalToUTC((long) 3, false);
        org.joda.time.Interval interval21 = new org.joda.time.Interval(10L, (long) 2097, dateTimeZone16);
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime(dateTimeZone16);
        org.joda.time.DateMidnight dateMidnight23 = new org.joda.time.DateMidnight(28L, dateTimeZone16);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((long) 3, chronology25);
        org.joda.time.DateTime.Property property27 = dateTime26.dayOfYear();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateMidnight dateMidnight29 = new org.joda.time.DateMidnight((java.lang.Object) dateTime26, chronology28);
        org.joda.time.MutableDateTime mutableDateTime30 = dateTime26.toMutableDateTime();
        org.joda.time.Days days31 = org.joda.time.Days.ONE;
        org.joda.time.MutableInterval mutableInterval32 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime26, (org.joda.time.ReadablePeriod) days31);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime((long) 3, chronology34);
        org.joda.time.DateTime.Property property36 = dateTime35.dayOfYear();
        org.joda.time.Interval interval37 = property36.toInterval();
        mutableInterval32.setInterval((org.joda.time.ReadableInterval) interval37);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime((long) 3, chronology40);
        org.joda.time.DateTime.Property property42 = dateTime41.dayOfYear();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.DateMidnight dateMidnight44 = new org.joda.time.DateMidnight((java.lang.Object) dateTime41, chronology43);
        org.joda.time.DateMidnight.Property property45 = dateMidnight44.dayOfMonth();
        org.joda.time.ReadableInstant readableInstant46 = null;
        org.joda.time.ReadableInstant readableInstant47 = null;
        org.joda.time.Duration duration48 = new org.joda.time.Duration(readableInstant46, readableInstant47);
        org.joda.time.Duration duration50 = duration48.withMillis((-1L));
        org.joda.time.ReadableDuration readableDuration51 = null;
        org.joda.time.Duration duration52 = duration48.minus(readableDuration51);
        org.joda.time.DateMidnight dateMidnight53 = dateMidnight44.plus((org.joda.time.ReadableDuration) duration52);
        mutableInterval32.setDurationAfterStart((org.joda.time.ReadableDuration) duration52);
        org.joda.time.MutableDateTime mutableDateTime55 = new org.joda.time.MutableDateTime();
        boolean boolean56 = mutableInterval32.isBefore((org.joda.time.ReadableInstant) mutableDateTime55);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.DateTime dateTime59 = new org.joda.time.DateTime((long) 3, chronology58);
        org.joda.time.DateTime.Property property60 = dateTime59.dayOfYear();
        int int61 = dateTime59.getHourOfDay();
        boolean boolean63 = dateTime59.isBefore((long) '/');
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.DateTime dateTime66 = new org.joda.time.DateTime((long) 3, chronology65);
        org.joda.time.DateTime.Property property67 = dateTime66.dayOfYear();
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.DateMidnight dateMidnight69 = new org.joda.time.DateMidnight((java.lang.Object) dateTime66, chronology68);
        org.joda.time.DateMidnight dateMidnight71 = dateMidnight69.minusMonths((-1));
        org.joda.time.DateMidnight dateMidnight73 = dateMidnight69.withDayOfYear((int) ' ');
        mutableInterval32.setInterval((org.joda.time.ReadableInstant) dateTime59, (org.joda.time.ReadableInstant) dateMidnight73);
        boolean boolean75 = dateTimeZone16.equals((java.lang.Object) mutableInterval32);
        org.joda.time.DateMidnight dateMidnight76 = dateMidnight10.withZoneRetainFields(dateTimeZone16);
        java.lang.String str78 = dateTimeZone16.getShortName((long) 58);
        org.joda.time.MutableDateTime mutableDateTime79 = new org.joda.time.MutableDateTime(dateTimeZone16);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 3L + "'", long20 == 3L);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(mutableDateTime30);
        org.junit.Assert.assertNotNull(days31);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertNotNull(dateMidnight53);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertNotNull(dateMidnight71);
        org.junit.Assert.assertNotNull(dateMidnight73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(dateMidnight76);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "+00:00" + "'", str78, "+00:00");
    }

    @Test
    public void test5082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5082");
        java.io.File file0 = null;
        java.io.File file2 = new java.io.File(file0, "1970-01-01T00:00:00.003Z");
        long long3 = file2.length();
        boolean boolean4 = file2.isAbsolute();
        org.junit.Assert.assertNull("file2.getParent() == null", file2.getParent());
        org.junit.Assert.assertEquals(file2.toString(), "1970-01-01T00:00:00.003Z");
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test5083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5083");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.Interval interval1 = localDate0.toInterval();
        int int2 = localDate0.getYearOfCentury();
        int[] intArray3 = localDate0.getValues();
        org.junit.Assert.assertNotNull(interval1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 22 + "'", int2 == 22);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[2022, 2, 21]");
    }

    @Test
    public void test5084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5084");
        java.nio.LongBuffer longBuffer1 = java.nio.LongBuffer.allocate(32769);
        boolean boolean2 = longBuffer1.isDirect();
        java.nio.LongBuffer longBuffer3 = longBuffer1.compact();
        java.nio.Buffer buffer5 = longBuffer1.limit(121);
        org.junit.Assert.assertNotNull(longBuffer1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(longBuffer3);
        org.junit.Assert.assertNotNull(buffer5);
    }

    @Test
    public void test5085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5085");
        org.joda.time.Period period10 = org.joda.time.Period.ZERO;
        org.joda.time.Period period11 = period10.normalizedStandard();
        org.joda.time.Period period13 = period11.minusMinutes((int) ' ');
        org.joda.time.Period period15 = period13.minusMonths((int) (byte) 0);
        org.joda.time.PeriodType periodType16 = period15.getPeriodType();
        org.joda.time.PeriodType periodType17 = periodType16.withHoursRemoved();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.LocalTime localTime20 = new org.joda.time.LocalTime((long) 0, chronology19);
        org.joda.time.Chronology chronology21 = localTime20.getChronology();
        org.joda.time.DateTimeField dateTimeField22 = chronology21.weekyearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime23 = org.joda.time.MutableDateTime.now(chronology21);
        org.joda.time.DateTimeField dateTimeField24 = chronology21.monthOfYear();
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod((long) 679, (long) '/', periodType16, chronology21);
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod((int) (byte) 100, 10, 8, 47, 120, 42, (int) '\uffff', 10, periodType16);
        mutablePeriod26.setMonths(10);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(mutableDateTime23);
        org.junit.Assert.assertNotNull(dateTimeField24);
    }

    @Test
    public void test5086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5086");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.now();
        java.time.LocalDateTime localDateTime2 = localDateTime0.minusYears((long) (byte) 10);
        java.time.LocalDateTime localDateTime3 = java.time.LocalDateTime.now();
        java.time.LocalDateTime localDateTime5 = localDateTime3.minusYears((long) (byte) 10);
        boolean boolean6 = localDateTime0.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime5);
        java.time.LocalDateTime localDateTime7 = java.time.LocalDateTime.now();
        java.time.temporal.ChronoField chronoField8 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime10 = localDateTime7.with((java.time.temporal.TemporalField) chronoField8, (long) 10);
        java.time.LocalDateTime localDateTime12 = localDateTime7.minusMinutes((long) 12);
        boolean boolean13 = localDateTime5.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime7);
        int int14 = localDateTime5.getYear();
        java.time.LocalDateTime localDateTime16 = localDateTime5.minusSeconds((long) 4200);
        java.time.LocalDateTime localDateTime17 = java.time.LocalDateTime.now();
        java.time.LocalDateTime localDateTime18 = java.time.LocalDateTime.now();
        java.time.temporal.ChronoField chronoField19 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime21 = localDateTime18.with((java.time.temporal.TemporalField) chronoField19, (long) 10);
        boolean boolean22 = localDateTime17.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime18);
        org.joda.time.Period period23 = org.joda.time.Period.ZERO;
        org.joda.time.Period period24 = period23.normalizedStandard();
        org.joda.time.Period period26 = period23.plusHours(2);
        java.time.chrono.IsoEra isoEra27 = java.time.chrono.IsoEra.CE;
        boolean boolean28 = period26.equals((java.lang.Object) isoEra27);
        java.time.LocalTime localTime33 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime34 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime33);
        java.time.LocalTime localTime39 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime40 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime39);
        java.time.temporal.ChronoField chronoField41 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime43 = localTime39.with((java.time.temporal.TemporalField) chronoField41, (long) (short) 1);
        long long44 = localTime33.getLong((java.time.temporal.TemporalField) chronoField41);
        boolean boolean45 = isoEra27.isSupported((java.time.temporal.TemporalField) chronoField41);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery46 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period47 = isoEra27.query(periodTemporalQuery46);
        boolean boolean48 = period47.isNegative();
        java.time.Period period50 = period47.plusDays((long) ' ');
        java.time.temporal.ChronoField chronoField51 = java.time.temporal.ChronoField.SECOND_OF_DAY;
        boolean boolean52 = period47.equals((java.lang.Object) chronoField51);
        java.time.chrono.ChronoPeriod chronoPeriod53 = period47.negated();
        java.time.OffsetDateTime offsetDateTime54 = java.time.OffsetDateTime.now();
        java.time.temporal.ChronoField chronoField55 = java.time.temporal.ChronoField.HOUR_OF_DAY;
        boolean boolean56 = offsetDateTime54.isSupported((java.time.temporal.TemporalField) chronoField55);
        java.time.Month month57 = offsetDateTime54.getMonth();
        java.time.temporal.Temporal temporal58 = period47.addTo((java.time.temporal.Temporal) offsetDateTime54);
        java.time.LocalDateTime localDateTime59 = localDateTime17.minus((java.time.temporal.TemporalAmount) period47);
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime60 = localDateTime5.plus((java.time.temporal.TemporalAmount) period47);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertTrue("'" + chronoField8 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField8.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2012 + "'", int14 == 2012);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertTrue("'" + chronoField19 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField19.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertTrue("'" + isoEra27 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra27.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(localTime33);
        org.junit.Assert.assertNotNull(localTime34);
        org.junit.Assert.assertNotNull(localTime39);
        org.junit.Assert.assertNotNull(localTime40);
        org.junit.Assert.assertTrue("'" + chronoField41 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField41.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime43);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 3601000000001L + "'", long44 == 3601000000001L);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(periodTemporalQuery46);
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertTrue("'" + chronoField51 + "' != '" + java.time.temporal.ChronoField.SECOND_OF_DAY + "'", chronoField51.equals(java.time.temporal.ChronoField.SECOND_OF_DAY));
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(chronoPeriod53);
        org.junit.Assert.assertNotNull(offsetDateTime54);
        org.junit.Assert.assertTrue("'" + chronoField55 + "' != '" + java.time.temporal.ChronoField.HOUR_OF_DAY + "'", chronoField55.equals(java.time.temporal.ChronoField.HOUR_OF_DAY));
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + month57 + "' != '" + java.time.Month.FEBRUARY + "'", month57.equals(java.time.Month.FEBRUARY));
        org.junit.Assert.assertNotNull(temporal58);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime60);
    }

    @Test
    public void test5087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5087");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withYearOfCentury((int) 'a');
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.plusSeconds(6);
        org.joda.time.DateTime dateTime6 = localDateTime3.toDateTime();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime3.minusMillis((int) '/');
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minusMonths(100);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withDayOfYear(17);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime10.withYear(10);
        org.joda.time.LocalDateTime.Property property15 = localDateTime14.dayOfMonth();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(property15);
    }

    @Test
    public void test5088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5088");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 3, chronology1);
        org.joda.time.DateTime.Property property3 = dateTime2.dayOfYear();
        org.joda.time.Interval interval4 = property3.toInterval();
        org.joda.time.DateTimeField dateTimeField5 = property3.getField();
        org.joda.time.DateTime dateTime6 = property3.roundHalfEvenCopy();
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.Duration duration9 = new org.joda.time.Duration(readableInstant7, readableInstant8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.Period period12 = duration9.toPeriodTo(readableInstant10, periodType11);
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.Duration duration15 = new org.joda.time.Duration(readableInstant13, readableInstant14);
        long long16 = duration15.getMillis();
        boolean boolean17 = duration9.isShorterThan((org.joda.time.ReadableDuration) duration15);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) 3, chronology19);
        org.joda.time.DateTime.Property property21 = dateTime20.dayOfYear();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateMidnight dateMidnight23 = new org.joda.time.DateMidnight((java.lang.Object) dateTime20, chronology22);
        org.joda.time.MutableDateTime mutableDateTime24 = dateTime20.toMutableDateTime();
        mutableDateTime24.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property27 = mutableDateTime24.dayOfWeek();
        org.joda.time.MutableDateTime.Property property28 = mutableDateTime24.year();
        org.joda.time.MutableDateTime.Property property29 = mutableDateTime24.weekyear();
        boolean boolean30 = duration9.equals((java.lang.Object) mutableDateTime24);
        mutableDateTime24.addMonths((int) ' ');
        mutableDateTime24.add((long) (byte) 10);
        org.joda.time.Period period35 = org.joda.time.Period.ZERO;
        org.joda.time.Period period36 = period35.normalizedStandard();
        org.joda.time.Period period38 = period35.plusHours(2);
        java.time.chrono.IsoEra isoEra39 = java.time.chrono.IsoEra.CE;
        boolean boolean40 = period38.equals((java.lang.Object) isoEra39);
        int int41 = period38.getMinutes();
        mutableDateTime24.add((org.joda.time.ReadablePeriod) period38);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime(chronology43);
        org.joda.time.LocalDateTime localDateTime46 = localDateTime44.withYearOfCentury((int) 'a');
        int int47 = localDateTime46.getDayOfMonth();
        org.joda.time.LocalDateTime localDateTime49 = localDateTime46.withMinuteOfHour((int) ' ');
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = org.joda.time.DateTimeFieldType.weekyear();
        int int51 = localDateTime46.get(dateTimeFieldType50);
        org.joda.time.MutableDateTime.Property property52 = mutableDateTime24.property(dateTimeFieldType50);
        org.joda.time.DateTime dateTime54 = dateTime6.withField(dateTimeFieldType50, (int) '/');
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.LocalDateTime localDateTime56 = new org.joda.time.LocalDateTime(chronology55);
        org.joda.time.LocalDateTime localDateTime58 = localDateTime56.withYearOfCentury((int) 'a');
        org.joda.time.LocalDateTime localDateTime60 = localDateTime58.plusSeconds(6);
        org.joda.time.ReadableInstant readableInstant61 = null;
        org.joda.time.ReadableInstant readableInstant62 = null;
        org.joda.time.Duration duration63 = new org.joda.time.Duration(readableInstant61, readableInstant62);
        long long64 = duration63.getMillis();
        org.joda.time.Duration duration66 = duration63.plus((long) (byte) 1);
        org.joda.time.LocalDateTime localDateTime67 = localDateTime58.minus((org.joda.time.ReadableDuration) duration66);
        org.joda.time.LocalDateTime localDateTime69 = localDateTime67.withWeekOfWeekyear((int) '#');
        org.joda.time.LocalDateTime localDateTime71 = localDateTime69.withCenturyOfEra(10);
        org.joda.time.ReadableInstant readableInstant72 = null;
        org.joda.time.ReadableInstant readableInstant73 = null;
        org.joda.time.Duration duration74 = new org.joda.time.Duration(readableInstant72, readableInstant73);
        org.joda.time.ReadableInstant readableInstant75 = null;
        org.joda.time.PeriodType periodType76 = null;
        org.joda.time.Period period77 = duration74.toPeriodTo(readableInstant75, periodType76);
        long long78 = duration74.getStandardSeconds();
        org.joda.time.Chronology chronology80 = null;
        org.joda.time.DateTime dateTime81 = new org.joda.time.DateTime((long) 3, chronology80);
        org.joda.time.DateTime.Property property82 = dateTime81.dayOfYear();
        org.joda.time.Chronology chronology83 = null;
        org.joda.time.DateMidnight dateMidnight84 = new org.joda.time.DateMidnight((java.lang.Object) dateTime81, chronology83);
        org.joda.time.DateMidnight dateMidnight86 = dateMidnight84.minusMonths((-1));
        org.joda.time.DateMidnight dateMidnight88 = dateMidnight84.withDayOfYear((int) ' ');
        org.joda.time.Interval interval89 = duration74.toIntervalTo((org.joda.time.ReadableInstant) dateMidnight88);
        long long90 = duration74.getStandardSeconds();
        org.joda.time.LocalDateTime localDateTime91 = localDateTime71.minus((org.joda.time.ReadableDuration) duration74);
        org.joda.time.MutablePeriod mutablePeriod92 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime54, (org.joda.time.ReadableDuration) duration74);
        int int93 = mutablePeriod92.getDays();
        mutablePeriod92.addDays(965000000);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(mutableDateTime24);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertTrue("'" + isoEra39 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra39.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 21 + "'", int47 == 21);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(dateTimeFieldType50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 2097 + "'", int51 == 2097);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 0L + "'", long64 == 0L);
        org.junit.Assert.assertNotNull(duration66);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertNotNull(localDateTime69);
        org.junit.Assert.assertNotNull(localDateTime71);
        org.junit.Assert.assertNotNull(period77);
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 0L + "'", long78 == 0L);
        org.junit.Assert.assertNotNull(property82);
        org.junit.Assert.assertNotNull(dateMidnight86);
        org.junit.Assert.assertNotNull(dateMidnight88);
        org.junit.Assert.assertNotNull(interval89);
        org.junit.Assert.assertTrue("'" + long90 + "' != '" + 0L + "'", long90 == 0L);
        org.junit.Assert.assertNotNull(localDateTime91);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 0 + "'", int93 == 0);
    }

    @Test
    public void test5089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5089");
        java.time.temporal.ValueRange valueRange2 = java.time.temporal.ValueRange.of(7L, (long) 574);
        org.junit.Assert.assertNotNull(valueRange2);
    }

    @Test
    public void test5090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5090");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.Instant instant3 = instant0.withDurationAdded(86400000L, (int) '/');
        org.joda.time.Instant instant5 = instant3.plus(0L);
        org.joda.time.Instant instant8 = instant3.withDurationAdded((long) 11, 30);
        org.joda.time.MutableDateTime mutableDateTime9 = instant8.toMutableDateTimeISO();
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertNotNull(instant8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
    }

    @Test
    public void test5091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5091");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(36484003L);
        org.joda.time.DateTime dateTime2 = localTime1.toDateTimeToday();
        org.joda.time.LocalTime.Property property3 = localTime1.hourOfDay();
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(property3);
    }

    @Test
    public void test5092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5092");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((long) 0, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) 3, chronology4);
        org.joda.time.DateTime.Property property6 = dateTime5.dayOfYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateMidnight dateMidnight8 = new org.joda.time.DateMidnight((java.lang.Object) dateTime5, chronology7);
        org.joda.time.DateTime dateTime9 = localTime2.toDateTime((org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.LocalTime localTime11 = localTime2.plusHours(3);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) 3, chronology13);
        org.joda.time.DateTime.Property property15 = dateTime14.dayOfYear();
        org.joda.time.Interval interval16 = property15.toInterval();
        org.joda.time.Period period17 = org.joda.time.Period.ZERO;
        org.joda.time.Period period18 = period17.normalizedStandard();
        org.joda.time.Period period20 = period18.minusMinutes((int) ' ');
        org.joda.time.Period period22 = period20.withMinutes(32769);
        boolean boolean23 = interval16.equals((java.lang.Object) period22);
        org.joda.time.LocalTime localTime25 = localTime11.withPeriodAdded((org.joda.time.ReadablePeriod) period22, (int) (byte) 100);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((long) 3, chronology27);
        org.joda.time.DateTime.Property property29 = dateTime28.dayOfYear();
        org.joda.time.Interval interval30 = property29.toInterval();
        org.joda.time.DateTimeField dateTimeField31 = property29.getField();
        org.joda.time.DateTime dateTime33 = property29.addToCopy((long) (byte) 1);
        org.joda.time.DateTime dateTime35 = dateTime33.withYear(4);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime((long) 3, chronology37);
        org.joda.time.Period period39 = org.joda.time.Period.ZERO;
        org.joda.time.Period period40 = period39.normalizedStandard();
        org.joda.time.Period period42 = period40.minusMinutes((int) ' ');
        org.joda.time.Period period44 = period42.minusMonths((int) (byte) 0);
        org.joda.time.PeriodType periodType45 = period44.getPeriodType();
        org.joda.time.DateTime dateTime46 = dateTime38.minus((org.joda.time.ReadablePeriod) period44);
        org.joda.time.Duration duration47 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime35, (org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.DateTime dateTime49 = dateTime46.withYear(45);
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        boolean boolean51 = dateTime49.isSupported(dateTimeFieldType50);
        org.joda.time.LocalTime.Property property52 = localTime25.property(dateTimeFieldType50);
        int int53 = localTime25.getMillisOfSecond();
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(interval16);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertNotNull(periodType45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTimeFieldType50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
    }

    @Test
    public void test5093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5093");
        java.io.OutputStream outputStream0 = null;
        java.io.FilterOutputStream filterOutputStream1 = new java.io.FilterOutputStream(outputStream0);
        java.io.PrintStream printStream3 = new java.io.PrintStream((java.io.OutputStream) filterOutputStream1, false);
        char[] charArray4 = new char[] {};
        java.nio.CharBuffer charBuffer5 = java.nio.CharBuffer.wrap(charArray4);
        printStream3.print(charArray4);
        java.io.OutputStream outputStream7 = null;
        java.io.FilterOutputStream filterOutputStream8 = new java.io.FilterOutputStream(outputStream7);
        java.io.PrintStream printStream10 = new java.io.PrintStream((java.io.OutputStream) filterOutputStream8, false);
        char[] charArray11 = new char[] {};
        java.nio.CharBuffer charBuffer12 = java.nio.CharBuffer.wrap(charArray11);
        printStream10.print(charArray11);
        printStream3.print(charArray11);
        org.junit.Assert.assertNotNull(charArray4);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray4), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray4), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray4), "[]");
        org.junit.Assert.assertNotNull(charBuffer5);
        org.junit.Assert.assertNotNull(charArray11);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray11), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray11), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray11), "[]");
        org.junit.Assert.assertNotNull(charBuffer12);
    }

    @Test
    public void test5094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5094");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Locale.LanguageRange[] languageRangeArray3 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList4 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList4, languageRangeArray3);
        java.util.Locale locale6 = java.util.Locale.JAPAN;
        java.util.Locale[] localeArray7 = new java.util.Locale[] { locale6 };
        java.util.ArrayList<java.util.Locale> localeList8 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList8, localeArray7);
        java.util.List<java.util.Locale> localeList10 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList4, (java.util.Collection<java.util.Locale>) localeList8);
        localeList10.clear();
        java.util.List<java.util.Locale> localeList12 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList10);
        java.util.Locale.LanguageRange[] languageRangeArray13 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList14 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList14, languageRangeArray13);
        java.util.Locale locale16 = java.util.Locale.JAPAN;
        java.util.Locale[] localeArray17 = new java.util.Locale[] { locale16 };
        java.util.ArrayList<java.util.Locale> localeList18 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList18, localeArray17);
        java.util.List<java.util.Locale> localeList20 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList14, (java.util.Collection<java.util.Locale>) localeList18);
        localeList20.clear();
        java.util.Locale.FilteringMode filteringMode22 = java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList23 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList20, filteringMode22);
        java.util.ListIterator<java.util.Locale> localeItor24 = localeList23.listIterator();
        boolean boolean25 = localeItor24.hasPrevious();
        java.util.Locale locale26 = null;
        // The following exception was thrown during execution in test generation
        try {
            localeItor24.set(locale26);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: null");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(languageRangeArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(localeArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(localeList10);
        org.junit.Assert.assertNotNull(localeList12);
        org.junit.Assert.assertNotNull(languageRangeArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(localeArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(localeList20);
        org.junit.Assert.assertTrue("'" + filteringMode22 + "' != '" + java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES + "'", filteringMode22.equals(java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList23);
        org.junit.Assert.assertNotNull(localeItor24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test5095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5095");
        java.util.GregorianCalendar gregorianCalendar5 = new java.util.GregorianCalendar(12, 4096, 7, (-1), (int) (short) 10);
        int int6 = gregorianCalendar5.getWeeksInWeekYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(chronology7);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime8.withField(dateTimeFieldType9, (int) 'a');
        boolean boolean12 = gregorianCalendar5.before((java.lang.Object) dateTimeFieldType9);
        // The following exception was thrown during execution in test generation
        try {
            gregorianCalendar5.clear(83400);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 83400");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 52 + "'", int6 == 52);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test5096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5096");
        java.util.SortedMap<java.lang.String, java.nio.charset.Charset> strMap0 = java.nio.charset.Charset.availableCharsets();
        java.util.SortedMap<java.lang.String, java.nio.charset.Charset> strMap2 = strMap0.headMap("Optional.empty");
        // The following exception was thrown during execution in test generation
        try {
            java.util.SortedMap<java.lang.String, java.nio.charset.Charset> strMap5 = strMap2.subMap("Chinese (Taiwan)", "");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: fromKey > toKey");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strMap0);
        org.junit.Assert.assertNotNull(strMap2);
    }

    @Test
    public void test5097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5097");
        java.util.GregorianCalendar gregorianCalendar5 = new java.util.GregorianCalendar(12, 4096, 7, (-1), (int) (short) 10);
        int int6 = gregorianCalendar5.getWeeksInWeekYear();
        java.lang.String str7 = gregorianCalendar5.getCalendarType();
        java.time.ZonedDateTime zonedDateTime8 = gregorianCalendar5.toZonedDateTime();
        java.time.ZonedDateTime zonedDateTime10 = zonedDateTime8.minusMonths((long) 10);
        int int11 = zonedDateTime8.getMonthValue();
        java.time.LocalTime localTime16 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime17 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime16);
        java.time.LocalTime localTime22 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime23 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime22);
        java.time.temporal.ChronoField chronoField24 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime26 = localTime22.with((java.time.temporal.TemporalField) chronoField24, (long) (short) 1);
        long long27 = localTime16.getLong((java.time.temporal.TemporalField) chronoField24);
        long long28 = zonedDateTime8.getLong((java.time.temporal.TemporalField) chronoField24);
        java.time.ZonedDateTime zonedDateTime30 = zonedDateTime8.minusSeconds((-8L));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 52 + "'", int6 == 52);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "gregory" + "'", str7, "gregory");
        org.junit.Assert.assertNotNull(zonedDateTime8);
        org.junit.Assert.assertNotNull(zonedDateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 5 + "'", int11 == 5);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertTrue("'" + chronoField24 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField24.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime26);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 3601000000001L + "'", long27 == 3601000000001L);
// flaky:         org.junit.Assert.assertTrue("'" + long28 + "' != '" + 83399965000000L + "'", long28 == 83399965000000L);
        org.junit.Assert.assertNotNull(zonedDateTime30);
    }

    @Test
    public void test5098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5098");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 3, chronology1);
        org.joda.time.DateTime.Property property3 = dateTime2.dayOfYear();
        org.joda.time.Interval interval4 = property3.toInterval();
        org.joda.time.DateTimeField dateTimeField5 = property3.getField();
        org.joda.time.DateTime dateTime7 = property3.addWrapFieldToCopy(0);
        org.joda.time.DateTime dateTime9 = property3.setCopy(34);
        java.util.Locale locale10 = java.util.Locale.UK;
        java.util.Locale locale14 = new java.util.Locale("ParseCaseSensitive(false)(Value(Year,4,10,EXCEEDS_PAD)'-'Value(MonthOfYear,2)'-'Value(DayOfMonth,2))[Offset(+HH:MM:ss,'Z')]", "UNDERFLOW", "Years");
        java.lang.String str15 = locale10.getDisplayName(locale14);
        int int16 = property3.getMaximumTextLength(locale10);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "en_GB");
        org.junit.Assert.assertEquals(locale14.toString(), "parsecasesensitive(false)(value(year,4,10,exceeds_pad)'-'value(monthofyear,2)'-'value(dayofmonth,2))[offset(+hh:mm:ss,'z')]_UNDERFLOW_Years");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "English (United Kingdom)" + "'", str15, "English (United Kingdom)");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 3 + "'", int16 == 3);
    }

    @Test
    public void test5099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5099");
        java.time.Instant instant0 = java.time.Instant.now();
        java.nio.file.attribute.FileTime fileTime1 = java.nio.file.attribute.FileTime.from(instant0);
        org.joda.time.Period period2 = org.joda.time.Period.ZERO;
        org.joda.time.Period period3 = period2.normalizedStandard();
        org.joda.time.Period period5 = period2.plusHours(2);
        java.time.chrono.IsoEra isoEra6 = java.time.chrono.IsoEra.CE;
        boolean boolean7 = period5.equals((java.lang.Object) isoEra6);
        java.time.LocalTime localTime12 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime13 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime12);
        java.time.LocalTime localTime18 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime19 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime18);
        java.time.temporal.ChronoField chronoField20 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime22 = localTime18.with((java.time.temporal.TemporalField) chronoField20, (long) (short) 1);
        long long23 = localTime12.getLong((java.time.temporal.TemporalField) chronoField20);
        boolean boolean24 = isoEra6.isSupported((java.time.temporal.TemporalField) chronoField20);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery25 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period26 = isoEra6.query(periodTemporalQuery25);
        boolean boolean27 = period26.isNegative();
        java.time.Period period29 = period26.plusDays((long) ' ');
        java.time.temporal.ChronoField chronoField30 = java.time.temporal.ChronoField.SECOND_OF_DAY;
        boolean boolean31 = period26.equals((java.lang.Object) chronoField30);
        java.time.chrono.ChronoPeriod chronoPeriod32 = period26.negated();
        java.time.Instant instant33 = instant0.minus((java.time.temporal.TemporalAmount) chronoPeriod32);
        java.time.LocalDateTime localDateTime34 = java.time.LocalDateTime.now();
        java.time.temporal.ChronoField chronoField35 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime37 = localDateTime34.with((java.time.temporal.TemporalField) chronoField35, (long) 10);
        java.time.Duration duration39 = java.time.Duration.ofSeconds((long) 0);
        java.time.temporal.Temporal temporal40 = localDateTime34.minus((java.time.temporal.TemporalAmount) duration39);
        java.time.Duration duration42 = duration39.plusHours((long) '.');
        java.time.Instant instant43 = instant0.minus((java.time.temporal.TemporalAmount) duration42);
        long long44 = duration42.toHours();
        org.junit.Assert.assertNotNull(instant0);
        org.junit.Assert.assertNotNull(fileTime1);
        org.junit.Assert.assertNotNull(period2);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertTrue("'" + isoEra6 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra6.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertTrue("'" + chronoField20 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField20.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 3601000000001L + "'", long23 == 3601000000001L);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(periodTemporalQuery25);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertTrue("'" + chronoField30 + "' != '" + java.time.temporal.ChronoField.SECOND_OF_DAY + "'", chronoField30.equals(java.time.temporal.ChronoField.SECOND_OF_DAY));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(chronoPeriod32);
        org.junit.Assert.assertNotNull(instant33);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertTrue("'" + chronoField35 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField35.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime37);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(temporal40);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(instant43);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 46L + "'", long44 == 46L);
    }

    @Test
    public void test5100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5100");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.Interval interval1 = localDate0.toInterval();
        int int2 = localDate0.getDayOfYear();
        java.util.TimeZone timeZone6 = null;
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forTimeZone(timeZone6);
        org.joda.time.DateMidnight dateMidnight8 = new org.joda.time.DateMidnight((long) 1970, dateTimeZone7);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 3600000, dateTimeZone7);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) 22, dateTimeZone7);
        org.joda.time.Interval interval11 = localDate0.toInterval(dateTimeZone7);
        long long14 = dateTimeZone7.convertLocalToUTC((long) 14, true);
        long long17 = dateTimeZone7.convertLocalToUTC(86399792200008L, false);
        org.junit.Assert.assertNotNull(interval1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 52 + "'", int2 == 52);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 14L + "'", long14 == 14L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 86399792200008L + "'", long17 == 86399792200008L);
    }

    @Test
    public void test5101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5101");
        java.time.Clock clock0 = java.time.Clock.systemUTC();
        java.time.Duration duration2 = java.time.Duration.ofSeconds((long) 256);
        java.time.Clock clock3 = java.time.Clock.tick(clock0, duration2);
        java.time.Instant instant4 = clock0.instant();
        java.time.Instant instant6 = instant4.plusNanos(8380800010L);
        java.time.LocalTime localTime12 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime13 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime12);
        java.time.temporal.ChronoField chronoField14 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime16 = localTime12.with((java.time.temporal.TemporalField) chronoField14, (long) (short) 1);
        java.util.Locale locale17 = java.util.Locale.GERMANY;
        java.lang.String str18 = chronoField14.getDisplayName(locale17);
        java.time.temporal.TemporalUnit temporalUnit19 = chronoField14.getBaseUnit();
        java.time.Instant instant20 = instant6.minus((long) 19, temporalUnit19);
        java.time.Instant instant22 = instant20.plusMillis((long) 32772);
        java.lang.String str23 = instant22.toString();
        org.junit.Assert.assertNotNull(clock0);
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertNotNull(clock3);
        org.junit.Assert.assertNotNull(instant4);
        org.junit.Assert.assertNotNull(instant6);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertTrue("'" + chronoField14 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField14.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "NanoOfDay" + "'", str18, "NanoOfDay");
        org.junit.Assert.assertTrue("'" + temporalUnit19 + "' != '" + java.time.temporal.ChronoUnit.NANOS + "'", temporalUnit19.equals(java.time.temporal.ChronoUnit.NANOS));
        org.junit.Assert.assertNotNull(instant20);
        org.junit.Assert.assertNotNull(instant22);
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "2022-02-21T09:42:11.358799991Z" + "'", str23, "2022-02-21T09:42:11.358799991Z");
    }

    @Test
    public void test5102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5102");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 3, chronology1);
        org.joda.time.DateTime.Property property3 = dateTime2.dayOfYear();
        org.joda.time.Interval interval4 = property3.toInterval();
        org.joda.time.DateTimeField dateTimeField5 = property3.getField();
        org.joda.time.DateTime dateTime7 = property3.addToCopy((long) (byte) 1);
        org.joda.time.DateTime dateTime9 = dateTime7.withYear(4);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) 3, chronology11);
        org.joda.time.Period period13 = org.joda.time.Period.ZERO;
        org.joda.time.Period period14 = period13.normalizedStandard();
        org.joda.time.Period period16 = period14.minusMinutes((int) ' ');
        org.joda.time.Period period18 = period16.minusMonths((int) (byte) 0);
        org.joda.time.PeriodType periodType19 = period18.getPeriodType();
        org.joda.time.DateTime dateTime20 = dateTime12.minus((org.joda.time.ReadablePeriod) period18);
        org.joda.time.Duration duration21 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.LocalTime localTime24 = new org.joda.time.LocalTime((long) 0, chronology23);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((long) 3, chronology26);
        org.joda.time.DateTime.Property property28 = dateTime27.dayOfYear();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.DateMidnight dateMidnight30 = new org.joda.time.DateMidnight((java.lang.Object) dateTime27, chronology29);
        org.joda.time.DateTime dateTime31 = localTime24.toDateTime((org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.DateTime dateTime33 = dateTime31.minusMillis((int) (byte) 0);
        org.joda.time.DateTime dateTime35 = dateTime31.withYearOfCentury((int) (byte) 10);
        org.joda.time.Period period36 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime20, (org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.DateTime.Property property37 = dateTime20.minuteOfDay();
        java.util.TimeZone timeZone41 = null;
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forTimeZone(timeZone41);
        org.joda.time.DateMidnight dateMidnight43 = new org.joda.time.DateMidnight((long) 1970, dateTimeZone42);
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime((long) 3600000, dateTimeZone42);
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime((long) 22, dateTimeZone42);
        org.joda.time.DateTime dateTime46 = dateTime20.withZone(dateTimeZone42);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime51 = dateTime46.withTime(86, 64, 926000000, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 86 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(dateTime46);
    }

    @Test
    public void test5103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5103");
        java.util.GregorianCalendar gregorianCalendar5 = new java.util.GregorianCalendar(12, 4096, 7, (-1), (int) (short) 10);
        int int6 = gregorianCalendar5.getWeeksInWeekYear();
        java.lang.String str7 = gregorianCalendar5.getCalendarType();
        java.time.ZonedDateTime zonedDateTime8 = gregorianCalendar5.toZonedDateTime();
        java.time.ZonedDateTime zonedDateTime10 = zonedDateTime8.minusMonths((long) 10);
        java.time.ZonedDateTime zonedDateTime12 = zonedDateTime10.withNano(52);
        java.time.LocalTime localTime17 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime18 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime17);
        long long19 = localTime18.toNanoOfDay();
        java.util.GregorianCalendar gregorianCalendar25 = new java.util.GregorianCalendar(12, 4096, 7, (-1), (int) (short) 10);
        int int26 = gregorianCalendar25.getWeeksInWeekYear();
        java.lang.String str27 = gregorianCalendar25.getCalendarType();
        java.time.ZonedDateTime zonedDateTime28 = gregorianCalendar25.toZonedDateTime();
        java.time.ZonedDateTime zonedDateTime30 = zonedDateTime28.minusMonths((long) 10);
        java.time.temporal.Temporal temporal31 = localTime18.adjustInto((java.time.temporal.Temporal) zonedDateTime30);
        java.time.LocalDateTime localDateTime32 = java.time.LocalDateTime.now();
        java.time.LocalDateTime localDateTime34 = localDateTime32.minusYears((long) (byte) 10);
        java.time.LocalDateTime localDateTime35 = java.time.LocalDateTime.now();
        java.time.LocalDateTime localDateTime37 = localDateTime35.minusYears((long) (byte) 10);
        boolean boolean38 = localDateTime32.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime37);
        java.time.OffsetTime offsetTime39 = java.time.OffsetTime.MAX;
        java.time.LocalTime localTime40 = offsetTime39.toLocalTime();
        java.time.OffsetTime offsetTime41 = java.time.OffsetTime.MAX;
        java.time.LocalTime localTime42 = offsetTime41.toLocalTime();
        java.lang.String str43 = offsetTime41.toString();
        java.time.Duration duration44 = java.time.Duration.ZERO;
        java.lang.String str45 = duration44.toString();
        java.time.OffsetTime offsetTime46 = offsetTime41.plus((java.time.temporal.TemporalAmount) duration44);
        java.time.OffsetTime offsetTime48 = offsetTime41.plusNanos((long) 0);
        java.time.LocalTime localTime53 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime54 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime53);
        java.time.temporal.ChronoField chronoField55 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime57 = localTime53.with((java.time.temporal.TemporalField) chronoField55, (long) (short) 1);
        java.util.Locale locale58 = java.util.Locale.GERMANY;
        java.lang.String str59 = chronoField55.getDisplayName(locale58);
        java.time.OffsetTime offsetTime61 = offsetTime48.with((java.time.temporal.TemporalField) chronoField55, (long) 28);
        long long62 = localTime40.getLong((java.time.temporal.TemporalField) chronoField55);
        java.time.temporal.TemporalUnit temporalUnit63 = chronoField55.getRangeUnit();
        boolean boolean64 = localDateTime32.isSupported(temporalUnit63);
        java.time.ZonedDateTime zonedDateTime65 = zonedDateTime30.truncatedTo(temporalUnit63);
        boolean boolean66 = zonedDateTime12.isEqual((java.time.chrono.ChronoZonedDateTime<java.time.LocalDate>) zonedDateTime30);
        java.time.Period period70 = java.time.Period.of((int) (byte) 10, (int) (byte) 10, 86);
        java.time.ZonedDateTime zonedDateTime71 = zonedDateTime30.minus((java.time.temporal.TemporalAmount) period70);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 52 + "'", int6 == 52);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "gregory" + "'", str7, "gregory");
        org.junit.Assert.assertNotNull(zonedDateTime8);
        org.junit.Assert.assertNotNull(zonedDateTime10);
        org.junit.Assert.assertNotNull(zonedDateTime12);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 3601000000001L + "'", long19 == 3601000000001L);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 52 + "'", int26 == 52);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "gregory" + "'", str27, "gregory");
        org.junit.Assert.assertNotNull(zonedDateTime28);
        org.junit.Assert.assertNotNull(zonedDateTime30);
        org.junit.Assert.assertNotNull(temporal31);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(offsetTime39);
        org.junit.Assert.assertNotNull(localTime40);
        org.junit.Assert.assertNotNull(offsetTime41);
        org.junit.Assert.assertNotNull(localTime42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "23:59:59.999999999-18:00" + "'", str43, "23:59:59.999999999-18:00");
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "PT0S" + "'", str45, "PT0S");
        org.junit.Assert.assertNotNull(offsetTime46);
        org.junit.Assert.assertNotNull(offsetTime48);
        org.junit.Assert.assertNotNull(localTime53);
        org.junit.Assert.assertNotNull(localTime54);
        org.junit.Assert.assertTrue("'" + chronoField55 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField55.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime57);
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "NanoOfDay" + "'", str59, "NanoOfDay");
        org.junit.Assert.assertNotNull(offsetTime61);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 86399999999999L + "'", long62 == 86399999999999L);
        org.junit.Assert.assertTrue("'" + temporalUnit63 + "' != '" + java.time.temporal.ChronoUnit.DAYS + "'", temporalUnit63.equals(java.time.temporal.ChronoUnit.DAYS));
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(zonedDateTime65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(period70);
        org.junit.Assert.assertNotNull(zonedDateTime71);
    }

    @Test
    public void test5104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5104");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 3, chronology1);
        org.joda.time.DateTime.Property property3 = dateTime2.dayOfYear();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight((java.lang.Object) dateTime2, chronology4);
        org.joda.time.MutableDateTime mutableDateTime6 = dateTime2.toMutableDateTime();
        mutableDateTime6.addYears((int) (short) 100);
        org.joda.time.Period period9 = org.joda.time.Period.ZERO;
        org.joda.time.TimeOfDay timeOfDay11 = org.joda.time.TimeOfDay.fromMillisOfDay((long) (short) 0);
        org.joda.time.TimeOfDay timeOfDay13 = org.joda.time.TimeOfDay.fromMillisOfDay((long) (short) 0);
        org.joda.time.Hours hours14 = org.joda.time.Hours.hoursBetween((org.joda.time.ReadablePartial) timeOfDay11, (org.joda.time.ReadablePartial) timeOfDay13);
        org.joda.time.DurationFieldType durationFieldType15 = org.joda.time.DurationFieldType.hours();
        org.joda.time.TimeOfDay timeOfDay17 = timeOfDay13.withFieldAdded(durationFieldType15, (int) (byte) 0);
        org.joda.time.Period period19 = period9.withFieldAdded(durationFieldType15, 4);
        mutableDateTime6.add((org.joda.time.ReadablePeriod) period9);
        mutableDateTime6.addMonths(1970);
        mutableDateTime6.setDate(4096, 10, 19);
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.Duration duration29 = new org.joda.time.Duration(readableInstant27, readableInstant28);
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.PeriodType periodType31 = null;
        org.joda.time.Period period32 = duration29.toPeriodTo(readableInstant30, periodType31);
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.Duration duration35 = new org.joda.time.Duration(readableInstant33, readableInstant34);
        long long36 = duration35.getMillis();
        boolean boolean37 = duration29.isShorterThan((org.joda.time.ReadableDuration) duration35);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime((long) 3, chronology39);
        org.joda.time.DateTime.Property property41 = dateTime40.dayOfYear();
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.DateMidnight dateMidnight43 = new org.joda.time.DateMidnight((java.lang.Object) dateTime40, chronology42);
        org.joda.time.MutableDateTime mutableDateTime44 = dateTime40.toMutableDateTime();
        mutableDateTime44.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property47 = mutableDateTime44.dayOfWeek();
        org.joda.time.MutableDateTime.Property property48 = mutableDateTime44.year();
        org.joda.time.MutableDateTime.Property property49 = mutableDateTime44.weekyear();
        boolean boolean50 = duration29.equals((java.lang.Object) mutableDateTime44);
        mutableDateTime44.addMonths((int) ' ');
        mutableDateTime44.add((long) (byte) 10);
        org.joda.time.Period period55 = org.joda.time.Period.ZERO;
        org.joda.time.Period period56 = period55.normalizedStandard();
        org.joda.time.Period period58 = period55.plusHours(2);
        java.time.chrono.IsoEra isoEra59 = java.time.chrono.IsoEra.CE;
        boolean boolean60 = period58.equals((java.lang.Object) isoEra59);
        int int61 = period58.getMinutes();
        mutableDateTime44.add((org.joda.time.ReadablePeriod) period58);
        java.util.TimeZone timeZone64 = null;
        org.joda.time.DateTimeZone dateTimeZone65 = org.joda.time.DateTimeZone.forTimeZone(timeZone64);
        org.joda.time.DateMidnight dateMidnight66 = new org.joda.time.DateMidnight((long) 1970, dateTimeZone65);
        long long69 = dateTimeZone65.convertLocalToUTC((long) 3, false);
        long long72 = dateTimeZone65.convertLocalToUTC(0L, true);
        mutableDateTime44.setZoneRetainFields(dateTimeZone65);
        java.lang.String str74 = dateTimeZone65.toString();
        org.joda.time.chrono.EthiopicChronology ethiopicChronology75 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone65);
        org.joda.time.DateTimeField dateTimeField76 = ethiopicChronology75.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone77 = ethiopicChronology75.getZone();
        org.joda.time.DateTimeField dateTimeField78 = ethiopicChronology75.era();
        org.joda.time.DateTimeField dateTimeField79 = ethiopicChronology75.millisOfDay();
        org.joda.time.LocalTime localTime80 = org.joda.time.LocalTime.now((org.joda.time.Chronology) ethiopicChronology75);
        org.joda.time.DateTimeZone dateTimeZone81 = ethiopicChronology75.getZone();
        mutableDateTime6.setZone(dateTimeZone81);
        org.joda.time.MutableDateTime.Property property83 = mutableDateTime6.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField84 = property83.getField();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(timeOfDay11);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertNotNull(hours14);
        org.junit.Assert.assertNotNull(durationFieldType15);
        org.junit.Assert.assertNotNull(timeOfDay17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(mutableDateTime44);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertNotNull(period58);
        org.junit.Assert.assertTrue("'" + isoEra59 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra59.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone65);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 3L + "'", long69 == 3L);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 0L + "'", long72 == 0L);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "Etc/UTC" + "'", str74, "Etc/UTC");
        org.junit.Assert.assertNotNull(ethiopicChronology75);
        org.junit.Assert.assertNotNull(dateTimeField76);
        org.junit.Assert.assertNotNull(dateTimeZone77);
        org.junit.Assert.assertNotNull(dateTimeField78);
        org.junit.Assert.assertNotNull(dateTimeField79);
        org.junit.Assert.assertNotNull(localTime80);
        org.junit.Assert.assertNotNull(dateTimeZone81);
        org.junit.Assert.assertNotNull(property83);
        org.junit.Assert.assertNotNull(dateTimeField84);
    }

    @Test
    public void test5105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5105");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.now();
        java.time.temporal.ChronoField chronoField1 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime3 = localDateTime0.with((java.time.temporal.TemporalField) chronoField1, (long) 10);
        java.time.Duration duration5 = java.time.Duration.ofSeconds((long) 0);
        java.time.temporal.Temporal temporal6 = localDateTime0.minus((java.time.temporal.TemporalAmount) duration5);
        java.time.LocalDateTime localDateTime8 = localDateTime0.plusDays((long) 34595674);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertTrue("'" + chronoField1 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField1.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(temporal6);
        org.junit.Assert.assertNotNull(localDateTime8);
    }

    @Test
    public void test5106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5106");
        int[] intArray6 = new int[] { 3600000, 3600000, 256, 21, (byte) 100, (short) -1 };
        java.util.stream.IntStream intStream7 = java.util.stream.IntStream.of(intArray6);
        java.util.PrimitiveIterator.OfInt ofInt8 = intStream7.iterator();
        java.util.IntSummaryStatistics intSummaryStatistics9 = new java.util.IntSummaryStatistics();
        intSummaryStatistics9.accept(57);
        long long12 = intSummaryStatistics9.getSum();
        intSummaryStatistics9.accept(37);
        ofInt8.forEachRemaining((java.util.function.IntConsumer) intSummaryStatistics9);
        boolean boolean16 = ofInt8.hasNext();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[3600000, 3600000, 256, 21, 100, -1]");
        org.junit.Assert.assertNotNull(intStream7);
        org.junit.Assert.assertNotNull(ofInt8);
        org.junit.Assert.assertEquals(intSummaryStatistics9.toString(), "IntSummaryStatistics{count=8, sum=7200470, min=-1, average=900058.750000, max=3600000}");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 57L + "'", long12 == 57L);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test5107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5107");
        java.io.File file0 = null;
        java.io.File file2 = new java.io.File(file0, "1970-01-01T00:00:00.003Z");
        long long3 = file2.lastModified();
        boolean boolean5 = file2.setWritable(false);
        boolean boolean6 = file2.delete();
        java.net.URL uRL7 = file2.toURL();
        java.lang.String str8 = uRL7.getHost();
        org.junit.Assert.assertNull("file2.getParent() == null", file2.getParent());
        org.junit.Assert.assertEquals(file2.toString(), "1970-01-01T00:00:00.003Z");
// flaky:         org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1645436488000L + "'", long3 == 1645436488000L);
// flaky:         org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
// flaky:         org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(uRL7);
// flaky:         org.junit.Assert.assertEquals(uRL7.toString(), "file:/experiment/1970-01-01T00:00:00.003Z");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
    }

    @Test
    public void test5108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5108");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Duration duration2 = new org.joda.time.Duration(readableInstant0, readableInstant1);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = duration2.toPeriodTo(readableInstant3, periodType4);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.Duration duration8 = new org.joda.time.Duration(readableInstant6, readableInstant7);
        long long9 = duration8.getMillis();
        boolean boolean10 = duration2.isShorterThan((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) 3, chronology12);
        org.joda.time.DateTime.Property property14 = dateTime13.dayOfYear();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight((java.lang.Object) dateTime13, chronology15);
        org.joda.time.MutableDateTime mutableDateTime17 = dateTime13.toMutableDateTime();
        mutableDateTime17.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime17.dayOfWeek();
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime17.year();
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime17.weekyear();
        boolean boolean23 = duration2.equals((java.lang.Object) mutableDateTime17);
        mutableDateTime17.addMonths((int) ' ');
        mutableDateTime17.add((long) (byte) 10);
        org.joda.time.Period period28 = org.joda.time.Period.ZERO;
        org.joda.time.Period period29 = period28.normalizedStandard();
        org.joda.time.Period period31 = period28.plusHours(2);
        java.time.chrono.IsoEra isoEra32 = java.time.chrono.IsoEra.CE;
        boolean boolean33 = period31.equals((java.lang.Object) isoEra32);
        int int34 = period31.getMinutes();
        mutableDateTime17.add((org.joda.time.ReadablePeriod) period31);
        java.util.TimeZone timeZone37 = null;
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forTimeZone(timeZone37);
        org.joda.time.DateMidnight dateMidnight39 = new org.joda.time.DateMidnight((long) 1970, dateTimeZone38);
        long long42 = dateTimeZone38.convertLocalToUTC((long) 3, false);
        long long45 = dateTimeZone38.convertLocalToUTC(0L, true);
        mutableDateTime17.setZoneRetainFields(dateTimeZone38);
        java.lang.String str47 = dateTimeZone38.toString();
        org.joda.time.chrono.EthiopicChronology ethiopicChronology48 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone38);
        org.joda.time.DateTimeField dateTimeField49 = ethiopicChronology48.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone50 = ethiopicChronology48.getZone();
        org.joda.time.DateTimeField dateTimeField51 = ethiopicChronology48.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField52 = ethiopicChronology48.minuteOfDay();
        org.joda.time.LocalDate localDate53 = new org.joda.time.LocalDate();
        org.joda.time.Interval interval54 = localDate53.toInterval();
        int int55 = localDate53.getDayOfYear();
        java.util.TimeZone timeZone59 = null;
        org.joda.time.DateTimeZone dateTimeZone60 = org.joda.time.DateTimeZone.forTimeZone(timeZone59);
        org.joda.time.DateMidnight dateMidnight61 = new org.joda.time.DateMidnight((long) 1970, dateTimeZone60);
        org.joda.time.DateTime dateTime62 = new org.joda.time.DateTime((long) 3600000, dateTimeZone60);
        org.joda.time.DateTime dateTime63 = new org.joda.time.DateTime((long) 22, dateTimeZone60);
        org.joda.time.Interval interval64 = localDate53.toInterval(dateTimeZone60);
        org.joda.time.Chronology chronology65 = ethiopicChronology48.withZone(dateTimeZone60);
        org.joda.time.DateTimeField dateTimeField66 = ethiopicChronology48.weekyear();
        org.joda.time.Weeks weeks67 = org.joda.time.Weeks.ONE;
        java.util.concurrent.TimeUnit timeUnit68 = java.util.concurrent.TimeUnit.NANOSECONDS;
        boolean boolean69 = weeks67.equals((java.lang.Object) timeUnit68);
        org.joda.time.MutablePeriod mutablePeriod70 = weeks67.toMutablePeriod();
        int int71 = mutablePeriod70.getSeconds();
        mutablePeriod70.addHours((int) 'a');
        mutablePeriod70.addMillis((int) '#');
        mutablePeriod70.addDays(4);
        mutablePeriod70.addYears((int) 'a');
        int[] intArray81 = ethiopicChronology48.get((org.joda.time.ReadablePeriod) mutablePeriod70, 1644481495L);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertTrue("'" + isoEra32 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra32.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 3L + "'", long42 == 3L);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Etc/UTC" + "'", str47, "Etc/UTC");
        org.junit.Assert.assertNotNull(ethiopicChronology48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 52 + "'", int55 == 52);
        org.junit.Assert.assertNotNull(dateTimeZone60);
        org.junit.Assert.assertNotNull(interval64);
        org.junit.Assert.assertNotNull(chronology65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(weeks67);
        org.junit.Assert.assertNotNull(timeUnit68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(mutablePeriod70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[0, 0, 2, 5, 0, 48, 1, 495]");
    }

    @Test
    public void test5109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5109");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        int int1 = localDate0.getCenturyOfEra();
        org.joda.time.LocalDate.Property property2 = localDate0.dayOfWeek();
        org.joda.time.LocalDate localDate4 = property2.addToCopy(7);
        org.joda.time.LocalDate localDate5 = property2.roundCeilingCopy();
        org.joda.time.LocalDate localDate6 = property2.roundHalfFloorCopy();
        org.joda.time.DurationField durationField7 = property2.getRangeDurationField();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate9 = property2.setCopy((int) (short) 10);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 10 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 20 + "'", int1 == 20);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(durationField7);
    }

    @Test
    public void test5110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5110");
        java.util.GregorianCalendar gregorianCalendar5 = new java.util.GregorianCalendar(12, 4096, 7, (-1), (int) (short) 10);
        int int6 = gregorianCalendar5.getWeeksInWeekYear();
        java.util.TimeZone timeZone7 = gregorianCalendar5.getTimeZone();
        java.lang.String str8 = timeZone7.getID();
        java.util.TimeZone.setDefault(timeZone7);
        int int10 = timeZone7.getDSTSavings();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 52 + "'", int6 == 52);
        org.junit.Assert.assertNotNull(timeZone7);
// flaky:         org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Etc/UTC" + "'", str8, "Etc/UTC");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test5111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5111");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        int int2 = localDateTime1.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusDays(28);
        org.joda.time.LocalDateTime.Property property5 = localDateTime1.weekyear();
        org.joda.time.DurationField durationField6 = property5.getRangeDurationField();
        int int7 = property5.getMinimumValueOverall();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNull(durationField6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-292275054) + "'", int7 == (-292275054));
    }

    @Test
    public void test5112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5112");
        java.util.Locale locale0 = java.util.Locale.TAIWAN;
        java.util.Locale locale1 = java.util.Locale.ROOT;
        java.lang.String str2 = locale0.getDisplayName(locale1);
        java.time.LocalTime localTime7 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime8 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime7);
        java.time.temporal.ChronoField chronoField9 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime11 = localTime7.with((java.time.temporal.TemporalField) chronoField9, (long) (short) 1);
        java.util.Locale locale12 = java.util.Locale.GERMANY;
        java.lang.String str13 = chronoField9.getDisplayName(locale12);
        java.lang.String str14 = locale1.getDisplayVariant(locale12);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Chinese (Taiwan)" + "'", str2, "Chinese (Taiwan)");
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertTrue("'" + chronoField9 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField9.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "NanoOfDay" + "'", str13, "NanoOfDay");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
    }

    @Test
    public void test5113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5113");
        org.joda.time.Period period2 = org.joda.time.Period.ZERO;
        org.joda.time.Period period3 = period2.normalizedStandard();
        org.joda.time.Period period5 = period3.minusMinutes((int) ' ');
        org.joda.time.Period period7 = period5.minusMonths((int) (byte) 0);
        org.joda.time.PeriodType periodType8 = period7.getPeriodType();
        org.joda.time.PeriodType periodType9 = periodType8.withYearsRemoved();
        org.joda.time.PeriodType periodType10 = periodType8.withSecondsRemoved();
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.Duration duration13 = new org.joda.time.Duration(readableInstant11, readableInstant12);
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.PeriodType periodType15 = null;
        org.joda.time.Period period16 = duration13.toPeriodTo(readableInstant14, periodType15);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.Duration duration19 = new org.joda.time.Duration(readableInstant17, readableInstant18);
        long long20 = duration19.getMillis();
        boolean boolean21 = duration13.isShorterThan((org.joda.time.ReadableDuration) duration19);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((long) 3, chronology23);
        org.joda.time.DateTime.Property property25 = dateTime24.dayOfYear();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight((java.lang.Object) dateTime24, chronology26);
        org.joda.time.MutableDateTime mutableDateTime28 = dateTime24.toMutableDateTime();
        mutableDateTime28.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property31 = mutableDateTime28.dayOfWeek();
        org.joda.time.MutableDateTime.Property property32 = mutableDateTime28.year();
        org.joda.time.MutableDateTime.Property property33 = mutableDateTime28.weekyear();
        boolean boolean34 = duration13.equals((java.lang.Object) mutableDateTime28);
        mutableDateTime28.addMonths((int) ' ');
        mutableDateTime28.add((long) (byte) 10);
        org.joda.time.Period period39 = org.joda.time.Period.ZERO;
        org.joda.time.Period period40 = period39.normalizedStandard();
        org.joda.time.Period period42 = period39.plusHours(2);
        java.time.chrono.IsoEra isoEra43 = java.time.chrono.IsoEra.CE;
        boolean boolean44 = period42.equals((java.lang.Object) isoEra43);
        int int45 = period42.getMinutes();
        mutableDateTime28.add((org.joda.time.ReadablePeriod) period42);
        java.util.TimeZone timeZone48 = null;
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.forTimeZone(timeZone48);
        org.joda.time.DateMidnight dateMidnight50 = new org.joda.time.DateMidnight((long) 1970, dateTimeZone49);
        long long53 = dateTimeZone49.convertLocalToUTC((long) 3, false);
        long long56 = dateTimeZone49.convertLocalToUTC(0L, true);
        mutableDateTime28.setZoneRetainFields(dateTimeZone49);
        java.lang.String str58 = dateTimeZone49.toString();
        org.joda.time.chrono.EthiopicChronology ethiopicChronology59 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone49);
        org.joda.time.DateTimeField dateTimeField60 = ethiopicChronology59.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone61 = ethiopicChronology59.getZone();
        org.joda.time.DurationField durationField62 = ethiopicChronology59.halfdays();
        org.joda.time.DurationField durationField63 = ethiopicChronology59.years();
        org.joda.time.Chronology chronology64 = ethiopicChronology59.withUTC();
        org.joda.time.Period period65 = new org.joda.time.Period(0L, 34465512000000L, periodType10, (org.joda.time.Chronology) ethiopicChronology59);
        org.joda.time.DurationField durationField66 = ethiopicChronology59.centuries();
        org.junit.Assert.assertNotNull(period2);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(mutableDateTime28);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertTrue("'" + isoEra43 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra43.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 3L + "'", long53 == 3L);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 0L + "'", long56 == 0L);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "Etc/UTC" + "'", str58, "Etc/UTC");
        org.junit.Assert.assertNotNull(ethiopicChronology59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(dateTimeZone61);
        org.junit.Assert.assertNotNull(durationField62);
        org.junit.Assert.assertNotNull(durationField63);
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertNotNull(durationField66);
    }

    @Test
    public void test5114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5114");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect(10800000);
        java.nio.Buffer buffer2 = byteBuffer1.rewind();
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.Duration duration5 = new org.joda.time.Duration(readableInstant3, readableInstant4);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.PeriodType periodType7 = null;
        org.joda.time.Period period8 = duration5.toPeriodTo(readableInstant6, periodType7);
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Duration duration11 = new org.joda.time.Duration(readableInstant9, readableInstant10);
        long long12 = duration11.getMillis();
        boolean boolean13 = duration5.isShorterThan((org.joda.time.ReadableDuration) duration11);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) 3, chronology15);
        org.joda.time.DateTime.Property property17 = dateTime16.dayOfYear();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight((java.lang.Object) dateTime16, chronology18);
        org.joda.time.MutableDateTime mutableDateTime20 = dateTime16.toMutableDateTime();
        mutableDateTime20.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime20.dayOfWeek();
        org.joda.time.MutableDateTime.Property property24 = mutableDateTime20.year();
        org.joda.time.MutableDateTime.Property property25 = mutableDateTime20.weekyear();
        boolean boolean26 = duration5.equals((java.lang.Object) mutableDateTime20);
        mutableDateTime20.addMonths((int) ' ');
        mutableDateTime20.add((long) (byte) 10);
        org.joda.time.Period period31 = org.joda.time.Period.ZERO;
        org.joda.time.Period period32 = period31.normalizedStandard();
        org.joda.time.Period period34 = period31.plusHours(2);
        java.time.chrono.IsoEra isoEra35 = java.time.chrono.IsoEra.CE;
        boolean boolean36 = period34.equals((java.lang.Object) isoEra35);
        int int37 = period34.getMinutes();
        mutableDateTime20.add((org.joda.time.ReadablePeriod) period34);
        java.util.TimeZone timeZone40 = null;
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forTimeZone(timeZone40);
        org.joda.time.DateMidnight dateMidnight42 = new org.joda.time.DateMidnight((long) 1970, dateTimeZone41);
        long long45 = dateTimeZone41.convertLocalToUTC((long) 3, false);
        long long48 = dateTimeZone41.convertLocalToUTC(0L, true);
        mutableDateTime20.setZoneRetainFields(dateTimeZone41);
        java.lang.String str50 = dateTimeZone41.toString();
        org.joda.time.chrono.EthiopicChronology ethiopicChronology51 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone41);
        org.joda.time.DateTimeField dateTimeField52 = ethiopicChronology51.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone53 = ethiopicChronology51.getZone();
        org.joda.time.DurationField durationField54 = ethiopicChronology51.halfdays();
        org.joda.time.DurationField durationField55 = ethiopicChronology51.years();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay56 = new org.joda.time.YearMonthDay((java.lang.Object) byteBuffer1, (org.joda.time.Chronology) ethiopicChronology51);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: java.nio.DirectByteBuffer");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(buffer2);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertTrue("'" + isoEra35 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra35.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 3L + "'", long45 == 3L);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "Etc/UTC" + "'", str50, "Etc/UTC");
        org.junit.Assert.assertNotNull(ethiopicChronology51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertNotNull(durationField54);
        org.junit.Assert.assertNotNull(durationField55);
    }

    @Test
    public void test5115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5115");
        org.joda.time.Weeks weeks1 = org.joda.time.Weeks.weeks(28);
        org.joda.time.Weeks weeks3 = org.joda.time.Weeks.weeks(28);
        org.joda.time.Weeks weeks4 = weeks1.minus(weeks3);
        org.joda.time.Duration duration5 = weeks1.toStandardDuration();
        org.junit.Assert.assertNotNull(weeks1);
        org.junit.Assert.assertNotNull(weeks3);
        org.junit.Assert.assertNotNull(weeks4);
        org.junit.Assert.assertNotNull(duration5);
    }

    @Test
    public void test5116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5116");
        java.util.LongSummaryStatistics longSummaryStatistics0 = new java.util.LongSummaryStatistics();
        longSummaryStatistics0.accept(3);
        long long3 = longSummaryStatistics0.getMax();
        longSummaryStatistics0.accept(736);
        org.junit.Assert.assertEquals(longSummaryStatistics0.toString(), "LongSummaryStatistics{count=2, sum=739, min=3, average=369.500000, max=736}");
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 3L + "'", long3 == 3L);
    }

    @Test
    public void test5117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5117");
        java.util.stream.Stream.Builder<java.io.OutputStream> outputStreamBuilder0 = java.util.stream.Stream.builder();
        java.util.stream.Stream.Builder<java.io.OutputStream> outputStreamBuilder1 = java.util.stream.Stream.builder();
        java.util.function.Consumer<java.io.OutputStream> outputStreamConsumer2 = outputStreamBuilder0.andThen((java.util.function.Consumer<java.io.OutputStream>) outputStreamBuilder1);
        java.io.PrintStream printStream4 = new java.io.PrintStream("subject:\n (GERMAN)");
        java.util.stream.Stream.Builder<java.io.OutputStream> outputStreamBuilder5 = outputStreamBuilder1.add((java.io.OutputStream) printStream4);
        java.io.PrintWriter printWriter6 = new java.io.PrintWriter((java.io.OutputStream) printStream4);
        java.io.PrintWriter printWriter7 = new java.io.PrintWriter((java.io.Writer) printWriter6);
        java.lang.Object[] objArray9 = null;
        java.io.PrintWriter printWriter10 = printWriter7.format("2022-02-21T09:36:33.559Z", objArray9);
        java.util.stream.Stream.Builder<java.io.OutputStream> outputStreamBuilder11 = java.util.stream.Stream.builder();
        java.util.stream.Stream.Builder<java.io.OutputStream> outputStreamBuilder12 = java.util.stream.Stream.builder();
        java.util.function.Consumer<java.io.OutputStream> outputStreamConsumer13 = outputStreamBuilder11.andThen((java.util.function.Consumer<java.io.OutputStream>) outputStreamBuilder12);
        java.io.PrintStream printStream15 = new java.io.PrintStream("subject:\n (GERMAN)");
        java.util.stream.Stream.Builder<java.io.OutputStream> outputStreamBuilder16 = outputStreamBuilder12.add((java.io.OutputStream) printStream15);
        java.io.PrintWriter printWriter17 = new java.io.PrintWriter((java.io.OutputStream) printStream15);
        java.time.format.DateTimeFormatter dateTimeFormatter18 = java.time.format.DateTimeFormatter.ISO_DATE;
        java.text.Format format19 = dateTimeFormatter18.toFormat();
        java.time.LocalDateTime localDateTime20 = java.time.LocalDateTime.now();
        java.time.LocalDateTime localDateTime22 = localDateTime20.minusYears((long) (byte) 10);
        int int23 = localDateTime20.getHour();
        java.lang.String str24 = dateTimeFormatter18.format((java.time.temporal.TemporalAccessor) localDateTime20);
        java.nio.CharBuffer charBuffer26 = java.nio.CharBuffer.wrap((java.lang.CharSequence) "German");
        java.text.ParsePosition parsePosition28 = new java.text.ParsePosition((-624));
        java.time.temporal.TemporalAccessor temporalAccessor29 = dateTimeFormatter18.parseUnresolved((java.lang.CharSequence) charBuffer26, parsePosition28);
        char[] charArray36 = new char[] { '#', '/', '4', 'a', '4', 'u' };
        java.nio.CharBuffer charBuffer37 = java.nio.CharBuffer.wrap(charArray36);
        java.nio.CharBuffer charBuffer38 = java.nio.CharBuffer.wrap(charArray36);
        java.nio.CharBuffer charBuffer39 = charBuffer26.get(charArray36);
        printWriter17.write(charArray36);
        printWriter10.println(charArray36);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.CharBuffer charBuffer44 = java.nio.CharBuffer.wrap(charArray36, 1, (-1299));
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(outputStreamBuilder0);
        org.junit.Assert.assertNotNull(outputStreamBuilder1);
        org.junit.Assert.assertNotNull(outputStreamConsumer2);
        org.junit.Assert.assertNotNull(outputStreamBuilder5);
        org.junit.Assert.assertNotNull(printWriter10);
        org.junit.Assert.assertNotNull(outputStreamBuilder11);
        org.junit.Assert.assertNotNull(outputStreamBuilder12);
        org.junit.Assert.assertNotNull(outputStreamConsumer13);
        org.junit.Assert.assertNotNull(outputStreamBuilder16);
        org.junit.Assert.assertNotNull(dateTimeFormatter18);
        org.junit.Assert.assertNotNull(format19);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 9 + "'", int23 == 9);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "2022-02-21" + "'", str24, "2022-02-21");
        org.junit.Assert.assertNotNull(charBuffer26);
        org.junit.Assert.assertNull(temporalAccessor29);
        org.junit.Assert.assertNotNull(charArray36);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray36), "German");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray36), "German");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray36), "[G, e, r, m, a, n]");
        org.junit.Assert.assertNotNull(charBuffer37);
        org.junit.Assert.assertNotNull(charBuffer38);
        org.junit.Assert.assertNotNull(charBuffer39);
    }

    @Test
    public void test5118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5118");
        java.util.GregorianCalendar gregorianCalendar5 = new java.util.GregorianCalendar(12, 4096, 7, (-1), (int) (short) 10);
        int int6 = gregorianCalendar5.getWeeksInWeekYear();
        java.lang.String str7 = gregorianCalendar5.getCalendarType();
        java.time.ZonedDateTime zonedDateTime8 = gregorianCalendar5.toZonedDateTime();
        java.time.ZonedDateTime zonedDateTime10 = zonedDateTime8.minusMonths((long) 10);
        java.time.chrono.ChronoZonedDateTime<java.time.LocalDate> localDateChronoZonedDateTime11 = zonedDateTime8.withEarlierOffsetAtOverlap();
        int int12 = zonedDateTime8.getDayOfYear();
        java.time.ZonedDateTime zonedDateTime14 = zonedDateTime8.withMinute(34);
        java.time.ZonedDateTime zonedDateTime16 = zonedDateTime14.plusSeconds(0L);
        java.time.chrono.Chronology chronology17 = zonedDateTime14.getChronology();
        java.time.ZonedDateTime zonedDateTime19 = zonedDateTime14.minusSeconds((long) 83400);
        java.time.ZonedDateTime zonedDateTime21 = zonedDateTime19.minusWeeks((long) 86);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 52 + "'", int6 == 52);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "gregory" + "'", str7, "gregory");
        org.junit.Assert.assertNotNull(zonedDateTime8);
        org.junit.Assert.assertNotNull(zonedDateTime10);
        org.junit.Assert.assertNotNull(localDateChronoZonedDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 127 + "'", int12 == 127);
        org.junit.Assert.assertNotNull(zonedDateTime14);
        org.junit.Assert.assertNotNull(zonedDateTime16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(zonedDateTime19);
        org.junit.Assert.assertNotNull(zonedDateTime21);
    }

    @Test
    public void test5119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5119");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Duration duration2 = new org.joda.time.Duration(readableInstant0, readableInstant1);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = duration2.toPeriodTo(readableInstant3, periodType4);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.Duration duration8 = new org.joda.time.Duration(readableInstant6, readableInstant7);
        long long9 = duration8.getMillis();
        boolean boolean10 = duration2.isShorterThan((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) 3, chronology12);
        org.joda.time.DateTime.Property property14 = dateTime13.dayOfYear();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight((java.lang.Object) dateTime13, chronology15);
        org.joda.time.MutableDateTime mutableDateTime17 = dateTime13.toMutableDateTime();
        mutableDateTime17.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime17.dayOfWeek();
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime17.year();
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime17.weekyear();
        boolean boolean23 = duration2.equals((java.lang.Object) mutableDateTime17);
        mutableDateTime17.addMonths((int) ' ');
        mutableDateTime17.add((long) (byte) 10);
        org.joda.time.Period period28 = org.joda.time.Period.ZERO;
        org.joda.time.Period period29 = period28.normalizedStandard();
        org.joda.time.Period period31 = period28.plusHours(2);
        java.time.chrono.IsoEra isoEra32 = java.time.chrono.IsoEra.CE;
        boolean boolean33 = period31.equals((java.lang.Object) isoEra32);
        int int34 = period31.getMinutes();
        mutableDateTime17.add((org.joda.time.ReadablePeriod) period31);
        java.util.TimeZone timeZone37 = null;
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forTimeZone(timeZone37);
        org.joda.time.DateMidnight dateMidnight39 = new org.joda.time.DateMidnight((long) 1970, dateTimeZone38);
        long long42 = dateTimeZone38.convertLocalToUTC((long) 3, false);
        long long45 = dateTimeZone38.convertLocalToUTC(0L, true);
        mutableDateTime17.setZoneRetainFields(dateTimeZone38);
        java.lang.String str47 = dateTimeZone38.toString();
        org.joda.time.chrono.EthiopicChronology ethiopicChronology48 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone38);
        org.joda.time.DateTimeField dateTimeField49 = ethiopicChronology48.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone50 = ethiopicChronology48.getZone();
        org.joda.time.DateTimeField dateTimeField51 = ethiopicChronology48.era();
        org.joda.time.DateTimeField dateTimeField52 = ethiopicChronology48.millisOfDay();
        org.joda.time.DurationField durationField53 = ethiopicChronology48.halfdays();
        org.joda.time.DurationField durationField54 = ethiopicChronology48.centuries();
        java.lang.String str55 = ethiopicChronology48.toString();
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertTrue("'" + isoEra32 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra32.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 3L + "'", long42 == 3L);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Etc/UTC" + "'", str47, "Etc/UTC");
        org.junit.Assert.assertNotNull(ethiopicChronology48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(durationField53);
        org.junit.Assert.assertNotNull(durationField54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "EthiopicChronology[Etc/UTC]" + "'", str55, "EthiopicChronology[Etc/UTC]");
    }

    @Test
    public void test5120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5120");
        java.security.AccessControlException accessControlException1 = new java.security.AccessControlException("java.nio.DirectByteBufferR[pos=0 lim=10800000 cap=10800000]");
        java.security.Permission permission2 = accessControlException1.getPermission();
        java.security.Permission permission3 = accessControlException1.getPermission();
        java.security.SignatureException signatureException4 = new java.security.SignatureException((java.lang.Throwable) accessControlException1);
        java.security.Permission permission5 = accessControlException1.getPermission();
        org.junit.Assert.assertNull(permission2);
        org.junit.Assert.assertNull(permission3);
        org.junit.Assert.assertNull(permission5);
    }

    @Test
    public void test5121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5121");
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.Duration duration3 = new org.joda.time.Duration(readableInstant1, readableInstant2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.PeriodType periodType5 = null;
        org.joda.time.Period period6 = duration3.toPeriodTo(readableInstant4, periodType5);
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.Duration duration9 = new org.joda.time.Duration(readableInstant7, readableInstant8);
        long long10 = duration9.getMillis();
        boolean boolean11 = duration3.isShorterThan((org.joda.time.ReadableDuration) duration9);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) 3, chronology13);
        org.joda.time.DateTime.Property property15 = dateTime14.dayOfYear();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight((java.lang.Object) dateTime14, chronology16);
        org.joda.time.MutableDateTime mutableDateTime18 = dateTime14.toMutableDateTime();
        mutableDateTime18.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime18.dayOfWeek();
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime18.year();
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime18.weekyear();
        boolean boolean24 = duration3.equals((java.lang.Object) mutableDateTime18);
        mutableDateTime18.addMonths((int) ' ');
        mutableDateTime18.add((long) (byte) 10);
        org.joda.time.Period period29 = org.joda.time.Period.ZERO;
        org.joda.time.Period period30 = period29.normalizedStandard();
        org.joda.time.Period period32 = period29.plusHours(2);
        java.time.chrono.IsoEra isoEra33 = java.time.chrono.IsoEra.CE;
        boolean boolean34 = period32.equals((java.lang.Object) isoEra33);
        int int35 = period32.getMinutes();
        mutableDateTime18.add((org.joda.time.ReadablePeriod) period32);
        java.util.TimeZone timeZone38 = null;
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forTimeZone(timeZone38);
        org.joda.time.DateMidnight dateMidnight40 = new org.joda.time.DateMidnight((long) 1970, dateTimeZone39);
        long long43 = dateTimeZone39.convertLocalToUTC((long) 3, false);
        long long46 = dateTimeZone39.convertLocalToUTC(0L, true);
        mutableDateTime18.setZoneRetainFields(dateTimeZone39);
        java.lang.String str48 = dateTimeZone39.toString();
        org.joda.time.chrono.EthiopicChronology ethiopicChronology49 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone39);
        org.joda.time.DateTimeField dateTimeField50 = ethiopicChronology49.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone51 = ethiopicChronology49.getZone();
        org.joda.time.YearMonthDay yearMonthDay52 = new org.joda.time.YearMonthDay((long) (short) 100, (org.joda.time.Chronology) ethiopicChronology49);
        org.joda.time.YearMonthDay.Property property53 = yearMonthDay52.year();
        org.joda.time.ReadablePartial readablePartial54 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Days days55 = org.joda.time.Days.daysBetween((org.joda.time.ReadablePartial) yearMonthDay52, readablePartial54);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: ReadablePartial objects must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertTrue("'" + isoEra33 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra33.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 3L + "'", long43 == 3L);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Etc/UTC" + "'", str48, "Etc/UTC");
        org.junit.Assert.assertNotNull(ethiopicChronology49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertNotNull(property53);
    }

    @Test
    public void test5122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5122");
        double[] doubleArray4 = new double[] { (byte) 0, 59, 83400000000000L, '4' };
        java.util.stream.DoubleStream doubleStream5 = java.util.stream.DoubleStream.of(doubleArray4);
        java.nio.DoubleBuffer doubleBuffer6 = java.nio.DoubleBuffer.wrap(doubleArray4);
        double[] doubleArray11 = new double[] { (byte) 0, 59, 83400000000000L, '4' };
        java.util.stream.DoubleStream doubleStream12 = java.util.stream.DoubleStream.of(doubleArray11);
        java.nio.DoubleBuffer doubleBuffer13 = java.nio.DoubleBuffer.wrap(doubleArray11);
        java.nio.DoubleBuffer doubleBuffer14 = doubleBuffer6.put(doubleBuffer13);
        java.lang.String str15 = doubleBuffer14.toString();
        double[] doubleArray20 = new double[] { (byte) 0, 59, 83400000000000L, '4' };
        java.util.stream.DoubleStream doubleStream21 = java.util.stream.DoubleStream.of(doubleArray20);
        java.nio.DoubleBuffer doubleBuffer22 = java.nio.DoubleBuffer.wrap(doubleArray20);
        double[] doubleArray27 = new double[] { (byte) 0, 59, 83400000000000L, '4' };
        java.util.stream.DoubleStream doubleStream28 = java.util.stream.DoubleStream.of(doubleArray27);
        java.nio.DoubleBuffer doubleBuffer29 = java.nio.DoubleBuffer.wrap(doubleArray27);
        java.nio.DoubleBuffer doubleBuffer30 = doubleBuffer22.put(doubleBuffer29);
        java.nio.DoubleBuffer doubleBuffer31 = doubleBuffer14.put(doubleBuffer30);
        double[] doubleArray32 = doubleBuffer31.array();
        // The following exception was thrown during execution in test generation
        try {
            java.nio.DoubleBuffer doubleBuffer35 = java.nio.DoubleBuffer.wrap(doubleArray32, (int) 'a', 3600000);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[0.0, 59.0, 8.34E13, 52.0]");
        org.junit.Assert.assertNotNull(doubleStream5);
        org.junit.Assert.assertNotNull(doubleBuffer6);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0, 59.0, 8.34E13, 52.0]");
        org.junit.Assert.assertNotNull(doubleStream12);
        org.junit.Assert.assertNotNull(doubleBuffer13);
        org.junit.Assert.assertNotNull(doubleBuffer14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "java.nio.HeapDoubleBuffer[pos=4 lim=4 cap=4]" + "'", str15, "java.nio.HeapDoubleBuffer[pos=4 lim=4 cap=4]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[0.0, 59.0, 8.34E13, 52.0]");
        org.junit.Assert.assertNotNull(doubleStream21);
        org.junit.Assert.assertNotNull(doubleBuffer22);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[0.0, 59.0, 8.34E13, 52.0]");
        org.junit.Assert.assertNotNull(doubleStream28);
        org.junit.Assert.assertNotNull(doubleBuffer29);
        org.junit.Assert.assertNotNull(doubleBuffer30);
        org.junit.Assert.assertNotNull(doubleBuffer31);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[0.0, 59.0, 8.34E13, 52.0]");
    }

    @Test
    public void test5123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5123");
        org.joda.time.Period period8 = org.joda.time.Period.ZERO;
        org.joda.time.Period period9 = period8.normalizedStandard();
        org.joda.time.Period period11 = period9.minusMinutes((int) ' ');
        org.joda.time.Period period13 = period11.minusMonths((int) (byte) 0);
        org.joda.time.PeriodType periodType14 = period11.getPeriodType();
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod(292269054, (int) ':', (int) (short) 10, (int) ':', 9, (int) 'a', 57, 2097, periodType14);
        mutablePeriod15.addMonths((-1));
        mutablePeriod15.setHours(17480);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(periodType14);
    }

    @Test
    public void test5124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5124");
        java.util.GregorianCalendar gregorianCalendar5 = new java.util.GregorianCalendar(12, 4096, 7, (-1), (int) (short) 10);
        int int6 = gregorianCalendar5.getWeeksInWeekYear();
        org.joda.time.YearMonthDay yearMonthDay7 = org.joda.time.YearMonthDay.fromCalendarFields((java.util.Calendar) gregorianCalendar5);
        org.joda.time.YearMonthDay yearMonthDay9 = yearMonthDay7.withYear(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.YearMonthDay yearMonthDay12 = yearMonthDay7.withField(dateTimeFieldType10, (-46800000));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 52 + "'", int6 == 52);
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(yearMonthDay12);
    }

    @Test
    public void test5125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5125");
        java.util.Locale locale0 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str1 = locale0.getScript();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
    }

    @Test
    public void test5126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5126");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 3, chronology1);
        org.joda.time.DateTime.Property property3 = dateTime2.dayOfYear();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight((java.lang.Object) dateTime2, chronology4);
        org.joda.time.MutableDateTime mutableDateTime6 = dateTime2.toMutableDateTime();
        mutableDateTime6.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime6.dayOfWeek();
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.Duration duration12 = new org.joda.time.Duration(readableInstant10, readableInstant11);
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.PeriodType periodType14 = null;
        org.joda.time.Period period15 = duration12.toPeriodTo(readableInstant13, periodType14);
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.Duration duration18 = new org.joda.time.Duration(readableInstant16, readableInstant17);
        long long19 = duration18.getMillis();
        boolean boolean20 = duration12.isShorterThan((org.joda.time.ReadableDuration) duration18);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) 3, chronology22);
        org.joda.time.DateTime.Property property24 = dateTime23.dayOfYear();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight((java.lang.Object) dateTime23, chronology25);
        org.joda.time.MutableDateTime mutableDateTime27 = dateTime23.toMutableDateTime();
        mutableDateTime27.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property30 = mutableDateTime27.dayOfWeek();
        org.joda.time.MutableDateTime.Property property31 = mutableDateTime27.year();
        org.joda.time.MutableDateTime.Property property32 = mutableDateTime27.weekyear();
        boolean boolean33 = duration12.equals((java.lang.Object) mutableDateTime27);
        mutableDateTime27.addMonths((int) ' ');
        mutableDateTime27.add((long) (byte) 10);
        org.joda.time.Period period38 = org.joda.time.Period.ZERO;
        org.joda.time.Period period39 = period38.normalizedStandard();
        org.joda.time.Period period41 = period38.plusHours(2);
        java.time.chrono.IsoEra isoEra42 = java.time.chrono.IsoEra.CE;
        boolean boolean43 = period41.equals((java.lang.Object) isoEra42);
        int int44 = period41.getMinutes();
        mutableDateTime27.add((org.joda.time.ReadablePeriod) period41);
        java.util.TimeZone timeZone47 = null;
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.forTimeZone(timeZone47);
        org.joda.time.DateMidnight dateMidnight49 = new org.joda.time.DateMidnight((long) 1970, dateTimeZone48);
        long long52 = dateTimeZone48.convertLocalToUTC((long) 3, false);
        long long55 = dateTimeZone48.convertLocalToUTC(0L, true);
        mutableDateTime27.setZoneRetainFields(dateTimeZone48);
        java.lang.String str57 = dateTimeZone48.toString();
        org.joda.time.chrono.EthiopicChronology ethiopicChronology58 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone48);
        org.joda.time.DateTimeField dateTimeField59 = ethiopicChronology58.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone60 = ethiopicChronology58.getZone();
        org.joda.time.DateTimeField dateTimeField61 = ethiopicChronology58.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField62 = ethiopicChronology58.minuteOfDay();
        org.joda.time.Chronology chronology63 = ethiopicChronology58.withUTC();
        mutableDateTime6.setChronology(chronology63);
        org.joda.time.DurationField durationField65 = chronology63.halfdays();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(mutableDateTime27);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertTrue("'" + isoEra42 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra42.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 3L + "'", long52 == 3L);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 0L + "'", long55 == 0L);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "Etc/UTC" + "'", str57, "Etc/UTC");
        org.junit.Assert.assertNotNull(ethiopicChronology58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(dateTimeZone60);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertNotNull(durationField65);
    }

    @Test
    public void test5127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5127");
        java.io.File file0 = null;
        java.io.File file2 = new java.io.File(file0, "1970-01-01T00:00:00.003Z");
        java.net.URL uRL3 = file2.toURL();
        boolean boolean4 = file2.canRead();
        boolean boolean6 = file2.setExecutable(false);
        long long7 = file2.getTotalSpace();
        java.io.PrintWriter printWriter8 = new java.io.PrintWriter(file2);
        long long9 = file2.length();
        org.junit.Assert.assertNull("file2.getParent() == null", file2.getParent());
        org.junit.Assert.assertEquals(file2.toString(), "1970-01-01T00:00:00.003Z");
        org.junit.Assert.assertNotNull(uRL3);
// flaky:         org.junit.Assert.assertEquals(uRL3.toString(), "file:/experiment/1970-01-01T00:00:00.003Z");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
    }

    @Test
    public void test5128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5128");
        java.time.OffsetDateTime offsetDateTime0 = java.time.OffsetDateTime.now();
        int int1 = offsetDateTime0.getDayOfMonth();
        java.time.OffsetDateTime offsetDateTime3 = offsetDateTime0.withMinute((int) (byte) 10);
        int int4 = offsetDateTime0.getYear();
        java.time.OffsetDateTime offsetDateTime5 = java.time.OffsetDateTime.from((java.time.temporal.TemporalAccessor) offsetDateTime0);
        java.time.OffsetDateTime offsetDateTime7 = offsetDateTime5.plusWeeks((long) 292269054);
        java.time.format.DateTimeFormatter dateTimeFormatter8 = java.time.format.DateTimeFormatter.ISO_DATE;
        java.lang.String str9 = dateTimeFormatter8.toString();
        java.time.LocalDateTime localDateTime10 = java.time.LocalDateTime.now();
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery11 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period12 = localDateTime10.query(periodTemporalQuery11);
        java.text.Format format13 = dateTimeFormatter8.toFormat(periodTemporalQuery11);
        java.time.chrono.Chronology chronology14 = dateTimeFormatter8.getChronology();
        java.time.format.DateTimeFormatter dateTimeFormatter15 = java.time.format.DateTimeFormatter.ISO_DATE;
        java.lang.String str16 = dateTimeFormatter15.toString();
        java.time.LocalDateTime localDateTime17 = java.time.LocalDateTime.now();
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery18 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period19 = localDateTime17.query(periodTemporalQuery18);
        java.text.Format format20 = dateTimeFormatter15.toFormat(periodTemporalQuery18);
        java.time.chrono.Chronology chronology21 = dateTimeFormatter15.getChronology();
        int int22 = chronology14.compareTo(chronology21);
        java.util.List<java.time.chrono.Era> eraList23 = chronology21.eras();
        java.time.ZoneOffset zoneOffset26 = java.time.ZoneOffset.ofHoursMinutes(1, 10);
        java.time.LocalDate localDate27 = java.time.LocalDate.now((java.time.ZoneId) zoneOffset26);
        java.time.Clock clock28 = java.time.Clock.system((java.time.ZoneId) zoneOffset26);
        java.time.ZoneOffset zoneOffset31 = java.time.ZoneOffset.ofHoursMinutes(1, 10);
        java.time.LocalDate localDate32 = java.time.LocalDate.now((java.time.ZoneId) zoneOffset31);
        java.time.Clock clock33 = java.time.Clock.system((java.time.ZoneId) zoneOffset31);
        int int34 = zoneOffset26.compareTo(zoneOffset31);
        java.time.chrono.ChronoLocalDate chronoLocalDate35 = chronology21.dateNow((java.time.ZoneId) zoneOffset31);
        java.time.chrono.IsoEra isoEra36 = java.time.chrono.IsoEra.CE;
        int int37 = isoEra36.getValue();
        int int38 = isoEra36.getValue();
        int int40 = chronology21.prolepticYear((java.time.chrono.Era) isoEra36, 0);
        java.util.GregorianCalendar gregorianCalendar46 = new java.util.GregorianCalendar(12, 4096, 7, (-1), (int) (short) 10);
        int int47 = gregorianCalendar46.getWeeksInWeekYear();
        java.util.TimeZone timeZone48 = gregorianCalendar46.getTimeZone();
        java.util.Locale locale50 = new java.util.Locale("hi!");
        java.util.Calendar calendar51 = java.util.Calendar.getInstance(timeZone48, locale50);
        java.time.Instant instant52 = calendar51.toInstant();
        java.time.Instant instant53 = calendar51.toInstant();
        java.time.ZoneOffset zoneOffset55 = java.time.ZoneOffset.ofHours(9);
        java.lang.String str56 = zoneOffset55.toString();
        java.time.chrono.ChronoZonedDateTime<? extends java.time.chrono.ChronoLocalDate> wildcardChronoZonedDateTime57 = chronology21.zonedDateTime(instant53, (java.time.ZoneId) zoneOffset55);
        java.time.zone.ZoneRules zoneRules58 = zoneOffset55.getRules();
        java.time.OffsetDateTime offsetDateTime59 = offsetDateTime5.withOffsetSameInstant(zoneOffset55);
        java.time.OffsetDateTime offsetDateTime61 = offsetDateTime5.minusDays((long) (-292275054));
        org.junit.Assert.assertNotNull(offsetDateTime0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 21 + "'", int1 == 21);
        org.junit.Assert.assertNotNull(offsetDateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2022 + "'", int4 == 2022);
        org.junit.Assert.assertNotNull(offsetDateTime5);
        org.junit.Assert.assertNotNull(offsetDateTime7);
        org.junit.Assert.assertNotNull(dateTimeFormatter8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ParseCaseSensitive(false)(Value(Year,4,10,EXCEEDS_PAD)'-'Value(MonthOfYear,2)'-'Value(DayOfMonth,2))[Offset(+HH:MM:ss,'Z')]" + "'", str9, "ParseCaseSensitive(false)(Value(Year,4,10,EXCEEDS_PAD)'-'Value(MonthOfYear,2)'-'Value(DayOfMonth,2))[Offset(+HH:MM:ss,'Z')]");
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(periodTemporalQuery11);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(format13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeFormatter15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "ParseCaseSensitive(false)(Value(Year,4,10,EXCEEDS_PAD)'-'Value(MonthOfYear,2)'-'Value(DayOfMonth,2))[Offset(+HH:MM:ss,'Z')]" + "'", str16, "ParseCaseSensitive(false)(Value(Year,4,10,EXCEEDS_PAD)'-'Value(MonthOfYear,2)'-'Value(DayOfMonth,2))[Offset(+HH:MM:ss,'Z')]");
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(periodTemporalQuery18);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(format20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(eraList23);
        org.junit.Assert.assertNotNull(zoneOffset26);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(clock28);
        org.junit.Assert.assertNotNull(zoneOffset31);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(clock33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(chronoLocalDate35);
        org.junit.Assert.assertTrue("'" + isoEra36 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra36.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 52 + "'", int47 == 52);
        org.junit.Assert.assertNotNull(timeZone48);
// flaky:         org.junit.Assert.assertEquals(timeZone48.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertEquals(locale50.toString(), "hi!");
        org.junit.Assert.assertNotNull(calendar51);
// flaky:         org.junit.Assert.assertEquals(calendar51.toString(), "java.util.GregorianCalendar[time=1645436490804,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=35,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=41,SECOND=30,MILLISECOND=839,ZONE_OFFSET=35,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(instant52);
        org.junit.Assert.assertNotNull(instant53);
        org.junit.Assert.assertNotNull(zoneOffset55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "+09:00" + "'", str56, "+09:00");
        org.junit.Assert.assertNotNull(wildcardChronoZonedDateTime57);
        org.junit.Assert.assertNotNull(zoneRules58);
        org.junit.Assert.assertNotNull(offsetDateTime59);
        org.junit.Assert.assertNotNull(offsetDateTime61);
    }

    @Test
    public void test5129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5129");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.nio.LongBuffer longBuffer3 = java.nio.LongBuffer.allocate((int) (short) 0);
        java.nio.Buffer buffer4 = longBuffer3.mark();
        boolean boolean5 = properties1.containsKey((java.lang.Object) longBuffer3);
        java.util.Map<java.lang.String, java.lang.String> strMap6 = java.time.ZoneId.SHORT_IDS;
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        boolean boolean8 = strMap6.containsValue((java.lang.Object) dateTimeFieldType7);
        properties1.putAll(strMap6);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime(chronology10);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.withYearOfCentury((int) 'a');
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.plusSeconds(6);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime13.withWeekyear(10);
        org.joda.time.LocalDateTime.Property property18 = localDateTime13.millisOfSecond();
        java.lang.String str19 = strMap6.get((java.lang.Object) localDateTime13);
        java.util.Set<java.util.Map.Entry<java.lang.String, java.lang.String>> strEntrySet20 = strMap6.entrySet();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) 3, chronology22);
        org.joda.time.DateTime.Property property24 = dateTime23.dayOfYear();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight((java.lang.Object) dateTime23, chronology25);
        org.joda.time.MutableDateTime mutableDateTime27 = dateTime23.toMutableDateTime();
        mutableDateTime27.addYears((int) (short) 100);
        mutableDateTime27.setMillis((long) 21);
        org.joda.time.MutableDateTime.Property property32 = mutableDateTime27.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime33 = property32.roundHalfCeiling();
        org.joda.time.MutableDateTime.Property property34 = mutableDateTime33.hourOfDay();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime((long) 3, chronology36);
        org.joda.time.DateTime.Property property38 = dateTime37.dayOfYear();
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.DateMidnight dateMidnight40 = new org.joda.time.DateMidnight((java.lang.Object) dateTime37, chronology39);
        org.joda.time.DateMidnight.Property property41 = dateMidnight40.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight42 = property41.roundCeilingCopy();
        int int43 = dateMidnight42.getHourOfDay();
        int int44 = dateMidnight42.getCenturyOfEra();
        java.lang.String str45 = dateMidnight42.toString();
        mutableDateTime33.setMillis((org.joda.time.ReadableInstant) dateMidnight42);
        boolean boolean47 = strMap6.containsKey((java.lang.Object) mutableDateTime33);
        mutableDateTime33.setTime(34642346000000L);
        org.junit.Assert.assertNotNull(longBuffer3);
        org.junit.Assert.assertNotNull(buffer4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(strMap6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(strEntrySet20);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(mutableDateTime27);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(mutableDateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(dateMidnight42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 19 + "'", int44 == 19);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "1970-01-01T00:00:00.000Z" + "'", str45, "1970-01-01T00:00:00.000Z");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test5130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5130");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 0);
        java.net.Proxy proxy2 = java.net.Proxy.NO_PROXY;
        java.net.Proxy.Type type3 = proxy2.type();
        boolean boolean4 = dateTime1.equals((java.lang.Object) type3);
        org.junit.Assert.assertNotNull(proxy2);
        org.junit.Assert.assertTrue("'" + type3 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type3.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test5131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5131");
        java.time.Period period1 = java.time.Period.ofYears(28);
        java.time.chrono.IsoChronology isoChronology2 = period1.getChronology();
        boolean boolean4 = isoChronology2.isLeapYear((long) 35);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((long) 3, chronology6);
        org.joda.time.DateTime.Property property8 = dateTime7.dayOfYear();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight((java.lang.Object) dateTime7, chronology9);
        org.joda.time.MutableDateTime mutableDateTime11 = dateTime7.toMutableDateTime();
        mutableDateTime11.addYears((int) (short) 100);
        mutableDateTime11.setMillis((long) 21);
        org.joda.time.MutableDateTime.Property property16 = mutableDateTime11.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime17 = property16.roundHalfCeiling();
        java.time.LocalTime localTime22 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime23 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime22);
        long long24 = localTime23.toNanoOfDay();
        java.util.GregorianCalendar gregorianCalendar30 = new java.util.GregorianCalendar(12, 4096, 7, (-1), (int) (short) 10);
        int int31 = gregorianCalendar30.getWeeksInWeekYear();
        java.lang.String str32 = gregorianCalendar30.getCalendarType();
        java.time.ZonedDateTime zonedDateTime33 = gregorianCalendar30.toZonedDateTime();
        java.time.ZonedDateTime zonedDateTime35 = zonedDateTime33.minusMonths((long) 10);
        java.time.temporal.Temporal temporal36 = localTime23.adjustInto((java.time.temporal.Temporal) zonedDateTime35);
        boolean boolean37 = mutableDateTime17.equals((java.lang.Object) zonedDateTime35);
        java.util.GregorianCalendar gregorianCalendar43 = new java.util.GregorianCalendar(12, 4096, 7, (-1), (int) (short) 10);
        int int44 = gregorianCalendar43.getWeeksInWeekYear();
        java.lang.String str45 = gregorianCalendar43.getCalendarType();
        java.time.ZonedDateTime zonedDateTime46 = gregorianCalendar43.toZonedDateTime();
        java.util.GregorianCalendar gregorianCalendar52 = new java.util.GregorianCalendar(12, 4096, 7, (-1), (int) (short) 10);
        int int53 = gregorianCalendar52.getWeeksInWeekYear();
        java.lang.String str54 = gregorianCalendar52.getCalendarType();
        java.time.ZonedDateTime zonedDateTime55 = gregorianCalendar52.toZonedDateTime();
        int int56 = zonedDateTime46.compareTo((java.time.chrono.ChronoZonedDateTime<java.time.LocalDate>) zonedDateTime55);
        java.time.ZonedDateTime zonedDateTime58 = zonedDateTime46.plusDays((long) 2022);
        java.time.Instant instant59 = zonedDateTime46.toInstant();
        java.time.chrono.Chronology chronology60 = zonedDateTime46.getChronology();
        boolean boolean61 = zonedDateTime35.isAfter((java.time.chrono.ChronoZonedDateTime<java.time.LocalDate>) zonedDateTime46);
        java.time.ZonedDateTime zonedDateTime62 = isoChronology2.zonedDateTime((java.time.temporal.TemporalAccessor) zonedDateTime35);
        java.time.LocalDateTime localDateTime63 = java.time.LocalDateTime.now();
        java.time.LocalTime localTime64 = localDateTime63.toLocalTime();
        java.time.LocalDateTime localDateTime66 = localDateTime63.withDayOfMonth(10);
        java.time.LocalDateTime localDateTime68 = localDateTime66.minusWeeks((long) (short) 10);
        java.time.ZonedDateTime zonedDateTime69 = zonedDateTime35.with((java.time.temporal.TemporalAdjuster) localDateTime68);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(isoChronology2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 3601000000001L + "'", long24 == 3601000000001L);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 52 + "'", int31 == 52);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "gregory" + "'", str32, "gregory");
        org.junit.Assert.assertNotNull(zonedDateTime33);
        org.junit.Assert.assertNotNull(zonedDateTime35);
        org.junit.Assert.assertNotNull(temporal36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 52 + "'", int44 == 52);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "gregory" + "'", str45, "gregory");
        org.junit.Assert.assertNotNull(zonedDateTime46);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 52 + "'", int53 == 52);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "gregory" + "'", str54, "gregory");
        org.junit.Assert.assertNotNull(zonedDateTime55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(zonedDateTime58);
        org.junit.Assert.assertNotNull(instant59);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(zonedDateTime62);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(localTime64);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertNotNull(zonedDateTime69);
    }

    @Test
    public void test5132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5132");
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalTime localTime6 = new org.joda.time.LocalTime((long) 0, chronology5);
        org.joda.time.Chronology chronology7 = localTime6.getChronology();
        java.util.Locale locale8 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale9 = java.util.Locale.GERMANY;
        java.lang.String str10 = locale8.getDisplayScript(locale9);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket12 = new org.joda.time.format.DateTimeParserBucket((long) 1970, chronology7, locale8, (java.lang.Integer) 1);
        dateTimeParserBucket12.setOffset((-1));
        org.joda.time.DateTimeZone dateTimeZone15 = dateTimeParserBucket12.getZone();
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime((long) '#', dateTimeZone15);
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime16.yearOfEra();
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.Duration duration20 = new org.joda.time.Duration(readableInstant18, readableInstant19);
        org.joda.time.Duration duration22 = duration20.withMillis((-1L));
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) 3, chronology24);
        org.joda.time.DateTime.Property property26 = dateTime25.dayOfYear();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.DateMidnight dateMidnight28 = new org.joda.time.DateMidnight((java.lang.Object) dateTime25, chronology27);
        org.joda.time.DateMidnight dateMidnight30 = dateMidnight28.minusMonths((-1));
        org.joda.time.DateMidnight dateMidnight32 = dateMidnight28.withDayOfYear((int) ' ');
        org.joda.time.PeriodType periodType33 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period34 = duration22.toPeriodFrom((org.joda.time.ReadableInstant) dateMidnight28, periodType33);
        org.joda.time.Duration duration36 = org.joda.time.Duration.standardHours((long) 1);
        org.joda.time.DateMidnight dateMidnight37 = dateMidnight28.plus((org.joda.time.ReadableDuration) duration36);
        long long38 = duration36.getMillis();
        org.joda.time.Duration duration40 = org.joda.time.Duration.standardMinutes((long) 292269054);
        boolean boolean41 = duration36.isLongerThan((org.joda.time.ReadableDuration) duration40);
        org.joda.time.Duration duration44 = duration36.withDurationAdded((long) 37, 22);
        org.joda.time.PeriodType periodType45 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType46 = periodType45.withMinutesRemoved();
        org.joda.time.PeriodType periodType47 = periodType45.withMinutesRemoved();
        org.joda.time.MutablePeriod mutablePeriod48 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime16, (org.joda.time.ReadableDuration) duration44, periodType47);
        org.joda.time.PeriodType periodType49 = periodType47.withHoursRemoved();
        org.joda.time.MutablePeriod mutablePeriod50 = new org.joda.time.MutablePeriod((long) 12, 4012278051142L, periodType47);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(dateMidnight30);
        org.junit.Assert.assertNotNull(dateMidnight32);
        org.junit.Assert.assertNotNull(periodType33);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(dateMidnight37);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 3600000L + "'", long38 == 3600000L);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(periodType45);
        org.junit.Assert.assertNotNull(periodType46);
        org.junit.Assert.assertNotNull(periodType47);
        org.junit.Assert.assertNotNull(periodType49);
    }

    @Test
    public void test5133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5133");
        java.time.Clock clock0 = java.time.Clock.systemUTC();
        java.time.Duration duration2 = java.time.Duration.ofSeconds((long) 256);
        java.time.Clock clock3 = java.time.Clock.tick(clock0, duration2);
        java.time.Duration duration5 = java.time.Duration.ofMinutes((long) 3);
        java.time.Duration duration6 = duration5.abs();
        java.time.Clock clock7 = java.time.Clock.offset(clock0, duration5);
        java.time.LocalDate localDate8 = java.time.LocalDate.now(clock7);
        java.time.LocalDate localDate10 = java.time.LocalDate.ofEpochDay((long) ' ');
        java.time.OffsetTime offsetTime11 = java.time.OffsetTime.MAX;
        java.time.LocalTime localTime12 = offsetTime11.toLocalTime();
        java.lang.String str13 = offsetTime11.toString();
        java.time.Duration duration14 = java.time.Duration.ZERO;
        java.lang.String str15 = duration14.toString();
        java.time.OffsetTime offsetTime16 = offsetTime11.plus((java.time.temporal.TemporalAmount) duration14);
        java.time.LocalTime localTime17 = offsetTime11.toLocalTime();
        java.time.chrono.ChronoLocalDateTime<?> wildcardChronoLocalDateTime18 = localDate10.atTime(localTime17);
        java.time.LocalDate localDate20 = localDate10.minusWeeks((long) 2097);
        java.time.OffsetTime offsetTime21 = java.time.OffsetTime.MAX;
        java.time.LocalTime localTime22 = offsetTime21.toLocalTime();
        java.lang.String str23 = offsetTime21.toString();
        java.time.Duration duration24 = java.time.Duration.ZERO;
        java.lang.String str25 = duration24.toString();
        java.time.OffsetTime offsetTime26 = offsetTime21.plus((java.time.temporal.TemporalAmount) duration24);
        java.time.OffsetTime offsetTime28 = offsetTime21.plusNanos((long) 0);
        java.time.LocalTime localTime33 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime34 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime33);
        java.time.temporal.ChronoField chronoField35 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime37 = localTime33.with((java.time.temporal.TemporalField) chronoField35, (long) (short) 1);
        java.util.Locale locale38 = java.util.Locale.GERMANY;
        java.lang.String str39 = chronoField35.getDisplayName(locale38);
        java.time.OffsetTime offsetTime41 = offsetTime28.with((java.time.temporal.TemporalField) chronoField35, (long) 28);
        java.time.OffsetDateTime offsetDateTime42 = localDate20.atTime(offsetTime28);
        int int43 = localDate20.getYear();
        boolean boolean44 = localDate8.isBefore((java.time.chrono.ChronoLocalDate) localDate20);
        int int45 = localDate8.lengthOfMonth();
        java.time.chrono.Chronology chronology46 = localDate8.getChronology();
        java.util.GregorianCalendar gregorianCalendar52 = new java.util.GregorianCalendar(12, 4096, 7, (-1), (int) (short) 10);
        int int53 = gregorianCalendar52.getWeeksInWeekYear();
        java.lang.String str54 = gregorianCalendar52.getCalendarType();
        java.time.ZonedDateTime zonedDateTime55 = gregorianCalendar52.toZonedDateTime();
        java.util.GregorianCalendar gregorianCalendar61 = new java.util.GregorianCalendar(12, 4096, 7, (-1), (int) (short) 10);
        int int62 = gregorianCalendar61.getWeeksInWeekYear();
        java.lang.String str63 = gregorianCalendar61.getCalendarType();
        java.time.ZonedDateTime zonedDateTime64 = gregorianCalendar61.toZonedDateTime();
        int int65 = zonedDateTime55.compareTo((java.time.chrono.ChronoZonedDateTime<java.time.LocalDate>) zonedDateTime64);
        java.time.ZoneId zoneId66 = zonedDateTime64.getZone();
        java.time.chrono.ChronoLocalDate chronoLocalDate67 = chronology46.dateNow(zoneId66);
        org.junit.Assert.assertNotNull(clock0);
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertNotNull(clock3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(clock7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(offsetTime11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "23:59:59.999999999-18:00" + "'", str13, "23:59:59.999999999-18:00");
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "PT0S" + "'", str15, "PT0S");
        org.junit.Assert.assertNotNull(offsetTime16);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(wildcardChronoLocalDateTime18);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(offsetTime21);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "23:59:59.999999999-18:00" + "'", str23, "23:59:59.999999999-18:00");
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "PT0S" + "'", str25, "PT0S");
        org.junit.Assert.assertNotNull(offsetTime26);
        org.junit.Assert.assertNotNull(offsetTime28);
        org.junit.Assert.assertNotNull(localTime33);
        org.junit.Assert.assertNotNull(localTime34);
        org.junit.Assert.assertTrue("'" + chronoField35 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField35.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime37);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "NanoOfDay" + "'", str39, "NanoOfDay");
        org.junit.Assert.assertNotNull(offsetTime41);
        org.junit.Assert.assertNotNull(offsetDateTime42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1929 + "'", int43 == 1929);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 28 + "'", int45 == 28);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 52 + "'", int53 == 52);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "gregory" + "'", str54, "gregory");
        org.junit.Assert.assertNotNull(zonedDateTime55);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 52 + "'", int62 == 52);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "gregory" + "'", str63, "gregory");
        org.junit.Assert.assertNotNull(zonedDateTime64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNotNull(zoneId66);
        org.junit.Assert.assertNotNull(chronoLocalDate67);
    }

    @Test
    public void test5134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5134");
        java.time.LocalDate localDate1 = java.time.LocalDate.ofEpochDay((long) ' ');
        java.time.OffsetTime offsetTime2 = java.time.OffsetTime.MAX;
        java.time.LocalTime localTime3 = offsetTime2.toLocalTime();
        java.lang.String str4 = offsetTime2.toString();
        java.time.Duration duration5 = java.time.Duration.ZERO;
        java.lang.String str6 = duration5.toString();
        java.time.OffsetTime offsetTime7 = offsetTime2.plus((java.time.temporal.TemporalAmount) duration5);
        java.time.LocalTime localTime8 = offsetTime2.toLocalTime();
        java.time.chrono.ChronoLocalDateTime<?> wildcardChronoLocalDateTime9 = localDate1.atTime(localTime8);
        java.time.LocalDate localDate11 = localDate1.minusWeeks((long) 2097);
        java.lang.String str12 = localDate11.toString();
        java.time.chrono.Era era13 = localDate11.getEra();
        java.time.Month month14 = localDate11.getMonth();
        int int15 = month14.minLength();
        java.time.Month month17 = month14.minus(0L);
        int int18 = month17.minLength();
        org.junit.Assert.assertNotNull(localDate1);
        org.junit.Assert.assertNotNull(offsetTime2);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "23:59:59.999999999-18:00" + "'", str4, "23:59:59.999999999-18:00");
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "PT0S" + "'", str6, "PT0S");
        org.junit.Assert.assertNotNull(offsetTime7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(wildcardChronoLocalDateTime9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "1929-11-25" + "'", str12, "1929-11-25");
        org.junit.Assert.assertTrue("'" + era13 + "' != '" + java.time.chrono.IsoEra.CE + "'", era13.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + month14 + "' != '" + java.time.Month.NOVEMBER + "'", month14.equals(java.time.Month.NOVEMBER));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 30 + "'", int15 == 30);
        org.junit.Assert.assertTrue("'" + month17 + "' != '" + java.time.Month.NOVEMBER + "'", month17.equals(java.time.Month.NOVEMBER));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 30 + "'", int18 == 30);
    }

    @Test
    public void test5135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5135");
        float[] floatArray2 = new float[] { (-1L), (byte) -1 };
        java.nio.FloatBuffer floatBuffer3 = java.nio.FloatBuffer.wrap(floatArray2);
        java.nio.FloatBuffer floatBuffer4 = floatBuffer3.compact();
        java.nio.FloatBuffer floatBuffer5 = floatBuffer3.asReadOnlyBuffer();
        java.nio.ByteOrder byteOrder6 = floatBuffer3.order();
        java.nio.FloatBuffer floatBuffer7 = floatBuffer3.asReadOnlyBuffer();
        java.net.InetAddress inetAddress8 = java.net.InetAddress.getLocalHost();
        boolean boolean9 = inetAddress8.isMCOrgLocal();
        float[] floatArray12 = new float[] { (-1L), (byte) -1 };
        java.nio.FloatBuffer floatBuffer13 = java.nio.FloatBuffer.wrap(floatArray12);
        boolean boolean14 = inetAddress8.equals((java.lang.Object) floatBuffer13);
        float[] floatArray17 = new float[] { (-1L), (byte) -1 };
        java.nio.FloatBuffer floatBuffer18 = java.nio.FloatBuffer.wrap(floatArray17);
        java.nio.FloatBuffer floatBuffer19 = floatBuffer18.compact();
        java.nio.FloatBuffer floatBuffer20 = floatBuffer18.asReadOnlyBuffer();
        java.nio.ByteOrder byteOrder21 = floatBuffer18.order();
        boolean boolean22 = floatBuffer13.equals((java.lang.Object) floatBuffer18);
        int int23 = floatBuffer18.arrayOffset();
        boolean boolean24 = floatBuffer18.isDirect();
        java.nio.FloatBuffer floatBuffer25 = floatBuffer3.put(floatBuffer18);
        java.net.InetAddress inetAddress26 = java.net.InetAddress.getLocalHost();
        boolean boolean27 = inetAddress26.isMCOrgLocal();
        float[] floatArray30 = new float[] { (-1L), (byte) -1 };
        java.nio.FloatBuffer floatBuffer31 = java.nio.FloatBuffer.wrap(floatArray30);
        boolean boolean32 = inetAddress26.equals((java.lang.Object) floatBuffer31);
        float[] floatArray35 = new float[] { (-1L), (byte) -1 };
        java.nio.FloatBuffer floatBuffer36 = java.nio.FloatBuffer.wrap(floatArray35);
        java.nio.FloatBuffer floatBuffer37 = floatBuffer36.compact();
        java.nio.FloatBuffer floatBuffer38 = floatBuffer36.asReadOnlyBuffer();
        java.nio.ByteOrder byteOrder39 = floatBuffer36.order();
        boolean boolean40 = floatBuffer31.equals((java.lang.Object) floatBuffer36);
        float[] floatArray43 = new float[] { (-1L), (byte) -1 };
        java.nio.FloatBuffer floatBuffer44 = java.nio.FloatBuffer.wrap(floatArray43);
        java.nio.FloatBuffer floatBuffer45 = floatBuffer44.compact();
        boolean boolean46 = floatBuffer45.isDirect();
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime((long) 3, chronology48);
        org.joda.time.DateTime.Property property50 = dateTime49.dayOfYear();
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.DateMidnight dateMidnight52 = new org.joda.time.DateMidnight((java.lang.Object) dateTime49, chronology51);
        org.joda.time.MutableDateTime mutableDateTime53 = dateTime49.toMutableDateTime();
        mutableDateTime53.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property56 = mutableDateTime53.dayOfWeek();
        int int57 = property56.get();
        boolean boolean58 = floatBuffer45.equals((java.lang.Object) int57);
        java.nio.FloatBuffer floatBuffer59 = floatBuffer31.put(floatBuffer45);
        java.util.stream.Stream<java.lang.Object> objStream60 = java.util.stream.Stream.empty();
        java.util.stream.Stream<java.lang.Object> objStream61 = objStream60.parallel();
        boolean boolean62 = floatBuffer31.equals((java.lang.Object) objStream60);
        java.nio.FloatBuffer floatBuffer64 = floatBuffer31.put((float) (-16000000));
        int int65 = floatBuffer3.compareTo(floatBuffer64);
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[-1.0, -1.0]");
        org.junit.Assert.assertNotNull(floatBuffer3);
        org.junit.Assert.assertNotNull(floatBuffer4);
        org.junit.Assert.assertNotNull(floatBuffer5);
        org.junit.Assert.assertNotNull(byteOrder6);
        org.junit.Assert.assertNotNull(floatBuffer7);
        org.junit.Assert.assertNotNull(inetAddress8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(floatArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray12), "[-1.0, -1.0]");
        org.junit.Assert.assertNotNull(floatBuffer13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(floatArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray17), "[-1.0, -1.0]");
        org.junit.Assert.assertNotNull(floatBuffer18);
        org.junit.Assert.assertNotNull(floatBuffer19);
        org.junit.Assert.assertNotNull(floatBuffer20);
        org.junit.Assert.assertNotNull(byteOrder21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(floatBuffer25);
        org.junit.Assert.assertNotNull(inetAddress26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(floatArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray30), "[-1.6E7, -1.0]");
        org.junit.Assert.assertNotNull(floatBuffer31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(floatArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray35), "[-1.0, -1.0]");
        org.junit.Assert.assertNotNull(floatBuffer36);
        org.junit.Assert.assertNotNull(floatBuffer37);
        org.junit.Assert.assertNotNull(floatBuffer38);
        org.junit.Assert.assertNotNull(byteOrder39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(floatArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray43), "[-1.0, -1.0]");
        org.junit.Assert.assertNotNull(floatBuffer44);
        org.junit.Assert.assertNotNull(floatBuffer45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(mutableDateTime53);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 3 + "'", int57 == 3);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(floatBuffer59);
        org.junit.Assert.assertNotNull(objStream60);
        org.junit.Assert.assertNotNull(objStream61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(floatBuffer64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
    }

    @Test
    public void test5136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5136");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.nio.LongBuffer longBuffer3 = java.nio.LongBuffer.allocate((int) (short) 0);
        java.nio.Buffer buffer4 = longBuffer3.mark();
        boolean boolean5 = properties1.containsKey((java.lang.Object) longBuffer3);
        java.nio.charset.Charset charset6 = java.nio.charset.Charset.defaultCharset();
        boolean boolean7 = charset6.canEncode();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) 3, chronology9);
        org.joda.time.DateTime.Property property11 = dateTime10.dayOfYear();
        java.lang.Object obj12 = properties1.getOrDefault((java.lang.Object) boolean7, (java.lang.Object) property11);
        properties1.clear();
        int int14 = properties1.size();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime(chronology15);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.withYearOfCentury((int) 'a');
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.plusSeconds(6);
        org.joda.time.DateTime dateTime21 = localDateTime18.toDateTime();
        int int22 = localDateTime18.getMinuteOfHour();
        org.joda.time.PeriodType periodType23 = org.joda.time.PeriodType.years();
        org.joda.time.DurationFieldType durationFieldType24 = org.joda.time.DurationFieldType.halfdays();
        int int25 = periodType23.indexOf(durationFieldType24);
        java.lang.String str26 = durationFieldType24.toString();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime18.withFieldAdded(durationFieldType24, (int) (byte) 100);
        java.time.LocalTime localTime33 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime34 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime33);
        java.time.temporal.ChronoField chronoField35 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime37 = localTime33.with((java.time.temporal.TemporalField) chronoField35, (long) (short) 1);
        java.time.Duration duration39 = java.time.Duration.ofMinutes((long) 3);
        java.time.LocalTime localTime40 = localTime33.minus((java.time.temporal.TemporalAmount) duration39);
        boolean boolean41 = properties1.remove((java.lang.Object) (byte) 100, (java.lang.Object) localTime40);
        java.util.Enumeration<java.lang.Object> objEnumeration42 = properties1.keys();
        org.junit.Assert.assertNotNull(longBuffer3);
        org.junit.Assert.assertNotNull(buffer4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(charset6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(obj12);
        org.junit.Assert.assertEquals(obj12.toString(), "Property[dayOfYear]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj12), "Property[dayOfYear]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj12), "Property[dayOfYear]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(dateTime21);
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 41 + "'", int22 == 41);
        org.junit.Assert.assertNotNull(periodType23);
        org.junit.Assert.assertNotNull(durationFieldType24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "halfdays" + "'", str26, "halfdays");
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localTime33);
        org.junit.Assert.assertNotNull(localTime34);
        org.junit.Assert.assertTrue("'" + chronoField35 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField35.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime37);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(localTime40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(objEnumeration42);
    }

    @Test
    public void test5137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5137");
        java.time.Month month0 = java.time.Month.DECEMBER;
        java.time.Month month2 = month0.plus(31536000000L);
        java.util.Optional<java.lang.Exception> exceptionOptional3 = java.util.Optional.empty();
        java.lang.String str4 = exceptionOptional3.toString();
        java.time.LocalDateTime localDateTime5 = java.time.LocalDateTime.now();
        java.time.temporal.ChronoField chronoField6 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime8 = localDateTime5.with((java.time.temporal.TemporalField) chronoField6, (long) 10);
        java.time.LocalDateTime localDateTime10 = localDateTime5.withDayOfYear((int) '/');
        boolean boolean11 = exceptionOptional3.equals((java.lang.Object) localDateTime10);
        java.time.LocalTime localTime16 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime17 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime16);
        java.time.LocalTime localTime22 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime23 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime22);
        java.time.temporal.ChronoField chronoField24 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime26 = localTime22.with((java.time.temporal.TemporalField) chronoField24, (long) (short) 1);
        long long27 = localTime16.getLong((java.time.temporal.TemporalField) chronoField24);
        java.time.LocalTime localTime29 = localTime16.withSecond((int) (short) 1);
        java.time.temporal.ChronoField chronoField30 = java.time.temporal.ChronoField.SECOND_OF_DAY;
        java.time.temporal.ValueRange valueRange31 = localTime29.range((java.time.temporal.TemporalField) chronoField30);
        java.time.Duration duration33 = java.time.Duration.ofSeconds((long) 0);
        java.time.LocalTime localTime34 = localTime29.plus((java.time.temporal.TemporalAmount) duration33);
        java.time.LocalDateTime localDateTime35 = localDateTime10.plus((java.time.temporal.TemporalAmount) duration33);
        java.time.temporal.Temporal temporal36 = month0.adjustInto((java.time.temporal.Temporal) localDateTime10);
        org.junit.Assert.assertTrue("'" + month0 + "' != '" + java.time.Month.DECEMBER + "'", month0.equals(java.time.Month.DECEMBER));
        org.junit.Assert.assertTrue("'" + month2 + "' != '" + java.time.Month.DECEMBER + "'", month2.equals(java.time.Month.DECEMBER));
        org.junit.Assert.assertNotNull(exceptionOptional3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Optional.empty" + "'", str4, "Optional.empty");
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + chronoField6 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField6.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertTrue("'" + chronoField24 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField24.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime26);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 3601000000001L + "'", long27 == 3601000000001L);
        org.junit.Assert.assertNotNull(localTime29);
        org.junit.Assert.assertTrue("'" + chronoField30 + "' != '" + java.time.temporal.ChronoField.SECOND_OF_DAY + "'", chronoField30.equals(java.time.temporal.ChronoField.SECOND_OF_DAY));
        org.junit.Assert.assertNotNull(valueRange31);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(localTime34);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(temporal36);
    }

    @Test
    public void test5138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5138");
        // The following exception was thrown during execution in test generation
        try {
            java.time.Month month1 = java.time.Month.of(275);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for MonthOfYear: 275");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
    }

    @Test
    public void test5139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5139");
        java.time.Month month0 = java.time.Month.JANUARY;
        int int2 = month0.firstDayOfYear(false);
        java.time.DayOfWeek dayOfWeek4 = java.time.DayOfWeek.TUESDAY;
        java.time.OffsetTime offsetTime5 = java.time.OffsetTime.MAX;
        java.time.LocalTime localTime6 = offsetTime5.toLocalTime();
        java.time.zone.ZoneOffsetTransitionRule.TimeDefinition timeDefinition8 = java.time.zone.ZoneOffsetTransitionRule.TimeDefinition.UTC;
        java.time.ZoneOffset zoneOffset10 = java.time.ZoneOffset.ofTotalSeconds(65);
        java.time.LocalDateTime localDateTime11 = java.time.LocalDateTime.now();
        java.time.temporal.ChronoField chronoField12 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime14 = localDateTime11.with((java.time.temporal.TemporalField) chronoField12, (long) 10);
        java.time.LocalDateTime localDateTime16 = localDateTime11.minusMinutes((long) 12);
        java.time.OffsetDateTime offsetDateTime17 = java.time.OffsetDateTime.now();
        java.time.ZoneOffset zoneOffset19 = java.time.ZoneOffset.ofHours(9);
        java.time.OffsetDateTime offsetDateTime20 = offsetDateTime17.withOffsetSameLocal(zoneOffset19);
        java.time.ZoneOffset zoneOffset22 = java.time.ZoneOffset.ofHours(9);
        java.time.ZonedDateTime zonedDateTime23 = java.time.ZonedDateTime.ofInstant(localDateTime11, zoneOffset19, (java.time.ZoneId) zoneOffset22);
        java.time.LocalDate localDate24 = java.time.LocalDate.now((java.time.ZoneId) zoneOffset19);
        java.time.OffsetDateTime offsetDateTime25 = java.time.OffsetDateTime.now();
        java.time.LocalDate localDate26 = offsetDateTime25.toLocalDate();
        java.time.OffsetDateTime offsetDateTime27 = java.time.OffsetDateTime.now();
        java.time.temporal.ChronoField chronoField28 = java.time.temporal.ChronoField.HOUR_OF_DAY;
        boolean boolean29 = offsetDateTime27.isSupported((java.time.temporal.TemporalField) chronoField28);
        boolean boolean30 = offsetDateTime25.isEqual(offsetDateTime27);
        java.time.OffsetDateTime offsetDateTime32 = offsetDateTime27.minusHours(3601000000001L);
        java.util.GregorianCalendar gregorianCalendar38 = new java.util.GregorianCalendar(12, 4096, 7, (-1), (int) (short) 10);
        int int39 = gregorianCalendar38.getWeeksInWeekYear();
        java.lang.String str40 = gregorianCalendar38.getCalendarType();
        java.time.ZonedDateTime zonedDateTime41 = gregorianCalendar38.toZonedDateTime();
        java.time.ZonedDateTime zonedDateTime43 = zonedDateTime41.minusMonths((long) 10);
        java.time.ZonedDateTime zonedDateTime45 = zonedDateTime43.minusHours((long) 9);
        java.time.ZoneOffset zoneOffset46 = zonedDateTime43.getOffset();
        java.time.ZonedDateTime zonedDateTime47 = offsetDateTime27.atZoneSimilarLocal((java.time.ZoneId) zoneOffset46);
        java.time.zone.ZoneRules zoneRules48 = java.time.zone.ZoneRules.of(zoneOffset46);
        java.time.LocalDateTime localDateTime49 = java.time.LocalDateTime.now();
        java.time.LocalTime localTime50 = localDateTime49.toLocalTime();
        java.time.chrono.Chronology chronology51 = localDateTime49.getChronology();
        java.time.LocalDateTime localDateTime52 = java.time.LocalDateTime.now();
        java.time.LocalTime localTime53 = localDateTime52.toLocalTime();
        java.time.LocalDateTime localDateTime55 = localDateTime52.withDayOfMonth(10);
        java.time.format.DateTimeFormatter dateTimeFormatter56 = java.time.format.DateTimeFormatter.ISO_LOCAL_DATE_TIME;
        java.time.ZoneOffset zoneOffset59 = java.time.ZoneOffset.ofHoursMinutes(1, 10);
        java.time.LocalDate localDate60 = java.time.LocalDate.now((java.time.ZoneId) zoneOffset59);
        java.time.LocalDate localDate61 = java.time.LocalDate.now((java.time.ZoneId) zoneOffset59);
        java.time.format.DateTimeFormatter dateTimeFormatter62 = dateTimeFormatter56.withZone((java.time.ZoneId) zoneOffset59);
        long long63 = localDateTime55.toEpochSecond(zoneOffset59);
        java.time.chrono.ChronoLocalDate chronoLocalDate64 = chronology51.dateNow((java.time.ZoneId) zoneOffset59);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray65 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList66 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList66, zoneOffsetTransitionArray65);
        java.time.zone.ZoneOffsetTransition[] zoneOffsetTransitionArray68 = new java.time.zone.ZoneOffsetTransition[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransition> zoneOffsetTransitionList69 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransition>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList69, zoneOffsetTransitionArray68);
        java.time.zone.ZoneOffsetTransitionRule[] zoneOffsetTransitionRuleArray71 = new java.time.zone.ZoneOffsetTransitionRule[] {};
        java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule> zoneOffsetTransitionRuleList72 = new java.util.ArrayList<java.time.zone.ZoneOffsetTransitionRule>();
        boolean boolean73 = java.util.Collections.addAll((java.util.Collection<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList72, zoneOffsetTransitionRuleArray71);
        java.time.zone.ZoneRules zoneRules74 = java.time.zone.ZoneRules.of(zoneOffset46, zoneOffset59, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList66, (java.util.List<java.time.zone.ZoneOffsetTransition>) zoneOffsetTransitionList69, (java.util.List<java.time.zone.ZoneOffsetTransitionRule>) zoneOffsetTransitionRuleList72);
        // The following exception was thrown during execution in test generation
        try {
            java.time.zone.ZoneOffsetTransitionRule zoneOffsetTransitionRule75 = java.time.zone.ZoneOffsetTransitionRule.of(month0, (int) 'a', dayOfWeek4, localTime6, false, timeDefinition8, zoneOffset10, zoneOffset19, zoneOffset46);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Day of month indicator must be between -28 and 31 inclusive excluding zero");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + month0 + "' != '" + java.time.Month.JANUARY + "'", month0.equals(java.time.Month.JANUARY));
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertTrue("'" + dayOfWeek4 + "' != '" + java.time.DayOfWeek.TUESDAY + "'", dayOfWeek4.equals(java.time.DayOfWeek.TUESDAY));
        org.junit.Assert.assertNotNull(offsetTime5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertTrue("'" + timeDefinition8 + "' != '" + java.time.zone.ZoneOffsetTransitionRule.TimeDefinition.UTC + "'", timeDefinition8.equals(java.time.zone.ZoneOffsetTransitionRule.TimeDefinition.UTC));
        org.junit.Assert.assertNotNull(zoneOffset10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + chronoField12 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField12.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(offsetDateTime17);
        org.junit.Assert.assertNotNull(zoneOffset19);
        org.junit.Assert.assertNotNull(offsetDateTime20);
        org.junit.Assert.assertNotNull(zoneOffset22);
        org.junit.Assert.assertNotNull(zonedDateTime23);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(offsetDateTime25);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(offsetDateTime27);
        org.junit.Assert.assertTrue("'" + chronoField28 + "' != '" + java.time.temporal.ChronoField.HOUR_OF_DAY + "'", chronoField28.equals(java.time.temporal.ChronoField.HOUR_OF_DAY));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(offsetDateTime32);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 52 + "'", int39 == 52);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "gregory" + "'", str40, "gregory");
        org.junit.Assert.assertNotNull(zonedDateTime41);
        org.junit.Assert.assertNotNull(zonedDateTime43);
        org.junit.Assert.assertNotNull(zonedDateTime45);
        org.junit.Assert.assertNotNull(zoneOffset46);
        org.junit.Assert.assertNotNull(zonedDateTime47);
        org.junit.Assert.assertNotNull(zoneRules48);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(localTime50);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(localTime53);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(dateTimeFormatter56);
        org.junit.Assert.assertNotNull(zoneOffset59);
        org.junit.Assert.assertNotNull(localDate60);
        org.junit.Assert.assertNotNull(localDate61);
        org.junit.Assert.assertNotNull(dateTimeFormatter62);
// flaky:         org.junit.Assert.assertTrue("'" + long63 + "' != '" + 1644481891L + "'", long63 == 1644481891L);
        org.junit.Assert.assertNotNull(chronoLocalDate64);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(zoneOffsetTransitionRuleArray71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(zoneRules74);
    }

    @Test
    public void test5140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5140");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Duration duration2 = new org.joda.time.Duration(readableInstant0, readableInstant1);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = duration2.toPeriodTo(readableInstant3, periodType4);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.Duration duration8 = new org.joda.time.Duration(readableInstant6, readableInstant7);
        long long9 = duration8.getMillis();
        boolean boolean10 = duration2.isShorterThan((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) 3, chronology12);
        org.joda.time.DateTime.Property property14 = dateTime13.dayOfYear();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight((java.lang.Object) dateTime13, chronology15);
        org.joda.time.MutableDateTime mutableDateTime17 = dateTime13.toMutableDateTime();
        mutableDateTime17.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime17.dayOfWeek();
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime17.year();
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime17.weekyear();
        boolean boolean23 = duration2.equals((java.lang.Object) mutableDateTime17);
        mutableDateTime17.addMonths((int) ' ');
        mutableDateTime17.add((long) (byte) 10);
        org.joda.time.Period period28 = org.joda.time.Period.ZERO;
        org.joda.time.Period period29 = period28.normalizedStandard();
        org.joda.time.Period period31 = period28.plusHours(2);
        java.time.chrono.IsoEra isoEra32 = java.time.chrono.IsoEra.CE;
        boolean boolean33 = period31.equals((java.lang.Object) isoEra32);
        int int34 = period31.getMinutes();
        mutableDateTime17.add((org.joda.time.ReadablePeriod) period31);
        java.util.TimeZone timeZone37 = null;
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forTimeZone(timeZone37);
        org.joda.time.DateMidnight dateMidnight39 = new org.joda.time.DateMidnight((long) 1970, dateTimeZone38);
        long long42 = dateTimeZone38.convertLocalToUTC((long) 3, false);
        long long45 = dateTimeZone38.convertLocalToUTC(0L, true);
        mutableDateTime17.setZoneRetainFields(dateTimeZone38);
        java.lang.String str47 = dateTimeZone38.toString();
        org.joda.time.chrono.EthiopicChronology ethiopicChronology48 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone38);
        org.joda.time.DateTimeField dateTimeField49 = ethiopicChronology48.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone50 = ethiopicChronology48.getZone();
        org.joda.time.DateTimeField dateTimeField51 = ethiopicChronology48.era();
        org.joda.time.DateTimeField dateTimeField52 = ethiopicChronology48.secondOfDay();
        org.joda.time.DateTimeField dateTimeField53 = ethiopicChronology48.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField54 = ethiopicChronology48.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime55 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) ethiopicChronology48);
        org.joda.time.DateTimeField dateTimeField56 = ethiopicChronology48.year();
        org.joda.time.DateTimeZone dateTimeZone57 = ethiopicChronology48.getZone();
        org.joda.time.DateTime dateTime58 = new org.joda.time.DateTime(dateTimeZone57);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertTrue("'" + isoEra32 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra32.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 3L + "'", long42 == 3L);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Etc/UTC" + "'", str47, "Etc/UTC");
        org.junit.Assert.assertNotNull(ethiopicChronology48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(dateTimeZone57);
    }

    @Test
    public void test5141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5141");
        java.util.GregorianCalendar gregorianCalendar5 = new java.util.GregorianCalendar(12, 4096, 7, (-1), (int) (short) 10);
        int int6 = gregorianCalendar5.getMinimalDaysInFirstWeek();
        int int7 = gregorianCalendar5.getWeeksInWeekYear();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52 + "'", int7 == 52);
    }

    @Test
    public void test5142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5142");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((long) 0, chronology2);
        org.joda.time.Chronology chronology4 = localTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField5 = chronology4.weekyearOfCentury();
        org.joda.time.DurationField durationField6 = chronology4.weekyears();
        org.joda.time.DurationField durationField7 = chronology4.seconds();
        org.joda.time.LocalTime localTime8 = org.joda.time.LocalTime.fromMillisOfDay((long) (byte) 0, chronology4);
        org.joda.time.LocalTime.Property property9 = localTime8.millisOfSecond();
        org.joda.time.LocalTime localTime10 = property9.roundFloorCopy();
        org.joda.time.LocalTime localTime12 = property9.addCopy(197);
        org.joda.time.TimeOfDay timeOfDay14 = org.joda.time.TimeOfDay.fromMillisOfDay((long) (short) 0);
        org.joda.time.TimeOfDay timeOfDay16 = org.joda.time.TimeOfDay.fromMillisOfDay((long) (short) 0);
        org.joda.time.Hours hours17 = org.joda.time.Hours.hoursBetween((org.joda.time.ReadablePartial) timeOfDay14, (org.joda.time.ReadablePartial) timeOfDay16);
        org.joda.time.DurationFieldType durationFieldType18 = org.joda.time.DurationFieldType.hours();
        org.joda.time.TimeOfDay timeOfDay20 = timeOfDay16.withFieldAdded(durationFieldType18, (int) (byte) 0);
        int int21 = timeOfDay16.getMillisOfSecond();
        org.joda.time.TimeOfDay timeOfDay23 = timeOfDay16.plusHours(9);
        org.joda.time.TimeOfDay.Property property24 = timeOfDay16.secondOfMinute();
        java.time.ZoneOffset zoneOffset27 = java.time.ZoneOffset.ofHoursMinutes(1, 10);
        java.time.LocalDate localDate28 = java.time.LocalDate.now((java.time.ZoneId) zoneOffset27);
        boolean boolean29 = property24.equals((java.lang.Object) localDate28);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = property24.getFieldType();
        org.joda.time.DurationFieldType durationFieldType31 = dateTimeFieldType30.getDurationType();
        org.joda.time.LocalTime localTime33 = localTime12.withFieldAdded(durationFieldType31, 600);
        org.joda.time.LocalTime.Property property34 = localTime33.millisOfSecond();
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(timeOfDay14);
        org.junit.Assert.assertNotNull(timeOfDay16);
        org.junit.Assert.assertNotNull(hours17);
        org.junit.Assert.assertNotNull(durationFieldType18);
        org.junit.Assert.assertNotNull(timeOfDay20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(timeOfDay23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(zoneOffset27);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertNotNull(durationFieldType31);
        org.junit.Assert.assertNotNull(localTime33);
        org.junit.Assert.assertNotNull(property34);
    }

    @Test
    public void test5143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5143");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((long) 0, chronology2);
        org.joda.time.Chronology chronology4 = localTime3.getChronology();
        java.util.Locale locale5 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale6 = java.util.Locale.GERMANY;
        java.lang.String str7 = locale5.getDisplayScript(locale6);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket9 = new org.joda.time.format.DateTimeParserBucket((long) 1970, chronology4, locale5, (java.lang.Integer) 1);
        org.joda.time.DateTimeField dateTimeField10 = chronology4.clockhourOfDay();
        org.joda.time.Period period15 = new org.joda.time.Period((int) '#', 0, 2, (int) (short) 100);
        org.joda.time.Period period17 = period15.withSeconds(12);
        int int18 = period17.getMillis();
        int[] intArray20 = chronology4.get((org.joda.time.ReadablePeriod) period17, (long) (byte) 10);
        int int21 = period17.getHours();
        org.joda.time.Period period23 = period17.minusWeeks(32770);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 100 + "'", int18 == 100);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[0, 0, 0, 0, 0, 0, 0, 10]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 35 + "'", int21 == 35);
        org.junit.Assert.assertNotNull(period23);
    }

    @Test
    public void test5144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5144");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Duration duration2 = new org.joda.time.Duration(readableInstant0, readableInstant1);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = duration2.toPeriodTo(readableInstant3, periodType4);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.Duration duration8 = new org.joda.time.Duration(readableInstant6, readableInstant7);
        long long9 = duration8.getMillis();
        boolean boolean10 = duration2.isShorterThan((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Duration duration12 = duration2.withMillis((long) 2097);
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.Duration duration15 = new org.joda.time.Duration(readableInstant13, readableInstant14);
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.PeriodType periodType17 = null;
        org.joda.time.Period period18 = duration15.toPeriodTo(readableInstant16, periodType17);
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.Duration duration21 = new org.joda.time.Duration(readableInstant19, readableInstant20);
        long long22 = duration21.getMillis();
        boolean boolean23 = duration15.isShorterThan((org.joda.time.ReadableDuration) duration21);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((long) 3, chronology25);
        org.joda.time.DateTime.Property property27 = dateTime26.dayOfYear();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateMidnight dateMidnight29 = new org.joda.time.DateMidnight((java.lang.Object) dateTime26, chronology28);
        org.joda.time.MutableDateTime mutableDateTime30 = dateTime26.toMutableDateTime();
        mutableDateTime30.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property33 = mutableDateTime30.dayOfWeek();
        org.joda.time.MutableDateTime.Property property34 = mutableDateTime30.year();
        org.joda.time.MutableDateTime.Property property35 = mutableDateTime30.weekyear();
        boolean boolean36 = duration15.equals((java.lang.Object) mutableDateTime30);
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.ReadableInstant readableInstant38 = null;
        org.joda.time.Duration duration39 = new org.joda.time.Duration(readableInstant37, readableInstant38);
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.PeriodType periodType41 = null;
        org.joda.time.Period period42 = duration39.toPeriodTo(readableInstant40, periodType41);
        org.joda.time.ReadableInstant readableInstant43 = null;
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.Duration duration45 = new org.joda.time.Duration(readableInstant43, readableInstant44);
        long long46 = duration45.getMillis();
        boolean boolean47 = duration39.isShorterThan((org.joda.time.ReadableDuration) duration45);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime((long) 3, chronology49);
        org.joda.time.DateTime.Property property51 = dateTime50.dayOfYear();
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.DateMidnight dateMidnight53 = new org.joda.time.DateMidnight((java.lang.Object) dateTime50, chronology52);
        org.joda.time.MutableDateTime mutableDateTime54 = dateTime50.toMutableDateTime();
        mutableDateTime54.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property57 = mutableDateTime54.dayOfWeek();
        org.joda.time.MutableDateTime.Property property58 = mutableDateTime54.year();
        org.joda.time.MutableDateTime.Property property59 = mutableDateTime54.weekyear();
        boolean boolean60 = duration39.equals((java.lang.Object) mutableDateTime54);
        mutableDateTime54.addMonths((int) ' ');
        mutableDateTime54.add((long) (byte) 10);
        org.joda.time.Period period65 = org.joda.time.Period.ZERO;
        org.joda.time.Period period66 = period65.normalizedStandard();
        org.joda.time.Period period68 = period65.plusHours(2);
        java.time.chrono.IsoEra isoEra69 = java.time.chrono.IsoEra.CE;
        boolean boolean70 = period68.equals((java.lang.Object) isoEra69);
        int int71 = period68.getMinutes();
        mutableDateTime54.add((org.joda.time.ReadablePeriod) period68);
        org.joda.time.MutablePeriod mutablePeriod73 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration15, (org.joda.time.ReadableInstant) mutableDateTime54);
        org.joda.time.Interval interval74 = new org.joda.time.Interval((org.joda.time.ReadableDuration) duration2, (org.joda.time.ReadableInstant) mutableDateTime54);
        org.joda.time.Duration duration75 = org.joda.time.Duration.ZERO;
        org.joda.time.Days days76 = duration75.toStandardDays();
        boolean boolean77 = duration2.isLongerThan((org.joda.time.ReadableDuration) duration75);
        long long78 = duration2.getStandardSeconds();
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(mutableDateTime30);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(mutableDateTime54);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(period65);
        org.junit.Assert.assertNotNull(period66);
        org.junit.Assert.assertNotNull(period68);
        org.junit.Assert.assertTrue("'" + isoEra69 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra69.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(duration75);
        org.junit.Assert.assertNotNull(days76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 0L + "'", long78 == 0L);
    }

    @Test
    public void test5145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5145");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 3, chronology1);
        org.joda.time.Period period3 = org.joda.time.Period.ZERO;
        org.joda.time.Period period4 = period3.normalizedStandard();
        org.joda.time.Period period6 = period4.minusMinutes((int) ' ');
        org.joda.time.Period period8 = period6.minusMonths((int) (byte) 0);
        org.joda.time.PeriodType periodType9 = period8.getPeriodType();
        org.joda.time.DateTime dateTime10 = dateTime2.minus((org.joda.time.ReadablePeriod) period8);
        org.joda.time.DateTime dateTime12 = dateTime2.plusHours(34);
        org.joda.time.DateTime dateTime14 = dateTime12.minusSeconds((int) '#');
        org.joda.time.Period period19 = new org.joda.time.Period((int) '#', 0, 2, (int) (short) 100);
        org.joda.time.Period period21 = period19.withSeconds(12);
        int int22 = period21.getMillis();
        org.joda.time.DateTime dateTime23 = dateTime14.plus((org.joda.time.ReadablePeriod) period21);
        org.joda.time.Period period25 = period21.withHours(100);
        int[] intArray26 = period25.getValues();
        org.joda.time.DurationFieldType durationFieldType27 = org.joda.time.DurationFieldType.halfdays();
        int int28 = period25.indexOf(durationFieldType27);
        org.joda.time.Duration duration29 = period25.toStandardDuration();
        org.joda.time.Period period31 = period25.plusDays((-1299));
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 100 + "'", int22 == 100);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[0, 0, 0, 0, 100, 0, 12, 100]");
        org.junit.Assert.assertNotNull(durationFieldType27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(period31);
    }

    @Test
    public void test5146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5146");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.now();
        java.time.LocalDateTime localDateTime2 = localDateTime0.minusYears((long) (byte) 10);
        java.time.LocalDateTime localDateTime3 = java.time.LocalDateTime.now();
        java.time.LocalDateTime localDateTime5 = localDateTime3.minusYears((long) (byte) 10);
        boolean boolean6 = localDateTime0.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime5);
        java.time.LocalDateTime localDateTime7 = java.time.LocalDateTime.now();
        java.time.temporal.ChronoField chronoField8 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime10 = localDateTime7.with((java.time.temporal.TemporalField) chronoField8, (long) 10);
        java.time.LocalDateTime localDateTime12 = localDateTime7.minusMinutes((long) 12);
        boolean boolean13 = localDateTime5.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime7);
        java.time.LocalDate localDate14 = localDateTime7.toLocalDate();
        java.time.chrono.Chronology chronology15 = localDate14.getChronology();
        java.time.LocalDate localDate17 = localDate14.plusDays((long) 15);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertTrue("'" + chronoField8 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField8.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(localDate17);
    }

    @Test
    public void test5147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5147");
        org.joda.time.TimeOfDay timeOfDay1 = org.joda.time.TimeOfDay.fromMillisOfDay((long) (short) 0);
        org.joda.time.TimeOfDay timeOfDay3 = org.joda.time.TimeOfDay.fromMillisOfDay((long) (short) 0);
        org.joda.time.Hours hours4 = org.joda.time.Hours.hoursBetween((org.joda.time.ReadablePartial) timeOfDay1, (org.joda.time.ReadablePartial) timeOfDay3);
        org.joda.time.DurationFieldType durationFieldType5 = org.joda.time.DurationFieldType.hours();
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay3.withFieldAdded(durationFieldType5, (int) (byte) 0);
        int int8 = timeOfDay3.getMillisOfSecond();
        org.joda.time.TimeOfDay timeOfDay10 = timeOfDay3.plusHours(9);
        org.joda.time.TimeOfDay.Property property11 = timeOfDay3.secondOfMinute();
        java.time.ZoneOffset zoneOffset14 = java.time.ZoneOffset.ofHoursMinutes(1, 10);
        java.time.LocalDate localDate15 = java.time.LocalDate.now((java.time.ZoneId) zoneOffset14);
        boolean boolean16 = property11.equals((java.lang.Object) localDate15);
        org.joda.time.DateTimeField dateTimeField17 = property11.getField();
        int int18 = property11.get();
        org.joda.time.TimeOfDay timeOfDay19 = property11.withMaximumValue();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.LocalTime localTime23 = new org.joda.time.LocalTime((long) 0, chronology22);
        org.joda.time.Chronology chronology24 = localTime23.getChronology();
        java.util.Locale locale25 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale26 = java.util.Locale.GERMANY;
        java.lang.String str27 = locale25.getDisplayScript(locale26);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket29 = new org.joda.time.format.DateTimeParserBucket((long) 1970, chronology24, locale25, (java.lang.Integer) 1);
        org.joda.time.DateTimeZone dateTimeZone30 = dateTimeParserBucket29.getZone();
        org.joda.time.DateTime dateTime31 = timeOfDay19.toDateTimeToday(dateTimeZone30);
        int int32 = timeOfDay19.size();
        org.junit.Assert.assertNotNull(timeOfDay1);
        org.junit.Assert.assertNotNull(timeOfDay3);
        org.junit.Assert.assertNotNull(hours4);
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(zoneOffset14);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(timeOfDay19);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 4 + "'", int32 == 4);
    }

    @Test
    public void test5148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5148");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Duration duration2 = new org.joda.time.Duration(readableInstant0, readableInstant1);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = duration2.toPeriodTo(readableInstant3, periodType4);
        long long6 = duration2.getStandardSeconds();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 3, chronology8);
        org.joda.time.DateTime.Property property10 = dateTime9.dayOfYear();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight((java.lang.Object) dateTime9, chronology11);
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight12.minusMonths((-1));
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight12.withDayOfYear((int) ' ');
        org.joda.time.Interval interval17 = duration2.toIntervalTo((org.joda.time.ReadableInstant) dateMidnight16);
        org.joda.time.DateMidnight.Property property18 = dateMidnight16.dayOfYear();
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.Duration duration21 = new org.joda.time.Duration(readableInstant19, readableInstant20);
        org.joda.time.Duration duration23 = duration21.withMillis((-1L));
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((long) 3, chronology25);
        org.joda.time.DateTime.Property property27 = dateTime26.dayOfYear();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateMidnight dateMidnight29 = new org.joda.time.DateMidnight((java.lang.Object) dateTime26, chronology28);
        org.joda.time.DateMidnight dateMidnight31 = dateMidnight29.minusMonths((-1));
        org.joda.time.DateMidnight dateMidnight33 = dateMidnight29.withDayOfYear((int) ' ');
        org.joda.time.PeriodType periodType34 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period35 = duration23.toPeriodFrom((org.joda.time.ReadableInstant) dateMidnight29, periodType34);
        org.joda.time.Duration duration37 = org.joda.time.Duration.standardHours((long) 1);
        org.joda.time.DateMidnight dateMidnight38 = dateMidnight29.plus((org.joda.time.ReadableDuration) duration37);
        long long39 = duration37.getMillis();
        org.joda.time.Duration duration41 = org.joda.time.Duration.standardMinutes((long) 292269054);
        boolean boolean42 = duration37.isLongerThan((org.joda.time.ReadableDuration) duration41);
        org.joda.time.Interval interval43 = new org.joda.time.Interval((org.joda.time.ReadableInstant) dateMidnight16, (org.joda.time.ReadableDuration) duration37);
        org.joda.time.LocalDate localDate44 = dateMidnight16.toLocalDate();
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateMidnight31);
        org.junit.Assert.assertNotNull(dateMidnight33);
        org.junit.Assert.assertNotNull(periodType34);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(dateMidnight38);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 3600000L + "'", long39 == 3600000L);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(localDate44);
    }

    @Test
    public void test5149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5149");
        org.joda.time.Period period8 = org.joda.time.Period.ZERO;
        org.joda.time.Period period9 = period8.normalizedStandard();
        org.joda.time.Period period11 = period9.minusMinutes((int) ' ');
        org.joda.time.Period period13 = period11.minusMonths((int) (byte) 0);
        org.joda.time.PeriodType periodType14 = period11.getPeriodType();
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod(292269054, (int) ':', (int) (short) 10, (int) ':', 9, (int) 'a', 57, 2097, periodType14);
        mutablePeriod15.addMillis(19043);
        mutablePeriod15.setYears((-4));
        org.joda.time.DurationFieldType[] durationFieldTypeArray20 = mutablePeriod15.getFieldTypes();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.LocalTime localTime25 = new org.joda.time.LocalTime((long) 0, chronology24);
        org.joda.time.Chronology chronology26 = localTime25.getChronology();
        java.util.Locale locale27 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale28 = java.util.Locale.GERMANY;
        java.lang.String str29 = locale27.getDisplayScript(locale28);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket31 = new org.joda.time.format.DateTimeParserBucket((long) 1970, chronology26, locale27, (java.lang.Integer) 1);
        dateTimeParserBucket31.setOffset((-1));
        org.joda.time.DateTimeZone dateTimeZone34 = dateTimeParserBucket31.getZone();
        org.joda.time.MutableDateTime mutableDateTime35 = new org.joda.time.MutableDateTime((long) '#', dateTimeZone34);
        org.joda.time.MutableDateTime.Property property36 = mutableDateTime35.yearOfEra();
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.ReadableInstant readableInstant38 = null;
        org.joda.time.Duration duration39 = new org.joda.time.Duration(readableInstant37, readableInstant38);
        org.joda.time.Duration duration41 = duration39.withMillis((-1L));
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime((long) 3, chronology43);
        org.joda.time.DateTime.Property property45 = dateTime44.dayOfYear();
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.DateMidnight dateMidnight47 = new org.joda.time.DateMidnight((java.lang.Object) dateTime44, chronology46);
        org.joda.time.DateMidnight dateMidnight49 = dateMidnight47.minusMonths((-1));
        org.joda.time.DateMidnight dateMidnight51 = dateMidnight47.withDayOfYear((int) ' ');
        org.joda.time.PeriodType periodType52 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period53 = duration41.toPeriodFrom((org.joda.time.ReadableInstant) dateMidnight47, periodType52);
        org.joda.time.Duration duration55 = org.joda.time.Duration.standardHours((long) 1);
        org.joda.time.DateMidnight dateMidnight56 = dateMidnight47.plus((org.joda.time.ReadableDuration) duration55);
        long long57 = duration55.getMillis();
        org.joda.time.Duration duration59 = org.joda.time.Duration.standardMinutes((long) 292269054);
        boolean boolean60 = duration55.isLongerThan((org.joda.time.ReadableDuration) duration59);
        org.joda.time.Duration duration63 = duration55.withDurationAdded((long) 37, 22);
        org.joda.time.PeriodType periodType64 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType65 = periodType64.withMinutesRemoved();
        org.joda.time.PeriodType periodType66 = periodType64.withMinutesRemoved();
        org.joda.time.MutablePeriod mutablePeriod67 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime35, (org.joda.time.ReadableDuration) duration63, periodType66);
        org.joda.time.chrono.EthiopicChronology ethiopicChronology69 = org.joda.time.chrono.EthiopicChronology.getInstanceUTC();
        org.joda.time.TimeOfDay timeOfDay70 = org.joda.time.TimeOfDay.fromMillisOfDay((long) (-32769), (org.joda.time.Chronology) ethiopicChronology69);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod71 = new org.joda.time.MutablePeriod((java.lang.Object) durationFieldTypeArray20, periodType66, (org.joda.time.Chronology) ethiopicChronology69);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: [Lorg.joda.time.DurationFieldType;");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertNotNull(durationFieldTypeArray20);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(dateMidnight49);
        org.junit.Assert.assertNotNull(dateMidnight51);
        org.junit.Assert.assertNotNull(periodType52);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertNotNull(dateMidnight56);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 3600000L + "'", long57 == 3600000L);
        org.junit.Assert.assertNotNull(duration59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(duration63);
        org.junit.Assert.assertNotNull(periodType64);
        org.junit.Assert.assertNotNull(periodType65);
        org.junit.Assert.assertNotNull(periodType66);
        org.junit.Assert.assertNotNull(ethiopicChronology69);
        org.junit.Assert.assertNotNull(timeOfDay70);
    }

    @Test
    public void test5150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5150");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 3, chronology1);
        org.joda.time.DateTime.Property property3 = dateTime2.dayOfYear();
        org.joda.time.DateTime.Property property4 = dateTime2.dayOfYear();
        org.joda.time.DateTime dateTime6 = property4.addToCopy(1645434656L);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime6);
    }

    @Test
    public void test5151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5151");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Duration duration2 = new org.joda.time.Duration(readableInstant0, readableInstant1);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = duration2.toPeriodTo(readableInstant3, periodType4);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.Duration duration8 = new org.joda.time.Duration(readableInstant6, readableInstant7);
        long long9 = duration8.getMillis();
        boolean boolean10 = duration2.isShorterThan((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) 3, chronology12);
        org.joda.time.DateTime.Property property14 = dateTime13.dayOfYear();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight((java.lang.Object) dateTime13, chronology15);
        org.joda.time.MutableDateTime mutableDateTime17 = dateTime13.toMutableDateTime();
        mutableDateTime17.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime17.dayOfWeek();
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime17.year();
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime17.weekyear();
        boolean boolean23 = duration2.equals((java.lang.Object) mutableDateTime17);
        mutableDateTime17.addMonths((int) ' ');
        mutableDateTime17.add((long) (byte) 10);
        org.joda.time.Period period28 = org.joda.time.Period.ZERO;
        org.joda.time.Period period29 = period28.normalizedStandard();
        org.joda.time.Period period31 = period28.plusHours(2);
        java.time.chrono.IsoEra isoEra32 = java.time.chrono.IsoEra.CE;
        boolean boolean33 = period31.equals((java.lang.Object) isoEra32);
        int int34 = period31.getMinutes();
        mutableDateTime17.add((org.joda.time.ReadablePeriod) period31);
        java.util.TimeZone timeZone37 = null;
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forTimeZone(timeZone37);
        org.joda.time.DateMidnight dateMidnight39 = new org.joda.time.DateMidnight((long) 1970, dateTimeZone38);
        long long42 = dateTimeZone38.convertLocalToUTC((long) 3, false);
        long long45 = dateTimeZone38.convertLocalToUTC(0L, true);
        mutableDateTime17.setZoneRetainFields(dateTimeZone38);
        java.lang.String str47 = dateTimeZone38.toString();
        org.joda.time.chrono.EthiopicChronology ethiopicChronology48 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone38);
        org.joda.time.DateTimeField dateTimeField49 = ethiopicChronology48.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone50 = ethiopicChronology48.getZone();
        org.joda.time.DateTimeField dateTimeField51 = ethiopicChronology48.era();
        org.joda.time.DateTimeField dateTimeField52 = ethiopicChronology48.weekOfWeekyear();
        org.joda.time.DurationField durationField53 = ethiopicChronology48.months();
        org.joda.time.DateTimeField dateTimeField54 = ethiopicChronology48.era();
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertTrue("'" + isoEra32 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra32.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 3L + "'", long42 == 3L);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Etc/UTC" + "'", str47, "Etc/UTC");
        org.junit.Assert.assertNotNull(ethiopicChronology48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(durationField53);
        org.junit.Assert.assertNotNull(dateTimeField54);
    }

    @Test
    public void test5152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5152");
        java.nio.charset.Charset charset0 = java.nio.charset.Charset.defaultCharset();
        java.nio.charset.CharsetDecoder charsetDecoder1 = charset0.newDecoder();
        java.nio.charset.Charset charset2 = java.nio.charset.Charset.defaultCharset();
        boolean boolean3 = charset0.contains(charset2);
        java.nio.charset.CharsetEncoder charsetEncoder4 = charset0.newEncoder();
        char[] charArray5 = new char[] {};
        java.nio.CharBuffer charBuffer6 = java.nio.CharBuffer.wrap(charArray5);
        java.nio.ByteBuffer byteBuffer7 = charsetEncoder4.encode(charBuffer6);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.CharBuffer charBuffer10 = charBuffer6.subSequence(1097, 15);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charset0);
        org.junit.Assert.assertNotNull(charsetDecoder1);
        org.junit.Assert.assertNotNull(charset2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(charsetEncoder4);
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[]");
        org.junit.Assert.assertNotNull(charBuffer6);
        org.junit.Assert.assertNotNull(byteBuffer7);
    }

    @Test
    public void test5153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5153");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 3, chronology1);
        org.joda.time.Period period3 = org.joda.time.Period.ZERO;
        org.joda.time.Period period4 = period3.normalizedStandard();
        org.joda.time.Period period6 = period4.minusMinutes((int) ' ');
        org.joda.time.Period period8 = period6.minusMonths((int) (byte) 0);
        org.joda.time.PeriodType periodType9 = period8.getPeriodType();
        org.joda.time.DateTime dateTime10 = dateTime2.minus((org.joda.time.ReadablePeriod) period8);
        org.joda.time.LocalDateTime localDateTime11 = dateTime2.toLocalDateTime();
        org.joda.time.LocalDate localDate12 = localDateTime11.toLocalDate();
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDate12);
    }

    @Test
    public void test5154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5154");
        org.joda.time.Weeks weeks0 = org.joda.time.Weeks.ONE;
        org.joda.time.Hours hours1 = weeks0.toStandardHours();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalTime localTime4 = new org.joda.time.LocalTime((long) 0, chronology3);
        org.joda.time.Chronology chronology5 = localTime4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.weekyearOfCentury();
        org.joda.time.DurationField durationField7 = chronology5.weekyears();
        org.joda.time.Chronology chronology8 = chronology5.withUTC();
        org.joda.time.Weeks weeks9 = org.joda.time.Weeks.ONE;
        java.util.concurrent.TimeUnit timeUnit10 = java.util.concurrent.TimeUnit.NANOSECONDS;
        boolean boolean11 = weeks9.equals((java.lang.Object) timeUnit10);
        org.joda.time.MutablePeriod mutablePeriod12 = weeks9.toMutablePeriod();
        int int13 = mutablePeriod12.getSeconds();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) 3, chronology15);
        org.joda.time.DateTime.Property property17 = dateTime16.dayOfYear();
        org.joda.time.Interval interval18 = property17.toInterval();
        org.joda.time.DateTime dateTime19 = interval18.getEnd();
        mutablePeriod12.setPeriod((org.joda.time.ReadableInterval) interval18);
        mutablePeriod12.setWeeks(20);
        mutablePeriod12.setMinutes((int) 'a');
        long long27 = chronology5.add((org.joda.time.ReadablePeriod) mutablePeriod12, 3601000000001L, 23);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval28 = new org.joda.time.Interval((java.lang.Object) hours1, chronology5);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No interval converter found for type: org.joda.time.Hours");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(weeks0);
        org.junit.Assert.assertNotNull(hours1);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(weeks9);
        org.junit.Assert.assertNotNull(timeUnit10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(mutablePeriod12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(interval18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 3881329060001L + "'", long27 == 3881329060001L);
    }

    @Test
    public void test5155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5155");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((long) 0, chronology1);
        org.joda.time.Chronology chronology3 = localTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField4 = chronology3.weekyearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime5 = org.joda.time.MutableDateTime.now(chronology3);
        org.joda.time.DateTimeField dateTimeField6 = chronology3.monthOfYear();
        java.lang.String str8 = dateTimeField6.getAsText((long) 2);
        int int9 = dateTimeField6.getMaximumValue();
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(dateTimeField6);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Januar" + "'", str8, "Januar");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 12 + "'", int9 == 12);
    }

    @Test
    public void test5156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5156");
        java.io.File file0 = null;
        java.io.File file2 = new java.io.File(file0, "1970-01-01T00:00:00.003Z");
        java.net.URL uRL3 = file2.toURL();
        java.io.File file4 = null;
        java.io.File file6 = new java.io.File(file4, "1970-01-01T00:00:00.003Z");
        java.net.URL uRL7 = file6.toURL();
        boolean boolean8 = uRL3.sameFile(uRL7);
        java.lang.String str9 = uRL3.getPath();
        java.net.URLConnection uRLConnection10 = uRL3.openConnection();
        java.lang.String str11 = uRLConnection10.getContentType();
        long long14 = uRLConnection10.getHeaderFieldLong("zh-TW", 57L);
        long long17 = uRLConnection10.getHeaderFieldLong("x-windows-iso2022jp", (long) 97);
        java.lang.String str18 = uRLConnection10.getContentType();
        java.lang.String str19 = uRLConnection10.toString();
        uRLConnection10.setReadTimeout((int) (byte) 10);
        org.junit.Assert.assertNull("file2.getParent() == null", file2.getParent());
        org.junit.Assert.assertEquals(file2.toString(), "1970-01-01T00:00:00.003Z");
        org.junit.Assert.assertNotNull(uRL3);
// flaky:         org.junit.Assert.assertEquals(uRL3.toString(), "file:/experiment/1970-01-01T00:00:00.003Z");
        org.junit.Assert.assertNull("file6.getParent() == null", file6.getParent());
        org.junit.Assert.assertEquals(file6.toString(), "1970-01-01T00:00:00.003Z");
        org.junit.Assert.assertNotNull(uRL7);
// flaky:         org.junit.Assert.assertEquals(uRL7.toString(), "file:/experiment/1970-01-01T00:00:00.003Z");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "/experiment/1970-01-01T00:00:00.003Z" + "'", str9, "/experiment/1970-01-01T00:00:00.003Z");
        org.junit.Assert.assertNotNull(uRLConnection10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "content/unknown" + "'", str11, "content/unknown");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 57L + "'", long14 == 57L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 97L + "'", long17 == 97L);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "content/unknown" + "'", str18, "content/unknown");
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "sun.net.www.protocol.file.FileURLConnection:file:/experiment/1970-01-01T00:00:00.003Z" + "'", str19, "sun.net.www.protocol.file.FileURLConnection:file:/experiment/1970-01-01T00:00:00.003Z");
    }

    @Test
    public void test5157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5157");
        org.joda.time.TimeOfDay timeOfDay1 = org.joda.time.TimeOfDay.fromMillisOfDay((long) (short) 0);
        org.joda.time.TimeOfDay timeOfDay3 = org.joda.time.TimeOfDay.fromMillisOfDay((long) (short) 0);
        org.joda.time.Hours hours4 = org.joda.time.Hours.hoursBetween((org.joda.time.ReadablePartial) timeOfDay1, (org.joda.time.ReadablePartial) timeOfDay3);
        org.joda.time.DurationFieldType durationFieldType5 = org.joda.time.DurationFieldType.hours();
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay3.withFieldAdded(durationFieldType5, (int) (byte) 0);
        int int8 = timeOfDay3.getMillisOfSecond();
        org.joda.time.TimeOfDay timeOfDay10 = timeOfDay3.plusHours(9);
        org.joda.time.TimeOfDay.Property property11 = timeOfDay3.secondOfMinute();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) 3, chronology13);
        org.joda.time.DateTime.Property property15 = dateTime14.dayOfYear();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight((java.lang.Object) dateTime14, chronology16);
        org.joda.time.MutableDateTime mutableDateTime18 = dateTime14.toMutableDateTime();
        mutableDateTime18.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime18.millisOfDay();
        org.joda.time.PeriodType periodType22 = org.joda.time.PeriodType.years();
        org.joda.time.DurationFieldType durationFieldType23 = org.joda.time.DurationFieldType.halfdays();
        int int24 = periodType22.indexOf(durationFieldType23);
        mutableDateTime18.add(durationFieldType23, (int) 'a');
        java.util.TimeZone timeZone28 = null;
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forTimeZone(timeZone28);
        org.joda.time.DateMidnight dateMidnight30 = new org.joda.time.DateMidnight((long) 1970, dateTimeZone29);
        mutableDateTime18.setTime((org.joda.time.ReadableInstant) dateMidnight30);
        int int32 = property11.compareTo((org.joda.time.ReadableInstant) dateMidnight30);
        java.lang.String str33 = property11.getName();
        java.util.Locale locale34 = null;
        java.lang.String str35 = property11.getAsShortText(locale34);
        java.lang.String str36 = property11.getName();
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = property11.getFieldType();
        org.junit.Assert.assertNotNull(timeOfDay1);
        org.junit.Assert.assertNotNull(timeOfDay3);
        org.junit.Assert.assertNotNull(hours4);
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertNotNull(durationFieldType23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "secondOfMinute" + "'", str33, "secondOfMinute");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "0" + "'", str35, "0");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "secondOfMinute" + "'", str36, "secondOfMinute");
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
    }

    @Test
    public void test5158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5158");
        java.util.stream.DoubleStream.Builder builder0 = java.util.stream.DoubleStream.builder();
        builder0.accept((double) 1645436337738L);
        org.junit.Assert.assertNotNull(builder0);
    }

    @Test
    public void test5159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5159");
        float[] floatArray2 = new float[] { (-1L), (byte) -1 };
        java.nio.FloatBuffer floatBuffer3 = java.nio.FloatBuffer.wrap(floatArray2);
        java.nio.FloatBuffer floatBuffer4 = floatBuffer3.compact();
        java.nio.FloatBuffer floatBuffer5 = floatBuffer3.asReadOnlyBuffer();
        java.nio.ByteOrder byteOrder6 = floatBuffer3.order();
        java.nio.FloatBuffer floatBuffer7 = floatBuffer3.asReadOnlyBuffer();
        float[] floatArray8 = floatBuffer3.array();
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[-1.0, -1.0]");
        org.junit.Assert.assertNotNull(floatBuffer3);
        org.junit.Assert.assertNotNull(floatBuffer4);
        org.junit.Assert.assertNotNull(floatBuffer5);
        org.junit.Assert.assertNotNull(byteOrder6);
        org.junit.Assert.assertNotNull(floatBuffer7);
        org.junit.Assert.assertNotNull(floatArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray8), "[-1.0, -1.0]");
    }

    @Test
    public void test5160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5160");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        mutableDateTime0.addMonths(0);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime0.setSecondOfMinute(86);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 86 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test5161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5161");
        org.joda.time.chrono.EthiopicChronology ethiopicChronology0 = org.joda.time.chrono.EthiopicChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = ethiopicChronology0.dayOfWeek();
        org.joda.time.DurationField durationField2 = ethiopicChronology0.centuries();
        org.joda.time.DateTimeField dateTimeField3 = ethiopicChronology0.weekyear();
        long long6 = dateTimeField3.addWrapField(1645434622L, 31);
        org.junit.Assert.assertNotNull(ethiopicChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(durationField2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 980211834622L + "'", long6 == 980211834622L);
    }

    @Test
    public void test5162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5162");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap3 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList4 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap3);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap5 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList6 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap5);
        java.util.Set<java.lang.String> strSet7 = java.time.ZoneId.getAvailableZoneIds();
        java.util.stream.Stream<java.lang.String> strStream8 = strSet7.parallelStream();
        boolean boolean10 = strSet7.remove((java.lang.Object) 0);
        java.time.LocalTime localTime15 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime16 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime15);
        java.time.LocalTime localTime21 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime22 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime21);
        java.time.temporal.ChronoField chronoField23 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime25 = localTime21.with((java.time.temporal.TemporalField) chronoField23, (long) (short) 1);
        long long26 = localTime15.getLong((java.time.temporal.TemporalField) chronoField23);
        java.time.LocalTime localTime28 = localTime15.withSecond((int) (short) 1);
        java.time.temporal.ChronoField chronoField29 = java.time.temporal.ChronoField.SECOND_OF_DAY;
        java.time.temporal.ValueRange valueRange30 = localTime28.range((java.time.temporal.TemporalField) chronoField29);
        boolean boolean31 = strSet7.remove((java.lang.Object) chronoField29);
        java.util.Spliterator<java.lang.String> strSpliterator32 = strSet7.spliterator();
        java.util.Set<java.lang.String> strSet33 = java.time.ZoneId.getAvailableZoneIds();
        java.util.stream.Stream<java.lang.String> strStream34 = strSet33.parallelStream();
        boolean boolean36 = strSet33.remove((java.lang.Object) 0);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.LocalTime localTime39 = new org.joda.time.LocalTime((long) 0, chronology38);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime((long) 3, chronology41);
        org.joda.time.DateTime.Property property43 = dateTime42.dayOfYear();
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.DateMidnight dateMidnight45 = new org.joda.time.DateMidnight((java.lang.Object) dateTime42, chronology44);
        org.joda.time.DateTime dateTime46 = localTime39.toDateTime((org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.LocalTime localTime48 = localTime39.plusHours(3);
        int int49 = localTime48.getMillisOfDay();
        org.joda.time.LocalTime.Property property50 = localTime48.millisOfSecond();
        org.joda.time.LocalTime localTime51 = property50.roundFloorCopy();
        org.joda.time.LocalTime localTime53 = property50.addCopy((long) 59);
        boolean boolean54 = strSet33.equals((java.lang.Object) 59);
        boolean boolean55 = strSet7.containsAll((java.util.Collection<java.lang.String>) strSet33);
        java.lang.String str56 = java.util.Locale.lookupTag(languageRangeList6, (java.util.Collection<java.lang.String>) strSet33);
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(languageRangeList4);
        org.junit.Assert.assertNotNull(languageRangeList6);
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertNotNull(strStream8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertTrue("'" + chronoField23 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField23.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 3601000000001L + "'", long26 == 3601000000001L);
        org.junit.Assert.assertNotNull(localTime28);
        org.junit.Assert.assertTrue("'" + chronoField29 + "' != '" + java.time.temporal.ChronoField.SECOND_OF_DAY + "'", chronoField29.equals(java.time.temporal.ChronoField.SECOND_OF_DAY));
        org.junit.Assert.assertNotNull(valueRange30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(strSpliterator32);
        org.junit.Assert.assertNotNull(strSet33);
        org.junit.Assert.assertNotNull(strStream34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(localTime48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 10800000 + "'", int49 == 10800000);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(localTime51);
        org.junit.Assert.assertNotNull(localTime53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNull(str56);
    }

    @Test
    public void test5163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5163");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 3, chronology1);
        org.joda.time.DateTime.Property property3 = dateTime2.dayOfYear();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight((java.lang.Object) dateTime2, chronology4);
        org.joda.time.MutableDateTime mutableDateTime6 = dateTime2.toMutableDateTime();
        mutableDateTime6.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime6.dayOfWeek();
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime6.year();
        java.util.TimeZone timeZone11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        mutableDateTime6.setZone(dateTimeZone12);
        java.util.Locale locale15 = java.util.Locale.TAIWAN;
        java.lang.String str16 = dateTimeZone12.getShortName((long) 64, locale15);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) 3, chronology18);
        org.joda.time.DateTime.Property property20 = dateTime19.dayOfYear();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight((java.lang.Object) dateTime19, chronology21);
        org.joda.time.MutableDateTime mutableDateTime23 = dateTime19.toMutableDateTime();
        mutableDateTime23.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property26 = mutableDateTime23.dayOfWeek();
        org.joda.time.MutableDateTime.Property property27 = mutableDateTime23.year();
        java.util.TimeZone timeZone28 = null;
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forTimeZone(timeZone28);
        mutableDateTime23.setZone(dateTimeZone29);
        java.util.Locale locale32 = java.util.Locale.TAIWAN;
        java.lang.String str33 = dateTimeZone29.getShortName((long) 64, locale32);
        long long35 = dateTimeZone12.getMillisKeepLocal(dateTimeZone29, (long) 64);
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime(dateTimeZone12);
        org.joda.time.DateTime dateTime37 = org.joda.time.DateTime.now(dateTimeZone12);
        org.joda.time.DateTime dateTime39 = dateTime37.minusSeconds(47);
        org.joda.time.TimeOfDay timeOfDay40 = dateTime37.toTimeOfDay();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+00:00" + "'", str16, "+00:00");
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(mutableDateTime23);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "+00:00" + "'", str33, "+00:00");
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 64L + "'", long35 == 64L);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(timeOfDay40);
    }

    @Test
    public void test5164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5164");
        org.joda.time.Period period4 = new org.joda.time.Period((int) ':', 49, 32769, 120);
    }

    @Test
    public void test5165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5165");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 3, chronology1);
        org.joda.time.DateTime.Property property3 = dateTime2.dayOfYear();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight((java.lang.Object) dateTime2, chronology4);
        org.joda.time.MutableDateTime mutableDateTime6 = dateTime2.toMutableDateTime();
        org.joda.time.Days days7 = org.joda.time.Days.ONE;
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadablePeriod) days7);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) 3, chronology10);
        org.joda.time.DateTime.Property property12 = dateTime11.dayOfYear();
        org.joda.time.Interval interval13 = property12.toInterval();
        mutableInterval8.setInterval((org.joda.time.ReadableInterval) interval13);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) 3, chronology16);
        org.joda.time.DateTime.Property property18 = dateTime17.dayOfYear();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight((java.lang.Object) dateTime17, chronology19);
        org.joda.time.DateMidnight.Property property21 = dateMidnight20.dayOfMonth();
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.Duration duration24 = new org.joda.time.Duration(readableInstant22, readableInstant23);
        org.joda.time.Duration duration26 = duration24.withMillis((-1L));
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.Duration duration28 = duration24.minus(readableDuration27);
        org.joda.time.DateMidnight dateMidnight29 = dateMidnight20.plus((org.joda.time.ReadableDuration) duration28);
        mutableInterval8.setDurationAfterStart((org.joda.time.ReadableDuration) duration28);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((long) 3, chronology32);
        org.joda.time.DateTime.Property property34 = dateTime33.dayOfYear();
        org.joda.time.Interval interval35 = property34.toInterval();
        org.joda.time.Period period36 = org.joda.time.Period.ZERO;
        org.joda.time.Period period37 = period36.normalizedStandard();
        org.joda.time.Period period39 = period37.minusMinutes((int) ' ');
        org.joda.time.Period period41 = period39.withMinutes(32769);
        boolean boolean42 = interval35.equals((java.lang.Object) period41);
        org.joda.time.Period period43 = org.joda.time.Period.ZERO;
        org.joda.time.Period period44 = period43.normalizedStandard();
        org.joda.time.Period period46 = period43.plusHours(2);
        int int47 = period43.getDays();
        org.joda.time.Interval interval48 = interval35.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period43);
        org.joda.time.Interval interval50 = interval35.withEndMillis((long) (short) 0);
        long long51 = interval35.getStartMillis();
        mutableInterval8.setInterval((org.joda.time.ReadableInterval) interval35);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime((long) 3, chronology54);
        org.joda.time.DateTime.Property property56 = dateTime55.dayOfYear();
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.DateMidnight dateMidnight58 = new org.joda.time.DateMidnight((java.lang.Object) dateTime55, chronology57);
        org.joda.time.MutableDateTime mutableDateTime59 = dateTime55.toMutableDateTime();
        mutableDateTime59.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property62 = mutableDateTime59.millisOfDay();
        org.joda.time.PeriodType periodType63 = org.joda.time.PeriodType.years();
        org.joda.time.DurationFieldType durationFieldType64 = org.joda.time.DurationFieldType.halfdays();
        int int65 = periodType63.indexOf(durationFieldType64);
        mutableDateTime59.add(durationFieldType64, (int) 'a');
        java.util.TimeZone timeZone69 = null;
        org.joda.time.DateTimeZone dateTimeZone70 = org.joda.time.DateTimeZone.forTimeZone(timeZone69);
        org.joda.time.DateMidnight dateMidnight71 = new org.joda.time.DateMidnight((long) 1970, dateTimeZone70);
        mutableDateTime59.setTime((org.joda.time.ReadableInstant) dateMidnight71);
        mutableDateTime59.addWeekyears(52);
        org.joda.time.MutableDateTime.Property property75 = mutableDateTime59.secondOfMinute();
        org.joda.time.Interval interval76 = interval35.withEnd((org.joda.time.ReadableInstant) mutableDateTime59);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(days7);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(interval48);
        org.junit.Assert.assertNotNull(interval50);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(mutableDateTime59);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(periodType63);
        org.junit.Assert.assertNotNull(durationFieldType64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertNotNull(dateTimeZone70);
        org.junit.Assert.assertNotNull(property75);
        org.junit.Assert.assertNotNull(interval76);
    }

    @Test
    public void test5166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5166");
        org.joda.time.TimeOfDay timeOfDay1 = org.joda.time.TimeOfDay.fromMillisOfDay((long) (short) 0);
        org.joda.time.TimeOfDay timeOfDay3 = org.joda.time.TimeOfDay.fromMillisOfDay((long) (short) 0);
        org.joda.time.Hours hours4 = org.joda.time.Hours.hoursBetween((org.joda.time.ReadablePartial) timeOfDay1, (org.joda.time.ReadablePartial) timeOfDay3);
        org.joda.time.DurationFieldType durationFieldType5 = org.joda.time.DurationFieldType.hours();
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay3.withFieldAdded(durationFieldType5, (int) (byte) 0);
        int int8 = timeOfDay3.getMillisOfSecond();
        org.joda.time.TimeOfDay timeOfDay10 = timeOfDay3.plusHours(9);
        org.joda.time.TimeOfDay.Property property11 = timeOfDay3.secondOfMinute();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) 3, chronology13);
        org.joda.time.DateTime.Property property15 = dateTime14.dayOfYear();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight((java.lang.Object) dateTime14, chronology16);
        org.joda.time.MutableDateTime mutableDateTime18 = dateTime14.toMutableDateTime();
        mutableDateTime18.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime18.millisOfDay();
        org.joda.time.PeriodType periodType22 = org.joda.time.PeriodType.years();
        org.joda.time.DurationFieldType durationFieldType23 = org.joda.time.DurationFieldType.halfdays();
        int int24 = periodType22.indexOf(durationFieldType23);
        mutableDateTime18.add(durationFieldType23, (int) 'a');
        java.util.TimeZone timeZone28 = null;
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forTimeZone(timeZone28);
        org.joda.time.DateMidnight dateMidnight30 = new org.joda.time.DateMidnight((long) 1970, dateTimeZone29);
        mutableDateTime18.setTime((org.joda.time.ReadableInstant) dateMidnight30);
        int int32 = property11.compareTo((org.joda.time.ReadableInstant) dateMidnight30);
        org.joda.time.DateMidnight.Property property33 = dateMidnight30.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField34 = property33.getField();
        org.junit.Assert.assertNotNull(timeOfDay1);
        org.junit.Assert.assertNotNull(timeOfDay3);
        org.junit.Assert.assertNotNull(hours4);
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertNotNull(durationFieldType23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(dateTimeField34);
    }

    @Test
    public void test5167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5167");
        org.joda.time.Instant instant1 = org.joda.time.Instant.parse("2022-02-21T09:37:22.346");
        org.joda.time.MutableDateTime mutableDateTime2 = instant1.toMutableDateTime();
        org.junit.Assert.assertNotNull(instant1);
        org.junit.Assert.assertNotNull(mutableDateTime2);
    }

    @Test
    public void test5168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5168");
        java.util.stream.DoubleStream doubleStream0 = java.util.stream.DoubleStream.empty();
        java.util.stream.DoubleStream doubleStream2 = doubleStream0.skip(0L);
        java.util.OptionalDouble optionalDouble3 = doubleStream2.max();
        boolean boolean4 = optionalDouble3.isPresent();
        org.junit.Assert.assertNotNull(doubleStream0);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertNotNull(optionalDouble3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test5169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5169");
        java.time.Duration duration1 = java.time.Duration.ofMinutes(1314000057L);
        org.junit.Assert.assertNotNull(duration1);
    }

    @Test
    public void test5170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5170");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Locale locale3 = java.util.Locale.JAPAN;
        java.util.Locale[] localeArray4 = new java.util.Locale[] { locale3 };
        java.util.ArrayList<java.util.Locale> localeList5 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList5, localeArray4);
        java.util.List<java.util.Locale> localeList7 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList5);
        org.joda.time.Period period8 = org.joda.time.Period.ZERO;
        org.joda.time.Period period9 = period8.normalizedStandard();
        org.joda.time.Period period11 = period8.plusHours(2);
        java.time.chrono.IsoEra isoEra12 = java.time.chrono.IsoEra.CE;
        boolean boolean13 = period11.equals((java.lang.Object) isoEra12);
        java.time.LocalTime localTime18 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime19 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime18);
        java.time.LocalTime localTime24 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime25 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime24);
        java.time.temporal.ChronoField chronoField26 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime28 = localTime24.with((java.time.temporal.TemporalField) chronoField26, (long) (short) 1);
        long long29 = localTime18.getLong((java.time.temporal.TemporalField) chronoField26);
        boolean boolean30 = isoEra12.isSupported((java.time.temporal.TemporalField) chronoField26);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery31 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period32 = isoEra12.query(periodTemporalQuery31);
        boolean boolean33 = period32.isNegative();
        java.time.Period period35 = period32.plusDays((long) ' ');
        boolean boolean36 = period32.isNegative();
        java.time.Period period38 = period32.minusYears((long) 10);
        int int39 = localeList7.lastIndexOf((java.lang.Object) period32);
        java.time.Period period40 = period32.normalized();
        boolean boolean41 = period40.isZero();
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(localeArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(localeList7);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertTrue("'" + isoEra12 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra12.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertNotNull(localTime24);
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertTrue("'" + chronoField26 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField26.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime28);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 3601000000001L + "'", long29 == 3601000000001L);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(periodTemporalQuery31);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
    }

    @Test
    public void test5171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5171");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        int int1 = localDate0.getDayOfWeek();
        org.joda.time.LocalDate.Property property2 = localDate0.dayOfMonth();
        org.joda.time.Chronology chronology3 = localDate0.getChronology();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(chronology3);
    }

    @Test
    public void test5172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5172");
        java.util.stream.IntStream intStream2 = java.util.stream.IntStream.rangeClosed(100, (int) '4');
        java.util.stream.IntStream intStream4 = intStream2.skip((long) 256);
        java.util.stream.IntStream intStream5 = intStream4.sorted();
        int[] intArray6 = intStream5.toArray();
        // The following exception was thrown during execution in test generation
        try {
            java.util.OptionalInt optionalInt7 = intStream5.findFirst();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: stream has already been operated upon or closed");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intStream2);
        org.junit.Assert.assertNotNull(intStream4);
        org.junit.Assert.assertNotNull(intStream5);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[]");
    }

    @Test
    public void test5173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5173");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Duration duration2 = new org.joda.time.Duration(readableInstant0, readableInstant1);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = duration2.toPeriodTo(readableInstant3, periodType4);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.Duration duration8 = new org.joda.time.Duration(readableInstant6, readableInstant7);
        long long9 = duration8.getMillis();
        boolean boolean10 = duration2.isShorterThan((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) 3, chronology12);
        org.joda.time.DateTime.Property property14 = dateTime13.dayOfYear();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight((java.lang.Object) dateTime13, chronology15);
        org.joda.time.MutableDateTime mutableDateTime17 = dateTime13.toMutableDateTime();
        mutableDateTime17.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime17.dayOfWeek();
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime17.year();
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime17.weekyear();
        boolean boolean23 = duration2.equals((java.lang.Object) mutableDateTime17);
        mutableDateTime17.addMonths((int) ' ');
        mutableDateTime17.add((long) (byte) 10);
        org.joda.time.Period period28 = org.joda.time.Period.ZERO;
        org.joda.time.Period period29 = period28.normalizedStandard();
        org.joda.time.Period period31 = period28.plusHours(2);
        java.time.chrono.IsoEra isoEra32 = java.time.chrono.IsoEra.CE;
        boolean boolean33 = period31.equals((java.lang.Object) isoEra32);
        int int34 = period31.getMinutes();
        mutableDateTime17.add((org.joda.time.ReadablePeriod) period31);
        java.util.TimeZone timeZone37 = null;
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forTimeZone(timeZone37);
        org.joda.time.DateMidnight dateMidnight39 = new org.joda.time.DateMidnight((long) 1970, dateTimeZone38);
        long long42 = dateTimeZone38.convertLocalToUTC((long) 3, false);
        long long45 = dateTimeZone38.convertLocalToUTC(0L, true);
        mutableDateTime17.setZoneRetainFields(dateTimeZone38);
        java.lang.String str47 = dateTimeZone38.toString();
        org.joda.time.chrono.EthiopicChronology ethiopicChronology48 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone38);
        org.joda.time.DateTimeField dateTimeField49 = ethiopicChronology48.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone50 = ethiopicChronology48.getZone();
        org.joda.time.DateTimeField dateTimeField51 = ethiopicChronology48.era();
        org.joda.time.DateTimeField dateTimeField52 = ethiopicChronology48.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone53 = ethiopicChronology48.getZone();
        org.joda.time.Chronology chronology54 = ethiopicChronology48.withUTC();
        long long58 = chronology54.add(0L, (long) 3600000, 23);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertTrue("'" + isoEra32 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra32.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 3L + "'", long42 == 3L);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Etc/UTC" + "'", str47, "Etc/UTC");
        org.junit.Assert.assertNotNull(ethiopicChronology48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 82800000L + "'", long58 == 82800000L);
    }

    @Test
    public void test5174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5174");
        org.joda.time.Duration duration1 = org.joda.time.Duration.millis((long) '#');
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((long) 3, chronology3);
        org.joda.time.DateTime.Property property5 = dateTime4.dayOfYear();
        org.joda.time.Interval interval6 = property5.toInterval();
        org.joda.time.DateTimeField dateTimeField7 = property5.getField();
        org.joda.time.DateTime dateTime8 = property5.roundHalfEvenCopy();
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Duration duration11 = new org.joda.time.Duration(readableInstant9, readableInstant10);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.PeriodType periodType13 = null;
        org.joda.time.Period period14 = duration11.toPeriodTo(readableInstant12, periodType13);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.Duration duration17 = new org.joda.time.Duration(readableInstant15, readableInstant16);
        long long18 = duration17.getMillis();
        boolean boolean19 = duration11.isShorterThan((org.joda.time.ReadableDuration) duration17);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) 3, chronology21);
        org.joda.time.DateTime.Property property23 = dateTime22.dayOfYear();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateMidnight dateMidnight25 = new org.joda.time.DateMidnight((java.lang.Object) dateTime22, chronology24);
        org.joda.time.MutableDateTime mutableDateTime26 = dateTime22.toMutableDateTime();
        mutableDateTime26.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property29 = mutableDateTime26.dayOfWeek();
        org.joda.time.MutableDateTime.Property property30 = mutableDateTime26.year();
        org.joda.time.MutableDateTime.Property property31 = mutableDateTime26.weekyear();
        boolean boolean32 = duration11.equals((java.lang.Object) mutableDateTime26);
        mutableDateTime26.addMonths((int) ' ');
        mutableDateTime26.add((long) (byte) 10);
        org.joda.time.Period period37 = org.joda.time.Period.ZERO;
        org.joda.time.Period period38 = period37.normalizedStandard();
        org.joda.time.Period period40 = period37.plusHours(2);
        java.time.chrono.IsoEra isoEra41 = java.time.chrono.IsoEra.CE;
        boolean boolean42 = period40.equals((java.lang.Object) isoEra41);
        int int43 = period40.getMinutes();
        mutableDateTime26.add((org.joda.time.ReadablePeriod) period40);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.LocalDateTime localDateTime46 = new org.joda.time.LocalDateTime(chronology45);
        org.joda.time.LocalDateTime localDateTime48 = localDateTime46.withYearOfCentury((int) 'a');
        int int49 = localDateTime48.getDayOfMonth();
        org.joda.time.LocalDateTime localDateTime51 = localDateTime48.withMinuteOfHour((int) ' ');
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = org.joda.time.DateTimeFieldType.weekyear();
        int int53 = localDateTime48.get(dateTimeFieldType52);
        org.joda.time.MutableDateTime.Property property54 = mutableDateTime26.property(dateTimeFieldType52);
        org.joda.time.DateTime dateTime56 = dateTime8.withField(dateTimeFieldType52, (int) '/');
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.LocalDateTime localDateTime58 = new org.joda.time.LocalDateTime(chronology57);
        org.joda.time.LocalDateTime localDateTime60 = localDateTime58.withYearOfCentury((int) 'a');
        org.joda.time.LocalDateTime localDateTime62 = localDateTime60.plusSeconds(6);
        org.joda.time.ReadableInstant readableInstant63 = null;
        org.joda.time.ReadableInstant readableInstant64 = null;
        org.joda.time.Duration duration65 = new org.joda.time.Duration(readableInstant63, readableInstant64);
        long long66 = duration65.getMillis();
        org.joda.time.Duration duration68 = duration65.plus((long) (byte) 1);
        org.joda.time.LocalDateTime localDateTime69 = localDateTime60.minus((org.joda.time.ReadableDuration) duration68);
        org.joda.time.LocalDateTime localDateTime71 = localDateTime69.withWeekOfWeekyear((int) '#');
        org.joda.time.LocalDateTime localDateTime73 = localDateTime71.withCenturyOfEra(10);
        org.joda.time.ReadableInstant readableInstant74 = null;
        org.joda.time.ReadableInstant readableInstant75 = null;
        org.joda.time.Duration duration76 = new org.joda.time.Duration(readableInstant74, readableInstant75);
        org.joda.time.ReadableInstant readableInstant77 = null;
        org.joda.time.PeriodType periodType78 = null;
        org.joda.time.Period period79 = duration76.toPeriodTo(readableInstant77, periodType78);
        long long80 = duration76.getStandardSeconds();
        org.joda.time.Chronology chronology82 = null;
        org.joda.time.DateTime dateTime83 = new org.joda.time.DateTime((long) 3, chronology82);
        org.joda.time.DateTime.Property property84 = dateTime83.dayOfYear();
        org.joda.time.Chronology chronology85 = null;
        org.joda.time.DateMidnight dateMidnight86 = new org.joda.time.DateMidnight((java.lang.Object) dateTime83, chronology85);
        org.joda.time.DateMidnight dateMidnight88 = dateMidnight86.minusMonths((-1));
        org.joda.time.DateMidnight dateMidnight90 = dateMidnight86.withDayOfYear((int) ' ');
        org.joda.time.Interval interval91 = duration76.toIntervalTo((org.joda.time.ReadableInstant) dateMidnight90);
        long long92 = duration76.getStandardSeconds();
        org.joda.time.LocalDateTime localDateTime93 = localDateTime73.minus((org.joda.time.ReadableDuration) duration76);
        org.joda.time.MutablePeriod mutablePeriod94 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime56, (org.joda.time.ReadableDuration) duration76);
        org.joda.time.Duration duration97 = duration76.withDurationAdded((long) 100, 59);
        int int98 = duration1.compareTo((org.joda.time.ReadableDuration) duration97);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(interval6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(mutableDateTime26);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertTrue("'" + isoEra41 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra41.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 21 + "'", int49 == 21);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(dateTimeFieldType52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 2097 + "'", int53 == 2097);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 0L + "'", long66 == 0L);
        org.junit.Assert.assertNotNull(duration68);
        org.junit.Assert.assertNotNull(localDateTime69);
        org.junit.Assert.assertNotNull(localDateTime71);
        org.junit.Assert.assertNotNull(localDateTime73);
        org.junit.Assert.assertNotNull(period79);
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 0L + "'", long80 == 0L);
        org.junit.Assert.assertNotNull(property84);
        org.junit.Assert.assertNotNull(dateMidnight88);
        org.junit.Assert.assertNotNull(dateMidnight90);
        org.junit.Assert.assertNotNull(interval91);
        org.junit.Assert.assertTrue("'" + long92 + "' != '" + 0L + "'", long92 == 0L);
        org.junit.Assert.assertNotNull(localDateTime93);
        org.junit.Assert.assertNotNull(duration97);
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + (-1) + "'", int98 == (-1));
    }

    @Test
    public void test5175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5175");
        java.nio.LongBuffer longBuffer1 = java.nio.LongBuffer.allocate((int) (short) 0);
        long[] longArray2 = longBuffer1.array();
        java.nio.LongBuffer longBuffer3 = java.nio.LongBuffer.wrap(longArray2);
        java.nio.LongBuffer longBuffer5 = java.nio.LongBuffer.allocate((int) (short) 0);
        long[] longArray6 = longBuffer5.array();
        java.util.stream.LongStream longStream7 = java.util.stream.LongStream.of(longArray6);
        java.nio.LongBuffer longBuffer8 = longBuffer3.get(longArray6);
        boolean boolean9 = longBuffer3.hasArray();
        java.lang.String str10 = longBuffer3.toString();
        org.junit.Assert.assertNotNull(longBuffer1);
        org.junit.Assert.assertNotNull(longArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray2), "[]");
        org.junit.Assert.assertNotNull(longBuffer3);
        org.junit.Assert.assertNotNull(longBuffer5);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[]");
        org.junit.Assert.assertNotNull(longStream7);
        org.junit.Assert.assertNotNull(longBuffer8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "java.nio.HeapLongBuffer[pos=0 lim=0 cap=0]" + "'", str10, "java.nio.HeapLongBuffer[pos=0 lim=0 cap=0]");
    }

    @Test
    public void test5176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5176");
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod();
        org.joda.time.Period period5 = org.joda.time.Period.ZERO;
        org.joda.time.Period period6 = period5.normalizedStandard();
        org.joda.time.Period period8 = period5.plusHours(2);
        org.joda.time.DurationFieldType durationFieldType9 = org.joda.time.DurationFieldType.hours();
        int int10 = period5.indexOf(durationFieldType9);
        mutablePeriod4.add(durationFieldType9, (int) (short) -1);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.LocalTime localTime16 = new org.joda.time.LocalTime((long) 0, chronology15);
        org.joda.time.Chronology chronology17 = localTime16.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.weekyearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime19 = org.joda.time.MutableDateTime.now(chronology17);
        org.joda.time.DateTimeField dateTimeField20 = chronology17.monthOfYear();
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((long) 1, chronology17);
        org.joda.time.DurationField durationField22 = durationFieldType9.getField(chronology17);
        org.joda.time.DateTimeField dateTimeField23 = chronology17.year();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime24 = new org.joda.time.LocalTime(335, 24, 1265550, 1265550, chronology17);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 335 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(durationFieldType9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 4 + "'", int10 == 4);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(mutableDateTime19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
    }

    @Test
    public void test5177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5177");
        java.nio.charset.Charset charset0 = java.nio.charset.Charset.defaultCharset();
        java.nio.charset.CharsetDecoder charsetDecoder1 = charset0.newDecoder();
        java.nio.charset.Charset charset2 = java.nio.charset.Charset.defaultCharset();
        boolean boolean3 = charset0.contains(charset2);
        java.nio.charset.CharsetEncoder charsetEncoder4 = charset0.newEncoder();
        char[] charArray5 = new char[] {};
        java.nio.CharBuffer charBuffer6 = java.nio.CharBuffer.wrap(charArray5);
        java.nio.ByteBuffer byteBuffer7 = charsetEncoder4.encode(charBuffer6);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) 3, chronology9);
        org.joda.time.DateTime.Property property11 = dateTime10.dayOfYear();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateMidnight dateMidnight13 = new org.joda.time.DateMidnight((java.lang.Object) dateTime10, chronology12);
        int int14 = dateMidnight13.getMillisOfSecond();
        int int15 = dateMidnight13.getMinuteOfHour();
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.Duration duration18 = new org.joda.time.Duration(readableInstant16, readableInstant17);
        org.joda.time.Seconds seconds19 = duration18.toStandardSeconds();
        int int20 = seconds19.getSeconds();
        org.joda.time.Seconds seconds22 = seconds19.dividedBy(28);
        org.joda.time.MutableInterval mutableInterval23 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateMidnight13, (org.joda.time.ReadablePeriod) seconds22);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((long) 3, chronology25);
        org.joda.time.DateTime.Property property27 = dateTime26.dayOfYear();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateMidnight dateMidnight29 = new org.joda.time.DateMidnight((java.lang.Object) dateTime26, chronology28);
        int int30 = dateMidnight29.getMillisOfSecond();
        int int31 = dateMidnight29.getMinuteOfHour();
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.Duration duration34 = new org.joda.time.Duration(readableInstant32, readableInstant33);
        org.joda.time.Seconds seconds35 = duration34.toStandardSeconds();
        int int36 = seconds35.getSeconds();
        org.joda.time.Seconds seconds38 = seconds35.dividedBy(28);
        org.joda.time.MutableInterval mutableInterval39 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateMidnight29, (org.joda.time.ReadablePeriod) seconds38);
        boolean boolean40 = mutableInterval23.equals((java.lang.Object) mutableInterval39);
        boolean boolean41 = byteBuffer7.equals((java.lang.Object) mutableInterval39);
        int int42 = byteBuffer7.arrayOffset();
        java.nio.ByteBuffer byteBuffer43 = byteBuffer7.slice();
        org.junit.Assert.assertNotNull(charset0);
        org.junit.Assert.assertNotNull(charsetDecoder1);
        org.junit.Assert.assertNotNull(charset2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(charsetEncoder4);
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[]");
        org.junit.Assert.assertNotNull(charBuffer6);
        org.junit.Assert.assertNotNull(byteBuffer7);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(seconds19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(seconds22);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(seconds35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(seconds38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(byteBuffer43);
    }

    @Test
    public void test5178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5178");
        java.util.GregorianCalendar gregorianCalendar5 = new java.util.GregorianCalendar(12, 4096, 7, (-1), (int) (short) 10);
        int int6 = gregorianCalendar5.getWeeksInWeekYear();
        java.lang.String str7 = gregorianCalendar5.getCalendarType();
        java.time.ZonedDateTime zonedDateTime8 = gregorianCalendar5.toZonedDateTime();
        java.time.ZonedDateTime zonedDateTime10 = zonedDateTime8.minusMonths((long) 10);
        java.time.ZonedDateTime zonedDateTime12 = zonedDateTime10.minusHours((long) 9);
        java.time.chrono.ChronoZonedDateTime<java.time.LocalDate> localDateChronoZonedDateTime13 = zonedDateTime10.withLaterOffsetAtOverlap();
        java.time.ZoneId zoneId14 = zonedDateTime10.getZone();
        java.time.Clock clock15 = java.time.Clock.systemUTC();
        java.time.Duration duration17 = java.time.Duration.ofSeconds((long) 256);
        java.time.Clock clock18 = java.time.Clock.tick(clock15, duration17);
        java.time.Duration duration20 = java.time.Duration.ofMinutes((long) 3);
        java.time.Duration duration21 = duration20.abs();
        java.time.Clock clock22 = java.time.Clock.offset(clock15, duration20);
        java.time.Duration duration23 = java.time.Duration.ZERO;
        java.time.Duration duration25 = duration23.multipliedBy((-9223372036854775808L));
        boolean boolean26 = duration23.isZero();
        java.time.Clock clock27 = java.time.Clock.tick(clock15, duration23);
        java.time.Duration duration28 = java.time.Duration.ZERO;
        java.time.Duration duration30 = duration28.multipliedBy((-9223372036854775808L));
        boolean boolean31 = duration28.isZero();
        java.time.Clock clock32 = java.time.Clock.offset(clock27, duration28);
        java.time.Instant instant33 = clock27.instant();
        java.time.LocalDateTime localDateTime34 = java.time.LocalDateTime.MIN;
        java.time.Month month35 = java.time.Month.NOVEMBER;
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime36 = localDateTime34.with((java.time.temporal.TemporalAdjuster) month35);
        java.time.LocalDateTime localDateTime38 = localDateTime34.plusMinutes((long) 3600000);
        java.time.temporal.ChronoField chronoField39 = java.time.temporal.ChronoField.HOUR_OF_DAY;
        boolean boolean40 = chronoField39.isTimeBased();
        int int41 = localDateTime38.get((java.time.temporal.TemporalField) chronoField39);
        boolean boolean42 = instant33.isSupported((java.time.temporal.TemporalField) chronoField39);
        // The following exception was thrown during execution in test generation
        try {
            java.time.chrono.ChronoZonedDateTime<java.time.LocalDate> localDateChronoZonedDateTime44 = zonedDateTime10.with((java.time.temporal.TemporalField) chronoField39, 97L);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for HourOfDay (valid values 0 - 23): 97");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 52 + "'", int6 == 52);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "gregory" + "'", str7, "gregory");
        org.junit.Assert.assertNotNull(zonedDateTime8);
        org.junit.Assert.assertNotNull(zonedDateTime10);
        org.junit.Assert.assertNotNull(zonedDateTime12);
        org.junit.Assert.assertNotNull(localDateChronoZonedDateTime13);
        org.junit.Assert.assertNotNull(zoneId14);
        org.junit.Assert.assertNotNull(clock15);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(clock18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(clock22);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(clock27);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(clock32);
        org.junit.Assert.assertNotNull(instant33);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertTrue("'" + month35 + "' != '" + java.time.Month.NOVEMBER + "'", month35.equals(java.time.Month.NOVEMBER));
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime36);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertTrue("'" + chronoField39 + "' != '" + java.time.temporal.ChronoField.HOUR_OF_DAY + "'", chronoField39.equals(java.time.temporal.ChronoField.HOUR_OF_DAY));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test5179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5179");
        java.nio.charset.Charset charset0 = java.nio.charset.Charset.defaultCharset();
        java.nio.charset.CharsetDecoder charsetDecoder1 = charset0.newDecoder();
        java.nio.charset.Charset charset2 = java.nio.charset.Charset.defaultCharset();
        java.nio.charset.CharsetDecoder charsetDecoder3 = charset2.newDecoder();
        java.nio.charset.Charset charset4 = java.nio.charset.Charset.defaultCharset();
        boolean boolean5 = charset2.contains(charset4);
        int int6 = charset0.compareTo(charset2);
        java.util.Locale locale9 = new java.util.Locale("PT0S", "2022-02-21T09:34:06.670Z");
        java.lang.String str10 = charset2.displayName(locale9);
        java.nio.CharBuffer charBuffer11 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer12 = charset2.encode(charBuffer11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charset0);
        org.junit.Assert.assertNotNull(charsetDecoder1);
        org.junit.Assert.assertNotNull(charset2);
        org.junit.Assert.assertNotNull(charsetDecoder3);
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertEquals(locale9.toString(), "pt0s_2022-02-21T09:34:06.670Z");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "US-ASCII" + "'", str10, "US-ASCII");
    }

    @Test
    public void test5180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5180");
        org.joda.time.Period period0 = org.joda.time.Period.ZERO;
        org.joda.time.Period period1 = period0.normalizedStandard();
        org.joda.time.Period period3 = period1.minusMinutes((int) ' ');
        org.joda.time.Period period5 = period3.withMinutes(32769);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) 3, chronology7);
        org.joda.time.DateTime.Property property9 = dateTime8.dayOfYear();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight((java.lang.Object) dateTime8, chronology10);
        org.joda.time.Duration duration12 = period5.toDurationFrom((org.joda.time.ReadableInstant) dateMidnight11);
        org.joda.time.Period period13 = period5.normalizedStandard();
        org.junit.Assert.assertNotNull(period0);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(period13);
    }

    @Test
    public void test5181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5181");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 3, chronology1);
        org.joda.time.DateTime.Property property3 = dateTime2.dayOfYear();
        org.joda.time.Interval interval4 = property3.toInterval();
        org.joda.time.DateTimeField dateTimeField5 = property3.getField();
        org.joda.time.DateTime dateTime6 = property3.roundHalfEvenCopy();
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.Duration duration9 = new org.joda.time.Duration(readableInstant7, readableInstant8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.Period period12 = duration9.toPeriodTo(readableInstant10, periodType11);
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.Duration duration15 = new org.joda.time.Duration(readableInstant13, readableInstant14);
        long long16 = duration15.getMillis();
        boolean boolean17 = duration9.isShorterThan((org.joda.time.ReadableDuration) duration15);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) 3, chronology19);
        org.joda.time.DateTime.Property property21 = dateTime20.dayOfYear();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateMidnight dateMidnight23 = new org.joda.time.DateMidnight((java.lang.Object) dateTime20, chronology22);
        org.joda.time.MutableDateTime mutableDateTime24 = dateTime20.toMutableDateTime();
        mutableDateTime24.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property27 = mutableDateTime24.dayOfWeek();
        org.joda.time.MutableDateTime.Property property28 = mutableDateTime24.year();
        org.joda.time.MutableDateTime.Property property29 = mutableDateTime24.weekyear();
        boolean boolean30 = duration9.equals((java.lang.Object) mutableDateTime24);
        mutableDateTime24.addMonths((int) ' ');
        mutableDateTime24.add((long) (byte) 10);
        org.joda.time.Period period35 = org.joda.time.Period.ZERO;
        org.joda.time.Period period36 = period35.normalizedStandard();
        org.joda.time.Period period38 = period35.plusHours(2);
        java.time.chrono.IsoEra isoEra39 = java.time.chrono.IsoEra.CE;
        boolean boolean40 = period38.equals((java.lang.Object) isoEra39);
        int int41 = period38.getMinutes();
        mutableDateTime24.add((org.joda.time.ReadablePeriod) period38);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime(chronology43);
        org.joda.time.LocalDateTime localDateTime46 = localDateTime44.withYearOfCentury((int) 'a');
        int int47 = localDateTime46.getDayOfMonth();
        org.joda.time.LocalDateTime localDateTime49 = localDateTime46.withMinuteOfHour((int) ' ');
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = org.joda.time.DateTimeFieldType.weekyear();
        int int51 = localDateTime46.get(dateTimeFieldType50);
        org.joda.time.MutableDateTime.Property property52 = mutableDateTime24.property(dateTimeFieldType50);
        org.joda.time.DateTime dateTime54 = dateTime6.withField(dateTimeFieldType50, (int) '/');
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.LocalDateTime localDateTime56 = new org.joda.time.LocalDateTime(chronology55);
        org.joda.time.LocalDateTime localDateTime58 = localDateTime56.withYearOfCentury((int) 'a');
        org.joda.time.LocalDateTime localDateTime60 = localDateTime58.plusSeconds(6);
        org.joda.time.ReadableInstant readableInstant61 = null;
        org.joda.time.ReadableInstant readableInstant62 = null;
        org.joda.time.Duration duration63 = new org.joda.time.Duration(readableInstant61, readableInstant62);
        long long64 = duration63.getMillis();
        org.joda.time.Duration duration66 = duration63.plus((long) (byte) 1);
        org.joda.time.LocalDateTime localDateTime67 = localDateTime58.minus((org.joda.time.ReadableDuration) duration66);
        org.joda.time.LocalDateTime localDateTime69 = localDateTime67.withWeekOfWeekyear((int) '#');
        org.joda.time.LocalDateTime localDateTime71 = localDateTime69.withCenturyOfEra(10);
        org.joda.time.ReadableInstant readableInstant72 = null;
        org.joda.time.ReadableInstant readableInstant73 = null;
        org.joda.time.Duration duration74 = new org.joda.time.Duration(readableInstant72, readableInstant73);
        org.joda.time.ReadableInstant readableInstant75 = null;
        org.joda.time.PeriodType periodType76 = null;
        org.joda.time.Period period77 = duration74.toPeriodTo(readableInstant75, periodType76);
        long long78 = duration74.getStandardSeconds();
        org.joda.time.Chronology chronology80 = null;
        org.joda.time.DateTime dateTime81 = new org.joda.time.DateTime((long) 3, chronology80);
        org.joda.time.DateTime.Property property82 = dateTime81.dayOfYear();
        org.joda.time.Chronology chronology83 = null;
        org.joda.time.DateMidnight dateMidnight84 = new org.joda.time.DateMidnight((java.lang.Object) dateTime81, chronology83);
        org.joda.time.DateMidnight dateMidnight86 = dateMidnight84.minusMonths((-1));
        org.joda.time.DateMidnight dateMidnight88 = dateMidnight84.withDayOfYear((int) ' ');
        org.joda.time.Interval interval89 = duration74.toIntervalTo((org.joda.time.ReadableInstant) dateMidnight88);
        long long90 = duration74.getStandardSeconds();
        org.joda.time.LocalDateTime localDateTime91 = localDateTime71.minus((org.joda.time.ReadableDuration) duration74);
        org.joda.time.MutablePeriod mutablePeriod92 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime54, (org.joda.time.ReadableDuration) duration74);
        int int93 = mutablePeriod92.getDays();
        mutablePeriod92.addWeeks(28);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(mutableDateTime24);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertTrue("'" + isoEra39 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra39.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 21 + "'", int47 == 21);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(dateTimeFieldType50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 2097 + "'", int51 == 2097);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 0L + "'", long64 == 0L);
        org.junit.Assert.assertNotNull(duration66);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertNotNull(localDateTime69);
        org.junit.Assert.assertNotNull(localDateTime71);
        org.junit.Assert.assertNotNull(period77);
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 0L + "'", long78 == 0L);
        org.junit.Assert.assertNotNull(property82);
        org.junit.Assert.assertNotNull(dateMidnight86);
        org.junit.Assert.assertNotNull(dateMidnight88);
        org.junit.Assert.assertNotNull(interval89);
        org.junit.Assert.assertTrue("'" + long90 + "' != '" + 0L + "'", long90 == 0L);
        org.junit.Assert.assertNotNull(localDateTime91);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 0 + "'", int93 == 0);
    }

    @Test
    public void test5182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5182");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.now(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTime1);
    }

    @Test
    public void test5183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5183");
        org.joda.time.MutablePeriod mutablePeriod0 = new org.joda.time.MutablePeriod();
        org.joda.time.Period period1 = org.joda.time.Period.ZERO;
        org.joda.time.Period period2 = period1.normalizedStandard();
        org.joda.time.Period period4 = period1.plusHours(2);
        org.joda.time.DurationFieldType durationFieldType5 = org.joda.time.DurationFieldType.hours();
        int int6 = period1.indexOf(durationFieldType5);
        mutablePeriod0.add(durationFieldType5, (int) (short) -1);
        mutablePeriod0.addSeconds(4200);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) 3, chronology12);
        org.joda.time.DateTime.Property property14 = dateTime13.dayOfYear();
        org.joda.time.Interval interval15 = property14.toInterval();
        java.lang.String str16 = interval15.toString();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) 3, chronology18);
        org.joda.time.DateTime.Property property20 = dateTime19.dayOfYear();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight((java.lang.Object) dateTime19, chronology21);
        org.joda.time.MutableDateTime mutableDateTime23 = dateTime19.toMutableDateTime();
        org.joda.time.Days days24 = org.joda.time.Days.ONE;
        org.joda.time.MutableInterval mutableInterval25 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime19, (org.joda.time.ReadablePeriod) days24);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((long) 3, chronology27);
        org.joda.time.DateTime.Property property29 = dateTime28.dayOfYear();
        org.joda.time.Interval interval30 = property29.toInterval();
        mutableInterval25.setInterval((org.joda.time.ReadableInterval) interval30);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((long) 3, chronology33);
        org.joda.time.DateTime.Property property35 = dateTime34.dayOfYear();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.DateMidnight dateMidnight37 = new org.joda.time.DateMidnight((java.lang.Object) dateTime34, chronology36);
        org.joda.time.DateMidnight.Property property38 = dateMidnight37.dayOfMonth();
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.Duration duration41 = new org.joda.time.Duration(readableInstant39, readableInstant40);
        org.joda.time.Duration duration43 = duration41.withMillis((-1L));
        org.joda.time.ReadableDuration readableDuration44 = null;
        org.joda.time.Duration duration45 = duration41.minus(readableDuration44);
        org.joda.time.DateMidnight dateMidnight46 = dateMidnight37.plus((org.joda.time.ReadableDuration) duration45);
        mutableInterval25.setDurationAfterStart((org.joda.time.ReadableDuration) duration45);
        org.joda.time.MutableDateTime mutableDateTime48 = new org.joda.time.MutableDateTime();
        boolean boolean49 = mutableInterval25.isBefore((org.joda.time.ReadableInstant) mutableDateTime48);
        boolean boolean50 = interval15.isAfter((org.joda.time.ReadableInstant) mutableDateTime48);
        mutablePeriod0.setPeriod((org.joda.time.ReadableInterval) interval15);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period2);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 4 + "'", int6 == 4);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "1970-01-01T00:00:00.000Z/1970-01-02T00:00:00.000Z" + "'", str16, "1970-01-01T00:00:00.000Z/1970-01-02T00:00:00.000Z");
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(mutableDateTime23);
        org.junit.Assert.assertNotNull(days24);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(dateMidnight46);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test5184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5184");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 3, chronology1);
        org.joda.time.Period period3 = org.joda.time.Period.ZERO;
        org.joda.time.Period period4 = period3.normalizedStandard();
        org.joda.time.Period period6 = period4.minusMinutes((int) ' ');
        org.joda.time.Period period8 = period6.minusMonths((int) (byte) 0);
        org.joda.time.PeriodType periodType9 = period8.getPeriodType();
        org.joda.time.DateTime dateTime10 = dateTime2.minus((org.joda.time.ReadablePeriod) period8);
        org.joda.time.DateTime dateTime12 = dateTime2.plusHours(34);
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.Duration duration15 = new org.joda.time.Duration(readableInstant13, readableInstant14);
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.Duration duration18 = new org.joda.time.Duration(readableInstant16, readableInstant17);
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.PeriodType periodType20 = null;
        org.joda.time.Period period21 = duration18.toPeriodTo(readableInstant19, periodType20);
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.Duration duration24 = new org.joda.time.Duration(readableInstant22, readableInstant23);
        long long25 = duration24.getMillis();
        boolean boolean26 = duration18.isShorterThan((org.joda.time.ReadableDuration) duration24);
        boolean boolean27 = duration15.isLongerThan((org.joda.time.ReadableDuration) duration24);
        org.joda.time.DateTime dateTime29 = dateTime12.withDurationAdded((org.joda.time.ReadableDuration) duration15, 256);
        long long30 = duration15.getStandardMinutes();
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
    }

    @Test
    public void test5185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5185");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 3, chronology1);
        org.joda.time.DateTime.Property property3 = dateTime2.dayOfYear();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight((java.lang.Object) dateTime2, chronology4);
        org.joda.time.MutableDateTime mutableDateTime6 = dateTime2.toMutableDateTime();
        org.joda.time.Days days7 = org.joda.time.Days.ONE;
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadablePeriod) days7);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) 3, chronology10);
        org.joda.time.DateTime.Property property12 = dateTime11.dayOfYear();
        org.joda.time.Interval interval13 = property12.toInterval();
        mutableInterval8.setInterval((org.joda.time.ReadableInterval) interval13);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) 3, chronology16);
        org.joda.time.DateTime.Property property18 = dateTime17.dayOfYear();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight((java.lang.Object) dateTime17, chronology19);
        org.joda.time.MutableDateTime mutableDateTime21 = dateTime17.toMutableDateTime();
        org.joda.time.Days days22 = org.joda.time.Days.ONE;
        org.joda.time.MutableInterval mutableInterval23 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime17, (org.joda.time.ReadablePeriod) days22);
        mutableInterval8.setInterval((org.joda.time.ReadableInterval) mutableInterval23);
        long long25 = mutableInterval23.toDurationMillis();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.LocalTime localTime28 = new org.joda.time.LocalTime((long) 0, chronology27);
        org.joda.time.Chronology chronology29 = localTime28.getChronology();
        org.joda.time.DateTimeField dateTimeField30 = chronology29.weekyearOfCentury();
        org.joda.time.DurationField durationField31 = chronology29.weekyears();
        org.joda.time.DurationField durationField32 = chronology29.seconds();
        org.joda.time.Chronology chronology33 = chronology29.withUTC();
        org.joda.time.DateTimeField dateTimeField34 = chronology29.hourOfDay();
        mutableInterval23.setChronology(chronology29);
        org.joda.time.DateTimeField dateTimeField36 = chronology29.dayOfMonth();
        org.joda.time.DurationField durationField37 = chronology29.hours();
        long long40 = durationField37.getDifferenceAsLong(34709074000000L, (long) 83400);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(days7);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(mutableDateTime21);
        org.junit.Assert.assertNotNull(days22);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 86400000L + "'", long25 == 86400000L);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 9641409L + "'", long40 == 9641409L);
    }

    @Test
    public void test5186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5186");
        java.util.stream.IntStream intStream1 = java.util.stream.IntStream.of((int) '/');
        java.util.OptionalInt optionalInt2 = intStream1.min();
        java.io.File file5 = java.io.File.createTempFile("PT3600S", "secondOfMinute");
        java.io.File file6 = file5.getCanonicalFile();
        java.io.File file7 = file6.getAbsoluteFile();
        boolean boolean8 = optionalInt2.equals((java.lang.Object) file7);
        java.util.function.IntSupplier intSupplier9 = null;
        int int10 = optionalInt2.orElseGet(intSupplier9);
        org.junit.Assert.assertNotNull(intStream1);
        org.junit.Assert.assertNotNull(optionalInt2);
        org.junit.Assert.assertNotNull(file5);
        org.junit.Assert.assertEquals(file5.getParent(), "/tmp");
// flaky:         org.junit.Assert.assertEquals(file5.toString(), "/tmp/PT3600S570699697516858377secondOfMinute");
        org.junit.Assert.assertNotNull(file6);
        org.junit.Assert.assertEquals(file6.getParent(), "/tmp");
// flaky:         org.junit.Assert.assertEquals(file6.toString(), "/tmp/PT3600S570699697516858377secondOfMinute");
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "/tmp");
// flaky:         org.junit.Assert.assertEquals(file7.toString(), "/tmp/PT3600S570699697516858377secondOfMinute");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 47 + "'", int10 == 47);
    }

    @Test
    public void test5187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5187");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 3, chronology1);
        org.joda.time.DateTime.Property property3 = dateTime2.dayOfYear();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight((java.lang.Object) dateTime2, chronology4);
        org.joda.time.MutableDateTime mutableDateTime6 = dateTime2.toMutableDateTime();
        org.joda.time.Days days7 = org.joda.time.Days.ONE;
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadablePeriod) days7);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) 3, chronology10);
        org.joda.time.DateTime.Property property12 = dateTime11.dayOfYear();
        org.joda.time.Interval interval13 = property12.toInterval();
        mutableInterval8.setInterval((org.joda.time.ReadableInterval) interval13);
        org.joda.time.MutableInterval mutableInterval15 = interval13.toMutableInterval();
        mutableInterval15.setStartMillis((long) 1265550);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(days7);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(mutableInterval15);
    }

    @Test
    public void test5188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5188");
        org.joda.time.Minutes minutes0 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes2 = minutes0.minus(12);
        org.joda.time.Minutes minutes3 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes5 = minutes3.minus(12);
        org.joda.time.Minutes minutes6 = minutes0.minus(minutes3);
        org.joda.time.Minutes minutes7 = minutes3.negated();
        org.joda.time.Minutes minutes8 = org.joda.time.Minutes.MIN_VALUE;
        boolean boolean9 = minutes3.isGreaterThan(minutes8);
        org.joda.time.Minutes minutes10 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes12 = minutes10.minus(12);
        org.joda.time.Minutes minutes13 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes15 = minutes13.minus(12);
        org.joda.time.Minutes minutes16 = minutes10.minus(minutes13);
        org.joda.time.DurationFieldType durationFieldType17 = minutes10.getFieldType();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.LocalTime localTime20 = new org.joda.time.LocalTime((long) 0, chronology19);
        org.joda.time.Chronology chronology21 = localTime20.getChronology();
        org.joda.time.DateTimeField dateTimeField22 = chronology21.weekyearOfCentury();
        org.joda.time.DurationField durationField23 = chronology21.weekyears();
        org.joda.time.DurationField durationField24 = chronology21.seconds();
        org.joda.time.Chronology chronology25 = chronology21.withUTC();
        org.joda.time.DateTimeField dateTimeField26 = chronology21.hourOfDay();
        boolean boolean27 = durationFieldType17.isSupported(chronology21);
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.Duration duration32 = new org.joda.time.Duration(readableInstant30, readableInstant31);
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.PeriodType periodType34 = null;
        org.joda.time.Period period35 = duration32.toPeriodTo(readableInstant33, periodType34);
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.Duration duration38 = new org.joda.time.Duration(readableInstant36, readableInstant37);
        long long39 = duration38.getMillis();
        boolean boolean40 = duration32.isShorterThan((org.joda.time.ReadableDuration) duration38);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime((long) 3, chronology42);
        org.joda.time.DateTime.Property property44 = dateTime43.dayOfYear();
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.DateMidnight dateMidnight46 = new org.joda.time.DateMidnight((java.lang.Object) dateTime43, chronology45);
        org.joda.time.MutableDateTime mutableDateTime47 = dateTime43.toMutableDateTime();
        mutableDateTime47.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property50 = mutableDateTime47.dayOfWeek();
        org.joda.time.MutableDateTime.Property property51 = mutableDateTime47.year();
        org.joda.time.MutableDateTime.Property property52 = mutableDateTime47.weekyear();
        boolean boolean53 = duration32.equals((java.lang.Object) mutableDateTime47);
        mutableDateTime47.addMonths((int) ' ');
        mutableDateTime47.add((long) (byte) 10);
        org.joda.time.Period period58 = org.joda.time.Period.ZERO;
        org.joda.time.Period period59 = period58.normalizedStandard();
        org.joda.time.Period period61 = period58.plusHours(2);
        java.time.chrono.IsoEra isoEra62 = java.time.chrono.IsoEra.CE;
        boolean boolean63 = period61.equals((java.lang.Object) isoEra62);
        int int64 = period61.getMinutes();
        mutableDateTime47.add((org.joda.time.ReadablePeriod) period61);
        java.util.TimeZone timeZone67 = null;
        org.joda.time.DateTimeZone dateTimeZone68 = org.joda.time.DateTimeZone.forTimeZone(timeZone67);
        org.joda.time.DateMidnight dateMidnight69 = new org.joda.time.DateMidnight((long) 1970, dateTimeZone68);
        long long72 = dateTimeZone68.convertLocalToUTC((long) 3, false);
        long long75 = dateTimeZone68.convertLocalToUTC(0L, true);
        mutableDateTime47.setZoneRetainFields(dateTimeZone68);
        java.lang.String str77 = dateTimeZone68.toString();
        org.joda.time.chrono.EthiopicChronology ethiopicChronology78 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone68);
        org.joda.time.DateTimeField dateTimeField79 = ethiopicChronology78.clockhourOfHalfday();
        org.joda.time.MutableInterval mutableInterval80 = new org.joda.time.MutableInterval(0L, (long) 8, (org.joda.time.Chronology) ethiopicChronology78);
        org.joda.time.DurationField durationField81 = ethiopicChronology78.minutes();
        org.joda.time.DurationField durationField82 = durationFieldType17.getField((org.joda.time.Chronology) ethiopicChronology78);
        boolean boolean83 = minutes8.isSupported(durationFieldType17);
        java.lang.String str84 = durationFieldType17.getName();
        org.junit.Assert.assertNotNull(minutes0);
        org.junit.Assert.assertNotNull(minutes2);
        org.junit.Assert.assertNotNull(minutes3);
        org.junit.Assert.assertNotNull(minutes5);
        org.junit.Assert.assertNotNull(minutes6);
        org.junit.Assert.assertNotNull(minutes7);
        org.junit.Assert.assertNotNull(minutes8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(minutes10);
        org.junit.Assert.assertNotNull(minutes12);
        org.junit.Assert.assertNotNull(minutes13);
        org.junit.Assert.assertNotNull(minutes15);
        org.junit.Assert.assertNotNull(minutes16);
        org.junit.Assert.assertNotNull(durationFieldType17);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(mutableDateTime47);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(period58);
        org.junit.Assert.assertNotNull(period59);
        org.junit.Assert.assertNotNull(period61);
        org.junit.Assert.assertTrue("'" + isoEra62 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra62.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone68);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 3L + "'", long72 == 3L);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 0L + "'", long75 == 0L);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "Etc/UTC" + "'", str77, "Etc/UTC");
        org.junit.Assert.assertNotNull(ethiopicChronology78);
        org.junit.Assert.assertNotNull(dateTimeField79);
        org.junit.Assert.assertNotNull(durationField81);
        org.junit.Assert.assertNotNull(durationField82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "minutes" + "'", str84, "minutes");
    }

    @Test
    public void test5189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5189");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 3, chronology1);
        org.joda.time.DateTime.Property property3 = dateTime2.dayOfYear();
        org.joda.time.Interval interval4 = property3.toInterval();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.LocalTime localTime8 = new org.joda.time.LocalTime((long) 0, chronology7);
        org.joda.time.Chronology chronology9 = localTime8.getChronology();
        java.util.Locale locale10 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale11 = java.util.Locale.GERMANY;
        java.lang.String str12 = locale10.getDisplayScript(locale11);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket14 = new org.joda.time.format.DateTimeParserBucket((long) 1970, chronology9, locale10, (java.lang.Integer) 1);
        long long20 = chronology9.getDateTimeMillis(1L, (int) (short) 10, 8, 4, 3);
        org.joda.time.DurationField durationField21 = chronology9.halfdays();
        org.joda.time.DateTimeField dateTimeField22 = chronology9.weekyear();
        org.joda.time.Interval interval23 = interval4.withChronology(chronology9);
        org.joda.time.DateTimeField dateTimeField24 = chronology9.weekyear();
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate();
        int int26 = localDate25.getCenturyOfEra();
        org.joda.time.LocalDate.Property property27 = localDate25.dayOfWeek();
        org.joda.time.LocalDate localDate29 = property27.addToCopy(7);
        org.joda.time.LocalDate localDate30 = property27.roundCeilingCopy();
        org.joda.time.LocalDate localDate31 = property27.roundHalfFloorCopy();
        java.util.Date date32 = localDate31.toDate();
        java.util.Calendar.Builder builder34 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder38 = builder34.setDate(0, 0, (int) (byte) 100);
        java.util.Calendar.Builder builder42 = builder34.setDate((int) (byte) 10, 57, 0);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.LocalTime localTime46 = new org.joda.time.LocalTime((long) 0, chronology45);
        org.joda.time.Chronology chronology47 = localTime46.getChronology();
        java.util.Locale locale48 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale49 = java.util.Locale.GERMANY;
        java.lang.String str50 = locale48.getDisplayScript(locale49);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket52 = new org.joda.time.format.DateTimeParserBucket((long) 1970, chronology47, locale48, (java.lang.Integer) 1);
        org.joda.time.DateTimeField dateTimeField53 = chronology47.clockhourOfDay();
        org.joda.time.Period period58 = new org.joda.time.Period((int) '#', 0, 2, (int) (short) 100);
        org.joda.time.Period period60 = period58.withSeconds(12);
        int int61 = period60.getMillis();
        int[] intArray63 = chronology47.get((org.joda.time.ReadablePeriod) period60, (long) (byte) 10);
        java.util.Calendar.Builder builder64 = builder34.setFields(intArray63);
        java.util.stream.IntStream intStream65 = java.util.stream.IntStream.of(intArray63);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray67 = dateTimeField24.addWrapField((org.joda.time.ReadablePartial) localDate31, (int) (short) 100, intArray63, 733000000);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 36484003L + "'", long20 == 36484003L);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 20 + "'", int26 == 20);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(date32);
        org.junit.Assert.assertEquals(date32.toString(), "Mon Feb 21 00:00:00 UTC 2022");
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(period60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 100 + "'", int61 == 100);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[0, 0, 0, 0, 0, 0, 0, 10]");
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(intStream65);
    }

    @Test
    public void test5190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5190");
        java.util.TimeZone timeZone1 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        org.joda.time.DateMidnight dateMidnight3 = new org.joda.time.DateMidnight((long) 12, dateTimeZone2);
        org.joda.time.MutableDateTime mutableDateTime4 = new org.joda.time.MutableDateTime(dateTimeZone2);
        java.util.TimeZone timeZone5 = null;
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forTimeZone(timeZone5);
        java.util.TimeZone timeZone8 = null;
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight((long) 1970, dateTimeZone9);
        long long13 = dateTimeZone9.convertLocalToUTC((long) 3, false);
        long long15 = dateTimeZone6.getMillisKeepLocal(dateTimeZone9, (long) ':');
        java.util.TimeZone timeZone16 = dateTimeZone6.toTimeZone();
        mutableDateTime4.setZoneRetainFields(dateTimeZone6);
        long long19 = dateTimeZone6.previousTransition(40L);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 3L + "'", long13 == 3L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 58L + "'", long15 == 58L);
        org.junit.Assert.assertNotNull(timeZone16);
// flaky:         org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 40L + "'", long19 == 40L);
    }

    @Test
    public void test5191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5191");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 3, chronology1);
        org.joda.time.DateTime.Property property3 = dateTime2.dayOfYear();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight((java.lang.Object) dateTime2, chronology4);
        org.joda.time.MutableDateTime mutableDateTime6 = dateTime2.toMutableDateTime();
        org.joda.time.Days days7 = org.joda.time.Days.ONE;
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadablePeriod) days7);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) 3, chronology10);
        org.joda.time.DateTime.Property property12 = dateTime11.dayOfYear();
        org.joda.time.Interval interval13 = property12.toInterval();
        mutableInterval8.setInterval((org.joda.time.ReadableInterval) interval13);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) 3, chronology16);
        org.joda.time.DateTime.Property property18 = dateTime17.dayOfYear();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight((java.lang.Object) dateTime17, chronology19);
        org.joda.time.MutableDateTime mutableDateTime21 = dateTime17.toMutableDateTime();
        org.joda.time.Days days22 = org.joda.time.Days.ONE;
        org.joda.time.MutableInterval mutableInterval23 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime17, (org.joda.time.ReadablePeriod) days22);
        mutableInterval8.setInterval((org.joda.time.ReadableInterval) mutableInterval23);
        mutableInterval8.setStartMillis((long) 9);
        org.joda.time.DateTime dateTime27 = mutableInterval8.getEnd();
        org.joda.time.Period period28 = mutableInterval8.toPeriod();
        mutableInterval8.setDurationBeforeEnd(1645436435000L);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(days7);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(mutableDateTime21);
        org.junit.Assert.assertNotNull(days22);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(period28);
    }

    @Test
    public void test5192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5192");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Duration duration2 = new org.joda.time.Duration(readableInstant0, readableInstant1);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = duration2.toPeriodTo(readableInstant3, periodType4);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.Duration duration8 = new org.joda.time.Duration(readableInstant6, readableInstant7);
        long long9 = duration8.getMillis();
        boolean boolean10 = duration2.isShorterThan((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) 3, chronology12);
        org.joda.time.DateTime.Property property14 = dateTime13.dayOfYear();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight((java.lang.Object) dateTime13, chronology15);
        org.joda.time.MutableDateTime mutableDateTime17 = dateTime13.toMutableDateTime();
        mutableDateTime17.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime17.dayOfWeek();
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime17.year();
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime17.weekyear();
        boolean boolean23 = duration2.equals((java.lang.Object) mutableDateTime17);
        mutableDateTime17.addMonths((int) ' ');
        mutableDateTime17.add((long) (byte) 10);
        org.joda.time.Period period28 = org.joda.time.Period.ZERO;
        org.joda.time.Period period29 = period28.normalizedStandard();
        org.joda.time.Period period31 = period28.plusHours(2);
        java.time.chrono.IsoEra isoEra32 = java.time.chrono.IsoEra.CE;
        boolean boolean33 = period31.equals((java.lang.Object) isoEra32);
        int int34 = period31.getMinutes();
        mutableDateTime17.add((org.joda.time.ReadablePeriod) period31);
        java.util.TimeZone timeZone37 = null;
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forTimeZone(timeZone37);
        org.joda.time.DateMidnight dateMidnight39 = new org.joda.time.DateMidnight((long) 1970, dateTimeZone38);
        long long42 = dateTimeZone38.convertLocalToUTC((long) 3, false);
        long long45 = dateTimeZone38.convertLocalToUTC(0L, true);
        mutableDateTime17.setZoneRetainFields(dateTimeZone38);
        java.lang.String str47 = dateTimeZone38.toString();
        org.joda.time.chrono.EthiopicChronology ethiopicChronology48 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone38);
        org.joda.time.DateTimeField dateTimeField49 = ethiopicChronology48.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone50 = ethiopicChronology48.getZone();
        org.joda.time.DateTimeField dateTimeField51 = ethiopicChronology48.era();
        org.joda.time.DateTimeField dateTimeField52 = ethiopicChronology48.secondOfDay();
        org.joda.time.DateTimeField dateTimeField53 = ethiopicChronology48.minuteOfHour();
        org.joda.time.DurationField durationField54 = ethiopicChronology48.months();
        org.joda.time.DateTimeField dateTimeField55 = ethiopicChronology48.monthOfYear();
        org.joda.time.LocalTime localTime56 = new org.joda.time.LocalTime((org.joda.time.Chronology) ethiopicChronology48);
        org.joda.time.DateTimeField dateTimeField57 = ethiopicChronology48.weekyearOfCentury();
        org.joda.time.ReadablePartial readablePartial58 = null;
        java.util.Locale locale60 = java.util.Locale.TAIWAN;
        java.lang.String str61 = locale60.getDisplayScript();
        java.lang.String str62 = dateTimeField57.getAsText(readablePartial58, 365, locale60);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertTrue("'" + isoEra32 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra32.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 3L + "'", long42 == 3L);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Etc/UTC" + "'", str47, "Etc/UTC");
        org.junit.Assert.assertNotNull(ethiopicChronology48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(durationField54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "365" + "'", str62, "365");
    }

    @Test
    public void test5193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5193");
        org.joda.time.ReadableInterval readableInterval0 = null;
        org.joda.time.Hours hours1 = org.joda.time.Hours.hoursIn(readableInterval0);
        org.joda.time.Period period2 = hours1.toPeriod();
        org.joda.time.Period period4 = period2.plusMonths((int) '4');
        org.joda.time.PeriodType periodType5 = period4.getPeriodType();
        org.junit.Assert.assertNotNull(hours1);
        org.junit.Assert.assertNotNull(period2);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(periodType5);
    }

    @Test
    public void test5194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5194");
        org.joda.time.Period period0 = org.joda.time.Period.ZERO;
        org.joda.time.Period period1 = period0.normalizedStandard();
        org.joda.time.Period period3 = period0.plusHours(2);
        java.time.chrono.IsoEra isoEra4 = java.time.chrono.IsoEra.CE;
        boolean boolean5 = period3.equals((java.lang.Object) isoEra4);
        java.time.LocalTime localTime10 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime11 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime10);
        java.time.LocalTime localTime16 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime17 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime16);
        java.time.temporal.ChronoField chronoField18 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime20 = localTime16.with((java.time.temporal.TemporalField) chronoField18, (long) (short) 1);
        long long21 = localTime10.getLong((java.time.temporal.TemporalField) chronoField18);
        boolean boolean22 = isoEra4.isSupported((java.time.temporal.TemporalField) chronoField18);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery23 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period24 = isoEra4.query(periodTemporalQuery23);
        boolean boolean25 = period24.isNegative();
        java.time.Period period27 = period24.plusDays((long) ' ');
        java.time.temporal.ChronoField chronoField28 = java.time.temporal.ChronoField.SECOND_OF_DAY;
        boolean boolean29 = period24.equals((java.lang.Object) chronoField28);
        java.time.chrono.ChronoPeriod chronoPeriod30 = period24.negated();
        java.time.OffsetDateTime offsetDateTime31 = java.time.OffsetDateTime.now();
        java.time.temporal.ChronoField chronoField32 = java.time.temporal.ChronoField.HOUR_OF_DAY;
        boolean boolean33 = offsetDateTime31.isSupported((java.time.temporal.TemporalField) chronoField32);
        java.time.Month month34 = offsetDateTime31.getMonth();
        java.time.temporal.Temporal temporal35 = period24.addTo((java.time.temporal.Temporal) offsetDateTime31);
        java.time.DayOfWeek dayOfWeek36 = java.time.DayOfWeek.from((java.time.temporal.TemporalAccessor) offsetDateTime31);
        java.time.OffsetDateTime offsetDateTime37 = java.time.OffsetDateTime.now();
        java.time.LocalDate localDate38 = offsetDateTime37.toLocalDate();
        java.time.OffsetDateTime offsetDateTime39 = java.time.OffsetDateTime.now();
        java.time.temporal.ChronoField chronoField40 = java.time.temporal.ChronoField.HOUR_OF_DAY;
        boolean boolean41 = offsetDateTime39.isSupported((java.time.temporal.TemporalField) chronoField40);
        boolean boolean42 = offsetDateTime37.isEqual(offsetDateTime39);
        java.lang.String str43 = offsetDateTime39.toString();
        java.time.OffsetDateTime offsetDateTime44 = java.time.OffsetDateTime.now();
        java.time.LocalDate localDate46 = java.time.LocalDate.ofEpochDay((long) ' ');
        int int47 = localDate46.getMonthValue();
        org.joda.time.Period period48 = org.joda.time.Period.ZERO;
        org.joda.time.Period period49 = period48.normalizedStandard();
        org.joda.time.Period period51 = period48.plusHours(2);
        java.time.chrono.IsoEra isoEra52 = java.time.chrono.IsoEra.CE;
        boolean boolean53 = period51.equals((java.lang.Object) isoEra52);
        java.time.LocalTime localTime58 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime59 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime58);
        java.time.LocalTime localTime64 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime65 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime64);
        java.time.temporal.ChronoField chronoField66 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime68 = localTime64.with((java.time.temporal.TemporalField) chronoField66, (long) (short) 1);
        long long69 = localTime58.getLong((java.time.temporal.TemporalField) chronoField66);
        boolean boolean70 = isoEra52.isSupported((java.time.temporal.TemporalField) chronoField66);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery71 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period72 = isoEra52.query(periodTemporalQuery71);
        boolean boolean73 = period72.isNegative();
        java.time.Period period75 = period72.plusDays((long) ' ');
        java.time.temporal.ChronoField chronoField76 = java.time.temporal.ChronoField.SECOND_OF_DAY;
        boolean boolean77 = period72.equals((java.lang.Object) chronoField76);
        boolean boolean78 = localDate46.isSupported((java.time.temporal.TemporalField) chronoField76);
        boolean boolean79 = offsetDateTime44.isSupported((java.time.temporal.TemporalField) chronoField76);
        boolean boolean80 = offsetDateTime39.isAfter(offsetDateTime44);
        boolean boolean81 = offsetDateTime31.isAfter(offsetDateTime44);
        java.time.chrono.ChronoZonedDateTime<?> wildcardChronoZonedDateTime82 = java.time.chrono.ChronoZonedDateTime.from((java.time.temporal.TemporalAccessor) offsetDateTime44);
        org.junit.Assert.assertNotNull(period0);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertTrue("'" + isoEra4 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra4.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertTrue("'" + chronoField18 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField18.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 3601000000001L + "'", long21 == 3601000000001L);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(periodTemporalQuery23);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertTrue("'" + chronoField28 + "' != '" + java.time.temporal.ChronoField.SECOND_OF_DAY + "'", chronoField28.equals(java.time.temporal.ChronoField.SECOND_OF_DAY));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(chronoPeriod30);
        org.junit.Assert.assertNotNull(offsetDateTime31);
        org.junit.Assert.assertTrue("'" + chronoField32 + "' != '" + java.time.temporal.ChronoField.HOUR_OF_DAY + "'", chronoField32.equals(java.time.temporal.ChronoField.HOUR_OF_DAY));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + month34 + "' != '" + java.time.Month.FEBRUARY + "'", month34.equals(java.time.Month.FEBRUARY));
        org.junit.Assert.assertNotNull(temporal35);
        org.junit.Assert.assertTrue("'" + dayOfWeek36 + "' != '" + java.time.DayOfWeek.MONDAY + "'", dayOfWeek36.equals(java.time.DayOfWeek.MONDAY));
        org.junit.Assert.assertNotNull(offsetDateTime37);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertNotNull(offsetDateTime39);
        org.junit.Assert.assertTrue("'" + chronoField40 + "' != '" + java.time.temporal.ChronoField.HOUR_OF_DAY + "'", chronoField40.equals(java.time.temporal.ChronoField.HOUR_OF_DAY));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str43 + "' != '" + "2022-02-21T09:41:32.200Z" + "'", str43, "2022-02-21T09:41:32.200Z");
        org.junit.Assert.assertNotNull(offsetDateTime44);
        org.junit.Assert.assertNotNull(localDate46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2 + "'", int47 == 2);
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertNotNull(period49);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertTrue("'" + isoEra52 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra52.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(localTime58);
        org.junit.Assert.assertNotNull(localTime59);
        org.junit.Assert.assertNotNull(localTime64);
        org.junit.Assert.assertNotNull(localTime65);
        org.junit.Assert.assertTrue("'" + chronoField66 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField66.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime68);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 3601000000001L + "'", long69 == 3601000000001L);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(periodTemporalQuery71);
        org.junit.Assert.assertNotNull(period72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(period75);
        org.junit.Assert.assertTrue("'" + chronoField76 + "' != '" + java.time.temporal.ChronoField.SECOND_OF_DAY + "'", chronoField76.equals(java.time.temporal.ChronoField.SECOND_OF_DAY));
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(wildcardChronoZonedDateTime82);
    }

    @Test
    public void test5195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5195");
        java.time.Month month0 = java.time.Month.JULY;
        java.time.Month month2 = month0.minus((long) (-292267037));
        org.junit.Assert.assertTrue("'" + month0 + "' != '" + java.time.Month.JULY + "'", month0.equals(java.time.Month.JULY));
        org.junit.Assert.assertTrue("'" + month2 + "' != '" + java.time.Month.DECEMBER + "'", month2.equals(java.time.Month.DECEMBER));
    }

    @Test
    public void test5196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5196");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 3, chronology1);
        org.joda.time.DateTime.Property property3 = dateTime2.dayOfYear();
        org.joda.time.DateTimeField dateTimeField4 = property3.getField();
        org.joda.time.DurationField durationField5 = property3.getRangeDurationField();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(durationField5);
    }

    @Test
    public void test5197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5197");
        org.joda.time.Period period0 = org.joda.time.Period.ZERO;
        org.joda.time.Period period1 = period0.normalizedStandard();
        org.joda.time.Period period3 = period1.minusMinutes((int) ' ');
        org.joda.time.Period period5 = period3.minusMonths((int) (byte) 0);
        org.joda.time.PeriodType periodType6 = period5.getPeriodType();
        org.joda.time.PeriodType periodType7 = periodType6.withHoursRemoved();
        org.joda.time.PeriodType periodType8 = periodType7.withSecondsRemoved();
        org.joda.time.PeriodType periodType9 = periodType8.withMonthsRemoved();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) 3, chronology11);
        org.joda.time.DateTime.Property property13 = dateTime12.dayOfYear();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight((java.lang.Object) dateTime12, chronology14);
        org.joda.time.DateMidnight.Property property16 = dateMidnight15.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight17 = property16.getDateMidnight();
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight17.minusWeeks(34555048);
        boolean boolean20 = periodType9.equals((java.lang.Object) dateMidnight17);
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.Duration duration23 = new org.joda.time.Duration(readableInstant21, readableInstant22);
        org.joda.time.Duration duration25 = duration23.withMillis((-1L));
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((long) 3, chronology27);
        org.joda.time.DateTime.Property property29 = dateTime28.dayOfYear();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.DateMidnight dateMidnight31 = new org.joda.time.DateMidnight((java.lang.Object) dateTime28, chronology30);
        org.joda.time.DateMidnight dateMidnight33 = dateMidnight31.minusMonths((-1));
        org.joda.time.DateMidnight dateMidnight35 = dateMidnight31.withDayOfYear((int) ' ');
        org.joda.time.PeriodType periodType36 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period37 = duration25.toPeriodFrom((org.joda.time.ReadableInstant) dateMidnight31, periodType36);
        org.joda.time.Period period40 = org.joda.time.Period.ZERO;
        org.joda.time.Period period41 = period40.normalizedStandard();
        org.joda.time.Period period43 = period41.minusMinutes((int) ' ');
        org.joda.time.Period period45 = period43.minusMonths((int) (byte) 0);
        org.joda.time.PeriodType periodType46 = period45.getPeriodType();
        org.joda.time.MutablePeriod mutablePeriod47 = new org.joda.time.MutablePeriod((long) '4', 86399L, periodType46);
        org.joda.time.Period period48 = duration25.toPeriod(periodType46);
        org.joda.time.DurationFieldType durationFieldType49 = org.joda.time.DurationFieldType.weeks();
        org.joda.time.Period period51 = period48.withField(durationFieldType49, 97);
        boolean boolean52 = periodType9.isSupported(durationFieldType49);
        org.junit.Assert.assertNotNull(period0);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertNotNull(periodType7);
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateMidnight33);
        org.junit.Assert.assertNotNull(dateMidnight35);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertNotNull(periodType46);
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertNotNull(durationFieldType49);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
    }

    @Test
    public void test5198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5198");
        java.text.ParsePosition parsePosition1 = new java.text.ParsePosition(53);
        java.lang.String str2 = parsePosition1.toString();
        java.lang.Object obj3 = null;
        boolean boolean4 = parsePosition1.equals(obj3);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "java.text.ParsePosition[index=53,errorIndex=-1]" + "'", str2, "java.text.ParsePosition[index=53,errorIndex=-1]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test5199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5199");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.time.LocalTime localTime6 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime7 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime6);
        java.time.LocalTime localTime12 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime13 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime12);
        java.time.temporal.ChronoField chronoField14 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime16 = localTime12.with((java.time.temporal.TemporalField) chronoField14, (long) (short) 1);
        long long17 = localTime6.getLong((java.time.temporal.TemporalField) chronoField14);
        java.time.LocalTime localTime19 = localTime6.withSecond((int) (short) 1);
        java.lang.Object obj21 = properties1.put((java.lang.Object) localTime19, (java.lang.Object) "117");
        java.lang.Object obj22 = properties1.clone();
        properties1.clear();
        org.joda.time.Weeks weeks24 = org.joda.time.Weeks.ONE;
        java.util.concurrent.TimeUnit timeUnit25 = java.util.concurrent.TimeUnit.NANOSECONDS;
        boolean boolean26 = weeks24.equals((java.lang.Object) timeUnit25);
        org.joda.time.MutablePeriod mutablePeriod27 = weeks24.toMutablePeriod();
        int int28 = mutablePeriod27.getSeconds();
        mutablePeriod27.addSeconds(10);
        org.joda.time.Weeks weeks32 = org.joda.time.Weeks.ONE;
        java.util.concurrent.TimeUnit timeUnit33 = java.util.concurrent.TimeUnit.NANOSECONDS;
        boolean boolean34 = weeks32.equals((java.lang.Object) timeUnit33);
        org.joda.time.MutablePeriod mutablePeriod35 = weeks32.toMutablePeriod();
        int int36 = mutablePeriod35.getSeconds();
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.ReadableInstant readableInstant38 = null;
        org.joda.time.Duration duration39 = new org.joda.time.Duration(readableInstant37, readableInstant38);
        long long40 = duration39.getMillis();
        org.joda.time.Duration duration42 = duration39.plus((long) (byte) 1);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.LocalTime localTime46 = new org.joda.time.LocalTime((long) 0, chronology45);
        org.joda.time.Chronology chronology47 = localTime46.getChronology();
        java.util.Locale locale48 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale49 = java.util.Locale.GERMANY;
        java.lang.String str50 = locale48.getDisplayScript(locale49);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket52 = new org.joda.time.format.DateTimeParserBucket((long) 1970, chronology47, locale48, (java.lang.Integer) 1);
        mutablePeriod35.setPeriod((org.joda.time.ReadableDuration) duration39, chronology47);
        mutablePeriod27.setPeriod(86399L, chronology47);
        org.joda.time.Chronology chronology55 = chronology47.withUTC();
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.DateTime dateTime58 = new org.joda.time.DateTime((long) 3, chronology57);
        org.joda.time.DateTime.Property property59 = dateTime58.dayOfYear();
        org.joda.time.Interval interval60 = property59.toInterval();
        org.joda.time.DateTimeField dateTimeField61 = property59.getField();
        org.joda.time.DateTime dateTime62 = property59.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime63 = property59.roundCeilingCopy();
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.LocalTime localTime66 = new org.joda.time.LocalTime((long) 0, chronology65);
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.DateTime dateTime69 = new org.joda.time.DateTime((long) 3, chronology68);
        org.joda.time.DateTime.Property property70 = dateTime69.dayOfYear();
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.DateMidnight dateMidnight72 = new org.joda.time.DateMidnight((java.lang.Object) dateTime69, chronology71);
        org.joda.time.DateTime dateTime73 = localTime66.toDateTime((org.joda.time.ReadableInstant) dateTime69);
        org.joda.time.LocalTime localTime75 = localTime66.plusHours(3);
        org.joda.time.Chronology chronology76 = localTime66.getChronology();
        org.joda.time.DateMidnight dateMidnight77 = new org.joda.time.DateMidnight((java.lang.Object) dateTime63, chronology76);
        java.lang.Object obj78 = properties1.put((java.lang.Object) chronology47, (java.lang.Object) dateTime63);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertTrue("'" + chronoField14 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField14.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 3601000000001L + "'", long17 == 3601000000001L);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertEquals(obj22.toString(), "{01:00:01.000000001=117}");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj22), "{01:00:01.000000001=117}");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj22), "{01:00:01.000000001=117}");
        org.junit.Assert.assertNotNull(weeks24);
        org.junit.Assert.assertNotNull(timeUnit25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(mutablePeriod27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(weeks32);
        org.junit.Assert.assertNotNull(timeUnit33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(mutablePeriod35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(interval60);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(property70);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(localTime75);
        org.junit.Assert.assertNotNull(chronology76);
        org.junit.Assert.assertNull(obj78);
    }

    @Test
    public void test5200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5200");
        java.net.InetAddress inetAddress0 = java.net.InetAddress.getLocalHost();
        java.lang.String str1 = inetAddress0.toString();
        java.net.NetworkInterface networkInterface2 = java.net.NetworkInterface.getByInetAddress(inetAddress0);
        java.util.List<java.net.InterfaceAddress> interfaceAddressList3 = networkInterface2.getInterfaceAddresses();
        byte[] byteArray4 = networkInterface2.getHardwareAddress();
        java.util.Enumeration<java.net.NetworkInterface> networkInterfaceEnumeration5 = networkInterface2.getSubInterfaces();
        org.junit.Assert.assertNotNull(inetAddress0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "599b081c1808/172.17.0.2" + "'", str1, "599b081c1808/172.17.0.2");
        org.junit.Assert.assertNotNull(networkInterface2);
        org.junit.Assert.assertNotNull(interfaceAddressList3);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[2, 66, -84, 17, 0, 2]");
        org.junit.Assert.assertNotNull(networkInterfaceEnumeration5);
    }

    @Test
    public void test5201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5201");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate1 = org.joda.time.LocalDate.parse("2022-02-21T09:35:56.501Z");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"2022-02-21T09:35:56.501Z\" is malformed at \"T09:35:56.501Z\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test5202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5202");
        java.time.LocalDate localDate1 = java.time.LocalDate.ofEpochDay((long) ' ');
        java.time.OffsetTime offsetTime2 = java.time.OffsetTime.MAX;
        java.time.LocalTime localTime3 = offsetTime2.toLocalTime();
        java.lang.String str4 = offsetTime2.toString();
        java.time.Duration duration5 = java.time.Duration.ZERO;
        java.lang.String str6 = duration5.toString();
        java.time.OffsetTime offsetTime7 = offsetTime2.plus((java.time.temporal.TemporalAmount) duration5);
        java.time.LocalTime localTime8 = offsetTime2.toLocalTime();
        java.time.chrono.ChronoLocalDateTime<?> wildcardChronoLocalDateTime9 = localDate1.atTime(localTime8);
        java.time.LocalDate localDate11 = localDate1.minusWeeks((long) 2097);
        java.lang.String str12 = localDate11.toString();
        java.time.chrono.Era era13 = localDate11.getEra();
        int int14 = localDate11.getDayOfMonth();
        // The following exception was thrown during execution in test generation
        try {
            java.time.LocalDateTime localDateTime19 = localDate11.atTime(0, 58, (-39), (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for SecondOfMinute (valid values 0 - 59): -39");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate1);
        org.junit.Assert.assertNotNull(offsetTime2);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "23:59:59.999999999-18:00" + "'", str4, "23:59:59.999999999-18:00");
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "PT0S" + "'", str6, "PT0S");
        org.junit.Assert.assertNotNull(offsetTime7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(wildcardChronoLocalDateTime9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "1929-11-25" + "'", str12, "1929-11-25");
        org.junit.Assert.assertTrue("'" + era13 + "' != '" + java.time.chrono.IsoEra.CE + "'", era13.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 25 + "'", int14 == 25);
    }

    @Test
    public void test5203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5203");
        java.util.SortedMap<java.lang.String, java.nio.charset.Charset> strMap0 = java.nio.charset.Charset.availableCharsets();
        java.util.Set<java.lang.String> strSet1 = strMap0.keySet();
        java.lang.String str2 = strMap0.lastKey();
        java.util.Collection<java.nio.charset.Charset> charsetCollection3 = strMap0.values();
        java.util.SortedMap<java.lang.String, java.nio.charset.Charset> strMap5 = strMap0.headMap("ProtectionDomain  null\n null\n <no principals>\n null\n");
        org.junit.Assert.assertNotNull(strMap0);
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "x-windows-iso2022jp" + "'", str2, "x-windows-iso2022jp");
        org.junit.Assert.assertNotNull(charsetCollection3);
        org.junit.Assert.assertNotNull(strMap5);
    }

    @Test
    public void test5204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5204");
        java.time.Duration duration0 = java.time.Duration.ZERO;
        java.time.LocalTime localTime5 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime6 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime5);
        java.time.temporal.ChronoField chronoField7 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime9 = localTime5.with((java.time.temporal.TemporalField) chronoField7, (long) (short) 1);
        java.time.Duration duration11 = java.time.Duration.ofMinutes((long) 3);
        java.time.LocalTime localTime12 = localTime5.minus((java.time.temporal.TemporalAmount) duration11);
        java.time.temporal.Temporal temporal13 = duration0.subtractFrom((java.time.temporal.Temporal) localTime12);
        long long14 = duration0.toMinutes();
        java.time.Duration duration15 = duration0.abs();
        java.time.temporal.TemporalUnit temporalUnit17 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.time.Duration duration18 = duration15.plus((long) 59, temporalUnit17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: unit");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration0);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertTrue("'" + chronoField7 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField7.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(temporal13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(duration15);
    }

    @Test
    public void test5205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5205");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withYearOfCentury((int) 'a');
        int int4 = localDateTime3.getDayOfMonth();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.plusYears((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime3.withWeekOfWeekyear((int) '.');
        org.joda.time.LocalDateTime localDateTime10 = localDateTime3.plusWeeks(58);
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.millisOfSecond();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 21 + "'", int4 == 21);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
    }

    @Test
    public void test5206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5206");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withYearOfCentury((int) 'a');
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.plusSeconds(6);
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime3.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod6, 11);
        mutablePeriod6.addMonths(926000000);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime8);
    }

    @Test
    public void test5207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5207");
        java.util.Locale locale0 = java.util.Locale.UK;
        java.util.Locale locale4 = new java.util.Locale("ParseCaseSensitive(false)(Value(Year,4,10,EXCEEDS_PAD)'-'Value(MonthOfYear,2)'-'Value(DayOfMonth,2))[Offset(+HH:MM:ss,'Z')]", "UNDERFLOW", "Years");
        java.lang.String str5 = locale0.getDisplayName(locale4);
        java.util.Locale.LanguageRange[] languageRangeArray6 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList7 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList7, languageRangeArray6);
        java.util.Locale.LanguageRange[] languageRangeArray9 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList10 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList10, languageRangeArray9);
        java.util.Locale locale12 = java.util.Locale.JAPAN;
        java.util.Locale[] localeArray13 = new java.util.Locale[] { locale12 };
        java.util.ArrayList<java.util.Locale> localeList14 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList14, localeArray13);
        java.util.List<java.util.Locale> localeList16 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList10, (java.util.Collection<java.util.Locale>) localeList14);
        localeList16.clear();
        java.util.List<java.util.Locale> localeList18 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList7, (java.util.Collection<java.util.Locale>) localeList16);
        java.util.Locale.LanguageRange[] languageRangeArray19 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList20 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList20, languageRangeArray19);
        java.util.Locale.LanguageRange[] languageRangeArray22 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList23 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList23, languageRangeArray22);
        java.util.Locale locale25 = java.util.Locale.JAPAN;
        java.util.Locale[] localeArray26 = new java.util.Locale[] { locale25 };
        java.util.ArrayList<java.util.Locale> localeList27 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList27, localeArray26);
        java.util.List<java.util.Locale> localeList29 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList23, (java.util.Collection<java.util.Locale>) localeList27);
        localeList29.clear();
        java.util.List<java.util.Locale> localeList31 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList20, (java.util.Collection<java.util.Locale>) localeList29);
        java.util.List<java.util.Locale> localeList32 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList7, (java.util.Collection<java.util.Locale>) localeList31);
        java.util.ListIterator<java.util.Locale> localeItor33 = localeList31.listIterator();
        java.util.Locale locale34 = java.util.Locale.ENGLISH;
        localeItor33.add(locale34);
        java.lang.String str36 = locale0.getDisplayScript(locale34);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_GB");
        org.junit.Assert.assertEquals(locale4.toString(), "parsecasesensitive(false)(value(year,4,10,exceeds_pad)'-'value(monthofyear,2)'-'value(dayofmonth,2))[offset(+hh:mm:ss,'z')]_UNDERFLOW_Years");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "English (United Kingdom)" + "'", str5, "English (United Kingdom)");
        org.junit.Assert.assertNotNull(languageRangeArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(languageRangeArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(localeArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(localeList16);
        org.junit.Assert.assertNotNull(localeList18);
        org.junit.Assert.assertNotNull(languageRangeArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(languageRangeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(localeArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(localeList29);
        org.junit.Assert.assertNotNull(localeList31);
        org.junit.Assert.assertNotNull(localeList32);
        org.junit.Assert.assertNotNull(localeItor33);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "en");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
    }

    @Test
    public void test5208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5208");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 3, chronology1);
        int int3 = dateTime2.getYear();
        java.util.GregorianCalendar gregorianCalendar4 = dateTime2.toGregorianCalendar();
        gregorianCalendar4.roll(0, false);
        // The following exception was thrown during execution in test generation
        try {
            int int9 = gregorianCalendar4.getActualMinimum(83400);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 83400");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(gregorianCalendar4);
    }

    @Test
    public void test5209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5209");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forID("2022-02-21T09:40:32.545Z");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The datetime zone id '2022-02-21T09:40:32.545Z' is not recognised");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test5210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5210");
        float[] floatArray2 = new float[] { (-1L), (byte) -1 };
        java.nio.FloatBuffer floatBuffer3 = java.nio.FloatBuffer.wrap(floatArray2);
        java.nio.FloatBuffer floatBuffer4 = floatBuffer3.compact();
        float[] floatArray5 = floatBuffer4.array();
        // The following exception was thrown during execution in test generation
        try {
            java.nio.FloatBuffer floatBuffer8 = java.nio.FloatBuffer.wrap(floatArray5, 733000000, 2097);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[-1.0, -1.0]");
        org.junit.Assert.assertNotNull(floatBuffer3);
        org.junit.Assert.assertNotNull(floatBuffer4);
        org.junit.Assert.assertNotNull(floatArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray5), "[-1.0, -1.0]");
    }

    @Test
    public void test5211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5211");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 3, chronology1);
        org.joda.time.Period period3 = org.joda.time.Period.ZERO;
        org.joda.time.Period period4 = period3.normalizedStandard();
        org.joda.time.Period period6 = period4.minusMinutes((int) ' ');
        org.joda.time.Period period8 = period6.minusMonths((int) (byte) 0);
        org.joda.time.PeriodType periodType9 = period8.getPeriodType();
        org.joda.time.DateTime dateTime10 = dateTime2.minus((org.joda.time.ReadablePeriod) period8);
        org.joda.time.DateTime.Property property11 = dateTime2.minuteOfDay();
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.Duration duration14 = new org.joda.time.Duration(readableInstant12, readableInstant13);
        org.joda.time.Seconds seconds15 = duration14.toStandardSeconds();
        org.joda.time.MutableInterval mutableInterval16 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableDuration) duration14);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime(chronology17);
        org.joda.time.LocalDateTime.Property property19 = localDateTime18.yearOfCentury();
        int int20 = property19.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime22 = property19.addToCopy((long) (-1));
        org.joda.time.LocalDateTime localDateTime23 = property19.roundHalfFloorCopy();
        org.joda.time.LocalDateTime.Property property24 = localDateTime23.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime26 = localDateTime23.withWeekOfWeekyear((int) (byte) 1);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.plus(readablePeriod27);
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.Duration duration31 = new org.joda.time.Duration(readableInstant29, readableInstant30);
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.PeriodType periodType33 = null;
        org.joda.time.Period period34 = duration31.toPeriodTo(readableInstant32, periodType33);
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.Duration duration37 = new org.joda.time.Duration(readableInstant35, readableInstant36);
        long long38 = duration37.getMillis();
        boolean boolean39 = duration31.isShorterThan((org.joda.time.ReadableDuration) duration37);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime((long) 3, chronology41);
        org.joda.time.DateTime.Property property43 = dateTime42.dayOfYear();
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.DateMidnight dateMidnight45 = new org.joda.time.DateMidnight((java.lang.Object) dateTime42, chronology44);
        org.joda.time.MutableDateTime mutableDateTime46 = dateTime42.toMutableDateTime();
        mutableDateTime46.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property49 = mutableDateTime46.dayOfWeek();
        org.joda.time.MutableDateTime.Property property50 = mutableDateTime46.year();
        org.joda.time.MutableDateTime.Property property51 = mutableDateTime46.weekyear();
        boolean boolean52 = duration31.equals((java.lang.Object) mutableDateTime46);
        org.joda.time.MutableDateTime.Property property53 = mutableDateTime46.secondOfDay();
        org.joda.time.DateTime dateTime54 = localDateTime26.toDateTime((org.joda.time.ReadableInstant) mutableDateTime46);
        boolean boolean55 = mutableInterval16.isAfter((org.joda.time.ReadableInstant) dateTime54);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(seconds15);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 99 + "'", int20 == 99);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(mutableDateTime46);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
    }

    @Test
    public void test5212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5212");
        java.io.PrintStream printStream1 = new java.io.PrintStream("subject:\n (GERMAN)");
        printStream1.write((int) '#');
        java.util.GregorianCalendar gregorianCalendar9 = new java.util.GregorianCalendar(12, 4096, 7, (-1), (int) (short) 10);
        int int10 = gregorianCalendar9.getWeeksInWeekYear();
        java.util.TimeZone timeZone11 = gregorianCalendar9.getTimeZone();
        int int13 = gregorianCalendar9.getMaximum((int) (short) 10);
        printStream1.print((java.lang.Object) gregorianCalendar9);
        printStream1.println((long) 20);
        printStream1.print((double) (-10));
        printStream1.print((long) 18);
        java.nio.charset.Charset charset21 = java.nio.charset.Charset.defaultCharset();
        java.nio.charset.CharsetDecoder charsetDecoder22 = charset21.newDecoder();
        java.nio.charset.Charset charset23 = java.nio.charset.Charset.defaultCharset();
        boolean boolean24 = charset21.contains(charset23);
        java.nio.charset.CharsetEncoder charsetEncoder25 = charset21.newEncoder();
        byte[] byteArray26 = charsetEncoder25.replacement();
        java.nio.charset.CodingErrorAction codingErrorAction27 = charsetEncoder25.malformedInputAction();
        java.io.OutputStream outputStream28 = null;
        java.io.FilterOutputStream filterOutputStream29 = new java.io.FilterOutputStream(outputStream28);
        byte[] byteArray31 = new byte[] { (byte) 100 };
        filterOutputStream29.write(byteArray31, (int) (byte) 0, (int) (byte) 0);
        boolean boolean35 = charsetEncoder25.isLegalReplacement(byteArray31);
        // The following exception was thrown during execution in test generation
        try {
            printStream1.write(byteArray31, 96000000, 4200);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52 + "'", int10 == 52);
        org.junit.Assert.assertNotNull(timeZone11);
// flaky:         org.junit.Assert.assertEquals(timeZone11.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 11 + "'", int13 == 11);
        org.junit.Assert.assertNotNull(charset21);
        org.junit.Assert.assertNotNull(charsetDecoder22);
        org.junit.Assert.assertNotNull(charset23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(charsetEncoder25);
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[63]");
        org.junit.Assert.assertNotNull(codingErrorAction27);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[100]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
    }

    @Test
    public void test5213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5213");
        java.time.OffsetDateTime offsetDateTime0 = java.time.OffsetDateTime.now();
        java.time.LocalDate localDate1 = offsetDateTime0.toLocalDate();
        java.time.OffsetDateTime offsetDateTime2 = java.time.OffsetDateTime.now();
        java.time.temporal.ChronoField chronoField3 = java.time.temporal.ChronoField.HOUR_OF_DAY;
        boolean boolean4 = offsetDateTime2.isSupported((java.time.temporal.TemporalField) chronoField3);
        boolean boolean5 = offsetDateTime0.isEqual(offsetDateTime2);
        java.time.OffsetDateTime offsetDateTime7 = offsetDateTime2.minusHours(3601000000001L);
        java.util.GregorianCalendar gregorianCalendar13 = new java.util.GregorianCalendar(12, 4096, 7, (-1), (int) (short) 10);
        int int14 = gregorianCalendar13.getWeeksInWeekYear();
        java.lang.String str15 = gregorianCalendar13.getCalendarType();
        java.time.ZonedDateTime zonedDateTime16 = gregorianCalendar13.toZonedDateTime();
        java.time.ZonedDateTime zonedDateTime18 = zonedDateTime16.minusMonths((long) 10);
        java.time.ZonedDateTime zonedDateTime20 = zonedDateTime18.minusHours((long) 9);
        java.time.ZoneOffset zoneOffset21 = zonedDateTime18.getOffset();
        java.time.ZonedDateTime zonedDateTime22 = offsetDateTime2.atZoneSimilarLocal((java.time.ZoneId) zoneOffset21);
        java.time.zone.ZoneRules zoneRules23 = java.time.zone.ZoneRules.of(zoneOffset21);
        java.time.zone.ZoneRules zoneRules24 = zoneOffset21.getRules();
        org.junit.Assert.assertNotNull(offsetDateTime0);
        org.junit.Assert.assertNotNull(localDate1);
        org.junit.Assert.assertNotNull(offsetDateTime2);
        org.junit.Assert.assertTrue("'" + chronoField3 + "' != '" + java.time.temporal.ChronoField.HOUR_OF_DAY + "'", chronoField3.equals(java.time.temporal.ChronoField.HOUR_OF_DAY));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(offsetDateTime7);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 52 + "'", int14 == 52);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "gregory" + "'", str15, "gregory");
        org.junit.Assert.assertNotNull(zonedDateTime16);
        org.junit.Assert.assertNotNull(zonedDateTime18);
        org.junit.Assert.assertNotNull(zonedDateTime20);
        org.junit.Assert.assertNotNull(zoneOffset21);
        org.junit.Assert.assertNotNull(zonedDateTime22);
        org.junit.Assert.assertNotNull(zoneRules23);
        org.junit.Assert.assertNotNull(zoneRules24);
    }

    @Test
    public void test5214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5214");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 3, chronology1);
        org.joda.time.DateTime.Property property3 = dateTime2.dayOfYear();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight((java.lang.Object) dateTime2, chronology4);
        org.joda.time.MutableDateTime mutableDateTime6 = dateTime2.toMutableDateTime();
        mutableDateTime6.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime6.millisOfDay();
        org.joda.time.PeriodType periodType10 = org.joda.time.PeriodType.years();
        org.joda.time.DurationFieldType durationFieldType11 = org.joda.time.DurationFieldType.halfdays();
        int int12 = periodType10.indexOf(durationFieldType11);
        mutableDateTime6.add(durationFieldType11, (int) 'a');
        java.util.TimeZone timeZone16 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight((long) 1970, dateTimeZone17);
        mutableDateTime6.setTime((org.joda.time.ReadableInstant) dateMidnight18);
        mutableDateTime6.addWeekyears(52);
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.Duration duration24 = new org.joda.time.Duration(readableInstant22, readableInstant23);
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.PeriodType periodType26 = null;
        org.joda.time.Period period27 = duration24.toPeriodTo(readableInstant25, periodType26);
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.Duration duration30 = new org.joda.time.Duration(readableInstant28, readableInstant29);
        long long31 = duration30.getMillis();
        boolean boolean32 = duration24.isShorterThan((org.joda.time.ReadableDuration) duration30);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime((long) 3, chronology34);
        org.joda.time.DateTime.Property property36 = dateTime35.dayOfYear();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.DateMidnight dateMidnight38 = new org.joda.time.DateMidnight((java.lang.Object) dateTime35, chronology37);
        org.joda.time.MutableDateTime mutableDateTime39 = dateTime35.toMutableDateTime();
        mutableDateTime39.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property42 = mutableDateTime39.dayOfWeek();
        org.joda.time.MutableDateTime.Property property43 = mutableDateTime39.year();
        org.joda.time.MutableDateTime.Property property44 = mutableDateTime39.weekyear();
        boolean boolean45 = duration24.equals((java.lang.Object) mutableDateTime39);
        mutableDateTime39.addMonths((int) ' ');
        mutableDateTime39.add((long) (byte) 10);
        org.joda.time.Period period50 = org.joda.time.Period.ZERO;
        org.joda.time.Period period51 = period50.normalizedStandard();
        org.joda.time.Period period53 = period50.plusHours(2);
        java.time.chrono.IsoEra isoEra54 = java.time.chrono.IsoEra.CE;
        boolean boolean55 = period53.equals((java.lang.Object) isoEra54);
        int int56 = period53.getMinutes();
        mutableDateTime39.add((org.joda.time.ReadablePeriod) period53);
        java.util.TimeZone timeZone59 = null;
        org.joda.time.DateTimeZone dateTimeZone60 = org.joda.time.DateTimeZone.forTimeZone(timeZone59);
        org.joda.time.DateMidnight dateMidnight61 = new org.joda.time.DateMidnight((long) 1970, dateTimeZone60);
        long long64 = dateTimeZone60.convertLocalToUTC((long) 3, false);
        long long67 = dateTimeZone60.convertLocalToUTC(0L, true);
        mutableDateTime39.setZoneRetainFields(dateTimeZone60);
        java.lang.String str69 = dateTimeZone60.toString();
        org.joda.time.chrono.EthiopicChronology ethiopicChronology70 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone60);
        org.joda.time.DateTimeField dateTimeField71 = ethiopicChronology70.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone72 = ethiopicChronology70.getZone();
        org.joda.time.DateTimeField dateTimeField73 = ethiopicChronology70.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField74 = ethiopicChronology70.minuteOfDay();
        org.joda.time.LocalDate localDate75 = new org.joda.time.LocalDate();
        org.joda.time.Interval interval76 = localDate75.toInterval();
        int int77 = localDate75.getDayOfYear();
        java.util.TimeZone timeZone81 = null;
        org.joda.time.DateTimeZone dateTimeZone82 = org.joda.time.DateTimeZone.forTimeZone(timeZone81);
        org.joda.time.DateMidnight dateMidnight83 = new org.joda.time.DateMidnight((long) 1970, dateTimeZone82);
        org.joda.time.DateTime dateTime84 = new org.joda.time.DateTime((long) 3600000, dateTimeZone82);
        org.joda.time.DateTime dateTime85 = new org.joda.time.DateTime((long) 22, dateTimeZone82);
        org.joda.time.Interval interval86 = localDate75.toInterval(dateTimeZone82);
        org.joda.time.Chronology chronology87 = ethiopicChronology70.withZone(dateTimeZone82);
        mutableDateTime6.setZoneRetainFields(dateTimeZone82);
        java.lang.String str90 = dateTimeZone82.getNameKey((long) (-624));
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertNotNull(durationFieldType11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(mutableDateTime39);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertTrue("'" + isoEra54 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra54.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone60);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 3L + "'", long64 == 3L);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 0L + "'", long67 == 0L);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "Etc/UTC" + "'", str69, "Etc/UTC");
        org.junit.Assert.assertNotNull(ethiopicChronology70);
        org.junit.Assert.assertNotNull(dateTimeField71);
        org.junit.Assert.assertNotNull(dateTimeZone72);
        org.junit.Assert.assertNotNull(dateTimeField73);
        org.junit.Assert.assertNotNull(dateTimeField74);
        org.junit.Assert.assertNotNull(interval76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 52 + "'", int77 == 52);
        org.junit.Assert.assertNotNull(dateTimeZone82);
        org.junit.Assert.assertNotNull(interval86);
        org.junit.Assert.assertNotNull(chronology87);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "UTC" + "'", str90, "UTC");
    }

    @Test
    public void test5215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5215");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.withField(dateTimeFieldType2, (int) 'a');
        org.joda.time.Period period5 = org.joda.time.Period.ZERO;
        org.joda.time.Seconds seconds6 = period5.toStandardSeconds();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime1.withPeriodAdded((org.joda.time.ReadablePeriod) period5, 4096);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime1.withYear(2022);
        // The following exception was thrown during execution in test generation
        try {
            int int12 = localDateTime10.getValue(46);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 46");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(seconds6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
    }

    @Test
    public void test5216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5216");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.now();
        java.time.temporal.ChronoField chronoField1 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime3 = localDateTime0.with((java.time.temporal.TemporalField) chronoField1, (long) 10);
        java.time.OffsetTime offsetTime4 = java.time.OffsetTime.MAX;
        java.time.LocalTime localTime5 = offsetTime4.toLocalTime();
        java.lang.String str6 = offsetTime4.toString();
        java.time.Duration duration7 = java.time.Duration.ZERO;
        java.lang.String str8 = duration7.toString();
        java.time.OffsetTime offsetTime9 = offsetTime4.plus((java.time.temporal.TemporalAmount) duration7);
        java.time.OffsetTime offsetTime11 = offsetTime4.plusNanos((long) 0);
        org.joda.time.TimeOfDay timeOfDay13 = org.joda.time.TimeOfDay.fromMillisOfDay((long) (short) 0);
        org.joda.time.TimeOfDay timeOfDay15 = org.joda.time.TimeOfDay.fromMillisOfDay((long) (short) 0);
        org.joda.time.Hours hours16 = org.joda.time.Hours.hoursBetween((org.joda.time.ReadablePartial) timeOfDay13, (org.joda.time.ReadablePartial) timeOfDay15);
        org.joda.time.DurationFieldType durationFieldType17 = org.joda.time.DurationFieldType.hours();
        org.joda.time.TimeOfDay timeOfDay19 = timeOfDay15.withFieldAdded(durationFieldType17, (int) (byte) 0);
        org.joda.time.TimeOfDay timeOfDay21 = timeOfDay15.minusMillis((int) '#');
        boolean boolean22 = offsetTime4.equals((java.lang.Object) timeOfDay21);
        boolean boolean23 = chronoField1.isSupportedBy((java.time.temporal.TemporalAccessor) offsetTime4);
        java.time.OffsetTime offsetTime25 = offsetTime4.plusMinutes(34739555000000L);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertTrue("'" + chronoField1 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField1.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime3);
        org.junit.Assert.assertNotNull(offsetTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "23:59:59.999999999-18:00" + "'", str6, "23:59:59.999999999-18:00");
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "PT0S" + "'", str8, "PT0S");
        org.junit.Assert.assertNotNull(offsetTime9);
        org.junit.Assert.assertNotNull(offsetTime11);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertNotNull(timeOfDay15);
        org.junit.Assert.assertNotNull(hours16);
        org.junit.Assert.assertNotNull(durationFieldType17);
        org.junit.Assert.assertNotNull(timeOfDay19);
        org.junit.Assert.assertNotNull(timeOfDay21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(offsetTime25);
    }

    @Test
    public void test5217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5217");
        java.net.InetAddress inetAddress0 = java.net.InetAddress.getLocalHost();
        boolean boolean1 = inetAddress0.isMCOrgLocal();
        float[] floatArray4 = new float[] { (-1L), (byte) -1 };
        java.nio.FloatBuffer floatBuffer5 = java.nio.FloatBuffer.wrap(floatArray4);
        boolean boolean6 = inetAddress0.equals((java.lang.Object) floatBuffer5);
        java.time.OffsetTime offsetTime7 = java.time.OffsetTime.MAX;
        java.time.LocalTime localTime8 = offsetTime7.toLocalTime();
        java.lang.String str9 = offsetTime7.toString();
        java.time.Duration duration10 = java.time.Duration.ZERO;
        java.lang.String str11 = duration10.toString();
        java.time.OffsetTime offsetTime12 = offsetTime7.plus((java.time.temporal.TemporalAmount) duration10);
        java.time.OffsetTime offsetTime14 = offsetTime7.withHour((int) (short) 1);
        boolean boolean15 = inetAddress0.equals((java.lang.Object) offsetTime7);
        java.time.LocalDate localDate17 = java.time.LocalDate.ofEpochDay((long) ' ');
        java.time.OffsetTime offsetTime18 = java.time.OffsetTime.MAX;
        java.time.LocalTime localTime19 = offsetTime18.toLocalTime();
        java.lang.String str20 = offsetTime18.toString();
        java.time.Duration duration21 = java.time.Duration.ZERO;
        java.lang.String str22 = duration21.toString();
        java.time.OffsetTime offsetTime23 = offsetTime18.plus((java.time.temporal.TemporalAmount) duration21);
        java.time.LocalTime localTime24 = offsetTime18.toLocalTime();
        java.time.chrono.ChronoLocalDateTime<?> wildcardChronoLocalDateTime25 = localDate17.atTime(localTime24);
        java.time.LocalDate localDate27 = localDate17.minusWeeks((long) 2097);
        java.time.OffsetTime offsetTime28 = java.time.OffsetTime.MAX;
        java.time.LocalTime localTime29 = offsetTime28.toLocalTime();
        java.lang.String str30 = offsetTime28.toString();
        java.time.Duration duration31 = java.time.Duration.ZERO;
        java.lang.String str32 = duration31.toString();
        java.time.OffsetTime offsetTime33 = offsetTime28.plus((java.time.temporal.TemporalAmount) duration31);
        java.time.OffsetTime offsetTime35 = offsetTime28.plusNanos((long) 0);
        java.time.LocalTime localTime40 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime41 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime40);
        java.time.temporal.ChronoField chronoField42 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime44 = localTime40.with((java.time.temporal.TemporalField) chronoField42, (long) (short) 1);
        java.util.Locale locale45 = java.util.Locale.GERMANY;
        java.lang.String str46 = chronoField42.getDisplayName(locale45);
        java.time.OffsetTime offsetTime48 = offsetTime35.with((java.time.temporal.TemporalField) chronoField42, (long) 28);
        java.time.OffsetDateTime offsetDateTime49 = localDate27.atTime(offsetTime35);
        java.time.LocalDate localDate51 = localDate27.withDayOfYear(28);
        java.time.OffsetDateTime offsetDateTime52 = offsetTime7.atDate(localDate51);
        java.time.Duration duration55 = java.time.Duration.ofSeconds((long) 7, (long) '+');
        java.time.Duration duration57 = duration55.minusMinutes((long) 1024);
        java.time.OffsetDateTime offsetDateTime58 = offsetDateTime52.minus((java.time.temporal.TemporalAmount) duration55);
        org.junit.Assert.assertNotNull(inetAddress0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(floatArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray4), "[-1.0, -1.0]");
        org.junit.Assert.assertNotNull(floatBuffer5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(offsetTime7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "23:59:59.999999999-18:00" + "'", str9, "23:59:59.999999999-18:00");
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "PT0S" + "'", str11, "PT0S");
        org.junit.Assert.assertNotNull(offsetTime12);
        org.junit.Assert.assertNotNull(offsetTime14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(offsetTime18);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "23:59:59.999999999-18:00" + "'", str20, "23:59:59.999999999-18:00");
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "PT0S" + "'", str22, "PT0S");
        org.junit.Assert.assertNotNull(offsetTime23);
        org.junit.Assert.assertNotNull(localTime24);
        org.junit.Assert.assertNotNull(wildcardChronoLocalDateTime25);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(offsetTime28);
        org.junit.Assert.assertNotNull(localTime29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "23:59:59.999999999-18:00" + "'", str30, "23:59:59.999999999-18:00");
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "PT0S" + "'", str32, "PT0S");
        org.junit.Assert.assertNotNull(offsetTime33);
        org.junit.Assert.assertNotNull(offsetTime35);
        org.junit.Assert.assertNotNull(localTime40);
        org.junit.Assert.assertNotNull(localTime41);
        org.junit.Assert.assertTrue("'" + chronoField42 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField42.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime44);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "NanoOfDay" + "'", str46, "NanoOfDay");
        org.junit.Assert.assertNotNull(offsetTime48);
        org.junit.Assert.assertNotNull(offsetDateTime49);
        org.junit.Assert.assertNotNull(localDate51);
        org.junit.Assert.assertNotNull(offsetDateTime52);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertNotNull(duration57);
        org.junit.Assert.assertNotNull(offsetDateTime58);
    }

    @Test
    public void test5218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5218");
        org.joda.time.YearMonthDay yearMonthDay0 = new org.joda.time.YearMonthDay();
        org.joda.time.YearMonthDay yearMonthDay2 = yearMonthDay0.plusMonths((int) (byte) 100);
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate();
        int int4 = localDate3.getCenturyOfEra();
        org.joda.time.LocalDate.Property property5 = localDate3.dayOfWeek();
        org.joda.time.LocalDate localDate7 = property5.addToCopy(7);
        org.joda.time.LocalDate localDate8 = property5.roundCeilingCopy();
        int int9 = localDate8.getMonthOfYear();
        org.joda.time.DurationFieldType durationFieldType10 = org.joda.time.DurationFieldType.weeks();
        boolean boolean11 = localDate8.isSupported(durationFieldType10);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.monthOfYear();
        int int13 = localDate8.get(dateTimeFieldType12);
        org.joda.time.YearMonthDay.Property property14 = yearMonthDay0.property(dateTimeFieldType12);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime(chronology15);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.withYearOfCentury((int) 'a');
        int int19 = localDateTime18.getDayOfMonth();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime18.withMinuteOfHour((int) ' ');
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.weekyear();
        int int23 = localDateTime18.get(dateTimeFieldType22);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay25 = yearMonthDay0.withField(dateTimeFieldType22, 27);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'weekyear' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(yearMonthDay2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 20 + "'", int4 == 20);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
        org.junit.Assert.assertNotNull(durationFieldType10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 21 + "'", int19 == 21);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2097 + "'", int23 == 2097);
    }

    @Test
    public void test5219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5219");
        java.util.Optional<java.lang.Exception> exceptionOptional0 = java.util.Optional.empty();
        java.lang.String str1 = exceptionOptional0.toString();
        java.time.LocalDateTime localDateTime2 = java.time.LocalDateTime.now();
        java.time.temporal.ChronoField chronoField3 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime5 = localDateTime2.with((java.time.temporal.TemporalField) chronoField3, (long) 10);
        java.time.LocalDateTime localDateTime7 = localDateTime2.withDayOfYear((int) '/');
        boolean boolean8 = exceptionOptional0.equals((java.lang.Object) localDateTime7);
        java.time.LocalTime localTime13 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime14 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime13);
        java.time.LocalTime localTime19 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime20 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime19);
        java.time.temporal.ChronoField chronoField21 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime23 = localTime19.with((java.time.temporal.TemporalField) chronoField21, (long) (short) 1);
        long long24 = localTime13.getLong((java.time.temporal.TemporalField) chronoField21);
        java.time.LocalTime localTime26 = localTime13.withSecond((int) (short) 1);
        java.time.temporal.ChronoField chronoField27 = java.time.temporal.ChronoField.SECOND_OF_DAY;
        java.time.temporal.ValueRange valueRange28 = localTime26.range((java.time.temporal.TemporalField) chronoField27);
        java.time.Duration duration30 = java.time.Duration.ofSeconds((long) 0);
        java.time.LocalTime localTime31 = localTime26.plus((java.time.temporal.TemporalAmount) duration30);
        java.time.LocalDateTime localDateTime32 = localDateTime7.plus((java.time.temporal.TemporalAmount) duration30);
        java.time.OffsetDateTime offsetDateTime33 = java.time.OffsetDateTime.now();
        java.time.temporal.ChronoField chronoField34 = java.time.temporal.ChronoField.HOUR_OF_DAY;
        boolean boolean35 = offsetDateTime33.isSupported((java.time.temporal.TemporalField) chronoField34);
        java.time.OffsetDateTime offsetDateTime37 = offsetDateTime33.plusSeconds(180000L);
        int int38 = offsetDateTime37.getDayOfMonth();
        org.joda.time.Period period39 = org.joda.time.Period.ZERO;
        org.joda.time.Period period40 = period39.normalizedStandard();
        org.joda.time.Period period42 = period39.plusHours(2);
        java.time.chrono.IsoEra isoEra43 = java.time.chrono.IsoEra.CE;
        boolean boolean44 = period42.equals((java.lang.Object) isoEra43);
        java.time.LocalTime localTime49 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime50 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime49);
        java.time.LocalTime localTime55 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime56 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime55);
        java.time.temporal.ChronoField chronoField57 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime59 = localTime55.with((java.time.temporal.TemporalField) chronoField57, (long) (short) 1);
        long long60 = localTime49.getLong((java.time.temporal.TemporalField) chronoField57);
        boolean boolean61 = isoEra43.isSupported((java.time.temporal.TemporalField) chronoField57);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery62 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period63 = isoEra43.query(periodTemporalQuery62);
        boolean boolean64 = period63.isNegative();
        java.time.Period period66 = period63.plusDays((long) ' ');
        java.time.Period period68 = period66.withMonths(256);
        boolean boolean69 = period66.isZero();
        java.time.OffsetDateTime offsetDateTime70 = offsetDateTime37.minus((java.time.temporal.TemporalAmount) period66);
        java.time.temporal.Temporal temporal71 = localDateTime7.adjustInto((java.time.temporal.Temporal) offsetDateTime37);
        org.junit.Assert.assertNotNull(exceptionOptional0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Optional.empty" + "'", str1, "Optional.empty");
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertTrue("'" + chronoField3 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField3.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertTrue("'" + chronoField21 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField21.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 3601000000001L + "'", long24 == 3601000000001L);
        org.junit.Assert.assertNotNull(localTime26);
        org.junit.Assert.assertTrue("'" + chronoField27 + "' != '" + java.time.temporal.ChronoField.SECOND_OF_DAY + "'", chronoField27.equals(java.time.temporal.ChronoField.SECOND_OF_DAY));
        org.junit.Assert.assertNotNull(valueRange28);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(localTime31);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(offsetDateTime33);
        org.junit.Assert.assertTrue("'" + chronoField34 + "' != '" + java.time.temporal.ChronoField.HOUR_OF_DAY + "'", chronoField34.equals(java.time.temporal.ChronoField.HOUR_OF_DAY));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(offsetDateTime37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 23 + "'", int38 == 23);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertTrue("'" + isoEra43 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra43.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(localTime49);
        org.junit.Assert.assertNotNull(localTime50);
        org.junit.Assert.assertNotNull(localTime55);
        org.junit.Assert.assertNotNull(localTime56);
        org.junit.Assert.assertTrue("'" + chronoField57 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField57.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime59);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 3601000000001L + "'", long60 == 3601000000001L);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(periodTemporalQuery62);
        org.junit.Assert.assertNotNull(period63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(period66);
        org.junit.Assert.assertNotNull(period68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(offsetDateTime70);
        org.junit.Assert.assertNotNull(temporal71);
    }

    @Test
    public void test5220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5220");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.yearOfCentury();
        int int3 = property2.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime5 = property2.addToCopy((long) (-1));
        org.joda.time.LocalDateTime localDateTime6 = property2.roundHalfFloorCopy();
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.minuteOfHour();
        java.lang.String str8 = property7.getAsShortText();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 99 + "'", int3 == 99);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "0" + "'", str8, "0");
    }

    @Test
    public void test5221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5221");
        org.joda.time.format.PeriodPrinter periodPrinter0 = null;
        org.joda.time.format.PeriodParser periodParser1 = null;
        org.joda.time.format.PeriodFormatter periodFormatter2 = new org.joda.time.format.PeriodFormatter(periodPrinter0, periodParser1);
        org.joda.time.PeriodType periodType3 = org.joda.time.PeriodType.years();
        org.joda.time.format.PeriodFormatter periodFormatter4 = periodFormatter2.withParseType(periodType3);
        java.util.Locale locale5 = java.util.Locale.GERMANY;
        java.time.chrono.Chronology chronology6 = java.time.chrono.Chronology.ofLocale(locale5);
        org.joda.time.format.PeriodFormatter periodFormatter7 = periodFormatter2.withLocale(locale5);
        org.joda.time.format.PeriodPrinter periodPrinter8 = periodFormatter2.getPrinter();
        org.junit.Assert.assertNotNull(periodType3);
        org.junit.Assert.assertNotNull(periodFormatter4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de_DE");
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(periodFormatter7);
        org.junit.Assert.assertNull(periodPrinter8);
    }

    @Test
    public void test5222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5222");
        float[] floatArray2 = new float[] { (-1L), (byte) -1 };
        java.nio.FloatBuffer floatBuffer3 = java.nio.FloatBuffer.wrap(floatArray2);
        float[] floatArray6 = new float[] { (-1L), (byte) -1 };
        java.nio.FloatBuffer floatBuffer7 = java.nio.FloatBuffer.wrap(floatArray6);
        java.nio.FloatBuffer floatBuffer8 = floatBuffer7.compact();
        boolean boolean9 = floatBuffer8.isDirect();
        int int10 = floatBuffer8.limit();
        java.nio.FloatBuffer floatBuffer11 = floatBuffer3.put(floatBuffer8);
        float[] floatArray14 = new float[] { (-1L), (byte) -1 };
        java.nio.FloatBuffer floatBuffer15 = java.nio.FloatBuffer.wrap(floatArray14);
        java.nio.FloatBuffer floatBuffer16 = floatBuffer15.compact();
        java.nio.FloatBuffer floatBuffer17 = floatBuffer15.asReadOnlyBuffer();
        java.nio.ByteOrder byteOrder18 = floatBuffer15.order();
        java.nio.FloatBuffer floatBuffer19 = floatBuffer15.asReadOnlyBuffer();
        java.nio.FloatBuffer floatBuffer20 = floatBuffer3.put(floatBuffer19);
        java.nio.FloatBuffer floatBuffer21 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int22 = floatBuffer19.compareTo(floatBuffer21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[-1.0, -1.0]");
        org.junit.Assert.assertNotNull(floatBuffer3);
        org.junit.Assert.assertNotNull(floatArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray6), "[-1.0, -1.0]");
        org.junit.Assert.assertNotNull(floatBuffer7);
        org.junit.Assert.assertNotNull(floatBuffer8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertNotNull(floatBuffer11);
        org.junit.Assert.assertNotNull(floatArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray14), "[-1.0, -1.0]");
        org.junit.Assert.assertNotNull(floatBuffer15);
        org.junit.Assert.assertNotNull(floatBuffer16);
        org.junit.Assert.assertNotNull(floatBuffer17);
        org.junit.Assert.assertNotNull(byteOrder18);
        org.junit.Assert.assertNotNull(floatBuffer19);
        org.junit.Assert.assertNotNull(floatBuffer20);
    }

    @Test
    public void test5223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5223");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 3, chronology1);
        int int3 = dateTime2.getYear();
        java.util.GregorianCalendar gregorianCalendar4 = dateTime2.toGregorianCalendar();
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.Duration duration7 = new org.joda.time.Duration(readableInstant5, readableInstant6);
        org.joda.time.Duration duration9 = duration7.withMillis((-1L));
        org.joda.time.Duration duration11 = duration9.minus((long) 2022);
        org.joda.time.DateTime dateTime12 = dateTime2.minus((org.joda.time.ReadableDuration) duration9);
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.Duration duration15 = new org.joda.time.Duration(readableInstant13, readableInstant14);
        org.joda.time.Duration duration17 = duration15.withMillis((-1L));
        org.joda.time.Duration duration19 = duration17.minus((long) 2022);
        boolean boolean20 = duration9.isLongerThan((org.joda.time.ReadableDuration) duration17);
        org.joda.time.Period period21 = duration17.toPeriod();
        int int22 = period21.size();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(gregorianCalendar4);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 8 + "'", int22 == 8);
    }

    @Test
    public void test5224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5224");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((long) 0, chronology2);
        org.joda.time.Chronology chronology4 = localTime3.getChronology();
        java.util.Locale locale5 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale6 = java.util.Locale.GERMANY;
        java.lang.String str7 = locale5.getDisplayScript(locale6);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket9 = new org.joda.time.format.DateTimeParserBucket((long) 1970, chronology4, locale5, (java.lang.Integer) 1);
        org.joda.time.DateTime dateTime10 = org.joda.time.DateTime.now(chronology4);
        int int11 = dateTime10.getYearOfEra();
        org.joda.time.chrono.EthiopicChronology ethiopicChronology13 = org.joda.time.chrono.EthiopicChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField14 = ethiopicChronology13.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField15 = ethiopicChronology13.era();
        org.joda.time.ReadablePartial readablePartial16 = null;
        java.util.Locale locale18 = java.util.Locale.GERMANY;
        java.lang.String str19 = locale18.getDisplayName();
        java.lang.String str20 = dateTimeField15.getAsText(readablePartial16, (int) '0', locale18);
        java.util.Set<java.lang.String> strSet21 = locale18.getUnicodeLocaleAttributes();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str22 = dateTime10.toString("dayOfMonth", locale18);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: O");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2022 + "'", int11 == 2022);
        org.junit.Assert.assertNotNull(ethiopicChronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "de_DE");
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Deutsch (Deutschland)" + "'", str19, "Deutsch (Deutschland)");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "48" + "'", str20, "48");
        org.junit.Assert.assertNotNull(strSet21);
    }

    @Test
    public void test5225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5225");
        java.nio.charset.Charset charset0 = java.nio.charset.Charset.defaultCharset();
        java.nio.charset.CharsetDecoder charsetDecoder1 = charset0.newDecoder();
        java.nio.charset.Charset charset2 = java.nio.charset.Charset.defaultCharset();
        boolean boolean3 = charset0.contains(charset2);
        java.nio.charset.CharsetEncoder charsetEncoder4 = charset0.newEncoder();
        char[] charArray5 = new char[] {};
        java.nio.CharBuffer charBuffer6 = java.nio.CharBuffer.wrap(charArray5);
        java.nio.ByteBuffer byteBuffer7 = charsetEncoder4.encode(charBuffer6);
        java.nio.ByteOrder byteOrder8 = byteBuffer7.order();
        java.nio.CharBuffer charBuffer9 = byteBuffer7.asCharBuffer();
        java.nio.charset.Charset charset10 = java.nio.charset.Charset.defaultCharset();
        java.nio.charset.CharsetDecoder charsetDecoder11 = charset10.newDecoder();
        java.nio.charset.Charset charset12 = java.nio.charset.Charset.defaultCharset();
        boolean boolean13 = charset10.contains(charset12);
        java.nio.charset.CharsetEncoder charsetEncoder14 = charset10.newEncoder();
        byte[] byteArray15 = charsetEncoder14.replacement();
        java.nio.charset.Charset charset16 = java.nio.charset.Charset.defaultCharset();
        java.nio.charset.CharsetDecoder charsetDecoder17 = charset16.newDecoder();
        float float18 = charsetDecoder17.maxCharsPerByte();
        float float19 = charsetDecoder17.averageCharsPerByte();
        java.nio.charset.CodingErrorAction codingErrorAction20 = charsetDecoder17.unmappableCharacterAction();
        java.nio.charset.CharsetEncoder charsetEncoder21 = charsetEncoder14.onUnmappableCharacter(codingErrorAction20);
        java.nio.charset.Charset charset22 = java.nio.charset.Charset.defaultCharset();
        java.nio.charset.CharsetDecoder charsetDecoder23 = charset22.newDecoder();
        java.nio.charset.Charset charset24 = java.nio.charset.Charset.defaultCharset();
        boolean boolean25 = charset22.contains(charset24);
        java.nio.charset.CharsetEncoder charsetEncoder26 = charset22.newEncoder();
        byte[] byteArray27 = charsetEncoder26.replacement();
        java.nio.charset.CharsetEncoder charsetEncoder28 = charsetEncoder14.replaceWith(byteArray27);
        java.io.OutputStream outputStream29 = null;
        java.io.FilterOutputStream filterOutputStream30 = new java.io.FilterOutputStream(outputStream29);
        byte[] byteArray32 = new byte[] { (byte) 100 };
        filterOutputStream30.write(byteArray32, (int) (byte) 0, (int) (byte) 0);
        java.nio.charset.CharsetEncoder charsetEncoder36 = charsetEncoder14.replaceWith(byteArray32);
        java.nio.charset.CodingErrorAction codingErrorAction37 = charsetEncoder36.malformedInputAction();
        java.io.OutputStream outputStream38 = null;
        java.io.FilterOutputStream filterOutputStream39 = new java.io.FilterOutputStream(outputStream38);
        byte[] byteArray41 = new byte[] { (byte) 100 };
        filterOutputStream39.write(byteArray41, (int) (byte) 0, (int) (byte) 0);
        boolean boolean45 = charsetEncoder36.isLegalReplacement(byteArray41);
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer46 = byteBuffer7.get(byteArray41);
            org.junit.Assert.fail("Expected exception of type java.nio.BufferUnderflowException; message: null");
        } catch (java.nio.BufferUnderflowException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charset0);
        org.junit.Assert.assertNotNull(charsetDecoder1);
        org.junit.Assert.assertNotNull(charset2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(charsetEncoder4);
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[]");
        org.junit.Assert.assertNotNull(charBuffer6);
        org.junit.Assert.assertNotNull(byteBuffer7);
        org.junit.Assert.assertNotNull(byteOrder8);
        org.junit.Assert.assertNotNull(charBuffer9);
        org.junit.Assert.assertNotNull(charset10);
        org.junit.Assert.assertNotNull(charsetDecoder11);
        org.junit.Assert.assertNotNull(charset12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(charsetEncoder14);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[63]");
        org.junit.Assert.assertNotNull(charset16);
        org.junit.Assert.assertNotNull(charsetDecoder17);
        org.junit.Assert.assertTrue("'" + float18 + "' != '" + 1.0f + "'", float18 == 1.0f);
        org.junit.Assert.assertTrue("'" + float19 + "' != '" + 1.0f + "'", float19 == 1.0f);
        org.junit.Assert.assertNotNull(codingErrorAction20);
        org.junit.Assert.assertNotNull(charsetEncoder21);
        org.junit.Assert.assertNotNull(charset22);
        org.junit.Assert.assertNotNull(charsetDecoder23);
        org.junit.Assert.assertNotNull(charset24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(charsetEncoder26);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[63]");
        org.junit.Assert.assertNotNull(charsetEncoder28);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[100]");
        org.junit.Assert.assertNotNull(charsetEncoder36);
        org.junit.Assert.assertNotNull(codingErrorAction37);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[100]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
    }

    @Test
    public void test5226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5226");
        java.time.OffsetDateTime offsetDateTime0 = java.time.OffsetDateTime.now();
        java.time.LocalDate localDate1 = offsetDateTime0.toLocalDate();
        java.time.OffsetDateTime offsetDateTime2 = java.time.OffsetDateTime.now();
        java.time.LocalDate localDate3 = offsetDateTime2.toLocalDate();
        java.time.OffsetDateTime offsetDateTime4 = java.time.OffsetDateTime.now();
        java.time.temporal.ChronoField chronoField5 = java.time.temporal.ChronoField.HOUR_OF_DAY;
        boolean boolean6 = offsetDateTime4.isSupported((java.time.temporal.TemporalField) chronoField5);
        boolean boolean7 = offsetDateTime2.isEqual(offsetDateTime4);
        java.lang.String str8 = offsetDateTime4.toString();
        boolean boolean9 = offsetDateTime0.isAfter(offsetDateTime4);
        java.time.temporal.ChronoField chronoField10 = java.time.temporal.ChronoField.DAY_OF_WEEK;
        java.time.LocalDateTime localDateTime11 = java.time.LocalDateTime.now();
        java.time.temporal.ChronoField chronoField12 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime14 = localDateTime11.with((java.time.temporal.TemporalField) chronoField12, (long) 10);
        java.time.Duration duration16 = java.time.Duration.ofSeconds((long) 0);
        java.time.temporal.Temporal temporal17 = localDateTime11.minus((java.time.temporal.TemporalAmount) duration16);
        long long18 = chronoField10.getFrom((java.time.temporal.TemporalAccessor) temporal17);
        int int19 = offsetDateTime0.get((java.time.temporal.TemporalField) chronoField10);
        java.time.OffsetDateTime offsetDateTime21 = offsetDateTime0.minusNanos(10L);
        // The following exception was thrown during execution in test generation
        try {
            java.time.OffsetDateTime offsetDateTime23 = offsetDateTime0.withHour(65);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for HourOfDay (valid values 0 - 23): 65");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(offsetDateTime0);
        org.junit.Assert.assertNotNull(localDate1);
        org.junit.Assert.assertNotNull(offsetDateTime2);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(offsetDateTime4);
        org.junit.Assert.assertTrue("'" + chronoField5 + "' != '" + java.time.temporal.ChronoField.HOUR_OF_DAY + "'", chronoField5.equals(java.time.temporal.ChronoField.HOUR_OF_DAY));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
// flaky:         org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "2022-02-21T09:41:32.738Z" + "'", str8, "2022-02-21T09:41:32.738Z");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + chronoField10 + "' != '" + java.time.temporal.ChronoField.DAY_OF_WEEK + "'", chronoField10.equals(java.time.temporal.ChronoField.DAY_OF_WEEK));
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + chronoField12 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField12.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(temporal17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1L + "'", long18 == 1L);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(offsetDateTime21);
    }

    @Test
    public void test5227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5227");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Duration duration2 = new org.joda.time.Duration(readableInstant0, readableInstant1);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = duration2.toPeriodTo(readableInstant3, periodType4);
        long long6 = duration2.getStandardSeconds();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 3, chronology8);
        org.joda.time.DateTime.Property property10 = dateTime9.dayOfYear();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight((java.lang.Object) dateTime9, chronology11);
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight12.minusMonths((-1));
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight12.withDayOfYear((int) ' ');
        org.joda.time.Interval interval17 = duration2.toIntervalTo((org.joda.time.ReadableInstant) dateMidnight16);
        org.joda.time.DateMidnight.Property property18 = dateMidnight16.dayOfYear();
        org.joda.time.DateMidnight dateMidnight20 = dateMidnight16.plusYears(274);
        org.joda.time.DateMidnight dateMidnight22 = dateMidnight20.minusDays(1024);
        org.joda.time.DateMidnight dateMidnight24 = dateMidnight20.withMillis((long) 27);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(dateMidnight24);
    }

    @Test
    public void test5228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5228");
        java.util.stream.LongStream longStream1 = java.util.stream.LongStream.of(0L);
        java.util.function.LongPredicate longPredicate2 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.LongStream longStream3 = longStream1.filter(longPredicate2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(longStream1);
    }

    @Test
    public void test5229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5229");
        java.time.format.DateTimeFormatter dateTimeFormatter0 = java.time.format.DateTimeFormatter.ISO_LOCAL_DATE_TIME;
        java.time.ZoneOffset zoneOffset3 = java.time.ZoneOffset.ofHoursMinutes(1, 10);
        java.time.LocalDate localDate4 = java.time.LocalDate.now((java.time.ZoneId) zoneOffset3);
        java.time.LocalDate localDate5 = java.time.LocalDate.now((java.time.ZoneId) zoneOffset3);
        java.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter0.withZone((java.time.ZoneId) zoneOffset3);
        java.time.LocalDateTime localDateTime7 = java.time.LocalDateTime.now();
        java.time.LocalDateTime localDateTime9 = localDateTime7.minusYears((long) (byte) 10);
        java.time.LocalDateTime localDateTime10 = java.time.LocalDateTime.now();
        java.time.LocalDateTime localDateTime12 = localDateTime10.minusYears((long) (byte) 10);
        boolean boolean13 = localDateTime7.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime12);
        java.time.OffsetTime offsetTime14 = java.time.OffsetTime.MAX;
        java.time.LocalTime localTime15 = offsetTime14.toLocalTime();
        java.time.OffsetTime offsetTime16 = java.time.OffsetTime.MAX;
        java.time.LocalTime localTime17 = offsetTime16.toLocalTime();
        java.lang.String str18 = offsetTime16.toString();
        java.time.Duration duration19 = java.time.Duration.ZERO;
        java.lang.String str20 = duration19.toString();
        java.time.OffsetTime offsetTime21 = offsetTime16.plus((java.time.temporal.TemporalAmount) duration19);
        java.time.OffsetTime offsetTime23 = offsetTime16.plusNanos((long) 0);
        java.time.LocalTime localTime28 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime29 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime28);
        java.time.temporal.ChronoField chronoField30 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime32 = localTime28.with((java.time.temporal.TemporalField) chronoField30, (long) (short) 1);
        java.util.Locale locale33 = java.util.Locale.GERMANY;
        java.lang.String str34 = chronoField30.getDisplayName(locale33);
        java.time.OffsetTime offsetTime36 = offsetTime23.with((java.time.temporal.TemporalField) chronoField30, (long) 28);
        long long37 = localTime15.getLong((java.time.temporal.TemporalField) chronoField30);
        java.time.temporal.TemporalUnit temporalUnit38 = chronoField30.getRangeUnit();
        boolean boolean39 = localDateTime7.isSupported(temporalUnit38);
        java.lang.String str40 = dateTimeFormatter6.format((java.time.temporal.TemporalAccessor) localDateTime7);
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(zoneOffset3);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(dateTimeFormatter6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(offsetTime14);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(offsetTime16);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "23:59:59.999999999-18:00" + "'", str18, "23:59:59.999999999-18:00");
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "PT0S" + "'", str20, "PT0S");
        org.junit.Assert.assertNotNull(offsetTime21);
        org.junit.Assert.assertNotNull(offsetTime23);
        org.junit.Assert.assertNotNull(localTime28);
        org.junit.Assert.assertNotNull(localTime29);
        org.junit.Assert.assertTrue("'" + chronoField30 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField30.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime32);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "NanoOfDay" + "'", str34, "NanoOfDay");
        org.junit.Assert.assertNotNull(offsetTime36);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 86399999999999L + "'", long37 == 86399999999999L);
        org.junit.Assert.assertTrue("'" + temporalUnit38 + "' != '" + java.time.temporal.ChronoUnit.DAYS + "'", temporalUnit38.equals(java.time.temporal.ChronoUnit.DAYS));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str40 + "' != '" + "2022-02-21T09:41:32.833" + "'", str40, "2022-02-21T09:41:32.833");
    }

    @Test
    public void test5230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5230");
        java.time.Clock clock0 = java.time.Clock.systemUTC();
        java.time.Duration duration2 = java.time.Duration.ofSeconds((long) 256);
        java.time.Clock clock3 = java.time.Clock.tick(clock0, duration2);
        java.time.Duration duration5 = java.time.Duration.ofMinutes((long) 3);
        java.time.Duration duration6 = duration5.abs();
        java.time.Clock clock7 = java.time.Clock.offset(clock0, duration5);
        java.time.ZonedDateTime zonedDateTime8 = java.time.ZonedDateTime.now(clock7);
        java.time.ZonedDateTime zonedDateTime10 = zonedDateTime8.withDayOfYear((int) (short) 10);
        java.time.ZonedDateTime zonedDateTime12 = zonedDateTime8.minusDays((long) '\uffff');
        java.time.ZonedDateTime zonedDateTime14 = zonedDateTime8.minusDays(10L);
        java.time.ZoneOffset zoneOffset17 = java.time.ZoneOffset.ofHoursMinutes(1, 10);
        java.time.LocalDate localDate18 = java.time.LocalDate.now((java.time.ZoneId) zoneOffset17);
        java.time.Clock clock19 = java.time.Clock.system((java.time.ZoneId) zoneOffset17);
        java.time.chrono.ChronoZonedDateTime<java.time.LocalDate> localDateChronoZonedDateTime20 = zonedDateTime8.withZoneSameLocal((java.time.ZoneId) zoneOffset17);
        java.time.OffsetTime offsetTime21 = java.time.OffsetTime.MAX;
        java.time.LocalTime localTime22 = offsetTime21.toLocalTime();
        java.lang.String str23 = offsetTime21.toString();
        java.time.Duration duration24 = java.time.Duration.ZERO;
        java.lang.String str25 = duration24.toString();
        java.time.OffsetTime offsetTime26 = offsetTime21.plus((java.time.temporal.TemporalAmount) duration24);
        java.time.OffsetTime offsetTime28 = offsetTime21.plusNanos((long) 0);
        java.time.OffsetTime offsetTime30 = offsetTime21.plusNanos((-1L));
        java.time.LocalTime localTime35 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime40 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime41 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime40);
        java.time.LocalTime localTime46 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime47 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime46);
        java.time.temporal.ChronoField chronoField48 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime50 = localTime46.with((java.time.temporal.TemporalField) chronoField48, (long) (short) 1);
        long long51 = localTime40.getLong((java.time.temporal.TemporalField) chronoField48);
        java.time.LocalTime localTime53 = localTime40.withSecond((int) (short) 1);
        java.time.temporal.ChronoField chronoField54 = java.time.temporal.ChronoField.SECOND_OF_DAY;
        java.time.temporal.ValueRange valueRange55 = localTime53.range((java.time.temporal.TemporalField) chronoField54);
        java.time.LocalTime localTime61 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime62 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime61);
        java.time.LocalTime localTime67 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime68 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime67);
        java.time.temporal.ChronoField chronoField69 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime71 = localTime67.with((java.time.temporal.TemporalField) chronoField69, (long) (short) 1);
        long long72 = localTime61.getLong((java.time.temporal.TemporalField) chronoField69);
        java.time.LocalTime localTime74 = localTime61.withSecond((int) (short) 1);
        java.time.temporal.ChronoField chronoField75 = java.time.temporal.ChronoField.SECOND_OF_DAY;
        java.time.temporal.ValueRange valueRange76 = localTime74.range((java.time.temporal.TemporalField) chronoField75);
        int int77 = valueRange55.checkValidIntValue((long) 2022, (java.time.temporal.TemporalField) chronoField75);
        java.time.temporal.ValueRange valueRange78 = localTime35.range((java.time.temporal.TemporalField) chronoField75);
        long long79 = offsetTime30.getLong((java.time.temporal.TemporalField) chronoField75);
        java.time.temporal.ValueRange valueRange80 = localDateChronoZonedDateTime20.range((java.time.temporal.TemporalField) chronoField75);
        org.junit.Assert.assertNotNull(clock0);
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertNotNull(clock3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(clock7);
        org.junit.Assert.assertNotNull(zonedDateTime8);
        org.junit.Assert.assertNotNull(zonedDateTime10);
        org.junit.Assert.assertNotNull(zonedDateTime12);
        org.junit.Assert.assertNotNull(zonedDateTime14);
        org.junit.Assert.assertNotNull(zoneOffset17);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(clock19);
        org.junit.Assert.assertNotNull(localDateChronoZonedDateTime20);
        org.junit.Assert.assertNotNull(offsetTime21);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "23:59:59.999999999-18:00" + "'", str23, "23:59:59.999999999-18:00");
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "PT0S" + "'", str25, "PT0S");
        org.junit.Assert.assertNotNull(offsetTime26);
        org.junit.Assert.assertNotNull(offsetTime28);
        org.junit.Assert.assertNotNull(offsetTime30);
        org.junit.Assert.assertNotNull(localTime35);
        org.junit.Assert.assertNotNull(localTime40);
        org.junit.Assert.assertNotNull(localTime41);
        org.junit.Assert.assertNotNull(localTime46);
        org.junit.Assert.assertNotNull(localTime47);
        org.junit.Assert.assertTrue("'" + chronoField48 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField48.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime50);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 3601000000001L + "'", long51 == 3601000000001L);
        org.junit.Assert.assertNotNull(localTime53);
        org.junit.Assert.assertTrue("'" + chronoField54 + "' != '" + java.time.temporal.ChronoField.SECOND_OF_DAY + "'", chronoField54.equals(java.time.temporal.ChronoField.SECOND_OF_DAY));
        org.junit.Assert.assertNotNull(valueRange55);
        org.junit.Assert.assertNotNull(localTime61);
        org.junit.Assert.assertNotNull(localTime62);
        org.junit.Assert.assertNotNull(localTime67);
        org.junit.Assert.assertNotNull(localTime68);
        org.junit.Assert.assertTrue("'" + chronoField69 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField69.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime71);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 3601000000001L + "'", long72 == 3601000000001L);
        org.junit.Assert.assertNotNull(localTime74);
        org.junit.Assert.assertTrue("'" + chronoField75 + "' != '" + java.time.temporal.ChronoField.SECOND_OF_DAY + "'", chronoField75.equals(java.time.temporal.ChronoField.SECOND_OF_DAY));
        org.junit.Assert.assertNotNull(valueRange76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 2022 + "'", int77 == 2022);
        org.junit.Assert.assertNotNull(valueRange78);
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + 86399L + "'", long79 == 86399L);
        org.junit.Assert.assertNotNull(valueRange80);
    }

    @Test
    public void test5231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5231");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 3, chronology1);
        org.joda.time.DateTime.Property property3 = dateTime2.dayOfYear();
        org.joda.time.Interval interval4 = property3.toInterval();
        org.joda.time.DateTimeField dateTimeField5 = property3.getField();
        org.joda.time.DateTime dateTime7 = property3.addToCopy((long) (byte) 1);
        org.joda.time.DateTime dateTime9 = dateTime7.withYear(4);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) 3, chronology11);
        org.joda.time.Period period13 = org.joda.time.Period.ZERO;
        org.joda.time.Period period14 = period13.normalizedStandard();
        org.joda.time.Period period16 = period14.minusMinutes((int) ' ');
        org.joda.time.Period period18 = period16.minusMonths((int) (byte) 0);
        org.joda.time.PeriodType periodType19 = period18.getPeriodType();
        org.joda.time.DateTime dateTime20 = dateTime12.minus((org.joda.time.ReadablePeriod) period18);
        org.joda.time.Duration duration21 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.DateTime dateTime22 = dateTime9.withTimeAtStartOfDay();
        java.util.TimeZone timeZone23 = null;
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forTimeZone(timeZone23);
        java.util.TimeZone timeZone26 = null;
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forTimeZone(timeZone26);
        org.joda.time.DateMidnight dateMidnight28 = new org.joda.time.DateMidnight((long) 1970, dateTimeZone27);
        long long31 = dateTimeZone27.convertLocalToUTC((long) 3, false);
        long long33 = dateTimeZone24.getMillisKeepLocal(dateTimeZone27, (long) ':');
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((java.lang.Object) dateTime9, dateTimeZone27);
        int int35 = dateTime34.getCenturyOfEra();
        org.joda.time.DateTime dateTime37 = dateTime34.withDayOfYear(365);
        int int38 = dateTime37.getDayOfWeek();
        org.joda.time.DateTime dateTime40 = dateTime37.minusMonths(86);
        int int41 = dateTime37.getSecondOfDay();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 3L + "'", long31 == 3L);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 58L + "'", long33 == 58L);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 4 + "'", int38 == 4);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
    }

    @Test
    public void test5232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5232");
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.Duration duration3 = new org.joda.time.Duration(readableInstant1, readableInstant2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.PeriodType periodType5 = null;
        org.joda.time.Period period6 = duration3.toPeriodTo(readableInstant4, periodType5);
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.Duration duration9 = new org.joda.time.Duration(readableInstant7, readableInstant8);
        long long10 = duration9.getMillis();
        boolean boolean11 = duration3.isShorterThan((org.joda.time.ReadableDuration) duration9);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) 3, chronology13);
        org.joda.time.DateTime.Property property15 = dateTime14.dayOfYear();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight((java.lang.Object) dateTime14, chronology16);
        org.joda.time.MutableDateTime mutableDateTime18 = dateTime14.toMutableDateTime();
        mutableDateTime18.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime18.dayOfWeek();
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime18.year();
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime18.weekyear();
        boolean boolean24 = duration3.equals((java.lang.Object) mutableDateTime18);
        mutableDateTime18.addMonths((int) ' ');
        mutableDateTime18.add((long) (byte) 10);
        org.joda.time.Period period29 = org.joda.time.Period.ZERO;
        org.joda.time.Period period30 = period29.normalizedStandard();
        org.joda.time.Period period32 = period29.plusHours(2);
        java.time.chrono.IsoEra isoEra33 = java.time.chrono.IsoEra.CE;
        boolean boolean34 = period32.equals((java.lang.Object) isoEra33);
        int int35 = period32.getMinutes();
        mutableDateTime18.add((org.joda.time.ReadablePeriod) period32);
        java.util.TimeZone timeZone38 = null;
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forTimeZone(timeZone38);
        org.joda.time.DateMidnight dateMidnight40 = new org.joda.time.DateMidnight((long) 1970, dateTimeZone39);
        long long43 = dateTimeZone39.convertLocalToUTC((long) 3, false);
        long long46 = dateTimeZone39.convertLocalToUTC(0L, true);
        mutableDateTime18.setZoneRetainFields(dateTimeZone39);
        java.lang.String str48 = dateTimeZone39.toString();
        org.joda.time.chrono.EthiopicChronology ethiopicChronology49 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone39);
        org.joda.time.DateTimeField dateTimeField50 = ethiopicChronology49.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone51 = ethiopicChronology49.getZone();
        org.joda.time.DateTimeField dateTimeField52 = ethiopicChronology49.era();
        org.joda.time.DateTimeField dateTimeField53 = ethiopicChronology49.secondOfDay();
        org.joda.time.DateTimeField dateTimeField54 = ethiopicChronology49.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField55 = ethiopicChronology49.halfdayOfDay();
        org.joda.time.DurationField durationField56 = ethiopicChronology49.weekyears();
        org.joda.time.DateTimeField dateTimeField57 = ethiopicChronology49.hourOfHalfday();
        org.joda.time.DateMidnight dateMidnight58 = new org.joda.time.DateMidnight((long) 78000000, (org.joda.time.Chronology) ethiopicChronology49);
        // The following exception was thrown during execution in test generation
        try {
            long long63 = ethiopicChronology49.getDateTimeMillis((-46800000), 52, 710, 52);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 52 for monthOfYear must be in the range [1,13]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertTrue("'" + isoEra33 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra33.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 3L + "'", long43 == 3L);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Etc/UTC" + "'", str48, "Etc/UTC");
        org.junit.Assert.assertNotNull(ethiopicChronology49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(durationField56);
        org.junit.Assert.assertNotNull(dateTimeField57);
    }

    @Test
    public void test5233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5233");
        java.nio.charset.Charset charset0 = java.nio.charset.Charset.defaultCharset();
        java.nio.charset.CharsetDecoder charsetDecoder1 = charset0.newDecoder();
        float float2 = charsetDecoder1.maxCharsPerByte();
        java.nio.charset.Charset charset3 = java.nio.charset.Charset.defaultCharset();
        java.nio.charset.CharsetDecoder charsetDecoder4 = charset3.newDecoder();
        java.nio.charset.Charset charset5 = java.nio.charset.Charset.defaultCharset();
        boolean boolean6 = charset3.contains(charset5);
        java.nio.charset.CharsetEncoder charsetEncoder7 = charset3.newEncoder();
        char[] charArray8 = new char[] {};
        java.nio.CharBuffer charBuffer9 = java.nio.CharBuffer.wrap(charArray8);
        java.nio.ByteBuffer byteBuffer10 = charsetEncoder7.encode(charBuffer9);
        char[] charArray17 = new char[] { '#', '/', '4', 'a', '4', 'u' };
        java.nio.CharBuffer charBuffer18 = java.nio.CharBuffer.wrap(charArray17);
        java.nio.charset.CoderResult coderResult20 = charsetDecoder1.decode(byteBuffer10, charBuffer18, false);
        boolean boolean21 = charBuffer18.isDirect();
        char[] charArray22 = charBuffer18.array();
        java.nio.charset.Charset charset23 = java.nio.charset.Charset.defaultCharset();
        java.nio.charset.CharsetDecoder charsetDecoder24 = charset23.newDecoder();
        java.nio.charset.Charset charset25 = java.nio.charset.Charset.defaultCharset();
        boolean boolean26 = charset23.contains(charset25);
        java.nio.charset.CharsetEncoder charsetEncoder27 = charset23.newEncoder();
        char[] charArray28 = new char[] {};
        java.nio.CharBuffer charBuffer29 = java.nio.CharBuffer.wrap(charArray28);
        java.nio.ByteBuffer byteBuffer30 = charsetEncoder27.encode(charBuffer29);
        java.nio.CharBuffer charBuffer31 = charBuffer29.slice();
        java.nio.CharBuffer charBuffer32 = charBuffer29.compact();
        int int33 = charBuffer18.compareTo(charBuffer32);
        java.io.OutputStream outputStream34 = null;
        java.io.FilterOutputStream filterOutputStream35 = new java.io.FilterOutputStream(outputStream34);
        java.io.PrintStream printStream37 = new java.io.PrintStream((java.io.OutputStream) filterOutputStream35, false);
        char[] charArray38 = new char[] {};
        java.nio.CharBuffer charBuffer39 = java.nio.CharBuffer.wrap(charArray38);
        printStream37.print(charArray38);
        java.nio.CharBuffer charBuffer41 = charBuffer18.put(charArray38);
        java.nio.CharBuffer charBuffer43 = charBuffer41.append('x');
        boolean boolean44 = charBuffer41.isDirect();
        org.junit.Assert.assertNotNull(charset0);
        org.junit.Assert.assertNotNull(charsetDecoder1);
        org.junit.Assert.assertTrue("'" + float2 + "' != '" + 1.0f + "'", float2 == 1.0f);
        org.junit.Assert.assertNotNull(charset3);
        org.junit.Assert.assertNotNull(charsetDecoder4);
        org.junit.Assert.assertNotNull(charset5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(charsetEncoder7);
        org.junit.Assert.assertNotNull(charArray8);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray8), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray8), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray8), "[]");
        org.junit.Assert.assertNotNull(charBuffer9);
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertNotNull(charArray17);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray17), "x/4a4u");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray17), "x/4a4u");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray17), "[x, /, 4, a, 4, u]");
        org.junit.Assert.assertNotNull(charBuffer18);
        org.junit.Assert.assertNotNull(coderResult20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(charArray22);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray22), "x/4a4u");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray22), "x/4a4u");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray22), "[x, /, 4, a, 4, u]");
        org.junit.Assert.assertNotNull(charset23);
        org.junit.Assert.assertNotNull(charsetDecoder24);
        org.junit.Assert.assertNotNull(charset25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(charsetEncoder27);
        org.junit.Assert.assertNotNull(charArray28);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray28), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray28), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray28), "[]");
        org.junit.Assert.assertNotNull(charBuffer29);
        org.junit.Assert.assertNotNull(byteBuffer30);
        org.junit.Assert.assertNotNull(charBuffer31);
        org.junit.Assert.assertNotNull(charBuffer32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 6 + "'", int33 == 6);
        org.junit.Assert.assertNotNull(charArray38);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray38), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray38), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray38), "[]");
        org.junit.Assert.assertNotNull(charBuffer39);
        org.junit.Assert.assertNotNull(charBuffer41);
        org.junit.Assert.assertNotNull(charBuffer43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test5234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5234");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 3, chronology1);
        org.joda.time.DateTime.Property property3 = dateTime2.dayOfYear();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight((java.lang.Object) dateTime2, chronology4);
        org.joda.time.MutableDateTime mutableDateTime6 = dateTime2.toMutableDateTime();
        mutableDateTime6.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime6.dayOfWeek();
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime6.year();
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime6.weekyear();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) 3, chronology13);
        org.joda.time.Period period15 = org.joda.time.Period.ZERO;
        org.joda.time.Period period16 = period15.normalizedStandard();
        org.joda.time.Period period18 = period16.minusMinutes((int) ' ');
        org.joda.time.Period period20 = period18.minusMonths((int) (byte) 0);
        org.joda.time.PeriodType periodType21 = period20.getPeriodType();
        org.joda.time.DateTime dateTime22 = dateTime14.minus((org.joda.time.ReadablePeriod) period20);
        org.joda.time.DateTime dateTime24 = dateTime14.plusHours(34);
        org.joda.time.DateTime dateTime26 = dateTime14.plusMonths(5);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.LocalTime localTime29 = new org.joda.time.LocalTime((long) 0, chronology28);
        org.joda.time.Chronology chronology30 = localTime29.getChronology();
        org.joda.time.DateTimeField dateTimeField31 = chronology30.weekyearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime32 = org.joda.time.MutableDateTime.now(chronology30);
        mutableDateTime32.setWeekOfWeekyear((int) '#');
        mutableDateTime32.addHours(0);
        org.joda.time.Days days37 = org.joda.time.Days.daysBetween((org.joda.time.ReadableInstant) dateTime26, (org.joda.time.ReadableInstant) mutableDateTime32);
        long long38 = property11.getDifferenceAsLong((org.joda.time.ReadableInstant) mutableDateTime32);
        org.joda.time.MutableDateTime mutableDateTime39 = property11.getMutableDateTime();
        org.joda.time.MutableDateTime mutableDateTime41 = property11.add(35);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime((long) 3, chronology43);
        org.joda.time.DateTime.Property property45 = dateTime44.dayOfYear();
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.DateMidnight dateMidnight47 = new org.joda.time.DateMidnight((java.lang.Object) dateTime44, chronology46);
        org.joda.time.MutableDateTime mutableDateTime48 = dateTime44.toMutableDateTime();
        mutableDateTime48.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property51 = mutableDateTime48.millisOfDay();
        org.joda.time.PeriodType periodType52 = org.joda.time.PeriodType.years();
        org.joda.time.DurationFieldType durationFieldType53 = org.joda.time.DurationFieldType.halfdays();
        int int54 = periodType52.indexOf(durationFieldType53);
        mutableDateTime48.add(durationFieldType53, (int) 'a');
        org.joda.time.MutableDateTime.Property property57 = mutableDateTime48.millisOfSecond();
        org.joda.time.MutableDateTime mutableDateTime58 = property57.roundHalfFloor();
        float[] floatArray61 = new float[] { (-1L), (byte) -1 };
        java.nio.FloatBuffer floatBuffer62 = java.nio.FloatBuffer.wrap(floatArray61);
        java.nio.FloatBuffer floatBuffer63 = floatBuffer62.compact();
        java.nio.FloatBuffer floatBuffer64 = floatBuffer62.asReadOnlyBuffer();
        java.nio.ByteOrder byteOrder65 = floatBuffer62.order();
        java.nio.FloatBuffer floatBuffer66 = floatBuffer62.slice();
        int int67 = floatBuffer62.arrayOffset();
        boolean boolean68 = mutableDateTime58.equals((java.lang.Object) floatBuffer62);
        mutableDateTime58.addHours(508);
        boolean boolean71 = mutableDateTime41.isBefore((org.joda.time.ReadableInstant) mutableDateTime58);
        org.joda.time.MutableDateTime.Property property72 = mutableDateTime41.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField73 = property72.getField();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(mutableDateTime32);
        org.junit.Assert.assertNotNull(days37);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 47L + "'", long38 == 47L);
        org.junit.Assert.assertNotNull(mutableDateTime39);
        org.junit.Assert.assertNotNull(mutableDateTime41);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(mutableDateTime48);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(periodType52);
        org.junit.Assert.assertNotNull(durationFieldType53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(mutableDateTime58);
        org.junit.Assert.assertNotNull(floatArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray61), "[-1.0, -1.0]");
        org.junit.Assert.assertNotNull(floatBuffer62);
        org.junit.Assert.assertNotNull(floatBuffer63);
        org.junit.Assert.assertNotNull(floatBuffer64);
        org.junit.Assert.assertNotNull(byteOrder65);
        org.junit.Assert.assertNotNull(floatBuffer66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(property72);
        org.junit.Assert.assertNotNull(dateTimeField73);
    }

    @Test
    public void test5235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5235");
        java.net.InetAddress inetAddress0 = java.net.InetAddress.getLocalHost();
        boolean boolean1 = inetAddress0.isLoopbackAddress();
        boolean boolean2 = inetAddress0.isMulticastAddress();
        boolean boolean3 = inetAddress0.isSiteLocalAddress();
        java.lang.String str4 = inetAddress0.getHostAddress();
        boolean boolean5 = inetAddress0.isMulticastAddress();
        org.junit.Assert.assertNotNull(inetAddress0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "172.17.0.2" + "'", str4, "172.17.0.2");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test5236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5236");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.now();
        java.time.temporal.ChronoField chronoField1 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime3 = localDateTime0.with((java.time.temporal.TemporalField) chronoField1, (long) 10);
        java.time.LocalDateTime localDateTime5 = localDateTime0.minusMinutes((long) 12);
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.now();
        java.time.temporal.ChronoField chronoField7 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime9 = localDateTime6.with((java.time.temporal.TemporalField) chronoField7, (long) 10);
        java.time.Duration duration11 = java.time.Duration.ofSeconds((long) 0);
        java.time.temporal.Temporal temporal12 = localDateTime6.minus((java.time.temporal.TemporalAmount) duration11);
        boolean boolean13 = localDateTime0.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime6);
        java.time.LocalDateTime localDateTime15 = localDateTime0.minusMinutes((long) 1929);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertTrue("'" + chronoField1 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField1.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertTrue("'" + chronoField7 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField7.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(temporal12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(localDateTime15);
    }

    @Test
    public void test5237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5237");
        java.time.OffsetTime offsetTime0 = java.time.OffsetTime.MAX;
        java.time.LocalTime localTime1 = offsetTime0.toLocalTime();
        java.time.Duration duration3 = java.time.Duration.ofMinutes((long) 3);
        java.time.temporal.Temporal temporal4 = localTime1.plus((java.time.temporal.TemporalAmount) duration3);
        java.time.Duration duration6 = duration3.plusNanos((long) 9);
        java.time.ZoneOffset zoneOffset10 = java.time.ZoneOffset.ofHoursMinutes(1, 10);
        java.time.LocalDate localDate11 = java.time.LocalDate.now((java.time.ZoneId) zoneOffset10);
        java.util.Properties properties13 = null;
        java.util.Properties properties14 = new java.util.Properties(properties13);
        java.time.LocalTime localTime19 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime20 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime19);
        java.time.LocalTime localTime25 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime26 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime25);
        java.time.temporal.ChronoField chronoField27 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime29 = localTime25.with((java.time.temporal.TemporalField) chronoField27, (long) (short) 1);
        long long30 = localTime19.getLong((java.time.temporal.TemporalField) chronoField27);
        java.time.LocalTime localTime32 = localTime19.withSecond((int) (short) 1);
        java.lang.Object obj34 = properties14.put((java.lang.Object) localTime32, (java.lang.Object) "117");
        java.time.LocalDateTime localDateTime35 = java.time.LocalDateTime.MIN;
        java.time.Month month36 = java.time.Month.NOVEMBER;
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime37 = localDateTime35.with((java.time.temporal.TemporalAdjuster) month36);
        java.time.LocalDate localDate40 = java.time.LocalDate.ofEpochDay((long) ' ');
        int int41 = localDate40.getMonthValue();
        org.joda.time.Period period42 = org.joda.time.Period.ZERO;
        org.joda.time.Period period43 = period42.normalizedStandard();
        org.joda.time.Period period45 = period42.plusHours(2);
        java.time.chrono.IsoEra isoEra46 = java.time.chrono.IsoEra.CE;
        boolean boolean47 = period45.equals((java.lang.Object) isoEra46);
        java.time.LocalTime localTime52 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime53 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime52);
        java.time.LocalTime localTime58 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime59 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime58);
        java.time.temporal.ChronoField chronoField60 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime62 = localTime58.with((java.time.temporal.TemporalField) chronoField60, (long) (short) 1);
        long long63 = localTime52.getLong((java.time.temporal.TemporalField) chronoField60);
        boolean boolean64 = isoEra46.isSupported((java.time.temporal.TemporalField) chronoField60);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery65 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period66 = isoEra46.query(periodTemporalQuery65);
        boolean boolean67 = period66.isNegative();
        java.time.Period period69 = period66.plusDays((long) ' ');
        java.time.temporal.ChronoField chronoField70 = java.time.temporal.ChronoField.SECOND_OF_DAY;
        boolean boolean71 = period66.equals((java.lang.Object) chronoField70);
        boolean boolean72 = localDate40.isSupported((java.time.temporal.TemporalField) chronoField70);
        java.time.temporal.TemporalUnit temporalUnit73 = chronoField70.getRangeUnit();
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime74 = localDateChronoLocalDateTime37.plus(1L, temporalUnit73);
        java.time.LocalTime localTime75 = localTime32.truncatedTo(temporalUnit73);
        java.time.chrono.ChronoLocalDate chronoLocalDate76 = localDate11.minus((long) 3600000, temporalUnit73);
        java.time.Duration duration77 = duration6.minus(11724424192L, temporalUnit73);
        long long78 = duration77.toMinutes();
        org.junit.Assert.assertNotNull(offsetTime0);
        org.junit.Assert.assertNotNull(localTime1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(temporal4);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(zoneOffset10);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertNotNull(localTime26);
        org.junit.Assert.assertTrue("'" + chronoField27 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField27.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime29);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 3601000000001L + "'", long30 == 3601000000001L);
        org.junit.Assert.assertNotNull(localTime32);
        org.junit.Assert.assertNull(obj34);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertTrue("'" + month36 + "' != '" + java.time.Month.NOVEMBER + "'", month36.equals(java.time.Month.NOVEMBER));
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime37);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2 + "'", int41 == 2);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertTrue("'" + isoEra46 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra46.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(localTime52);
        org.junit.Assert.assertNotNull(localTime53);
        org.junit.Assert.assertNotNull(localTime58);
        org.junit.Assert.assertNotNull(localTime59);
        org.junit.Assert.assertTrue("'" + chronoField60 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField60.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime62);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 3601000000001L + "'", long63 == 3601000000001L);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(periodTemporalQuery65);
        org.junit.Assert.assertNotNull(period66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(period69);
        org.junit.Assert.assertTrue("'" + chronoField70 + "' != '" + java.time.temporal.ChronoField.SECOND_OF_DAY + "'", chronoField70.equals(java.time.temporal.ChronoField.SECOND_OF_DAY));
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + temporalUnit73 + "' != '" + java.time.temporal.ChronoUnit.DAYS + "'", temporalUnit73.equals(java.time.temporal.ChronoUnit.DAYS));
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime74);
        org.junit.Assert.assertNotNull(localTime75);
        org.junit.Assert.assertNotNull(chronoLocalDate76);
        org.junit.Assert.assertNotNull(duration77);
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + (-16883170836477L) + "'", long78 == (-16883170836477L));
    }

    @Test
    public void test5238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5238");
        java.net.Proxy proxy0 = java.net.Proxy.NO_PROXY;
        java.net.Proxy.Type type1 = proxy0.type();
        java.time.OffsetDateTime offsetDateTime2 = java.time.OffsetDateTime.now();
        java.time.temporal.ChronoField chronoField3 = java.time.temporal.ChronoField.HOUR_OF_DAY;
        boolean boolean4 = offsetDateTime2.isSupported((java.time.temporal.TemporalField) chronoField3);
        java.time.Month month5 = offsetDateTime2.getMonth();
        java.time.ZoneOffset zoneOffset8 = java.time.ZoneOffset.ofHoursMinutes(1, 10);
        java.time.LocalDate localDate9 = java.time.LocalDate.now((java.time.ZoneId) zoneOffset8);
        java.time.Clock clock10 = java.time.Clock.system((java.time.ZoneId) zoneOffset8);
        java.time.Duration duration12 = java.time.Duration.ofSeconds((long) 0);
        java.time.Duration duration14 = duration12.multipliedBy((long) (byte) -1);
        java.time.Clock clock15 = java.time.Clock.offset(clock10, duration12);
        java.time.OffsetDateTime offsetDateTime16 = offsetDateTime2.plus((java.time.temporal.TemporalAmount) duration12);
        boolean boolean17 = proxy0.equals((java.lang.Object) offsetDateTime16);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) 3, chronology19);
        org.joda.time.DateTime.Property property21 = dateTime20.dayOfYear();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateMidnight dateMidnight23 = new org.joda.time.DateMidnight((java.lang.Object) dateTime20, chronology22);
        org.joda.time.MutableDateTime mutableDateTime24 = dateTime20.toMutableDateTime();
        mutableDateTime24.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property27 = mutableDateTime24.dayOfWeek();
        org.joda.time.MutableDateTime.Property property28 = mutableDateTime24.year();
        java.util.TimeZone timeZone29 = null;
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forTimeZone(timeZone29);
        mutableDateTime24.setZone(dateTimeZone30);
        boolean boolean32 = proxy0.equals((java.lang.Object) dateTimeZone30);
        org.junit.Assert.assertNotNull(proxy0);
        org.junit.Assert.assertTrue("'" + type1 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type1.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertNotNull(offsetDateTime2);
        org.junit.Assert.assertTrue("'" + chronoField3 + "' != '" + java.time.temporal.ChronoField.HOUR_OF_DAY + "'", chronoField3.equals(java.time.temporal.ChronoField.HOUR_OF_DAY));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + month5 + "' != '" + java.time.Month.FEBRUARY + "'", month5.equals(java.time.Month.FEBRUARY));
        org.junit.Assert.assertNotNull(zoneOffset8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(clock10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(clock15);
        org.junit.Assert.assertNotNull(offsetDateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(mutableDateTime24);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test5239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5239");
        java.text.FieldPosition fieldPosition1 = new java.text.FieldPosition(679);
        int int2 = fieldPosition1.getBeginIndex();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
    }

    @Test
    public void test5240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5240");
        java.io.File file0 = null;
        java.io.File file2 = new java.io.File(file0, "1970-01-01T00:00:00.003Z");
        java.net.URL uRL3 = file2.toURL();
        boolean boolean4 = file2.canRead();
        java.nio.file.Path path5 = file2.toPath();
        java.nio.file.Path path6 = path5.toAbsolutePath();
        java.nio.file.Path path7 = path5.getRoot();
        java.nio.charset.Charset charset8 = java.nio.charset.Charset.defaultCharset();
        java.nio.charset.CharsetDecoder charsetDecoder9 = charset8.newDecoder();
        float float10 = charsetDecoder9.maxCharsPerByte();
        java.nio.charset.CodingErrorAction codingErrorAction11 = java.nio.charset.CodingErrorAction.IGNORE;
        java.nio.charset.CharsetDecoder charsetDecoder12 = charsetDecoder9.onMalformedInput(codingErrorAction11);
        float float13 = charsetDecoder9.maxCharsPerByte();
        java.nio.charset.Charset charset14 = charsetDecoder9.charset();
        java.nio.charset.Charset charset15 = java.nio.charset.Charset.defaultCharset();
        java.nio.charset.CharsetDecoder charsetDecoder16 = charset15.newDecoder();
        java.nio.charset.Charset charset17 = java.nio.charset.Charset.defaultCharset();
        boolean boolean18 = charset15.contains(charset17);
        java.nio.charset.CharsetEncoder charsetEncoder19 = charset15.newEncoder();
        byte[] byteArray20 = charsetEncoder19.replacement();
        java.nio.charset.Charset charset21 = java.nio.charset.Charset.defaultCharset();
        java.nio.charset.CharsetDecoder charsetDecoder22 = charset21.newDecoder();
        float float23 = charsetDecoder22.maxCharsPerByte();
        float float24 = charsetDecoder22.averageCharsPerByte();
        java.nio.charset.CodingErrorAction codingErrorAction25 = charsetDecoder22.unmappableCharacterAction();
        java.nio.charset.CharsetEncoder charsetEncoder26 = charsetEncoder19.onUnmappableCharacter(codingErrorAction25);
        java.nio.charset.Charset charset27 = java.nio.charset.Charset.defaultCharset();
        java.nio.charset.CharsetDecoder charsetDecoder28 = charset27.newDecoder();
        java.nio.charset.Charset charset29 = java.nio.charset.Charset.defaultCharset();
        boolean boolean30 = charset27.contains(charset29);
        java.nio.charset.CharsetEncoder charsetEncoder31 = charset27.newEncoder();
        char[] charArray32 = new char[] {};
        java.nio.CharBuffer charBuffer33 = java.nio.CharBuffer.wrap(charArray32);
        java.nio.ByteBuffer byteBuffer34 = charsetEncoder31.encode(charBuffer33);
        java.nio.CharBuffer charBuffer35 = charBuffer33.slice();
        java.nio.ByteBuffer byteBuffer36 = charsetEncoder26.encode(charBuffer35);
        java.nio.ByteBuffer byteBuffer37 = byteBuffer36.asReadOnlyBuffer();
        java.nio.CharBuffer charBuffer38 = charsetDecoder9.decode(byteBuffer36);
        java.util.stream.IntStream intStream39 = charBuffer38.chars();
        boolean boolean40 = intStream39.isParallel();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean41 = path7.equals((java.lang.Object) intStream39);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull("file2.getParent() == null", file2.getParent());
        org.junit.Assert.assertEquals(file2.toString(), "1970-01-01T00:00:00.003Z");
        org.junit.Assert.assertNotNull(uRL3);
// flaky:         org.junit.Assert.assertEquals(uRL3.toString(), "file:/experiment/1970-01-01T00:00:00.003Z");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(path5);
        org.junit.Assert.assertNotNull(path6);
        org.junit.Assert.assertNull(path7);
        org.junit.Assert.assertNotNull(charset8);
        org.junit.Assert.assertNotNull(charsetDecoder9);
        org.junit.Assert.assertTrue("'" + float10 + "' != '" + 1.0f + "'", float10 == 1.0f);
        org.junit.Assert.assertNotNull(codingErrorAction11);
        org.junit.Assert.assertNotNull(charsetDecoder12);
        org.junit.Assert.assertTrue("'" + float13 + "' != '" + 1.0f + "'", float13 == 1.0f);
        org.junit.Assert.assertNotNull(charset14);
        org.junit.Assert.assertNotNull(charset15);
        org.junit.Assert.assertNotNull(charsetDecoder16);
        org.junit.Assert.assertNotNull(charset17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(charsetEncoder19);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[63]");
        org.junit.Assert.assertNotNull(charset21);
        org.junit.Assert.assertNotNull(charsetDecoder22);
        org.junit.Assert.assertTrue("'" + float23 + "' != '" + 1.0f + "'", float23 == 1.0f);
        org.junit.Assert.assertTrue("'" + float24 + "' != '" + 1.0f + "'", float24 == 1.0f);
        org.junit.Assert.assertNotNull(codingErrorAction25);
        org.junit.Assert.assertNotNull(charsetEncoder26);
        org.junit.Assert.assertNotNull(charset27);
        org.junit.Assert.assertNotNull(charsetDecoder28);
        org.junit.Assert.assertNotNull(charset29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(charsetEncoder31);
        org.junit.Assert.assertNotNull(charArray32);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray32), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray32), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray32), "[]");
        org.junit.Assert.assertNotNull(charBuffer33);
        org.junit.Assert.assertNotNull(byteBuffer34);
        org.junit.Assert.assertNotNull(charBuffer35);
        org.junit.Assert.assertNotNull(byteBuffer36);
        org.junit.Assert.assertNotNull(byteBuffer37);
        org.junit.Assert.assertNotNull(charBuffer38);
        org.junit.Assert.assertNotNull(intStream39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test5241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5241");
        java.util.GregorianCalendar gregorianCalendar5 = new java.util.GregorianCalendar(12, 4096, 7, (-1), (int) (short) 10);
        int int6 = gregorianCalendar5.getWeeksInWeekYear();
        java.lang.String str7 = gregorianCalendar5.getCalendarType();
        java.time.ZonedDateTime zonedDateTime8 = gregorianCalendar5.toZonedDateTime();
        java.util.GregorianCalendar gregorianCalendar14 = new java.util.GregorianCalendar(12, 4096, 7, (-1), (int) (short) 10);
        int int15 = gregorianCalendar14.getWeeksInWeekYear();
        java.lang.String str16 = gregorianCalendar14.getCalendarType();
        java.time.ZonedDateTime zonedDateTime17 = gregorianCalendar14.toZonedDateTime();
        int int18 = zonedDateTime8.compareTo((java.time.chrono.ChronoZonedDateTime<java.time.LocalDate>) zonedDateTime17);
        java.time.ZonedDateTime zonedDateTime20 = zonedDateTime8.plusDays((long) 2022);
        java.time.Instant instant21 = zonedDateTime8.toInstant();
        java.time.chrono.Chronology chronology22 = zonedDateTime8.getChronology();
        java.util.GregorianCalendar gregorianCalendar28 = new java.util.GregorianCalendar(12, 4096, 7, (-1), (int) (short) 10);
        int int29 = gregorianCalendar28.getWeeksInWeekYear();
        java.lang.String str30 = gregorianCalendar28.getCalendarType();
        java.time.ZonedDateTime zonedDateTime31 = gregorianCalendar28.toZonedDateTime();
        java.time.ZonedDateTime zonedDateTime33 = zonedDateTime31.minusMonths((long) 10);
        boolean boolean34 = zonedDateTime8.isBefore((java.time.chrono.ChronoZonedDateTime<java.time.LocalDate>) zonedDateTime33);
        java.time.OffsetDateTime offsetDateTime35 = java.time.OffsetDateTime.from((java.time.temporal.TemporalAccessor) zonedDateTime8);
        java.time.chrono.Chronology chronology36 = zonedDateTime8.getChronology();
        java.time.ZonedDateTime zonedDateTime38 = zonedDateTime8.plusHours((long) 461);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 52 + "'", int6 == 52);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "gregory" + "'", str7, "gregory");
        org.junit.Assert.assertNotNull(zonedDateTime8);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 52 + "'", int15 == 52);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "gregory" + "'", str16, "gregory");
        org.junit.Assert.assertNotNull(zonedDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(zonedDateTime20);
        org.junit.Assert.assertNotNull(instant21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 52 + "'", int29 == 52);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "gregory" + "'", str30, "gregory");
        org.junit.Assert.assertNotNull(zonedDateTime31);
        org.junit.Assert.assertNotNull(zonedDateTime33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(offsetDateTime35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(zonedDateTime38);
    }

    @Test
    public void test5242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5242");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Locale locale3 = java.util.Locale.JAPAN;
        java.util.Locale[] localeArray4 = new java.util.Locale[] { locale3 };
        java.util.ArrayList<java.util.Locale> localeList5 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList5, localeArray4);
        java.util.List<java.util.Locale> localeList7 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList5);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale locale9 = localeList7.get(926000000);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 926000000, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(localeArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(localeList7);
    }

    @Test
    public void test5243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5243");
        org.joda.time.YearMonthDay yearMonthDay0 = new org.joda.time.YearMonthDay();
        org.joda.time.DateMidnight dateMidnight1 = yearMonthDay0.toDateMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        boolean boolean3 = dateMidnight1.isSupported(dateTimeFieldType2);
        org.joda.time.Days days4 = org.joda.time.Days.ONE;
        org.joda.time.PeriodType periodType5 = days4.getPeriodType();
        org.joda.time.Days days7 = days4.multipliedBy(1024);
        org.joda.time.DateMidnight dateMidnight9 = dateMidnight1.withPeriodAdded((org.joda.time.ReadablePeriod) days4, 4200);
        java.util.Set<java.lang.String> strSet10 = java.time.ZoneId.getAvailableZoneIds();
        java.util.stream.Stream<java.lang.String> strStream11 = strSet10.parallelStream();
        java.lang.Object[] objArray12 = strSet10.toArray();
        java.util.Spliterator<java.lang.String> strSpliterator13 = strSet10.spliterator();
        java.util.Set<java.lang.String> strSet14 = java.time.ZoneId.getAvailableZoneIds();
        java.util.stream.Stream<java.lang.String> strStream15 = strSet14.parallelStream();
        boolean boolean17 = strSet14.remove((java.lang.Object) 0);
        java.time.LocalTime localTime22 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime23 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime22);
        java.time.LocalTime localTime28 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime29 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime28);
        java.time.temporal.ChronoField chronoField30 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime32 = localTime28.with((java.time.temporal.TemporalField) chronoField30, (long) (short) 1);
        long long33 = localTime22.getLong((java.time.temporal.TemporalField) chronoField30);
        java.time.LocalTime localTime35 = localTime22.withSecond((int) (short) 1);
        java.time.temporal.ChronoField chronoField36 = java.time.temporal.ChronoField.SECOND_OF_DAY;
        java.time.temporal.ValueRange valueRange37 = localTime35.range((java.time.temporal.TemporalField) chronoField36);
        boolean boolean38 = strSet14.remove((java.lang.Object) chronoField36);
        boolean boolean39 = strSet10.retainAll((java.util.Collection<java.lang.String>) strSet14);
        java.util.Spliterator<java.lang.String> strSpliterator40 = strSet10.spliterator();
        java.util.Set<java.lang.String> strSet41 = java.time.ZoneId.getAvailableZoneIds();
        java.util.Set<java.lang.String> strSet42 = java.time.ZoneId.getAvailableZoneIds();
        java.util.stream.Stream<java.lang.String> strStream43 = strSet42.parallelStream();
        java.lang.Object[] objArray44 = strSet42.toArray();
        java.util.Spliterator<java.lang.String> strSpliterator45 = strSet42.spliterator();
        boolean boolean46 = strSet41.containsAll((java.util.Collection<java.lang.String>) strSet42);
        boolean boolean47 = strSet10.removeAll((java.util.Collection<java.lang.String>) strSet42);
        java.util.stream.Stream<java.lang.String> strStream48 = strSet42.parallelStream();
        boolean boolean49 = dateMidnight9.equals((java.lang.Object) strStream48);
        org.junit.Assert.assertNotNull(dateMidnight1);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(days4);
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(days7);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertNotNull(strStream11);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertNotNull(strSpliterator13);
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertNotNull(strStream15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertNotNull(localTime28);
        org.junit.Assert.assertNotNull(localTime29);
        org.junit.Assert.assertTrue("'" + chronoField30 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField30.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime32);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 3601000000001L + "'", long33 == 3601000000001L);
        org.junit.Assert.assertNotNull(localTime35);
        org.junit.Assert.assertTrue("'" + chronoField36 + "' != '" + java.time.temporal.ChronoField.SECOND_OF_DAY + "'", chronoField36.equals(java.time.temporal.ChronoField.SECOND_OF_DAY));
        org.junit.Assert.assertNotNull(valueRange37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(strSpliterator40);
        org.junit.Assert.assertNotNull(strSet41);
        org.junit.Assert.assertNotNull(strSet42);
        org.junit.Assert.assertNotNull(strStream43);
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertNotNull(strSpliterator45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(strStream48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test5244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5244");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.now();
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery1 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period2 = localDateTime0.query(periodTemporalQuery1);
        java.time.chrono.IsoChronology isoChronology3 = period2.getChronology();
        java.time.Clock clock4 = java.time.Clock.systemUTC();
        java.time.Duration duration6 = java.time.Duration.ofSeconds((long) 256);
        java.time.Clock clock7 = java.time.Clock.tick(clock4, duration6);
        java.time.Duration duration9 = java.time.Duration.ofMinutes((long) 3);
        java.time.Duration duration10 = duration9.abs();
        java.time.Clock clock11 = java.time.Clock.offset(clock4, duration9);
        java.time.LocalDate localDate12 = java.time.LocalDate.now(clock11);
        java.time.LocalDate localDate13 = isoChronology3.dateNow(clock11);
        java.time.LocalDateTime localDateTime14 = java.time.LocalDateTime.now();
        java.time.temporal.ChronoField chronoField15 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime17 = localDateTime14.with((java.time.temporal.TemporalField) chronoField15, (long) 10);
        java.time.LocalDateTime localDateTime19 = localDateTime14.minusMinutes((long) 12);
        java.time.LocalDate localDate22 = java.time.LocalDate.ofEpochDay((long) ' ');
        java.time.OffsetTime offsetTime23 = java.time.OffsetTime.MAX;
        java.time.LocalTime localTime24 = offsetTime23.toLocalTime();
        java.lang.String str25 = offsetTime23.toString();
        java.time.Duration duration26 = java.time.Duration.ZERO;
        java.lang.String str27 = duration26.toString();
        java.time.OffsetTime offsetTime28 = offsetTime23.plus((java.time.temporal.TemporalAmount) duration26);
        java.time.LocalTime localTime29 = offsetTime23.toLocalTime();
        java.time.chrono.ChronoLocalDateTime<?> wildcardChronoLocalDateTime30 = localDate22.atTime(localTime29);
        java.time.LocalDate localDate32 = localDate22.minusWeeks((long) 2097);
        java.util.TimeZone timeZone34 = null;
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forTimeZone(timeZone34);
        org.joda.time.DateMidnight dateMidnight36 = new org.joda.time.DateMidnight((long) 1970, dateTimeZone35);
        long long39 = dateTimeZone35.convertLocalToUTC((long) 3, false);
        long long42 = dateTimeZone35.convertLocalToUTC(0L, true);
        boolean boolean43 = localDate22.equals((java.lang.Object) true);
        int int44 = localDate22.lengthOfMonth();
        java.time.LocalDate localDate47 = java.time.LocalDate.ofEpochDay((long) ' ');
        int int48 = localDate47.getMonthValue();
        org.joda.time.Period period49 = org.joda.time.Period.ZERO;
        org.joda.time.Period period50 = period49.normalizedStandard();
        org.joda.time.Period period52 = period49.plusHours(2);
        java.time.chrono.IsoEra isoEra53 = java.time.chrono.IsoEra.CE;
        boolean boolean54 = period52.equals((java.lang.Object) isoEra53);
        java.time.LocalTime localTime59 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime60 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime59);
        java.time.LocalTime localTime65 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime66 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime65);
        java.time.temporal.ChronoField chronoField67 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime69 = localTime65.with((java.time.temporal.TemporalField) chronoField67, (long) (short) 1);
        long long70 = localTime59.getLong((java.time.temporal.TemporalField) chronoField67);
        boolean boolean71 = isoEra53.isSupported((java.time.temporal.TemporalField) chronoField67);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery72 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period73 = isoEra53.query(periodTemporalQuery72);
        boolean boolean74 = period73.isNegative();
        java.time.Period period76 = period73.plusDays((long) ' ');
        java.time.temporal.ChronoField chronoField77 = java.time.temporal.ChronoField.SECOND_OF_DAY;
        boolean boolean78 = period73.equals((java.lang.Object) chronoField77);
        boolean boolean79 = localDate47.isSupported((java.time.temporal.TemporalField) chronoField77);
        java.time.temporal.TemporalUnit temporalUnit80 = chronoField77.getRangeUnit();
        java.time.chrono.ChronoLocalDate chronoLocalDate81 = localDate22.minus((long) (-1), temporalUnit80);
        java.time.LocalDateTime localDateTime82 = localDateTime14.minus(1645434620L, temporalUnit80);
        java.time.LocalDateTime localDateTime84 = localDateTime14.minusSeconds((long) 32772);
        java.time.LocalDateTime localDateTime86 = localDateTime14.plusMinutes((long) (byte) 100);
        java.time.LocalDateTime localDateTime87 = isoChronology3.localDateTime((java.time.temporal.TemporalAccessor) localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(periodTemporalQuery1);
        org.junit.Assert.assertNotNull(period2);
        org.junit.Assert.assertNotNull(isoChronology3);
        org.junit.Assert.assertNotNull(clock4);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(clock7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(clock11);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertTrue("'" + chronoField15 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField15.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(offsetTime23);
        org.junit.Assert.assertNotNull(localTime24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "23:59:59.999999999-18:00" + "'", str25, "23:59:59.999999999-18:00");
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "PT0S" + "'", str27, "PT0S");
        org.junit.Assert.assertNotNull(offsetTime28);
        org.junit.Assert.assertNotNull(localTime29);
        org.junit.Assert.assertNotNull(wildcardChronoLocalDateTime30);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 3L + "'", long39 == 3L);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 28 + "'", int44 == 28);
        org.junit.Assert.assertNotNull(localDate47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2 + "'", int48 == 2);
        org.junit.Assert.assertNotNull(period49);
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertTrue("'" + isoEra53 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra53.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(localTime59);
        org.junit.Assert.assertNotNull(localTime60);
        org.junit.Assert.assertNotNull(localTime65);
        org.junit.Assert.assertNotNull(localTime66);
        org.junit.Assert.assertTrue("'" + chronoField67 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField67.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime69);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 3601000000001L + "'", long70 == 3601000000001L);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(periodTemporalQuery72);
        org.junit.Assert.assertNotNull(period73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(period76);
        org.junit.Assert.assertTrue("'" + chronoField77 + "' != '" + java.time.temporal.ChronoField.SECOND_OF_DAY + "'", chronoField77.equals(java.time.temporal.ChronoField.SECOND_OF_DAY));
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + temporalUnit80 + "' != '" + java.time.temporal.ChronoUnit.DAYS + "'", temporalUnit80.equals(java.time.temporal.ChronoUnit.DAYS));
        org.junit.Assert.assertNotNull(chronoLocalDate81);
        org.junit.Assert.assertNotNull(localDateTime82);
        org.junit.Assert.assertNotNull(localDateTime84);
        org.junit.Assert.assertNotNull(localDateTime86);
        org.junit.Assert.assertNotNull(localDateTime87);
    }

    @Test
    public void test5245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5245");
        java.time.ZoneOffset zoneOffset2 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.time.LocalDateTime localDateTime3 = java.time.LocalDateTime.ofEpochSecond(1645436347011L, (-292267037), zoneOffset2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: offset");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test5246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5246");
        float[] floatArray2 = new float[] { (-1L), (byte) -1 };
        java.nio.FloatBuffer floatBuffer3 = java.nio.FloatBuffer.wrap(floatArray2);
        java.nio.FloatBuffer floatBuffer4 = floatBuffer3.compact();
        float[] floatArray7 = new float[] { (-1L), (byte) -1 };
        java.nio.FloatBuffer floatBuffer8 = java.nio.FloatBuffer.wrap(floatArray7);
        java.nio.FloatBuffer floatBuffer9 = floatBuffer8.compact();
        java.nio.FloatBuffer floatBuffer10 = floatBuffer8.asReadOnlyBuffer();
        java.nio.ByteOrder byteOrder11 = floatBuffer8.order();
        java.nio.FloatBuffer floatBuffer12 = floatBuffer8.slice();
        int int13 = floatBuffer8.arrayOffset();
        int int14 = floatBuffer3.compareTo(floatBuffer8);
        java.io.PrintStream printStream16 = new java.io.PrintStream("subject:\n (GERMAN)");
        boolean boolean17 = floatBuffer3.equals((java.lang.Object) printStream16);
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[-1.0, -1.0]");
        org.junit.Assert.assertNotNull(floatBuffer3);
        org.junit.Assert.assertNotNull(floatBuffer4);
        org.junit.Assert.assertNotNull(floatArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray7), "[-1.0, -1.0]");
        org.junit.Assert.assertNotNull(floatBuffer8);
        org.junit.Assert.assertNotNull(floatBuffer9);
        org.junit.Assert.assertNotNull(floatBuffer10);
        org.junit.Assert.assertNotNull(byteOrder11);
        org.junit.Assert.assertNotNull(floatBuffer12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test5247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5247");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect(10800000);
        java.nio.ByteBuffer byteBuffer2 = byteBuffer1.asReadOnlyBuffer();
        boolean boolean3 = byteBuffer2.hasArray();
        java.lang.String str4 = byteBuffer2.toString();
        java.nio.ShortBuffer shortBuffer5 = byteBuffer2.asShortBuffer();
        java.nio.LongBuffer longBuffer6 = byteBuffer2.asLongBuffer();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "java.nio.DirectByteBufferR[pos=0 lim=10800000 cap=10800000]" + "'", str4, "java.nio.DirectByteBufferR[pos=0 lim=10800000 cap=10800000]");
        org.junit.Assert.assertNotNull(shortBuffer5);
        org.junit.Assert.assertNotNull(longBuffer6);
    }

    @Test
    public void test5248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5248");
        java.util.stream.LongStream longStream1 = java.util.stream.LongStream.of(0L);
        java.util.stream.LongStream longStream2 = longStream1.unordered();
        java.util.stream.DoubleStream doubleStream3 = longStream2.asDoubleStream();
        java.util.OptionalDouble optionalDouble4 = doubleStream3.max();
        java.util.function.DoublePredicate doublePredicate5 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean6 = doubleStream3.anyMatch(doublePredicate5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(longStream1);
        org.junit.Assert.assertNotNull(longStream2);
        org.junit.Assert.assertNotNull(doubleStream3);
        org.junit.Assert.assertNotNull(optionalDouble4);
    }

    @Test
    public void test5249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5249");
        java.time.format.DecimalStyle decimalStyle0 = java.time.format.DecimalStyle.STANDARD;
        char char1 = decimalStyle0.getPositiveSign();
        char char2 = decimalStyle0.getNegativeSign();
        char char3 = decimalStyle0.getPositiveSign();
        org.junit.Assert.assertNotNull(decimalStyle0);
        org.junit.Assert.assertTrue("'" + char1 + "' != '" + '+' + "'", char1 == '+');
        org.junit.Assert.assertTrue("'" + char2 + "' != '" + '-' + "'", char2 == '-');
        org.junit.Assert.assertTrue("'" + char3 + "' != '" + '+' + "'", char3 == '+');
    }

    @Test
    public void test5250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5250");
        java.lang.String str1 = java.net.URLConnection.guessContentTypeFromName("optionaldouble.empty");
        org.junit.Assert.assertNull(str1);
    }

    @Test
    public void test5251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5251");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 3, chronology1);
        org.joda.time.DateTime.Property property3 = dateTime2.dayOfYear();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight((java.lang.Object) dateTime2, chronology4);
        org.joda.time.MutableDateTime mutableDateTime6 = dateTime2.toMutableDateTime();
        mutableDateTime6.addYears((int) (short) 100);
        mutableDateTime6.setMillis((long) 21);
        mutableDateTime6.addDays((int) 'x');
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(mutableDateTime6);
    }

    @Test
    public void test5252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5252");
        java.time.format.DateTimeFormatter dateTimeFormatter1 = java.time.format.DateTimeFormatter.ofPattern("\u4e2d\u56fd");
        org.junit.Assert.assertNotNull(dateTimeFormatter1);
    }

    @Test
    public void test5253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5253");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.now();
        java.time.temporal.ChronoField chronoField1 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime3 = localDateTime0.with((java.time.temporal.TemporalField) chronoField1, (long) 10);
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.now();
        java.time.temporal.ChronoField chronoField5 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime7 = localDateTime4.with((java.time.temporal.TemporalField) chronoField5, (long) 10);
        java.time.LocalDateTime localDateTime9 = localDateTime4.minusMinutes((long) 12);
        int int10 = localDateTime0.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertTrue("'" + chronoField1 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField1.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + chronoField5 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField5.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
    }

    @Test
    public void test5254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5254");
        float[] floatArray2 = new float[] { (-1L), (byte) -1 };
        java.nio.FloatBuffer floatBuffer3 = java.nio.FloatBuffer.wrap(floatArray2);
        java.nio.FloatBuffer floatBuffer4 = floatBuffer3.compact();
        float[] floatArray7 = new float[] { (-1L), (byte) -1 };
        java.nio.FloatBuffer floatBuffer8 = java.nio.FloatBuffer.wrap(floatArray7);
        java.nio.FloatBuffer floatBuffer9 = floatBuffer8.compact();
        java.nio.FloatBuffer floatBuffer10 = floatBuffer8.asReadOnlyBuffer();
        java.nio.ByteOrder byteOrder11 = floatBuffer8.order();
        java.nio.FloatBuffer floatBuffer12 = floatBuffer8.slice();
        int int13 = floatBuffer8.arrayOffset();
        int int14 = floatBuffer3.compareTo(floatBuffer8);
        float[] floatArray15 = floatBuffer3.array();
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[-1.0, -1.0]");
        org.junit.Assert.assertNotNull(floatBuffer3);
        org.junit.Assert.assertNotNull(floatBuffer4);
        org.junit.Assert.assertNotNull(floatArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray7), "[-1.0, -1.0]");
        org.junit.Assert.assertNotNull(floatBuffer8);
        org.junit.Assert.assertNotNull(floatBuffer9);
        org.junit.Assert.assertNotNull(floatBuffer10);
        org.junit.Assert.assertNotNull(byteOrder11);
        org.junit.Assert.assertNotNull(floatBuffer12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(floatArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray15), "[-1.0, -1.0]");
    }

    @Test
    public void test5255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5255");
        java.util.stream.LongStream longStream2 = java.util.stream.LongStream.rangeClosed((long) 5, (long) 'a');
        java.util.Spliterator.OfLong ofLong3 = longStream2.spliterator();
        java.util.LongSummaryStatistics longSummaryStatistics4 = new java.util.LongSummaryStatistics();
        longSummaryStatistics4.accept(3);
        long long7 = longSummaryStatistics4.getMax();
        java.util.LongSummaryStatistics longSummaryStatistics8 = new java.util.LongSummaryStatistics();
        longSummaryStatistics8.accept(3);
        java.util.function.LongConsumer longConsumer11 = longSummaryStatistics4.andThen((java.util.function.LongConsumer) longSummaryStatistics8);
        java.util.LongSummaryStatistics longSummaryStatistics12 = new java.util.LongSummaryStatistics();
        longSummaryStatistics12.accept(3);
        long long15 = longSummaryStatistics12.getMax();
        double double16 = longSummaryStatistics12.getAverage();
        longSummaryStatistics12.accept(6);
        java.util.function.LongConsumer longConsumer19 = longSummaryStatistics4.andThen((java.util.function.LongConsumer) longSummaryStatistics12);
        double double20 = longSummaryStatistics4.getAverage();
        boolean boolean21 = ofLong3.tryAdvance((java.util.function.LongConsumer) longSummaryStatistics4);
        java.util.Comparator<? super java.lang.Long> wildcardComparator22 = ofLong3.getComparator();
        java.util.stream.IntStream intStream25 = java.util.stream.IntStream.rangeClosed(100, (int) '4');
        java.util.stream.IntStream intStream27 = intStream25.skip((long) 256);
        java.util.PrimitiveIterator.OfInt ofInt28 = intStream27.iterator();
        java.util.LongSummaryStatistics longSummaryStatistics29 = new java.util.LongSummaryStatistics();
        longSummaryStatistics29.accept(3);
        long long32 = longSummaryStatistics29.getMax();
        java.util.LongSummaryStatistics longSummaryStatistics33 = new java.util.LongSummaryStatistics();
        longSummaryStatistics33.accept(3);
        java.util.function.LongConsumer longConsumer36 = longSummaryStatistics29.andThen((java.util.function.LongConsumer) longSummaryStatistics33);
        java.util.LongSummaryStatistics longSummaryStatistics37 = new java.util.LongSummaryStatistics();
        longSummaryStatistics37.accept(3);
        long long40 = longSummaryStatistics37.getMax();
        double double41 = longSummaryStatistics37.getAverage();
        longSummaryStatistics37.accept(6);
        java.util.function.LongConsumer longConsumer44 = longSummaryStatistics29.andThen((java.util.function.LongConsumer) longSummaryStatistics37);
        double double45 = longSummaryStatistics29.getAverage();
        java.util.LongSummaryStatistics longSummaryStatistics46 = new java.util.LongSummaryStatistics();
        longSummaryStatistics46.accept(3);
        java.util.function.LongConsumer longConsumer49 = longSummaryStatistics29.andThen((java.util.function.LongConsumer) longSummaryStatistics46);
        long long50 = longSummaryStatistics46.getSum();
        ofInt28.forEachRemaining((java.util.function.IntConsumer) longSummaryStatistics46);
        long long52 = longSummaryStatistics46.getCount();
        ofLong3.forEachRemaining((java.util.function.LongConsumer) longSummaryStatistics46);
        org.junit.Assert.assertNotNull(longStream2);
        org.junit.Assert.assertNotNull(ofLong3);
        org.junit.Assert.assertEquals(longSummaryStatistics4.toString(), "LongSummaryStatistics{count=2, sum=8, min=3, average=4.000000, max=5}");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 3L + "'", long7 == 3L);
        org.junit.Assert.assertEquals(longSummaryStatistics8.toString(), "LongSummaryStatistics{count=1, sum=3, min=3, average=3.000000, max=3}");
        org.junit.Assert.assertNotNull(longConsumer11);
        org.junit.Assert.assertEquals(longSummaryStatistics12.toString(), "LongSummaryStatistics{count=2, sum=9, min=3, average=4.500000, max=6}");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 3L + "'", long15 == 3L);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 3.0d + "'", double16 == 3.0d);
        org.junit.Assert.assertNotNull(longConsumer19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 3.0d + "'", double20 == 3.0d);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNull(wildcardComparator22);
        org.junit.Assert.assertNotNull(intStream25);
        org.junit.Assert.assertNotNull(intStream27);
        org.junit.Assert.assertNotNull(ofInt28);
        org.junit.Assert.assertEquals(longSummaryStatistics29.toString(), "LongSummaryStatistics{count=1, sum=3, min=3, average=3.000000, max=3}");
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 3L + "'", long32 == 3L);
        org.junit.Assert.assertEquals(longSummaryStatistics33.toString(), "LongSummaryStatistics{count=1, sum=3, min=3, average=3.000000, max=3}");
        org.junit.Assert.assertNotNull(longConsumer36);
        org.junit.Assert.assertEquals(longSummaryStatistics37.toString(), "LongSummaryStatistics{count=2, sum=9, min=3, average=4.500000, max=6}");
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 3L + "'", long40 == 3L);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 3.0d + "'", double41 == 3.0d);
        org.junit.Assert.assertNotNull(longConsumer44);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 3.0d + "'", double45 == 3.0d);
        org.junit.Assert.assertEquals(longSummaryStatistics46.toString(), "LongSummaryStatistics{count=93, sum=4741, min=3, average=50.978495, max=97}");
        org.junit.Assert.assertNotNull(longConsumer49);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 3L + "'", long50 == 3L);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 1L + "'", long52 == 1L);
    }

    @Test
    public void test5256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5256");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Duration duration2 = new org.joda.time.Duration(readableInstant0, readableInstant1);
        long long3 = duration2.getMillis();
        org.joda.time.Duration duration5 = duration2.plus((long) (byte) 1);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) 3, chronology7);
        org.joda.time.DateTime.Property property9 = dateTime8.dayOfYear();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) 3, chronology11);
        org.joda.time.DateTime.Property property13 = dateTime12.dayOfYear();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight((java.lang.Object) dateTime12, chronology14);
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight15.minusMonths((-1));
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight15.withDayOfYear((int) ' ');
        int int20 = dateMidnight15.getWeekOfWeekyear();
        long long21 = property9.getDifferenceAsLong((org.joda.time.ReadableInstant) dateMidnight15);
        org.joda.time.Weeks weeks22 = org.joda.time.Weeks.ONE;
        java.util.concurrent.TimeUnit timeUnit23 = java.util.concurrent.TimeUnit.NANOSECONDS;
        boolean boolean24 = weeks22.equals((java.lang.Object) timeUnit23);
        org.joda.time.Weeks weeks25 = weeks22.negated();
        org.joda.time.PeriodType periodType26 = weeks25.getPeriodType();
        org.joda.time.Period period27 = duration5.toPeriodFrom((org.joda.time.ReadableInstant) dateMidnight15, periodType26);
        java.util.TimeZone timeZone31 = null;
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forTimeZone(timeZone31);
        org.joda.time.DateMidnight dateMidnight33 = new org.joda.time.DateMidnight((long) 1970, dateTimeZone32);
        long long36 = dateTimeZone32.convertLocalToUTC((long) 3, false);
        org.joda.time.Interval interval37 = new org.joda.time.Interval(10L, (long) 2097, dateTimeZone32);
        org.joda.time.DateMidnight dateMidnight38 = dateMidnight15.withZoneRetainFields(dateTimeZone32);
        boolean boolean39 = dateTimeZone32.isFixed();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(weeks22);
        org.junit.Assert.assertNotNull(timeUnit23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(weeks25);
        org.junit.Assert.assertNotNull(periodType26);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 3L + "'", long36 == 3L);
        org.junit.Assert.assertNotNull(dateMidnight38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
    }

    @Test
    public void test5257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5257");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 3, chronology1);
        org.joda.time.DateTime.Property property3 = dateTime2.dayOfYear();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight((java.lang.Object) dateTime2, chronology4);
        org.joda.time.MutableDateTime mutableDateTime6 = dateTime2.toMutableDateTime();
        mutableDateTime6.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime6.millisOfDay();
        org.joda.time.PeriodType periodType10 = org.joda.time.PeriodType.years();
        org.joda.time.DurationFieldType durationFieldType11 = org.joda.time.DurationFieldType.halfdays();
        int int12 = periodType10.indexOf(durationFieldType11);
        mutableDateTime6.add(durationFieldType11, (int) 'a');
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime6.millisOfSecond();
        mutableDateTime6.setSecondOfDay(32770);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertNotNull(durationFieldType11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(property15);
    }

    @Test
    public void test5258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5258");
        java.util.stream.IntStream intStream1 = java.util.stream.IntStream.of(667);
        org.junit.Assert.assertNotNull(intStream1);
    }

    @Test
    public void test5259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5259");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Duration duration2 = new org.joda.time.Duration(readableInstant0, readableInstant1);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = duration2.toPeriodTo(readableInstant3, periodType4);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.Duration duration8 = new org.joda.time.Duration(readableInstant6, readableInstant7);
        long long9 = duration8.getMillis();
        boolean boolean10 = duration2.isShorterThan((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) 3, chronology12);
        org.joda.time.DateTime.Property property14 = dateTime13.dayOfYear();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight((java.lang.Object) dateTime13, chronology15);
        org.joda.time.MutableDateTime mutableDateTime17 = dateTime13.toMutableDateTime();
        mutableDateTime17.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime17.dayOfWeek();
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime17.year();
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime17.weekyear();
        boolean boolean23 = duration2.equals((java.lang.Object) mutableDateTime17);
        mutableDateTime17.addMonths((int) ' ');
        mutableDateTime17.add((long) (byte) 10);
        org.joda.time.Period period28 = org.joda.time.Period.ZERO;
        org.joda.time.Period period29 = period28.normalizedStandard();
        org.joda.time.Period period31 = period28.plusHours(2);
        java.time.chrono.IsoEra isoEra32 = java.time.chrono.IsoEra.CE;
        boolean boolean33 = period31.equals((java.lang.Object) isoEra32);
        int int34 = period31.getMinutes();
        mutableDateTime17.add((org.joda.time.ReadablePeriod) period31);
        java.util.TimeZone timeZone37 = null;
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forTimeZone(timeZone37);
        org.joda.time.DateMidnight dateMidnight39 = new org.joda.time.DateMidnight((long) 1970, dateTimeZone38);
        long long42 = dateTimeZone38.convertLocalToUTC((long) 3, false);
        long long45 = dateTimeZone38.convertLocalToUTC(0L, true);
        mutableDateTime17.setZoneRetainFields(dateTimeZone38);
        java.lang.String str47 = dateTimeZone38.toString();
        org.joda.time.chrono.EthiopicChronology ethiopicChronology48 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone38);
        org.joda.time.DateTimeField dateTimeField49 = ethiopicChronology48.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone50 = ethiopicChronology48.getZone();
        org.joda.time.DateTimeField dateTimeField51 = ethiopicChronology48.era();
        org.joda.time.DateTimeField dateTimeField52 = ethiopicChronology48.secondOfDay();
        org.joda.time.DateTimeField dateTimeField53 = ethiopicChronology48.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField54 = ethiopicChronology48.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime55 = org.joda.time.LocalDateTime.now((org.joda.time.Chronology) ethiopicChronology48);
        org.joda.time.DurationField durationField56 = ethiopicChronology48.seconds();
        org.joda.time.DateTimeField dateTimeField57 = ethiopicChronology48.weekyear();
        org.joda.time.DateTimeField dateTimeField58 = ethiopicChronology48.centuryOfEra();
        long long62 = ethiopicChronology48.add(9223372036854775807L, (long) 0, 600);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertTrue("'" + isoEra32 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra32.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 3L + "'", long42 == 3L);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Etc/UTC" + "'", str47, "Etc/UTC");
        org.junit.Assert.assertNotNull(ethiopicChronology48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(durationField56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 9223372036854775807L + "'", long62 == 9223372036854775807L);
    }

    @Test
    public void test5260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5260");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.time.LocalTime localTime6 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime7 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime6);
        java.time.LocalTime localTime12 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime13 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime12);
        java.time.temporal.ChronoField chronoField14 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime16 = localTime12.with((java.time.temporal.TemporalField) chronoField14, (long) (short) 1);
        long long17 = localTime6.getLong((java.time.temporal.TemporalField) chronoField14);
        java.time.LocalTime localTime19 = localTime6.withSecond((int) (short) 1);
        java.lang.Object obj21 = properties1.put((java.lang.Object) localTime19, (java.lang.Object) "117");
        boolean boolean23 = properties1.containsValue((java.lang.Object) 6);
        properties1.clear();
        java.time.LocalDateTime localDateTime25 = java.time.LocalDateTime.now();
        java.time.LocalDateTime localDateTime27 = localDateTime25.minusYears((long) (byte) 10);
        java.time.LocalDateTime localDateTime28 = java.time.LocalDateTime.now();
        java.time.LocalDateTime localDateTime30 = localDateTime28.minusYears((long) (byte) 10);
        boolean boolean31 = localDateTime25.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime30);
        java.time.LocalDateTime localDateTime33 = localDateTime30.withSecond((int) '+');
        java.time.chrono.Chronology chronology34 = localDateTime30.getChronology();
        java.lang.Object obj35 = properties1.remove((java.lang.Object) chronology34);
        java.lang.Object obj37 = properties1.get((java.lang.Object) (-1));
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime((long) 3, chronology39);
        org.joda.time.DateTime.Property property41 = dateTime40.dayOfYear();
        org.joda.time.Interval interval42 = property41.toInterval();
        org.joda.time.DateTimeField dateTimeField43 = property41.getField();
        org.joda.time.DateTime dateTime45 = property41.addWrapFieldToCopy(0);
        org.joda.time.DateTime dateTime47 = property41.setCopy(34);
        org.joda.time.DateTime dateTime49 = dateTime47.plusHours(70);
        boolean boolean50 = properties1.containsKey((java.lang.Object) 70);
        java.lang.Object obj52 = properties1.get((java.lang.Object) "KOI8-U");
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertTrue("'" + chronoField14 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField14.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 3601000000001L + "'", long17 == 3601000000001L);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNull(obj35);
        org.junit.Assert.assertNull(obj37);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNull(obj52);
    }

    @Test
    public void test5261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5261");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardDays((long) 20);
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.Duration duration4 = new org.joda.time.Duration(readableInstant2, readableInstant3);
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.PeriodType periodType6 = null;
        org.joda.time.Period period7 = duration4.toPeriodTo(readableInstant5, periodType6);
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.Duration duration10 = new org.joda.time.Duration(readableInstant8, readableInstant9);
        long long11 = duration10.getMillis();
        boolean boolean12 = duration4.isShorterThan((org.joda.time.ReadableDuration) duration10);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime(chronology13);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.withYearOfCentury((int) 'a');
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.plusSeconds(6);
        org.joda.time.DateTime dateTime19 = localDateTime16.toDateTime();
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration10, (org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.Hours hours21 = duration10.toStandardHours();
        boolean boolean22 = duration1.isLongerThan((org.joda.time.ReadableDuration) duration10);
        org.joda.time.Duration duration24 = duration1.minus(82800000L);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(hours21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(duration24);
    }

    @Test
    public void test5262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5262");
        java.net.InetAddress inetAddress0 = java.net.InetAddress.getLocalHost();
        boolean boolean1 = inetAddress0.isMCOrgLocal();
        float[] floatArray4 = new float[] { (-1L), (byte) -1 };
        java.nio.FloatBuffer floatBuffer5 = java.nio.FloatBuffer.wrap(floatArray4);
        boolean boolean6 = inetAddress0.equals((java.lang.Object) floatBuffer5);
        float[] floatArray9 = new float[] { (-1L), (byte) -1 };
        java.nio.FloatBuffer floatBuffer10 = java.nio.FloatBuffer.wrap(floatArray9);
        java.nio.FloatBuffer floatBuffer11 = floatBuffer10.compact();
        java.nio.FloatBuffer floatBuffer12 = floatBuffer10.asReadOnlyBuffer();
        java.nio.ByteOrder byteOrder13 = floatBuffer10.order();
        boolean boolean14 = floatBuffer5.equals((java.lang.Object) floatBuffer10);
        int int15 = floatBuffer10.arrayOffset();
        boolean boolean16 = floatBuffer10.isDirect();
        boolean boolean17 = floatBuffer10.hasArray();
        org.junit.Assert.assertNotNull(inetAddress0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(floatArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray4), "[-1.0, -1.0]");
        org.junit.Assert.assertNotNull(floatBuffer5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(floatArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray9), "[-1.0, -1.0]");
        org.junit.Assert.assertNotNull(floatBuffer10);
        org.junit.Assert.assertNotNull(floatBuffer11);
        org.junit.Assert.assertNotNull(floatBuffer12);
        org.junit.Assert.assertNotNull(byteOrder13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
    }

    @Test
    public void test5263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5263");
        java.util.Locale locale0 = java.util.Locale.CHINA;
        java.lang.String str1 = locale0.getDisplayLanguage();
        java.time.format.DecimalStyle decimalStyle2 = java.time.format.DecimalStyle.of(locale0);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Chinesisch" + "'", str1, "Chinesisch");
        org.junit.Assert.assertNotNull(decimalStyle2);
    }

    @Test
    public void test5264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5264");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 3, chronology1);
        org.joda.time.DateTime.Property property3 = dateTime2.dayOfYear();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight((java.lang.Object) dateTime2, chronology4);
        org.joda.time.MutableDateTime mutableDateTime6 = dateTime2.toMutableDateTime();
        mutableDateTime6.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime6.dayOfWeek();
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime6.year();
        java.util.TimeZone timeZone11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        mutableDateTime6.setZone(dateTimeZone12);
        java.util.Locale locale15 = java.util.Locale.TAIWAN;
        java.lang.String str16 = dateTimeZone12.getShortName((long) 64, locale15);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) 3, chronology18);
        org.joda.time.DateTime.Property property20 = dateTime19.dayOfYear();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight((java.lang.Object) dateTime19, chronology21);
        org.joda.time.MutableDateTime mutableDateTime23 = dateTime19.toMutableDateTime();
        mutableDateTime23.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property26 = mutableDateTime23.dayOfWeek();
        org.joda.time.MutableDateTime.Property property27 = mutableDateTime23.year();
        java.util.TimeZone timeZone28 = null;
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forTimeZone(timeZone28);
        mutableDateTime23.setZone(dateTimeZone29);
        java.util.Locale locale32 = java.util.Locale.TAIWAN;
        java.lang.String str33 = dateTimeZone29.getShortName((long) 64, locale32);
        long long35 = dateTimeZone12.getMillisKeepLocal(dateTimeZone29, (long) 64);
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime(dateTimeZone12);
        org.joda.time.LocalDate localDate37 = new org.joda.time.LocalDate(dateTimeZone12);
        org.joda.time.LocalDate.Property property38 = localDate37.era();
        org.joda.time.LocalDate localDate40 = property38.addWrapFieldToCopy(121);
        int int41 = localDate40.getYear();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+00:00" + "'", str16, "+00:00");
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(mutableDateTime23);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "+00:00" + "'", str33, "+00:00");
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 64L + "'", long35 == 64L);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-2022) + "'", int41 == (-2022));
    }

    @Test
    public void test5265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5265");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.now();
        java.time.LocalDateTime localDateTime2 = localDateTime0.minusYears((long) (byte) 10);
        int int3 = localDateTime0.getHour();
        int int4 = localDateTime0.getDayOfMonth();
        java.time.LocalDateTime localDateTime6 = localDateTime0.minusSeconds(34461212000000L);
        java.time.LocalDateTime localDateTime8 = localDateTime6.plusDays(0L);
        // The following exception was thrown during execution in test generation
        try {
            java.time.ZonedDateTime zonedDateTime9 = java.time.ZonedDateTime.from((java.time.temporal.TemporalAccessor) localDateTime8);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Unable to obtain ZonedDateTime from TemporalAccessor: -1090011-10-22T00:48:31.715 of type java.time.LocalDateTime");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 9 + "'", int3 == 9);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 21 + "'", int4 == 21);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
    }

    @Test
    public void test5266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5266");
        java.io.File file1 = null;
        java.io.File file3 = new java.io.File(file1, "1970-01-01T00:00:00.003Z");
        java.net.URL uRL4 = file3.toURL();
        java.io.File file5 = null;
        java.io.File file7 = new java.io.File(file5, "1970-01-01T00:00:00.003Z");
        java.net.URL uRL8 = file7.toURL();
        boolean boolean9 = uRL4.sameFile(uRL8);
        java.lang.String str10 = uRL4.getPath();
        java.net.URLConnection uRLConnection11 = uRL4.openConnection();
        java.lang.String str12 = uRLConnection11.getContentType();
        java.lang.String str13 = uRLConnection11.getContentEncoding();
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap14 = uRLConnection11.getHeaderFields();
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList15 = java.util.Locale.LanguageRange.parse("java.nio.charset.CharacterCodingException", strMap14);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=java.nio.charset.charactercodingexception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull("file3.getParent() == null", file3.getParent());
        org.junit.Assert.assertEquals(file3.toString(), "1970-01-01T00:00:00.003Z");
        org.junit.Assert.assertNotNull(uRL4);
// flaky:         org.junit.Assert.assertEquals(uRL4.toString(), "file:/experiment/1970-01-01T00:00:00.003Z");
        org.junit.Assert.assertNull("file7.getParent() == null", file7.getParent());
        org.junit.Assert.assertEquals(file7.toString(), "1970-01-01T00:00:00.003Z");
        org.junit.Assert.assertNotNull(uRL8);
// flaky:         org.junit.Assert.assertEquals(uRL8.toString(), "file:/experiment/1970-01-01T00:00:00.003Z");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "/experiment/1970-01-01T00:00:00.003Z" + "'", str10, "/experiment/1970-01-01T00:00:00.003Z");
        org.junit.Assert.assertNotNull(uRLConnection11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "content/unknown" + "'", str12, "content/unknown");
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(strMap14);
    }

    @Test
    public void test5267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5267");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Locale.LanguageRange[] languageRangeArray3 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList4 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList4, languageRangeArray3);
        java.util.Locale locale6 = java.util.Locale.JAPAN;
        java.util.Locale[] localeArray7 = new java.util.Locale[] { locale6 };
        java.util.ArrayList<java.util.Locale> localeList8 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList8, localeArray7);
        java.util.List<java.util.Locale> localeList10 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList4, (java.util.Collection<java.util.Locale>) localeList8);
        localeList10.clear();
        java.util.List<java.util.Locale> localeList12 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList10);
        java.util.Locale.LanguageRange[] languageRangeArray13 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList14 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList14, languageRangeArray13);
        java.util.Locale.LanguageRange[] languageRangeArray16 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList17 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList17, languageRangeArray16);
        java.util.Locale locale19 = java.util.Locale.JAPAN;
        java.util.Locale[] localeArray20 = new java.util.Locale[] { locale19 };
        java.util.ArrayList<java.util.Locale> localeList21 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList21, localeArray20);
        java.util.List<java.util.Locale> localeList23 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList17, (java.util.Collection<java.util.Locale>) localeList21);
        localeList23.clear();
        java.util.List<java.util.Locale> localeList25 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList14, (java.util.Collection<java.util.Locale>) localeList23);
        java.util.List<java.util.Locale> localeList26 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList25);
        java.util.stream.Collector.Characteristics characteristics27 = java.util.stream.Collector.Characteristics.UNORDERED;
        boolean boolean28 = localeList25.contains((java.lang.Object) characteristics27);
        java.util.ListIterator<java.util.Locale> localeItor29 = localeList25.listIterator();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.LocalTime localTime34 = new org.joda.time.LocalTime((long) 0, chronology33);
        org.joda.time.Chronology chronology35 = localTime34.getChronology();
        java.util.Locale locale36 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale37 = java.util.Locale.GERMANY;
        java.lang.String str38 = locale36.getDisplayScript(locale37);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket40 = new org.joda.time.format.DateTimeParserBucket((long) 1970, chronology35, locale36, (java.lang.Integer) 1);
        dateTimeParserBucket40.setOffset((-1));
        org.joda.time.ReadableInstant readableInstant43 = null;
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.Duration duration45 = new org.joda.time.Duration(readableInstant43, readableInstant44);
        org.joda.time.Seconds seconds46 = duration45.toStandardSeconds();
        int int47 = seconds46.getSeconds();
        org.joda.time.Seconds seconds49 = seconds46.dividedBy(28);
        org.joda.time.Seconds seconds50 = seconds49.negated();
        org.joda.time.DurationFieldType durationFieldType51 = seconds50.getFieldType();
        boolean boolean52 = dateTimeParserBucket40.restoreState((java.lang.Object) durationFieldType51);
        java.util.Locale locale53 = dateTimeParserBucket40.getLocale();
        boolean boolean54 = locale53.hasExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale locale55 = localeList25.set((int) ' ', locale53);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 32, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(languageRangeArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(localeArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(localeList10);
        org.junit.Assert.assertNotNull(localeList12);
        org.junit.Assert.assertNotNull(languageRangeArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(languageRangeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(localeArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(localeList23);
        org.junit.Assert.assertNotNull(localeList25);
        org.junit.Assert.assertNotNull(localeList26);
        org.junit.Assert.assertTrue("'" + characteristics27 + "' != '" + java.util.stream.Collector.Characteristics.UNORDERED + "'", characteristics27.equals(java.util.stream.Collector.Characteristics.UNORDERED));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(localeItor29);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(seconds46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(seconds49);
        org.junit.Assert.assertNotNull(seconds50);
        org.junit.Assert.assertNotNull(durationFieldType51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "zh_CN");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test5268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5268");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Duration duration2 = new org.joda.time.Duration(readableInstant0, readableInstant1);
        org.joda.time.Duration duration4 = duration2.withMillis((-1L));
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((long) 3, chronology6);
        org.joda.time.DateTime.Property property8 = dateTime7.dayOfYear();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight((java.lang.Object) dateTime7, chronology9);
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight10.minusMonths((-1));
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight10.withDayOfYear((int) ' ');
        org.joda.time.PeriodType periodType15 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period16 = duration4.toPeriodFrom((org.joda.time.ReadableInstant) dateMidnight10, periodType15);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.Duration duration19 = new org.joda.time.Duration(readableInstant17, readableInstant18);
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.PeriodType periodType21 = null;
        org.joda.time.Period period22 = duration19.toPeriodTo(readableInstant20, periodType21);
        long long23 = duration19.getStandardSeconds();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((long) 3, chronology25);
        org.joda.time.DateTime.Property property27 = dateTime26.dayOfYear();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateMidnight dateMidnight29 = new org.joda.time.DateMidnight((java.lang.Object) dateTime26, chronology28);
        org.joda.time.DateMidnight dateMidnight31 = dateMidnight29.minusMonths((-1));
        org.joda.time.DateMidnight dateMidnight33 = dateMidnight29.withDayOfYear((int) ' ');
        org.joda.time.Interval interval34 = duration19.toIntervalTo((org.joda.time.ReadableInstant) dateMidnight33);
        org.joda.time.PeriodType periodType36 = org.joda.time.PeriodType.time();
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod((long) 'a', periodType36);
        org.joda.time.Period period38 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight10, (org.joda.time.ReadableDuration) duration19, periodType36);
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.Duration duration41 = new org.joda.time.Duration(readableInstant39, readableInstant40);
        org.joda.time.Seconds seconds42 = duration41.toStandardSeconds();
        int int43 = seconds42.getSeconds();
        org.joda.time.DateMidnight dateMidnight45 = dateMidnight10.withPeriodAdded((org.joda.time.ReadablePeriod) seconds42, 0);
        org.joda.time.ReadableInstant readableInstant46 = null;
        org.joda.time.MutableInterval mutableInterval47 = new org.joda.time.MutableInterval((org.joda.time.ReadablePeriod) seconds42, readableInstant46);
        org.joda.time.DateTime dateTime48 = mutableInterval47.getStart();
        org.joda.time.DateTime dateTime50 = dateTime48.plusHours((int) '/');
        int int51 = dateTime50.getYear();
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(periodType15);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateMidnight31);
        org.junit.Assert.assertNotNull(dateMidnight33);
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertNotNull(seconds42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(dateMidnight45);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 2022 + "'", int51 == 2022);
    }

    @Test
    public void test5269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5269");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Duration duration2 = new org.joda.time.Duration(readableInstant0, readableInstant1);
        org.joda.time.Duration duration4 = duration2.withMillis((-1L));
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((long) 3, chronology6);
        org.joda.time.DateTime.Property property8 = dateTime7.dayOfYear();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight((java.lang.Object) dateTime7, chronology9);
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight10.minusMonths((-1));
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight10.withDayOfYear((int) ' ');
        org.joda.time.PeriodType periodType15 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period16 = duration4.toPeriodFrom((org.joda.time.ReadableInstant) dateMidnight10, periodType15);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.Duration duration19 = new org.joda.time.Duration(readableInstant17, readableInstant18);
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.PeriodType periodType21 = null;
        org.joda.time.Period period22 = duration19.toPeriodTo(readableInstant20, periodType21);
        long long23 = duration19.getStandardSeconds();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((long) 3, chronology25);
        org.joda.time.DateTime.Property property27 = dateTime26.dayOfYear();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateMidnight dateMidnight29 = new org.joda.time.DateMidnight((java.lang.Object) dateTime26, chronology28);
        org.joda.time.DateMidnight dateMidnight31 = dateMidnight29.minusMonths((-1));
        org.joda.time.DateMidnight dateMidnight33 = dateMidnight29.withDayOfYear((int) ' ');
        org.joda.time.Interval interval34 = duration19.toIntervalTo((org.joda.time.ReadableInstant) dateMidnight33);
        org.joda.time.PeriodType periodType36 = org.joda.time.PeriodType.time();
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod((long) 'a', periodType36);
        org.joda.time.Period period38 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight10, (org.joda.time.ReadableDuration) duration19, periodType36);
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.Duration duration41 = new org.joda.time.Duration(readableInstant39, readableInstant40);
        org.joda.time.Seconds seconds42 = duration41.toStandardSeconds();
        int int43 = seconds42.getSeconds();
        org.joda.time.DateMidnight dateMidnight45 = dateMidnight10.withPeriodAdded((org.joda.time.ReadablePeriod) seconds42, 0);
        org.joda.time.ReadableInstant readableInstant46 = null;
        org.joda.time.MutableInterval mutableInterval47 = new org.joda.time.MutableInterval((org.joda.time.ReadablePeriod) seconds42, readableInstant46);
        org.joda.time.Duration duration48 = mutableInterval47.toDuration();
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime((long) 3, chronology50);
        org.joda.time.DateTime.Property property52 = dateTime51.dayOfYear();
        org.joda.time.DateTime dateTime53 = property52.roundHalfCeilingCopy();
        org.joda.time.PeriodType periodType54 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.PeriodType periodType55 = periodType54.withMillisRemoved();
        org.joda.time.Period period56 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration48, (org.joda.time.ReadableInstant) dateTime53, periodType54);
        java.net.InetAddress inetAddress57 = java.net.InetAddress.getLocalHost();
        boolean boolean58 = inetAddress57.isLoopbackAddress();
        boolean boolean59 = period56.equals((java.lang.Object) boolean58);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(periodType15);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateMidnight31);
        org.junit.Assert.assertNotNull(dateMidnight33);
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertNotNull(seconds42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(dateMidnight45);
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(periodType54);
        org.junit.Assert.assertNotNull(periodType55);
        org.junit.Assert.assertNotNull(inetAddress57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
    }

    @Test
    public void test5270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5270");
        org.joda.time.Period period0 = org.joda.time.Period.ZERO;
        org.joda.time.Period period1 = period0.toPeriod();
        org.joda.time.Period period2 = period0.toPeriod();
        org.junit.Assert.assertNotNull(period0);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period2);
    }

    @Test
    public void test5271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5271");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Duration duration2 = new org.joda.time.Duration(readableInstant0, readableInstant1);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = duration2.toPeriodTo(readableInstant3, periodType4);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.Duration duration8 = new org.joda.time.Duration(readableInstant6, readableInstant7);
        long long9 = duration8.getMillis();
        boolean boolean10 = duration2.isShorterThan((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) 3, chronology12);
        org.joda.time.DateTime.Property property14 = dateTime13.dayOfYear();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight((java.lang.Object) dateTime13, chronology15);
        org.joda.time.MutableDateTime mutableDateTime17 = dateTime13.toMutableDateTime();
        mutableDateTime17.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime17.dayOfWeek();
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime17.year();
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime17.weekyear();
        boolean boolean23 = duration2.equals((java.lang.Object) mutableDateTime17);
        mutableDateTime17.addMonths((int) ' ');
        mutableDateTime17.add((long) (byte) 10);
        org.joda.time.Period period28 = org.joda.time.Period.ZERO;
        org.joda.time.Period period29 = period28.normalizedStandard();
        org.joda.time.Period period31 = period28.plusHours(2);
        java.time.chrono.IsoEra isoEra32 = java.time.chrono.IsoEra.CE;
        boolean boolean33 = period31.equals((java.lang.Object) isoEra32);
        int int34 = period31.getMinutes();
        mutableDateTime17.add((org.joda.time.ReadablePeriod) period31);
        java.util.TimeZone timeZone37 = null;
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forTimeZone(timeZone37);
        org.joda.time.DateMidnight dateMidnight39 = new org.joda.time.DateMidnight((long) 1970, dateTimeZone38);
        long long42 = dateTimeZone38.convertLocalToUTC((long) 3, false);
        long long45 = dateTimeZone38.convertLocalToUTC(0L, true);
        mutableDateTime17.setZoneRetainFields(dateTimeZone38);
        java.lang.String str47 = dateTimeZone38.toString();
        org.joda.time.chrono.EthiopicChronology ethiopicChronology48 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone38);
        org.joda.time.DateTimeField dateTimeField49 = ethiopicChronology48.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone50 = ethiopicChronology48.getZone();
        org.joda.time.DateTimeField dateTimeField51 = ethiopicChronology48.era();
        org.joda.time.DateTimeField dateTimeField52 = ethiopicChronology48.secondOfDay();
        org.joda.time.DateTimeField dateTimeField53 = ethiopicChronology48.minuteOfHour();
        org.joda.time.DurationField durationField54 = ethiopicChronology48.months();
        org.joda.time.DateTimeField dateTimeField55 = ethiopicChronology48.weekyearOfCentury();
        org.joda.time.Minutes minutes56 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes58 = minutes56.minus(12);
        org.joda.time.Minutes minutes59 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes61 = minutes59.minus(12);
        org.joda.time.Minutes minutes62 = minutes56.minus(minutes59);
        org.joda.time.DurationFieldType durationFieldType63 = minutes56.getFieldType();
        int[] intArray66 = ethiopicChronology48.get((org.joda.time.ReadablePeriod) minutes56, (long) 30, (long) 741000000);
        org.joda.time.DateTimeField dateTimeField67 = ethiopicChronology48.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone68 = ethiopicChronology48.getZone();
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertTrue("'" + isoEra32 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra32.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 3L + "'", long42 == 3L);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Etc/UTC" + "'", str47, "Etc/UTC");
        org.junit.Assert.assertNotNull(ethiopicChronology48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(durationField54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(minutes56);
        org.junit.Assert.assertNotNull(minutes58);
        org.junit.Assert.assertNotNull(minutes59);
        org.junit.Assert.assertNotNull(minutes61);
        org.junit.Assert.assertNotNull(minutes62);
        org.junit.Assert.assertNotNull(durationFieldType63);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[12349]");
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(dateTimeZone68);
    }

    @Test
    public void test5272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5272");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 3, chronology1);
        org.joda.time.DateTime.Property property3 = dateTime2.dayOfYear();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight((java.lang.Object) dateTime2, chronology4);
        org.joda.time.MutableDateTime mutableDateTime6 = dateTime2.toMutableDateTime();
        mutableDateTime6.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime6.dayOfWeek();
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime6.year();
        java.util.TimeZone timeZone11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        mutableDateTime6.setZone(dateTimeZone12);
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime6.minuteOfHour();
        org.joda.time.MutableDateTime mutableDateTime15 = property14.roundHalfCeiling();
        org.joda.time.MutableDateTime.Property property16 = mutableDateTime15.weekyear();
        int int17 = property16.get();
        org.joda.time.MutableDateTime mutableDateTime18 = property16.roundHalfFloor();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2070 + "'", int17 == 2070);
        org.junit.Assert.assertNotNull(mutableDateTime18);
    }

    @Test
    public void test5273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5273");
        java.util.GregorianCalendar gregorianCalendar5 = new java.util.GregorianCalendar(12, 4096, 7, (-1), (int) (short) 10);
        int int6 = gregorianCalendar5.getWeeksInWeekYear();
        java.lang.String str7 = gregorianCalendar5.getCalendarType();
        java.time.ZonedDateTime zonedDateTime8 = gregorianCalendar5.toZonedDateTime();
        java.time.ZonedDateTime zonedDateTime10 = zonedDateTime8.minusMonths((long) 10);
        java.time.ZonedDateTime zonedDateTime12 = zonedDateTime10.minusHours((long) 9);
        java.time.ZoneOffset zoneOffset13 = zonedDateTime10.getOffset();
        java.time.ZoneOffset zoneOffset14 = zonedDateTime10.getOffset();
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 52 + "'", int6 == 52);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "gregory" + "'", str7, "gregory");
        org.junit.Assert.assertNotNull(zonedDateTime8);
        org.junit.Assert.assertNotNull(zonedDateTime10);
        org.junit.Assert.assertNotNull(zonedDateTime12);
        org.junit.Assert.assertNotNull(zoneOffset13);
        org.junit.Assert.assertNotNull(zoneOffset14);
    }

    @Test
    public void test5274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5274");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 3, chronology1);
        org.joda.time.DateTime.Property property3 = dateTime2.dayOfYear();
        org.joda.time.DateTime.Property property4 = dateTime2.dayOfYear();
        org.joda.time.DateTime dateTime5 = property4.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime7 = property4.addToCopy((long) 576);
        org.joda.time.DateTime dateTime9 = dateTime7.minusYears(1728000);
        int int10 = dateTime7.getMinuteOfDay();
        org.joda.time.LocalDateTime localDateTime11 = dateTime7.toLocalDateTime();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(localDateTime11);
    }

    @Test
    public void test5275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5275");
        java.util.Hashtable<java.io.Writer, java.time.chrono.IsoChronology> writerMap1 = new java.util.Hashtable<java.io.Writer, java.time.chrono.IsoChronology>(2098);
    }

    @Test
    public void test5276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5276");
        float[] floatArray2 = new float[] { (-1L), (byte) -1 };
        java.nio.FloatBuffer floatBuffer3 = java.nio.FloatBuffer.wrap(floatArray2);
        java.nio.FloatBuffer floatBuffer4 = floatBuffer3.compact();
        java.nio.FloatBuffer floatBuffer5 = floatBuffer3.asReadOnlyBuffer();
        java.nio.ByteOrder byteOrder6 = floatBuffer3.order();
        float[] floatArray9 = new float[] { (-1L), (byte) -1 };
        java.nio.FloatBuffer floatBuffer10 = java.nio.FloatBuffer.wrap(floatArray9);
        float[] floatArray13 = new float[] { (-1L), (byte) -1 };
        java.nio.FloatBuffer floatBuffer14 = java.nio.FloatBuffer.wrap(floatArray13);
        java.nio.FloatBuffer floatBuffer15 = floatBuffer14.compact();
        boolean boolean16 = floatBuffer15.isDirect();
        int int17 = floatBuffer15.limit();
        java.nio.FloatBuffer floatBuffer18 = floatBuffer10.put(floatBuffer15);
        int int19 = floatBuffer15.arrayOffset();
        java.lang.String str20 = floatBuffer15.toString();
        int int21 = floatBuffer15.arrayOffset();
        int int22 = floatBuffer3.compareTo(floatBuffer15);
        // The following exception was thrown during execution in test generation
        try {
            float float23 = floatBuffer3.get();
            org.junit.Assert.fail("Expected exception of type java.nio.BufferUnderflowException; message: null");
        } catch (java.nio.BufferUnderflowException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[-1.0, -1.0]");
        org.junit.Assert.assertNotNull(floatBuffer3);
        org.junit.Assert.assertNotNull(floatBuffer4);
        org.junit.Assert.assertNotNull(floatBuffer5);
        org.junit.Assert.assertNotNull(byteOrder6);
        org.junit.Assert.assertNotNull(floatArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray9), "[-1.0, -1.0]");
        org.junit.Assert.assertNotNull(floatBuffer10);
        org.junit.Assert.assertNotNull(floatArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray13), "[-1.0, -1.0]");
        org.junit.Assert.assertNotNull(floatBuffer14);
        org.junit.Assert.assertNotNull(floatBuffer15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertNotNull(floatBuffer18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "java.nio.HeapFloatBuffer[pos=2 lim=2 cap=2]" + "'", str20, "java.nio.HeapFloatBuffer[pos=2 lim=2 cap=2]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
    }

    @Test
    public void test5277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5277");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 3, chronology1);
        org.joda.time.Period period3 = org.joda.time.Period.ZERO;
        org.joda.time.Period period4 = period3.normalizedStandard();
        org.joda.time.Period period6 = period4.minusMinutes((int) ' ');
        org.joda.time.Period period8 = period6.minusMonths((int) (byte) 0);
        org.joda.time.PeriodType periodType9 = period8.getPeriodType();
        org.joda.time.DateTime dateTime10 = dateTime2.minus((org.joda.time.ReadablePeriod) period8);
        org.joda.time.DateTime dateTime12 = dateTime2.plusHours(34);
        int int13 = dateTime2.getDayOfMonth();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime17 = dateTime2.withDate(680, 41, 23);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 41 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
    }

    @Test
    public void test5278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5278");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 3, chronology1);
        org.joda.time.DateTime.Property property3 = dateTime2.dayOfYear();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight((java.lang.Object) dateTime2, chronology4);
        org.joda.time.MutableDateTime mutableDateTime6 = dateTime2.toMutableDateTime();
        mutableDateTime6.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime6.millisOfDay();
        org.joda.time.PeriodType periodType10 = org.joda.time.PeriodType.years();
        org.joda.time.DurationFieldType durationFieldType11 = org.joda.time.DurationFieldType.halfdays();
        int int12 = periodType10.indexOf(durationFieldType11);
        mutableDateTime6.add(durationFieldType11, (int) 'a');
        java.util.TimeZone timeZone16 = null;
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forTimeZone(timeZone16);
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight((long) 1970, dateTimeZone17);
        mutableDateTime6.setTime((org.joda.time.ReadableInstant) dateMidnight18);
        org.joda.time.DateMidnight.Property property20 = dateMidnight18.weekOfWeekyear();
        org.joda.time.DateMidnight dateMidnight21 = property20.roundHalfFloorCopy();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertNotNull(durationFieldType11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateMidnight21);
    }

    @Test
    public void test5279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5279");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) 3, chronology2);
        org.joda.time.DateTime.Property property4 = dateTime3.dayOfYear();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateMidnight dateMidnight6 = new org.joda.time.DateMidnight((java.lang.Object) dateTime3, chronology5);
        org.joda.time.MutableDateTime mutableDateTime7 = dateTime3.toMutableDateTime();
        mutableDateTime7.addYears((int) (short) 100);
        org.joda.time.Period period10 = org.joda.time.Period.ZERO;
        org.joda.time.TimeOfDay timeOfDay12 = org.joda.time.TimeOfDay.fromMillisOfDay((long) (short) 0);
        org.joda.time.TimeOfDay timeOfDay14 = org.joda.time.TimeOfDay.fromMillisOfDay((long) (short) 0);
        org.joda.time.Hours hours15 = org.joda.time.Hours.hoursBetween((org.joda.time.ReadablePartial) timeOfDay12, (org.joda.time.ReadablePartial) timeOfDay14);
        org.joda.time.DurationFieldType durationFieldType16 = org.joda.time.DurationFieldType.hours();
        org.joda.time.TimeOfDay timeOfDay18 = timeOfDay14.withFieldAdded(durationFieldType16, (int) (byte) 0);
        org.joda.time.Period period20 = period10.withFieldAdded(durationFieldType16, 4);
        mutableDateTime7.add((org.joda.time.ReadablePeriod) period10);
        mutableDateTime7.addMonths(1970);
        mutableDateTime7.setDate(4096, 10, 19);
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.Duration duration30 = new org.joda.time.Duration(readableInstant28, readableInstant29);
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.PeriodType periodType32 = null;
        org.joda.time.Period period33 = duration30.toPeriodTo(readableInstant31, periodType32);
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.Duration duration36 = new org.joda.time.Duration(readableInstant34, readableInstant35);
        long long37 = duration36.getMillis();
        boolean boolean38 = duration30.isShorterThan((org.joda.time.ReadableDuration) duration36);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime((long) 3, chronology40);
        org.joda.time.DateTime.Property property42 = dateTime41.dayOfYear();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.DateMidnight dateMidnight44 = new org.joda.time.DateMidnight((java.lang.Object) dateTime41, chronology43);
        org.joda.time.MutableDateTime mutableDateTime45 = dateTime41.toMutableDateTime();
        mutableDateTime45.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property48 = mutableDateTime45.dayOfWeek();
        org.joda.time.MutableDateTime.Property property49 = mutableDateTime45.year();
        org.joda.time.MutableDateTime.Property property50 = mutableDateTime45.weekyear();
        boolean boolean51 = duration30.equals((java.lang.Object) mutableDateTime45);
        mutableDateTime45.addMonths((int) ' ');
        mutableDateTime45.add((long) (byte) 10);
        org.joda.time.Period period56 = org.joda.time.Period.ZERO;
        org.joda.time.Period period57 = period56.normalizedStandard();
        org.joda.time.Period period59 = period56.plusHours(2);
        java.time.chrono.IsoEra isoEra60 = java.time.chrono.IsoEra.CE;
        boolean boolean61 = period59.equals((java.lang.Object) isoEra60);
        int int62 = period59.getMinutes();
        mutableDateTime45.add((org.joda.time.ReadablePeriod) period59);
        java.util.TimeZone timeZone65 = null;
        org.joda.time.DateTimeZone dateTimeZone66 = org.joda.time.DateTimeZone.forTimeZone(timeZone65);
        org.joda.time.DateMidnight dateMidnight67 = new org.joda.time.DateMidnight((long) 1970, dateTimeZone66);
        long long70 = dateTimeZone66.convertLocalToUTC((long) 3, false);
        long long73 = dateTimeZone66.convertLocalToUTC(0L, true);
        mutableDateTime45.setZoneRetainFields(dateTimeZone66);
        java.lang.String str75 = dateTimeZone66.toString();
        org.joda.time.chrono.EthiopicChronology ethiopicChronology76 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone66);
        org.joda.time.DateTimeField dateTimeField77 = ethiopicChronology76.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone78 = ethiopicChronology76.getZone();
        org.joda.time.DateTimeField dateTimeField79 = ethiopicChronology76.era();
        org.joda.time.DateTimeField dateTimeField80 = ethiopicChronology76.millisOfDay();
        org.joda.time.LocalTime localTime81 = org.joda.time.LocalTime.now((org.joda.time.Chronology) ethiopicChronology76);
        org.joda.time.DateTimeZone dateTimeZone82 = ethiopicChronology76.getZone();
        mutableDateTime7.setZone(dateTimeZone82);
        org.joda.time.LocalTime localTime84 = new org.joda.time.LocalTime((-14647L), dateTimeZone82);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(timeOfDay12);
        org.junit.Assert.assertNotNull(timeOfDay14);
        org.junit.Assert.assertNotNull(hours15);
        org.junit.Assert.assertNotNull(durationFieldType16);
        org.junit.Assert.assertNotNull(timeOfDay18);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(mutableDateTime45);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertNotNull(period59);
        org.junit.Assert.assertTrue("'" + isoEra60 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra60.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone66);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 3L + "'", long70 == 3L);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 0L + "'", long73 == 0L);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "Etc/UTC" + "'", str75, "Etc/UTC");
        org.junit.Assert.assertNotNull(ethiopicChronology76);
        org.junit.Assert.assertNotNull(dateTimeField77);
        org.junit.Assert.assertNotNull(dateTimeZone78);
        org.junit.Assert.assertNotNull(dateTimeField79);
        org.junit.Assert.assertNotNull(dateTimeField80);
        org.junit.Assert.assertNotNull(localTime81);
        org.junit.Assert.assertNotNull(dateTimeZone82);
    }

    @Test
    public void test5280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5280");
        java.io.IOException iOException1 = new java.io.IOException("Feb 21, 2022 9:39:00 AM");
    }

    @Test
    public void test5281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5281");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((long) 0, chronology4);
        org.joda.time.Chronology chronology6 = localTime5.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.weekyearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.weekyears();
        org.joda.time.TimeOfDay timeOfDay9 = new org.joda.time.TimeOfDay(8, 20, (int) '+', chronology6);
        org.joda.time.TimeOfDay timeOfDay11 = timeOfDay9.minusHours(6);
        org.joda.time.TimeOfDay timeOfDay13 = timeOfDay11.plusMillis(42);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(timeOfDay11);
        org.junit.Assert.assertNotNull(timeOfDay13);
    }

    @Test
    public void test5282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5282");
        java.time.OffsetDateTime offsetDateTime0 = java.time.OffsetDateTime.now();
        java.time.LocalDate localDate2 = java.time.LocalDate.ofEpochDay((long) ' ');
        int int3 = localDate2.getMonthValue();
        org.joda.time.Period period4 = org.joda.time.Period.ZERO;
        org.joda.time.Period period5 = period4.normalizedStandard();
        org.joda.time.Period period7 = period4.plusHours(2);
        java.time.chrono.IsoEra isoEra8 = java.time.chrono.IsoEra.CE;
        boolean boolean9 = period7.equals((java.lang.Object) isoEra8);
        java.time.LocalTime localTime14 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime15 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime14);
        java.time.LocalTime localTime20 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime21 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime20);
        java.time.temporal.ChronoField chronoField22 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime24 = localTime20.with((java.time.temporal.TemporalField) chronoField22, (long) (short) 1);
        long long25 = localTime14.getLong((java.time.temporal.TemporalField) chronoField22);
        boolean boolean26 = isoEra8.isSupported((java.time.temporal.TemporalField) chronoField22);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery27 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period28 = isoEra8.query(periodTemporalQuery27);
        boolean boolean29 = period28.isNegative();
        java.time.Period period31 = period28.plusDays((long) ' ');
        java.time.temporal.ChronoField chronoField32 = java.time.temporal.ChronoField.SECOND_OF_DAY;
        boolean boolean33 = period28.equals((java.lang.Object) chronoField32);
        boolean boolean34 = localDate2.isSupported((java.time.temporal.TemporalField) chronoField32);
        boolean boolean35 = offsetDateTime0.isSupported((java.time.temporal.TemporalField) chronoField32);
        java.time.OffsetDateTime offsetDateTime37 = offsetDateTime0.minusMonths((long) 16);
        java.time.OffsetDateTime offsetDateTime39 = offsetDateTime0.withNano(306);
        java.util.GregorianCalendar gregorianCalendar45 = new java.util.GregorianCalendar(12, 4096, 7, (-1), (int) (short) 10);
        int int46 = gregorianCalendar45.getWeeksInWeekYear();
        java.util.TimeZone timeZone47 = gregorianCalendar45.getTimeZone();
        java.time.ZoneId zoneId48 = timeZone47.toZoneId();
        java.time.zone.ZoneRules zoneRules49 = zoneId48.getRules();
        java.time.Instant instant50 = java.time.Instant.EPOCH;
        java.time.Instant instant51 = java.time.Instant.now();
        java.time.Instant instant52 = java.time.Instant.now();
        boolean boolean53 = instant51.isAfter(instant52);
        java.time.Duration duration54 = java.time.Duration.ZERO;
        java.time.Instant instant55 = instant52.minus((java.time.temporal.TemporalAmount) duration54);
        boolean boolean56 = instant50.isAfter(instant55);
        java.time.Duration duration57 = zoneRules49.getDaylightSavings(instant55);
        java.util.GregorianCalendar gregorianCalendar63 = new java.util.GregorianCalendar(12, 4096, 7, (-1), (int) (short) 10);
        int int64 = gregorianCalendar63.getWeeksInWeekYear();
        java.lang.String str65 = gregorianCalendar63.getCalendarType();
        java.time.ZonedDateTime zonedDateTime66 = gregorianCalendar63.toZonedDateTime();
        java.time.Instant instant67 = gregorianCalendar63.toInstant();
        java.time.zone.ZoneOffsetTransition zoneOffsetTransition68 = zoneRules49.previousTransition(instant67);
        boolean boolean69 = offsetDateTime39.equals((java.lang.Object) zoneOffsetTransition68);
        org.junit.Assert.assertNotNull(offsetDateTime0);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2 + "'", int3 == 2);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertTrue("'" + isoEra8 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra8.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertTrue("'" + chronoField22 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField22.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime24);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 3601000000001L + "'", long25 == 3601000000001L);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(periodTemporalQuery27);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertTrue("'" + chronoField32 + "' != '" + java.time.temporal.ChronoField.SECOND_OF_DAY + "'", chronoField32.equals(java.time.temporal.ChronoField.SECOND_OF_DAY));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(offsetDateTime37);
        org.junit.Assert.assertNotNull(offsetDateTime39);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 52 + "'", int46 == 52);
        org.junit.Assert.assertNotNull(timeZone47);
// flaky:         org.junit.Assert.assertEquals(timeZone47.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(zoneId48);
        org.junit.Assert.assertNotNull(zoneRules49);
        org.junit.Assert.assertNotNull(instant50);
        org.junit.Assert.assertNotNull(instant51);
        org.junit.Assert.assertNotNull(instant52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertNotNull(instant55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(duration57);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 52 + "'", int64 == 52);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "gregory" + "'", str65, "gregory");
        org.junit.Assert.assertNotNull(zonedDateTime66);
        org.junit.Assert.assertNotNull(instant67);
        org.junit.Assert.assertNull(zoneOffsetTransition68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
    }

    @Test
    public void test5283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5283");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((long) 0, chronology2);
        org.joda.time.Chronology chronology4 = localTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField5 = chronology4.weekyearOfCentury();
        org.joda.time.DurationField durationField6 = chronology4.weekyears();
        org.joda.time.DurationField durationField7 = chronology4.seconds();
        org.joda.time.LocalTime localTime8 = org.joda.time.LocalTime.fromMillisOfDay((long) (byte) 0, chronology4);
        org.joda.time.LocalTime.Property property9 = localTime8.millisOfSecond();
        org.joda.time.LocalTime localTime10 = property9.roundFloorCopy();
        org.joda.time.LocalTime localTime12 = property9.addNoWrapToCopy(0);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localTime12);
    }

    @Test
    public void test5284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5284");
        java.util.Locale locale0 = java.util.Locale.KOREA;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str2 = locale0.getUnicodeLocaleType("java.util.GregorianCalendar[time=1645436066701,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=Etc/UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=34,SECOND=26,MILLISECOND=701,ZONE_OFFSET=0,DST_OFFSET=0]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed Unicode locale key: java.util.GregorianCalendar[time=1645436066701,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=Etc/UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=34,SECOND=26,MILLISECOND=701,ZONE_OFFSET=0,DST_OFFSET=0]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko_KR");
    }

    @Test
    public void test5285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5285");
        java.io.File file0 = null;
        java.io.File file2 = new java.io.File(file0, "1970-01-01T00:00:00.003Z");
        java.net.URL uRL3 = file2.toURL();
        boolean boolean4 = file2.canRead();
        java.nio.file.Path path5 = file2.toPath();
        java.nio.file.Path path6 = path5.toAbsolutePath();
        java.io.File file7 = null;
        java.io.File file9 = new java.io.File(file7, "1970-01-01T00:00:00.003Z");
        java.net.URL uRL10 = file9.toURL();
        boolean boolean11 = file9.canRead();
        java.nio.file.Path path12 = file9.toPath();
        java.nio.file.Path path13 = path12.toAbsolutePath();
        java.io.File file14 = path13.toFile();
        boolean boolean15 = path5.endsWith(path13);
        java.util.Iterator<java.nio.file.Path> pathItor16 = path5.iterator();
        boolean boolean18 = path5.startsWith("BIG_ENDIAN");
        boolean boolean19 = path5.isAbsolute();
        org.junit.Assert.assertNull("file2.getParent() == null", file2.getParent());
        org.junit.Assert.assertEquals(file2.toString(), "1970-01-01T00:00:00.003Z");
        org.junit.Assert.assertNotNull(uRL3);
// flaky:         org.junit.Assert.assertEquals(uRL3.toString(), "file:/experiment/1970-01-01T00:00:00.003Z");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(path5);
        org.junit.Assert.assertNotNull(path6);
        org.junit.Assert.assertNull("file9.getParent() == null", file9.getParent());
        org.junit.Assert.assertEquals(file9.toString(), "1970-01-01T00:00:00.003Z");
        org.junit.Assert.assertNotNull(uRL10);
// flaky:         org.junit.Assert.assertEquals(uRL10.toString(), "file:/experiment/1970-01-01T00:00:00.003Z");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(path12);
        org.junit.Assert.assertNotNull(path13);
        org.junit.Assert.assertNotNull(file14);
// flaky:         org.junit.Assert.assertEquals(file14.getParent(), "/experiment");
// flaky:         org.junit.Assert.assertEquals(file14.toString(), "/experiment/1970-01-01T00:00:00.003Z");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(pathItor16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test5286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5286");
        java.time.Clock clock0 = java.time.Clock.systemUTC();
        java.time.Duration duration2 = java.time.Duration.ofSeconds((long) 256);
        java.time.Clock clock3 = java.time.Clock.tick(clock0, duration2);
        java.time.Duration duration5 = java.time.Duration.ofMinutes((long) 3);
        java.time.Duration duration6 = duration5.abs();
        java.time.Clock clock7 = java.time.Clock.offset(clock0, duration5);
        java.time.Instant instant8 = java.time.Instant.now();
        java.time.Instant instant9 = java.time.Instant.now();
        boolean boolean10 = instant8.isAfter(instant9);
        java.time.Duration duration11 = java.time.Duration.ZERO;
        java.time.Instant instant12 = instant9.minus((java.time.temporal.TemporalAmount) duration11);
        java.time.Duration duration13 = duration5.minus(duration11);
        org.junit.Assert.assertNotNull(clock0);
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertNotNull(clock3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(clock7);
        org.junit.Assert.assertNotNull(instant8);
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(instant12);
        org.junit.Assert.assertNotNull(duration13);
    }

    @Test
    public void test5287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5287");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Duration duration2 = new org.joda.time.Duration(readableInstant0, readableInstant1);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = duration2.toPeriodTo(readableInstant3, periodType4);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.Duration duration8 = new org.joda.time.Duration(readableInstant6, readableInstant7);
        long long9 = duration8.getMillis();
        boolean boolean10 = duration2.isShorterThan((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) 3, chronology12);
        org.joda.time.DateTime.Property property14 = dateTime13.dayOfYear();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight((java.lang.Object) dateTime13, chronology15);
        org.joda.time.MutableDateTime mutableDateTime17 = dateTime13.toMutableDateTime();
        mutableDateTime17.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime17.dayOfWeek();
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime17.year();
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime17.weekyear();
        boolean boolean23 = duration2.equals((java.lang.Object) mutableDateTime17);
        mutableDateTime17.addMonths((int) ' ');
        mutableDateTime17.add((long) (byte) 10);
        org.joda.time.Period period28 = org.joda.time.Period.ZERO;
        org.joda.time.Period period29 = period28.normalizedStandard();
        org.joda.time.Period period31 = period28.plusHours(2);
        java.time.chrono.IsoEra isoEra32 = java.time.chrono.IsoEra.CE;
        boolean boolean33 = period31.equals((java.lang.Object) isoEra32);
        int int34 = period31.getMinutes();
        mutableDateTime17.add((org.joda.time.ReadablePeriod) period31);
        java.util.TimeZone timeZone37 = null;
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forTimeZone(timeZone37);
        org.joda.time.DateMidnight dateMidnight39 = new org.joda.time.DateMidnight((long) 1970, dateTimeZone38);
        long long42 = dateTimeZone38.convertLocalToUTC((long) 3, false);
        long long45 = dateTimeZone38.convertLocalToUTC(0L, true);
        mutableDateTime17.setZoneRetainFields(dateTimeZone38);
        java.lang.String str47 = dateTimeZone38.toString();
        org.joda.time.chrono.EthiopicChronology ethiopicChronology48 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone38);
        org.joda.time.DateTimeField dateTimeField49 = ethiopicChronology48.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone50 = ethiopicChronology48.getZone();
        org.joda.time.DateTimeField dateTimeField51 = ethiopicChronology48.centuryOfEra();
        org.joda.time.DurationField durationField52 = ethiopicChronology48.weeks();
        long long56 = ethiopicChronology48.add((long) 101, 34642346000000L, (-2));
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertTrue("'" + isoEra32 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra32.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 3L + "'", long42 == 3L);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Etc/UTC" + "'", str47, "Etc/UTC");
        org.junit.Assert.assertNotNull(ethiopicChronology48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(durationField52);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + (-69284691999899L) + "'", long56 == (-69284691999899L));
    }

    @Test
    public void test5288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5288");
        java.io.File file0 = null;
        java.io.File file2 = new java.io.File(file0, "1970-01-01T00:00:00.003Z");
        java.net.URL uRL3 = file2.toURL();
        boolean boolean4 = file2.canRead();
        java.nio.file.Path path5 = file2.toPath();
        java.nio.file.Path path7 = path5.resolve("German");
        java.nio.file.WatchService watchService8 = null;
        java.nio.file.WatchEvent.Kind<?> wildcardKind9 = null;
        java.nio.file.WatchEvent.Kind[] kindArray11 = new java.nio.file.WatchEvent.Kind[1];
        @SuppressWarnings("unchecked")
        java.nio.file.WatchEvent.Kind<?>[] wildcardKindArray12 = (java.nio.file.WatchEvent.Kind<?>[]) kindArray11;
        wildcardKindArray12[0] = wildcardKind9;
        // The following exception was thrown during execution in test generation
        try {
            java.nio.file.WatchKey watchKey15 = path7.register(watchService8, wildcardKindArray12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull("file2.getParent() == null", file2.getParent());
        org.junit.Assert.assertEquals(file2.toString(), "1970-01-01T00:00:00.003Z");
        org.junit.Assert.assertNotNull(uRL3);
// flaky:         org.junit.Assert.assertEquals(uRL3.toString(), "file:/experiment/1970-01-01T00:00:00.003Z");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(path5);
        org.junit.Assert.assertNotNull(path7);
        org.junit.Assert.assertNotNull(kindArray11);
        org.junit.Assert.assertNotNull(wildcardKindArray12);
    }

    @Test
    public void test5289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5289");
        org.joda.time.Period period1 = org.joda.time.Period.days(2147483647);
        org.joda.time.Period period3 = period1.minusMonths((int) 'x');
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
    }

    @Test
    public void test5290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5290");
        int[] intArray6 = new int[] { 3600000, 3600000, 256, 21, (byte) 100, (short) -1 };
        java.util.stream.IntStream intStream7 = java.util.stream.IntStream.of(intArray6);
        java.util.stream.IntStream intStream8 = intStream7.parallel();
        java.util.stream.IntStream intStream9 = intStream8.parallel();
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[3600000, 3600000, 256, 21, 100, -1]");
        org.junit.Assert.assertNotNull(intStream7);
        org.junit.Assert.assertNotNull(intStream8);
        org.junit.Assert.assertNotNull(intStream9);
    }

    @Test
    public void test5291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5291");
        java.time.OffsetTime offsetTime0 = java.time.OffsetTime.MAX;
        java.time.LocalTime localTime1 = offsetTime0.toLocalTime();
        java.time.LocalTime localTime6 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime7 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime6);
        java.time.LocalTime localTime12 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime13 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime12);
        java.time.temporal.ChronoField chronoField14 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime16 = localTime12.with((java.time.temporal.TemporalField) chronoField14, (long) (short) 1);
        long long17 = localTime6.getLong((java.time.temporal.TemporalField) chronoField14);
        java.time.LocalTime localTime19 = localTime6.withSecond((int) (short) 1);
        int int20 = localTime19.getMinute();
        java.time.LocalTime localTime22 = localTime19.plusHours((long) (-1));
        java.time.OffsetTime offsetTime23 = offsetTime0.with((java.time.temporal.TemporalAdjuster) localTime19);
        java.time.OffsetTime offsetTime25 = offsetTime0.minusHours((long) 3);
        java.time.OffsetTime offsetTime27 = offsetTime0.minusMinutes((long) 101);
        java.time.LocalDateTime localDateTime29 = java.time.LocalDateTime.now();
        java.time.LocalDateTime localDateTime31 = localDateTime29.minusYears((long) (byte) 10);
        java.time.LocalDateTime localDateTime32 = java.time.LocalDateTime.now();
        java.time.LocalDateTime localDateTime34 = localDateTime32.minusYears((long) (byte) 10);
        boolean boolean35 = localDateTime29.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime34);
        java.time.LocalDateTime localDateTime37 = localDateTime34.withSecond((int) '+');
        java.time.LocalDateTime localDateTime39 = localDateTime37.minusWeeks((long) 57);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime((long) 3, chronology41);
        org.joda.time.DateTime.Property property43 = dateTime42.dayOfYear();
        org.joda.time.Interval interval44 = property43.toInterval();
        org.joda.time.Period period45 = org.joda.time.Period.ZERO;
        org.joda.time.Period period46 = period45.normalizedStandard();
        org.joda.time.Period period48 = period46.minusMinutes((int) ' ');
        org.joda.time.Period period50 = period48.withMinutes(32769);
        boolean boolean51 = interval44.equals((java.lang.Object) period50);
        boolean boolean52 = localDateTime39.equals((java.lang.Object) boolean51);
        java.nio.file.attribute.FileTime fileTime54 = java.nio.file.attribute.FileTime.fromMillis((long) 21);
        java.time.Instant instant55 = fileTime54.toInstant();
        java.util.GregorianCalendar gregorianCalendar62 = new java.util.GregorianCalendar(12, 4096, 7, (-1), (int) (short) 10);
        int int63 = gregorianCalendar62.getWeeksInWeekYear();
        java.lang.String str64 = gregorianCalendar62.getCalendarType();
        java.time.ZonedDateTime zonedDateTime65 = gregorianCalendar62.toZonedDateTime();
        java.time.ZonedDateTime zonedDateTime67 = zonedDateTime65.minusMonths((long) 10);
        java.time.OffsetDateTime offsetDateTime68 = zonedDateTime67.toOffsetDateTime();
        java.time.ZoneOffset zoneOffset72 = java.time.ZoneOffset.ofHoursMinutes(1, 10);
        java.time.temporal.ChronoField chronoField73 = java.time.temporal.ChronoField.HOUR_OF_DAY;
        java.time.temporal.ValueRange valueRange74 = chronoField73.range();
        boolean boolean75 = zoneOffset72.isSupported((java.time.temporal.TemporalField) chronoField73);
        java.time.temporal.TemporalUnit temporalUnit76 = chronoField73.getBaseUnit();
        java.time.OffsetDateTime offsetDateTime77 = offsetDateTime68.plus((long) 'u', temporalUnit76);
        java.time.Instant instant78 = instant55.minus((long) 78000000, temporalUnit76);
        boolean boolean79 = localDateTime39.isSupported(temporalUnit76);
        java.time.temporal.Temporal temporal80 = offsetTime0.minus((long) 23, temporalUnit76);
        org.junit.Assert.assertNotNull(offsetTime0);
        org.junit.Assert.assertNotNull(localTime1);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertTrue("'" + chronoField14 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField14.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 3601000000001L + "'", long17 == 3601000000001L);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertNotNull(offsetTime23);
        org.junit.Assert.assertNotNull(offsetTime25);
        org.junit.Assert.assertNotNull(offsetTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(interval44);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(fileTime54);
        org.junit.Assert.assertNotNull(instant55);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 52 + "'", int63 == 52);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "gregory" + "'", str64, "gregory");
        org.junit.Assert.assertNotNull(zonedDateTime65);
        org.junit.Assert.assertNotNull(zonedDateTime67);
        org.junit.Assert.assertNotNull(offsetDateTime68);
        org.junit.Assert.assertNotNull(zoneOffset72);
        org.junit.Assert.assertTrue("'" + chronoField73 + "' != '" + java.time.temporal.ChronoField.HOUR_OF_DAY + "'", chronoField73.equals(java.time.temporal.ChronoField.HOUR_OF_DAY));
        org.junit.Assert.assertNotNull(valueRange74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + temporalUnit76 + "' != '" + java.time.temporal.ChronoUnit.HOURS + "'", temporalUnit76.equals(java.time.temporal.ChronoUnit.HOURS));
        org.junit.Assert.assertNotNull(offsetDateTime77);
        org.junit.Assert.assertNotNull(instant78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(temporal80);
    }

    @Test
    public void test5292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5292");
        java.util.Set<java.lang.String> strSet0 = java.time.ZoneId.getAvailableZoneIds();
        java.util.stream.Stream<java.lang.String> strStream1 = strSet0.parallelStream();
        java.lang.Object[] objArray2 = strSet0.toArray();
        java.util.Spliterator<java.lang.String> strSpliterator3 = strSet0.spliterator();
        java.util.Set<java.lang.String> strSet4 = java.time.ZoneId.getAvailableZoneIds();
        java.util.stream.Stream<java.lang.String> strStream5 = strSet4.parallelStream();
        boolean boolean7 = strSet4.remove((java.lang.Object) 0);
        java.time.LocalTime localTime12 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime13 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime12);
        java.time.LocalTime localTime18 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime19 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime18);
        java.time.temporal.ChronoField chronoField20 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime22 = localTime18.with((java.time.temporal.TemporalField) chronoField20, (long) (short) 1);
        long long23 = localTime12.getLong((java.time.temporal.TemporalField) chronoField20);
        java.time.LocalTime localTime25 = localTime12.withSecond((int) (short) 1);
        java.time.temporal.ChronoField chronoField26 = java.time.temporal.ChronoField.SECOND_OF_DAY;
        java.time.temporal.ValueRange valueRange27 = localTime25.range((java.time.temporal.TemporalField) chronoField26);
        boolean boolean28 = strSet4.remove((java.lang.Object) chronoField26);
        boolean boolean29 = strSet0.retainAll((java.util.Collection<java.lang.String>) strSet4);
        java.util.Spliterator<java.lang.String> strSpliterator30 = strSet0.spliterator();
        java.util.Set<java.lang.String> strSet31 = java.time.ZoneId.getAvailableZoneIds();
        java.util.Set<java.lang.String> strSet32 = java.time.ZoneId.getAvailableZoneIds();
        java.util.stream.Stream<java.lang.String> strStream33 = strSet32.parallelStream();
        java.lang.Object[] objArray34 = strSet32.toArray();
        java.util.Spliterator<java.lang.String> strSpliterator35 = strSet32.spliterator();
        boolean boolean36 = strSet31.containsAll((java.util.Collection<java.lang.String>) strSet32);
        boolean boolean37 = strSet0.removeAll((java.util.Collection<java.lang.String>) strSet32);
        java.nio.charset.CoderResult coderResult38 = java.nio.charset.CoderResult.UNDERFLOW;
        boolean boolean39 = strSet0.contains((java.lang.Object) coderResult38);
        boolean boolean40 = coderResult38.isUnmappable();
        boolean boolean41 = coderResult38.isUnmappable();
        // The following exception was thrown during execution in test generation
        try {
            int int42 = coderResult38.length();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strSet0);
        org.junit.Assert.assertNotNull(strStream1);
        org.junit.Assert.assertNotNull(objArray2);
        org.junit.Assert.assertNotNull(strSpliterator3);
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNotNull(strStream5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertTrue("'" + chronoField20 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField20.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 3601000000001L + "'", long23 == 3601000000001L);
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertTrue("'" + chronoField26 + "' != '" + java.time.temporal.ChronoField.SECOND_OF_DAY + "'", chronoField26.equals(java.time.temporal.ChronoField.SECOND_OF_DAY));
        org.junit.Assert.assertNotNull(valueRange27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(strSpliterator30);
        org.junit.Assert.assertNotNull(strSet31);
        org.junit.Assert.assertNotNull(strSet32);
        org.junit.Assert.assertNotNull(strStream33);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertNotNull(strSpliterator35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(coderResult38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test5293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5293");
        java.time.DayOfWeek dayOfWeek0 = java.time.DayOfWeek.SUNDAY;
        java.time.LocalDateTime localDateTime1 = java.time.LocalDateTime.now();
        java.time.LocalDateTime localDateTime3 = localDateTime1.minusYears((long) (byte) 10);
        java.time.LocalDateTime localDateTime4 = java.time.LocalDateTime.now();
        java.time.LocalDateTime localDateTime6 = localDateTime4.minusYears((long) (byte) 10);
        boolean boolean7 = localDateTime1.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime6);
        java.time.temporal.ChronoField chronoField8 = java.time.temporal.ChronoField.MICRO_OF_DAY;
        java.time.LocalTime localTime13 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime14 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime13);
        java.time.LocalTime localTime19 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime20 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime19);
        java.time.temporal.ChronoField chronoField21 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime23 = localTime19.with((java.time.temporal.TemporalField) chronoField21, (long) (short) 1);
        long long24 = localTime13.getLong((java.time.temporal.TemporalField) chronoField21);
        java.time.LocalTime localTime26 = chronoField8.adjustInto(localTime13, (long) (byte) 1);
        boolean boolean27 = localDateTime1.isSupported((java.time.temporal.TemporalField) chronoField8);
        java.time.LocalDateTime localDateTime28 = java.time.LocalDateTime.now();
        java.time.LocalDateTime localDateTime30 = localDateTime28.minusYears((long) (byte) 10);
        java.time.LocalDateTime localDateTime31 = java.time.LocalDateTime.now();
        java.time.LocalDateTime localDateTime33 = localDateTime31.minusYears((long) (byte) 10);
        boolean boolean34 = localDateTime28.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime33);
        java.time.LocalDateTime localDateTime35 = java.time.LocalDateTime.now();
        java.time.temporal.ChronoField chronoField36 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime38 = localDateTime35.with((java.time.temporal.TemporalField) chronoField36, (long) 10);
        java.time.LocalDateTime localDateTime40 = localDateTime35.minusMinutes((long) 12);
        boolean boolean41 = localDateTime33.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime35);
        int int42 = localDateTime33.getYear();
        boolean boolean43 = chronoField8.isSupportedBy((java.time.temporal.TemporalAccessor) localDateTime33);
        java.time.temporal.Temporal temporal44 = dayOfWeek0.adjustInto((java.time.temporal.Temporal) localDateTime33);
        org.junit.Assert.assertTrue("'" + dayOfWeek0 + "' != '" + java.time.DayOfWeek.SUNDAY + "'", dayOfWeek0.equals(java.time.DayOfWeek.SUNDAY));
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + chronoField8 + "' != '" + java.time.temporal.ChronoField.MICRO_OF_DAY + "'", chronoField8.equals(java.time.temporal.ChronoField.MICRO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertTrue("'" + chronoField21 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField21.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 3601000000001L + "'", long24 == 3601000000001L);
        org.junit.Assert.assertNotNull(localTime26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertTrue("'" + chronoField36 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField36.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2012 + "'", int42 == 2012);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(temporal44);
    }

    @Test
    public void test5294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5294");
        java.util.GregorianCalendar gregorianCalendar5 = new java.util.GregorianCalendar(12, 4096, 7, (-1), (int) (short) 10);
        int int6 = gregorianCalendar5.getWeeksInWeekYear();
        org.joda.time.YearMonthDay yearMonthDay7 = org.joda.time.YearMonthDay.fromCalendarFields((java.util.Calendar) gregorianCalendar5);
        org.joda.time.YearMonthDay yearMonthDay9 = yearMonthDay7.withYear(0);
        org.joda.time.Hours hours10 = org.joda.time.Hours.ZERO;
        org.joda.time.YearMonthDay yearMonthDay11 = yearMonthDay9.minus((org.joda.time.ReadablePeriod) hours10);
        org.joda.time.YearMonthDay yearMonthDay13 = yearMonthDay11.withYear(96000000);
        int int14 = yearMonthDay13.getMonthOfYear();
        org.joda.time.LocalDate localDate15 = yearMonthDay13.toLocalDate();
        org.joda.time.YearMonthDay.Property property16 = yearMonthDay13.monthOfYear();
        org.joda.time.YearMonthDay yearMonthDay18 = property16.addToCopy((-1314000057));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 52 + "'", int6 == 52);
        org.junit.Assert.assertNotNull(yearMonthDay7);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(hours10);
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(yearMonthDay18);
    }

    @Test
    public void test5295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5295");
        java.nio.CharBuffer charBuffer1 = java.nio.CharBuffer.allocate(30);
        org.junit.Assert.assertNotNull(charBuffer1);
    }

    @Test
    public void test5296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5296");
        java.time.Month month0 = java.time.Month.FEBRUARY;
        org.junit.Assert.assertTrue("'" + month0 + "' != '" + java.time.Month.FEBRUARY + "'", month0.equals(java.time.Month.FEBRUARY));
    }

    @Test
    public void test5297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5297");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((long) 0, chronology2);
        org.joda.time.Chronology chronology4 = localTime3.getChronology();
        java.util.Locale locale5 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale6 = java.util.Locale.GERMANY;
        java.lang.String str7 = locale5.getDisplayScript(locale6);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket9 = new org.joda.time.format.DateTimeParserBucket((long) 1970, chronology4, locale5, (java.lang.Integer) 1);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.LocalTime localTime12 = new org.joda.time.LocalTime((long) 0, chronology11);
        org.joda.time.Chronology chronology13 = localTime12.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.weekyearOfCentury();
        org.joda.time.DurationField durationField15 = dateTimeField14.getLeapDurationField();
        dateTimeParserBucket9.saveField(dateTimeField14, (int) 'u');
        java.util.Locale locale19 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str20 = dateTimeField14.getAsShortText((int) 'u', locale19);
        org.joda.time.DurationField durationField21 = dateTimeField14.getDurationField();
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNull(durationField15);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "117" + "'", str20, "117");
        org.junit.Assert.assertNotNull(durationField21);
    }

    @Test
    public void test5298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5298");
        java.util.GregorianCalendar gregorianCalendar5 = new java.util.GregorianCalendar(12, 4096, 7, (-1), (int) (short) 10);
        int int6 = gregorianCalendar5.getWeeksInWeekYear();
        java.util.TimeZone timeZone7 = gregorianCalendar5.getTimeZone();
        java.time.ZoneId zoneId8 = timeZone7.toZoneId();
        org.joda.time.TimeOfDay timeOfDay10 = org.joda.time.TimeOfDay.fromMillisOfDay((long) (short) 0);
        org.joda.time.TimeOfDay timeOfDay12 = org.joda.time.TimeOfDay.fromMillisOfDay((long) (short) 0);
        org.joda.time.Hours hours13 = org.joda.time.Hours.hoursBetween((org.joda.time.ReadablePartial) timeOfDay10, (org.joda.time.ReadablePartial) timeOfDay12);
        org.joda.time.DurationFieldType durationFieldType14 = org.joda.time.DurationFieldType.hours();
        org.joda.time.TimeOfDay timeOfDay16 = timeOfDay12.withFieldAdded(durationFieldType14, (int) (byte) 0);
        int int17 = timeOfDay12.getMillisOfSecond();
        org.joda.time.TimeOfDay timeOfDay19 = timeOfDay12.plusHours(9);
        org.joda.time.TimeOfDay.Property property20 = timeOfDay12.secondOfMinute();
        java.time.ZoneOffset zoneOffset23 = java.time.ZoneOffset.ofHoursMinutes(1, 10);
        java.time.LocalDate localDate24 = java.time.LocalDate.now((java.time.ZoneId) zoneOffset23);
        boolean boolean25 = property20.equals((java.lang.Object) localDate24);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = property20.getFieldType();
        org.joda.time.TimeOfDay timeOfDay27 = property20.withMinimumValue();
        org.joda.time.TimeOfDay timeOfDay29 = property20.addToCopy(59);
        java.util.Locale locale32 = new java.util.Locale("Subject:\n", "German");
        int int33 = property20.getMaximumTextLength(locale32);
        org.joda.time.TimeOfDay timeOfDay35 = property20.addNoWrapToCopy((int) ':');
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime((long) 3, chronology37);
        org.joda.time.DateTime.Property property39 = dateTime38.dayOfYear();
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.DateMidnight dateMidnight41 = new org.joda.time.DateMidnight((java.lang.Object) dateTime38, chronology40);
        org.joda.time.MutableDateTime mutableDateTime42 = dateTime38.toMutableDateTime();
        mutableDateTime42.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property45 = mutableDateTime42.dayOfWeek();
        org.joda.time.MutableDateTime.Property property46 = mutableDateTime42.year();
        java.util.TimeZone timeZone47 = null;
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.forTimeZone(timeZone47);
        mutableDateTime42.setZone(dateTimeZone48);
        java.util.Locale locale51 = java.util.Locale.TAIWAN;
        java.lang.String str52 = dateTimeZone48.getShortName((long) 64, locale51);
        java.lang.String str53 = locale51.getDisplayName();
        java.lang.String str54 = locale51.getDisplayVariant();
        java.lang.String str55 = property20.getAsText(locale51);
        java.lang.String str56 = timeZone7.getDisplayName(locale51);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 52 + "'", int6 == 52);
        org.junit.Assert.assertNotNull(timeZone7);
// flaky:         org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(zoneId8);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(timeOfDay12);
        org.junit.Assert.assertNotNull(hours13);
        org.junit.Assert.assertNotNull(durationFieldType14);
        org.junit.Assert.assertNotNull(timeOfDay16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(timeOfDay19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(zoneOffset23);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(timeOfDay27);
        org.junit.Assert.assertNotNull(timeOfDay29);
        org.junit.Assert.assertEquals(locale32.toString(), "subject:\n_GERMAN");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2 + "'", int33 == 2);
        org.junit.Assert.assertNotNull(timeOfDay35);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(mutableDateTime42);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "+00:00" + "'", str52, "+00:00");
// flaky:         org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Chinesisch (Taiwan)" + "'", str53, "Chinesisch (Taiwan)");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "0" + "'", str55, "0");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "\u5354\u8abf\u4e16\u754c\u6642\u9593" + "'", str56, "\u5354\u8abf\u4e16\u754c\u6642\u9593");
    }

    @Test
    public void test5299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5299");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        int int1 = localDate0.getCenturyOfEra();
        org.joda.time.LocalDate.Property property2 = localDate0.dayOfWeek();
        org.joda.time.LocalDate localDate4 = property2.addToCopy(7);
        org.joda.time.LocalDate.Property property5 = localDate4.dayOfMonth();
        org.joda.time.LocalDate localDate7 = localDate4.withCenturyOfEra(99);
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate();
        int int9 = localDate8.getCenturyOfEra();
        org.joda.time.LocalDate.Property property10 = localDate8.dayOfWeek();
        org.joda.time.LocalDate.Property property11 = localDate8.centuryOfEra();
        org.joda.time.LocalDate localDate12 = property11.roundHalfEvenCopy();
        org.joda.time.LocalDate localDate13 = property11.withMaximumValue();
        org.joda.time.DateTime dateTime14 = localDate13.toDateTimeAtMidnight();
        boolean boolean15 = localDate4.equals((java.lang.Object) localDate13);
        org.joda.time.LocalDate.Property property16 = localDate13.era();
        org.joda.time.LocalDate.Property property17 = localDate13.year();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 20 + "'", int1 == 20);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 20 + "'", int9 == 20);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(property17);
    }

    @Test
    public void test5300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5300");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withYearOfCentury((int) 'a');
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.plusSeconds(6);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.Duration duration8 = new org.joda.time.Duration(readableInstant6, readableInstant7);
        long long9 = duration8.getMillis();
        org.joda.time.Duration duration11 = duration8.plus((long) (byte) 1);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime3.minus((org.joda.time.ReadableDuration) duration11);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.withWeekOfWeekyear((int) '#');
        int int15 = localDateTime12.getCenturyOfEra();
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.Duration duration18 = new org.joda.time.Duration(readableInstant16, readableInstant17);
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.PeriodType periodType20 = null;
        org.joda.time.Period period21 = duration18.toPeriodTo(readableInstant19, periodType20);
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.Duration duration24 = new org.joda.time.Duration(readableInstant22, readableInstant23);
        long long25 = duration24.getMillis();
        boolean boolean26 = duration18.isShorterThan((org.joda.time.ReadableDuration) duration24);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((long) 3, chronology28);
        org.joda.time.DateTime.Property property30 = dateTime29.dayOfYear();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.DateMidnight dateMidnight32 = new org.joda.time.DateMidnight((java.lang.Object) dateTime29, chronology31);
        org.joda.time.MutableDateTime mutableDateTime33 = dateTime29.toMutableDateTime();
        mutableDateTime33.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property36 = mutableDateTime33.dayOfWeek();
        org.joda.time.MutableDateTime.Property property37 = mutableDateTime33.year();
        org.joda.time.MutableDateTime.Property property38 = mutableDateTime33.weekyear();
        boolean boolean39 = duration18.equals((java.lang.Object) mutableDateTime33);
        mutableDateTime33.addMonths((int) ' ');
        mutableDateTime33.add((long) (byte) 10);
        org.joda.time.Period period44 = org.joda.time.Period.ZERO;
        org.joda.time.Period period45 = period44.normalizedStandard();
        org.joda.time.Period period47 = period44.plusHours(2);
        java.time.chrono.IsoEra isoEra48 = java.time.chrono.IsoEra.CE;
        boolean boolean49 = period47.equals((java.lang.Object) isoEra48);
        int int50 = period47.getMinutes();
        mutableDateTime33.add((org.joda.time.ReadablePeriod) period47);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.LocalDateTime localDateTime53 = new org.joda.time.LocalDateTime(chronology52);
        org.joda.time.LocalDateTime localDateTime55 = localDateTime53.withYearOfCentury((int) 'a');
        int int56 = localDateTime55.getDayOfMonth();
        org.joda.time.LocalDateTime localDateTime58 = localDateTime55.withMinuteOfHour((int) ' ');
        org.joda.time.DateTimeFieldType dateTimeFieldType59 = org.joda.time.DateTimeFieldType.weekyear();
        int int60 = localDateTime55.get(dateTimeFieldType59);
        org.joda.time.MutableDateTime.Property property61 = mutableDateTime33.property(dateTimeFieldType59);
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.DateTime dateTime64 = new org.joda.time.DateTime((long) 3, chronology63);
        org.joda.time.DateTime.Property property65 = dateTime64.dayOfYear();
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.DateMidnight dateMidnight67 = new org.joda.time.DateMidnight((java.lang.Object) dateTime64, chronology66);
        org.joda.time.DateMidnight dateMidnight69 = dateMidnight67.minusMonths((-1));
        int int70 = dateMidnight67.getMillisOfSecond();
        org.joda.time.Hours hours71 = org.joda.time.Hours.hoursBetween((org.joda.time.ReadableInstant) mutableDateTime33, (org.joda.time.ReadableInstant) dateMidnight67);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime73 = localDateTime12.withPeriodAdded((org.joda.time.ReadablePeriod) hours71, 740000000);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows a long: -665983720000000 * 3600000");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 20 + "'", int15 == 20);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(mutableDateTime33);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertTrue("'" + isoEra48 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra48.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 21 + "'", int56 == 21);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(dateTimeFieldType59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2097 + "'", int60 == 2097);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertNotNull(dateMidnight69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 0 + "'", int70 == 0);
        org.junit.Assert.assertNotNull(hours71);
    }

    @Test
    public void test5301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5301");
        java.util.GregorianCalendar gregorianCalendar5 = new java.util.GregorianCalendar(12, 4096, 7, (-1), (int) (short) 10);
        int int6 = gregorianCalendar5.getWeeksInWeekYear();
        java.lang.String str7 = gregorianCalendar5.getCalendarType();
        java.time.ZonedDateTime zonedDateTime8 = gregorianCalendar5.toZonedDateTime();
        java.time.ZonedDateTime zonedDateTime10 = zonedDateTime8.minusMonths((long) 10);
        java.time.ZonedDateTime zonedDateTime12 = zonedDateTime10.withNano(52);
        java.time.LocalTime localTime17 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime18 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime17);
        long long19 = localTime18.toNanoOfDay();
        java.util.GregorianCalendar gregorianCalendar25 = new java.util.GregorianCalendar(12, 4096, 7, (-1), (int) (short) 10);
        int int26 = gregorianCalendar25.getWeeksInWeekYear();
        java.lang.String str27 = gregorianCalendar25.getCalendarType();
        java.time.ZonedDateTime zonedDateTime28 = gregorianCalendar25.toZonedDateTime();
        java.time.ZonedDateTime zonedDateTime30 = zonedDateTime28.minusMonths((long) 10);
        java.time.temporal.Temporal temporal31 = localTime18.adjustInto((java.time.temporal.Temporal) zonedDateTime30);
        java.time.LocalDateTime localDateTime32 = java.time.LocalDateTime.now();
        java.time.LocalDateTime localDateTime34 = localDateTime32.minusYears((long) (byte) 10);
        java.time.LocalDateTime localDateTime35 = java.time.LocalDateTime.now();
        java.time.LocalDateTime localDateTime37 = localDateTime35.minusYears((long) (byte) 10);
        boolean boolean38 = localDateTime32.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime37);
        java.time.OffsetTime offsetTime39 = java.time.OffsetTime.MAX;
        java.time.LocalTime localTime40 = offsetTime39.toLocalTime();
        java.time.OffsetTime offsetTime41 = java.time.OffsetTime.MAX;
        java.time.LocalTime localTime42 = offsetTime41.toLocalTime();
        java.lang.String str43 = offsetTime41.toString();
        java.time.Duration duration44 = java.time.Duration.ZERO;
        java.lang.String str45 = duration44.toString();
        java.time.OffsetTime offsetTime46 = offsetTime41.plus((java.time.temporal.TemporalAmount) duration44);
        java.time.OffsetTime offsetTime48 = offsetTime41.plusNanos((long) 0);
        java.time.LocalTime localTime53 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime54 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime53);
        java.time.temporal.ChronoField chronoField55 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime57 = localTime53.with((java.time.temporal.TemporalField) chronoField55, (long) (short) 1);
        java.util.Locale locale58 = java.util.Locale.GERMANY;
        java.lang.String str59 = chronoField55.getDisplayName(locale58);
        java.time.OffsetTime offsetTime61 = offsetTime48.with((java.time.temporal.TemporalField) chronoField55, (long) 28);
        long long62 = localTime40.getLong((java.time.temporal.TemporalField) chronoField55);
        java.time.temporal.TemporalUnit temporalUnit63 = chronoField55.getRangeUnit();
        boolean boolean64 = localDateTime32.isSupported(temporalUnit63);
        java.time.ZonedDateTime zonedDateTime65 = zonedDateTime30.truncatedTo(temporalUnit63);
        boolean boolean66 = zonedDateTime12.isEqual((java.time.chrono.ChronoZonedDateTime<java.time.LocalDate>) zonedDateTime30);
        java.time.ZonedDateTime zonedDateTime68 = zonedDateTime12.minusYears(0L);
        java.time.Period period70 = java.time.Period.ofMonths(0);
        java.time.Period period71 = period70.negated();
        java.time.chrono.ChronoZonedDateTime<java.time.LocalDate> localDateChronoZonedDateTime72 = zonedDateTime68.minus((java.time.temporal.TemporalAmount) period70);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 52 + "'", int6 == 52);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "gregory" + "'", str7, "gregory");
        org.junit.Assert.assertNotNull(zonedDateTime8);
        org.junit.Assert.assertNotNull(zonedDateTime10);
        org.junit.Assert.assertNotNull(zonedDateTime12);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 3601000000001L + "'", long19 == 3601000000001L);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 52 + "'", int26 == 52);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "gregory" + "'", str27, "gregory");
        org.junit.Assert.assertNotNull(zonedDateTime28);
        org.junit.Assert.assertNotNull(zonedDateTime30);
        org.junit.Assert.assertNotNull(temporal31);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(offsetTime39);
        org.junit.Assert.assertNotNull(localTime40);
        org.junit.Assert.assertNotNull(offsetTime41);
        org.junit.Assert.assertNotNull(localTime42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "23:59:59.999999999-18:00" + "'", str43, "23:59:59.999999999-18:00");
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "PT0S" + "'", str45, "PT0S");
        org.junit.Assert.assertNotNull(offsetTime46);
        org.junit.Assert.assertNotNull(offsetTime48);
        org.junit.Assert.assertNotNull(localTime53);
        org.junit.Assert.assertNotNull(localTime54);
        org.junit.Assert.assertTrue("'" + chronoField55 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField55.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime57);
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "NanoOfDay" + "'", str59, "NanoOfDay");
        org.junit.Assert.assertNotNull(offsetTime61);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 86399999999999L + "'", long62 == 86399999999999L);
        org.junit.Assert.assertTrue("'" + temporalUnit63 + "' != '" + java.time.temporal.ChronoUnit.DAYS + "'", temporalUnit63.equals(java.time.temporal.ChronoUnit.DAYS));
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(zonedDateTime65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(zonedDateTime68);
        org.junit.Assert.assertNotNull(period70);
        org.junit.Assert.assertNotNull(period71);
        org.junit.Assert.assertNotNull(localDateChronoZonedDateTime72);
    }

    @Test
    public void test5302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5302");
        java.nio.charset.Charset charset0 = java.nio.charset.Charset.defaultCharset();
        java.nio.charset.CharsetDecoder charsetDecoder1 = charset0.newDecoder();
        java.nio.charset.Charset charset2 = java.nio.charset.Charset.defaultCharset();
        boolean boolean3 = charset0.contains(charset2);
        java.nio.charset.CharsetEncoder charsetEncoder4 = charset0.newEncoder();
        byte[] byteArray5 = charsetEncoder4.replacement();
        java.nio.charset.Charset charset6 = java.nio.charset.Charset.defaultCharset();
        java.nio.charset.CharsetDecoder charsetDecoder7 = charset6.newDecoder();
        float float8 = charsetDecoder7.maxCharsPerByte();
        float float9 = charsetDecoder7.averageCharsPerByte();
        java.nio.charset.CodingErrorAction codingErrorAction10 = charsetDecoder7.unmappableCharacterAction();
        java.nio.charset.CharsetEncoder charsetEncoder11 = charsetEncoder4.onUnmappableCharacter(codingErrorAction10);
        java.nio.charset.Charset charset12 = java.nio.charset.Charset.defaultCharset();
        java.nio.charset.CharsetDecoder charsetDecoder13 = charset12.newDecoder();
        java.nio.charset.Charset charset14 = java.nio.charset.Charset.defaultCharset();
        boolean boolean15 = charset12.contains(charset14);
        java.nio.charset.CharsetEncoder charsetEncoder16 = charset12.newEncoder();
        char[] charArray17 = new char[] {};
        java.nio.CharBuffer charBuffer18 = java.nio.CharBuffer.wrap(charArray17);
        java.nio.ByteBuffer byteBuffer19 = charsetEncoder16.encode(charBuffer18);
        java.nio.CharBuffer charBuffer20 = charBuffer18.slice();
        java.nio.ByteBuffer byteBuffer21 = charsetEncoder11.encode(charBuffer20);
        java.nio.ByteBuffer byteBuffer22 = byteBuffer21.asReadOnlyBuffer();
        java.nio.ByteBuffer byteBuffer23 = byteBuffer21.slice();
        // The following exception was thrown during execution in test generation
        try {
            java.nio.Buffer buffer25 = byteBuffer23.limit(27);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charset0);
        org.junit.Assert.assertNotNull(charsetDecoder1);
        org.junit.Assert.assertNotNull(charset2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(charsetEncoder4);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[63]");
        org.junit.Assert.assertNotNull(charset6);
        org.junit.Assert.assertNotNull(charsetDecoder7);
        org.junit.Assert.assertTrue("'" + float8 + "' != '" + 1.0f + "'", float8 == 1.0f);
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + 1.0f + "'", float9 == 1.0f);
        org.junit.Assert.assertNotNull(codingErrorAction10);
        org.junit.Assert.assertNotNull(charsetEncoder11);
        org.junit.Assert.assertNotNull(charset12);
        org.junit.Assert.assertNotNull(charsetDecoder13);
        org.junit.Assert.assertNotNull(charset14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(charsetEncoder16);
        org.junit.Assert.assertNotNull(charArray17);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray17), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray17), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray17), "[]");
        org.junit.Assert.assertNotNull(charBuffer18);
        org.junit.Assert.assertNotNull(byteBuffer19);
        org.junit.Assert.assertNotNull(charBuffer20);
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertNotNull(byteBuffer23);
    }

    @Test
    public void test5303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5303");
        java.util.stream.IntStream intStream2 = java.util.stream.IntStream.rangeClosed(100, (int) '4');
        java.util.stream.IntStream intStream4 = intStream2.skip((long) 256);
        java.util.stream.IntStream intStream5 = intStream2.parallel();
        // The following exception was thrown during execution in test generation
        try {
            java.util.OptionalInt optionalInt6 = intStream2.findFirst();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: stream has already been operated upon or closed");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intStream2);
        org.junit.Assert.assertNotNull(intStream4);
        org.junit.Assert.assertNotNull(intStream5);
    }

    @Test
    public void test5304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5304");
        java.nio.LongBuffer longBuffer1 = java.nio.LongBuffer.allocate((int) (short) 0);
        long[] longArray2 = longBuffer1.array();
        java.nio.LongBuffer longBuffer4 = java.nio.LongBuffer.allocate(32769);
        int int5 = longBuffer1.compareTo(longBuffer4);
        java.util.Properties properties6 = null;
        java.util.Properties properties7 = new java.util.Properties(properties6);
        java.nio.LongBuffer longBuffer9 = java.nio.LongBuffer.allocate((int) (short) 0);
        java.nio.Buffer buffer10 = longBuffer9.mark();
        boolean boolean11 = properties7.containsKey((java.lang.Object) longBuffer9);
        long[] longArray12 = longBuffer9.array();
        java.nio.LongBuffer longBuffer13 = longBuffer1.put(longBuffer9);
        // The following exception was thrown during execution in test generation
        try {
            long long15 = longBuffer1.get(13);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(longBuffer1);
        org.junit.Assert.assertNotNull(longArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray2), "[]");
        org.junit.Assert.assertNotNull(longBuffer4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-32769) + "'", int5 == (-32769));
        org.junit.Assert.assertNotNull(longBuffer9);
        org.junit.Assert.assertNotNull(buffer10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(longArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray12), "[]");
        org.junit.Assert.assertNotNull(longBuffer13);
    }

    @Test
    public void test5305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5305");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 3, chronology1);
        org.joda.time.DateTime.Property property3 = dateTime2.dayOfYear();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight((java.lang.Object) dateTime2, chronology4);
        org.joda.time.MutableDateTime mutableDateTime6 = dateTime2.toMutableDateTime();
        mutableDateTime6.addYears((int) (short) 100);
        org.joda.time.Period period9 = org.joda.time.Period.ZERO;
        org.joda.time.TimeOfDay timeOfDay11 = org.joda.time.TimeOfDay.fromMillisOfDay((long) (short) 0);
        org.joda.time.TimeOfDay timeOfDay13 = org.joda.time.TimeOfDay.fromMillisOfDay((long) (short) 0);
        org.joda.time.Hours hours14 = org.joda.time.Hours.hoursBetween((org.joda.time.ReadablePartial) timeOfDay11, (org.joda.time.ReadablePartial) timeOfDay13);
        org.joda.time.DurationFieldType durationFieldType15 = org.joda.time.DurationFieldType.hours();
        org.joda.time.TimeOfDay timeOfDay17 = timeOfDay13.withFieldAdded(durationFieldType15, (int) (byte) 0);
        org.joda.time.Period period19 = period9.withFieldAdded(durationFieldType15, 4);
        mutableDateTime6.add((org.joda.time.ReadablePeriod) period9);
        mutableDateTime6.addMonths(1970);
        mutableDateTime6.setDate(4096, 10, 19);
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.Duration duration29 = new org.joda.time.Duration(readableInstant27, readableInstant28);
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.PeriodType periodType31 = null;
        org.joda.time.Period period32 = duration29.toPeriodTo(readableInstant30, periodType31);
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.Duration duration35 = new org.joda.time.Duration(readableInstant33, readableInstant34);
        long long36 = duration35.getMillis();
        boolean boolean37 = duration29.isShorterThan((org.joda.time.ReadableDuration) duration35);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime((long) 3, chronology39);
        org.joda.time.DateTime.Property property41 = dateTime40.dayOfYear();
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.DateMidnight dateMidnight43 = new org.joda.time.DateMidnight((java.lang.Object) dateTime40, chronology42);
        org.joda.time.MutableDateTime mutableDateTime44 = dateTime40.toMutableDateTime();
        mutableDateTime44.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property47 = mutableDateTime44.dayOfWeek();
        org.joda.time.MutableDateTime.Property property48 = mutableDateTime44.year();
        org.joda.time.MutableDateTime.Property property49 = mutableDateTime44.weekyear();
        boolean boolean50 = duration29.equals((java.lang.Object) mutableDateTime44);
        mutableDateTime44.addMonths((int) ' ');
        mutableDateTime44.add((long) (byte) 10);
        org.joda.time.Period period55 = org.joda.time.Period.ZERO;
        org.joda.time.Period period56 = period55.normalizedStandard();
        org.joda.time.Period period58 = period55.plusHours(2);
        java.time.chrono.IsoEra isoEra59 = java.time.chrono.IsoEra.CE;
        boolean boolean60 = period58.equals((java.lang.Object) isoEra59);
        int int61 = period58.getMinutes();
        mutableDateTime44.add((org.joda.time.ReadablePeriod) period58);
        java.util.TimeZone timeZone64 = null;
        org.joda.time.DateTimeZone dateTimeZone65 = org.joda.time.DateTimeZone.forTimeZone(timeZone64);
        org.joda.time.DateMidnight dateMidnight66 = new org.joda.time.DateMidnight((long) 1970, dateTimeZone65);
        long long69 = dateTimeZone65.convertLocalToUTC((long) 3, false);
        long long72 = dateTimeZone65.convertLocalToUTC(0L, true);
        mutableDateTime44.setZoneRetainFields(dateTimeZone65);
        java.lang.String str74 = dateTimeZone65.toString();
        org.joda.time.chrono.EthiopicChronology ethiopicChronology75 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone65);
        org.joda.time.DateTimeField dateTimeField76 = ethiopicChronology75.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone77 = ethiopicChronology75.getZone();
        org.joda.time.DateTimeField dateTimeField78 = ethiopicChronology75.era();
        org.joda.time.DateTimeField dateTimeField79 = ethiopicChronology75.millisOfDay();
        org.joda.time.LocalTime localTime80 = org.joda.time.LocalTime.now((org.joda.time.Chronology) ethiopicChronology75);
        org.joda.time.DateTimeZone dateTimeZone81 = ethiopicChronology75.getZone();
        mutableDateTime6.setZone(dateTimeZone81);
        org.joda.time.MutableDateTime.Property property83 = mutableDateTime6.dayOfMonth();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime85 = property83.add(3881329060001L);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows a long: 3881329060001 * 86400000");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(timeOfDay11);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertNotNull(hours14);
        org.junit.Assert.assertNotNull(durationFieldType15);
        org.junit.Assert.assertNotNull(timeOfDay17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(mutableDateTime44);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertNotNull(period58);
        org.junit.Assert.assertTrue("'" + isoEra59 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra59.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone65);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 3L + "'", long69 == 3L);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 0L + "'", long72 == 0L);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "Etc/UTC" + "'", str74, "Etc/UTC");
        org.junit.Assert.assertNotNull(ethiopicChronology75);
        org.junit.Assert.assertNotNull(dateTimeField76);
        org.junit.Assert.assertNotNull(dateTimeZone77);
        org.junit.Assert.assertNotNull(dateTimeField78);
        org.junit.Assert.assertNotNull(dateTimeField79);
        org.junit.Assert.assertNotNull(localTime80);
        org.junit.Assert.assertNotNull(dateTimeZone81);
        org.junit.Assert.assertNotNull(property83);
    }

    @Test
    public void test5306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5306");
        java.util.GregorianCalendar gregorianCalendar7 = new java.util.GregorianCalendar(12, 4096, 7, (-1), (int) (short) 10);
        int int8 = gregorianCalendar7.getWeeksInWeekYear();
        org.joda.time.YearMonthDay yearMonthDay9 = org.joda.time.YearMonthDay.fromCalendarFields((java.util.Calendar) gregorianCalendar7);
        org.joda.time.YearMonthDay yearMonthDay11 = yearMonthDay9.withYear(0);
        org.joda.time.Hours hours12 = org.joda.time.Hours.ZERO;
        org.joda.time.YearMonthDay yearMonthDay13 = yearMonthDay11.minus((org.joda.time.ReadablePeriod) hours12);
        org.joda.time.YearMonthDay yearMonthDay15 = yearMonthDay13.withYear(96000000);
        org.joda.time.YearMonthDay yearMonthDay16 = new org.joda.time.YearMonthDay();
        java.util.TimeZone timeZone19 = null;
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forTimeZone(timeZone19);
        org.joda.time.DateMidnight dateMidnight21 = new org.joda.time.DateMidnight((long) 1970, dateTimeZone20);
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) 3600000, dateTimeZone20);
        org.joda.time.DateMidnight dateMidnight23 = yearMonthDay16.toDateMidnight(dateTimeZone20);
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate(dateTimeZone20);
        org.joda.time.DateTime dateTime25 = yearMonthDay15.toDateTimeAtCurrentTime(dateTimeZone20);
        org.joda.time.Interval interval26 = new org.joda.time.Interval(0L, 624L, dateTimeZone20);
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime(dateTimeZone20);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 52 + "'", int8 == 52);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(yearMonthDay11);
        org.junit.Assert.assertNotNull(hours12);
        org.junit.Assert.assertNotNull(yearMonthDay13);
        org.junit.Assert.assertNotNull(yearMonthDay15);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateMidnight23);
        org.junit.Assert.assertNotNull(dateTime25);
    }

    @Test
    public void test5307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5307");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((long) 0, chronology4);
        org.joda.time.Chronology chronology6 = localTime5.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.weekyearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.weekyears();
        org.joda.time.TimeOfDay timeOfDay9 = new org.joda.time.TimeOfDay(8, 20, (int) '+', chronology6);
        org.joda.time.DurationField durationField10 = chronology6.millis();
        org.joda.time.DateTime dateTime11 = org.joda.time.DateTime.now(chronology6);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTime11);
    }

    @Test
    public void test5308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5308");
        java.io.File file0 = null;
        java.io.File file2 = new java.io.File(file0, "1970-01-01T00:00:00.003Z");
        long long3 = file2.lastModified();
        java.lang.String str4 = file2.getName();
        java.nio.file.Path path5 = file2.toPath();
        java.lang.String str6 = path5.toString();
        java.nio.file.OpenOption openOption7 = null;
        java.nio.file.OpenOption[] openOptionArray8 = new java.nio.file.OpenOption[] { openOption7 };
        // The following exception was thrown during execution in test generation
        try {
            java.nio.channels.AsynchronousFileChannel asynchronousFileChannel9 = java.nio.channels.AsynchronousFileChannel.open(path5, openOptionArray8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull("file2.getParent() == null", file2.getParent());
        org.junit.Assert.assertEquals(file2.toString(), "1970-01-01T00:00:00.003Z");
// flaky:         org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1645436490000L + "'", long3 == 1645436490000L);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "1970-01-01T00:00:00.003Z" + "'", str4, "1970-01-01T00:00:00.003Z");
        org.junit.Assert.assertNotNull(path5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1970-01-01T00:00:00.003Z" + "'", str6, "1970-01-01T00:00:00.003Z");
        org.junit.Assert.assertNotNull(openOptionArray8);
    }

    @Test
    public void test5309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5309");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((long) 0, chronology4);
        org.joda.time.Chronology chronology6 = localTime5.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.weekyearOfCentury();
        org.joda.time.DurationField durationField8 = chronology6.weekyears();
        org.joda.time.TimeOfDay timeOfDay9 = new org.joda.time.TimeOfDay(8, 20, (int) '+', chronology6);
        int int10 = timeOfDay9.getMillisOfSecond();
        org.joda.time.Chronology chronology11 = timeOfDay9.getChronology();
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(chronology11);
    }

    @Test
    public void test5310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5310");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect(10800000);
        java.nio.ByteBuffer byteBuffer3 = byteBuffer1.putLong((long) 3600000);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray4 = byteBuffer3.array();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer3);
    }

    @Test
    public void test5311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5311");
        java.util.stream.Stream<java.time.Clock> clockStream0 = java.util.stream.Stream.empty();
        org.junit.Assert.assertNotNull(clockStream0);
    }

    @Test
    public void test5312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5312");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 3, chronology1);
        org.joda.time.DateTime.Property property3 = dateTime2.dayOfYear();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight((java.lang.Object) dateTime2, chronology4);
        org.joda.time.MutableDateTime mutableDateTime6 = dateTime2.toMutableDateTime();
        boolean boolean7 = mutableDateTime6.isBeforeNow();
        mutableDateTime6.addHours(70);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.LocalTime localTime12 = new org.joda.time.LocalTime((long) 0, chronology11);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) 3, chronology14);
        org.joda.time.DateTime.Property property16 = dateTime15.dayOfYear();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight((java.lang.Object) dateTime15, chronology17);
        org.joda.time.DateTime dateTime19 = localTime12.toDateTime((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.DateTime dateTime21 = dateTime15.plusYears((int) 'a');
        org.joda.time.Period period22 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime6, (org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) 3, chronology24);
        org.joda.time.DateTime.Property property26 = dateTime25.dayOfYear();
        org.joda.time.Interval interval27 = property26.toInterval();
        org.joda.time.DateTimeField dateTimeField28 = property26.getField();
        org.joda.time.DateTime dateTime30 = property26.addWrapFieldToCopy(0);
        org.joda.time.DateTime dateTime32 = property26.setCopy(34);
        org.joda.time.DateTime dateTime34 = dateTime32.plusHours(70);
        org.joda.time.DateTime dateTime36 = dateTime34.withWeekyear(624);
        mutableDateTime6.setMillis((org.joda.time.ReadableInstant) dateTime36);
        mutableDateTime6.setSecondOfMinute(0);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
    }

    @Test
    public void test5313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5313");
        org.joda.time.YearMonthDay yearMonthDay0 = new org.joda.time.YearMonthDay();
        java.util.TimeZone timeZone3 = null;
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight((long) 1970, dateTimeZone4);
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((long) 3600000, dateTimeZone4);
        org.joda.time.DateMidnight dateMidnight7 = yearMonthDay0.toDateMidnight(dateTimeZone4);
        org.joda.time.LocalDate localDate8 = yearMonthDay0.toLocalDate();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) 3, chronology10);
        org.joda.time.DateTime.Property property12 = dateTime11.dayOfYear();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) 3, chronology14);
        org.joda.time.DateTime.Property property16 = dateTime15.dayOfYear();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight((java.lang.Object) dateTime15, chronology17);
        org.joda.time.DateMidnight dateMidnight20 = dateMidnight18.minusMonths((-1));
        org.joda.time.DateMidnight dateMidnight22 = dateMidnight18.withDayOfYear((int) ' ');
        int int23 = dateMidnight18.getWeekOfWeekyear();
        long long24 = property12.getDifferenceAsLong((org.joda.time.ReadableInstant) dateMidnight18);
        boolean boolean26 = dateMidnight18.isAfter(10L);
        boolean boolean27 = localDate8.equals((java.lang.Object) dateMidnight18);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate29 = localDate8.withWeekOfWeekyear((int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 100 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test5314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5314");
        java.time.OffsetDateTime offsetDateTime0 = java.time.OffsetDateTime.now();
        java.time.LocalDate localDate1 = offsetDateTime0.toLocalDate();
        java.time.OffsetDateTime offsetDateTime2 = java.time.OffsetDateTime.now();
        java.time.temporal.ChronoField chronoField3 = java.time.temporal.ChronoField.HOUR_OF_DAY;
        boolean boolean4 = offsetDateTime2.isSupported((java.time.temporal.TemporalField) chronoField3);
        boolean boolean5 = offsetDateTime0.isEqual(offsetDateTime2);
        java.time.OffsetDateTime offsetDateTime7 = offsetDateTime2.minusHours(3601000000001L);
        java.util.GregorianCalendar gregorianCalendar13 = new java.util.GregorianCalendar(12, 4096, 7, (-1), (int) (short) 10);
        int int14 = gregorianCalendar13.getWeeksInWeekYear();
        java.lang.String str15 = gregorianCalendar13.getCalendarType();
        java.time.ZonedDateTime zonedDateTime16 = gregorianCalendar13.toZonedDateTime();
        java.time.ZonedDateTime zonedDateTime18 = zonedDateTime16.minusMonths((long) 10);
        java.time.ZonedDateTime zonedDateTime20 = zonedDateTime18.minusHours((long) 9);
        java.time.ZoneOffset zoneOffset21 = zonedDateTime18.getOffset();
        java.time.ZonedDateTime zonedDateTime22 = offsetDateTime2.atZoneSimilarLocal((java.time.ZoneId) zoneOffset21);
        java.time.zone.ZoneRules zoneRules23 = java.time.zone.ZoneRules.of(zoneOffset21);
        java.time.Instant instant24 = java.time.Instant.now();
        java.time.Instant instant25 = java.time.Instant.now();
        boolean boolean26 = instant24.isAfter(instant25);
        java.time.ZoneOffset zoneOffset27 = zoneRules23.getStandardOffset(instant25);
        java.time.ZonedDateTime zonedDateTime28 = java.time.ZonedDateTime.now((java.time.ZoneId) zoneOffset27);
        java.time.OffsetDateTime offsetDateTime29 = java.time.OffsetDateTime.now();
        java.time.LocalDate localDate30 = offsetDateTime29.toLocalDate();
        java.time.OffsetDateTime offsetDateTime31 = java.time.OffsetDateTime.now();
        java.time.LocalDate localDate32 = offsetDateTime31.toLocalDate();
        java.time.OffsetDateTime offsetDateTime33 = java.time.OffsetDateTime.now();
        java.time.temporal.ChronoField chronoField34 = java.time.temporal.ChronoField.HOUR_OF_DAY;
        boolean boolean35 = offsetDateTime33.isSupported((java.time.temporal.TemporalField) chronoField34);
        boolean boolean36 = offsetDateTime31.isEqual(offsetDateTime33);
        java.lang.String str37 = offsetDateTime33.toString();
        boolean boolean38 = offsetDateTime29.isAfter(offsetDateTime33);
        java.util.GregorianCalendar gregorianCalendar44 = new java.util.GregorianCalendar(12, 4096, 7, (-1), (int) (short) 10);
        int int45 = gregorianCalendar44.getWeeksInWeekYear();
        java.lang.String str46 = gregorianCalendar44.getCalendarType();
        java.time.ZonedDateTime zonedDateTime47 = gregorianCalendar44.toZonedDateTime();
        java.time.ZonedDateTime zonedDateTime49 = zonedDateTime47.minusMonths((long) 10);
        int int50 = zonedDateTime47.getMonthValue();
        java.time.LocalTime localTime55 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime56 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime55);
        java.time.LocalTime localTime61 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime62 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime61);
        java.time.temporal.ChronoField chronoField63 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime65 = localTime61.with((java.time.temporal.TemporalField) chronoField63, (long) (short) 1);
        long long66 = localTime55.getLong((java.time.temporal.TemporalField) chronoField63);
        long long67 = zonedDateTime47.getLong((java.time.temporal.TemporalField) chronoField63);
        java.time.ZoneOffset zoneOffset70 = java.time.ZoneOffset.ofHoursMinutes(1, 10);
        java.time.LocalDate localDate71 = java.time.LocalDate.now((java.time.ZoneId) zoneOffset70);
        java.time.LocalDate localDate72 = java.time.LocalDate.now((java.time.ZoneId) zoneOffset70);
        java.time.chrono.ChronoZonedDateTime<java.time.LocalDate> localDateChronoZonedDateTime73 = zonedDateTime47.withZoneSameLocal((java.time.ZoneId) zoneOffset70);
        java.time.ZonedDateTime zonedDateTime74 = offsetDateTime29.atZoneSimilarLocal((java.time.ZoneId) zoneOffset70);
        java.time.ZoneOffset zoneOffset77 = java.time.ZoneOffset.ofHoursMinutes(1, 10);
        java.time.LocalDate localDate78 = java.time.LocalDate.now((java.time.ZoneId) zoneOffset77);
        java.time.LocalDate localDate79 = java.time.LocalDate.now((java.time.ZoneId) zoneOffset77);
        java.time.ZonedDateTime zonedDateTime80 = zonedDateTime74.withZoneSameLocal((java.time.ZoneId) zoneOffset77);
        boolean boolean81 = zonedDateTime28.isAfter((java.time.chrono.ChronoZonedDateTime<java.time.LocalDate>) zonedDateTime80);
        org.junit.Assert.assertNotNull(offsetDateTime0);
        org.junit.Assert.assertNotNull(localDate1);
        org.junit.Assert.assertNotNull(offsetDateTime2);
        org.junit.Assert.assertTrue("'" + chronoField3 + "' != '" + java.time.temporal.ChronoField.HOUR_OF_DAY + "'", chronoField3.equals(java.time.temporal.ChronoField.HOUR_OF_DAY));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(offsetDateTime7);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 52 + "'", int14 == 52);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "gregory" + "'", str15, "gregory");
        org.junit.Assert.assertNotNull(zonedDateTime16);
        org.junit.Assert.assertNotNull(zonedDateTime18);
        org.junit.Assert.assertNotNull(zonedDateTime20);
        org.junit.Assert.assertNotNull(zoneOffset21);
        org.junit.Assert.assertNotNull(zonedDateTime22);
        org.junit.Assert.assertNotNull(zoneRules23);
        org.junit.Assert.assertNotNull(instant24);
        org.junit.Assert.assertNotNull(instant25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(zoneOffset27);
        org.junit.Assert.assertNotNull(zonedDateTime28);
        org.junit.Assert.assertNotNull(offsetDateTime29);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(offsetDateTime31);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(offsetDateTime33);
        org.junit.Assert.assertTrue("'" + chronoField34 + "' != '" + java.time.temporal.ChronoField.HOUR_OF_DAY + "'", chronoField34.equals(java.time.temporal.ChronoField.HOUR_OF_DAY));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str37 + "' != '" + "2022-02-21T09:41:52.531Z" + "'", str37, "2022-02-21T09:41:52.531Z");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 52 + "'", int45 == 52);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "gregory" + "'", str46, "gregory");
        org.junit.Assert.assertNotNull(zonedDateTime47);
        org.junit.Assert.assertNotNull(zonedDateTime49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 5 + "'", int50 == 5);
        org.junit.Assert.assertNotNull(localTime55);
        org.junit.Assert.assertNotNull(localTime56);
        org.junit.Assert.assertNotNull(localTime61);
        org.junit.Assert.assertNotNull(localTime62);
        org.junit.Assert.assertTrue("'" + chronoField63 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField63.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime65);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 3601000000001L + "'", long66 == 3601000000001L);
// flaky:         org.junit.Assert.assertTrue("'" + long67 + "' != '" + 83399965000000L + "'", long67 == 83399965000000L);
        org.junit.Assert.assertNotNull(zoneOffset70);
        org.junit.Assert.assertNotNull(localDate71);
        org.junit.Assert.assertNotNull(localDate72);
        org.junit.Assert.assertNotNull(localDateChronoZonedDateTime73);
        org.junit.Assert.assertNotNull(zonedDateTime74);
        org.junit.Assert.assertNotNull(zoneOffset77);
        org.junit.Assert.assertNotNull(localDate78);
        org.junit.Assert.assertNotNull(localDate79);
        org.junit.Assert.assertNotNull(zonedDateTime80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
    }

    @Test
    public void test5315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5315");
        java.net.URI uRI1 = new java.net.URI("hi!");
        java.lang.String str2 = uRI1.getRawAuthority();
        java.lang.String str3 = uRI1.toString();
        java.lang.String str4 = uRI1.getRawFragment();
        java.net.URI uRI6 = new java.net.URI("hi!");
        java.lang.String str7 = uRI6.toASCIIString();
        java.net.URI uRI8 = uRI1.resolve(uRI6);
        java.net.URI uRI9 = uRI1.parseServerAuthority();
        java.net.URI uRI13 = new java.net.URI("x-windows-iso2022jp", "java.nio.charset.CharacterCodingException", "German");
        java.net.URI uRI14 = uRI9.relativize(uRI13);
        java.net.URI uRI16 = new java.net.URI("hi!");
        java.lang.String str17 = uRI16.getRawAuthority();
        java.lang.String str18 = uRI16.toString();
        java.lang.String str19 = uRI16.getRawUserInfo();
        boolean boolean20 = uRI16.isAbsolute();
        java.net.URI uRI21 = uRI13.resolve(uRI16);
        java.net.URI uRI22 = uRI16.parseServerAuthority();
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "hi!" + "'", str3, "hi!");
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "hi!" + "'", str7, "hi!");
        org.junit.Assert.assertNotNull(uRI8);
        org.junit.Assert.assertNotNull(uRI9);
        org.junit.Assert.assertNotNull(uRI14);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(uRI21);
        org.junit.Assert.assertNotNull(uRI22);
    }

    @Test
    public void test5316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5316");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 3, chronology1);
        org.joda.time.DateTime.Property property3 = dateTime2.dayOfYear();
        org.joda.time.Interval interval4 = property3.toInterval();
        org.joda.time.DateTimeField dateTimeField5 = property3.getField();
        org.joda.time.DateTime dateTime7 = property3.addWrapFieldToCopy(0);
        org.joda.time.DateTime dateTime9 = property3.setCopy(34);
        org.joda.time.DateTime dateTime11 = dateTime9.plusHours(70);
        org.joda.time.DateTime dateTime13 = dateTime11.withWeekyear(624);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) 3, chronology15);
        org.joda.time.DateTime.Property property17 = dateTime16.dayOfYear();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight((java.lang.Object) dateTime16, chronology18);
        org.joda.time.MutableDateTime mutableDateTime20 = dateTime16.toMutableDateTime();
        mutableDateTime20.setDayOfYear(28);
        int int23 = mutableDateTime20.getMillisOfDay();
        mutableDateTime20.addMinutes(353);
        int int26 = dateTime13.compareTo((org.joda.time.ReadableInstant) mutableDateTime20);
        mutableDateTime20.addYears(4200);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 3 + "'", int23 == 3);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
    }

    @Test
    public void test5317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5317");
        java.time.LocalDate localDate1 = java.time.LocalDate.ofEpochDay((long) ' ');
        java.time.OffsetTime offsetTime2 = java.time.OffsetTime.MAX;
        java.time.LocalTime localTime3 = offsetTime2.toLocalTime();
        java.lang.String str4 = offsetTime2.toString();
        java.time.Duration duration5 = java.time.Duration.ZERO;
        java.lang.String str6 = duration5.toString();
        java.time.OffsetTime offsetTime7 = offsetTime2.plus((java.time.temporal.TemporalAmount) duration5);
        java.time.LocalTime localTime8 = offsetTime2.toLocalTime();
        java.time.chrono.ChronoLocalDateTime<?> wildcardChronoLocalDateTime9 = localDate1.atTime(localTime8);
        java.time.LocalDate localDate11 = localDate1.minusWeeks((long) 2097);
        java.lang.String str12 = localDate11.toString();
        java.time.LocalDate localDate14 = java.time.LocalDate.ofEpochDay((long) ' ');
        java.time.OffsetTime offsetTime15 = java.time.OffsetTime.MAX;
        java.time.LocalTime localTime16 = offsetTime15.toLocalTime();
        java.lang.String str17 = offsetTime15.toString();
        java.time.Duration duration18 = java.time.Duration.ZERO;
        java.lang.String str19 = duration18.toString();
        java.time.OffsetTime offsetTime20 = offsetTime15.plus((java.time.temporal.TemporalAmount) duration18);
        java.time.LocalTime localTime21 = offsetTime15.toLocalTime();
        java.time.chrono.ChronoLocalDateTime<?> wildcardChronoLocalDateTime22 = localDate14.atTime(localTime21);
        java.time.LocalDate localDate24 = localDate14.minusWeeks((long) 2097);
        java.util.TimeZone timeZone26 = null;
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forTimeZone(timeZone26);
        org.joda.time.DateMidnight dateMidnight28 = new org.joda.time.DateMidnight((long) 1970, dateTimeZone27);
        long long31 = dateTimeZone27.convertLocalToUTC((long) 3, false);
        long long34 = dateTimeZone27.convertLocalToUTC(0L, true);
        boolean boolean35 = localDate14.equals((java.lang.Object) true);
        int int36 = localDate14.lengthOfMonth();
        java.time.temporal.Temporal temporal37 = localDate11.adjustInto((java.time.temporal.Temporal) localDate14);
        java.util.GregorianCalendar gregorianCalendar43 = new java.util.GregorianCalendar(12, 4096, 7, (-1), (int) (short) 10);
        int int44 = gregorianCalendar43.getWeeksInWeekYear();
        java.lang.String str45 = gregorianCalendar43.getCalendarType();
        java.time.ZonedDateTime zonedDateTime46 = gregorianCalendar43.toZonedDateTime();
        java.util.GregorianCalendar gregorianCalendar52 = new java.util.GregorianCalendar(12, 4096, 7, (-1), (int) (short) 10);
        int int53 = gregorianCalendar52.getWeeksInWeekYear();
        java.lang.String str54 = gregorianCalendar52.getCalendarType();
        java.time.ZonedDateTime zonedDateTime55 = gregorianCalendar52.toZonedDateTime();
        int int56 = zonedDateTime46.compareTo((java.time.chrono.ChronoZonedDateTime<java.time.LocalDate>) zonedDateTime55);
        java.time.ZonedDateTime zonedDateTime58 = zonedDateTime46.plusDays((long) 2022);
        java.time.Instant instant59 = zonedDateTime46.toInstant();
        java.time.Period period61 = java.time.Period.ofMonths(0);
        java.time.ZonedDateTime zonedDateTime62 = zonedDateTime46.minus((java.time.temporal.TemporalAmount) period61);
        java.time.LocalTime localTime63 = zonedDateTime46.toLocalTime();
        java.time.temporal.ChronoField chronoField64 = java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR;
        int int65 = zonedDateTime46.get((java.time.temporal.TemporalField) chronoField64);
        int int66 = localDate11.get((java.time.temporal.TemporalField) chronoField64);
        int int67 = localDate11.getMonthValue();
        int int68 = localDate11.lengthOfMonth();
        // The following exception was thrown during execution in test generation
        try {
            java.time.LocalDateTime localDateTime71 = localDate11.atTime(32772, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for HourOfDay (valid values 0 - 23): 32772");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate1);
        org.junit.Assert.assertNotNull(offsetTime2);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "23:59:59.999999999-18:00" + "'", str4, "23:59:59.999999999-18:00");
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "PT0S" + "'", str6, "PT0S");
        org.junit.Assert.assertNotNull(offsetTime7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(wildcardChronoLocalDateTime9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "1929-11-25" + "'", str12, "1929-11-25");
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(offsetTime15);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "23:59:59.999999999-18:00" + "'", str17, "23:59:59.999999999-18:00");
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "PT0S" + "'", str19, "PT0S");
        org.junit.Assert.assertNotNull(offsetTime20);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(wildcardChronoLocalDateTime22);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 3L + "'", long31 == 3L);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 28 + "'", int36 == 28);
        org.junit.Assert.assertNotNull(temporal37);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 52 + "'", int44 == 52);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "gregory" + "'", str45, "gregory");
        org.junit.Assert.assertNotNull(zonedDateTime46);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 52 + "'", int53 == 52);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "gregory" + "'", str54, "gregory");
        org.junit.Assert.assertNotNull(zonedDateTime55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(zonedDateTime58);
        org.junit.Assert.assertNotNull(instant59);
        org.junit.Assert.assertNotNull(period61);
        org.junit.Assert.assertNotNull(zonedDateTime62);
        org.junit.Assert.assertNotNull(localTime63);
        org.junit.Assert.assertTrue("'" + chronoField64 + "' != '" + java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR + "'", chronoField64.equals(java.time.temporal.ChronoField.ALIGNED_WEEK_OF_YEAR));
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 19 + "'", int65 == 19);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 47 + "'", int66 == 47);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 11 + "'", int67 == 11);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 30 + "'", int68 == 30);
    }

    @Test
    public void test5318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5318");
        java.io.PrintStream printStream1 = new java.io.PrintStream("subject:\n (GERMAN)");
        java.io.PrintStream printStream2 = new java.io.PrintStream((java.io.OutputStream) printStream1);
        java.io.PrintStream printStream4 = new java.io.PrintStream((java.io.OutputStream) printStream1, false);
    }

    @Test
    public void test5319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5319");
        java.text.AttributedCharacterIterator.Attribute attribute0 = java.text.AttributedCharacterIterator.Attribute.INPUT_METHOD_SEGMENT;
        java.time.temporal.ChronoField chronoField1 = java.time.temporal.ChronoField.MONTH_OF_YEAR;
        boolean boolean2 = attribute0.equals((java.lang.Object) chronoField1);
        java.util.GregorianCalendar gregorianCalendar8 = new java.util.GregorianCalendar(12, 4096, 7, (-1), (int) (short) 10);
        int int9 = gregorianCalendar8.getWeeksInWeekYear();
        org.joda.time.YearMonthDay yearMonthDay10 = org.joda.time.YearMonthDay.fromCalendarFields((java.util.Calendar) gregorianCalendar8);
        org.joda.time.YearMonthDay yearMonthDay12 = yearMonthDay10.withYear(0);
        org.joda.time.Hours hours13 = org.joda.time.Hours.ZERO;
        org.joda.time.YearMonthDay yearMonthDay14 = yearMonthDay12.minus((org.joda.time.ReadablePeriod) hours13);
        org.joda.time.YearMonthDay.Property property15 = yearMonthDay12.monthOfYear();
        boolean boolean16 = attribute0.equals((java.lang.Object) property15);
        org.joda.time.YearMonthDay yearMonthDay17 = property15.getYearMonthDay();
        org.junit.Assert.assertNotNull(attribute0);
        org.junit.Assert.assertTrue("'" + chronoField1 + "' != '" + java.time.temporal.ChronoField.MONTH_OF_YEAR + "'", chronoField1.equals(java.time.temporal.ChronoField.MONTH_OF_YEAR));
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 52 + "'", int9 == 52);
        org.junit.Assert.assertNotNull(yearMonthDay10);
        org.junit.Assert.assertNotNull(yearMonthDay12);
        org.junit.Assert.assertNotNull(hours13);
        org.junit.Assert.assertNotNull(yearMonthDay14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(yearMonthDay17);
    }

    @Test
    public void test5320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5320");
        java.util.stream.DoubleStream doubleStream1 = java.util.stream.DoubleStream.of((double) 1024);
        java.util.OptionalDouble optionalDouble2 = doubleStream1.max();
        java.util.function.DoubleBinaryOperator doubleBinaryOperator4 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double5 = doubleStream1.reduce((double) 1314000057L, doubleBinaryOperator4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleStream1);
        org.junit.Assert.assertNotNull(optionalDouble2);
    }

    @Test
    public void test5321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5321");
        org.joda.time.Hours hours0 = org.joda.time.Hours.SIX;
        org.joda.time.Seconds seconds1 = hours0.toStandardSeconds();
        org.junit.Assert.assertNotNull(hours0);
        org.junit.Assert.assertNotNull(seconds1);
    }

    @Test
    public void test5322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5322");
        double[] doubleArray4 = new double[] { (byte) 0, 59, 83400000000000L, '4' };
        java.util.stream.DoubleStream doubleStream5 = java.util.stream.DoubleStream.of(doubleArray4);
        java.nio.DoubleBuffer doubleBuffer6 = java.nio.DoubleBuffer.wrap(doubleArray4);
        double[] doubleArray11 = new double[] { (byte) 0, 59, 83400000000000L, '4' };
        java.util.stream.DoubleStream doubleStream12 = java.util.stream.DoubleStream.of(doubleArray11);
        java.nio.DoubleBuffer doubleBuffer13 = java.nio.DoubleBuffer.wrap(doubleArray11);
        java.nio.DoubleBuffer doubleBuffer14 = doubleBuffer6.put(doubleBuffer13);
        java.lang.String str15 = doubleBuffer14.toString();
        double[] doubleArray20 = new double[] { (byte) 0, 59, 83400000000000L, '4' };
        java.util.stream.DoubleStream doubleStream21 = java.util.stream.DoubleStream.of(doubleArray20);
        java.nio.DoubleBuffer doubleBuffer22 = java.nio.DoubleBuffer.wrap(doubleArray20);
        double[] doubleArray27 = new double[] { (byte) 0, 59, 83400000000000L, '4' };
        java.util.stream.DoubleStream doubleStream28 = java.util.stream.DoubleStream.of(doubleArray27);
        java.nio.DoubleBuffer doubleBuffer29 = java.nio.DoubleBuffer.wrap(doubleArray27);
        java.nio.DoubleBuffer doubleBuffer30 = doubleBuffer22.put(doubleBuffer29);
        java.nio.DoubleBuffer doubleBuffer31 = doubleBuffer14.put(doubleBuffer30);
        java.nio.DoubleBuffer doubleBuffer32 = doubleBuffer14.slice();
        java.nio.ByteOrder byteOrder33 = doubleBuffer32.order();
        java.util.stream.DoubleStream doubleStream34 = java.util.stream.DoubleStream.empty();
        java.util.stream.DoubleStream doubleStream35 = doubleStream34.unordered();
        double[] doubleArray36 = doubleStream34.toArray();
        java.nio.DoubleBuffer doubleBuffer37 = java.nio.DoubleBuffer.wrap(doubleArray36);
        java.util.stream.DoubleStream doubleStream38 = java.util.stream.DoubleStream.of(doubleArray36);
        java.nio.DoubleBuffer doubleBuffer39 = doubleBuffer32.get(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[0.0, 59.0, 8.34E13, 52.0]");
        org.junit.Assert.assertNotNull(doubleStream5);
        org.junit.Assert.assertNotNull(doubleBuffer6);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.0, 59.0, 8.34E13, 52.0]");
        org.junit.Assert.assertNotNull(doubleStream12);
        org.junit.Assert.assertNotNull(doubleBuffer13);
        org.junit.Assert.assertNotNull(doubleBuffer14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "java.nio.HeapDoubleBuffer[pos=4 lim=4 cap=4]" + "'", str15, "java.nio.HeapDoubleBuffer[pos=4 lim=4 cap=4]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[0.0, 59.0, 8.34E13, 52.0]");
        org.junit.Assert.assertNotNull(doubleStream21);
        org.junit.Assert.assertNotNull(doubleBuffer22);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[0.0, 59.0, 8.34E13, 52.0]");
        org.junit.Assert.assertNotNull(doubleStream28);
        org.junit.Assert.assertNotNull(doubleBuffer29);
        org.junit.Assert.assertNotNull(doubleBuffer30);
        org.junit.Assert.assertNotNull(doubleBuffer31);
        org.junit.Assert.assertNotNull(doubleBuffer32);
        org.junit.Assert.assertNotNull(byteOrder33);
        org.junit.Assert.assertNotNull(doubleStream34);
        org.junit.Assert.assertNotNull(doubleStream35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[]");
        org.junit.Assert.assertNotNull(doubleBuffer37);
        org.junit.Assert.assertNotNull(doubleStream38);
        org.junit.Assert.assertNotNull(doubleBuffer39);
    }

    @Test
    public void test5323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5323");
        java.net.InetAddress inetAddress0 = java.net.InetAddress.getLocalHost();
        boolean boolean1 = inetAddress0.isMCOrgLocal();
        float[] floatArray4 = new float[] { (-1L), (byte) -1 };
        java.nio.FloatBuffer floatBuffer5 = java.nio.FloatBuffer.wrap(floatArray4);
        boolean boolean6 = inetAddress0.equals((java.lang.Object) floatBuffer5);
        float[] floatArray9 = new float[] { (-1L), (byte) -1 };
        java.nio.FloatBuffer floatBuffer10 = java.nio.FloatBuffer.wrap(floatArray9);
        java.nio.FloatBuffer floatBuffer11 = floatBuffer10.compact();
        java.nio.FloatBuffer floatBuffer12 = floatBuffer10.asReadOnlyBuffer();
        java.nio.ByteOrder byteOrder13 = floatBuffer10.order();
        boolean boolean14 = floatBuffer5.equals((java.lang.Object) floatBuffer10);
        float[] floatArray17 = new float[] { (-1L), (byte) -1 };
        java.nio.FloatBuffer floatBuffer18 = java.nio.FloatBuffer.wrap(floatArray17);
        java.nio.FloatBuffer floatBuffer19 = floatBuffer18.compact();
        boolean boolean20 = floatBuffer19.isDirect();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) 3, chronology22);
        org.joda.time.DateTime.Property property24 = dateTime23.dayOfYear();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight((java.lang.Object) dateTime23, chronology25);
        org.joda.time.MutableDateTime mutableDateTime27 = dateTime23.toMutableDateTime();
        mutableDateTime27.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property30 = mutableDateTime27.dayOfWeek();
        int int31 = property30.get();
        boolean boolean32 = floatBuffer19.equals((java.lang.Object) int31);
        java.nio.FloatBuffer floatBuffer33 = floatBuffer5.put(floatBuffer19);
        java.net.InetAddress inetAddress34 = java.net.InetAddress.getLocalHost();
        boolean boolean35 = inetAddress34.isMCOrgLocal();
        float[] floatArray38 = new float[] { (-1L), (byte) -1 };
        java.nio.FloatBuffer floatBuffer39 = java.nio.FloatBuffer.wrap(floatArray38);
        boolean boolean40 = inetAddress34.equals((java.lang.Object) floatBuffer39);
        float[] floatArray43 = new float[] { (-1L), (byte) -1 };
        java.nio.FloatBuffer floatBuffer44 = java.nio.FloatBuffer.wrap(floatArray43);
        java.nio.FloatBuffer floatBuffer45 = floatBuffer44.compact();
        java.nio.FloatBuffer floatBuffer46 = floatBuffer44.asReadOnlyBuffer();
        java.nio.ByteOrder byteOrder47 = floatBuffer44.order();
        boolean boolean48 = floatBuffer39.equals((java.lang.Object) floatBuffer44);
        int int49 = floatBuffer44.arrayOffset();
        java.nio.ByteOrder byteOrder50 = floatBuffer44.order();
        java.nio.ByteOrder byteOrder51 = floatBuffer44.order();
        int int52 = floatBuffer19.compareTo(floatBuffer44);
        org.junit.Assert.assertNotNull(inetAddress0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(floatArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray4), "[-1.0, -1.0]");
        org.junit.Assert.assertNotNull(floatBuffer5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(floatArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray9), "[-1.0, -1.0]");
        org.junit.Assert.assertNotNull(floatBuffer10);
        org.junit.Assert.assertNotNull(floatBuffer11);
        org.junit.Assert.assertNotNull(floatBuffer12);
        org.junit.Assert.assertNotNull(byteOrder13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(floatArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray17), "[-1.0, -1.0]");
        org.junit.Assert.assertNotNull(floatBuffer18);
        org.junit.Assert.assertNotNull(floatBuffer19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(mutableDateTime27);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 3 + "'", int31 == 3);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(floatBuffer33);
        org.junit.Assert.assertNotNull(inetAddress34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(floatArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray38), "[-1.0, -1.0]");
        org.junit.Assert.assertNotNull(floatBuffer39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(floatArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray43), "[-1.0, -1.0]");
        org.junit.Assert.assertNotNull(floatBuffer44);
        org.junit.Assert.assertNotNull(floatBuffer45);
        org.junit.Assert.assertNotNull(floatBuffer46);
        org.junit.Assert.assertNotNull(byteOrder47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(byteOrder50);
        org.junit.Assert.assertNotNull(byteOrder51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
    }

    @Test
    public void test5324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5324");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Duration duration2 = new org.joda.time.Duration(readableInstant0, readableInstant1);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = duration2.toPeriodTo(readableInstant3, periodType4);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.Duration duration8 = new org.joda.time.Duration(readableInstant6, readableInstant7);
        long long9 = duration8.getMillis();
        boolean boolean10 = duration2.isShorterThan((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) 3, chronology12);
        org.joda.time.DateTime.Property property14 = dateTime13.dayOfYear();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight((java.lang.Object) dateTime13, chronology15);
        org.joda.time.MutableDateTime mutableDateTime17 = dateTime13.toMutableDateTime();
        mutableDateTime17.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime17.dayOfWeek();
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime17.year();
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime17.weekyear();
        boolean boolean23 = duration2.equals((java.lang.Object) mutableDateTime17);
        mutableDateTime17.addMonths((int) ' ');
        mutableDateTime17.add((long) (byte) 10);
        org.joda.time.Period period28 = org.joda.time.Period.ZERO;
        org.joda.time.Period period29 = period28.normalizedStandard();
        org.joda.time.Period period31 = period28.plusHours(2);
        java.time.chrono.IsoEra isoEra32 = java.time.chrono.IsoEra.CE;
        boolean boolean33 = period31.equals((java.lang.Object) isoEra32);
        int int34 = period31.getMinutes();
        mutableDateTime17.add((org.joda.time.ReadablePeriod) period31);
        java.util.TimeZone timeZone37 = null;
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forTimeZone(timeZone37);
        org.joda.time.DateMidnight dateMidnight39 = new org.joda.time.DateMidnight((long) 1970, dateTimeZone38);
        long long42 = dateTimeZone38.convertLocalToUTC((long) 3, false);
        long long45 = dateTimeZone38.convertLocalToUTC(0L, true);
        mutableDateTime17.setZoneRetainFields(dateTimeZone38);
        java.lang.String str47 = dateTimeZone38.toString();
        org.joda.time.chrono.EthiopicChronology ethiopicChronology48 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone38);
        org.joda.time.DateTimeField dateTimeField49 = ethiopicChronology48.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone50 = ethiopicChronology48.getZone();
        org.joda.time.DateTimeField dateTimeField51 = ethiopicChronology48.era();
        org.joda.time.DateTimeField dateTimeField52 = ethiopicChronology48.secondOfDay();
        org.joda.time.DateTimeField dateTimeField53 = ethiopicChronology48.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField54 = ethiopicChronology48.halfdayOfDay();
        org.joda.time.DurationField durationField55 = ethiopicChronology48.weekyears();
        org.joda.time.DateTimeField dateTimeField56 = ethiopicChronology48.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField57 = ethiopicChronology48.centuryOfEra();
        java.lang.String str58 = ethiopicChronology48.toString();
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertTrue("'" + isoEra32 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra32.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 3L + "'", long42 == 3L);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Etc/UTC" + "'", str47, "Etc/UTC");
        org.junit.Assert.assertNotNull(ethiopicChronology48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(durationField55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "EthiopicChronology[Etc/UTC]" + "'", str58, "EthiopicChronology[Etc/UTC]");
    }

    @Test
    public void test5325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5325");
        java.time.OffsetDateTime offsetDateTime0 = java.time.OffsetDateTime.now();
        java.time.LocalDate localDate1 = offsetDateTime0.toLocalDate();
        java.time.OffsetDateTime offsetDateTime2 = java.time.OffsetDateTime.now();
        java.time.LocalDate localDate3 = offsetDateTime2.toLocalDate();
        java.time.OffsetDateTime offsetDateTime4 = java.time.OffsetDateTime.now();
        java.time.temporal.ChronoField chronoField5 = java.time.temporal.ChronoField.HOUR_OF_DAY;
        boolean boolean6 = offsetDateTime4.isSupported((java.time.temporal.TemporalField) chronoField5);
        boolean boolean7 = offsetDateTime2.isEqual(offsetDateTime4);
        java.lang.String str8 = offsetDateTime4.toString();
        boolean boolean9 = offsetDateTime0.isAfter(offsetDateTime4);
        java.util.GregorianCalendar gregorianCalendar15 = new java.util.GregorianCalendar(12, 4096, 7, (-1), (int) (short) 10);
        int int16 = gregorianCalendar15.getWeeksInWeekYear();
        java.lang.String str17 = gregorianCalendar15.getCalendarType();
        java.time.ZonedDateTime zonedDateTime18 = gregorianCalendar15.toZonedDateTime();
        java.time.ZonedDateTime zonedDateTime20 = zonedDateTime18.minusMonths((long) 10);
        int int21 = zonedDateTime18.getMonthValue();
        java.time.LocalTime localTime26 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime27 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime26);
        java.time.LocalTime localTime32 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime33 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime32);
        java.time.temporal.ChronoField chronoField34 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime36 = localTime32.with((java.time.temporal.TemporalField) chronoField34, (long) (short) 1);
        long long37 = localTime26.getLong((java.time.temporal.TemporalField) chronoField34);
        long long38 = zonedDateTime18.getLong((java.time.temporal.TemporalField) chronoField34);
        java.time.ZoneOffset zoneOffset41 = java.time.ZoneOffset.ofHoursMinutes(1, 10);
        java.time.LocalDate localDate42 = java.time.LocalDate.now((java.time.ZoneId) zoneOffset41);
        java.time.LocalDate localDate43 = java.time.LocalDate.now((java.time.ZoneId) zoneOffset41);
        java.time.chrono.ChronoZonedDateTime<java.time.LocalDate> localDateChronoZonedDateTime44 = zonedDateTime18.withZoneSameLocal((java.time.ZoneId) zoneOffset41);
        java.time.ZonedDateTime zonedDateTime45 = offsetDateTime0.atZoneSimilarLocal((java.time.ZoneId) zoneOffset41);
        java.time.Clock clock46 = java.time.Clock.system((java.time.ZoneId) zoneOffset41);
        java.time.LocalDate localDate47 = java.time.LocalDate.now(clock46);
        java.time.LocalDateTime localDateTime48 = java.time.LocalDateTime.now(clock46);
        java.time.Clock clock49 = java.time.Clock.systemUTC();
        java.time.Duration duration51 = java.time.Duration.ofSeconds((long) 256);
        java.time.Clock clock52 = java.time.Clock.tick(clock49, duration51);
        java.time.Duration duration54 = java.time.Duration.ofMinutes((long) 3);
        java.time.Duration duration55 = duration54.abs();
        java.time.Clock clock56 = java.time.Clock.offset(clock49, duration54);
        java.time.LocalDateTime localDateTime57 = java.time.LocalDateTime.now(clock49);
        java.time.temporal.Temporal temporal58 = localDateTime48.adjustInto((java.time.temporal.Temporal) localDateTime57);
        org.junit.Assert.assertNotNull(offsetDateTime0);
        org.junit.Assert.assertNotNull(localDate1);
        org.junit.Assert.assertNotNull(offsetDateTime2);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(offsetDateTime4);
        org.junit.Assert.assertTrue("'" + chronoField5 + "' != '" + java.time.temporal.ChronoField.HOUR_OF_DAY + "'", chronoField5.equals(java.time.temporal.ChronoField.HOUR_OF_DAY));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "2022-02-21T09:41:52.716Z" + "'", str8, "2022-02-21T09:41:52.716Z");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 52 + "'", int16 == 52);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "gregory" + "'", str17, "gregory");
        org.junit.Assert.assertNotNull(zonedDateTime18);
        org.junit.Assert.assertNotNull(zonedDateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 5 + "'", int21 == 5);
        org.junit.Assert.assertNotNull(localTime26);
        org.junit.Assert.assertNotNull(localTime27);
        org.junit.Assert.assertNotNull(localTime32);
        org.junit.Assert.assertNotNull(localTime33);
        org.junit.Assert.assertTrue("'" + chronoField34 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField34.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime36);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 3601000000001L + "'", long37 == 3601000000001L);
// flaky:         org.junit.Assert.assertTrue("'" + long38 + "' != '" + 83399965000000L + "'", long38 == 83399965000000L);
        org.junit.Assert.assertNotNull(zoneOffset41);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertNotNull(localDate43);
        org.junit.Assert.assertNotNull(localDateChronoZonedDateTime44);
        org.junit.Assert.assertNotNull(zonedDateTime45);
        org.junit.Assert.assertNotNull(clock46);
        org.junit.Assert.assertNotNull(localDate47);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(clock49);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(clock52);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertNotNull(clock56);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(temporal58);
    }

    @Test
    public void test5326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5326");
        org.joda.time.Period period1 = new org.joda.time.Period((-62135596800000L));
    }

    @Test
    public void test5327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5327");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.now();
        java.time.LocalDateTime localDateTime2 = localDateTime0.minusYears((long) (byte) 10);
        java.time.LocalDateTime localDateTime3 = java.time.LocalDateTime.now();
        java.time.LocalDateTime localDateTime5 = localDateTime3.minusYears((long) (byte) 10);
        boolean boolean6 = localDateTime0.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime5);
        java.time.LocalDateTime localDateTime7 = java.time.LocalDateTime.now();
        java.time.LocalDateTime localDateTime9 = localDateTime7.minusYears((long) (byte) 10);
        java.time.LocalDateTime localDateTime10 = java.time.LocalDateTime.now();
        java.time.LocalDateTime localDateTime12 = localDateTime10.minusYears((long) (byte) 10);
        boolean boolean13 = localDateTime7.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime12);
        java.time.LocalDateTime localDateTime15 = localDateTime12.withSecond((int) '+');
        java.time.temporal.Temporal temporal16 = localDateTime0.adjustInto((java.time.temporal.Temporal) localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(temporal16);
    }

    @Test
    public void test5328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5328");
        java.util.stream.LongStream.Builder builder0 = java.util.stream.LongStream.builder();
        java.util.stream.LongStream longStream1 = builder0.build();
        org.junit.Assert.assertNotNull(builder0);
        org.junit.Assert.assertNotNull(longStream1);
    }

    @Test
    public void test5329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5329");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 3, chronology1);
        org.joda.time.DateTime.Property property3 = dateTime2.dayOfYear();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight((java.lang.Object) dateTime2, chronology4);
        org.joda.time.MutableDateTime mutableDateTime6 = dateTime2.toMutableDateTime();
        mutableDateTime6.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime6.dayOfWeek();
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime6.year();
        java.util.TimeZone timeZone11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        mutableDateTime6.setZone(dateTimeZone12);
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime6.minuteOfHour();
        org.joda.time.MutableDateTime mutableDateTime15 = property14.roundHalfCeiling();
        org.joda.time.MutableDateTime mutableDateTime16 = property14.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime18 = property14.addWrapField(16);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertNotNull(mutableDateTime18);
    }

    @Test
    public void test5330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5330");
        java.net.UnknownHostException unknownHostException1 = new java.net.UnknownHostException("AlignedWeekOfYear");
    }

    @Test
    public void test5331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5331");
        java.util.stream.IntStream intStream1 = java.util.stream.IntStream.of(365);
        java.util.stream.LongStream longStream2 = intStream1.asLongStream();
        java.util.stream.LongStream longStream3 = longStream2.parallel();
        java.util.function.LongUnaryOperator longUnaryOperator4 = java.util.function.LongUnaryOperator.identity();
        java.util.function.LongUnaryOperator longUnaryOperator5 = java.util.function.LongUnaryOperator.identity();
        java.util.function.LongUnaryOperator longUnaryOperator6 = longUnaryOperator4.compose(longUnaryOperator5);
        java.util.function.LongUnaryOperator longUnaryOperator7 = java.util.function.LongUnaryOperator.identity();
        java.util.function.LongUnaryOperator longUnaryOperator8 = longUnaryOperator6.andThen(longUnaryOperator7);
        java.util.stream.LongStream longStream9 = longStream3.map(longUnaryOperator8);
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.LongStream longStream10 = longStream3.sorted();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: stream has already been operated upon or closed");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intStream1);
        org.junit.Assert.assertNotNull(longStream2);
        org.junit.Assert.assertNotNull(longStream3);
        org.junit.Assert.assertNotNull(longUnaryOperator4);
        org.junit.Assert.assertNotNull(longUnaryOperator5);
        org.junit.Assert.assertNotNull(longUnaryOperator6);
        org.junit.Assert.assertNotNull(longUnaryOperator7);
        org.junit.Assert.assertNotNull(longUnaryOperator8);
        org.junit.Assert.assertNotNull(longStream9);
    }

    @Test
    public void test5332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5332");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocate((int) 'a');
        java.nio.ByteBuffer byteBuffer4 = byteBuffer1.put(47, (byte) 1);
        java.nio.ByteBuffer byteBuffer6 = byteBuffer1.put((byte) 100);
        int int7 = byteBuffer1.arrayOffset();
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer4);
        org.junit.Assert.assertNotNull(byteBuffer6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test5333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5333");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Duration duration2 = new org.joda.time.Duration(readableInstant0, readableInstant1);
        org.joda.time.Duration duration4 = duration2.withMillis((-1L));
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((long) 3, chronology6);
        org.joda.time.DateTime.Property property8 = dateTime7.dayOfYear();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight((java.lang.Object) dateTime7, chronology9);
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight10.minusMonths((-1));
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight10.withDayOfYear((int) ' ');
        org.joda.time.PeriodType periodType15 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period16 = duration4.toPeriodFrom((org.joda.time.ReadableInstant) dateMidnight10, periodType15);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.Duration duration19 = new org.joda.time.Duration(readableInstant17, readableInstant18);
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.PeriodType periodType21 = null;
        org.joda.time.Period period22 = duration19.toPeriodTo(readableInstant20, periodType21);
        long long23 = duration19.getStandardSeconds();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((long) 3, chronology25);
        org.joda.time.DateTime.Property property27 = dateTime26.dayOfYear();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateMidnight dateMidnight29 = new org.joda.time.DateMidnight((java.lang.Object) dateTime26, chronology28);
        org.joda.time.DateMidnight dateMidnight31 = dateMidnight29.minusMonths((-1));
        org.joda.time.DateMidnight dateMidnight33 = dateMidnight29.withDayOfYear((int) ' ');
        org.joda.time.Interval interval34 = duration19.toIntervalTo((org.joda.time.ReadableInstant) dateMidnight33);
        org.joda.time.PeriodType periodType36 = org.joda.time.PeriodType.time();
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod((long) 'a', periodType36);
        org.joda.time.Period period38 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight10, (org.joda.time.ReadableDuration) duration19, periodType36);
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.Duration duration41 = new org.joda.time.Duration(readableInstant39, readableInstant40);
        org.joda.time.Seconds seconds42 = duration41.toStandardSeconds();
        int int43 = seconds42.getSeconds();
        org.joda.time.DateMidnight dateMidnight45 = dateMidnight10.withPeriodAdded((org.joda.time.ReadablePeriod) seconds42, 0);
        org.joda.time.ReadableInstant readableInstant46 = null;
        org.joda.time.MutableInterval mutableInterval47 = new org.joda.time.MutableInterval((org.joda.time.ReadablePeriod) seconds42, readableInstant46);
        boolean boolean48 = mutableInterval47.isAfterNow();
        mutableInterval47.setDurationAfterStart(83399965000L);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(periodType15);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateMidnight31);
        org.junit.Assert.assertNotNull(dateMidnight33);
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertNotNull(seconds42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(dateMidnight45);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test5334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5334");
        java.time.format.DateTimeFormatter dateTimeFormatter0 = java.time.format.DateTimeFormatter.ISO_DATE;
        java.lang.String str1 = dateTimeFormatter0.toString();
        java.time.LocalDateTime localDateTime2 = java.time.LocalDateTime.now();
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery3 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period4 = localDateTime2.query(periodTemporalQuery3);
        java.text.Format format5 = dateTimeFormatter0.toFormat(periodTemporalQuery3);
        java.time.chrono.Chronology chronology6 = dateTimeFormatter0.getChronology();
        java.time.format.DateTimeFormatter dateTimeFormatter7 = java.time.format.DateTimeFormatter.ISO_DATE;
        java.lang.String str8 = dateTimeFormatter7.toString();
        java.time.LocalDateTime localDateTime9 = java.time.LocalDateTime.now();
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery10 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period11 = localDateTime9.query(periodTemporalQuery10);
        java.text.Format format12 = dateTimeFormatter7.toFormat(periodTemporalQuery10);
        java.time.chrono.Chronology chronology13 = dateTimeFormatter7.getChronology();
        int int14 = chronology6.compareTo(chronology13);
        java.util.List<java.time.chrono.Era> eraList15 = chronology13.eras();
        java.time.ZoneOffset zoneOffset18 = java.time.ZoneOffset.ofHoursMinutes(1, 10);
        java.time.LocalDate localDate19 = java.time.LocalDate.now((java.time.ZoneId) zoneOffset18);
        java.time.Clock clock20 = java.time.Clock.system((java.time.ZoneId) zoneOffset18);
        java.time.ZoneOffset zoneOffset23 = java.time.ZoneOffset.ofHoursMinutes(1, 10);
        java.time.LocalDate localDate24 = java.time.LocalDate.now((java.time.ZoneId) zoneOffset23);
        java.time.Clock clock25 = java.time.Clock.system((java.time.ZoneId) zoneOffset23);
        int int26 = zoneOffset18.compareTo(zoneOffset23);
        java.time.chrono.ChronoLocalDate chronoLocalDate27 = chronology13.dateNow((java.time.ZoneId) zoneOffset23);
        java.time.chrono.IsoEra isoEra28 = java.time.chrono.IsoEra.CE;
        int int29 = isoEra28.getValue();
        int int30 = isoEra28.getValue();
        int int32 = chronology13.prolepticYear((java.time.chrono.Era) isoEra28, 0);
        java.util.GregorianCalendar gregorianCalendar38 = new java.util.GregorianCalendar(12, 4096, 7, (-1), (int) (short) 10);
        int int39 = gregorianCalendar38.getWeeksInWeekYear();
        java.util.TimeZone timeZone40 = gregorianCalendar38.getTimeZone();
        java.util.Locale locale42 = new java.util.Locale("hi!");
        java.util.Calendar calendar43 = java.util.Calendar.getInstance(timeZone40, locale42);
        java.time.Instant instant44 = calendar43.toInstant();
        java.time.Instant instant45 = calendar43.toInstant();
        java.time.ZoneOffset zoneOffset47 = java.time.ZoneOffset.ofHours(9);
        java.lang.String str48 = zoneOffset47.toString();
        java.time.chrono.ChronoZonedDateTime<? extends java.time.chrono.ChronoLocalDate> wildcardChronoZonedDateTime49 = chronology13.zonedDateTime(instant45, (java.time.ZoneId) zoneOffset47);
        java.time.chrono.Era era51 = chronology13.eraOf(1);
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "ParseCaseSensitive(false)(Value(Year,4,10,EXCEEDS_PAD)'-'Value(MonthOfYear,2)'-'Value(DayOfMonth,2))[Offset(+HH:MM:ss,'Z')]" + "'", str1, "ParseCaseSensitive(false)(Value(Year,4,10,EXCEEDS_PAD)'-'Value(MonthOfYear,2)'-'Value(DayOfMonth,2))[Offset(+HH:MM:ss,'Z')]");
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(periodTemporalQuery3);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(format5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "ParseCaseSensitive(false)(Value(Year,4,10,EXCEEDS_PAD)'-'Value(MonthOfYear,2)'-'Value(DayOfMonth,2))[Offset(+HH:MM:ss,'Z')]" + "'", str8, "ParseCaseSensitive(false)(Value(Year,4,10,EXCEEDS_PAD)'-'Value(MonthOfYear,2)'-'Value(DayOfMonth,2))[Offset(+HH:MM:ss,'Z')]");
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(periodTemporalQuery10);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(format12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(eraList15);
        org.junit.Assert.assertNotNull(zoneOffset18);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(clock20);
        org.junit.Assert.assertNotNull(zoneOffset23);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(clock25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(chronoLocalDate27);
        org.junit.Assert.assertTrue("'" + isoEra28 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra28.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 52 + "'", int39 == 52);
        org.junit.Assert.assertNotNull(timeZone40);
// flaky:         org.junit.Assert.assertEquals(timeZone40.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertEquals(locale42.toString(), "hi!");
        org.junit.Assert.assertNotNull(calendar43);
// flaky:         org.junit.Assert.assertEquals(calendar43.toString(), "java.util.GregorianCalendar[time=1645436512848,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=35,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=21,DAY_OF_YEAR=52,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=9,HOUR_OF_DAY=9,MINUTE=41,SECOND=52,MILLISECOND=883,ZONE_OFFSET=35,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(instant44);
        org.junit.Assert.assertNotNull(instant45);
        org.junit.Assert.assertNotNull(zoneOffset47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "+09:00" + "'", str48, "+09:00");
        org.junit.Assert.assertNotNull(wildcardChronoZonedDateTime49);
        org.junit.Assert.assertTrue("'" + era51 + "' != '" + java.time.chrono.IsoEra.CE + "'", era51.equals(java.time.chrono.IsoEra.CE));
    }

    @Test
    public void test5335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5335");
        org.joda.time.Weeks weeks0 = org.joda.time.Weeks.THREE;
        org.joda.time.Weeks weeks1 = org.joda.time.Weeks.ONE;
        java.util.concurrent.TimeUnit timeUnit2 = java.util.concurrent.TimeUnit.NANOSECONDS;
        boolean boolean3 = weeks1.equals((java.lang.Object) timeUnit2);
        org.joda.time.MutablePeriod mutablePeriod4 = weeks1.toMutablePeriod();
        boolean boolean5 = weeks0.isGreaterThan(weeks1);
        org.joda.time.Weeks weeks6 = org.joda.time.Weeks.ONE;
        java.util.concurrent.TimeUnit timeUnit7 = java.util.concurrent.TimeUnit.NANOSECONDS;
        boolean boolean8 = weeks6.equals((java.lang.Object) timeUnit7);
        org.joda.time.Weeks weeks9 = weeks6.negated();
        org.joda.time.Weeks weeks10 = org.joda.time.Weeks.ONE;
        java.util.concurrent.TimeUnit timeUnit11 = java.util.concurrent.TimeUnit.NANOSECONDS;
        boolean boolean12 = weeks10.equals((java.lang.Object) timeUnit11);
        org.joda.time.Weeks weeks13 = weeks10.negated();
        org.joda.time.Weeks weeks14 = weeks9.minus(weeks13);
        org.joda.time.Weeks weeks15 = weeks1.plus(weeks13);
        java.lang.String str16 = weeks15.toString();
        org.junit.Assert.assertNotNull(weeks0);
        org.junit.Assert.assertNotNull(weeks1);
        org.junit.Assert.assertNotNull(timeUnit2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(mutablePeriod4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(weeks6);
        org.junit.Assert.assertNotNull(timeUnit7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(weeks9);
        org.junit.Assert.assertNotNull(weeks10);
        org.junit.Assert.assertNotNull(timeUnit11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(weeks13);
        org.junit.Assert.assertNotNull(weeks14);
        org.junit.Assert.assertNotNull(weeks15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "P0W" + "'", str16, "P0W");
    }

    @Test
    public void test5336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5336");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Duration duration2 = new org.joda.time.Duration(readableInstant0, readableInstant1);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = duration2.toPeriodTo(readableInstant3, periodType4);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.Duration duration8 = new org.joda.time.Duration(readableInstant6, readableInstant7);
        long long9 = duration8.getMillis();
        boolean boolean10 = duration2.isShorterThan((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) 3, chronology12);
        org.joda.time.DateTime.Property property14 = dateTime13.dayOfYear();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight((java.lang.Object) dateTime13, chronology15);
        org.joda.time.MutableDateTime mutableDateTime17 = dateTime13.toMutableDateTime();
        mutableDateTime17.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime17.dayOfWeek();
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime17.year();
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime17.weekyear();
        boolean boolean23 = duration2.equals((java.lang.Object) mutableDateTime17);
        mutableDateTime17.addMonths((int) ' ');
        mutableDateTime17.add((long) (byte) 10);
        org.joda.time.Period period28 = org.joda.time.Period.ZERO;
        org.joda.time.Period period29 = period28.normalizedStandard();
        org.joda.time.Period period31 = period28.plusHours(2);
        java.time.chrono.IsoEra isoEra32 = java.time.chrono.IsoEra.CE;
        boolean boolean33 = period31.equals((java.lang.Object) isoEra32);
        int int34 = period31.getMinutes();
        mutableDateTime17.add((org.joda.time.ReadablePeriod) period31);
        java.util.TimeZone timeZone37 = null;
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forTimeZone(timeZone37);
        org.joda.time.DateMidnight dateMidnight39 = new org.joda.time.DateMidnight((long) 1970, dateTimeZone38);
        long long42 = dateTimeZone38.convertLocalToUTC((long) 3, false);
        long long45 = dateTimeZone38.convertLocalToUTC(0L, true);
        mutableDateTime17.setZoneRetainFields(dateTimeZone38);
        java.lang.String str47 = dateTimeZone38.toString();
        org.joda.time.chrono.EthiopicChronology ethiopicChronology48 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone38);
        org.joda.time.DateTimeField dateTimeField49 = ethiopicChronology48.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone50 = ethiopicChronology48.getZone();
        org.joda.time.DateTimeField dateTimeField51 = ethiopicChronology48.era();
        org.joda.time.DateTimeField dateTimeField52 = ethiopicChronology48.secondOfDay();
        org.joda.time.DateTimeField dateTimeField53 = ethiopicChronology48.minuteOfHour();
        org.joda.time.DurationField durationField54 = ethiopicChronology48.months();
        org.joda.time.DateTimeField dateTimeField55 = ethiopicChronology48.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField56 = ethiopicChronology48.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField57 = ethiopicChronology48.minuteOfDay();
        org.joda.time.DurationField durationField58 = ethiopicChronology48.days();
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertTrue("'" + isoEra32 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra32.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 3L + "'", long42 == 3L);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Etc/UTC" + "'", str47, "Etc/UTC");
        org.junit.Assert.assertNotNull(ethiopicChronology48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(durationField54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(durationField58);
    }

    @Test
    public void test5337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5337");
        java.util.Hashtable<java.nio.FloatBuffer, java.util.PrimitiveIterator<java.lang.Integer, java.util.function.IntConsumer>> floatBufferMap0 = new java.util.Hashtable<java.nio.FloatBuffer, java.util.PrimitiveIterator<java.lang.Integer, java.util.function.IntConsumer>>();
    }

    @Test
    public void test5338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5338");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Duration duration2 = new org.joda.time.Duration(readableInstant0, readableInstant1);
        org.joda.time.Duration duration4 = duration2.withMillis((-1L));
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((long) 3, chronology6);
        org.joda.time.DateTime.Property property8 = dateTime7.dayOfYear();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight((java.lang.Object) dateTime7, chronology9);
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight10.minusMonths((-1));
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight10.withDayOfYear((int) ' ');
        org.joda.time.PeriodType periodType15 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period16 = duration4.toPeriodFrom((org.joda.time.ReadableInstant) dateMidnight10, periodType15);
        org.joda.time.Period period19 = org.joda.time.Period.ZERO;
        org.joda.time.Period period20 = period19.normalizedStandard();
        org.joda.time.Period period22 = period20.minusMinutes((int) ' ');
        org.joda.time.Period period24 = period22.minusMonths((int) (byte) 0);
        org.joda.time.PeriodType periodType25 = period24.getPeriodType();
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod((long) '4', 86399L, periodType25);
        org.joda.time.Period period27 = duration4.toPeriod(periodType25);
        int int28 = periodType25.size();
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(periodType15);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(periodType25);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 8 + "'", int28 == 8);
    }

    @Test
    public void test5339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5339");
        java.text.Format.Field field0 = null;
        java.text.FieldPosition fieldPosition1 = new java.text.FieldPosition(field0);
        java.lang.Object obj2 = null;
        boolean boolean3 = fieldPosition1.equals(obj2);
        java.text.Format.Field field4 = fieldPosition1.getFieldAttribute();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(field4);
    }

    @Test
    public void test5340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5340");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.now();
        java.time.LocalDateTime localDateTime2 = localDateTime0.minusYears((long) (byte) 10);
        java.time.LocalDateTime localDateTime3 = java.time.LocalDateTime.now();
        java.time.LocalDateTime localDateTime5 = localDateTime3.minusYears((long) (byte) 10);
        boolean boolean6 = localDateTime0.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime5);
        java.time.LocalDateTime localDateTime8 = localDateTime5.withSecond((int) '+');
        java.time.LocalDateTime localDateTime10 = localDateTime8.minusWeeks((long) 57);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) 3, chronology12);
        org.joda.time.DateTime.Property property14 = dateTime13.dayOfYear();
        org.joda.time.Interval interval15 = property14.toInterval();
        org.joda.time.Period period16 = org.joda.time.Period.ZERO;
        org.joda.time.Period period17 = period16.normalizedStandard();
        org.joda.time.Period period19 = period17.minusMinutes((int) ' ');
        org.joda.time.Period period21 = period19.withMinutes(32769);
        boolean boolean22 = interval15.equals((java.lang.Object) period21);
        boolean boolean23 = localDateTime10.equals((java.lang.Object) boolean22);
        java.nio.file.attribute.FileTime fileTime25 = java.nio.file.attribute.FileTime.fromMillis((long) 21);
        java.time.Instant instant26 = fileTime25.toInstant();
        java.util.GregorianCalendar gregorianCalendar33 = new java.util.GregorianCalendar(12, 4096, 7, (-1), (int) (short) 10);
        int int34 = gregorianCalendar33.getWeeksInWeekYear();
        java.lang.String str35 = gregorianCalendar33.getCalendarType();
        java.time.ZonedDateTime zonedDateTime36 = gregorianCalendar33.toZonedDateTime();
        java.time.ZonedDateTime zonedDateTime38 = zonedDateTime36.minusMonths((long) 10);
        java.time.OffsetDateTime offsetDateTime39 = zonedDateTime38.toOffsetDateTime();
        java.time.ZoneOffset zoneOffset43 = java.time.ZoneOffset.ofHoursMinutes(1, 10);
        java.time.temporal.ChronoField chronoField44 = java.time.temporal.ChronoField.HOUR_OF_DAY;
        java.time.temporal.ValueRange valueRange45 = chronoField44.range();
        boolean boolean46 = zoneOffset43.isSupported((java.time.temporal.TemporalField) chronoField44);
        java.time.temporal.TemporalUnit temporalUnit47 = chronoField44.getBaseUnit();
        java.time.OffsetDateTime offsetDateTime48 = offsetDateTime39.plus((long) 'u', temporalUnit47);
        java.time.Instant instant49 = instant26.minus((long) 78000000, temporalUnit47);
        boolean boolean50 = localDateTime10.isSupported(temporalUnit47);
        java.lang.String str51 = temporalUnit47.toString();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(fileTime25);
        org.junit.Assert.assertNotNull(instant26);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 52 + "'", int34 == 52);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "gregory" + "'", str35, "gregory");
        org.junit.Assert.assertNotNull(zonedDateTime36);
        org.junit.Assert.assertNotNull(zonedDateTime38);
        org.junit.Assert.assertNotNull(offsetDateTime39);
        org.junit.Assert.assertNotNull(zoneOffset43);
        org.junit.Assert.assertTrue("'" + chronoField44 + "' != '" + java.time.temporal.ChronoField.HOUR_OF_DAY + "'", chronoField44.equals(java.time.temporal.ChronoField.HOUR_OF_DAY));
        org.junit.Assert.assertNotNull(valueRange45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + temporalUnit47 + "' != '" + java.time.temporal.ChronoUnit.HOURS + "'", temporalUnit47.equals(java.time.temporal.ChronoUnit.HOURS));
        org.junit.Assert.assertNotNull(offsetDateTime48);
        org.junit.Assert.assertNotNull(instant49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "Hours" + "'", str51, "Hours");
    }

    @Test
    public void test5341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5341");
        java.util.OptionalInt optionalInt1 = java.util.OptionalInt.of(256);
        boolean boolean2 = optionalInt1.isPresent();
        java.util.LongSummaryStatistics longSummaryStatistics3 = new java.util.LongSummaryStatistics();
        longSummaryStatistics3.accept(3);
        long long6 = longSummaryStatistics3.getMax();
        java.util.LongSummaryStatistics longSummaryStatistics7 = new java.util.LongSummaryStatistics();
        longSummaryStatistics7.accept(3);
        java.util.function.LongConsumer longConsumer10 = longSummaryStatistics3.andThen((java.util.function.LongConsumer) longSummaryStatistics7);
        java.util.LongSummaryStatistics longSummaryStatistics11 = new java.util.LongSummaryStatistics();
        longSummaryStatistics11.accept(3);
        long long14 = longSummaryStatistics11.getMax();
        double double15 = longSummaryStatistics11.getAverage();
        longSummaryStatistics11.accept(6);
        java.util.function.LongConsumer longConsumer18 = longSummaryStatistics3.andThen((java.util.function.LongConsumer) longSummaryStatistics11);
        java.util.stream.IntStream intStream21 = java.util.stream.IntStream.rangeClosed(100, (int) '4');
        java.util.IntSummaryStatistics intSummaryStatistics22 = new java.util.IntSummaryStatistics();
        intStream21.forEach((java.util.function.IntConsumer) intSummaryStatistics22);
        java.util.IntSummaryStatistics intSummaryStatistics24 = new java.util.IntSummaryStatistics();
        intSummaryStatistics24.accept(57);
        intSummaryStatistics22.combine(intSummaryStatistics24);
        java.util.function.IntConsumer intConsumer28 = longSummaryStatistics11.andThen((java.util.function.IntConsumer) intSummaryStatistics22);
        long long29 = intSummaryStatistics22.getCount();
        long long30 = intSummaryStatistics22.getCount();
        optionalInt1.ifPresent((java.util.function.IntConsumer) intSummaryStatistics22);
        long long32 = intSummaryStatistics22.getCount();
        org.junit.Assert.assertNotNull(optionalInt1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertEquals(longSummaryStatistics3.toString(), "LongSummaryStatistics{count=1, sum=3, min=3, average=3.000000, max=3}");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 3L + "'", long6 == 3L);
        org.junit.Assert.assertEquals(longSummaryStatistics7.toString(), "LongSummaryStatistics{count=1, sum=3, min=3, average=3.000000, max=3}");
        org.junit.Assert.assertNotNull(longConsumer10);
        org.junit.Assert.assertEquals(longSummaryStatistics11.toString(), "LongSummaryStatistics{count=2, sum=9, min=3, average=4.500000, max=6}");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 3L + "'", long14 == 3L);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 3.0d + "'", double15 == 3.0d);
        org.junit.Assert.assertNotNull(longConsumer18);
        org.junit.Assert.assertNotNull(intStream21);
        org.junit.Assert.assertEquals(intSummaryStatistics22.toString(), "IntSummaryStatistics{count=2, sum=313, min=57, average=156.500000, max=256}");
        org.junit.Assert.assertEquals(intSummaryStatistics24.toString(), "IntSummaryStatistics{count=1, sum=57, min=57, average=57.000000, max=57}");
        org.junit.Assert.assertNotNull(intConsumer28);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 1L + "'", long29 == 1L);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 1L + "'", long30 == 1L);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 2L + "'", long32 == 2L);
    }

    @Test
    public void test5342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5342");
        // The following exception was thrown during execution in test generation
        try {
            java.time.Month month1 = java.time.Month.of(197);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for MonthOfYear: 197");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
    }

    @Test
    public void test5343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5343");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withYearOfCentury((int) 'a');
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.plusSeconds(6);
        org.joda.time.DateTime dateTime6 = localDateTime3.toDateTime();
        int int7 = localDateTime3.getMinuteOfHour();
        org.joda.time.PeriodType periodType8 = org.joda.time.PeriodType.years();
        org.joda.time.DurationFieldType durationFieldType9 = org.joda.time.DurationFieldType.halfdays();
        int int10 = periodType8.indexOf(durationFieldType9);
        java.lang.String str11 = durationFieldType9.toString();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime3.withFieldAdded(durationFieldType9, (int) (byte) 100);
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.Duration duration16 = new org.joda.time.Duration(readableInstant14, readableInstant15);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.PeriodType periodType18 = null;
        org.joda.time.Period period19 = duration16.toPeriodTo(readableInstant17, periodType18);
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.Duration duration22 = new org.joda.time.Duration(readableInstant20, readableInstant21);
        long long23 = duration22.getMillis();
        boolean boolean24 = duration16.isShorterThan((org.joda.time.ReadableDuration) duration22);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((long) 3, chronology26);
        org.joda.time.DateTime.Property property28 = dateTime27.dayOfYear();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.DateMidnight dateMidnight30 = new org.joda.time.DateMidnight((java.lang.Object) dateTime27, chronology29);
        org.joda.time.MutableDateTime mutableDateTime31 = dateTime27.toMutableDateTime();
        mutableDateTime31.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property34 = mutableDateTime31.dayOfWeek();
        org.joda.time.MutableDateTime.Property property35 = mutableDateTime31.year();
        org.joda.time.MutableDateTime.Property property36 = mutableDateTime31.weekyear();
        boolean boolean37 = duration16.equals((java.lang.Object) mutableDateTime31);
        mutableDateTime31.addMonths((int) ' ');
        mutableDateTime31.add((long) (byte) 10);
        org.joda.time.Period period42 = org.joda.time.Period.ZERO;
        org.joda.time.Period period43 = period42.normalizedStandard();
        org.joda.time.Period period45 = period42.plusHours(2);
        java.time.chrono.IsoEra isoEra46 = java.time.chrono.IsoEra.CE;
        boolean boolean47 = period45.equals((java.lang.Object) isoEra46);
        int int48 = period45.getMinutes();
        mutableDateTime31.add((org.joda.time.ReadablePeriod) period45);
        java.util.TimeZone timeZone51 = null;
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.forTimeZone(timeZone51);
        org.joda.time.DateMidnight dateMidnight53 = new org.joda.time.DateMidnight((long) 1970, dateTimeZone52);
        long long56 = dateTimeZone52.convertLocalToUTC((long) 3, false);
        long long59 = dateTimeZone52.convertLocalToUTC(0L, true);
        mutableDateTime31.setZoneRetainFields(dateTimeZone52);
        java.lang.String str61 = dateTimeZone52.toString();
        org.joda.time.chrono.EthiopicChronology ethiopicChronology62 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone52);
        org.joda.time.DateTimeField dateTimeField63 = ethiopicChronology62.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone64 = ethiopicChronology62.getZone();
        org.joda.time.DateTimeField dateTimeField65 = ethiopicChronology62.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField66 = ethiopicChronology62.minuteOfDay();
        org.joda.time.Chronology chronology67 = ethiopicChronology62.withUTC();
        org.joda.time.DateTimeField dateTimeField68 = ethiopicChronology62.halfdayOfDay();
        org.joda.time.DurationField durationField69 = durationFieldType9.getField((org.joda.time.Chronology) ethiopicChronology62);
        long long72 = durationField69.getValueAsLong((long) 576, (long) 35);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(dateTime6);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 41 + "'", int7 == 41);
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertNotNull(durationFieldType9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "halfdays" + "'", str11, "halfdays");
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(mutableDateTime31);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertTrue("'" + isoEra46 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra46.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 3L + "'", long56 == 3L);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 0L + "'", long59 == 0L);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "Etc/UTC" + "'", str61, "Etc/UTC");
        org.junit.Assert.assertNotNull(ethiopicChronology62);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(dateTimeZone64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(chronology67);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertNotNull(durationField69);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 0L + "'", long72 == 0L);
    }

    @Test
    public void test5344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5344");
        java.io.File file0 = null;
        java.io.File file2 = new java.io.File(file0, "1970-01-01T00:00:00.003Z");
        long long3 = file2.lastModified();
        boolean boolean5 = file2.setLastModified((long) 19043);
        java.io.File file6 = null;
        java.io.File file8 = new java.io.File(file6, "1970-01-01T00:00:00.003Z");
        java.net.URL uRL9 = file8.toURL();
        boolean boolean10 = file2.renameTo(file8);
        org.junit.Assert.assertNull("file2.getParent() == null", file2.getParent());
        org.junit.Assert.assertEquals(file2.toString(), "1970-01-01T00:00:00.003Z");
// flaky:         org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1645436490000L + "'", long3 == 1645436490000L);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull("file8.getParent() == null", file8.getParent());
        org.junit.Assert.assertEquals(file8.toString(), "1970-01-01T00:00:00.003Z");
        org.junit.Assert.assertNotNull(uRL9);
// flaky:         org.junit.Assert.assertEquals(uRL9.toString(), "file:/experiment/1970-01-01T00:00:00.003Z");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test5345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5345");
        org.joda.time.Period period1 = org.joda.time.Period.hours(1265550);
        org.junit.Assert.assertNotNull(period1);
    }

    @Test
    public void test5346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5346");
        org.joda.time.PeriodType periodType1 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalTime localTime4 = new org.joda.time.LocalTime((long) 0, chronology3);
        org.joda.time.Chronology chronology5 = localTime4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.weekyearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime7 = org.joda.time.MutableDateTime.now(chronology5);
        org.joda.time.DateTimeField dateTimeField8 = chronology5.monthOfYear();
        org.joda.time.Period period9 = new org.joda.time.Period(3601000000001L, periodType1, chronology5);
        org.joda.time.MutablePeriod mutablePeriod10 = period9.toMutablePeriod();
        org.joda.time.PeriodType periodType11 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType12 = periodType11.withMinutesRemoved();
        org.joda.time.PeriodType periodType13 = periodType12.withMonthsRemoved();
        org.joda.time.PeriodType periodType14 = periodType13.withSecondsRemoved();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period15 = new org.joda.time.Period((java.lang.Object) mutablePeriod10, periodType13);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'days'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(mutablePeriod10);
        org.junit.Assert.assertNotNull(periodType11);
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertNotNull(periodType14);
    }

    @Test
    public void test5347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5347");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 3, chronology1);
        org.joda.time.DateTime.Property property3 = dateTime2.dayOfYear();
        org.joda.time.Interval interval4 = property3.toInterval();
        org.joda.time.DateTimeField dateTimeField5 = property3.getField();
        org.joda.time.DateTime dateTime7 = property3.addWrapFieldToCopy(0);
        org.joda.time.DateTime dateTime9 = property3.setCopy(34);
        java.lang.String str10 = dateTime9.toString();
        org.joda.time.DateTime dateTime12 = dateTime9.withMillisOfDay(11);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime14 = dateTime12.withMonthOfYear(2022);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2022 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1970-02-03T00:00:00.003Z" + "'", str10, "1970-02-03T00:00:00.003Z");
        org.junit.Assert.assertNotNull(dateTime12);
    }

    @Test
    public void test5348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5348");
        java.time.ZoneOffset zoneOffset2 = java.time.ZoneOffset.ofHoursMinutes(1, 10);
        java.time.LocalDate localDate3 = java.time.LocalDate.now((java.time.ZoneId) zoneOffset2);
        java.time.OffsetDateTime offsetDateTime4 = java.time.OffsetDateTime.now((java.time.ZoneId) zoneOffset2);
        org.junit.Assert.assertNotNull(zoneOffset2);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(offsetDateTime4);
    }

    @Test
    public void test5349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5349");
        java.time.LocalDate localDate1 = java.time.LocalDate.ofEpochDay((long) ' ');
        java.time.OffsetTime offsetTime2 = java.time.OffsetTime.MAX;
        java.time.LocalTime localTime3 = offsetTime2.toLocalTime();
        java.lang.String str4 = offsetTime2.toString();
        java.time.Duration duration5 = java.time.Duration.ZERO;
        java.lang.String str6 = duration5.toString();
        java.time.OffsetTime offsetTime7 = offsetTime2.plus((java.time.temporal.TemporalAmount) duration5);
        java.time.LocalTime localTime8 = offsetTime2.toLocalTime();
        java.time.chrono.ChronoLocalDateTime<?> wildcardChronoLocalDateTime9 = localDate1.atTime(localTime8);
        java.time.LocalDate localDate11 = localDate1.minusWeeks((long) 2097);
        java.util.TimeZone timeZone13 = null;
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone13);
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight((long) 1970, dateTimeZone14);
        long long18 = dateTimeZone14.convertLocalToUTC((long) 3, false);
        long long21 = dateTimeZone14.convertLocalToUTC(0L, true);
        boolean boolean22 = localDate1.equals((java.lang.Object) true);
        java.util.GregorianCalendar gregorianCalendar28 = new java.util.GregorianCalendar(12, 4096, 7, (-1), (int) (short) 10);
        int int29 = gregorianCalendar28.getWeeksInWeekYear();
        java.lang.String str30 = gregorianCalendar28.getCalendarType();
        java.time.ZonedDateTime zonedDateTime31 = gregorianCalendar28.toZonedDateTime();
        java.time.ZonedDateTime zonedDateTime33 = zonedDateTime31.minusMonths((long) 10);
        java.time.chrono.ChronoZonedDateTime<java.time.LocalDate> localDateChronoZonedDateTime34 = zonedDateTime31.withEarlierOffsetAtOverlap();
        int int35 = zonedDateTime31.getDayOfYear();
        java.time.temporal.ChronoField chronoField36 = java.time.temporal.ChronoField.NANO_OF_SECOND;
        java.time.ZonedDateTime zonedDateTime38 = zonedDateTime31.with((java.time.temporal.TemporalField) chronoField36, (long) 2012);
        boolean boolean39 = localDate1.isSupported((java.time.temporal.TemporalField) chronoField36);
        int int40 = localDate1.lengthOfYear();
        java.util.GregorianCalendar gregorianCalendar46 = new java.util.GregorianCalendar(12, 4096, 7, (-1), (int) (short) 10);
        int int47 = gregorianCalendar46.getWeeksInWeekYear();
        java.util.TimeZone timeZone48 = gregorianCalendar46.getTimeZone();
        java.time.ZoneId zoneId49 = timeZone48.toZoneId();
        java.time.LocalTime localTime50 = java.time.LocalTime.now(zoneId49);
        java.time.LocalDateTime localDateTime51 = java.time.LocalDateTime.of(localDate1, localTime50);
        org.junit.Assert.assertNotNull(localDate1);
        org.junit.Assert.assertNotNull(offsetTime2);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "23:59:59.999999999-18:00" + "'", str4, "23:59:59.999999999-18:00");
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "PT0S" + "'", str6, "PT0S");
        org.junit.Assert.assertNotNull(offsetTime7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(wildcardChronoLocalDateTime9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 3L + "'", long18 == 3L);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 52 + "'", int29 == 52);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "gregory" + "'", str30, "gregory");
        org.junit.Assert.assertNotNull(zonedDateTime31);
        org.junit.Assert.assertNotNull(zonedDateTime33);
        org.junit.Assert.assertNotNull(localDateChronoZonedDateTime34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 127 + "'", int35 == 127);
        org.junit.Assert.assertTrue("'" + chronoField36 + "' != '" + java.time.temporal.ChronoField.NANO_OF_SECOND + "'", chronoField36.equals(java.time.temporal.ChronoField.NANO_OF_SECOND));
        org.junit.Assert.assertNotNull(zonedDateTime38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 365 + "'", int40 == 365);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 52 + "'", int47 == 52);
        org.junit.Assert.assertNotNull(timeZone48);
// flaky:         org.junit.Assert.assertEquals(timeZone48.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(zoneId49);
        org.junit.Assert.assertNotNull(localTime50);
        org.junit.Assert.assertNotNull(localDateTime51);
    }

    @Test
    public void test5350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5350");
        java.util.stream.LongStream longStream1 = java.util.stream.LongStream.of(0L);
        java.util.stream.LongStream longStream2 = longStream1.unordered();
        java.util.stream.DoubleStream doubleStream3 = longStream2.asDoubleStream();
        java.util.OptionalDouble optionalDouble4 = doubleStream3.findFirst();
        double double6 = optionalDouble4.orElse((double) 2070);
        org.junit.Assert.assertNotNull(longStream1);
        org.junit.Assert.assertNotNull(longStream2);
        org.junit.Assert.assertNotNull(doubleStream3);
        org.junit.Assert.assertNotNull(optionalDouble4);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
    }

    @Test
    public void test5351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5351");
        java.time.LocalDate localDate1 = java.time.LocalDate.ofEpochDay((long) ' ');
        java.time.OffsetTime offsetTime2 = java.time.OffsetTime.MAX;
        java.time.LocalTime localTime3 = offsetTime2.toLocalTime();
        java.lang.String str4 = offsetTime2.toString();
        java.time.Duration duration5 = java.time.Duration.ZERO;
        java.lang.String str6 = duration5.toString();
        java.time.OffsetTime offsetTime7 = offsetTime2.plus((java.time.temporal.TemporalAmount) duration5);
        java.time.LocalTime localTime8 = offsetTime2.toLocalTime();
        java.time.chrono.ChronoLocalDateTime<?> wildcardChronoLocalDateTime9 = localDate1.atTime(localTime8);
        java.time.LocalDate localDate11 = localDate1.minusYears((long) 34);
        java.time.Month month12 = localDate1.getMonth();
        java.time.LocalTime localTime13 = java.time.LocalTime.NOON;
        java.time.LocalTime localTime15 = localTime13.withNano(32769);
        java.time.LocalDateTime localDateTime16 = localDate1.atTime(localTime13);
        // The following exception was thrown during execution in test generation
        try {
            java.time.LocalDateTime localDateTime18 = localDateTime16.plusYears(4012278051142L);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for Year (valid values -999999999 - 999999999): 4012278053112");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate1);
        org.junit.Assert.assertNotNull(offsetTime2);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "23:59:59.999999999-18:00" + "'", str4, "23:59:59.999999999-18:00");
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "PT0S" + "'", str6, "PT0S");
        org.junit.Assert.assertNotNull(offsetTime7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(wildcardChronoLocalDateTime9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertTrue("'" + month12 + "' != '" + java.time.Month.FEBRUARY + "'", month12.equals(java.time.Month.FEBRUARY));
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(localDateTime16);
    }

    @Test
    public void test5352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5352");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime2 = org.joda.time.MutableDateTime.parse("1970-01-01T00:00:00.00000001Z", dateTimeFormatter1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test5353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5353");
        java.nio.charset.Charset charset0 = java.nio.charset.Charset.defaultCharset();
        java.nio.charset.CharsetDecoder charsetDecoder1 = charset0.newDecoder();
        java.nio.charset.Charset charset2 = java.nio.charset.Charset.defaultCharset();
        java.nio.charset.CharsetDecoder charsetDecoder3 = charset2.newDecoder();
        java.nio.charset.Charset charset4 = java.nio.charset.Charset.defaultCharset();
        boolean boolean5 = charset2.contains(charset4);
        int int6 = charset0.compareTo(charset2);
        java.lang.String str7 = charset2.toString();
        org.junit.Assert.assertNotNull(charset0);
        org.junit.Assert.assertNotNull(charsetDecoder1);
        org.junit.Assert.assertNotNull(charset2);
        org.junit.Assert.assertNotNull(charsetDecoder3);
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "US-ASCII" + "'", str7, "US-ASCII");
    }

    @Test
    public void test5354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5354");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.now();
        java.time.temporal.ChronoField chronoField1 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime3 = localDateTime0.with((java.time.temporal.TemporalField) chronoField1, (long) 10);
        java.time.LocalDateTime localDateTime5 = localDateTime0.minusMinutes((long) 12);
        java.time.chrono.Chronology chronology6 = localDateTime0.getChronology();
        java.lang.String str7 = chronology6.getId();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertTrue("'" + chronoField1 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField1.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "ISO" + "'", str7, "ISO");
    }

    @Test
    public void test5355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5355");
        java.io.File file0 = null;
        java.io.File file2 = new java.io.File(file0, "1970-01-01T00:00:00.003Z");
        java.net.URL uRL3 = file2.toURL();
        boolean boolean4 = file2.canRead();
        java.nio.file.Path path5 = file2.toPath();
        java.nio.file.Path path6 = path5.toAbsolutePath();
        java.nio.file.Path path7 = path5.getRoot();
        java.io.File file8 = null;
        java.io.File file10 = new java.io.File(file8, "1970-01-01T00:00:00.003Z");
        java.net.URL uRL11 = file10.toURL();
        boolean boolean12 = file10.canRead();
        java.nio.file.Path path13 = file10.toPath();
        java.nio.file.Path path14 = path13.toAbsolutePath();
        java.io.File file15 = null;
        java.io.File file17 = new java.io.File(file15, "1970-01-01T00:00:00.003Z");
        java.net.URL uRL18 = file17.toURL();
        boolean boolean19 = file17.canRead();
        java.nio.file.Path path20 = file17.toPath();
        java.nio.file.Path path21 = path20.toAbsolutePath();
        java.io.File file22 = path21.toFile();
        boolean boolean23 = path13.endsWith(path21);
        int int24 = path21.getNameCount();
        // The following exception was thrown during execution in test generation
        try {
            java.nio.file.Path path25 = path7.resolve(path21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull("file2.getParent() == null", file2.getParent());
        org.junit.Assert.assertEquals(file2.toString(), "1970-01-01T00:00:00.003Z");
        org.junit.Assert.assertNotNull(uRL3);
// flaky:         org.junit.Assert.assertEquals(uRL3.toString(), "file:/experiment/1970-01-01T00:00:00.003Z");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(path5);
        org.junit.Assert.assertNotNull(path6);
        org.junit.Assert.assertNull(path7);
        org.junit.Assert.assertNull("file10.getParent() == null", file10.getParent());
        org.junit.Assert.assertEquals(file10.toString(), "1970-01-01T00:00:00.003Z");
        org.junit.Assert.assertNotNull(uRL11);
// flaky:         org.junit.Assert.assertEquals(uRL11.toString(), "file:/experiment/1970-01-01T00:00:00.003Z");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(path13);
        org.junit.Assert.assertNotNull(path14);
        org.junit.Assert.assertNull("file17.getParent() == null", file17.getParent());
        org.junit.Assert.assertEquals(file17.toString(), "1970-01-01T00:00:00.003Z");
        org.junit.Assert.assertNotNull(uRL18);
// flaky:         org.junit.Assert.assertEquals(uRL18.toString(), "file:/experiment/1970-01-01T00:00:00.003Z");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(path20);
        org.junit.Assert.assertNotNull(path21);
        org.junit.Assert.assertNotNull(file22);
// flaky:         org.junit.Assert.assertEquals(file22.getParent(), "/experiment");
// flaky:         org.junit.Assert.assertEquals(file22.toString(), "/experiment/1970-01-01T00:00:00.003Z");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
    }

    @Test
    public void test5356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5356");
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.Duration duration3 = new org.joda.time.Duration(readableInstant1, readableInstant2);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.PeriodType periodType5 = null;
        org.joda.time.Period period6 = duration3.toPeriodTo(readableInstant4, periodType5);
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.Duration duration9 = new org.joda.time.Duration(readableInstant7, readableInstant8);
        long long10 = duration9.getMillis();
        boolean boolean11 = duration3.isShorterThan((org.joda.time.ReadableDuration) duration9);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) 3, chronology13);
        org.joda.time.DateTime.Property property15 = dateTime14.dayOfYear();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight((java.lang.Object) dateTime14, chronology16);
        org.joda.time.MutableDateTime mutableDateTime18 = dateTime14.toMutableDateTime();
        mutableDateTime18.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime18.dayOfWeek();
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime18.year();
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime18.weekyear();
        boolean boolean24 = duration3.equals((java.lang.Object) mutableDateTime18);
        mutableDateTime18.addMonths((int) ' ');
        mutableDateTime18.add((long) (byte) 10);
        org.joda.time.Period period29 = org.joda.time.Period.ZERO;
        org.joda.time.Period period30 = period29.normalizedStandard();
        org.joda.time.Period period32 = period29.plusHours(2);
        java.time.chrono.IsoEra isoEra33 = java.time.chrono.IsoEra.CE;
        boolean boolean34 = period32.equals((java.lang.Object) isoEra33);
        int int35 = period32.getMinutes();
        mutableDateTime18.add((org.joda.time.ReadablePeriod) period32);
        java.util.TimeZone timeZone38 = null;
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forTimeZone(timeZone38);
        org.joda.time.DateMidnight dateMidnight40 = new org.joda.time.DateMidnight((long) 1970, dateTimeZone39);
        long long43 = dateTimeZone39.convertLocalToUTC((long) 3, false);
        long long46 = dateTimeZone39.convertLocalToUTC(0L, true);
        mutableDateTime18.setZoneRetainFields(dateTimeZone39);
        java.lang.String str48 = dateTimeZone39.toString();
        boolean boolean49 = dateTimeZone39.isFixed();
        org.joda.time.MutableDateTime mutableDateTime50 = new org.joda.time.MutableDateTime(1645434616L, dateTimeZone39);
        org.joda.time.MutableDateTime.Property property51 = mutableDateTime50.centuryOfEra();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime50.setDayOfMonth(56);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 56 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertTrue("'" + isoEra33 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra33.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 3L + "'", long43 == 3L);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "Etc/UTC" + "'", str48, "Etc/UTC");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(property51);
    }

    @Test
    public void test5357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5357");
        java.util.Set<java.lang.String> strSet0 = java.time.ZoneId.getAvailableZoneIds();
        java.util.stream.Stream<java.lang.String> strStream1 = strSet0.parallelStream();
        java.lang.Object[] objArray2 = strSet0.toArray();
        java.util.Spliterator<java.lang.String> strSpliterator3 = strSet0.spliterator();
        java.util.Set<java.lang.String> strSet4 = java.time.ZoneId.getAvailableZoneIds();
        java.util.stream.Stream<java.lang.String> strStream5 = strSet4.parallelStream();
        boolean boolean7 = strSet4.remove((java.lang.Object) 0);
        java.time.LocalTime localTime12 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime13 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime12);
        java.time.LocalTime localTime18 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime19 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime18);
        java.time.temporal.ChronoField chronoField20 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime22 = localTime18.with((java.time.temporal.TemporalField) chronoField20, (long) (short) 1);
        long long23 = localTime12.getLong((java.time.temporal.TemporalField) chronoField20);
        java.time.LocalTime localTime25 = localTime12.withSecond((int) (short) 1);
        java.time.temporal.ChronoField chronoField26 = java.time.temporal.ChronoField.SECOND_OF_DAY;
        java.time.temporal.ValueRange valueRange27 = localTime25.range((java.time.temporal.TemporalField) chronoField26);
        boolean boolean28 = strSet4.remove((java.lang.Object) chronoField26);
        boolean boolean29 = strSet0.retainAll((java.util.Collection<java.lang.String>) strSet4);
        java.util.Spliterator<java.lang.String> strSpliterator30 = strSet0.spliterator();
        boolean boolean32 = strSpliterator30.hasCharacteristics(508);
        long long33 = strSpliterator30.estimateSize();
        org.junit.Assert.assertNotNull(strSet0);
        org.junit.Assert.assertNotNull(strStream1);
        org.junit.Assert.assertNotNull(objArray2);
        org.junit.Assert.assertNotNull(strSpliterator3);
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNotNull(strStream5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertTrue("'" + chronoField20 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField20.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 3601000000001L + "'", long23 == 3601000000001L);
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertTrue("'" + chronoField26 + "' != '" + java.time.temporal.ChronoField.SECOND_OF_DAY + "'", chronoField26.equals(java.time.temporal.ChronoField.SECOND_OF_DAY));
        org.junit.Assert.assertNotNull(valueRange27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(strSpliterator30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 600L + "'", long33 == 600L);
    }

    @Test
    public void test5358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5358");
        java.util.Set<java.lang.String> strSet0 = java.time.ZoneId.getAvailableZoneIds();
        java.util.stream.Stream<java.lang.String> strStream1 = strSet0.parallelStream();
        boolean boolean3 = strSet0.contains((java.lang.Object) 1.0d);
        java.util.Spliterator<java.lang.String> strSpliterator4 = strSet0.spliterator();
        boolean boolean6 = strSpliterator4.hasCharacteristics(0);
        org.junit.Assert.assertNotNull(strSet0);
        org.junit.Assert.assertNotNull(strStream1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(strSpliterator4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
    }

    @Test
    public void test5359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5359");
        org.joda.time.Period period0 = org.joda.time.Period.ZERO;
        org.joda.time.Period period2 = period0.minusMillis(7);
        int int3 = period0.size();
        org.junit.Assert.assertNotNull(period0);
        org.junit.Assert.assertNotNull(period2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8 + "'", int3 == 8);
    }

    @Test
    public void test5360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5360");
        java.nio.charset.Charset charset0 = java.nio.charset.Charset.defaultCharset();
        java.nio.charset.CharsetDecoder charsetDecoder1 = charset0.newDecoder();
        java.nio.charset.CharsetDecoder charsetDecoder2 = charset0.newDecoder();
        java.nio.charset.Charset charset3 = java.nio.charset.Charset.defaultCharset();
        java.nio.charset.CharsetDecoder charsetDecoder4 = charset3.newDecoder();
        java.nio.charset.CharsetDecoder charsetDecoder5 = charset3.newDecoder();
        java.nio.charset.CodingErrorAction codingErrorAction6 = charsetDecoder5.malformedInputAction();
        java.nio.charset.CharsetDecoder charsetDecoder7 = charsetDecoder2.onUnmappableCharacter(codingErrorAction6);
        org.junit.Assert.assertNotNull(charset0);
        org.junit.Assert.assertNotNull(charsetDecoder1);
        org.junit.Assert.assertNotNull(charsetDecoder2);
        org.junit.Assert.assertNotNull(charset3);
        org.junit.Assert.assertNotNull(charsetDecoder4);
        org.junit.Assert.assertNotNull(charsetDecoder5);
        org.junit.Assert.assertNotNull(codingErrorAction6);
        org.junit.Assert.assertNotNull(charsetDecoder7);
    }

    @Test
    public void test5361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5361");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 3, chronology1);
        org.joda.time.DateTime.Property property3 = dateTime2.dayOfYear();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight((java.lang.Object) dateTime2, chronology4);
        org.joda.time.MutableDateTime mutableDateTime6 = dateTime2.toMutableDateTime();
        mutableDateTime6.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime6.dayOfWeek();
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime6.year();
        org.joda.time.MutableDateTime mutableDateTime11 = property10.roundFloor();
        mutableDateTime11.setMillis(313632000000L);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
    }

    @Test
    public void test5362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5362");
        java.util.stream.IntStream intStream2 = java.util.stream.IntStream.rangeClosed(100, (int) '4');
        java.util.IntSummaryStatistics intSummaryStatistics3 = new java.util.IntSummaryStatistics();
        intStream2.forEach((java.util.function.IntConsumer) intSummaryStatistics3);
        java.util.stream.IntStream intStream5 = intStream2.parallel();
        intStream2.close();
        org.junit.Assert.assertNotNull(intStream2);
        org.junit.Assert.assertEquals(intSummaryStatistics3.toString(), "IntSummaryStatistics{count=0, sum=0, min=2147483647, average=0.000000, max=-2147483648}");
        org.junit.Assert.assertNotNull(intStream5);
    }

    @Test
    public void test5363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5363");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime(122, 83400, 574);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 122 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test5364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5364");
        java.io.File file0 = null;
        java.io.File file2 = new java.io.File(file0, "1970-01-01T00:00:00.003Z");
        boolean boolean3 = file2.exists();
        boolean boolean4 = file2.mkdirs();
        java.net.URI uRI5 = file2.toURI();
        java.net.URI uRI6 = file2.toURI();
        java.net.URI uRI8 = new java.net.URI("hi!");
        java.lang.String str9 = uRI8.getRawAuthority();
        java.lang.String str10 = uRI8.toString();
        java.lang.String str11 = uRI8.getRawFragment();
        java.net.URI uRI13 = new java.net.URI("hi!");
        java.lang.String str14 = uRI13.toASCIIString();
        java.net.URI uRI15 = uRI8.resolve(uRI13);
        java.net.URI uRI16 = uRI8.parseServerAuthority();
        java.net.URI uRI20 = new java.net.URI("x-windows-iso2022jp", "java.nio.charset.CharacterCodingException", "German");
        java.net.URI uRI21 = uRI16.relativize(uRI20);
        java.lang.String str22 = uRI21.getFragment();
        java.net.URI uRI23 = uRI6.resolve(uRI21);
        java.lang.String str24 = uRI23.getRawSchemeSpecificPart();
        org.junit.Assert.assertNull("file2.getParent() == null", file2.getParent());
        org.junit.Assert.assertEquals(file2.toString(), "1970-01-01T00:00:00.003Z");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(uRI5);
        org.junit.Assert.assertNotNull(uRI6);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "hi!" + "'", str14, "hi!");
        org.junit.Assert.assertNotNull(uRI15);
        org.junit.Assert.assertNotNull(uRI16);
        org.junit.Assert.assertNotNull(uRI21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "German" + "'", str22, "German");
        org.junit.Assert.assertNotNull(uRI23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "java.nio.charset.CharacterCodingException" + "'", str24, "java.nio.charset.CharacterCodingException");
    }

    @Test
    public void test5365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5365");
        org.joda.time.Period period0 = org.joda.time.Period.ZERO;
        org.joda.time.Period period1 = period0.normalizedStandard();
        org.joda.time.Period period3 = period1.minusMinutes((int) ' ');
        org.joda.time.Period period5 = period3.withMinutes(32769);
        int int6 = period3.getMonths();
        org.joda.time.Period period8 = period3.withMillis(21);
        org.joda.time.Period period10 = period8.withSeconds(781);
        int int11 = period10.getMillis();
        org.joda.time.Period period13 = period10.minusHours(27);
        org.junit.Assert.assertNotNull(period0);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 21 + "'", int11 == 21);
        org.junit.Assert.assertNotNull(period13);
    }

    @Test
    public void test5366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5366");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((long) 0, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) 3, chronology4);
        org.joda.time.DateTime.Property property6 = dateTime5.dayOfYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateMidnight dateMidnight8 = new org.joda.time.DateMidnight((java.lang.Object) dateTime5, chronology7);
        org.joda.time.DateTime dateTime9 = localTime2.toDateTime((org.joda.time.ReadableInstant) dateTime5);
        int int10 = localTime2.getMinuteOfHour();
        java.util.GregorianCalendar gregorianCalendar16 = new java.util.GregorianCalendar(12, 4096, 7, (-1), (int) (short) 10);
        int int17 = gregorianCalendar16.getWeeksInWeekYear();
        java.lang.String str18 = gregorianCalendar16.getCalendarType();
        java.time.ZonedDateTime zonedDateTime19 = gregorianCalendar16.toZonedDateTime();
        java.time.ZonedDateTime zonedDateTime21 = zonedDateTime19.minusMonths((long) 10);
        java.time.ZonedDateTime zonedDateTime23 = zonedDateTime21.withNano(52);
        java.time.LocalTime localTime28 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime29 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime28);
        long long30 = localTime29.toNanoOfDay();
        java.util.GregorianCalendar gregorianCalendar36 = new java.util.GregorianCalendar(12, 4096, 7, (-1), (int) (short) 10);
        int int37 = gregorianCalendar36.getWeeksInWeekYear();
        java.lang.String str38 = gregorianCalendar36.getCalendarType();
        java.time.ZonedDateTime zonedDateTime39 = gregorianCalendar36.toZonedDateTime();
        java.time.ZonedDateTime zonedDateTime41 = zonedDateTime39.minusMonths((long) 10);
        java.time.temporal.Temporal temporal42 = localTime29.adjustInto((java.time.temporal.Temporal) zonedDateTime41);
        java.time.LocalDateTime localDateTime43 = java.time.LocalDateTime.now();
        java.time.LocalDateTime localDateTime45 = localDateTime43.minusYears((long) (byte) 10);
        java.time.LocalDateTime localDateTime46 = java.time.LocalDateTime.now();
        java.time.LocalDateTime localDateTime48 = localDateTime46.minusYears((long) (byte) 10);
        boolean boolean49 = localDateTime43.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime48);
        java.time.OffsetTime offsetTime50 = java.time.OffsetTime.MAX;
        java.time.LocalTime localTime51 = offsetTime50.toLocalTime();
        java.time.OffsetTime offsetTime52 = java.time.OffsetTime.MAX;
        java.time.LocalTime localTime53 = offsetTime52.toLocalTime();
        java.lang.String str54 = offsetTime52.toString();
        java.time.Duration duration55 = java.time.Duration.ZERO;
        java.lang.String str56 = duration55.toString();
        java.time.OffsetTime offsetTime57 = offsetTime52.plus((java.time.temporal.TemporalAmount) duration55);
        java.time.OffsetTime offsetTime59 = offsetTime52.plusNanos((long) 0);
        java.time.LocalTime localTime64 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime65 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime64);
        java.time.temporal.ChronoField chronoField66 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime68 = localTime64.with((java.time.temporal.TemporalField) chronoField66, (long) (short) 1);
        java.util.Locale locale69 = java.util.Locale.GERMANY;
        java.lang.String str70 = chronoField66.getDisplayName(locale69);
        java.time.OffsetTime offsetTime72 = offsetTime59.with((java.time.temporal.TemporalField) chronoField66, (long) 28);
        long long73 = localTime51.getLong((java.time.temporal.TemporalField) chronoField66);
        java.time.temporal.TemporalUnit temporalUnit74 = chronoField66.getRangeUnit();
        boolean boolean75 = localDateTime43.isSupported(temporalUnit74);
        java.time.ZonedDateTime zonedDateTime76 = zonedDateTime41.truncatedTo(temporalUnit74);
        boolean boolean77 = zonedDateTime23.isEqual((java.time.chrono.ChronoZonedDateTime<java.time.LocalDate>) zonedDateTime41);
        org.joda.time.Chronology chronology78 = null;
        org.joda.time.LocalDateTime localDateTime79 = new org.joda.time.LocalDateTime(chronology78);
        org.joda.time.LocalDateTime localDateTime81 = localDateTime79.withYearOfCentury((int) 'a');
        int int82 = localDateTime81.getDayOfMonth();
        org.joda.time.LocalDateTime localDateTime84 = localDateTime81.plusYears((int) (short) 100);
        int int85 = localDateTime81.getSecondOfMinute();
        org.joda.time.Chronology chronology86 = null;
        org.joda.time.LocalDateTime localDateTime87 = new org.joda.time.LocalDateTime(chronology86);
        org.joda.time.LocalDateTime localDateTime89 = localDateTime87.withYearOfCentury((int) 'a');
        org.joda.time.LocalDateTime localDateTime91 = localDateTime89.plusSeconds(6);
        boolean boolean92 = localDateTime81.isEqual((org.joda.time.ReadablePartial) localDateTime89);
        org.joda.time.LocalDateTime localDateTime94 = localDateTime81.withWeekyear((int) '.');
        boolean boolean95 = zonedDateTime23.equals((java.lang.Object) localDateTime81);
        // The following exception was thrown during execution in test generation
        try {
            int int96 = localTime2.compareTo((org.joda.time.ReadablePartial) localDateTime81);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: ReadablePartial objects must have matching field types");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 52 + "'", int17 == 52);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "gregory" + "'", str18, "gregory");
        org.junit.Assert.assertNotNull(zonedDateTime19);
        org.junit.Assert.assertNotNull(zonedDateTime21);
        org.junit.Assert.assertNotNull(zonedDateTime23);
        org.junit.Assert.assertNotNull(localTime28);
        org.junit.Assert.assertNotNull(localTime29);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 3601000000001L + "'", long30 == 3601000000001L);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 52 + "'", int37 == 52);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "gregory" + "'", str38, "gregory");
        org.junit.Assert.assertNotNull(zonedDateTime39);
        org.junit.Assert.assertNotNull(zonedDateTime41);
        org.junit.Assert.assertNotNull(temporal42);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(offsetTime50);
        org.junit.Assert.assertNotNull(localTime51);
        org.junit.Assert.assertNotNull(offsetTime52);
        org.junit.Assert.assertNotNull(localTime53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "23:59:59.999999999-18:00" + "'", str54, "23:59:59.999999999-18:00");
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "PT0S" + "'", str56, "PT0S");
        org.junit.Assert.assertNotNull(offsetTime57);
        org.junit.Assert.assertNotNull(offsetTime59);
        org.junit.Assert.assertNotNull(localTime64);
        org.junit.Assert.assertNotNull(localTime65);
        org.junit.Assert.assertTrue("'" + chronoField66 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField66.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime68);
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "NanoOfDay" + "'", str70, "NanoOfDay");
        org.junit.Assert.assertNotNull(offsetTime72);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 86399999999999L + "'", long73 == 86399999999999L);
        org.junit.Assert.assertTrue("'" + temporalUnit74 + "' != '" + java.time.temporal.ChronoUnit.DAYS + "'", temporalUnit74.equals(java.time.temporal.ChronoUnit.DAYS));
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(zonedDateTime76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(localDateTime81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 21 + "'", int82 == 21);
        org.junit.Assert.assertNotNull(localDateTime84);
// flaky:         org.junit.Assert.assertTrue("'" + int85 + "' != '" + 53 + "'", int85 == 53);
        org.junit.Assert.assertNotNull(localDateTime89);
        org.junit.Assert.assertNotNull(localDateTime91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertNotNull(localDateTime94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
    }

    @Test
    public void test5367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5367");
        org.joda.time.Period period0 = org.joda.time.Period.ZERO;
        org.joda.time.Period period1 = period0.normalizedStandard();
        org.joda.time.Period period3 = period0.plusHours(2);
        java.time.chrono.IsoEra isoEra4 = java.time.chrono.IsoEra.CE;
        boolean boolean5 = period3.equals((java.lang.Object) isoEra4);
        java.time.LocalTime localTime10 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime11 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime10);
        java.time.LocalTime localTime16 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime17 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime16);
        java.time.temporal.ChronoField chronoField18 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime20 = localTime16.with((java.time.temporal.TemporalField) chronoField18, (long) (short) 1);
        long long21 = localTime10.getLong((java.time.temporal.TemporalField) chronoField18);
        boolean boolean22 = isoEra4.isSupported((java.time.temporal.TemporalField) chronoField18);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery23 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period24 = isoEra4.query(periodTemporalQuery23);
        boolean boolean25 = period24.isNegative();
        java.time.Period period27 = period24.plusDays((long) ' ');
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.LocalTime localTime30 = new org.joda.time.LocalTime((long) 0, chronology29);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((long) 3, chronology32);
        org.joda.time.DateTime.Property property34 = dateTime33.dayOfYear();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.DateMidnight dateMidnight36 = new org.joda.time.DateMidnight((java.lang.Object) dateTime33, chronology35);
        org.joda.time.DateTime dateTime37 = localTime30.toDateTime((org.joda.time.ReadableInstant) dateTime33);
        boolean boolean38 = period27.equals((java.lang.Object) localTime30);
        org.joda.time.Period period39 = org.joda.time.Period.ZERO;
        org.joda.time.Period period40 = period39.normalizedStandard();
        org.joda.time.Period period42 = period39.plusHours(2);
        java.time.chrono.IsoEra isoEra43 = java.time.chrono.IsoEra.CE;
        boolean boolean44 = period42.equals((java.lang.Object) isoEra43);
        java.time.LocalTime localTime49 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime50 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime49);
        java.time.LocalTime localTime55 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime56 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime55);
        java.time.temporal.ChronoField chronoField57 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime59 = localTime55.with((java.time.temporal.TemporalField) chronoField57, (long) (short) 1);
        long long60 = localTime49.getLong((java.time.temporal.TemporalField) chronoField57);
        boolean boolean61 = isoEra43.isSupported((java.time.temporal.TemporalField) chronoField57);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery62 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period63 = isoEra43.query(periodTemporalQuery62);
        boolean boolean64 = period63.isNegative();
        java.time.Period period66 = period63.plusDays((long) ' ');
        int int67 = period66.getYears();
        java.time.Period period68 = period27.minus((java.time.temporal.TemporalAmount) period66);
        int int69 = period68.getMonths();
        java.util.List<java.time.temporal.TemporalUnit> temporalUnitList70 = period68.getUnits();
        org.junit.Assert.assertNotNull(period0);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertTrue("'" + isoEra4 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra4.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertTrue("'" + chronoField18 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField18.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 3601000000001L + "'", long21 == 3601000000001L);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(periodTemporalQuery23);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertTrue("'" + isoEra43 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra43.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(localTime49);
        org.junit.Assert.assertNotNull(localTime50);
        org.junit.Assert.assertNotNull(localTime55);
        org.junit.Assert.assertNotNull(localTime56);
        org.junit.Assert.assertTrue("'" + chronoField57 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField57.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime59);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 3601000000001L + "'", long60 == 3601000000001L);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(periodTemporalQuery62);
        org.junit.Assert.assertNotNull(period63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(period66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(period68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNotNull(temporalUnitList70);
    }

    @Test
    public void test5368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5368");
        java.time.LocalDate localDate1 = java.time.LocalDate.ofEpochDay((long) ' ');
        java.time.OffsetTime offsetTime2 = java.time.OffsetTime.MAX;
        java.time.LocalTime localTime3 = offsetTime2.toLocalTime();
        java.lang.String str4 = offsetTime2.toString();
        java.time.Duration duration5 = java.time.Duration.ZERO;
        java.lang.String str6 = duration5.toString();
        java.time.OffsetTime offsetTime7 = offsetTime2.plus((java.time.temporal.TemporalAmount) duration5);
        java.time.LocalTime localTime8 = offsetTime2.toLocalTime();
        java.time.chrono.ChronoLocalDateTime<?> wildcardChronoLocalDateTime9 = localDate1.atTime(localTime8);
        java.time.LocalDate localDate11 = localDate1.minusWeeks((long) 2097);
        java.time.LocalDate localDate13 = localDate11.minusMonths((long) (byte) 0);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) 3, chronology15);
        org.joda.time.DateTime.Property property17 = dateTime16.dayOfYear();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight((java.lang.Object) dateTime16, chronology18);
        org.joda.time.MutableDateTime mutableDateTime20 = dateTime16.toMutableDateTime();
        org.joda.time.Days days21 = org.joda.time.Days.ONE;
        org.joda.time.MutableInterval mutableInterval22 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadablePeriod) days21);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) 3, chronology24);
        org.joda.time.DateTime.Property property26 = dateTime25.dayOfYear();
        org.joda.time.Interval interval27 = property26.toInterval();
        mutableInterval22.setInterval((org.joda.time.ReadableInterval) interval27);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((long) 3, chronology30);
        org.joda.time.DateTime.Property property32 = dateTime31.dayOfYear();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.DateMidnight dateMidnight34 = new org.joda.time.DateMidnight((java.lang.Object) dateTime31, chronology33);
        org.joda.time.DateMidnight.Property property35 = dateMidnight34.dayOfMonth();
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.Duration duration38 = new org.joda.time.Duration(readableInstant36, readableInstant37);
        org.joda.time.Duration duration40 = duration38.withMillis((-1L));
        org.joda.time.ReadableDuration readableDuration41 = null;
        org.joda.time.Duration duration42 = duration38.minus(readableDuration41);
        org.joda.time.DateMidnight dateMidnight43 = dateMidnight34.plus((org.joda.time.ReadableDuration) duration42);
        mutableInterval22.setDurationAfterStart((org.joda.time.ReadableDuration) duration42);
        org.joda.time.MutableDateTime mutableDateTime45 = new org.joda.time.MutableDateTime();
        boolean boolean46 = mutableInterval22.isBefore((org.joda.time.ReadableInstant) mutableDateTime45);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime((long) 3, chronology48);
        org.joda.time.DateTime.Property property50 = dateTime49.dayOfYear();
        int int51 = dateTime49.getHourOfDay();
        boolean boolean53 = dateTime49.isBefore((long) '/');
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime((long) 3, chronology55);
        org.joda.time.DateTime.Property property57 = dateTime56.dayOfYear();
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.DateMidnight dateMidnight59 = new org.joda.time.DateMidnight((java.lang.Object) dateTime56, chronology58);
        org.joda.time.DateMidnight dateMidnight61 = dateMidnight59.minusMonths((-1));
        org.joda.time.DateMidnight dateMidnight63 = dateMidnight59.withDayOfYear((int) ' ');
        mutableInterval22.setInterval((org.joda.time.ReadableInstant) dateTime49, (org.joda.time.ReadableInstant) dateMidnight63);
        boolean boolean65 = localDate11.equals((java.lang.Object) dateTime49);
        org.joda.time.DateTime dateTime66 = dateTime49.toDateTime();
        org.junit.Assert.assertNotNull(localDate1);
        org.junit.Assert.assertNotNull(offsetTime2);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "23:59:59.999999999-18:00" + "'", str4, "23:59:59.999999999-18:00");
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "PT0S" + "'", str6, "PT0S");
        org.junit.Assert.assertNotNull(offsetTime7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(wildcardChronoLocalDateTime9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertNotNull(days21);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(dateMidnight43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(dateMidnight61);
        org.junit.Assert.assertNotNull(dateMidnight63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(dateTime66);
    }

    @Test
    public void test5369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5369");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Duration duration2 = new org.joda.time.Duration(readableInstant0, readableInstant1);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = duration2.toPeriodTo(readableInstant3, periodType4);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.Duration duration8 = new org.joda.time.Duration(readableInstant6, readableInstant7);
        long long9 = duration8.getMillis();
        boolean boolean10 = duration2.isShorterThan((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) 3, chronology12);
        org.joda.time.DateTime.Property property14 = dateTime13.dayOfYear();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight((java.lang.Object) dateTime13, chronology15);
        org.joda.time.MutableDateTime mutableDateTime17 = dateTime13.toMutableDateTime();
        mutableDateTime17.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime17.dayOfWeek();
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime17.year();
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime17.weekyear();
        boolean boolean23 = duration2.equals((java.lang.Object) mutableDateTime17);
        mutableDateTime17.addMonths((int) ' ');
        mutableDateTime17.add((long) (byte) 10);
        org.joda.time.Period period28 = org.joda.time.Period.ZERO;
        org.joda.time.Period period29 = period28.normalizedStandard();
        org.joda.time.Period period31 = period28.plusHours(2);
        java.time.chrono.IsoEra isoEra32 = java.time.chrono.IsoEra.CE;
        boolean boolean33 = period31.equals((java.lang.Object) isoEra32);
        int int34 = period31.getMinutes();
        mutableDateTime17.add((org.joda.time.ReadablePeriod) period31);
        java.util.TimeZone timeZone37 = null;
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forTimeZone(timeZone37);
        org.joda.time.DateMidnight dateMidnight39 = new org.joda.time.DateMidnight((long) 1970, dateTimeZone38);
        long long42 = dateTimeZone38.convertLocalToUTC((long) 3, false);
        long long45 = dateTimeZone38.convertLocalToUTC(0L, true);
        mutableDateTime17.setZoneRetainFields(dateTimeZone38);
        java.lang.String str47 = dateTimeZone38.toString();
        org.joda.time.chrono.EthiopicChronology ethiopicChronology48 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone38);
        org.joda.time.DateTimeField dateTimeField49 = ethiopicChronology48.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone50 = ethiopicChronology48.getZone();
        org.joda.time.DateTimeField dateTimeField51 = ethiopicChronology48.era();
        org.joda.time.DurationField durationField52 = ethiopicChronology48.eras();
        org.joda.time.DateTimeField dateTimeField53 = ethiopicChronology48.halfdayOfDay();
        org.joda.time.TimeOfDay timeOfDay54 = new org.joda.time.TimeOfDay((org.joda.time.Chronology) ethiopicChronology48);
        int int55 = ethiopicChronology48.getMinimumDaysInFirstWeek();
        // The following exception was thrown during execution in test generation
        try {
            long long63 = ethiopicChronology48.getDateTimeMillis(32, 11, 275, 34846, (-292267037), 52, 292269054);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 34846 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertTrue("'" + isoEra32 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra32.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 3L + "'", long42 == 3L);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Etc/UTC" + "'", str47, "Etc/UTC");
        org.junit.Assert.assertNotNull(ethiopicChronology48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(durationField52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 4 + "'", int55 == 4);
    }

    @Test
    public void test5370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5370");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 3, chronology1);
        org.joda.time.DateTime.Property property3 = dateTime2.dayOfYear();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight((java.lang.Object) dateTime2, chronology4);
        org.joda.time.DateMidnight.Property property6 = dateMidnight5.dayOfMonth();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 3, chronology8);
        org.joda.time.DateTime.Property property10 = dateTime9.dayOfYear();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight((java.lang.Object) dateTime9, chronology11);
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight12.minusMonths((-1));
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight12.withDayOfYear((int) ' ');
        org.joda.time.Weeks weeks17 = org.joda.time.Weeks.weeksBetween((org.joda.time.ReadableInstant) dateMidnight5, (org.joda.time.ReadableInstant) dateMidnight16);
        org.joda.time.DateMidnight.Property property18 = dateMidnight5.year();
        org.joda.time.DateMidnight.Property property19 = dateMidnight5.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight20 = property19.getDateMidnight();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(weeks17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateMidnight20);
    }

    @Test
    public void test5371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5371");
        java.time.format.DateTimeFormatter dateTimeFormatter1 = java.time.format.DateTimeFormatter.ISO_WEEK_DATE;
        java.time.Instant instant2 = java.time.Instant.now();
        java.time.OffsetDateTime offsetDateTime3 = java.time.OffsetDateTime.now();
        java.time.temporal.ChronoField chronoField4 = java.time.temporal.ChronoField.HOUR_OF_DAY;
        boolean boolean5 = offsetDateTime3.isSupported((java.time.temporal.TemporalField) chronoField4);
        java.time.Month month6 = offsetDateTime3.getMonth();
        java.time.ZoneOffset zoneOffset9 = java.time.ZoneOffset.ofHoursMinutes(1, 10);
        java.time.LocalDate localDate10 = java.time.LocalDate.now((java.time.ZoneId) zoneOffset9);
        java.time.Clock clock11 = java.time.Clock.system((java.time.ZoneId) zoneOffset9);
        java.time.Duration duration13 = java.time.Duration.ofSeconds((long) 0);
        java.time.Duration duration15 = duration13.multipliedBy((long) (byte) -1);
        java.time.Clock clock16 = java.time.Clock.offset(clock11, duration13);
        java.time.OffsetDateTime offsetDateTime17 = offsetDateTime3.plus((java.time.temporal.TemporalAmount) duration13);
        java.time.Instant instant18 = offsetDateTime3.toInstant();
        boolean boolean19 = instant2.isAfter(instant18);
        java.util.GregorianCalendar gregorianCalendar25 = new java.util.GregorianCalendar(12, 4096, 7, (-1), (int) (short) 10);
        int int26 = gregorianCalendar25.getWeeksInWeekYear();
        java.lang.String str27 = gregorianCalendar25.getCalendarType();
        java.time.ZonedDateTime zonedDateTime28 = gregorianCalendar25.toZonedDateTime();
        java.time.ZonedDateTime zonedDateTime30 = zonedDateTime28.minusMonths((long) 10);
        java.time.ZonedDateTime zonedDateTime32 = zonedDateTime30.minusHours((long) 9);
        java.time.LocalTime localTime37 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime38 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime37);
        java.time.LocalTime localTime43 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime44 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime43);
        java.time.temporal.ChronoField chronoField45 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime47 = localTime43.with((java.time.temporal.TemporalField) chronoField45, (long) (short) 1);
        long long48 = localTime37.getLong((java.time.temporal.TemporalField) chronoField45);
        java.time.LocalTime localTime50 = localTime37.withSecond((int) (short) 1);
        int int51 = localTime50.getMinute();
        java.time.LocalTime localTime53 = localTime50.plusHours((long) (-1));
        java.time.LocalDateTime localDateTime54 = java.time.LocalDateTime.now();
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery55 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period56 = localDateTime54.query(periodTemporalQuery55);
        java.time.Period period57 = localTime53.query(periodTemporalQuery55);
        java.time.Period period58 = zonedDateTime32.query(periodTemporalQuery55);
        java.time.Period period59 = instant18.query(periodTemporalQuery55);
        java.text.Format format60 = dateTimeFormatter1.toFormat(periodTemporalQuery55);
        java.time.temporal.TemporalField[] temporalFieldArray61 = new java.time.temporal.TemporalField[] {};
        java.time.format.DateTimeFormatter dateTimeFormatter62 = dateTimeFormatter1.withResolverFields(temporalFieldArray61);
        // The following exception was thrown during execution in test generation
        try {
            java.time.LocalTime localTime63 = java.time.LocalTime.parse((java.lang.CharSequence) "2000-02-21T09:37:03.012", dateTimeFormatter1);
            org.junit.Assert.fail("Expected exception of type java.time.format.DateTimeParseException; message: Text '2000-02-21T09:37:03.012' could not be parsed at index 4");
        } catch (java.time.format.DateTimeParseException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter1);
        org.junit.Assert.assertNotNull(instant2);
        org.junit.Assert.assertNotNull(offsetDateTime3);
        org.junit.Assert.assertTrue("'" + chronoField4 + "' != '" + java.time.temporal.ChronoField.HOUR_OF_DAY + "'", chronoField4.equals(java.time.temporal.ChronoField.HOUR_OF_DAY));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + month6 + "' != '" + java.time.Month.FEBRUARY + "'", month6.equals(java.time.Month.FEBRUARY));
        org.junit.Assert.assertNotNull(zoneOffset9);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(clock11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(clock16);
        org.junit.Assert.assertNotNull(offsetDateTime17);
        org.junit.Assert.assertNotNull(instant18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 52 + "'", int26 == 52);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "gregory" + "'", str27, "gregory");
        org.junit.Assert.assertNotNull(zonedDateTime28);
        org.junit.Assert.assertNotNull(zonedDateTime30);
        org.junit.Assert.assertNotNull(zonedDateTime32);
        org.junit.Assert.assertNotNull(localTime37);
        org.junit.Assert.assertNotNull(localTime38);
        org.junit.Assert.assertNotNull(localTime43);
        org.junit.Assert.assertNotNull(localTime44);
        org.junit.Assert.assertTrue("'" + chronoField45 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField45.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime47);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 3601000000001L + "'", long48 == 3601000000001L);
        org.junit.Assert.assertNotNull(localTime50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(localTime53);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(periodTemporalQuery55);
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertNotNull(period58);
        org.junit.Assert.assertNotNull(period59);
        org.junit.Assert.assertNotNull(format60);
        org.junit.Assert.assertNotNull(temporalFieldArray61);
        org.junit.Assert.assertNotNull(dateTimeFormatter62);
    }

    @Test
    public void test5372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5372");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withYearOfCentury((int) 'a');
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.plusSeconds(6);
        org.joda.time.DateTime dateTime6 = localDateTime3.toDateTime();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime3.minusMillis((int) '/');
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minusMonths(100);
        int int11 = localDateTime8.getDayOfMonth();
        int int12 = localDateTime8.getMillisOfDay();
        org.joda.time.LocalDateTime.Property property13 = localDateTime8.dayOfMonth();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 21 + "'", int11 == 21);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 34913245 + "'", int12 == 34913245);
        org.junit.Assert.assertNotNull(property13);
    }

    @Test
    public void test5373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5373");
        org.joda.time.Weeks weeks0 = org.joda.time.Weeks.ONE;
        java.util.concurrent.TimeUnit timeUnit1 = java.util.concurrent.TimeUnit.NANOSECONDS;
        boolean boolean2 = weeks0.equals((java.lang.Object) timeUnit1);
        org.joda.time.Weeks weeks3 = weeks0.negated();
        org.joda.time.Weeks weeks5 = weeks3.plus((int) (short) 1);
        org.joda.time.Weeks weeks7 = weeks3.minus(10800000);
        // The following exception was thrown during execution in test generation
        try {
            int int9 = weeks3.getValue(34561718);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: 34561718");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(weeks0);
        org.junit.Assert.assertNotNull(timeUnit1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(weeks3);
        org.junit.Assert.assertNotNull(weeks5);
        org.junit.Assert.assertNotNull(weeks7);
    }

    @Test
    public void test5374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5374");
        java.io.File file0 = null;
        java.io.File file2 = new java.io.File(file0, "1970-01-01T00:00:00.003Z");
        java.net.URL uRL3 = file2.toURL();
        java.io.File file4 = null;
        java.io.File file6 = new java.io.File(file4, "1970-01-01T00:00:00.003Z");
        java.net.URL uRL7 = file6.toURL();
        boolean boolean8 = uRL3.sameFile(uRL7);
        java.lang.String str9 = uRL3.getPath();
        java.lang.String str10 = uRL3.getUserInfo();
        java.net.URLConnection uRLConnection11 = uRL3.openConnection();
        java.net.URLConnection uRLConnection12 = uRL3.openConnection();
        java.lang.String str13 = uRL3.getPath();
        java.lang.String str14 = uRL3.getHost();
        org.junit.Assert.assertNull("file2.getParent() == null", file2.getParent());
        org.junit.Assert.assertEquals(file2.toString(), "1970-01-01T00:00:00.003Z");
        org.junit.Assert.assertNotNull(uRL3);
// flaky:         org.junit.Assert.assertEquals(uRL3.toString(), "file:/experiment/1970-01-01T00:00:00.003Z");
        org.junit.Assert.assertNull("file6.getParent() == null", file6.getParent());
        org.junit.Assert.assertEquals(file6.toString(), "1970-01-01T00:00:00.003Z");
        org.junit.Assert.assertNotNull(uRL7);
// flaky:         org.junit.Assert.assertEquals(uRL7.toString(), "file:/experiment/1970-01-01T00:00:00.003Z");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "/experiment/1970-01-01T00:00:00.003Z" + "'", str9, "/experiment/1970-01-01T00:00:00.003Z");
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(uRLConnection11);
        org.junit.Assert.assertNotNull(uRLConnection12);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "/experiment/1970-01-01T00:00:00.003Z" + "'", str13, "/experiment/1970-01-01T00:00:00.003Z");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
    }

    @Test
    public void test5375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5375");
        java.util.function.UnaryOperator<java.time.chrono.Era> eraUnaryOperator0 = java.util.function.UnaryOperator.identity();
        org.junit.Assert.assertNotNull(eraUnaryOperator0);
    }

    @Test
    public void test5376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5376");
        java.util.Date date6 = new java.util.Date(16384, 679, 0, 32770, 97, (int) ' ');
        int int7 = date6.getSeconds();
        int int8 = date6.getMonth();
        org.junit.Assert.assertEquals(date6.toString(), "Wed Apr 26 11:37:32 UTC 18344");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 32 + "'", int7 == 32);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 3 + "'", int8 == 3);
    }

    @Test
    public void test5377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5377");
        java.util.DoubleSummaryStatistics doubleSummaryStatistics0 = new java.util.DoubleSummaryStatistics();
        doubleSummaryStatistics0.accept((double) 97);
        java.util.stream.DoubleStream.Builder builder3 = java.util.stream.DoubleStream.builder();
        java.util.function.DoubleConsumer doubleConsumer4 = doubleSummaryStatistics0.andThen((java.util.function.DoubleConsumer) builder3);
        java.util.stream.DoubleStream doubleStream5 = builder3.build();
        org.junit.Assert.assertEquals(doubleSummaryStatistics0.toString(), "DoubleSummaryStatistics{count=1, sum=97.000000, min=97.000000, average=97.000000, max=97.000000}");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(doubleConsumer4);
        org.junit.Assert.assertNotNull(doubleStream5);
    }

    @Test
    public void test5378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5378");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Locale.LanguageRange[] languageRangeArray3 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList4 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList4, languageRangeArray3);
        java.util.Locale locale6 = java.util.Locale.JAPAN;
        java.util.Locale[] localeArray7 = new java.util.Locale[] { locale6 };
        java.util.ArrayList<java.util.Locale> localeList8 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList8, localeArray7);
        java.util.List<java.util.Locale> localeList10 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList4, (java.util.Collection<java.util.Locale>) localeList8);
        localeList10.clear();
        java.util.List<java.util.Locale> localeList12 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList10);
        java.util.Locale.LanguageRange[] languageRangeArray13 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList14 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList14, languageRangeArray13);
        java.util.Locale.LanguageRange[] languageRangeArray16 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList17 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList17, languageRangeArray16);
        java.util.Locale locale19 = java.util.Locale.JAPAN;
        java.util.Locale[] localeArray20 = new java.util.Locale[] { locale19 };
        java.util.ArrayList<java.util.Locale> localeList21 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList21, localeArray20);
        java.util.List<java.util.Locale> localeList23 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList17, (java.util.Collection<java.util.Locale>) localeList21);
        localeList23.clear();
        java.util.List<java.util.Locale> localeList25 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList14, (java.util.Collection<java.util.Locale>) localeList23);
        java.util.List<java.util.Locale> localeList26 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList25);
        java.util.Spliterator<java.util.Locale> localeSpliterator27 = localeList26.spliterator();
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(languageRangeArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(localeArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(localeList10);
        org.junit.Assert.assertNotNull(localeList12);
        org.junit.Assert.assertNotNull(languageRangeArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(languageRangeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(localeArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(localeList23);
        org.junit.Assert.assertNotNull(localeList25);
        org.junit.Assert.assertNotNull(localeList26);
        org.junit.Assert.assertNotNull(localeSpliterator27);
    }

    @Test
    public void test5379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5379");
        java.io.UnsupportedEncodingException unsupportedEncodingException1 = new java.io.UnsupportedEncodingException("2022-02-21T09:41:28.623Z");
    }

    @Test
    public void test5380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5380");
        java.util.stream.LongStream longStream1 = java.util.stream.LongStream.of(0L);
        java.util.OptionalLong optionalLong2 = longStream1.min();
        java.util.stream.LongStream longStream3 = longStream1.parallel();
        org.junit.Assert.assertNotNull(longStream1);
        org.junit.Assert.assertNotNull(optionalLong2);
        org.junit.Assert.assertNotNull(longStream3);
    }

    @Test
    public void test5381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5381");
        org.joda.time.Period period0 = org.joda.time.Period.ZERO;
        org.joda.time.Period period1 = period0.normalizedStandard();
        org.joda.time.Period period3 = period0.plusHours(2);
        java.time.chrono.IsoEra isoEra4 = java.time.chrono.IsoEra.CE;
        boolean boolean5 = period3.equals((java.lang.Object) isoEra4);
        java.time.LocalTime localTime10 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime11 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime10);
        java.time.LocalTime localTime16 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime17 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime16);
        java.time.temporal.ChronoField chronoField18 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime20 = localTime16.with((java.time.temporal.TemporalField) chronoField18, (long) (short) 1);
        long long21 = localTime10.getLong((java.time.temporal.TemporalField) chronoField18);
        boolean boolean22 = isoEra4.isSupported((java.time.temporal.TemporalField) chronoField18);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery23 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period24 = isoEra4.query(periodTemporalQuery23);
        boolean boolean25 = period24.isNegative();
        java.time.Period period27 = period24.plusDays((long) ' ');
        boolean boolean28 = period24.isNegative();
        java.time.Period period30 = period24.plusDays((long) 574);
        java.time.Duration duration32 = java.time.Duration.ofMillis(34739555000000L);
        java.util.List<java.time.temporal.TemporalUnit> temporalUnitList33 = duration32.getUnits();
        // The following exception was thrown during execution in test generation
        try {
            java.time.chrono.ChronoPeriod chronoPeriod34 = period24.minus((java.time.temporal.TemporalAmount) duration32);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Unit must be Years, Months or Days, but was Seconds");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period0);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertTrue("'" + isoEra4 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra4.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertTrue("'" + chronoField18 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField18.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 3601000000001L + "'", long21 == 3601000000001L);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(periodTemporalQuery23);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(temporalUnitList33);
    }

    @Test
    public void test5382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5382");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.nio.LongBuffer longBuffer3 = java.nio.LongBuffer.allocate((int) (short) 0);
        java.nio.Buffer buffer4 = longBuffer3.mark();
        boolean boolean5 = properties1.containsKey((java.lang.Object) longBuffer3);
        long[] longArray6 = longBuffer3.array();
        java.nio.LongBuffer longBuffer7 = longBuffer3.duplicate();
        java.nio.Buffer buffer8 = longBuffer7.flip();
        java.nio.LongBuffer longBuffer9 = longBuffer7.asReadOnlyBuffer();
        org.junit.Assert.assertNotNull(longBuffer3);
        org.junit.Assert.assertNotNull(buffer4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray6), "[]");
        org.junit.Assert.assertNotNull(longBuffer7);
        org.junit.Assert.assertNotNull(buffer8);
        org.junit.Assert.assertNotNull(longBuffer9);
    }

    @Test
    public void test5383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5383");
        java.util.GregorianCalendar gregorianCalendar5 = new java.util.GregorianCalendar(12, 4096, 7, (-1), (int) (short) 10);
        int int6 = gregorianCalendar5.getWeeksInWeekYear();
        java.lang.String str7 = gregorianCalendar5.getCalendarType();
        java.time.ZonedDateTime zonedDateTime8 = gregorianCalendar5.toZonedDateTime();
        java.time.ZonedDateTime zonedDateTime10 = zonedDateTime8.minusMonths((long) 10);
        int int11 = zonedDateTime8.getMonthValue();
        int int12 = zonedDateTime8.getSecond();
        java.util.GregorianCalendar gregorianCalendar18 = new java.util.GregorianCalendar(12, 4096, 7, (-1), (int) (short) 10);
        int int19 = gregorianCalendar18.getWeeksInWeekYear();
        java.lang.String str20 = gregorianCalendar18.getCalendarType();
        java.time.ZonedDateTime zonedDateTime21 = gregorianCalendar18.toZonedDateTime();
        java.time.ZonedDateTime zonedDateTime23 = zonedDateTime21.minusMonths((long) 10);
        java.time.chrono.ChronoZonedDateTime<java.time.LocalDate> localDateChronoZonedDateTime24 = zonedDateTime21.withEarlierOffsetAtOverlap();
        java.time.ZonedDateTime zonedDateTime26 = zonedDateTime21.minusMonths((long) 4200);
        boolean boolean27 = zonedDateTime8.isBefore((java.time.chrono.ChronoZonedDateTime<java.time.LocalDate>) zonedDateTime26);
        java.time.ZonedDateTime zonedDateTime29 = zonedDateTime8.minusMinutes((long) 34);
        java.time.temporal.ChronoField chronoField30 = java.time.temporal.ChronoField.INSTANT_SECONDS;
        java.lang.String str31 = chronoField30.toString();
        boolean boolean32 = zonedDateTime29.isSupported((java.time.temporal.TemporalField) chronoField30);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 52 + "'", int6 == 52);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "gregory" + "'", str7, "gregory");
        org.junit.Assert.assertNotNull(zonedDateTime8);
        org.junit.Assert.assertNotNull(zonedDateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 5 + "'", int11 == 5);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 59 + "'", int12 == 59);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 52 + "'", int19 == 52);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "gregory" + "'", str20, "gregory");
        org.junit.Assert.assertNotNull(zonedDateTime21);
        org.junit.Assert.assertNotNull(zonedDateTime23);
        org.junit.Assert.assertNotNull(localDateChronoZonedDateTime24);
        org.junit.Assert.assertNotNull(zonedDateTime26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(zonedDateTime29);
        org.junit.Assert.assertTrue("'" + chronoField30 + "' != '" + java.time.temporal.ChronoField.INSTANT_SECONDS + "'", chronoField30.equals(java.time.temporal.ChronoField.INSTANT_SECONDS));
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "InstantSeconds" + "'", str31, "InstantSeconds");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
    }

    @Test
    public void test5384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5384");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Duration duration2 = new org.joda.time.Duration(readableInstant0, readableInstant1);
        org.joda.time.Duration duration4 = duration2.withMillis((-1L));
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((long) 3, chronology6);
        org.joda.time.DateTime.Property property8 = dateTime7.dayOfYear();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateMidnight dateMidnight10 = new org.joda.time.DateMidnight((java.lang.Object) dateTime7, chronology9);
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight10.minusMonths((-1));
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight10.withDayOfYear((int) ' ');
        org.joda.time.PeriodType periodType15 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period16 = duration4.toPeriodFrom((org.joda.time.ReadableInstant) dateMidnight10, periodType15);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.Duration duration19 = new org.joda.time.Duration(readableInstant17, readableInstant18);
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.PeriodType periodType21 = null;
        org.joda.time.Period period22 = duration19.toPeriodTo(readableInstant20, periodType21);
        long long23 = duration19.getStandardSeconds();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((long) 3, chronology25);
        org.joda.time.DateTime.Property property27 = dateTime26.dayOfYear();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateMidnight dateMidnight29 = new org.joda.time.DateMidnight((java.lang.Object) dateTime26, chronology28);
        org.joda.time.DateMidnight dateMidnight31 = dateMidnight29.minusMonths((-1));
        org.joda.time.DateMidnight dateMidnight33 = dateMidnight29.withDayOfYear((int) ' ');
        org.joda.time.Interval interval34 = duration19.toIntervalTo((org.joda.time.ReadableInstant) dateMidnight33);
        org.joda.time.PeriodType periodType36 = org.joda.time.PeriodType.time();
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod((long) 'a', periodType36);
        org.joda.time.Period period38 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight10, (org.joda.time.ReadableDuration) duration19, periodType36);
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.Duration duration41 = new org.joda.time.Duration(readableInstant39, readableInstant40);
        org.joda.time.Seconds seconds42 = duration41.toStandardSeconds();
        int int43 = seconds42.getSeconds();
        org.joda.time.DateMidnight dateMidnight45 = dateMidnight10.withPeriodAdded((org.joda.time.ReadablePeriod) seconds42, 0);
        org.joda.time.ReadableInstant readableInstant46 = null;
        org.joda.time.MutableInterval mutableInterval47 = new org.joda.time.MutableInterval((org.joda.time.ReadablePeriod) seconds42, readableInstant46);
        org.joda.time.DateTime dateTime48 = mutableInterval47.getStart();
        org.joda.time.ReadableInstant readableInstant49 = null;
        org.joda.time.ReadableInstant readableInstant50 = null;
        org.joda.time.Duration duration51 = new org.joda.time.Duration(readableInstant49, readableInstant50);
        org.joda.time.MutableInterval mutableInterval52 = new org.joda.time.MutableInterval((java.lang.Object) readableInstant50);
        boolean boolean53 = mutableInterval52.isAfterNow();
        mutableInterval47.setInterval((org.joda.time.ReadableInterval) mutableInterval52);
        org.joda.time.ReadableInstant readableInstant55 = null;
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.DateTime dateTime58 = new org.joda.time.DateTime((long) 3, chronology57);
        org.joda.time.DateTime.Property property59 = dateTime58.dayOfYear();
        org.joda.time.Interval interval60 = property59.toInterval();
        org.joda.time.DateTimeField dateTimeField61 = property59.getField();
        org.joda.time.DateTime dateTime63 = property59.addToCopy((long) (byte) 1);
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.LocalTime localTime66 = new org.joda.time.LocalTime((long) 0, chronology65);
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.DateTime dateTime69 = new org.joda.time.DateTime((long) 3, chronology68);
        org.joda.time.DateTime.Property property70 = dateTime69.dayOfYear();
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.DateMidnight dateMidnight72 = new org.joda.time.DateMidnight((java.lang.Object) dateTime69, chronology71);
        org.joda.time.DateTime dateTime73 = localTime66.toDateTime((org.joda.time.ReadableInstant) dateTime69);
        org.joda.time.DateTime dateTime75 = dateTime73.minusMillis((int) (byte) 0);
        org.joda.time.DateTime dateTime77 = dateTime73.withYearOfCentury((int) (byte) 10);
        org.joda.time.DateTime.Property property78 = dateTime77.hourOfDay();
        boolean boolean79 = dateTime63.isEqual((org.joda.time.ReadableInstant) dateTime77);
        org.joda.time.Duration duration80 = new org.joda.time.Duration(readableInstant55, (org.joda.time.ReadableInstant) dateTime77);
        // The following exception was thrown during execution in test generation
        try {
            mutableInterval47.setDurationAfterStart((org.joda.time.ReadableDuration) duration80);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(periodType15);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateMidnight31);
        org.junit.Assert.assertNotNull(dateMidnight33);
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertNotNull(seconds42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(dateMidnight45);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(interval60);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(property70);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(property78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
    }

    @Test
    public void test5385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5385");
        java.io.File file0 = null;
        java.io.File file2 = new java.io.File(file0, "1970-01-01T00:00:00.003Z");
        boolean boolean3 = file2.exists();
        boolean boolean4 = file2.mkdirs();
        java.net.URI uRI5 = file2.toURI();
        java.io.File file6 = new java.io.File(uRI5);
        org.junit.Assert.assertNull("file2.getParent() == null", file2.getParent());
        org.junit.Assert.assertEquals(file2.toString(), "1970-01-01T00:00:00.003Z");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(uRI5);
// flaky:         org.junit.Assert.assertEquals(file6.getParent(), "/experiment");
// flaky:         org.junit.Assert.assertEquals(file6.toString(), "/experiment/1970-01-01T00:00:00.003Z");
    }

    @Test
    public void test5386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5386");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.weekyear();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.withField(dateTimeFieldType2, (int) 'a');
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime6 = localDateTime1.withDayOfMonth(42);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 42 for dayOfMonth must be in the range [1,28]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(localDateTime4);
    }

    @Test
    public void test5387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5387");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder4 = builder0.setDate(0, 0, (int) (byte) 100);
        java.util.GregorianCalendar gregorianCalendar10 = new java.util.GregorianCalendar(12, 4096, 7, (-1), (int) (short) 10);
        int int11 = gregorianCalendar10.getWeeksInWeekYear();
        java.util.TimeZone timeZone12 = gregorianCalendar10.getTimeZone();
        java.util.Calendar.Builder builder13 = builder4.setTimeZone(timeZone12);
        java.util.TimeZone.setDefault(timeZone12);
        java.lang.String str15 = timeZone12.getDisplayName();
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
        org.junit.Assert.assertNotNull(timeZone12);
// flaky:         org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(builder13);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Koordinierte Universalzeit" + "'", str15, "Koordinierte Universalzeit");
    }

    @Test
    public void test5388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5388");
        org.joda.time.YearMonthDay yearMonthDay0 = new org.joda.time.YearMonthDay();
        java.util.TimeZone timeZone3 = null;
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight((long) 1970, dateTimeZone4);
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((long) 3600000, dateTimeZone4);
        org.joda.time.DateMidnight dateMidnight7 = yearMonthDay0.toDateMidnight(dateTimeZone4);
        java.io.File file8 = null;
        java.io.File file10 = new java.io.File(file8, "1970-01-01T00:00:00.003Z");
        java.net.URL uRL11 = file10.toURL();
        java.io.File file12 = null;
        java.io.File file14 = new java.io.File(file12, "1970-01-01T00:00:00.003Z");
        java.net.URL uRL15 = file14.toURL();
        boolean boolean16 = uRL11.sameFile(uRL15);
        boolean boolean17 = dateTimeZone4.equals((java.lang.Object) uRL11);
        java.io.File file18 = null;
        java.io.File file20 = new java.io.File(file18, "1970-01-01T00:00:00.003Z");
        java.net.URL uRL21 = file20.toURL();
        java.io.File file22 = null;
        java.io.File file24 = new java.io.File(file22, "1970-01-01T00:00:00.003Z");
        java.net.URL uRL25 = file24.toURL();
        boolean boolean26 = uRL21.sameFile(uRL25);
        java.lang.String str27 = uRL21.toExternalForm();
        boolean boolean28 = uRL11.sameFile(uRL21);
        java.net.Proxy proxy29 = java.net.Proxy.NO_PROXY;
        java.net.Proxy.Type type30 = proxy29.type();
        java.net.URLConnection uRLConnection31 = uRL11.openConnection(proxy29);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNull("file10.getParent() == null", file10.getParent());
        org.junit.Assert.assertEquals(file10.toString(), "1970-01-01T00:00:00.003Z");
        org.junit.Assert.assertNotNull(uRL11);
// flaky:         org.junit.Assert.assertEquals(uRL11.toString(), "file:/experiment/1970-01-01T00:00:00.003Z");
        org.junit.Assert.assertNull("file14.getParent() == null", file14.getParent());
        org.junit.Assert.assertEquals(file14.toString(), "1970-01-01T00:00:00.003Z");
        org.junit.Assert.assertNotNull(uRL15);
// flaky:         org.junit.Assert.assertEquals(uRL15.toString(), "file:/experiment/1970-01-01T00:00:00.003Z");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull("file20.getParent() == null", file20.getParent());
        org.junit.Assert.assertEquals(file20.toString(), "1970-01-01T00:00:00.003Z");
        org.junit.Assert.assertNotNull(uRL21);
// flaky:         org.junit.Assert.assertEquals(uRL21.toString(), "file:/experiment/1970-01-01T00:00:00.003Z");
        org.junit.Assert.assertNull("file24.getParent() == null", file24.getParent());
        org.junit.Assert.assertEquals(file24.toString(), "1970-01-01T00:00:00.003Z");
        org.junit.Assert.assertNotNull(uRL25);
// flaky:         org.junit.Assert.assertEquals(uRL25.toString(), "file:/experiment/1970-01-01T00:00:00.003Z");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "file:/experiment/1970-01-01T00:00:00.003Z" + "'", str27, "file:/experiment/1970-01-01T00:00:00.003Z");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(proxy29);
        org.junit.Assert.assertTrue("'" + type30 + "' != '" + java.net.Proxy.Type.DIRECT + "'", type30.equals(java.net.Proxy.Type.DIRECT));
        org.junit.Assert.assertNotNull(uRLConnection31);
    }

    @Test
    public void test5389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5389");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 3, chronology1);
        org.joda.time.DateTime.Property property3 = dateTime2.dayOfYear();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight((java.lang.Object) dateTime2, chronology4);
        org.joda.time.DateMidnight.Property property6 = dateMidnight5.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight7 = property6.roundCeilingCopy();
        int int8 = dateMidnight7.getHourOfDay();
        org.joda.time.DateMidnight dateMidnight10 = dateMidnight7.minusDays(1);
        org.joda.time.DateMidnight dateMidnight12 = dateMidnight7.withMillis((long) 46);
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.Duration duration16 = new org.joda.time.Duration(readableInstant14, readableInstant15);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.PeriodType periodType18 = null;
        org.joda.time.Period period19 = duration16.toPeriodTo(readableInstant17, periodType18);
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.Duration duration22 = new org.joda.time.Duration(readableInstant20, readableInstant21);
        long long23 = duration22.getMillis();
        boolean boolean24 = duration16.isShorterThan((org.joda.time.ReadableDuration) duration22);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((long) 3, chronology26);
        org.joda.time.DateTime.Property property28 = dateTime27.dayOfYear();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.DateMidnight dateMidnight30 = new org.joda.time.DateMidnight((java.lang.Object) dateTime27, chronology29);
        org.joda.time.MutableDateTime mutableDateTime31 = dateTime27.toMutableDateTime();
        mutableDateTime31.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property34 = mutableDateTime31.dayOfWeek();
        org.joda.time.MutableDateTime.Property property35 = mutableDateTime31.year();
        org.joda.time.MutableDateTime.Property property36 = mutableDateTime31.weekyear();
        boolean boolean37 = duration16.equals((java.lang.Object) mutableDateTime31);
        mutableDateTime31.addMonths((int) ' ');
        mutableDateTime31.add((long) (byte) 10);
        org.joda.time.Period period42 = org.joda.time.Period.ZERO;
        org.joda.time.Period period43 = period42.normalizedStandard();
        org.joda.time.Period period45 = period42.plusHours(2);
        java.time.chrono.IsoEra isoEra46 = java.time.chrono.IsoEra.CE;
        boolean boolean47 = period45.equals((java.lang.Object) isoEra46);
        int int48 = period45.getMinutes();
        mutableDateTime31.add((org.joda.time.ReadablePeriod) period45);
        java.util.TimeZone timeZone51 = null;
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.forTimeZone(timeZone51);
        org.joda.time.DateMidnight dateMidnight53 = new org.joda.time.DateMidnight((long) 1970, dateTimeZone52);
        long long56 = dateTimeZone52.convertLocalToUTC((long) 3, false);
        long long59 = dateTimeZone52.convertLocalToUTC(0L, true);
        mutableDateTime31.setZoneRetainFields(dateTimeZone52);
        java.lang.String str61 = dateTimeZone52.toString();
        org.joda.time.chrono.EthiopicChronology ethiopicChronology62 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone52);
        org.joda.time.DateTimeField dateTimeField63 = ethiopicChronology62.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone64 = ethiopicChronology62.getZone();
        org.joda.time.DateTimeField dateTimeField65 = ethiopicChronology62.era();
        org.joda.time.DateTimeField dateTimeField66 = ethiopicChronology62.secondOfDay();
        org.joda.time.DateTimeField dateTimeField67 = ethiopicChronology62.minuteOfHour();
        org.joda.time.DurationField durationField68 = ethiopicChronology62.months();
        org.joda.time.DateTimeField dateTimeField69 = ethiopicChronology62.monthOfYear();
        org.joda.time.DateMidnight dateMidnight70 = new org.joda.time.DateMidnight((long) 5, (org.joda.time.Chronology) ethiopicChronology62);
        int int71 = dateMidnight70.getSecondOfDay();
        java.lang.Object obj72 = null;
        org.joda.time.PeriodType periodType73 = org.joda.time.PeriodType.years();
        org.joda.time.PeriodType periodType74 = periodType73.withMinutesRemoved();
        org.joda.time.PeriodType periodType75 = periodType73.withWeeksRemoved();
        org.joda.time.Period period76 = new org.joda.time.Period(obj72, periodType73);
        java.lang.String str77 = periodType73.toString();
        org.joda.time.Period period78 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateMidnight12, (org.joda.time.ReadableInstant) dateMidnight70, periodType73);
        org.joda.time.ReadableInterval readableInterval79 = null;
        org.joda.time.Hours hours80 = org.joda.time.Hours.hoursIn(readableInterval79);
        org.joda.time.Hours hours82 = hours80.multipliedBy((int) (byte) 0);
        org.joda.time.Hours hours84 = hours82.multipliedBy(20);
        org.joda.time.DateMidnight dateMidnight85 = dateMidnight70.minus((org.joda.time.ReadablePeriod) hours82);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(dateMidnight10);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(mutableDateTime31);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertTrue("'" + isoEra46 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra46.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 3L + "'", long56 == 3L);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 0L + "'", long59 == 0L);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "Etc/UTC" + "'", str61, "Etc/UTC");
        org.junit.Assert.assertNotNull(ethiopicChronology62);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(dateTimeZone64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(durationField68);
        org.junit.Assert.assertNotNull(dateTimeField69);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(periodType73);
        org.junit.Assert.assertNotNull(periodType74);
        org.junit.Assert.assertNotNull(periodType75);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "PeriodType[Years]" + "'", str77, "PeriodType[Years]");
        org.junit.Assert.assertNotNull(hours80);
        org.junit.Assert.assertNotNull(hours82);
        org.junit.Assert.assertNotNull(hours84);
        org.junit.Assert.assertNotNull(dateMidnight85);
    }

    @Test
    public void test5390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5390");
        org.joda.time.Period period0 = org.joda.time.Period.ZERO;
        org.joda.time.Period period1 = period0.normalizedStandard();
        org.joda.time.Period period3 = period0.plusHours(2);
        int int4 = period0.getDays();
        org.joda.time.Period period5 = org.joda.time.Period.ZERO;
        org.joda.time.TimeOfDay timeOfDay7 = org.joda.time.TimeOfDay.fromMillisOfDay((long) (short) 0);
        org.joda.time.TimeOfDay timeOfDay9 = org.joda.time.TimeOfDay.fromMillisOfDay((long) (short) 0);
        org.joda.time.Hours hours10 = org.joda.time.Hours.hoursBetween((org.joda.time.ReadablePartial) timeOfDay7, (org.joda.time.ReadablePartial) timeOfDay9);
        org.joda.time.DurationFieldType durationFieldType11 = org.joda.time.DurationFieldType.hours();
        org.joda.time.TimeOfDay timeOfDay13 = timeOfDay9.withFieldAdded(durationFieldType11, (int) (byte) 0);
        org.joda.time.Period period15 = period5.withFieldAdded(durationFieldType11, 4);
        boolean boolean16 = period0.isSupported(durationFieldType11);
        java.text.Format.Field field17 = null;
        java.text.FieldPosition fieldPosition18 = new java.text.FieldPosition(field17);
        fieldPosition18.setBeginIndex((int) (short) 100);
        int int21 = fieldPosition18.getEndIndex();
        boolean boolean22 = period0.equals((java.lang.Object) int21);
        org.joda.time.Period period24 = period0.minusHours(600);
        org.junit.Assert.assertNotNull(period0);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertNotNull(timeOfDay9);
        org.junit.Assert.assertNotNull(hours10);
        org.junit.Assert.assertNotNull(durationFieldType11);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(period24);
    }

    @Test
    public void test5391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5391");
        java.util.function.IntUnaryOperator intUnaryOperator0 = java.util.function.IntUnaryOperator.identity();
        java.util.stream.IntStream intStream3 = java.util.stream.IntStream.rangeClosed(100, (int) '4');
        java.util.stream.IntStream intStream4 = intStream3.sequential();
        java.util.function.IntUnaryOperator intUnaryOperator5 = java.util.function.IntUnaryOperator.identity();
        java.util.stream.IntStream intStream6 = intStream3.map(intUnaryOperator5);
        java.util.function.IntUnaryOperator intUnaryOperator7 = intUnaryOperator0.compose(intUnaryOperator5);
        java.util.function.IntUnaryOperator intUnaryOperator8 = java.util.function.IntUnaryOperator.identity();
        java.util.stream.IntStream intStream11 = java.util.stream.IntStream.rangeClosed(100, (int) '4');
        java.util.stream.IntStream intStream12 = intStream11.sequential();
        java.util.function.IntUnaryOperator intUnaryOperator13 = java.util.function.IntUnaryOperator.identity();
        java.util.stream.IntStream intStream14 = intStream11.map(intUnaryOperator13);
        java.util.function.IntUnaryOperator intUnaryOperator15 = intUnaryOperator8.compose(intUnaryOperator13);
        int int17 = intUnaryOperator13.applyAsInt(5);
        java.util.function.IntUnaryOperator intUnaryOperator18 = java.util.function.IntUnaryOperator.identity();
        java.util.stream.IntStream intStream21 = java.util.stream.IntStream.rangeClosed(100, (int) '4');
        java.util.stream.IntStream intStream22 = intStream21.sequential();
        java.util.function.IntUnaryOperator intUnaryOperator23 = java.util.function.IntUnaryOperator.identity();
        java.util.stream.IntStream intStream24 = intStream21.map(intUnaryOperator23);
        java.util.function.IntUnaryOperator intUnaryOperator25 = intUnaryOperator18.compose(intUnaryOperator23);
        java.util.function.IntUnaryOperator intUnaryOperator26 = intUnaryOperator13.compose(intUnaryOperator23);
        java.util.function.IntUnaryOperator intUnaryOperator27 = intUnaryOperator7.compose(intUnaryOperator26);
        org.junit.Assert.assertNotNull(intUnaryOperator0);
        org.junit.Assert.assertNotNull(intStream3);
        org.junit.Assert.assertNotNull(intStream4);
        org.junit.Assert.assertNotNull(intUnaryOperator5);
        org.junit.Assert.assertNotNull(intStream6);
        org.junit.Assert.assertNotNull(intUnaryOperator7);
        org.junit.Assert.assertNotNull(intUnaryOperator8);
        org.junit.Assert.assertNotNull(intStream11);
        org.junit.Assert.assertNotNull(intStream12);
        org.junit.Assert.assertNotNull(intUnaryOperator13);
        org.junit.Assert.assertNotNull(intStream14);
        org.junit.Assert.assertNotNull(intUnaryOperator15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 5 + "'", int17 == 5);
        org.junit.Assert.assertNotNull(intUnaryOperator18);
        org.junit.Assert.assertNotNull(intStream21);
        org.junit.Assert.assertNotNull(intStream22);
        org.junit.Assert.assertNotNull(intUnaryOperator23);
        org.junit.Assert.assertNotNull(intStream24);
        org.junit.Assert.assertNotNull(intUnaryOperator25);
        org.junit.Assert.assertNotNull(intUnaryOperator26);
        org.junit.Assert.assertNotNull(intUnaryOperator27);
    }

    @Test
    public void test5392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5392");
        java.util.stream.LongStream longStream2 = java.util.stream.LongStream.rangeClosed((long) 5, (long) 'a');
        java.util.Spliterator.OfLong ofLong3 = longStream2.spliterator();
        java.util.LongSummaryStatistics longSummaryStatistics4 = new java.util.LongSummaryStatistics();
        longSummaryStatistics4.accept(3);
        long long7 = longSummaryStatistics4.getMax();
        java.util.LongSummaryStatistics longSummaryStatistics8 = new java.util.LongSummaryStatistics();
        longSummaryStatistics8.accept(3);
        java.util.function.LongConsumer longConsumer11 = longSummaryStatistics4.andThen((java.util.function.LongConsumer) longSummaryStatistics8);
        java.util.LongSummaryStatistics longSummaryStatistics12 = new java.util.LongSummaryStatistics();
        longSummaryStatistics12.accept(3);
        long long15 = longSummaryStatistics12.getMax();
        double double16 = longSummaryStatistics12.getAverage();
        longSummaryStatistics12.accept(6);
        java.util.function.LongConsumer longConsumer19 = longSummaryStatistics4.andThen((java.util.function.LongConsumer) longSummaryStatistics12);
        double double20 = longSummaryStatistics4.getAverage();
        boolean boolean21 = ofLong3.tryAdvance((java.util.function.LongConsumer) longSummaryStatistics4);
        java.util.LongSummaryStatistics longSummaryStatistics22 = new java.util.LongSummaryStatistics();
        longSummaryStatistics22.accept(3);
        long long25 = longSummaryStatistics22.getMax();
        java.util.LongSummaryStatistics longSummaryStatistics26 = new java.util.LongSummaryStatistics();
        longSummaryStatistics26.accept(3);
        java.util.function.LongConsumer longConsumer29 = longSummaryStatistics22.andThen((java.util.function.LongConsumer) longSummaryStatistics26);
        boolean boolean30 = ofLong3.tryAdvance(longConsumer29);
        long long31 = ofLong3.getExactSizeIfKnown();
        org.junit.Assert.assertNotNull(longStream2);
        org.junit.Assert.assertNotNull(ofLong3);
        org.junit.Assert.assertEquals(longSummaryStatistics4.toString(), "LongSummaryStatistics{count=2, sum=8, min=3, average=4.000000, max=5}");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 3L + "'", long7 == 3L);
        org.junit.Assert.assertEquals(longSummaryStatistics8.toString(), "LongSummaryStatistics{count=1, sum=3, min=3, average=3.000000, max=3}");
        org.junit.Assert.assertNotNull(longConsumer11);
        org.junit.Assert.assertEquals(longSummaryStatistics12.toString(), "LongSummaryStatistics{count=2, sum=9, min=3, average=4.500000, max=6}");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 3L + "'", long15 == 3L);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 3.0d + "'", double16 == 3.0d);
        org.junit.Assert.assertNotNull(longConsumer19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 3.0d + "'", double20 == 3.0d);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertEquals(longSummaryStatistics22.toString(), "LongSummaryStatistics{count=2, sum=9, min=3, average=4.500000, max=6}");
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 3L + "'", long25 == 3L);
        org.junit.Assert.assertEquals(longSummaryStatistics26.toString(), "LongSummaryStatistics{count=2, sum=9, min=3, average=4.500000, max=6}");
        org.junit.Assert.assertNotNull(longConsumer29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 91L + "'", long31 == 91L);
    }

    @Test
    public void test5393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5393");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 3, chronology1);
        org.joda.time.DateTime.Property property3 = dateTime2.dayOfYear();
        org.joda.time.Interval interval4 = property3.toInterval();
        java.lang.String str5 = interval4.toString();
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.Duration duration8 = new org.joda.time.Duration(readableInstant6, readableInstant7);
        org.joda.time.Duration duration10 = duration8.withMillis((-1L));
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.Duration duration12 = duration8.minus(readableDuration11);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) 3, chronology14);
        org.joda.time.DateTime.Property property16 = dateTime15.dayOfYear();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateMidnight dateMidnight18 = new org.joda.time.DateMidnight((java.lang.Object) dateTime15, chronology17);
        org.joda.time.DateMidnight.Property property19 = dateMidnight18.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight20 = property19.getDateMidnight();
        org.joda.time.Interval interval21 = new org.joda.time.Interval((org.joda.time.ReadableDuration) duration12, (org.joda.time.ReadableInstant) dateMidnight20);
        boolean boolean23 = interval21.isBefore((long) '/');
        boolean boolean24 = interval4.overlaps((org.joda.time.ReadableInterval) interval21);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((long) 3, chronology26);
        org.joda.time.DateTime.Property property28 = dateTime27.dayOfYear();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.DateMidnight dateMidnight30 = new org.joda.time.DateMidnight((java.lang.Object) dateTime27, chronology29);
        org.joda.time.DateMidnight.Property property31 = dateMidnight30.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight32 = property31.roundCeilingCopy();
        int int33 = dateMidnight32.getHourOfDay();
        org.joda.time.DateMidnight dateMidnight35 = dateMidnight32.minusDays(1);
        org.joda.time.DateMidnight dateMidnight37 = dateMidnight32.withMillis((long) 46);
        boolean boolean38 = interval4.equals((java.lang.Object) dateMidnight37);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "1970-01-01T00:00:00.000Z/1970-01-02T00:00:00.000Z" + "'", str5, "1970-01-01T00:00:00.000Z/1970-01-02T00:00:00.000Z");
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateMidnight20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(dateMidnight32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(dateMidnight35);
        org.junit.Assert.assertNotNull(dateMidnight37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test5394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5394");
        java.time.OffsetTime offsetTime0 = java.time.OffsetTime.MAX;
        java.time.LocalTime localTime1 = offsetTime0.toLocalTime();
        java.lang.String str2 = offsetTime0.toString();
        java.time.OffsetTime offsetTime3 = java.time.OffsetTime.MAX;
        java.time.LocalTime localTime4 = offsetTime3.toLocalTime();
        boolean boolean5 = offsetTime0.isBefore(offsetTime3);
        java.time.LocalTime localTime10 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime11 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime10);
        java.time.LocalTime localTime16 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime17 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime16);
        java.time.temporal.ChronoField chronoField18 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime20 = localTime16.with((java.time.temporal.TemporalField) chronoField18, (long) (short) 1);
        long long21 = localTime10.getLong((java.time.temporal.TemporalField) chronoField18);
        java.time.LocalTime localTime23 = localTime10.withSecond((int) (short) 1);
        int int24 = localTime23.getMinute();
        java.time.OffsetTime offsetTime25 = offsetTime3.with((java.time.temporal.TemporalAdjuster) localTime23);
        int int26 = offsetTime25.getHour();
        org.joda.time.Days days27 = org.joda.time.Days.MAX_VALUE;
        org.joda.time.PeriodType periodType28 = days27.getPeriodType();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod((java.lang.Object) int26, periodType28);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: java.lang.Integer");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(offsetTime0);
        org.junit.Assert.assertNotNull(localTime1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "23:59:59.999999999-18:00" + "'", str2, "23:59:59.999999999-18:00");
        org.junit.Assert.assertNotNull(offsetTime3);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertTrue("'" + chronoField18 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField18.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 3601000000001L + "'", long21 == 3601000000001L);
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(offsetTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(days27);
        org.junit.Assert.assertNotNull(periodType28);
    }

    @Test
    public void test5395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5395");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((long) 0, chronology1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) 3, chronology4);
        org.joda.time.DateTime.Property property6 = dateTime5.dayOfYear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateMidnight dateMidnight8 = new org.joda.time.DateMidnight((java.lang.Object) dateTime5, chronology7);
        org.joda.time.DateTime dateTime9 = localTime2.toDateTime((org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTime dateTime11 = dateTime9.minusMillis((int) (byte) 0);
        org.joda.time.DateTime dateTime13 = dateTime9.withYearOfCentury((int) (byte) 10);
        org.joda.time.DateTime.Property property14 = dateTime13.hourOfDay();
        org.joda.time.DateTime dateTime16 = property14.addToCopy(52);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.LocalTime localTime19 = new org.joda.time.LocalTime((long) 0, chronology18);
        org.joda.time.Chronology chronology20 = localTime19.getChronology();
        org.joda.time.DateTimeField dateTimeField21 = chronology20.weekyearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime22 = org.joda.time.MutableDateTime.now(chronology20);
        org.joda.time.DateTimeField dateTimeField23 = chronology20.hourOfDay();
        int int24 = dateTime16.get(dateTimeField23);
        org.joda.time.ReadableInstant readableInstant25 = null;
        boolean boolean26 = dateTime16.isAfter(readableInstant25);
        org.joda.time.DateTime.Property property27 = dateTime16.minuteOfDay();
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(mutableDateTime22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 4 + "'", int24 == 4);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(property27);
    }

    @Test
    public void test5396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5396");
        org.joda.time.chrono.EthiopicChronology ethiopicChronology0 = org.joda.time.chrono.EthiopicChronology.getInstanceUTC();
        org.joda.time.DateTimeField dateTimeField1 = ethiopicChronology0.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField2 = ethiopicChronology0.era();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime((long) 0, chronology4);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) 3, chronology7);
        org.joda.time.DateTime.Property property9 = dateTime8.dayOfYear();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateMidnight dateMidnight11 = new org.joda.time.DateMidnight((java.lang.Object) dateTime8, chronology10);
        org.joda.time.DateTime dateTime12 = localTime5.toDateTime((org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.LocalTime localTime14 = localTime5.plusHours(3);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) 3, chronology16);
        org.joda.time.DateTime.Property property18 = dateTime17.dayOfYear();
        org.joda.time.Interval interval19 = property18.toInterval();
        org.joda.time.Period period20 = org.joda.time.Period.ZERO;
        org.joda.time.Period period21 = period20.normalizedStandard();
        org.joda.time.Period period23 = period21.minusMinutes((int) ' ');
        org.joda.time.Period period25 = period23.withMinutes(32769);
        boolean boolean26 = interval19.equals((java.lang.Object) period25);
        org.joda.time.LocalTime localTime28 = localTime14.withPeriodAdded((org.joda.time.ReadablePeriod) period25, (int) (byte) 100);
        org.joda.time.Period period30 = period25.minusMinutes((int) ':');
        long long33 = ethiopicChronology0.add((org.joda.time.ReadablePeriod) period25, (long) 0, 83399);
        org.joda.time.DateTimeField dateTimeField34 = ethiopicChronology0.clockhourOfDay();
        java.lang.String str35 = dateTimeField34.getName();
        org.junit.Assert.assertNotNull(ethiopicChronology0);
        org.junit.Assert.assertNotNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(interval19);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(localTime28);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 163974109860000L + "'", long33 == 163974109860000L);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "clockhourOfDay" + "'", str35, "clockhourOfDay");
    }

    @Test
    public void test5397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5397");
        java.util.stream.LongStream longStream1 = java.util.stream.LongStream.of(0L);
        boolean boolean2 = longStream1.isParallel();
        java.util.OptionalLong optionalLong3 = longStream1.min();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalTime localTime6 = new org.joda.time.LocalTime((long) 0, chronology5);
        org.joda.time.LocalTime localTime8 = localTime6.minusMillis(2022);
        org.joda.time.LocalTime localTime10 = localTime6.plusMillis((int) (byte) 0);
        org.joda.time.LocalTime localTime12 = localTime6.minusMinutes(23);
        org.joda.time.LocalTime.Property property13 = localTime12.secondOfMinute();
        org.joda.time.LocalTime.Property property14 = localTime12.millisOfSecond();
        org.joda.time.LocalTime localTime15 = property14.getLocalTime();
        org.joda.time.LocalTime localTime16 = property14.roundHalfFloorCopy();
        boolean boolean17 = optionalLong3.equals((java.lang.Object) property14);
        org.junit.Assert.assertNotNull(longStream1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(optionalLong3);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test5398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5398");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.now();
        java.time.LocalDateTime localDateTime2 = localDateTime0.minusYears((long) (byte) 10);
        java.time.LocalDateTime localDateTime3 = java.time.LocalDateTime.now();
        java.time.LocalDateTime localDateTime5 = localDateTime3.minusYears((long) (byte) 10);
        boolean boolean6 = localDateTime0.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime5);
        java.time.LocalDateTime localDateTime7 = java.time.LocalDateTime.now();
        java.time.temporal.ChronoField chronoField8 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime10 = localDateTime7.with((java.time.temporal.TemporalField) chronoField8, (long) 10);
        java.time.LocalDateTime localDateTime12 = localDateTime7.minusMinutes((long) 12);
        boolean boolean13 = localDateTime5.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime7);
        int int14 = localDateTime5.getYear();
        java.time.LocalDateTime localDateTime16 = localDateTime5.minusDays((-4831848L));
        java.time.LocalDateTime localDateTime17 = java.time.LocalDateTime.now();
        java.time.LocalTime localTime22 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime23 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime22);
        java.time.temporal.ChronoField chronoField24 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime26 = localTime22.with((java.time.temporal.TemporalField) chronoField24, (long) (short) 1);
        java.util.Locale locale27 = java.util.Locale.GERMANY;
        java.lang.String str28 = chronoField24.getDisplayName(locale27);
        long long29 = localDateTime17.getLong((java.time.temporal.TemporalField) chronoField24);
        java.time.LocalDateTime localDateTime31 = localDateTime17.plusHours((long) 10);
        boolean boolean32 = localDateTime16.isAfter((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime31);
        java.time.LocalDateTime localDateTime34 = localDateTime31.plusSeconds(46438L);
        // The following exception was thrown during execution in test generation
        try {
            java.time.LocalDateTime localDateTime36 = localDateTime34.withDayOfMonth(120);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for DayOfMonth (valid values 1 - 28/31): 120");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertTrue("'" + chronoField8 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField8.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2012 + "'", int14 == 2012);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertTrue("'" + chronoField24 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField24.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime26);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "NanoOfDay" + "'", str28, "NanoOfDay");
// flaky:         org.junit.Assert.assertTrue("'" + long29 + "' != '" + 34914598000000L + "'", long29 == 34914598000000L);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(localDateTime34);
    }

    @Test
    public void test5399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5399");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 3, chronology1);
        org.joda.time.DateTime.Property property3 = dateTime2.dayOfYear();
        org.joda.time.Interval interval4 = property3.toInterval();
        org.joda.time.DateTimeField dateTimeField5 = property3.getField();
        org.joda.time.DateTime dateTime7 = property3.addToCopy((long) (byte) 1);
        org.joda.time.DateTime dateTime8 = property3.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime9 = dateTime8.toLocalDateTime();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(localDateTime9);
    }

    @Test
    public void test5400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5400");
        java.nio.charset.Charset charset0 = java.nio.charset.Charset.defaultCharset();
        java.nio.charset.CharsetDecoder charsetDecoder1 = charset0.newDecoder();
        float float2 = charsetDecoder1.maxCharsPerByte();
        java.nio.charset.Charset charset3 = java.nio.charset.Charset.defaultCharset();
        java.nio.charset.CharsetDecoder charsetDecoder4 = charset3.newDecoder();
        java.nio.charset.Charset charset5 = java.nio.charset.Charset.defaultCharset();
        boolean boolean6 = charset3.contains(charset5);
        java.nio.charset.CharsetEncoder charsetEncoder7 = charset3.newEncoder();
        char[] charArray8 = new char[] {};
        java.nio.CharBuffer charBuffer9 = java.nio.CharBuffer.wrap(charArray8);
        java.nio.ByteBuffer byteBuffer10 = charsetEncoder7.encode(charBuffer9);
        char[] charArray17 = new char[] { '#', '/', '4', 'a', '4', 'u' };
        java.nio.CharBuffer charBuffer18 = java.nio.CharBuffer.wrap(charArray17);
        java.nio.charset.CoderResult coderResult20 = charsetDecoder1.decode(byteBuffer10, charBuffer18, false);
        java.nio.ByteBuffer byteBuffer21 = byteBuffer10.asReadOnlyBuffer();
        java.nio.ByteBuffer byteBuffer22 = byteBuffer10.slice();
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer24 = byteBuffer10.putDouble((double) (-50976000000L));
            org.junit.Assert.fail("Expected exception of type java.nio.BufferOverflowException; message: null");
        } catch (java.nio.BufferOverflowException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charset0);
        org.junit.Assert.assertNotNull(charsetDecoder1);
        org.junit.Assert.assertTrue("'" + float2 + "' != '" + 1.0f + "'", float2 == 1.0f);
        org.junit.Assert.assertNotNull(charset3);
        org.junit.Assert.assertNotNull(charsetDecoder4);
        org.junit.Assert.assertNotNull(charset5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(charsetEncoder7);
        org.junit.Assert.assertNotNull(charArray8);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray8), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray8), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray8), "[]");
        org.junit.Assert.assertNotNull(charBuffer9);
        org.junit.Assert.assertNotNull(byteBuffer10);
        org.junit.Assert.assertNotNull(charArray17);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray17), "#/4a4u");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray17), "#/4a4u");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray17), "[#, /, 4, a, 4, u]");
        org.junit.Assert.assertNotNull(charBuffer18);
        org.junit.Assert.assertNotNull(coderResult20);
        org.junit.Assert.assertNotNull(byteBuffer21);
        org.junit.Assert.assertNotNull(byteBuffer22);
    }

    @Test
    public void test5401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5401");
        java.util.GregorianCalendar gregorianCalendar5 = new java.util.GregorianCalendar(12, 4096, 7, (-1), (int) (short) 10);
        int int6 = gregorianCalendar5.getWeeksInWeekYear();
        java.util.TimeZone timeZone7 = gregorianCalendar5.getTimeZone();
        int int9 = timeZone7.getOffset((long) 14);
        java.time.ZoneId zoneId10 = timeZone7.toZoneId();
        java.time.LocalTime localTime17 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime18 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime17);
        java.time.temporal.ChronoField chronoField19 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime21 = localTime17.with((java.time.temporal.TemporalField) chronoField19, (long) (short) 1);
        java.util.Locale locale22 = java.util.Locale.GERMANY;
        java.lang.String str23 = chronoField19.getDisplayName(locale22);
        java.lang.String str24 = timeZone7.getDisplayName(false, (int) '\000', locale22);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 52 + "'", int6 == 52);
        org.junit.Assert.assertNotNull(timeZone7);
// flaky:         org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "Koordinierte Universalzeit");
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
        org.junit.Assert.assertNotNull(zoneId10);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertTrue("'" + chronoField19 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField19.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "NanoOfDay" + "'", str23, "NanoOfDay");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "UTC" + "'", str24, "UTC");
    }

    @Test
    public void test5402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5402");
        java.nio.charset.Charset charset0 = java.nio.charset.Charset.defaultCharset();
        java.nio.charset.CharsetDecoder charsetDecoder1 = charset0.newDecoder();
        float float2 = charsetDecoder1.maxCharsPerByte();
        java.nio.charset.CodingErrorAction codingErrorAction3 = java.nio.charset.CodingErrorAction.IGNORE;
        java.nio.charset.CharsetDecoder charsetDecoder4 = charsetDecoder1.onMalformedInput(codingErrorAction3);
        java.nio.ByteBuffer byteBuffer6 = java.nio.ByteBuffer.allocateDirect(10800000);
        java.nio.ByteBuffer byteBuffer7 = byteBuffer6.asReadOnlyBuffer();
        boolean boolean8 = byteBuffer7.hasArray();
        java.nio.CharBuffer charBuffer9 = charsetDecoder1.decode(byteBuffer7);
        java.net.URI uRI11 = new java.net.URI("hi!");
        java.lang.String str12 = uRI11.getRawAuthority();
        java.lang.String str13 = uRI11.toString();
        java.lang.String str14 = uRI11.getUserInfo();
        java.io.OutputStream outputStream15 = null;
        java.io.FilterOutputStream filterOutputStream16 = new java.io.FilterOutputStream(outputStream15);
        byte[] byteArray18 = new byte[] { (byte) 100 };
        filterOutputStream16.write(byteArray18, (int) (byte) 0, (int) (byte) 0);
        java.nio.ByteBuffer byteBuffer22 = java.nio.ByteBuffer.wrap(byteArray18);
        java.nio.LongBuffer longBuffer23 = byteBuffer22.asLongBuffer();
        java.nio.ByteBuffer byteBuffer24 = byteBuffer22.duplicate();
        boolean boolean25 = uRI11.equals((java.lang.Object) byteBuffer22);
        java.nio.DoubleBuffer doubleBuffer26 = byteBuffer22.asDoubleBuffer();
        java.util.stream.IntStream intStream28 = java.util.stream.IntStream.of((int) '/');
        java.util.OptionalInt optionalInt29 = intStream28.min();
        short[] shortArray32 = new short[] { (short) 1, (byte) 10 };
        java.nio.ShortBuffer shortBuffer33 = java.nio.ShortBuffer.wrap(shortArray32);
        short[] shortArray36 = new short[] { (short) 1, (byte) 10 };
        java.nio.ShortBuffer shortBuffer37 = java.nio.ShortBuffer.wrap(shortArray36);
        java.nio.ShortBuffer shortBuffer38 = shortBuffer33.put(shortBuffer37);
        int int39 = shortBuffer38.limit();
        boolean boolean40 = shortBuffer38.isReadOnly();
        boolean boolean41 = optionalInt29.equals((java.lang.Object) shortBuffer38);
        java.nio.ByteOrder byteOrder42 = shortBuffer38.order();
        java.nio.ByteBuffer byteBuffer43 = byteBuffer22.order(byteOrder42);
        java.nio.ByteBuffer byteBuffer45 = byteBuffer43.put((byte) 0);
        java.nio.CharBuffer charBuffer46 = charsetDecoder1.decode(byteBuffer45);
        java.lang.String str47 = charBuffer46.toString();
        org.junit.Assert.assertNotNull(charset0);
        org.junit.Assert.assertNotNull(charsetDecoder1);
        org.junit.Assert.assertTrue("'" + float2 + "' != '" + 1.0f + "'", float2 == 1.0f);
        org.junit.Assert.assertNotNull(codingErrorAction3);
        org.junit.Assert.assertNotNull(charsetDecoder4);
        org.junit.Assert.assertNotNull(byteBuffer6);
        org.junit.Assert.assertNotNull(byteBuffer7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(charBuffer9);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[0]");
        org.junit.Assert.assertNotNull(byteBuffer22);
        org.junit.Assert.assertNotNull(longBuffer23);
        org.junit.Assert.assertNotNull(byteBuffer24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(doubleBuffer26);
        org.junit.Assert.assertNotNull(intStream28);
        org.junit.Assert.assertNotNull(optionalInt29);
        org.junit.Assert.assertNotNull(shortArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray32), "[1, 10]");
        org.junit.Assert.assertNotNull(shortBuffer33);
        org.junit.Assert.assertNotNull(shortArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray36), "[1, 10]");
        org.junit.Assert.assertNotNull(shortBuffer37);
        org.junit.Assert.assertNotNull(shortBuffer38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2 + "'", int39 == 2);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(byteOrder42);
        org.junit.Assert.assertNotNull(byteBuffer43);
        org.junit.Assert.assertNotNull(byteBuffer45);
        org.junit.Assert.assertNotNull(charBuffer46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
    }

    @Test
    public void test5403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5403");
        java.net.InetAddress inetAddress0 = java.net.InetAddress.getLocalHost();
        java.lang.String str1 = inetAddress0.toString();
        java.net.NetworkInterface networkInterface2 = java.net.NetworkInterface.getByInetAddress(inetAddress0);
        java.util.List<java.net.InterfaceAddress> interfaceAddressList3 = networkInterface2.getInterfaceAddresses();
        boolean boolean4 = networkInterface2.supportsMulticast();
        boolean boolean5 = networkInterface2.isPointToPoint();
        boolean boolean6 = networkInterface2.isVirtual();
        java.util.GregorianCalendar gregorianCalendar12 = new java.util.GregorianCalendar(12, 4096, 7, (-1), (int) (short) 10);
        gregorianCalendar12.roll(7, false);
        int int17 = gregorianCalendar12.getMinimum(1);
        org.joda.time.LocalTime localTime18 = org.joda.time.LocalTime.fromCalendarFields((java.util.Calendar) gregorianCalendar12);
        boolean boolean19 = networkInterface2.equals((java.lang.Object) localTime18);
        org.junit.Assert.assertNotNull(inetAddress0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "599b081c1808/172.17.0.2" + "'", str1, "599b081c1808/172.17.0.2");
        org.junit.Assert.assertNotNull(networkInterface2);
        org.junit.Assert.assertNotNull(interfaceAddressList3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test5404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5404");
        java.util.GregorianCalendar gregorianCalendar5 = new java.util.GregorianCalendar(12, 4096, 7, (-1), (int) (short) 10);
        gregorianCalendar5.roll(7, false);
        java.util.TimeZone timeZone9 = gregorianCalendar5.getTimeZone();
        java.util.GregorianCalendar gregorianCalendar15 = new java.util.GregorianCalendar(12, 4096, 7, (-1), (int) (short) 10);
        int int16 = gregorianCalendar15.getWeeksInWeekYear();
        java.util.TimeZone timeZone17 = gregorianCalendar15.getTimeZone();
        int int19 = timeZone17.getOffset((long) '.');
        int int20 = timeZone17.getRawOffset();
        gregorianCalendar5.setTimeZone(timeZone17);
        org.junit.Assert.assertNotNull(timeZone9);
// flaky:         org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 52 + "'", int16 == 52);
        org.junit.Assert.assertNotNull(timeZone17);
// flaky:         org.junit.Assert.assertEquals(timeZone17.getDisplayName(), "Koordinierte Universalzeit");
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 35 + "'", int19 == 35);
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 35 + "'", int20 == 35);
    }

    @Test
    public void test5405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5405");
        java.time.OffsetTime offsetTime0 = java.time.OffsetTime.MAX;
        java.time.LocalTime localTime1 = offsetTime0.toLocalTime();
        java.lang.String str2 = offsetTime0.toString();
        java.time.Duration duration3 = java.time.Duration.ZERO;
        java.lang.String str4 = duration3.toString();
        java.time.OffsetTime offsetTime5 = offsetTime0.plus((java.time.temporal.TemporalAmount) duration3);
        java.time.OffsetTime offsetTime7 = offsetTime0.plusNanos((long) 0);
        java.time.LocalDate localDate9 = java.time.LocalDate.ofEpochDay((long) ' ');
        java.time.OffsetTime offsetTime10 = java.time.OffsetTime.MAX;
        java.time.LocalTime localTime11 = offsetTime10.toLocalTime();
        java.lang.String str12 = offsetTime10.toString();
        java.time.Duration duration13 = java.time.Duration.ZERO;
        java.lang.String str14 = duration13.toString();
        java.time.OffsetTime offsetTime15 = offsetTime10.plus((java.time.temporal.TemporalAmount) duration13);
        java.time.LocalTime localTime16 = offsetTime10.toLocalTime();
        java.time.chrono.ChronoLocalDateTime<?> wildcardChronoLocalDateTime17 = localDate9.atTime(localTime16);
        java.time.LocalDate localDate19 = localDate9.minusWeeks((long) 2097);
        java.time.OffsetDateTime offsetDateTime20 = offsetTime7.atDate(localDate9);
        java.time.ZoneOffset zoneOffset21 = offsetTime7.getOffset();
        org.junit.Assert.assertNotNull(offsetTime0);
        org.junit.Assert.assertNotNull(localTime1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "23:59:59.999999999-18:00" + "'", str2, "23:59:59.999999999-18:00");
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "PT0S" + "'", str4, "PT0S");
        org.junit.Assert.assertNotNull(offsetTime5);
        org.junit.Assert.assertNotNull(offsetTime7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(offsetTime10);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "23:59:59.999999999-18:00" + "'", str12, "23:59:59.999999999-18:00");
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "PT0S" + "'", str14, "PT0S");
        org.junit.Assert.assertNotNull(offsetTime15);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(wildcardChronoLocalDateTime17);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(offsetDateTime20);
        org.junit.Assert.assertNotNull(zoneOffset21);
    }

    @Test
    public void test5406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5406");
        java.util.Set<java.lang.String> strSet0 = java.time.ZoneId.getAvailableZoneIds();
        java.util.Set<java.lang.String> strSet1 = java.time.ZoneId.getAvailableZoneIds();
        java.util.stream.Stream<java.lang.String> strStream2 = strSet1.parallelStream();
        java.lang.Object[] objArray3 = strSet1.toArray();
        java.util.Spliterator<java.lang.String> strSpliterator4 = strSet1.spliterator();
        boolean boolean5 = strSet0.containsAll((java.util.Collection<java.lang.String>) strSet1);
        java.util.Iterator<java.lang.String> strItor6 = strSet1.iterator();
        java.util.Iterator<java.lang.String> strItor7 = strSet1.iterator();
        org.junit.Assert.assertNotNull(strSet0);
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNotNull(strStream2);
        org.junit.Assert.assertNotNull(objArray3);
        org.junit.Assert.assertNotNull(strSpliterator4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(strItor6);
        org.junit.Assert.assertNotNull(strItor7);
    }

    @Test
    public void test5407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5407");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocateDirect(10800000);
        java.nio.ByteBuffer byteBuffer2 = byteBuffer1.asReadOnlyBuffer();
        boolean boolean3 = byteBuffer2.hasArray();
        java.lang.String str4 = byteBuffer2.toString();
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer7 = byteBuffer2.putInt(1969, 34482);
            org.junit.Assert.fail("Expected exception of type java.nio.ReadOnlyBufferException; message: null");
        } catch (java.nio.ReadOnlyBufferException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "java.nio.DirectByteBufferR[pos=0 lim=10800000 cap=10800000]" + "'", str4, "java.nio.DirectByteBufferR[pos=0 lim=10800000 cap=10800000]");
    }

    @Test
    public void test5408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5408");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Duration duration2 = new org.joda.time.Duration(readableInstant0, readableInstant1);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = duration2.toPeriodTo(readableInstant3, periodType4);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.Duration duration8 = new org.joda.time.Duration(readableInstant6, readableInstant7);
        long long9 = duration8.getMillis();
        boolean boolean10 = duration2.isShorterThan((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) 3, chronology12);
        org.joda.time.DateTime.Property property14 = dateTime13.dayOfYear();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight((java.lang.Object) dateTime13, chronology15);
        org.joda.time.MutableDateTime mutableDateTime17 = dateTime13.toMutableDateTime();
        mutableDateTime17.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime17.dayOfWeek();
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime17.year();
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime17.weekyear();
        boolean boolean23 = duration2.equals((java.lang.Object) mutableDateTime17);
        mutableDateTime17.addMonths((int) ' ');
        mutableDateTime17.add((long) (byte) 10);
        org.joda.time.Period period28 = org.joda.time.Period.ZERO;
        org.joda.time.Period period29 = period28.normalizedStandard();
        org.joda.time.Period period31 = period28.plusHours(2);
        java.time.chrono.IsoEra isoEra32 = java.time.chrono.IsoEra.CE;
        boolean boolean33 = period31.equals((java.lang.Object) isoEra32);
        int int34 = period31.getMinutes();
        mutableDateTime17.add((org.joda.time.ReadablePeriod) period31);
        java.util.TimeZone timeZone37 = null;
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forTimeZone(timeZone37);
        org.joda.time.DateMidnight dateMidnight39 = new org.joda.time.DateMidnight((long) 1970, dateTimeZone38);
        long long42 = dateTimeZone38.convertLocalToUTC((long) 3, false);
        long long45 = dateTimeZone38.convertLocalToUTC(0L, true);
        mutableDateTime17.setZoneRetainFields(dateTimeZone38);
        java.lang.String str47 = dateTimeZone38.toString();
        org.joda.time.chrono.EthiopicChronology ethiopicChronology48 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone38);
        org.joda.time.DateTimeField dateTimeField49 = ethiopicChronology48.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone50 = ethiopicChronology48.getZone();
        org.joda.time.DateTimeField dateTimeField51 = ethiopicChronology48.era();
        org.joda.time.DateTimeField dateTimeField52 = ethiopicChronology48.secondOfDay();
        org.joda.time.DateTimeField dateTimeField53 = ethiopicChronology48.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField54 = ethiopicChronology48.halfdayOfDay();
        org.joda.time.DurationField durationField55 = ethiopicChronology48.weekyears();
        org.joda.time.DateTimeField dateTimeField56 = ethiopicChronology48.yearOfEra();
        org.joda.time.DateTimeField dateTimeField57 = ethiopicChronology48.hourOfHalfday();
        long long59 = dateTimeField57.roundHalfCeiling(1645436337000L);
        java.util.Locale locale60 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.String> strSet61 = locale60.getUnicodeLocaleKeys();
        int int62 = dateTimeField57.getMaximumShortTextLength(locale60);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertTrue("'" + isoEra32 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra32.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 3L + "'", long42 == 3L);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Etc/UTC" + "'", str47, "Etc/UTC");
        org.junit.Assert.assertNotNull(ethiopicChronology48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(durationField55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 1645437600000L + "'", long59 == 1645437600000L);
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "ko");
        org.junit.Assert.assertNotNull(strSet61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 2 + "'", int62 == 2);
    }

    @Test
    public void test5409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5409");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.yearOfCentury();
        int int3 = property2.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime5 = property2.addToCopy((long) (-1));
        org.joda.time.LocalDateTime localDateTime6 = property2.roundHalfFloorCopy();
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime9 = property7.addToCopy(97);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime11 = property7.setCopy(64);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 64 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 99 + "'", int3 == 99);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime9);
    }

    @Test
    public void test5410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5410");
        org.joda.time.Interval interval2 = new org.joda.time.Interval(100L, (long) 1970);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.Duration duration5 = new org.joda.time.Duration(readableInstant3, readableInstant4);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.PeriodType periodType7 = null;
        org.joda.time.Period period8 = duration5.toPeriodTo(readableInstant6, periodType7);
        long long9 = duration5.getStandardSeconds();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) 3, chronology11);
        org.joda.time.DateTime.Property property13 = dateTime12.dayOfYear();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateMidnight dateMidnight15 = new org.joda.time.DateMidnight((java.lang.Object) dateTime12, chronology14);
        org.joda.time.DateMidnight dateMidnight17 = dateMidnight15.minusMonths((-1));
        org.joda.time.DateMidnight dateMidnight19 = dateMidnight15.withDayOfYear((int) ' ');
        org.joda.time.Interval interval20 = duration5.toIntervalTo((org.joda.time.ReadableInstant) dateMidnight19);
        org.joda.time.DateMidnight dateMidnight22 = dateMidnight19.withDayOfYear((int) (short) 100);
        boolean boolean23 = interval2.isBefore((org.joda.time.ReadableInstant) dateMidnight19);
        org.joda.time.MutableDateTime mutableDateTime24 = org.joda.time.MutableDateTime.now();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((long) 3, chronology26);
        org.joda.time.DateTime.Property property28 = dateTime27.dayOfYear();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.DateMidnight dateMidnight30 = new org.joda.time.DateMidnight((java.lang.Object) dateTime27, chronology29);
        org.joda.time.MutableDateTime mutableDateTime31 = dateTime27.toMutableDateTime();
        mutableDateTime31.addYears((int) (short) 100);
        org.joda.time.Period period34 = org.joda.time.Period.ZERO;
        org.joda.time.TimeOfDay timeOfDay36 = org.joda.time.TimeOfDay.fromMillisOfDay((long) (short) 0);
        org.joda.time.TimeOfDay timeOfDay38 = org.joda.time.TimeOfDay.fromMillisOfDay((long) (short) 0);
        org.joda.time.Hours hours39 = org.joda.time.Hours.hoursBetween((org.joda.time.ReadablePartial) timeOfDay36, (org.joda.time.ReadablePartial) timeOfDay38);
        org.joda.time.DurationFieldType durationFieldType40 = org.joda.time.DurationFieldType.hours();
        org.joda.time.TimeOfDay timeOfDay42 = timeOfDay38.withFieldAdded(durationFieldType40, (int) (byte) 0);
        org.joda.time.Period period44 = period34.withFieldAdded(durationFieldType40, 4);
        mutableDateTime31.add((org.joda.time.ReadablePeriod) period34);
        mutableDateTime24.add((org.joda.time.ReadablePeriod) period34, (int) (short) 10);
        org.joda.time.Interval interval48 = interval2.withEnd((org.joda.time.ReadableInstant) mutableDateTime24);
        int int49 = mutableDateTime24.getMillisOfSecond();
        mutableDateTime24.setSecondOfMinute(52);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(mutableDateTime24);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(mutableDateTime31);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(timeOfDay36);
        org.junit.Assert.assertNotNull(timeOfDay38);
        org.junit.Assert.assertNotNull(hours39);
        org.junit.Assert.assertNotNull(durationFieldType40);
        org.junit.Assert.assertNotNull(timeOfDay42);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertNotNull(interval48);
// flaky:         org.junit.Assert.assertTrue("'" + int49 + "' != '" + 344 + "'", int49 == 344);
    }

    @Test
    public void test5411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5411");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Duration duration2 = new org.joda.time.Duration(readableInstant0, readableInstant1);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = duration2.toPeriodTo(readableInstant3, periodType4);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.Duration duration8 = new org.joda.time.Duration(readableInstant6, readableInstant7);
        long long9 = duration8.getMillis();
        boolean boolean10 = duration2.isShorterThan((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) 3, chronology12);
        org.joda.time.DateTime.Property property14 = dateTime13.dayOfYear();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight((java.lang.Object) dateTime13, chronology15);
        org.joda.time.MutableDateTime mutableDateTime17 = dateTime13.toMutableDateTime();
        mutableDateTime17.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime17.dayOfWeek();
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime17.year();
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime17.weekyear();
        boolean boolean23 = duration2.equals((java.lang.Object) mutableDateTime17);
        mutableDateTime17.addMonths((int) ' ');
        mutableDateTime17.add((long) (byte) 10);
        org.joda.time.Period period28 = org.joda.time.Period.ZERO;
        org.joda.time.Period period29 = period28.normalizedStandard();
        org.joda.time.Period period31 = period28.plusHours(2);
        java.time.chrono.IsoEra isoEra32 = java.time.chrono.IsoEra.CE;
        boolean boolean33 = period31.equals((java.lang.Object) isoEra32);
        int int34 = period31.getMinutes();
        mutableDateTime17.add((org.joda.time.ReadablePeriod) period31);
        java.util.TimeZone timeZone37 = null;
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forTimeZone(timeZone37);
        org.joda.time.DateMidnight dateMidnight39 = new org.joda.time.DateMidnight((long) 1970, dateTimeZone38);
        long long42 = dateTimeZone38.convertLocalToUTC((long) 3, false);
        long long45 = dateTimeZone38.convertLocalToUTC(0L, true);
        mutableDateTime17.setZoneRetainFields(dateTimeZone38);
        java.lang.String str47 = dateTimeZone38.toString();
        org.joda.time.chrono.EthiopicChronology ethiopicChronology48 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone38);
        org.joda.time.DateTimeField dateTimeField49 = ethiopicChronology48.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone50 = ethiopicChronology48.getZone();
        org.joda.time.DateTimeField dateTimeField51 = ethiopicChronology48.era();
        org.joda.time.DateTimeField dateTimeField52 = ethiopicChronology48.secondOfDay();
        org.joda.time.DateTimeField dateTimeField53 = ethiopicChronology48.minuteOfHour();
        org.joda.time.DurationField durationField54 = ethiopicChronology48.months();
        org.joda.time.DateTimeField dateTimeField55 = ethiopicChronology48.weekyearOfCentury();
        org.joda.time.Minutes minutes56 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes58 = minutes56.minus(12);
        org.joda.time.Minutes minutes59 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes61 = minutes59.minus(12);
        org.joda.time.Minutes minutes62 = minutes56.minus(minutes59);
        org.joda.time.DurationFieldType durationFieldType63 = minutes56.getFieldType();
        int[] intArray66 = ethiopicChronology48.get((org.joda.time.ReadablePeriod) minutes56, (long) 30, (long) 741000000);
        org.joda.time.DateTimeZone dateTimeZone67 = ethiopicChronology48.getZone();
        org.joda.time.DateTimeField dateTimeField68 = ethiopicChronology48.monthOfYear();
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertTrue("'" + isoEra32 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra32.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 3L + "'", long42 == 3L);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Etc/UTC" + "'", str47, "Etc/UTC");
        org.junit.Assert.assertNotNull(ethiopicChronology48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(durationField54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(minutes56);
        org.junit.Assert.assertNotNull(minutes58);
        org.junit.Assert.assertNotNull(minutes59);
        org.junit.Assert.assertNotNull(minutes61);
        org.junit.Assert.assertNotNull(minutes62);
        org.junit.Assert.assertNotNull(durationFieldType63);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[12349]");
        org.junit.Assert.assertNotNull(dateTimeZone67);
        org.junit.Assert.assertNotNull(dateTimeField68);
    }

    @Test
    public void test5412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5412");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((long) 0, chronology2);
        org.joda.time.Chronology chronology4 = localTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField5 = chronology4.weekyearOfCentury();
        org.joda.time.DurationField durationField6 = chronology4.weekyears();
        org.joda.time.DurationField durationField7 = chronology4.seconds();
        org.joda.time.LocalTime localTime8 = org.joda.time.LocalTime.fromMillisOfDay((long) (byte) 0, chronology4);
        org.joda.time.LocalTime.Property property9 = localTime8.millisOfSecond();
        org.joda.time.LocalTime localTime10 = property9.roundCeilingCopy();
        org.joda.time.LocalTime localTime12 = property9.addCopy((-1));
        java.lang.String str13 = property9.getAsShortText();
        org.joda.time.LocalTime localTime14 = property9.withMinimumValue();
        org.joda.time.DateTime dateTime15 = localTime14.toDateTimeToday();
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "0" + "'", str13, "0");
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(dateTime15);
    }

    @Test
    public void test5413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5413");
        org.joda.time.Period period0 = org.joda.time.Period.ZERO;
        org.joda.time.Period period1 = period0.normalizedStandard();
        org.joda.time.Period period3 = period0.plusHours(2);
        org.joda.time.Instant instant4 = new org.joda.time.Instant();
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.Duration duration7 = new org.joda.time.Duration(readableInstant5, readableInstant6);
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.PeriodType periodType9 = null;
        org.joda.time.Period period10 = duration7.toPeriodTo(readableInstant8, periodType9);
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.Duration duration13 = new org.joda.time.Duration(readableInstant11, readableInstant12);
        long long14 = duration13.getMillis();
        boolean boolean15 = duration7.isShorterThan((org.joda.time.ReadableDuration) duration13);
        org.joda.time.Instant instant16 = instant4.minus((org.joda.time.ReadableDuration) duration7);
        org.joda.time.Duration duration17 = period3.toDurationFrom((org.joda.time.ReadableInstant) instant4);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) 3, chronology19);
        org.joda.time.DateTime.Property property21 = dateTime20.dayOfYear();
        org.joda.time.Interval interval22 = property21.toInterval();
        org.joda.time.Period period23 = org.joda.time.Period.ZERO;
        org.joda.time.Period period24 = period23.normalizedStandard();
        org.joda.time.Period period26 = period24.minusMinutes((int) ' ');
        org.joda.time.Period period28 = period26.withMinutes(32769);
        boolean boolean29 = interval22.equals((java.lang.Object) period28);
        org.joda.time.Period period30 = org.joda.time.Period.ZERO;
        org.joda.time.Period period31 = period30.normalizedStandard();
        org.joda.time.Period period33 = period30.plusHours(2);
        int int34 = period30.getDays();
        org.joda.time.Interval interval35 = interval22.withPeriodBeforeEnd((org.joda.time.ReadablePeriod) period30);
        long long36 = interval35.getEndMillis();
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.ReadableInstant readableInstant38 = null;
        org.joda.time.Duration duration39 = new org.joda.time.Duration(readableInstant37, readableInstant38);
        org.joda.time.Duration duration41 = duration39.withMillis((-1L));
        org.joda.time.ReadableDuration readableDuration42 = null;
        org.joda.time.Duration duration43 = duration39.minus(readableDuration42);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((long) 3, chronology45);
        org.joda.time.DateTime.Property property47 = dateTime46.dayOfYear();
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.DateMidnight dateMidnight49 = new org.joda.time.DateMidnight((java.lang.Object) dateTime46, chronology48);
        org.joda.time.DateMidnight.Property property50 = dateMidnight49.dayOfMonth();
        org.joda.time.DateMidnight dateMidnight51 = property50.getDateMidnight();
        org.joda.time.Interval interval52 = new org.joda.time.Interval((org.joda.time.ReadableDuration) duration43, (org.joda.time.ReadableInstant) dateMidnight51);
        org.joda.time.Interval interval53 = interval35.withDurationAfterStart((org.joda.time.ReadableDuration) duration43);
        boolean boolean54 = duration17.isLongerThan((org.joda.time.ReadableDuration) duration43);
        org.junit.Assert.assertNotNull(period0);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(instant16);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 86400000L + "'", long36 == 86400000L);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(dateMidnight51);
        org.junit.Assert.assertNotNull(interval53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
    }

    @Test
    public void test5414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5414");
        java.util.GregorianCalendar gregorianCalendar5 = new java.util.GregorianCalendar(12, 4096, 7, (-1), (int) (short) 10);
        gregorianCalendar5.set((int) ':', 3, 256, 5, 17, 3600000);
        int int13 = gregorianCalendar5.getWeekYear();
        int int14 = gregorianCalendar5.getFirstDayOfWeek();
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.fromCalendarFields((java.util.Calendar) gregorianCalendar5);
        int int16 = gregorianCalendar5.getMinimalDaysInFirstWeek();
        gregorianCalendar5.setFirstDayOfWeek((-4));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 59 + "'", int13 == 59);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
    }

    @Test
    public void test5415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5415");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 3, chronology1);
        org.joda.time.DateTime.Property property3 = dateTime2.dayOfYear();
        org.joda.time.Interval interval4 = property3.toInterval();
        org.joda.time.DateTimeField dateTimeField5 = property3.getField();
        org.joda.time.DateTime dateTime7 = property3.addToCopy((long) (byte) 1);
        org.joda.time.DateTime dateTime9 = dateTime7.withYear(4);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) 3, chronology11);
        org.joda.time.Period period13 = org.joda.time.Period.ZERO;
        org.joda.time.Period period14 = period13.normalizedStandard();
        org.joda.time.Period period16 = period14.minusMinutes((int) ' ');
        org.joda.time.Period period18 = period16.minusMonths((int) (byte) 0);
        org.joda.time.PeriodType periodType19 = period18.getPeriodType();
        org.joda.time.DateTime dateTime20 = dateTime12.minus((org.joda.time.ReadablePeriod) period18);
        org.joda.time.Duration duration21 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((long) 3, chronology23);
        org.joda.time.DateTime.Property property25 = dateTime24.dayOfYear();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateMidnight dateMidnight27 = new org.joda.time.DateMidnight((java.lang.Object) dateTime24, chronology26);
        org.joda.time.MutableDateTime mutableDateTime28 = dateTime24.toMutableDateTime();
        mutableDateTime28.addYears((int) (short) 100);
        mutableDateTime28.setMillis((long) 21);
        org.joda.time.MutableDateTime.Property property33 = mutableDateTime28.weekOfWeekyear();
        org.joda.time.TimeOfDay timeOfDay35 = org.joda.time.TimeOfDay.fromMillisOfDay((long) (short) 0);
        org.joda.time.TimeOfDay timeOfDay37 = org.joda.time.TimeOfDay.fromMillisOfDay((long) (short) 0);
        org.joda.time.Hours hours38 = org.joda.time.Hours.hoursBetween((org.joda.time.ReadablePartial) timeOfDay35, (org.joda.time.ReadablePartial) timeOfDay37);
        org.joda.time.DurationFieldType durationFieldType39 = org.joda.time.DurationFieldType.hours();
        org.joda.time.TimeOfDay timeOfDay41 = timeOfDay37.withFieldAdded(durationFieldType39, (int) (byte) 0);
        org.joda.time.TimeOfDay timeOfDay43 = org.joda.time.TimeOfDay.fromMillisOfDay((long) (short) 0);
        org.joda.time.TimeOfDay timeOfDay45 = org.joda.time.TimeOfDay.fromMillisOfDay((long) (short) 0);
        org.joda.time.Hours hours46 = org.joda.time.Hours.hoursBetween((org.joda.time.ReadablePartial) timeOfDay43, (org.joda.time.ReadablePartial) timeOfDay45);
        org.joda.time.TimeOfDay timeOfDay48 = timeOfDay43.withSecondOfMinute(0);
        boolean boolean49 = timeOfDay41.isAfter((org.joda.time.ReadablePartial) timeOfDay48);
        org.joda.time.TimeOfDay timeOfDay51 = timeOfDay41.minusSeconds(32769);
        org.joda.time.DateTime dateTime52 = timeOfDay41.toDateTimeToday();
        boolean boolean53 = mutableDateTime28.isBefore((org.joda.time.ReadableInstant) dateTime52);
        org.joda.time.MutableInterval mutableInterval54 = new org.joda.time.MutableInterval((org.joda.time.ReadableDuration) duration21, (org.joda.time.ReadableInstant) mutableDateTime28);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime28.setHourOfDay((int) '/');
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 47 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(interval4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(mutableDateTime28);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(timeOfDay35);
        org.junit.Assert.assertNotNull(timeOfDay37);
        org.junit.Assert.assertNotNull(hours38);
        org.junit.Assert.assertNotNull(durationFieldType39);
        org.junit.Assert.assertNotNull(timeOfDay41);
        org.junit.Assert.assertNotNull(timeOfDay43);
        org.junit.Assert.assertNotNull(timeOfDay45);
        org.junit.Assert.assertNotNull(hours46);
        org.junit.Assert.assertNotNull(timeOfDay48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(timeOfDay51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
    }

    @Test
    public void test5416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5416");
        java.time.OffsetDateTime offsetDateTime0 = java.time.OffsetDateTime.now();
        java.time.LocalDate localDate2 = java.time.LocalDate.ofEpochDay((long) ' ');
        int int3 = localDate2.getMonthValue();
        org.joda.time.Period period4 = org.joda.time.Period.ZERO;
        org.joda.time.Period period5 = period4.normalizedStandard();
        org.joda.time.Period period7 = period4.plusHours(2);
        java.time.chrono.IsoEra isoEra8 = java.time.chrono.IsoEra.CE;
        boolean boolean9 = period7.equals((java.lang.Object) isoEra8);
        java.time.LocalTime localTime14 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime15 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime14);
        java.time.LocalTime localTime20 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime21 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime20);
        java.time.temporal.ChronoField chronoField22 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime24 = localTime20.with((java.time.temporal.TemporalField) chronoField22, (long) (short) 1);
        long long25 = localTime14.getLong((java.time.temporal.TemporalField) chronoField22);
        boolean boolean26 = isoEra8.isSupported((java.time.temporal.TemporalField) chronoField22);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery27 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period28 = isoEra8.query(periodTemporalQuery27);
        boolean boolean29 = period28.isNegative();
        java.time.Period period31 = period28.plusDays((long) ' ');
        java.time.temporal.ChronoField chronoField32 = java.time.temporal.ChronoField.SECOND_OF_DAY;
        boolean boolean33 = period28.equals((java.lang.Object) chronoField32);
        boolean boolean34 = localDate2.isSupported((java.time.temporal.TemporalField) chronoField32);
        boolean boolean35 = offsetDateTime0.isSupported((java.time.temporal.TemporalField) chronoField32);
        java.time.Clock clock36 = java.time.Clock.systemUTC();
        java.time.Duration duration38 = java.time.Duration.ofSeconds((long) 256);
        java.time.Clock clock39 = java.time.Clock.tick(clock36, duration38);
        java.time.OffsetTime offsetTime40 = java.time.OffsetTime.MAX;
        java.time.LocalTime localTime41 = offsetTime40.toLocalTime();
        java.lang.String str42 = offsetTime40.toString();
        java.time.Duration duration43 = java.time.Duration.ZERO;
        java.lang.String str44 = duration43.toString();
        java.time.OffsetTime offsetTime45 = offsetTime40.plus((java.time.temporal.TemporalAmount) duration43);
        int int46 = duration38.compareTo(duration43);
        java.time.OffsetDateTime offsetDateTime47 = offsetDateTime0.plus((java.time.temporal.TemporalAmount) duration43);
        java.time.DayOfWeek dayOfWeek48 = offsetDateTime0.getDayOfWeek();
        java.time.OffsetDateTime offsetDateTime49 = java.time.OffsetDateTime.now();
        int int50 = offsetDateTime49.getDayOfMonth();
        java.time.OffsetDateTime offsetDateTime52 = offsetDateTime49.withMinute((int) (byte) 10);
        int int53 = offsetDateTime49.getHour();
        java.time.temporal.ChronoField chronoField54 = java.time.temporal.ChronoField.DAY_OF_MONTH;
        boolean boolean55 = chronoField54.isDateBased();
        long long56 = offsetDateTime49.getLong((java.time.temporal.TemporalField) chronoField54);
        boolean boolean57 = dayOfWeek48.isSupported((java.time.temporal.TemporalField) chronoField54);
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime58 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime60 = chronoField54.adjustInto(localDateChronoLocalDateTime58, 83399965000000L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(offsetDateTime0);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2 + "'", int3 == 2);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertTrue("'" + isoEra8 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra8.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertTrue("'" + chronoField22 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField22.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime24);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 3601000000001L + "'", long25 == 3601000000001L);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(periodTemporalQuery27);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertTrue("'" + chronoField32 + "' != '" + java.time.temporal.ChronoField.SECOND_OF_DAY + "'", chronoField32.equals(java.time.temporal.ChronoField.SECOND_OF_DAY));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(clock36);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(clock39);
        org.junit.Assert.assertNotNull(offsetTime40);
        org.junit.Assert.assertNotNull(localTime41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "23:59:59.999999999-18:00" + "'", str42, "23:59:59.999999999-18:00");
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "PT0S" + "'", str44, "PT0S");
        org.junit.Assert.assertNotNull(offsetTime45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertNotNull(offsetDateTime47);
        org.junit.Assert.assertTrue("'" + dayOfWeek48 + "' != '" + java.time.DayOfWeek.MONDAY + "'", dayOfWeek48.equals(java.time.DayOfWeek.MONDAY));
        org.junit.Assert.assertNotNull(offsetDateTime49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 21 + "'", int50 == 21);
        org.junit.Assert.assertNotNull(offsetDateTime52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 9 + "'", int53 == 9);
        org.junit.Assert.assertTrue("'" + chronoField54 + "' != '" + java.time.temporal.ChronoField.DAY_OF_MONTH + "'", chronoField54.equals(java.time.temporal.ChronoField.DAY_OF_MONTH));
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 21L + "'", long56 == 21L);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
    }

    @Test
    public void test5417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5417");
        short[] shortArray2 = new short[] { (short) 1, (byte) 10 };
        java.nio.ShortBuffer shortBuffer3 = java.nio.ShortBuffer.wrap(shortArray2);
        short[] shortArray6 = new short[] { (short) 1, (byte) 10 };
        java.nio.ShortBuffer shortBuffer7 = java.nio.ShortBuffer.wrap(shortArray6);
        java.nio.ShortBuffer shortBuffer8 = shortBuffer3.put(shortBuffer7);
        int int9 = shortBuffer8.limit();
        java.nio.ShortBuffer shortBuffer10 = shortBuffer8.asReadOnlyBuffer();
        short[] shortArray11 = shortBuffer8.array();
        short[] shortArray12 = shortBuffer8.array();
        // The following exception was thrown during execution in test generation
        try {
            short short14 = shortBuffer8.get((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: -1");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(shortArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray2), "[1, 10]");
        org.junit.Assert.assertNotNull(shortBuffer3);
        org.junit.Assert.assertNotNull(shortArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray6), "[1, 10]");
        org.junit.Assert.assertNotNull(shortBuffer7);
        org.junit.Assert.assertNotNull(shortBuffer8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
        org.junit.Assert.assertNotNull(shortBuffer10);
        org.junit.Assert.assertNotNull(shortArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray11), "[1, 10]");
        org.junit.Assert.assertNotNull(shortArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray12), "[1, 10]");
    }

    @Test
    public void test5418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5418");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Locale.LanguageRange[] languageRangeArray3 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList4 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList4, languageRangeArray3);
        java.util.Locale locale6 = java.util.Locale.JAPAN;
        java.util.Locale[] localeArray7 = new java.util.Locale[] { locale6 };
        java.util.ArrayList<java.util.Locale> localeList8 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList8, localeArray7);
        java.util.List<java.util.Locale> localeList10 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList4, (java.util.Collection<java.util.Locale>) localeList8);
        localeList10.clear();
        java.util.List<java.util.Locale> localeList12 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList10);
        java.util.Locale.LanguageRange[] languageRangeArray13 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList14 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList14, languageRangeArray13);
        java.util.Locale.LanguageRange[] languageRangeArray16 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList17 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList17, languageRangeArray16);
        java.util.Locale locale19 = java.util.Locale.JAPAN;
        java.util.Locale[] localeArray20 = new java.util.Locale[] { locale19 };
        java.util.ArrayList<java.util.Locale> localeList21 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList21, localeArray20);
        java.util.List<java.util.Locale> localeList23 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList17, (java.util.Collection<java.util.Locale>) localeList21);
        localeList23.clear();
        java.util.List<java.util.Locale> localeList25 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList14, (java.util.Collection<java.util.Locale>) localeList23);
        java.util.List<java.util.Locale> localeList26 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList25);
        org.joda.time.Seconds seconds27 = org.joda.time.Seconds.ONE;
        org.joda.time.Duration duration29 = org.joda.time.Duration.standardDays((long) 20);
        org.joda.time.Seconds seconds30 = duration29.toStandardSeconds();
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.Duration duration33 = new org.joda.time.Duration(readableInstant31, readableInstant32);
        org.joda.time.Seconds seconds34 = duration33.toStandardSeconds();
        int int35 = seconds34.getSeconds();
        org.joda.time.Seconds seconds37 = seconds34.dividedBy(28);
        boolean boolean38 = seconds30.isLessThan(seconds34);
        org.joda.time.Seconds seconds39 = seconds27.plus(seconds34);
        int int40 = localeList25.lastIndexOf((java.lang.Object) seconds34);
        org.joda.time.PeriodType periodType41 = seconds34.getPeriodType();
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(languageRangeArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(localeArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(localeList10);
        org.junit.Assert.assertNotNull(localeList12);
        org.junit.Assert.assertNotNull(languageRangeArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(languageRangeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(localeArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(localeList23);
        org.junit.Assert.assertNotNull(localeList25);
        org.junit.Assert.assertNotNull(localeList26);
        org.junit.Assert.assertNotNull(seconds27);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(seconds30);
        org.junit.Assert.assertNotNull(seconds34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(seconds37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(seconds39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertNotNull(periodType41);
    }

    @Test
    public void test5419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5419");
        java.util.Set<java.lang.String> strSet0 = java.time.ZoneId.getAvailableZoneIds();
        java.util.stream.Stream<java.lang.String> strStream1 = strSet0.parallelStream();
        java.lang.Object[] objArray2 = strSet0.toArray();
        java.util.Spliterator<java.lang.String> strSpliterator3 = strSet0.spliterator();
        java.util.Set<java.lang.String> strSet4 = java.time.ZoneId.getAvailableZoneIds();
        java.util.stream.Stream<java.lang.String> strStream5 = strSet4.parallelStream();
        boolean boolean7 = strSet4.remove((java.lang.Object) 0);
        java.time.LocalTime localTime12 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime13 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime12);
        java.time.LocalTime localTime18 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime19 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime18);
        java.time.temporal.ChronoField chronoField20 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime22 = localTime18.with((java.time.temporal.TemporalField) chronoField20, (long) (short) 1);
        long long23 = localTime12.getLong((java.time.temporal.TemporalField) chronoField20);
        java.time.LocalTime localTime25 = localTime12.withSecond((int) (short) 1);
        java.time.temporal.ChronoField chronoField26 = java.time.temporal.ChronoField.SECOND_OF_DAY;
        java.time.temporal.ValueRange valueRange27 = localTime25.range((java.time.temporal.TemporalField) chronoField26);
        boolean boolean28 = strSet4.remove((java.lang.Object) chronoField26);
        boolean boolean29 = strSet0.retainAll((java.util.Collection<java.lang.String>) strSet4);
        java.util.Spliterator<java.lang.String> strSpliterator30 = strSet0.spliterator();
        java.util.Set<java.lang.String> strSet31 = java.time.ZoneId.getAvailableZoneIds();
        java.util.Set<java.lang.String> strSet32 = java.time.ZoneId.getAvailableZoneIds();
        java.util.stream.Stream<java.lang.String> strStream33 = strSet32.parallelStream();
        java.lang.Object[] objArray34 = strSet32.toArray();
        java.util.Spliterator<java.lang.String> strSpliterator35 = strSet32.spliterator();
        boolean boolean36 = strSet31.containsAll((java.util.Collection<java.lang.String>) strSet32);
        boolean boolean37 = strSet0.removeAll((java.util.Collection<java.lang.String>) strSet32);
        java.nio.charset.CoderResult coderResult38 = java.nio.charset.CoderResult.UNDERFLOW;
        boolean boolean39 = strSet0.contains((java.lang.Object) coderResult38);
        boolean boolean41 = strSet0.add("2022-02-21T09:40:32.545Z");
        org.junit.Assert.assertNotNull(strSet0);
        org.junit.Assert.assertNotNull(strStream1);
        org.junit.Assert.assertNotNull(objArray2);
        org.junit.Assert.assertNotNull(strSpliterator3);
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNotNull(strStream5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertTrue("'" + chronoField20 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField20.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 3601000000001L + "'", long23 == 3601000000001L);
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertTrue("'" + chronoField26 + "' != '" + java.time.temporal.ChronoField.SECOND_OF_DAY + "'", chronoField26.equals(java.time.temporal.ChronoField.SECOND_OF_DAY));
        org.junit.Assert.assertNotNull(valueRange27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(strSpliterator30);
        org.junit.Assert.assertNotNull(strSet31);
        org.junit.Assert.assertNotNull(strSet32);
        org.junit.Assert.assertNotNull(strStream33);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertNotNull(strSpliterator35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(coderResult38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
    }

    @Test
    public void test5420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5420");
        java.io.InvalidObjectException invalidObjectException1 = new java.io.InvalidObjectException("PT2147483647M");
    }

    @Test
    public void test5421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5421");
        java.nio.charset.Charset charset0 = java.nio.charset.Charset.defaultCharset();
        java.nio.charset.CharsetDecoder charsetDecoder1 = charset0.newDecoder();
        java.nio.charset.Charset charset2 = java.nio.charset.Charset.defaultCharset();
        boolean boolean3 = charset0.contains(charset2);
        java.nio.charset.CharsetEncoder charsetEncoder4 = charset0.newEncoder();
        char[] charArray5 = new char[] {};
        java.nio.CharBuffer charBuffer6 = java.nio.CharBuffer.wrap(charArray5);
        java.nio.ByteBuffer byteBuffer7 = charsetEncoder4.encode(charBuffer6);
        java.nio.ByteOrder byteOrder8 = byteBuffer7.order();
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ByteBuffer byteBuffer10 = byteBuffer7.putDouble((double) 859765648000L);
            org.junit.Assert.fail("Expected exception of type java.nio.BufferOverflowException; message: null");
        } catch (java.nio.BufferOverflowException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charset0);
        org.junit.Assert.assertNotNull(charsetDecoder1);
        org.junit.Assert.assertNotNull(charset2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(charsetEncoder4);
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[]");
        org.junit.Assert.assertNotNull(charBuffer6);
        org.junit.Assert.assertNotNull(byteBuffer7);
        org.junit.Assert.assertNotNull(byteOrder8);
    }

    @Test
    public void test5422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5422");
        java.util.stream.LongStream longStream1 = java.util.stream.LongStream.of(0L);
        java.util.stream.LongStream longStream2 = longStream1.unordered();
        java.util.OptionalLong optionalLong3 = longStream2.min();
        boolean boolean4 = longStream2.isParallel();
        org.junit.Assert.assertNotNull(longStream1);
        org.junit.Assert.assertNotNull(longStream2);
        org.junit.Assert.assertNotNull(optionalLong3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test5423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5423");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 3, chronology1);
        org.joda.time.DateTime.Property property3 = dateTime2.dayOfYear();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight((java.lang.Object) dateTime2, chronology4);
        org.joda.time.MutableDateTime mutableDateTime6 = dateTime2.toMutableDateTime();
        mutableDateTime6.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime6.dayOfWeek();
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime6.year();
        java.util.TimeZone timeZone11 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        mutableDateTime6.setZone(dateTimeZone12);
        java.util.Locale locale15 = java.util.Locale.TAIWAN;
        java.lang.String str16 = dateTimeZone12.getShortName((long) 64, locale15);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) 3, chronology18);
        org.joda.time.DateTime.Property property20 = dateTime19.dayOfYear();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateMidnight dateMidnight22 = new org.joda.time.DateMidnight((java.lang.Object) dateTime19, chronology21);
        org.joda.time.MutableDateTime mutableDateTime23 = dateTime19.toMutableDateTime();
        mutableDateTime23.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property26 = mutableDateTime23.dayOfWeek();
        org.joda.time.MutableDateTime.Property property27 = mutableDateTime23.year();
        java.util.TimeZone timeZone28 = null;
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forTimeZone(timeZone28);
        mutableDateTime23.setZone(dateTimeZone29);
        java.util.Locale locale32 = java.util.Locale.TAIWAN;
        java.lang.String str33 = dateTimeZone29.getShortName((long) 64, locale32);
        long long35 = dateTimeZone12.getMillisKeepLocal(dateTimeZone29, (long) 64);
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime(dateTimeZone12);
        org.joda.time.DateTime dateTime37 = org.joda.time.DateTime.now(dateTimeZone12);
        org.joda.time.chrono.EthiopicChronology ethiopicChronology38 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone12);
        org.joda.time.DateTimeField dateTimeField39 = ethiopicChronology38.hourOfDay();
        java.util.Locale locale40 = null;
        int int41 = dateTimeField39.getMaximumShortTextLength(locale40);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+00:00" + "'", str16, "+00:00");
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(mutableDateTime23);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "+00:00" + "'", str33, "+00:00");
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 64L + "'", long35 == 64L);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(ethiopicChronology38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2 + "'", int41 == 2);
    }

    @Test
    public void test5424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5424");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.time.LocalTime localTime6 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime7 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime6);
        java.time.LocalTime localTime12 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime13 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime12);
        java.time.temporal.ChronoField chronoField14 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime16 = localTime12.with((java.time.temporal.TemporalField) chronoField14, (long) (short) 1);
        long long17 = localTime6.getLong((java.time.temporal.TemporalField) chronoField14);
        java.time.LocalTime localTime19 = localTime6.withSecond((int) (short) 1);
        java.lang.Object obj21 = properties1.put((java.lang.Object) localTime19, (java.lang.Object) "117");
        boolean boolean23 = properties1.containsValue((java.lang.Object) 6);
        java.time.LocalDate localDate26 = java.time.LocalDate.ofEpochDay((long) ' ');
        int int27 = localDate26.getMonthValue();
        java.lang.Object obj28 = properties1.replace((java.lang.Object) 21, (java.lang.Object) localDate26);
        java.time.LocalDateTime localDateTime29 = java.time.LocalDateTime.MIN;
        java.time.Month month30 = java.time.Month.NOVEMBER;
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime31 = localDateTime29.with((java.time.temporal.TemporalAdjuster) month30);
        java.time.LocalDate localDate34 = java.time.LocalDate.ofEpochDay((long) ' ');
        int int35 = localDate34.getMonthValue();
        org.joda.time.Period period36 = org.joda.time.Period.ZERO;
        org.joda.time.Period period37 = period36.normalizedStandard();
        org.joda.time.Period period39 = period36.plusHours(2);
        java.time.chrono.IsoEra isoEra40 = java.time.chrono.IsoEra.CE;
        boolean boolean41 = period39.equals((java.lang.Object) isoEra40);
        java.time.LocalTime localTime46 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime47 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime46);
        java.time.LocalTime localTime52 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime53 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime52);
        java.time.temporal.ChronoField chronoField54 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime56 = localTime52.with((java.time.temporal.TemporalField) chronoField54, (long) (short) 1);
        long long57 = localTime46.getLong((java.time.temporal.TemporalField) chronoField54);
        boolean boolean58 = isoEra40.isSupported((java.time.temporal.TemporalField) chronoField54);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery59 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period60 = isoEra40.query(periodTemporalQuery59);
        boolean boolean61 = period60.isNegative();
        java.time.Period period63 = period60.plusDays((long) ' ');
        java.time.temporal.ChronoField chronoField64 = java.time.temporal.ChronoField.SECOND_OF_DAY;
        boolean boolean65 = period60.equals((java.lang.Object) chronoField64);
        boolean boolean66 = localDate34.isSupported((java.time.temporal.TemporalField) chronoField64);
        java.time.temporal.TemporalUnit temporalUnit67 = chronoField64.getRangeUnit();
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime68 = localDateChronoLocalDateTime31.plus(1L, temporalUnit67);
        boolean boolean69 = localDate26.isSupported(temporalUnit67);
        java.time.Duration duration70 = java.time.Duration.ZERO;
        java.time.Duration duration72 = duration70.minusHours((long) 8);
        java.time.Duration duration74 = duration70.minusDays((long) 17);
        java.time.LocalDate localDate75 = localDate26.plus((java.time.temporal.TemporalAmount) duration70);
        java.time.chrono.IsoChronology isoChronology76 = localDate26.getChronology();
        java.time.LocalDateTime localDateTime77 = java.time.LocalDateTime.now();
        java.time.temporal.ChronoField chronoField78 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime80 = localDateTime77.with((java.time.temporal.TemporalField) chronoField78, (long) 10);
        java.time.LocalDateTime localDateTime82 = localDateTime77.minusMinutes((long) 12);
        java.time.OffsetDateTime offsetDateTime83 = java.time.OffsetDateTime.now();
        java.time.ZoneOffset zoneOffset85 = java.time.ZoneOffset.ofHours(9);
        java.time.OffsetDateTime offsetDateTime86 = offsetDateTime83.withOffsetSameLocal(zoneOffset85);
        java.time.ZoneOffset zoneOffset88 = java.time.ZoneOffset.ofHours(9);
        java.time.ZonedDateTime zonedDateTime89 = java.time.ZonedDateTime.ofInstant(localDateTime77, zoneOffset85, (java.time.ZoneId) zoneOffset88);
        java.time.ZonedDateTime zonedDateTime90 = localDate26.atStartOfDay((java.time.ZoneId) zoneOffset88);
        java.time.Clock clock91 = java.time.Clock.tickMinutes((java.time.ZoneId) zoneOffset88);
        java.time.Duration duration92 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.time.Clock clock93 = java.time.Clock.tick(clock91, duration92);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: tickDuration");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertTrue("'" + chronoField14 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField14.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 3601000000001L + "'", long17 == 3601000000001L);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2 + "'", int27 == 2);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertTrue("'" + month30 + "' != '" + java.time.Month.NOVEMBER + "'", month30.equals(java.time.Month.NOVEMBER));
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime31);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2 + "'", int35 == 2);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertTrue("'" + isoEra40 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra40.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(localTime46);
        org.junit.Assert.assertNotNull(localTime47);
        org.junit.Assert.assertNotNull(localTime52);
        org.junit.Assert.assertNotNull(localTime53);
        org.junit.Assert.assertTrue("'" + chronoField54 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField54.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime56);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 3601000000001L + "'", long57 == 3601000000001L);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(periodTemporalQuery59);
        org.junit.Assert.assertNotNull(period60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(period63);
        org.junit.Assert.assertTrue("'" + chronoField64 + "' != '" + java.time.temporal.ChronoField.SECOND_OF_DAY + "'", chronoField64.equals(java.time.temporal.ChronoField.SECOND_OF_DAY));
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + temporalUnit67 + "' != '" + java.time.temporal.ChronoUnit.DAYS + "'", temporalUnit67.equals(java.time.temporal.ChronoUnit.DAYS));
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(duration70);
        org.junit.Assert.assertNotNull(duration72);
        org.junit.Assert.assertNotNull(duration74);
        org.junit.Assert.assertNotNull(localDate75);
        org.junit.Assert.assertNotNull(isoChronology76);
        org.junit.Assert.assertNotNull(localDateTime77);
        org.junit.Assert.assertTrue("'" + chronoField78 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField78.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime80);
        org.junit.Assert.assertNotNull(localDateTime82);
        org.junit.Assert.assertNotNull(offsetDateTime83);
        org.junit.Assert.assertNotNull(zoneOffset85);
        org.junit.Assert.assertNotNull(offsetDateTime86);
        org.junit.Assert.assertNotNull(zoneOffset88);
        org.junit.Assert.assertNotNull(zonedDateTime89);
        org.junit.Assert.assertNotNull(zonedDateTime90);
        org.junit.Assert.assertNotNull(clock91);
    }

    @Test
    public void test5425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5425");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 3, chronology1);
        int int3 = dateTime2.getYear();
        java.util.GregorianCalendar gregorianCalendar4 = dateTime2.toGregorianCalendar();
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.Duration duration7 = new org.joda.time.Duration(readableInstant5, readableInstant6);
        org.joda.time.Duration duration9 = duration7.withMillis((-1L));
        org.joda.time.Duration duration11 = duration9.minus((long) 2022);
        org.joda.time.DateTime dateTime12 = dateTime2.minus((org.joda.time.ReadableDuration) duration9);
        org.joda.time.DateTime.Property property13 = dateTime2.millisOfDay();
        org.joda.time.DateTime dateTime15 = property13.addToCopy((long) (byte) 1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1970 + "'", int3 == 1970);
        org.junit.Assert.assertNotNull(gregorianCalendar4);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime15);
    }

    @Test
    public void test5426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5426");
        java.util.stream.Stream.Builder<java.io.OutputStream> outputStreamBuilder0 = java.util.stream.Stream.builder();
        java.util.stream.Stream.Builder<java.io.OutputStream> outputStreamBuilder1 = java.util.stream.Stream.builder();
        java.util.function.Consumer<java.io.OutputStream> outputStreamConsumer2 = outputStreamBuilder0.andThen((java.util.function.Consumer<java.io.OutputStream>) outputStreamBuilder1);
        java.io.PrintStream printStream4 = new java.io.PrintStream("subject:\n (GERMAN)");
        java.util.stream.Stream.Builder<java.io.OutputStream> outputStreamBuilder5 = outputStreamBuilder1.add((java.io.OutputStream) printStream4);
        java.io.PrintWriter printWriter6 = new java.io.PrintWriter((java.io.OutputStream) printStream4);
        java.io.Writer writer8 = printWriter6.append('u');
        org.junit.Assert.assertNotNull(outputStreamBuilder0);
        org.junit.Assert.assertNotNull(outputStreamBuilder1);
        org.junit.Assert.assertNotNull(outputStreamConsumer2);
        org.junit.Assert.assertNotNull(outputStreamBuilder5);
        org.junit.Assert.assertNotNull(writer8);
    }

    @Test
    public void test5427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5427");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime((long) 0, chronology2);
        org.joda.time.Chronology chronology4 = localTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField5 = chronology4.weekyearOfCentury();
        org.joda.time.DurationField durationField6 = chronology4.weekyears();
        org.joda.time.DurationField durationField7 = chronology4.seconds();
        org.joda.time.LocalTime localTime8 = org.joda.time.LocalTime.fromMillisOfDay((long) (byte) 0, chronology4);
        org.joda.time.LocalTime.Property property9 = localTime8.millisOfSecond();
        org.joda.time.LocalTime localTime10 = property9.withMinimumValue();
        org.joda.time.LocalTime localTime12 = property9.addCopy(96000000);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localTime12);
    }

    @Test
    public void test5428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5428");
        java.io.FileNotFoundException fileNotFoundException1 = new java.io.FileNotFoundException("Stunde");
    }

    @Test
    public void test5429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5429");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Duration duration2 = new org.joda.time.Duration(readableInstant0, readableInstant1);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = duration2.toPeriodTo(readableInstant3, periodType4);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.Duration duration8 = new org.joda.time.Duration(readableInstant6, readableInstant7);
        long long9 = duration8.getMillis();
        boolean boolean10 = duration2.isShorterThan((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) 3, chronology12);
        org.joda.time.DateTime.Property property14 = dateTime13.dayOfYear();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateMidnight dateMidnight16 = new org.joda.time.DateMidnight((java.lang.Object) dateTime13, chronology15);
        org.joda.time.MutableDateTime mutableDateTime17 = dateTime13.toMutableDateTime();
        mutableDateTime17.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime17.dayOfWeek();
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime17.year();
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime17.weekyear();
        boolean boolean23 = duration2.equals((java.lang.Object) mutableDateTime17);
        mutableDateTime17.addMonths((int) ' ');
        mutableDateTime17.add((long) (byte) 10);
        org.joda.time.Period period28 = org.joda.time.Period.ZERO;
        org.joda.time.Period period29 = period28.normalizedStandard();
        org.joda.time.Period period31 = period28.plusHours(2);
        java.time.chrono.IsoEra isoEra32 = java.time.chrono.IsoEra.CE;
        boolean boolean33 = period31.equals((java.lang.Object) isoEra32);
        int int34 = period31.getMinutes();
        mutableDateTime17.add((org.joda.time.ReadablePeriod) period31);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime(chronology36);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime37.withYearOfCentury((int) 'a');
        int int40 = localDateTime39.getDayOfMonth();
        org.joda.time.LocalDateTime localDateTime42 = localDateTime39.withMinuteOfHour((int) ' ');
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = org.joda.time.DateTimeFieldType.weekyear();
        int int44 = localDateTime39.get(dateTimeFieldType43);
        org.joda.time.MutableDateTime.Property property45 = mutableDateTime17.property(dateTimeFieldType43);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime((long) 3, chronology47);
        org.joda.time.DateTime.Property property49 = dateTime48.dayOfYear();
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.DateMidnight dateMidnight51 = new org.joda.time.DateMidnight((java.lang.Object) dateTime48, chronology50);
        org.joda.time.DateMidnight dateMidnight53 = dateMidnight51.minusMonths((-1));
        int int54 = dateMidnight51.getMillisOfSecond();
        org.joda.time.Hours hours55 = org.joda.time.Hours.hoursBetween((org.joda.time.ReadableInstant) mutableDateTime17, (org.joda.time.ReadableInstant) dateMidnight51);
        mutableDateTime17.setWeekyear((int) 'u');
        org.joda.time.MutableDateTime.Property property58 = mutableDateTime17.weekOfWeekyear();
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertTrue("'" + isoEra32 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra32.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 21 + "'", int40 == 21);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(dateTimeFieldType43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2097 + "'", int44 == 2097);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(dateMidnight53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(hours55);
        org.junit.Assert.assertNotNull(property58);
    }

    @Test
    public void test5430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5430");
        java.nio.charset.Charset charset0 = java.nio.charset.Charset.defaultCharset();
        java.nio.charset.CharsetDecoder charsetDecoder1 = charset0.newDecoder();
        java.nio.charset.Charset charset2 = java.nio.charset.Charset.defaultCharset();
        java.nio.charset.CharsetDecoder charsetDecoder3 = charset2.newDecoder();
        java.nio.charset.Charset charset4 = java.nio.charset.Charset.defaultCharset();
        boolean boolean5 = charset2.contains(charset4);
        java.nio.charset.CharsetEncoder charsetEncoder6 = charset2.newEncoder();
        char[] charArray7 = new char[] {};
        java.nio.CharBuffer charBuffer8 = java.nio.CharBuffer.wrap(charArray7);
        java.nio.ByteBuffer byteBuffer9 = charsetEncoder6.encode(charBuffer8);
        java.nio.CharBuffer charBuffer10 = charBuffer8.slice();
        java.nio.CharBuffer charBuffer11 = charBuffer8.compact();
        java.nio.CharBuffer charBuffer12 = charBuffer8.duplicate();
        java.nio.ByteBuffer byteBuffer13 = charset0.encode(charBuffer8);
        java.lang.String str14 = charset0.toString();
        org.junit.Assert.assertNotNull(charset0);
        org.junit.Assert.assertNotNull(charsetDecoder1);
        org.junit.Assert.assertNotNull(charset2);
        org.junit.Assert.assertNotNull(charsetDecoder3);
        org.junit.Assert.assertNotNull(charset4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(charsetEncoder6);
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[]");
        org.junit.Assert.assertNotNull(charBuffer8);
        org.junit.Assert.assertNotNull(byteBuffer9);
        org.junit.Assert.assertNotNull(charBuffer10);
        org.junit.Assert.assertNotNull(charBuffer11);
        org.junit.Assert.assertNotNull(charBuffer12);
        org.junit.Assert.assertNotNull(byteBuffer13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "US-ASCII" + "'", str14, "US-ASCII");
    }

    @Test
    public void test5431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5431");
        // The following exception was thrown during execution in test generation
        try {
            java.time.LocalTime localTime2 = java.time.LocalTime.of(120, 710);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for HourOfDay (valid values 0 - 23): 120");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
    }

    @Test
    public void test5432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5432");
        org.joda.time.Period period8 = org.joda.time.Period.ZERO;
        org.joda.time.Period period9 = period8.normalizedStandard();
        org.joda.time.Period period11 = period9.minusMinutes((int) ' ');
        org.joda.time.Period period13 = period11.minusMonths((int) (byte) 0);
        org.joda.time.PeriodType periodType14 = period11.getPeriodType();
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod(292269054, (int) ':', (int) (short) 10, (int) ':', 9, (int) 'a', 57, 2097, periodType14);
        mutablePeriod15.addMillis(19043);
        mutablePeriod15.setMinutes(16);
        mutablePeriod15.setMonths(10797978);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(periodType14);
    }

    @Test
    public void test5433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5433");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 3, chronology1);
        org.joda.time.DateTime.Property property3 = dateTime2.dayOfYear();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight((java.lang.Object) dateTime2, chronology4);
        org.joda.time.MutableDateTime mutableDateTime6 = dateTime2.toMutableDateTime();
        org.joda.time.Days days7 = org.joda.time.Days.ONE;
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadablePeriod) days7);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) 3, chronology10);
        org.joda.time.DateTime.Property property12 = dateTime11.dayOfYear();
        org.joda.time.Interval interval13 = property12.toInterval();
        mutableInterval8.setInterval((org.joda.time.ReadableInterval) interval13);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) 3, chronology16);
        org.joda.time.DateTime.Property property18 = dateTime17.dayOfYear();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight((java.lang.Object) dateTime17, chronology19);
        org.joda.time.DateMidnight.Property property21 = dateMidnight20.dayOfMonth();
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.Duration duration24 = new org.joda.time.Duration(readableInstant22, readableInstant23);
        org.joda.time.Duration duration26 = duration24.withMillis((-1L));
        org.joda.time.ReadableDuration readableDuration27 = null;
        org.joda.time.Duration duration28 = duration24.minus(readableDuration27);
        org.joda.time.DateMidnight dateMidnight29 = dateMidnight20.plus((org.joda.time.ReadableDuration) duration28);
        mutableInterval8.setDurationAfterStart((org.joda.time.ReadableDuration) duration28);
        org.joda.time.MutableDateTime mutableDateTime31 = new org.joda.time.MutableDateTime();
        boolean boolean32 = mutableInterval8.isBefore((org.joda.time.ReadableInstant) mutableDateTime31);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime((long) 3, chronology34);
        org.joda.time.DateTime.Property property36 = dateTime35.dayOfYear();
        int int37 = dateTime35.getHourOfDay();
        boolean boolean39 = dateTime35.isBefore((long) '/');
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime((long) 3, chronology41);
        org.joda.time.DateTime.Property property43 = dateTime42.dayOfYear();
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.DateMidnight dateMidnight45 = new org.joda.time.DateMidnight((java.lang.Object) dateTime42, chronology44);
        org.joda.time.DateMidnight dateMidnight47 = dateMidnight45.minusMonths((-1));
        org.joda.time.DateMidnight dateMidnight49 = dateMidnight45.withDayOfYear((int) ' ');
        mutableInterval8.setInterval((org.joda.time.ReadableInstant) dateTime35, (org.joda.time.ReadableInstant) dateMidnight49);
        org.joda.time.DateTime.Property property51 = dateTime35.hourOfDay();
        org.joda.time.DateTime dateTime53 = property51.addWrapFieldToCopy(4200);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(days7);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(dateMidnight47);
        org.junit.Assert.assertNotNull(dateMidnight49);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(dateTime53);
    }

    @Test
    public void test5434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5434");
        org.joda.time.Weeks weeks0 = org.joda.time.Weeks.ONE;
        java.util.concurrent.TimeUnit timeUnit1 = java.util.concurrent.TimeUnit.NANOSECONDS;
        boolean boolean2 = weeks0.equals((java.lang.Object) timeUnit1);
        org.joda.time.MutablePeriod mutablePeriod3 = weeks0.toMutablePeriod();
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.Duration duration6 = new org.joda.time.Duration(readableInstant4, readableInstant5);
        org.joda.time.Duration duration8 = duration6.withMillis((-1L));
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.LocalTime localTime11 = new org.joda.time.LocalTime((long) 0, chronology10);
        org.joda.time.Chronology chronology12 = localTime11.getChronology();
        mutablePeriod3.setPeriod((org.joda.time.ReadableDuration) duration8, chronology12);
        org.joda.time.PeriodType periodType14 = mutablePeriod3.getPeriodType();
        mutablePeriod3.setHours((int) '.');
        mutablePeriod3.addMinutes(256);
        int int19 = mutablePeriod3.getDays();
        mutablePeriod3.addHours(78000000);
        org.junit.Assert.assertNotNull(weeks0);
        org.junit.Assert.assertNotNull(timeUnit1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(mutablePeriod3);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
    }

    @Test
    public void test5435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5435");
        java.io.File file0 = null;
        java.io.File file2 = new java.io.File(file0, "1970-01-01T00:00:00.003Z");
        java.net.URL uRL3 = file2.toURL();
        java.io.File file4 = null;
        java.io.File file6 = new java.io.File(file4, "1970-01-01T00:00:00.003Z");
        java.net.URL uRL7 = file6.toURL();
        boolean boolean8 = uRL3.sameFile(uRL7);
        java.lang.String str9 = uRL3.getPath();
        java.net.URLConnection uRLConnection10 = uRL3.openConnection();
        java.lang.String str11 = uRLConnection10.getContentType();
        long long14 = uRLConnection10.getHeaderFieldLong("zh-TW", 57L);
        long long17 = uRLConnection10.getHeaderFieldLong("x-windows-iso2022jp", (long) 97);
        uRLConnection10.setDefaultUseCaches(true);
        boolean boolean20 = uRLConnection10.getAllowUserInteraction();
        int int23 = uRLConnection10.getHeaderFieldInt("minutes", 36);
        org.junit.Assert.assertNull("file2.getParent() == null", file2.getParent());
        org.junit.Assert.assertEquals(file2.toString(), "1970-01-01T00:00:00.003Z");
        org.junit.Assert.assertNotNull(uRL3);
// flaky:         org.junit.Assert.assertEquals(uRL3.toString(), "file:/experiment/1970-01-01T00:00:00.003Z");
        org.junit.Assert.assertNull("file6.getParent() == null", file6.getParent());
        org.junit.Assert.assertEquals(file6.toString(), "1970-01-01T00:00:00.003Z");
        org.junit.Assert.assertNotNull(uRL7);
// flaky:         org.junit.Assert.assertEquals(uRL7.toString(), "file:/experiment/1970-01-01T00:00:00.003Z");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "/experiment/1970-01-01T00:00:00.003Z" + "'", str9, "/experiment/1970-01-01T00:00:00.003Z");
        org.junit.Assert.assertNotNull(uRLConnection10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "content/unknown" + "'", str11, "content/unknown");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 57L + "'", long14 == 57L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 97L + "'", long17 == 97L);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 36 + "'", int23 == 36);
    }

    @Test
    public void test5436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5436");
        java.nio.charset.Charset charset0 = java.nio.charset.Charset.defaultCharset();
        java.nio.charset.CharsetDecoder charsetDecoder1 = charset0.newDecoder();
        java.nio.charset.CharsetDecoder charsetDecoder2 = charset0.newDecoder();
        java.nio.charset.CodingErrorAction codingErrorAction3 = charsetDecoder2.malformedInputAction();
        // The following exception was thrown during execution in test generation
        try {
            java.nio.charset.CharsetDecoder charsetDecoder5 = charsetDecoder2.replaceWith("2022-02-21T09:34:12.419Z");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Replacement too long");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charset0);
        org.junit.Assert.assertNotNull(charsetDecoder1);
        org.junit.Assert.assertNotNull(charsetDecoder2);
        org.junit.Assert.assertNotNull(codingErrorAction3);
    }

    @Test
    public void test5437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5437");
        java.time.OffsetDateTime offsetDateTime0 = java.time.OffsetDateTime.now();
        java.time.temporal.ChronoField chronoField1 = java.time.temporal.ChronoField.HOUR_OF_DAY;
        boolean boolean2 = offsetDateTime0.isSupported((java.time.temporal.TemporalField) chronoField1);
        java.time.Month month3 = offsetDateTime0.getMonth();
        java.time.ZoneOffset zoneOffset6 = java.time.ZoneOffset.ofHoursMinutes(1, 10);
        java.time.LocalDate localDate7 = java.time.LocalDate.now((java.time.ZoneId) zoneOffset6);
        java.time.Clock clock8 = java.time.Clock.system((java.time.ZoneId) zoneOffset6);
        java.time.Duration duration10 = java.time.Duration.ofSeconds((long) 0);
        java.time.Duration duration12 = duration10.multipliedBy((long) (byte) -1);
        java.time.Clock clock13 = java.time.Clock.offset(clock8, duration10);
        java.time.OffsetDateTime offsetDateTime14 = offsetDateTime0.plus((java.time.temporal.TemporalAmount) duration10);
        java.time.Instant instant15 = offsetDateTime0.toInstant();
        java.time.LocalTime localTime20 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime21 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime20);
        java.time.temporal.ChronoField chronoField22 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime24 = localTime20.with((java.time.temporal.TemporalField) chronoField22, (long) (short) 1);
        java.util.Locale locale25 = java.util.Locale.GERMANY;
        java.lang.String str26 = chronoField22.getDisplayName(locale25);
        java.time.LocalDateTime localDateTime27 = java.time.LocalDateTime.now();
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery28 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period29 = localDateTime27.query(periodTemporalQuery28);
        java.time.LocalDateTime localDateTime31 = localDateTime27.plusNanos((long) 2);
        org.joda.time.Period period32 = org.joda.time.Period.ZERO;
        org.joda.time.Period period33 = period32.normalizedStandard();
        org.joda.time.Period period35 = period32.plusHours(2);
        java.time.chrono.IsoEra isoEra36 = java.time.chrono.IsoEra.CE;
        boolean boolean37 = period35.equals((java.lang.Object) isoEra36);
        java.time.LocalTime localTime42 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime43 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime42);
        java.time.LocalTime localTime48 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime49 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime48);
        java.time.temporal.ChronoField chronoField50 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime52 = localTime48.with((java.time.temporal.TemporalField) chronoField50, (long) (short) 1);
        long long53 = localTime42.getLong((java.time.temporal.TemporalField) chronoField50);
        boolean boolean54 = isoEra36.isSupported((java.time.temporal.TemporalField) chronoField50);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery55 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period56 = isoEra36.query(periodTemporalQuery55);
        boolean boolean57 = period56.isNegative();
        java.time.Period period59 = period56.plusDays((long) ' ');
        java.time.temporal.ChronoField chronoField60 = java.time.temporal.ChronoField.SECOND_OF_DAY;
        boolean boolean61 = period56.equals((java.lang.Object) chronoField60);
        java.time.chrono.ChronoPeriod chronoPeriod62 = period56.negated();
        java.time.OffsetDateTime offsetDateTime63 = java.time.OffsetDateTime.now();
        java.time.temporal.ChronoField chronoField64 = java.time.temporal.ChronoField.HOUR_OF_DAY;
        boolean boolean65 = offsetDateTime63.isSupported((java.time.temporal.TemporalField) chronoField64);
        java.time.Month month66 = offsetDateTime63.getMonth();
        java.time.temporal.Temporal temporal67 = period56.addTo((java.time.temporal.Temporal) offsetDateTime63);
        java.time.DayOfWeek dayOfWeek68 = java.time.DayOfWeek.from((java.time.temporal.TemporalAccessor) offsetDateTime63);
        java.time.LocalDateTime localDateTime69 = java.time.LocalDateTime.now();
        java.time.LocalDateTime localDateTime71 = localDateTime69.minusYears((long) (byte) 10);
        java.time.LocalDateTime localDateTime72 = java.time.LocalDateTime.now();
        java.time.LocalDateTime localDateTime74 = localDateTime72.minusYears((long) (byte) 10);
        boolean boolean75 = localDateTime69.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime74);
        java.time.temporal.ChronoField chronoField76 = java.time.temporal.ChronoField.MICRO_OF_DAY;
        java.time.LocalTime localTime81 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime82 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime81);
        java.time.LocalTime localTime87 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime88 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime87);
        java.time.temporal.ChronoField chronoField89 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime91 = localTime87.with((java.time.temporal.TemporalField) chronoField89, (long) (short) 1);
        long long92 = localTime81.getLong((java.time.temporal.TemporalField) chronoField89);
        java.time.LocalTime localTime94 = chronoField76.adjustInto(localTime81, (long) (byte) 1);
        boolean boolean95 = localDateTime69.isSupported((java.time.temporal.TemporalField) chronoField76);
        boolean boolean96 = dayOfWeek68.isSupported((java.time.temporal.TemporalField) chronoField76);
        boolean boolean97 = localDateTime31.isSupported((java.time.temporal.TemporalField) chronoField76);
        java.time.temporal.ValueRange valueRange98 = chronoField22.rangeRefinedBy((java.time.temporal.TemporalAccessor) localDateTime31);
        long long99 = offsetDateTime0.getLong((java.time.temporal.TemporalField) chronoField22);
        org.junit.Assert.assertNotNull(offsetDateTime0);
        org.junit.Assert.assertTrue("'" + chronoField1 + "' != '" + java.time.temporal.ChronoField.HOUR_OF_DAY + "'", chronoField1.equals(java.time.temporal.ChronoField.HOUR_OF_DAY));
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + month3 + "' != '" + java.time.Month.FEBRUARY + "'", month3.equals(java.time.Month.FEBRUARY));
        org.junit.Assert.assertNotNull(zoneOffset6);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(clock8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(clock13);
        org.junit.Assert.assertNotNull(offsetDateTime14);
        org.junit.Assert.assertNotNull(instant15);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertTrue("'" + chronoField22 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField22.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime24);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "NanoOfDay" + "'", str26, "NanoOfDay");
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(periodTemporalQuery28);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertTrue("'" + isoEra36 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra36.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(localTime42);
        org.junit.Assert.assertNotNull(localTime43);
        org.junit.Assert.assertNotNull(localTime48);
        org.junit.Assert.assertNotNull(localTime49);
        org.junit.Assert.assertTrue("'" + chronoField50 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField50.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime52);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 3601000000001L + "'", long53 == 3601000000001L);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(periodTemporalQuery55);
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(period59);
        org.junit.Assert.assertTrue("'" + chronoField60 + "' != '" + java.time.temporal.ChronoField.SECOND_OF_DAY + "'", chronoField60.equals(java.time.temporal.ChronoField.SECOND_OF_DAY));
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(chronoPeriod62);
        org.junit.Assert.assertNotNull(offsetDateTime63);
        org.junit.Assert.assertTrue("'" + chronoField64 + "' != '" + java.time.temporal.ChronoField.HOUR_OF_DAY + "'", chronoField64.equals(java.time.temporal.ChronoField.HOUR_OF_DAY));
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + month66 + "' != '" + java.time.Month.FEBRUARY + "'", month66.equals(java.time.Month.FEBRUARY));
        org.junit.Assert.assertNotNull(temporal67);
        org.junit.Assert.assertTrue("'" + dayOfWeek68 + "' != '" + java.time.DayOfWeek.MONDAY + "'", dayOfWeek68.equals(java.time.DayOfWeek.MONDAY));
        org.junit.Assert.assertNotNull(localDateTime69);
        org.junit.Assert.assertNotNull(localDateTime71);
        org.junit.Assert.assertNotNull(localDateTime72);
        org.junit.Assert.assertNotNull(localDateTime74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + chronoField76 + "' != '" + java.time.temporal.ChronoField.MICRO_OF_DAY + "'", chronoField76.equals(java.time.temporal.ChronoField.MICRO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime81);
        org.junit.Assert.assertNotNull(localTime82);
        org.junit.Assert.assertNotNull(localTime87);
        org.junit.Assert.assertNotNull(localTime88);
        org.junit.Assert.assertTrue("'" + chronoField89 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField89.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime91);
        org.junit.Assert.assertTrue("'" + long92 + "' != '" + 3601000000001L + "'", long92 == 3601000000001L);
        org.junit.Assert.assertNotNull(localTime94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + true + "'", boolean95 == true);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + true + "'", boolean97 == true);
        org.junit.Assert.assertNotNull(valueRange98);
// flaky:         org.junit.Assert.assertTrue("'" + long99 + "' != '" + 34927858000000L + "'", long99 == 34927858000000L);
    }

    @Test
    public void test5438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5438");
        java.time.LocalDate localDate1 = java.time.LocalDate.ofEpochDay((long) ' ');
        java.time.OffsetTime offsetTime2 = java.time.OffsetTime.MAX;
        java.time.LocalTime localTime3 = offsetTime2.toLocalTime();
        java.lang.String str4 = offsetTime2.toString();
        java.time.Duration duration5 = java.time.Duration.ZERO;
        java.lang.String str6 = duration5.toString();
        java.time.OffsetTime offsetTime7 = offsetTime2.plus((java.time.temporal.TemporalAmount) duration5);
        java.time.LocalTime localTime8 = offsetTime2.toLocalTime();
        java.time.chrono.ChronoLocalDateTime<?> wildcardChronoLocalDateTime9 = localDate1.atTime(localTime8);
        java.time.LocalDate localDate11 = localDate1.minusYears((long) 34);
        java.time.LocalDate localDate13 = java.time.LocalDate.ofEpochDay((long) ' ');
        java.time.OffsetTime offsetTime14 = java.time.OffsetTime.MAX;
        java.time.LocalTime localTime15 = offsetTime14.toLocalTime();
        java.lang.String str16 = offsetTime14.toString();
        java.time.Duration duration17 = java.time.Duration.ZERO;
        java.lang.String str18 = duration17.toString();
        java.time.OffsetTime offsetTime19 = offsetTime14.plus((java.time.temporal.TemporalAmount) duration17);
        java.time.LocalTime localTime20 = offsetTime14.toLocalTime();
        java.time.chrono.ChronoLocalDateTime<?> wildcardChronoLocalDateTime21 = localDate13.atTime(localTime20);
        java.time.LocalDate localDate23 = localDate13.plusMonths(0L);
        java.time.chrono.Chronology chronology24 = localDate23.getChronology();
        java.time.LocalDate localDate26 = localDate23.withDayOfYear(1);
        java.time.Period period27 = java.time.Period.between(localDate1, localDate23);
        org.junit.Assert.assertNotNull(localDate1);
        org.junit.Assert.assertNotNull(offsetTime2);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "23:59:59.999999999-18:00" + "'", str4, "23:59:59.999999999-18:00");
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "PT0S" + "'", str6, "PT0S");
        org.junit.Assert.assertNotNull(offsetTime7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(wildcardChronoLocalDateTime9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(offsetTime14);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "23:59:59.999999999-18:00" + "'", str16, "23:59:59.999999999-18:00");
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "PT0S" + "'", str18, "PT0S");
        org.junit.Assert.assertNotNull(offsetTime19);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(wildcardChronoLocalDateTime21);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(period27);
    }

    @Test
    public void test5439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5439");
        java.util.stream.IntStream intStream1 = java.util.stream.IntStream.of((int) '.');
        java.util.stream.IntStream intStream2 = intStream1.sorted();
        org.junit.Assert.assertNotNull(intStream1);
        org.junit.Assert.assertNotNull(intStream2);
    }

    @Test
    public void test5440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5440");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 3, chronology1);
        org.joda.time.DateTime.Property property3 = dateTime2.dayOfYear();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight((java.lang.Object) dateTime2, chronology4);
        org.joda.time.MutableDateTime mutableDateTime6 = dateTime2.toMutableDateTime();
        mutableDateTime6.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime6.dayOfWeek();
        java.util.Locale locale10 = java.util.Locale.JAPAN;
        int int11 = property9.getMaximumTextLength(locale10);
        org.joda.time.MutableDateTime mutableDateTime12 = property9.roundCeiling();
        mutableDateTime12.addDays((-10800000));
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ja_JP");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 3 + "'", int11 == 3);
        org.junit.Assert.assertNotNull(mutableDateTime12);
    }

    @Test
    public void test5441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5441");
        java.time.Clock clock0 = java.time.Clock.systemUTC();
        java.time.Duration duration2 = java.time.Duration.ofSeconds((long) 256);
        java.time.Clock clock3 = java.time.Clock.tick(clock0, duration2);
        java.time.Duration duration5 = java.time.Duration.ofMinutes((long) 3);
        java.time.Duration duration6 = duration5.abs();
        java.time.Clock clock7 = java.time.Clock.offset(clock0, duration5);
        java.time.ZonedDateTime zonedDateTime8 = java.time.ZonedDateTime.now(clock7);
        java.time.ZonedDateTime zonedDateTime10 = zonedDateTime8.withDayOfYear((int) (short) 10);
        java.time.ZonedDateTime zonedDateTime12 = zonedDateTime8.minusDays((long) '\uffff');
        java.time.ZonedDateTime zonedDateTime14 = zonedDateTime8.minusDays(10L);
        java.time.ZoneOffset zoneOffset17 = java.time.ZoneOffset.ofHoursMinutes(1, 10);
        java.time.LocalDate localDate18 = java.time.LocalDate.now((java.time.ZoneId) zoneOffset17);
        java.time.Clock clock19 = java.time.Clock.system((java.time.ZoneId) zoneOffset17);
        java.time.chrono.ChronoZonedDateTime<java.time.LocalDate> localDateChronoZonedDateTime20 = zonedDateTime8.withZoneSameLocal((java.time.ZoneId) zoneOffset17);
        java.time.DayOfWeek dayOfWeek21 = zonedDateTime8.getDayOfWeek();
        org.junit.Assert.assertNotNull(clock0);
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertNotNull(clock3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(clock7);
        org.junit.Assert.assertNotNull(zonedDateTime8);
        org.junit.Assert.assertNotNull(zonedDateTime10);
        org.junit.Assert.assertNotNull(zonedDateTime12);
        org.junit.Assert.assertNotNull(zonedDateTime14);
        org.junit.Assert.assertNotNull(zoneOffset17);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(clock19);
        org.junit.Assert.assertNotNull(localDateChronoZonedDateTime20);
        org.junit.Assert.assertTrue("'" + dayOfWeek21 + "' != '" + java.time.DayOfWeek.MONDAY + "'", dayOfWeek21.equals(java.time.DayOfWeek.MONDAY));
    }

    @Test
    public void test5442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5442");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 3, chronology1);
        org.joda.time.DateTime.Property property3 = dateTime2.dayOfYear();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight((java.lang.Object) dateTime2, chronology4);
        org.joda.time.MutableDateTime mutableDateTime6 = dateTime2.toMutableDateTime();
        mutableDateTime6.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime6.dayOfWeek();
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.Duration duration12 = new org.joda.time.Duration(readableInstant10, readableInstant11);
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.PeriodType periodType14 = null;
        org.joda.time.Period period15 = duration12.toPeriodTo(readableInstant13, periodType14);
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.Duration duration18 = new org.joda.time.Duration(readableInstant16, readableInstant17);
        long long19 = duration18.getMillis();
        boolean boolean20 = duration12.isShorterThan((org.joda.time.ReadableDuration) duration18);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) 3, chronology22);
        org.joda.time.DateTime.Property property24 = dateTime23.dayOfYear();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight((java.lang.Object) dateTime23, chronology25);
        org.joda.time.MutableDateTime mutableDateTime27 = dateTime23.toMutableDateTime();
        mutableDateTime27.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property30 = mutableDateTime27.dayOfWeek();
        org.joda.time.MutableDateTime.Property property31 = mutableDateTime27.year();
        org.joda.time.MutableDateTime.Property property32 = mutableDateTime27.weekyear();
        boolean boolean33 = duration12.equals((java.lang.Object) mutableDateTime27);
        mutableDateTime27.addMonths((int) ' ');
        mutableDateTime27.add((long) (byte) 10);
        org.joda.time.Period period38 = org.joda.time.Period.ZERO;
        org.joda.time.Period period39 = period38.normalizedStandard();
        org.joda.time.Period period41 = period38.plusHours(2);
        java.time.chrono.IsoEra isoEra42 = java.time.chrono.IsoEra.CE;
        boolean boolean43 = period41.equals((java.lang.Object) isoEra42);
        int int44 = period41.getMinutes();
        mutableDateTime27.add((org.joda.time.ReadablePeriod) period41);
        java.util.TimeZone timeZone47 = null;
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.forTimeZone(timeZone47);
        org.joda.time.DateMidnight dateMidnight49 = new org.joda.time.DateMidnight((long) 1970, dateTimeZone48);
        long long52 = dateTimeZone48.convertLocalToUTC((long) 3, false);
        long long55 = dateTimeZone48.convertLocalToUTC(0L, true);
        mutableDateTime27.setZoneRetainFields(dateTimeZone48);
        java.lang.String str57 = dateTimeZone48.toString();
        org.joda.time.chrono.EthiopicChronology ethiopicChronology58 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone48);
        org.joda.time.DateTimeField dateTimeField59 = ethiopicChronology58.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone60 = ethiopicChronology58.getZone();
        org.joda.time.DateTimeField dateTimeField61 = ethiopicChronology58.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField62 = ethiopicChronology58.minuteOfDay();
        org.joda.time.Chronology chronology63 = ethiopicChronology58.withUTC();
        mutableDateTime6.setChronology(chronology63);
        int int65 = mutableDateTime6.getMonthOfYear();
        int int66 = mutableDateTime6.getYearOfEra();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(mutableDateTime27);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertTrue("'" + isoEra42 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra42.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 3L + "'", long52 == 3L);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 0L + "'", long55 == 0L);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "Etc/UTC" + "'", str57, "Etc/UTC");
        org.junit.Assert.assertNotNull(ethiopicChronology58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(dateTimeZone60);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 4 + "'", int65 == 4);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2062 + "'", int66 == 2062);
    }

    @Test
    public void test5443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5443");
        java.util.stream.IntStream intStream2 = java.util.stream.IntStream.rangeClosed(100, (int) '4');
        java.util.stream.IntStream intStream4 = intStream2.skip((long) 256);
        java.util.function.IntBinaryOperator intBinaryOperator5 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.OptionalInt optionalInt6 = intStream4.reduce(intBinaryOperator5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intStream2);
        org.junit.Assert.assertNotNull(intStream4);
    }

    @Test
    public void test5444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5444");
        java.io.File file0 = null;
        java.io.File file2 = new java.io.File(file0, "1970-01-01T00:00:00.003Z");
        java.net.URL uRL3 = file2.toURL();
        boolean boolean4 = file2.canRead();
        java.nio.file.Path path5 = file2.toPath();
        java.nio.file.Path path6 = path5.toAbsolutePath();
        java.io.File file7 = path6.toFile();
        java.nio.file.Path path8 = path6.toAbsolutePath();
        org.junit.Assert.assertNull("file2.getParent() == null", file2.getParent());
        org.junit.Assert.assertEquals(file2.toString(), "1970-01-01T00:00:00.003Z");
        org.junit.Assert.assertNotNull(uRL3);
// flaky:         org.junit.Assert.assertEquals(uRL3.toString(), "file:/experiment/1970-01-01T00:00:00.003Z");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(path5);
        org.junit.Assert.assertNotNull(path6);
        org.junit.Assert.assertNotNull(file7);
// flaky:         org.junit.Assert.assertEquals(file7.getParent(), "/experiment");
// flaky:         org.junit.Assert.assertEquals(file7.toString(), "/experiment/1970-01-01T00:00:00.003Z");
        org.junit.Assert.assertNotNull(path8);
    }

    @Test
    public void test5445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5445");
        // The following exception was thrown during execution in test generation
        try {
            java.io.File file2 = java.io.File.createTempFile("java.util.GregorianCalendar[time=-51016611000000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=353,MONTH=4,WEEK_OF_YEAR=19,WEEK_OF_MONTH=2,DAY_OF_MONTH=6,DAY_OF_YEAR=126,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=10,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", "2022-02-21T09:41:27.723Z");
            org.junit.Assert.fail("Expected exception of type java.io.IOException; message: File name too long");
        } catch (java.io.IOException e) {
            // Expected exception.
        }
    }

    @Test
    public void test5446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5446");
        java.time.Period period1 = java.time.Period.ofYears(28);
        java.time.chrono.IsoChronology isoChronology2 = period1.getChronology();
        java.time.LocalDate localDate4 = isoChronology2.dateEpochDay((long) 3601);
        java.time.Clock clock5 = java.time.Clock.systemUTC();
        java.time.Duration duration7 = java.time.Duration.ofSeconds((long) 256);
        java.time.Clock clock8 = java.time.Clock.tick(clock5, duration7);
        java.time.Duration duration10 = java.time.Duration.ofMinutes((long) 3);
        java.time.Duration duration11 = duration10.abs();
        java.time.Clock clock12 = java.time.Clock.offset(clock5, duration10);
        java.time.chrono.ChronoLocalDate chronoLocalDate13 = isoChronology2.dateNow(clock5);
        long long14 = clock5.millis();
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(isoChronology2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(clock5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(clock8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(clock12);
        org.junit.Assert.assertNotNull(chronoLocalDate13);
// flaky:         org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1645436528025L + "'", long14 == 1645436528025L);
    }

    @Test
    public void test5447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5447");
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod((long) 83400);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.Duration duration5 = new org.joda.time.Duration(readableInstant3, readableInstant4);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.PeriodType periodType7 = null;
        org.joda.time.Period period8 = duration5.toPeriodTo(readableInstant6, periodType7);
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Duration duration11 = new org.joda.time.Duration(readableInstant9, readableInstant10);
        long long12 = duration11.getMillis();
        boolean boolean13 = duration5.isShorterThan((org.joda.time.ReadableDuration) duration11);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) 3, chronology15);
        org.joda.time.DateTime.Property property17 = dateTime16.dayOfYear();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight((java.lang.Object) dateTime16, chronology18);
        org.joda.time.MutableDateTime mutableDateTime20 = dateTime16.toMutableDateTime();
        mutableDateTime20.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime20.dayOfWeek();
        org.joda.time.MutableDateTime.Property property24 = mutableDateTime20.year();
        org.joda.time.MutableDateTime.Property property25 = mutableDateTime20.weekyear();
        boolean boolean26 = duration5.equals((java.lang.Object) mutableDateTime20);
        mutableDateTime20.addMonths((int) ' ');
        mutableDateTime20.add((long) (byte) 10);
        org.joda.time.Period period31 = org.joda.time.Period.ZERO;
        org.joda.time.Period period32 = period31.normalizedStandard();
        org.joda.time.Period period34 = period31.plusHours(2);
        java.time.chrono.IsoEra isoEra35 = java.time.chrono.IsoEra.CE;
        boolean boolean36 = period34.equals((java.lang.Object) isoEra35);
        int int37 = period34.getMinutes();
        mutableDateTime20.add((org.joda.time.ReadablePeriod) period34);
        java.util.TimeZone timeZone40 = null;
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forTimeZone(timeZone40);
        org.joda.time.DateMidnight dateMidnight42 = new org.joda.time.DateMidnight((long) 1970, dateTimeZone41);
        long long45 = dateTimeZone41.convertLocalToUTC((long) 3, false);
        long long48 = dateTimeZone41.convertLocalToUTC(0L, true);
        mutableDateTime20.setZoneRetainFields(dateTimeZone41);
        java.lang.String str50 = dateTimeZone41.toString();
        org.joda.time.chrono.EthiopicChronology ethiopicChronology51 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone41);
        org.joda.time.DateTimeField dateTimeField52 = ethiopicChronology51.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone53 = ethiopicChronology51.getZone();
        org.joda.time.DateTimeField dateTimeField54 = ethiopicChronology51.era();
        org.joda.time.DateTimeField dateTimeField55 = ethiopicChronology51.secondOfDay();
        org.joda.time.DateTimeField dateTimeField56 = ethiopicChronology51.minuteOfHour();
        org.joda.time.DurationField durationField57 = ethiopicChronology51.months();
        org.joda.time.DateTimeField dateTimeField58 = ethiopicChronology51.monthOfYear();
        mutablePeriod1.setPeriod(1645434628L, (org.joda.time.Chronology) ethiopicChronology51);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertTrue("'" + isoEra35 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra35.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 3L + "'", long45 == 3L);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "Etc/UTC" + "'", str50, "Etc/UTC");
        org.junit.Assert.assertNotNull(ethiopicChronology51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(durationField57);
        org.junit.Assert.assertNotNull(dateTimeField58);
    }

    @Test
    public void test5448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5448");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 3, chronology1);
        org.joda.time.DateTime.Property property3 = dateTime2.dayOfYear();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight((java.lang.Object) dateTime2, chronology4);
        org.joda.time.MutableDateTime mutableDateTime6 = dateTime2.toMutableDateTime();
        mutableDateTime6.addYears((int) (short) 100);
        org.joda.time.Period period9 = org.joda.time.Period.ZERO;
        org.joda.time.TimeOfDay timeOfDay11 = org.joda.time.TimeOfDay.fromMillisOfDay((long) (short) 0);
        org.joda.time.TimeOfDay timeOfDay13 = org.joda.time.TimeOfDay.fromMillisOfDay((long) (short) 0);
        org.joda.time.Hours hours14 = org.joda.time.Hours.hoursBetween((org.joda.time.ReadablePartial) timeOfDay11, (org.joda.time.ReadablePartial) timeOfDay13);
        org.joda.time.DurationFieldType durationFieldType15 = org.joda.time.DurationFieldType.hours();
        org.joda.time.TimeOfDay timeOfDay17 = timeOfDay13.withFieldAdded(durationFieldType15, (int) (byte) 0);
        org.joda.time.Period period19 = period9.withFieldAdded(durationFieldType15, 4);
        mutableDateTime6.add((org.joda.time.ReadablePeriod) period9);
        int int21 = mutableDateTime6.getMinuteOfHour();
        mutableDateTime6.add((long) (byte) 10);
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.Duration duration26 = new org.joda.time.Duration(readableInstant24, readableInstant25);
        org.joda.time.Duration duration28 = duration26.withMillis((-1L));
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((long) 3, chronology30);
        org.joda.time.DateTime.Property property32 = dateTime31.dayOfYear();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.DateMidnight dateMidnight34 = new org.joda.time.DateMidnight((java.lang.Object) dateTime31, chronology33);
        org.joda.time.DateMidnight dateMidnight36 = dateMidnight34.minusMonths((-1));
        org.joda.time.DateMidnight dateMidnight38 = dateMidnight34.withDayOfYear((int) ' ');
        org.joda.time.PeriodType periodType39 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period40 = duration28.toPeriodFrom((org.joda.time.ReadableInstant) dateMidnight34, periodType39);
        org.joda.time.Duration duration42 = org.joda.time.Duration.standardHours((long) 1);
        org.joda.time.DateMidnight dateMidnight43 = dateMidnight34.plus((org.joda.time.ReadableDuration) duration42);
        long long44 = duration42.getMillis();
        org.joda.time.Duration duration46 = org.joda.time.Duration.standardMinutes((long) 292269054);
        boolean boolean47 = duration42.isLongerThan((org.joda.time.ReadableDuration) duration46);
        mutableDateTime6.add((org.joda.time.ReadableDuration) duration42);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(timeOfDay11);
        org.junit.Assert.assertNotNull(timeOfDay13);
        org.junit.Assert.assertNotNull(hours14);
        org.junit.Assert.assertNotNull(durationFieldType15);
        org.junit.Assert.assertNotNull(timeOfDay17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(dateMidnight36);
        org.junit.Assert.assertNotNull(dateMidnight38);
        org.junit.Assert.assertNotNull(periodType39);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(dateMidnight43);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 3600000L + "'", long44 == 3600000L);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test5449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5449");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalTime localTime4 = new org.joda.time.LocalTime((long) 0, chronology3);
        org.joda.time.Chronology chronology5 = localTime4.getChronology();
        java.util.Locale locale6 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale7 = java.util.Locale.GERMANY;
        java.lang.String str8 = locale6.getDisplayScript(locale7);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket10 = new org.joda.time.format.DateTimeParserBucket((long) 1970, chronology5, locale6, (java.lang.Integer) 1);
        dateTimeParserBucket10.setOffset((-1));
        org.joda.time.DateTimeZone dateTimeZone13 = dateTimeParserBucket10.getZone();
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime((long) '#', dateTimeZone13);
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime14.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime14.property(dateTimeFieldType16);
        java.lang.String str18 = dateTimeFieldType16.getName();
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "yearOfEra" + "'", str18, "yearOfEra");
    }

    @Test
    public void test5450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5450");
        org.joda.time.Period period0 = org.joda.time.Period.ZERO;
        org.joda.time.Period period1 = period0.normalizedStandard();
        org.joda.time.Period period3 = period0.plusHours(2);
        java.time.chrono.IsoEra isoEra4 = java.time.chrono.IsoEra.CE;
        boolean boolean5 = period3.equals((java.lang.Object) isoEra4);
        java.time.LocalTime localTime10 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime11 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime10);
        java.time.LocalTime localTime16 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime17 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime16);
        java.time.temporal.ChronoField chronoField18 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime20 = localTime16.with((java.time.temporal.TemporalField) chronoField18, (long) (short) 1);
        long long21 = localTime10.getLong((java.time.temporal.TemporalField) chronoField18);
        boolean boolean22 = isoEra4.isSupported((java.time.temporal.TemporalField) chronoField18);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery23 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period24 = isoEra4.query(periodTemporalQuery23);
        boolean boolean25 = period24.isNegative();
        java.time.Period period27 = period24.plusDays((long) ' ');
        boolean boolean28 = period24.isNegative();
        java.time.Period period30 = period24.minusYears((long) 10);
        org.joda.time.Period period31 = org.joda.time.Period.ZERO;
        org.joda.time.Period period32 = period31.normalizedStandard();
        org.joda.time.Period period34 = period31.plusHours(2);
        java.time.chrono.IsoEra isoEra35 = java.time.chrono.IsoEra.CE;
        boolean boolean36 = period34.equals((java.lang.Object) isoEra35);
        java.time.LocalTime localTime41 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime42 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime41);
        java.time.LocalTime localTime47 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime48 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime47);
        java.time.temporal.ChronoField chronoField49 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime51 = localTime47.with((java.time.temporal.TemporalField) chronoField49, (long) (short) 1);
        long long52 = localTime41.getLong((java.time.temporal.TemporalField) chronoField49);
        boolean boolean53 = isoEra35.isSupported((java.time.temporal.TemporalField) chronoField49);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery54 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period55 = isoEra35.query(periodTemporalQuery54);
        java.time.chrono.ChronoPeriod chronoPeriod56 = period30.minus((java.time.temporal.TemporalAmount) period55);
        java.time.chrono.ChronoPeriod chronoPeriod58 = period30.multipliedBy(4096);
        int int59 = period30.getMonths();
        java.time.chrono.IsoChronology isoChronology60 = period30.getChronology();
        java.time.ZoneOffset zoneOffset63 = java.time.ZoneOffset.ofHoursMinutes(1, 10);
        java.time.LocalDate localDate64 = java.time.LocalDate.now((java.time.ZoneId) zoneOffset63);
        java.time.Clock clock65 = java.time.Clock.system((java.time.ZoneId) zoneOffset63);
        java.time.Duration duration67 = java.time.Duration.ofSeconds((long) 0);
        java.time.Duration duration69 = duration67.multipliedBy((long) (byte) -1);
        java.time.Clock clock70 = java.time.Clock.offset(clock65, duration67);
        java.time.chrono.ChronoLocalDate chronoLocalDate71 = isoChronology60.dateNow(clock65);
        org.joda.time.Period period72 = org.joda.time.Period.ZERO;
        org.joda.time.Period period73 = period72.normalizedStandard();
        org.joda.time.Period period75 = period72.plusHours(2);
        java.time.chrono.IsoEra isoEra76 = java.time.chrono.IsoEra.CE;
        boolean boolean77 = period75.equals((java.lang.Object) isoEra76);
        java.time.LocalTime localTime82 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime83 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime82);
        java.time.LocalTime localTime88 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime89 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime88);
        java.time.temporal.ChronoField chronoField90 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime92 = localTime88.with((java.time.temporal.TemporalField) chronoField90, (long) (short) 1);
        long long93 = localTime82.getLong((java.time.temporal.TemporalField) chronoField90);
        boolean boolean94 = isoEra76.isSupported((java.time.temporal.TemporalField) chronoField90);
        java.time.temporal.ValueRange valueRange95 = isoChronology60.range(chronoField90);
        long long96 = valueRange95.getSmallestMaximum();
        boolean boolean97 = valueRange95.isFixed();
        org.junit.Assert.assertNotNull(period0);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertTrue("'" + isoEra4 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra4.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertTrue("'" + chronoField18 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField18.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 3601000000001L + "'", long21 == 3601000000001L);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(periodTemporalQuery23);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertTrue("'" + isoEra35 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra35.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(localTime41);
        org.junit.Assert.assertNotNull(localTime42);
        org.junit.Assert.assertNotNull(localTime47);
        org.junit.Assert.assertNotNull(localTime48);
        org.junit.Assert.assertTrue("'" + chronoField49 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField49.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime51);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 3601000000001L + "'", long52 == 3601000000001L);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(periodTemporalQuery54);
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertNotNull(chronoPeriod56);
        org.junit.Assert.assertNotNull(chronoPeriod58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(isoChronology60);
        org.junit.Assert.assertNotNull(zoneOffset63);
        org.junit.Assert.assertNotNull(localDate64);
        org.junit.Assert.assertNotNull(clock65);
        org.junit.Assert.assertNotNull(duration67);
        org.junit.Assert.assertNotNull(duration69);
        org.junit.Assert.assertNotNull(clock70);
        org.junit.Assert.assertNotNull(chronoLocalDate71);
        org.junit.Assert.assertNotNull(period72);
        org.junit.Assert.assertNotNull(period73);
        org.junit.Assert.assertNotNull(period75);
        org.junit.Assert.assertTrue("'" + isoEra76 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra76.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(localTime82);
        org.junit.Assert.assertNotNull(localTime83);
        org.junit.Assert.assertNotNull(localTime88);
        org.junit.Assert.assertNotNull(localTime89);
        org.junit.Assert.assertTrue("'" + chronoField90 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField90.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime92);
        org.junit.Assert.assertTrue("'" + long93 + "' != '" + 3601000000001L + "'", long93 == 3601000000001L);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertNotNull(valueRange95);
        org.junit.Assert.assertTrue("'" + long96 + "' != '" + 86399999999999L + "'", long96 == 86399999999999L);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + true + "'", boolean97 == true);
    }

    @Test
    public void test5451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5451");
        java.net.InetAddress inetAddress0 = java.net.InetAddress.getLocalHost();
        boolean boolean1 = inetAddress0.isMCOrgLocal();
        float[] floatArray4 = new float[] { (-1L), (byte) -1 };
        java.nio.FloatBuffer floatBuffer5 = java.nio.FloatBuffer.wrap(floatArray4);
        boolean boolean6 = inetAddress0.equals((java.lang.Object) floatBuffer5);
        float[] floatArray9 = new float[] { (-1L), (byte) -1 };
        java.nio.FloatBuffer floatBuffer10 = java.nio.FloatBuffer.wrap(floatArray9);
        java.nio.FloatBuffer floatBuffer11 = floatBuffer10.compact();
        java.nio.FloatBuffer floatBuffer12 = floatBuffer10.asReadOnlyBuffer();
        java.nio.ByteOrder byteOrder13 = floatBuffer10.order();
        boolean boolean14 = floatBuffer5.equals((java.lang.Object) floatBuffer10);
        float[] floatArray17 = new float[] { (-1L), (byte) -1 };
        java.nio.FloatBuffer floatBuffer18 = java.nio.FloatBuffer.wrap(floatArray17);
        java.nio.FloatBuffer floatBuffer19 = floatBuffer18.compact();
        boolean boolean20 = floatBuffer19.isDirect();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) 3, chronology22);
        org.joda.time.DateTime.Property property24 = dateTime23.dayOfYear();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateMidnight dateMidnight26 = new org.joda.time.DateMidnight((java.lang.Object) dateTime23, chronology25);
        org.joda.time.MutableDateTime mutableDateTime27 = dateTime23.toMutableDateTime();
        mutableDateTime27.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property30 = mutableDateTime27.dayOfWeek();
        int int31 = property30.get();
        boolean boolean32 = floatBuffer19.equals((java.lang.Object) int31);
        java.nio.FloatBuffer floatBuffer33 = floatBuffer5.put(floatBuffer19);
        float[] floatArray34 = floatBuffer19.array();
        org.junit.Assert.assertNotNull(inetAddress0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(floatArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray4), "[-1.0, -1.0]");
        org.junit.Assert.assertNotNull(floatBuffer5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(floatArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray9), "[-1.0, -1.0]");
        org.junit.Assert.assertNotNull(floatBuffer10);
        org.junit.Assert.assertNotNull(floatBuffer11);
        org.junit.Assert.assertNotNull(floatBuffer12);
        org.junit.Assert.assertNotNull(byteOrder13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(floatArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray17), "[-1.0, -1.0]");
        org.junit.Assert.assertNotNull(floatBuffer18);
        org.junit.Assert.assertNotNull(floatBuffer19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(mutableDateTime27);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 3 + "'", int31 == 3);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(floatBuffer33);
        org.junit.Assert.assertNotNull(floatArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray34), "[-1.0, -1.0]");
    }

    @Test
    public void test5452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5452");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 3, chronology1);
        org.joda.time.DateTime.Property property3 = dateTime2.dayOfYear();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight((java.lang.Object) dateTime2, chronology4);
        org.joda.time.DateMidnight.Property property6 = dateMidnight5.dayOfMonth();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 3, chronology8);
        org.joda.time.DateTime.Property property10 = dateTime9.dayOfYear();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateMidnight dateMidnight12 = new org.joda.time.DateMidnight((java.lang.Object) dateTime9, chronology11);
        org.joda.time.DateMidnight dateMidnight14 = dateMidnight12.minusMonths((-1));
        org.joda.time.DateMidnight dateMidnight16 = dateMidnight12.withDayOfYear((int) ' ');
        org.joda.time.Weeks weeks17 = org.joda.time.Weeks.weeksBetween((org.joda.time.ReadableInstant) dateMidnight5, (org.joda.time.ReadableInstant) dateMidnight16);
        org.joda.time.DateMidnight.Property property18 = dateMidnight5.year();
        org.joda.time.DateMidnight dateMidnight19 = property18.roundHalfEvenCopy();
        org.joda.time.DateMidnight.Property property20 = dateMidnight19.era();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateMidnight dateMidnight22 = property20.setCopy(32772);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 32772 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(weeks17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(property20);
    }

    @Test
    public void test5453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5453");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.now();
        java.time.LocalDateTime localDateTime2 = localDateTime0.minusYears((long) (byte) 10);
        int int3 = localDateTime0.getHour();
        java.time.LocalDateTime localDateTime5 = localDateTime0.plusWeeks((long) 5);
        java.time.Instant instant6 = java.time.Instant.now();
        java.time.Instant instant7 = java.time.Instant.now();
        boolean boolean8 = instant6.isAfter(instant7);
        java.time.LocalDate localDate10 = java.time.LocalDate.ofEpochDay((long) ' ');
        int int11 = localDate10.getMonthValue();
        org.joda.time.Period period12 = org.joda.time.Period.ZERO;
        org.joda.time.Period period13 = period12.normalizedStandard();
        org.joda.time.Period period15 = period12.plusHours(2);
        java.time.chrono.IsoEra isoEra16 = java.time.chrono.IsoEra.CE;
        boolean boolean17 = period15.equals((java.lang.Object) isoEra16);
        java.time.LocalTime localTime22 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime23 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime22);
        java.time.LocalTime localTime28 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime29 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime28);
        java.time.temporal.ChronoField chronoField30 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime32 = localTime28.with((java.time.temporal.TemporalField) chronoField30, (long) (short) 1);
        long long33 = localTime22.getLong((java.time.temporal.TemporalField) chronoField30);
        boolean boolean34 = isoEra16.isSupported((java.time.temporal.TemporalField) chronoField30);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery35 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period36 = isoEra16.query(periodTemporalQuery35);
        boolean boolean37 = period36.isNegative();
        java.time.Period period39 = period36.plusDays((long) ' ');
        java.time.temporal.ChronoField chronoField40 = java.time.temporal.ChronoField.SECOND_OF_DAY;
        boolean boolean41 = period36.equals((java.lang.Object) chronoField40);
        boolean boolean42 = localDate10.isSupported((java.time.temporal.TemporalField) chronoField40);
        java.time.temporal.TemporalUnit temporalUnit43 = chronoField40.getRangeUnit();
        java.time.Instant instant44 = instant7.truncatedTo(temporalUnit43);
        java.time.ZoneOffset zoneOffset47 = java.time.ZoneOffset.ofHoursMinutes(1, 10);
        java.time.LocalDate localDate48 = java.time.LocalDate.now((java.time.ZoneId) zoneOffset47);
        java.time.ZonedDateTime zonedDateTime49 = java.time.ZonedDateTime.ofInstant(instant44, (java.time.ZoneId) zoneOffset47);
        java.time.ZoneOffset zoneOffset52 = java.time.ZoneOffset.ofHoursMinutes(1, 10);
        java.time.LocalDate localDate53 = java.time.LocalDate.now((java.time.ZoneId) zoneOffset52);
        java.time.Clock clock54 = java.time.Clock.system((java.time.ZoneId) zoneOffset52);
        java.time.Clock clock55 = java.time.Clock.tickSeconds((java.time.ZoneId) zoneOffset52);
        java.time.zone.ZoneRules zoneRules56 = zoneOffset52.getRules();
        java.time.ZonedDateTime zonedDateTime57 = java.time.ZonedDateTime.ofLocal(localDateTime5, (java.time.ZoneId) zoneOffset47, zoneOffset52);
        java.time.LocalDateTime localDateTime58 = java.time.LocalDateTime.now();
        java.time.LocalDateTime localDateTime60 = localDateTime58.minusYears((long) (byte) 10);
        int int61 = localDateTime58.getSecond();
        // The following exception was thrown during execution in test generation
        try {
            java.time.temporal.Temporal temporal62 = zoneOffset52.adjustInto((java.time.temporal.Temporal) localDateTime58);
            org.junit.Assert.fail("Expected exception of type java.time.temporal.UnsupportedTemporalTypeException; message: Unsupported field: OffsetSeconds");
        } catch (java.time.temporal.UnsupportedTemporalTypeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 9 + "'", int3 == 9);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(instant6);
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertTrue("'" + isoEra16 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra16.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertNotNull(localTime28);
        org.junit.Assert.assertNotNull(localTime29);
        org.junit.Assert.assertTrue("'" + chronoField30 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField30.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime32);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 3601000000001L + "'", long33 == 3601000000001L);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(periodTemporalQuery35);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertTrue("'" + chronoField40 + "' != '" + java.time.temporal.ChronoField.SECOND_OF_DAY + "'", chronoField40.equals(java.time.temporal.ChronoField.SECOND_OF_DAY));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + temporalUnit43 + "' != '" + java.time.temporal.ChronoUnit.DAYS + "'", temporalUnit43.equals(java.time.temporal.ChronoUnit.DAYS));
        org.junit.Assert.assertNotNull(instant44);
        org.junit.Assert.assertNotNull(zoneOffset47);
        org.junit.Assert.assertNotNull(localDate48);
        org.junit.Assert.assertNotNull(zonedDateTime49);
        org.junit.Assert.assertNotNull(zoneOffset52);
        org.junit.Assert.assertNotNull(localDate53);
        org.junit.Assert.assertNotNull(clock54);
        org.junit.Assert.assertNotNull(clock55);
        org.junit.Assert.assertNotNull(zoneRules56);
        org.junit.Assert.assertNotNull(zonedDateTime57);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(localDateTime60);
// flaky:         org.junit.Assert.assertTrue("'" + int61 + "' != '" + 8 + "'", int61 == 8);
    }

    @Test
    public void test5454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5454");
        java.io.PrintStream printStream1 = new java.io.PrintStream("subject:\n (GERMAN)");
        printStream1.write((int) '#');
        java.security.CodeSource codeSource5 = null;
        java.security.PermissionCollection permissionCollection6 = null;
        java.security.ProtectionDomain protectionDomain7 = new java.security.ProtectionDomain(codeSource5, permissionCollection6);
        java.lang.ClassLoader classLoader8 = protectionDomain7.getClassLoader();
        java.security.CodeSource codeSource9 = null;
        java.security.PermissionCollection permissionCollection10 = null;
        java.security.ProtectionDomain protectionDomain11 = new java.security.ProtectionDomain(codeSource9, permissionCollection10);
        java.security.Permission permission12 = null;
        boolean boolean13 = protectionDomain11.implies(permission12);
        java.security.CodeSource codeSource14 = null;
        java.security.PermissionCollection permissionCollection15 = null;
        java.security.ProtectionDomain protectionDomain16 = new java.security.ProtectionDomain(codeSource14, permissionCollection15);
        java.security.CodeSource codeSource17 = null;
        java.security.PermissionCollection permissionCollection18 = null;
        java.security.ProtectionDomain protectionDomain19 = new java.security.ProtectionDomain(codeSource17, permissionCollection18);
        java.security.ProtectionDomain[] protectionDomainArray20 = new java.security.ProtectionDomain[] { protectionDomain7, protectionDomain11, protectionDomain16, protectionDomain19 };
        java.security.AccessControlContext accessControlContext21 = new java.security.AccessControlContext(protectionDomainArray20);
        java.io.PrintStream printStream22 = printStream1.printf("Property[secondOfMinute]", (java.lang.Object[]) protectionDomainArray20);
        printStream1.println(false);
        printStream1.println(true);
        printStream1.close();
        org.junit.Assert.assertEquals(protectionDomain7.toString(), "ProtectionDomain  null\n null\n <no principals>\n null\n");
        org.junit.Assert.assertNull(classLoader8);
        org.junit.Assert.assertEquals(protectionDomain11.toString(), "ProtectionDomain  null\n null\n <no principals>\n null\n");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals(protectionDomain16.toString(), "ProtectionDomain  null\n null\n <no principals>\n null\n");
        org.junit.Assert.assertEquals(protectionDomain19.toString(), "ProtectionDomain  null\n null\n <no principals>\n null\n");
        org.junit.Assert.assertNotNull(protectionDomainArray20);
        org.junit.Assert.assertNotNull(printStream22);
    }

    @Test
    public void test5455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5455");
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.Duration duration5 = new org.joda.time.Duration(readableInstant3, readableInstant4);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.PeriodType periodType7 = null;
        org.joda.time.Period period8 = duration5.toPeriodTo(readableInstant6, periodType7);
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Duration duration11 = new org.joda.time.Duration(readableInstant9, readableInstant10);
        long long12 = duration11.getMillis();
        boolean boolean13 = duration5.isShorterThan((org.joda.time.ReadableDuration) duration11);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) 3, chronology15);
        org.joda.time.DateTime.Property property17 = dateTime16.dayOfYear();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight((java.lang.Object) dateTime16, chronology18);
        org.joda.time.MutableDateTime mutableDateTime20 = dateTime16.toMutableDateTime();
        mutableDateTime20.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime20.dayOfWeek();
        org.joda.time.MutableDateTime.Property property24 = mutableDateTime20.year();
        org.joda.time.MutableDateTime.Property property25 = mutableDateTime20.weekyear();
        boolean boolean26 = duration5.equals((java.lang.Object) mutableDateTime20);
        mutableDateTime20.addMonths((int) ' ');
        mutableDateTime20.add((long) (byte) 10);
        org.joda.time.Period period31 = org.joda.time.Period.ZERO;
        org.joda.time.Period period32 = period31.normalizedStandard();
        org.joda.time.Period period34 = period31.plusHours(2);
        java.time.chrono.IsoEra isoEra35 = java.time.chrono.IsoEra.CE;
        boolean boolean36 = period34.equals((java.lang.Object) isoEra35);
        int int37 = period34.getMinutes();
        mutableDateTime20.add((org.joda.time.ReadablePeriod) period34);
        java.util.TimeZone timeZone40 = null;
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forTimeZone(timeZone40);
        org.joda.time.DateMidnight dateMidnight42 = new org.joda.time.DateMidnight((long) 1970, dateTimeZone41);
        long long45 = dateTimeZone41.convertLocalToUTC((long) 3, false);
        long long48 = dateTimeZone41.convertLocalToUTC(0L, true);
        mutableDateTime20.setZoneRetainFields(dateTimeZone41);
        java.lang.String str50 = dateTimeZone41.toString();
        org.joda.time.chrono.EthiopicChronology ethiopicChronology51 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone41);
        org.joda.time.DateTimeField dateTimeField52 = ethiopicChronology51.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone53 = ethiopicChronology51.getZone();
        org.joda.time.DateTimeField dateTimeField54 = ethiopicChronology51.era();
        org.joda.time.DateTimeField dateTimeField55 = ethiopicChronology51.secondOfDay();
        org.joda.time.DateTimeField dateTimeField56 = ethiopicChronology51.minuteOfHour();
        org.joda.time.DurationField durationField57 = ethiopicChronology51.months();
        org.joda.time.DateTimeField dateTimeField58 = ethiopicChronology51.secondOfMinute();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.YearMonthDay yearMonthDay59 = new org.joda.time.YearMonthDay(27, 14, 13, (org.joda.time.Chronology) ethiopicChronology51);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 14 for monthOfYear must not be larger than 13");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertTrue("'" + isoEra35 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra35.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 3L + "'", long45 == 3L);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "Etc/UTC" + "'", str50, "Etc/UTC");
        org.junit.Assert.assertNotNull(ethiopicChronology51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(durationField57);
        org.junit.Assert.assertNotNull(dateTimeField58);
    }

    @Test
    public void test5456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5456");
        java.net.InetAddress inetAddress0 = java.net.InetAddress.getLocalHost();
        boolean boolean1 = inetAddress0.isMCOrgLocal();
        boolean boolean3 = inetAddress0.isReachable(624);
        org.junit.Assert.assertNotNull(inetAddress0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
    }

    @Test
    public void test5457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5457");
        java.nio.ByteBuffer byteBuffer1 = java.nio.ByteBuffer.allocate((int) 'a');
        java.nio.ByteBuffer byteBuffer4 = byteBuffer1.put(47, (byte) 1);
        double double6 = byteBuffer1.getDouble((int) '-');
        org.junit.Assert.assertNotNull(byteBuffer1);
        org.junit.Assert.assertNotNull(byteBuffer4);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 5.43230922487E-312d + "'", double6 == 5.43230922487E-312d);
    }

    @Test
    public void test5458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5458");
        org.joda.time.TimeOfDay timeOfDay0 = new org.joda.time.TimeOfDay();
        org.joda.time.TimeOfDay timeOfDay2 = timeOfDay0.plusHours(19);
        org.joda.time.TimeOfDay timeOfDay4 = timeOfDay2.plusMinutes(624);
        org.joda.time.TimeOfDay timeOfDay6 = timeOfDay2.minusMillis(926000000);
        org.junit.Assert.assertNotNull(timeOfDay2);
        org.junit.Assert.assertNotNull(timeOfDay4);
        org.junit.Assert.assertNotNull(timeOfDay6);
    }

    @Test
    public void test5459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5459");
        java.util.OptionalInt optionalInt1 = java.util.OptionalInt.of(3600000);
        java.lang.String str2 = optionalInt1.toString();
        short[] shortArray5 = new short[] { (byte) 0, (short) 1 };
        java.nio.ShortBuffer shortBuffer6 = java.nio.ShortBuffer.wrap(shortArray5);
        short[] shortArray9 = new short[] { (short) 1, (byte) 10 };
        java.nio.ShortBuffer shortBuffer10 = java.nio.ShortBuffer.wrap(shortArray9);
        short[] shortArray13 = new short[] { (short) 1, (byte) 10 };
        java.nio.ShortBuffer shortBuffer14 = java.nio.ShortBuffer.wrap(shortArray13);
        java.nio.ShortBuffer shortBuffer15 = shortBuffer10.put(shortBuffer14);
        int int16 = shortBuffer15.limit();
        boolean boolean17 = shortBuffer15.isReadOnly();
        java.nio.ShortBuffer shortBuffer18 = shortBuffer6.put(shortBuffer15);
        boolean boolean19 = optionalInt1.equals((java.lang.Object) shortBuffer6);
        boolean boolean20 = optionalInt1.isPresent();
        org.junit.Assert.assertNotNull(optionalInt1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "OptionalInt[3600000]" + "'", str2, "OptionalInt[3600000]");
        org.junit.Assert.assertNotNull(shortArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray5), "[0, 1]");
        org.junit.Assert.assertNotNull(shortBuffer6);
        org.junit.Assert.assertNotNull(shortArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray9), "[1, 10]");
        org.junit.Assert.assertNotNull(shortBuffer10);
        org.junit.Assert.assertNotNull(shortArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray13), "[1, 10]");
        org.junit.Assert.assertNotNull(shortBuffer14);
        org.junit.Assert.assertNotNull(shortBuffer15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(shortBuffer18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
    }

    @Test
    public void test5460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5460");
        java.util.stream.Stream.Builder<java.io.OutputStream> outputStreamBuilder0 = java.util.stream.Stream.builder();
        java.util.stream.Stream.Builder<java.io.OutputStream> outputStreamBuilder1 = java.util.stream.Stream.builder();
        java.util.function.Consumer<java.io.OutputStream> outputStreamConsumer2 = outputStreamBuilder0.andThen((java.util.function.Consumer<java.io.OutputStream>) outputStreamBuilder1);
        java.io.PrintStream printStream4 = new java.io.PrintStream("subject:\n (GERMAN)");
        java.util.stream.Stream.Builder<java.io.OutputStream> outputStreamBuilder5 = outputStreamBuilder1.add((java.io.OutputStream) printStream4);
        java.io.PrintWriter printWriter6 = new java.io.PrintWriter((java.io.OutputStream) printStream4);
        java.io.PrintWriter printWriter7 = new java.io.PrintWriter((java.io.Writer) printWriter6);
        // The following exception was thrown during execution in test generation
        try {
            java.io.Writer writer11 = printWriter7.append((java.lang.CharSequence) "ja-JP", 50, (-11));
            org.junit.Assert.fail("Expected exception of type java.lang.StringIndexOutOfBoundsException; message: String index out of range: -61");
        } catch (java.lang.StringIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(outputStreamBuilder0);
        org.junit.Assert.assertNotNull(outputStreamBuilder1);
        org.junit.Assert.assertNotNull(outputStreamConsumer2);
        org.junit.Assert.assertNotNull(outputStreamBuilder5);
    }

    @Test
    public void test5461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5461");
        java.util.stream.IntStream intStream1 = java.util.stream.IntStream.of((int) '/');
        java.util.OptionalInt optionalInt2 = intStream1.min();
        java.io.File file5 = java.io.File.createTempFile("PT3600S", "secondOfMinute");
        java.io.File file6 = file5.getCanonicalFile();
        java.io.File file7 = file6.getAbsoluteFile();
        boolean boolean8 = optionalInt2.equals((java.lang.Object) file7);
        boolean boolean9 = optionalInt2.isPresent();
        org.junit.Assert.assertNotNull(intStream1);
        org.junit.Assert.assertNotNull(optionalInt2);
        org.junit.Assert.assertNotNull(file5);
        org.junit.Assert.assertEquals(file5.getParent(), "/tmp");
// flaky:         org.junit.Assert.assertEquals(file5.toString(), "/tmp/PT3600S6714967321477549079secondOfMinute");
        org.junit.Assert.assertNotNull(file6);
        org.junit.Assert.assertEquals(file6.getParent(), "/tmp");
// flaky:         org.junit.Assert.assertEquals(file6.toString(), "/tmp/PT3600S6714967321477549079secondOfMinute");
        org.junit.Assert.assertNotNull(file7);
        org.junit.Assert.assertEquals(file7.getParent(), "/tmp");
// flaky:         org.junit.Assert.assertEquals(file7.toString(), "/tmp/PT3600S6714967321477549079secondOfMinute");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test5462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5462");
        java.nio.LongBuffer longBuffer1 = java.nio.LongBuffer.allocate((int) (short) 0);
        java.nio.LongBuffer longBuffer3 = java.nio.LongBuffer.allocate((int) (short) 0);
        long[] longArray4 = longBuffer3.array();
        java.nio.LongBuffer longBuffer5 = longBuffer1.put(longArray4);
        java.nio.LongBuffer longBuffer7 = java.nio.LongBuffer.allocate((int) (short) 0);
        long[] longArray8 = longBuffer7.array();
        java.nio.LongBuffer longBuffer9 = longBuffer1.put(longArray8);
        // The following exception was thrown during execution in test generation
        try {
            long long10 = longBuffer9.get();
            org.junit.Assert.fail("Expected exception of type java.nio.BufferUnderflowException; message: null");
        } catch (java.nio.BufferUnderflowException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(longBuffer1);
        org.junit.Assert.assertNotNull(longBuffer3);
        org.junit.Assert.assertNotNull(longArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray4), "[]");
        org.junit.Assert.assertNotNull(longBuffer5);
        org.junit.Assert.assertNotNull(longBuffer7);
        org.junit.Assert.assertNotNull(longArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray8), "[]");
        org.junit.Assert.assertNotNull(longBuffer9);
    }

    @Test
    public void test5463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5463");
        java.io.File file0 = null;
        java.io.File file2 = new java.io.File(file0, "1970-01-01T00:00:00.003Z");
        java.net.URL uRL3 = file2.toURL();
        boolean boolean4 = file2.canRead();
        java.nio.file.Path path5 = file2.toPath();
        java.nio.file.Path path6 = path5.toAbsolutePath();
        java.io.File file7 = null;
        java.io.File file9 = new java.io.File(file7, "1970-01-01T00:00:00.003Z");
        java.net.URL uRL10 = file9.toURL();
        boolean boolean11 = file9.canRead();
        java.nio.file.Path path12 = file9.toPath();
        java.nio.file.Path path13 = path12.toAbsolutePath();
        java.io.File file14 = path13.toFile();
        boolean boolean15 = path5.endsWith(path13);
        java.io.File file16 = path5.toFile();
        // The following exception was thrown during execution in test generation
        try {
            java.nio.file.Path path19 = path5.subpath(3601, 58);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull("file2.getParent() == null", file2.getParent());
        org.junit.Assert.assertEquals(file2.toString(), "1970-01-01T00:00:00.003Z");
        org.junit.Assert.assertNotNull(uRL3);
// flaky:         org.junit.Assert.assertEquals(uRL3.toString(), "file:/experiment/1970-01-01T00:00:00.003Z");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(path5);
        org.junit.Assert.assertNotNull(path6);
        org.junit.Assert.assertNull("file9.getParent() == null", file9.getParent());
        org.junit.Assert.assertEquals(file9.toString(), "1970-01-01T00:00:00.003Z");
        org.junit.Assert.assertNotNull(uRL10);
// flaky:         org.junit.Assert.assertEquals(uRL10.toString(), "file:/experiment/1970-01-01T00:00:00.003Z");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(path12);
        org.junit.Assert.assertNotNull(path13);
        org.junit.Assert.assertNotNull(file14);
// flaky:         org.junit.Assert.assertEquals(file14.getParent(), "/experiment");
// flaky:         org.junit.Assert.assertEquals(file14.toString(), "/experiment/1970-01-01T00:00:00.003Z");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(file16);
        org.junit.Assert.assertNull("file16.getParent() == null", file16.getParent());
        org.junit.Assert.assertEquals(file16.toString(), "1970-01-01T00:00:00.003Z");
    }

    @Test
    public void test5464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5464");
        java.time.LocalTime localTime4 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime5 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime4);
        java.time.temporal.ChronoField chronoField6 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime8 = localTime4.with((java.time.temporal.TemporalField) chronoField6, (long) (short) 1);
        java.time.Duration duration10 = java.time.Duration.ofMinutes((long) 3);
        java.time.LocalTime localTime11 = localTime4.minus((java.time.temporal.TemporalAmount) duration10);
        java.time.Duration duration13 = duration10.minusNanos((long) 14);
        java.util.List<java.time.temporal.TemporalUnit> temporalUnitList14 = duration13.getUnits();
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertTrue("'" + chronoField6 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField6.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(temporalUnitList14);
    }

    @Test
    public void test5465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5465");
        java.util.function.Function<java.security.KeyException, java.security.KeyException> keyExceptionFunction0 = java.util.function.Function.identity();
        java.nio.charset.CharacterCodingException characterCodingException3 = new java.nio.charset.CharacterCodingException();
        java.security.InvalidKeyException invalidKeyException4 = new java.security.InvalidKeyException("1", (java.lang.Throwable) characterCodingException3);
        java.security.cert.CertificateEncodingException certificateEncodingException5 = new java.security.cert.CertificateEncodingException("Optional.empty", (java.lang.Throwable) invalidKeyException4);
        java.security.KeyException keyException6 = keyExceptionFunction0.apply((java.security.KeyException) invalidKeyException4);
        java.security.InvalidKeyException invalidKeyException8 = new java.security.InvalidKeyException("parsecasesensitive(false)(value(year,4,10,exceeds_pad)'-'value(monthofyear,2)'-'value(dayofmonth,2))[offset(+hh:mm:ss,'z')] (UNDERFLOW,Years)");
        java.security.KeyException keyException9 = keyExceptionFunction0.apply((java.security.KeyException) invalidKeyException8);
        java.security.GeneralSecurityException generalSecurityException10 = new java.security.GeneralSecurityException((java.lang.Throwable) keyException9);
        org.junit.Assert.assertNotNull(keyExceptionFunction0);
        org.junit.Assert.assertNotNull(keyException6);
        org.junit.Assert.assertNotNull(keyException9);
    }

    @Test
    public void test5466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5466");
        java.time.OffsetTime offsetTime0 = java.time.OffsetTime.MAX;
        java.time.LocalTime localTime1 = offsetTime0.toLocalTime();
        java.lang.String str2 = offsetTime0.toString();
        java.time.Duration duration3 = java.time.Duration.ZERO;
        java.lang.String str4 = duration3.toString();
        java.time.OffsetTime offsetTime5 = offsetTime0.plus((java.time.temporal.TemporalAmount) duration3);
        java.time.OffsetTime offsetTime7 = offsetTime0.plusNanos((long) 0);
        java.time.OffsetTime offsetTime9 = offsetTime0.plusNanos((-1L));
        java.time.OffsetTime offsetTime11 = offsetTime0.plusHours((long) (short) 1);
        java.time.ZoneOffset zoneOffset12 = java.time.ZoneOffset.MIN;
        java.time.OffsetTime offsetTime13 = offsetTime0.withOffsetSameInstant(zoneOffset12);
        java.time.format.DateTimeFormatter dateTimeFormatter14 = java.time.format.DateTimeFormatter.ISO_LOCAL_DATE;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str15 = offsetTime13.format(dateTimeFormatter14);
            org.junit.Assert.fail("Expected exception of type java.time.temporal.UnsupportedTemporalTypeException; message: Unsupported field: Year");
        } catch (java.time.temporal.UnsupportedTemporalTypeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(offsetTime0);
        org.junit.Assert.assertNotNull(localTime1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "23:59:59.999999999-18:00" + "'", str2, "23:59:59.999999999-18:00");
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "PT0S" + "'", str4, "PT0S");
        org.junit.Assert.assertNotNull(offsetTime5);
        org.junit.Assert.assertNotNull(offsetTime7);
        org.junit.Assert.assertNotNull(offsetTime9);
        org.junit.Assert.assertNotNull(offsetTime11);
        org.junit.Assert.assertNotNull(zoneOffset12);
        org.junit.Assert.assertNotNull(offsetTime13);
        org.junit.Assert.assertNotNull(dateTimeFormatter14);
    }

    @Test
    public void test5467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5467");
        java.util.function.LongUnaryOperator longUnaryOperator1 = java.util.function.LongUnaryOperator.identity();
        java.util.function.LongUnaryOperator longUnaryOperator2 = java.util.function.LongUnaryOperator.identity();
        java.util.function.LongUnaryOperator longUnaryOperator3 = longUnaryOperator1.compose(longUnaryOperator2);
        java.util.function.LongUnaryOperator longUnaryOperator4 = java.util.function.LongUnaryOperator.identity();
        java.util.function.LongUnaryOperator longUnaryOperator5 = longUnaryOperator3.andThen(longUnaryOperator4);
        java.util.function.LongUnaryOperator longUnaryOperator6 = java.util.function.LongUnaryOperator.identity();
        java.util.function.LongUnaryOperator longUnaryOperator7 = java.util.function.LongUnaryOperator.identity();
        java.util.function.LongUnaryOperator longUnaryOperator8 = longUnaryOperator6.compose(longUnaryOperator7);
        java.util.function.LongUnaryOperator longUnaryOperator9 = java.util.function.LongUnaryOperator.identity();
        java.util.function.LongUnaryOperator longUnaryOperator10 = longUnaryOperator8.andThen(longUnaryOperator9);
        java.util.function.LongUnaryOperator longUnaryOperator11 = longUnaryOperator3.compose(longUnaryOperator9);
        java.util.stream.LongStream longStream12 = java.util.stream.LongStream.iterate((long) 64, longUnaryOperator3);
        org.junit.Assert.assertNotNull(longUnaryOperator1);
        org.junit.Assert.assertNotNull(longUnaryOperator2);
        org.junit.Assert.assertNotNull(longUnaryOperator3);
        org.junit.Assert.assertNotNull(longUnaryOperator4);
        org.junit.Assert.assertNotNull(longUnaryOperator5);
        org.junit.Assert.assertNotNull(longUnaryOperator6);
        org.junit.Assert.assertNotNull(longUnaryOperator7);
        org.junit.Assert.assertNotNull(longUnaryOperator8);
        org.junit.Assert.assertNotNull(longUnaryOperator9);
        org.junit.Assert.assertNotNull(longUnaryOperator10);
        org.junit.Assert.assertNotNull(longUnaryOperator11);
        org.junit.Assert.assertNotNull(longStream12);
    }

    @Test
    public void test5468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5468");
        java.util.Optional<java.lang.Exception> exceptionOptional0 = java.util.Optional.empty();
        java.lang.String str1 = exceptionOptional0.toString();
        java.time.LocalDateTime localDateTime2 = java.time.LocalDateTime.now();
        java.time.temporal.ChronoField chronoField3 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime5 = localDateTime2.with((java.time.temporal.TemporalField) chronoField3, (long) 10);
        java.time.LocalDateTime localDateTime7 = localDateTime2.withDayOfYear((int) '/');
        boolean boolean8 = exceptionOptional0.equals((java.lang.Object) localDateTime7);
        java.time.LocalDateTime localDateTime10 = localDateTime7.plusYears((long) 9);
        java.time.LocalDateTime localDateTime12 = localDateTime7.plusWeeks((long) 4096);
        java.time.LocalDateTime localDateTime13 = java.time.LocalDateTime.now();
        java.time.LocalTime localTime14 = localDateTime13.toLocalTime();
        java.time.chrono.Chronology chronology15 = localDateTime13.getChronology();
        int int16 = localDateTime12.compareTo((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime13);
        org.junit.Assert.assertNotNull(exceptionOptional0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Optional.empty" + "'", str1, "Optional.empty");
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertTrue("'" + chronoField3 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField3.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 78 + "'", int16 == 78);
    }

    @Test
    public void test5469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5469");
        // The following exception was thrown during execution in test generation
        try {
            java.net.URI uRI7 = new java.net.URI("2022-02-21T09:34:15.864Z", "19", "", 576, "0353-05-07Z", "2022-02-21T09:39:01.938Z", "java.nio.DirectByteBuffer[pos=0 lim=10800000 cap=10800000]");
            org.junit.Assert.fail("Expected exception of type java.net.URISyntaxException; message: Relative path in absolute URI: 2022-02-21T09:34:15.864Z://19@:5760353-05-07Z?2022-02-21T09:39:01.938Z#java.nio.DirectByteBuffer[pos=0%20lim=10800000%20cap=10800000]");
        } catch (java.net.URISyntaxException e) {
            // Expected exception.
        }
    }

    @Test
    public void test5470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5470");
        java.time.LocalDate localDate1 = java.time.LocalDate.ofEpochDay((long) ' ');
        java.time.OffsetTime offsetTime2 = java.time.OffsetTime.MAX;
        java.time.LocalTime localTime3 = offsetTime2.toLocalTime();
        java.lang.String str4 = offsetTime2.toString();
        java.time.Duration duration5 = java.time.Duration.ZERO;
        java.lang.String str6 = duration5.toString();
        java.time.OffsetTime offsetTime7 = offsetTime2.plus((java.time.temporal.TemporalAmount) duration5);
        java.time.LocalTime localTime8 = offsetTime2.toLocalTime();
        java.time.chrono.ChronoLocalDateTime<?> wildcardChronoLocalDateTime9 = localDate1.atTime(localTime8);
        java.time.LocalDate localDate11 = localDate1.minusWeeks((long) 2097);
        java.lang.String str12 = localDate11.toString();
        java.time.chrono.Era era13 = localDate11.getEra();
        int int14 = localDate11.getDayOfMonth();
        java.util.Properties properties15 = null;
        java.util.Properties properties16 = new java.util.Properties(properties15);
        java.time.LocalTime localTime21 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime22 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime21);
        java.time.LocalTime localTime27 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime28 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime27);
        java.time.temporal.ChronoField chronoField29 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime31 = localTime27.with((java.time.temporal.TemporalField) chronoField29, (long) (short) 1);
        long long32 = localTime21.getLong((java.time.temporal.TemporalField) chronoField29);
        java.time.LocalTime localTime34 = localTime21.withSecond((int) (short) 1);
        java.lang.Object obj36 = properties16.put((java.lang.Object) localTime34, (java.lang.Object) "117");
        boolean boolean38 = properties16.containsValue((java.lang.Object) 6);
        java.time.LocalDate localDate41 = java.time.LocalDate.ofEpochDay((long) ' ');
        int int42 = localDate41.getMonthValue();
        java.lang.Object obj43 = properties16.replace((java.lang.Object) 21, (java.lang.Object) localDate41);
        java.time.LocalDateTime localDateTime44 = java.time.LocalDateTime.MIN;
        java.time.Month month45 = java.time.Month.NOVEMBER;
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime46 = localDateTime44.with((java.time.temporal.TemporalAdjuster) month45);
        java.time.LocalDate localDate49 = java.time.LocalDate.ofEpochDay((long) ' ');
        int int50 = localDate49.getMonthValue();
        org.joda.time.Period period51 = org.joda.time.Period.ZERO;
        org.joda.time.Period period52 = period51.normalizedStandard();
        org.joda.time.Period period54 = period51.plusHours(2);
        java.time.chrono.IsoEra isoEra55 = java.time.chrono.IsoEra.CE;
        boolean boolean56 = period54.equals((java.lang.Object) isoEra55);
        java.time.LocalTime localTime61 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime62 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime61);
        java.time.LocalTime localTime67 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime68 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime67);
        java.time.temporal.ChronoField chronoField69 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime71 = localTime67.with((java.time.temporal.TemporalField) chronoField69, (long) (short) 1);
        long long72 = localTime61.getLong((java.time.temporal.TemporalField) chronoField69);
        boolean boolean73 = isoEra55.isSupported((java.time.temporal.TemporalField) chronoField69);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery74 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period75 = isoEra55.query(periodTemporalQuery74);
        boolean boolean76 = period75.isNegative();
        java.time.Period period78 = period75.plusDays((long) ' ');
        java.time.temporal.ChronoField chronoField79 = java.time.temporal.ChronoField.SECOND_OF_DAY;
        boolean boolean80 = period75.equals((java.lang.Object) chronoField79);
        boolean boolean81 = localDate49.isSupported((java.time.temporal.TemporalField) chronoField79);
        java.time.temporal.TemporalUnit temporalUnit82 = chronoField79.getRangeUnit();
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime83 = localDateChronoLocalDateTime46.plus(1L, temporalUnit82);
        boolean boolean84 = localDate41.isSupported(temporalUnit82);
        boolean boolean85 = localDate11.isEqual((java.time.chrono.ChronoLocalDate) localDate41);
        java.time.DayOfWeek dayOfWeek86 = localDate41.getDayOfWeek();
        org.junit.Assert.assertNotNull(localDate1);
        org.junit.Assert.assertNotNull(offsetTime2);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "23:59:59.999999999-18:00" + "'", str4, "23:59:59.999999999-18:00");
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "PT0S" + "'", str6, "PT0S");
        org.junit.Assert.assertNotNull(offsetTime7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(wildcardChronoLocalDateTime9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "1929-11-25" + "'", str12, "1929-11-25");
        org.junit.Assert.assertTrue("'" + era13 + "' != '" + java.time.chrono.IsoEra.CE + "'", era13.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 25 + "'", int14 == 25);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertNotNull(localTime27);
        org.junit.Assert.assertNotNull(localTime28);
        org.junit.Assert.assertTrue("'" + chronoField29 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField29.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime31);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 3601000000001L + "'", long32 == 3601000000001L);
        org.junit.Assert.assertNotNull(localTime34);
        org.junit.Assert.assertNull(obj36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2 + "'", int42 == 2);
        org.junit.Assert.assertNull(obj43);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertTrue("'" + month45 + "' != '" + java.time.Month.NOVEMBER + "'", month45.equals(java.time.Month.NOVEMBER));
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime46);
        org.junit.Assert.assertNotNull(localDate49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2 + "'", int50 == 2);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertNotNull(period54);
        org.junit.Assert.assertTrue("'" + isoEra55 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra55.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(localTime61);
        org.junit.Assert.assertNotNull(localTime62);
        org.junit.Assert.assertNotNull(localTime67);
        org.junit.Assert.assertNotNull(localTime68);
        org.junit.Assert.assertTrue("'" + chronoField69 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField69.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime71);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 3601000000001L + "'", long72 == 3601000000001L);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(periodTemporalQuery74);
        org.junit.Assert.assertNotNull(period75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(period78);
        org.junit.Assert.assertTrue("'" + chronoField79 + "' != '" + java.time.temporal.ChronoField.SECOND_OF_DAY + "'", chronoField79.equals(java.time.temporal.ChronoField.SECOND_OF_DAY));
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertTrue("'" + temporalUnit82 + "' != '" + java.time.temporal.ChronoUnit.DAYS + "'", temporalUnit82.equals(java.time.temporal.ChronoUnit.DAYS));
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + dayOfWeek86 + "' != '" + java.time.DayOfWeek.MONDAY + "'", dayOfWeek86.equals(java.time.DayOfWeek.MONDAY));
    }

    @Test
    public void test5471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5471");
        org.joda.time.Seconds seconds0 = org.joda.time.Seconds.ONE;
        org.joda.time.Duration duration2 = org.joda.time.Duration.standardDays((long) 20);
        org.joda.time.Seconds seconds3 = duration2.toStandardSeconds();
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.Duration duration6 = new org.joda.time.Duration(readableInstant4, readableInstant5);
        org.joda.time.Seconds seconds7 = duration6.toStandardSeconds();
        int int8 = seconds7.getSeconds();
        org.joda.time.Seconds seconds10 = seconds7.dividedBy(28);
        boolean boolean11 = seconds3.isLessThan(seconds7);
        org.joda.time.Seconds seconds12 = seconds0.plus(seconds7);
        org.joda.time.PeriodType periodType13 = seconds12.getPeriodType();
        org.junit.Assert.assertNotNull(seconds0);
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertNotNull(seconds3);
        org.junit.Assert.assertNotNull(seconds7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(seconds10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(seconds12);
        org.junit.Assert.assertNotNull(periodType13);
    }

    @Test
    public void test5472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5472");
        java.util.Locale locale0 = java.util.Locale.JAPANESE;
        java.util.GregorianCalendar gregorianCalendar1 = new java.util.GregorianCalendar(locale0);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.Duration duration5 = new org.joda.time.Duration(readableInstant3, readableInstant4);
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.PeriodType periodType7 = null;
        org.joda.time.Period period8 = duration5.toPeriodTo(readableInstant6, periodType7);
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Duration duration11 = new org.joda.time.Duration(readableInstant9, readableInstant10);
        long long12 = duration11.getMillis();
        boolean boolean13 = duration5.isShorterThan((org.joda.time.ReadableDuration) duration11);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) 3, chronology15);
        org.joda.time.DateTime.Property property17 = dateTime16.dayOfYear();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateMidnight dateMidnight19 = new org.joda.time.DateMidnight((java.lang.Object) dateTime16, chronology18);
        org.joda.time.MutableDateTime mutableDateTime20 = dateTime16.toMutableDateTime();
        mutableDateTime20.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime20.dayOfWeek();
        org.joda.time.MutableDateTime.Property property24 = mutableDateTime20.year();
        org.joda.time.MutableDateTime.Property property25 = mutableDateTime20.weekyear();
        boolean boolean26 = duration5.equals((java.lang.Object) mutableDateTime20);
        mutableDateTime20.addMonths((int) ' ');
        mutableDateTime20.add((long) (byte) 10);
        org.joda.time.Period period31 = org.joda.time.Period.ZERO;
        org.joda.time.Period period32 = period31.normalizedStandard();
        org.joda.time.Period period34 = period31.plusHours(2);
        java.time.chrono.IsoEra isoEra35 = java.time.chrono.IsoEra.CE;
        boolean boolean36 = period34.equals((java.lang.Object) isoEra35);
        int int37 = period34.getMinutes();
        mutableDateTime20.add((org.joda.time.ReadablePeriod) period34);
        java.util.TimeZone timeZone40 = null;
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forTimeZone(timeZone40);
        org.joda.time.DateMidnight dateMidnight42 = new org.joda.time.DateMidnight((long) 1970, dateTimeZone41);
        long long45 = dateTimeZone41.convertLocalToUTC((long) 3, false);
        long long48 = dateTimeZone41.convertLocalToUTC(0L, true);
        mutableDateTime20.setZoneRetainFields(dateTimeZone41);
        java.lang.String str50 = dateTimeZone41.toString();
        org.joda.time.chrono.EthiopicChronology ethiopicChronology51 = org.joda.time.chrono.EthiopicChronology.getInstance(dateTimeZone41);
        org.joda.time.DateTimeField dateTimeField52 = ethiopicChronology51.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone53 = ethiopicChronology51.getZone();
        org.joda.time.DateTimeField dateTimeField54 = ethiopicChronology51.era();
        org.joda.time.DateTimeField dateTimeField55 = ethiopicChronology51.secondOfDay();
        org.joda.time.DateTimeField dateTimeField56 = ethiopicChronology51.minuteOfHour();
        org.joda.time.DurationField durationField57 = ethiopicChronology51.months();
        org.joda.time.DateMidnight dateMidnight58 = new org.joda.time.DateMidnight(1645401600000L, (org.joda.time.Chronology) ethiopicChronology51);
        org.joda.time.DateTimeField dateTimeField59 = ethiopicChronology51.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField60 = ethiopicChronology51.year();
        org.joda.time.DateTimeField dateTimeField61 = ethiopicChronology51.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField62 = ethiopicChronology51.yearOfCentury();
        boolean boolean63 = gregorianCalendar1.after((java.lang.Object) ethiopicChronology51);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ja");
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertTrue("'" + isoEra35 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra35.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 3L + "'", long45 == 3L);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "Etc/UTC" + "'", str50, "Etc/UTC");
        org.junit.Assert.assertNotNull(ethiopicChronology51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(durationField57);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
    }

    @Test
    public void test5473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5473");
        java.util.Map<java.lang.String, java.lang.String> strMap0 = java.time.ZoneId.SHORT_IDS;
        org.joda.time.Days days1 = org.joda.time.Days.ONE;
        org.joda.time.PeriodType periodType2 = days1.getPeriodType();
        java.lang.String str3 = strMap0.get((java.lang.Object) periodType2);
        java.util.function.DoubleUnaryOperator doubleUnaryOperator4 = java.util.function.DoubleUnaryOperator.identity();
        double double6 = doubleUnaryOperator4.applyAsDouble((double) (-1L));
        boolean boolean7 = strMap0.containsValue((java.lang.Object) (-1L));
        org.junit.Assert.assertNotNull(strMap0);
        org.junit.Assert.assertNotNull(days1);
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(doubleUnaryOperator4);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + (-1.0d) + "'", double6 == (-1.0d));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test5474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5474");
        org.joda.time.Period period0 = org.joda.time.Period.ZERO;
        org.joda.time.Period period1 = period0.normalizedStandard();
        org.joda.time.Period period3 = period0.plusHours(2);
        java.time.chrono.IsoEra isoEra4 = java.time.chrono.IsoEra.CE;
        boolean boolean5 = period3.equals((java.lang.Object) isoEra4);
        java.time.LocalTime localTime10 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime11 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime10);
        java.time.LocalTime localTime16 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime17 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime16);
        java.time.temporal.ChronoField chronoField18 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime20 = localTime16.with((java.time.temporal.TemporalField) chronoField18, (long) (short) 1);
        long long21 = localTime10.getLong((java.time.temporal.TemporalField) chronoField18);
        boolean boolean22 = isoEra4.isSupported((java.time.temporal.TemporalField) chronoField18);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery23 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period24 = isoEra4.query(periodTemporalQuery23);
        boolean boolean25 = period24.isNegative();
        java.time.Period period27 = period24.plusDays((long) ' ');
        boolean boolean28 = period24.isNegative();
        java.time.Period period30 = period24.minusYears((long) 10);
        org.joda.time.Period period31 = org.joda.time.Period.ZERO;
        org.joda.time.Period period32 = period31.normalizedStandard();
        org.joda.time.Period period34 = period31.plusHours(2);
        java.time.chrono.IsoEra isoEra35 = java.time.chrono.IsoEra.CE;
        boolean boolean36 = period34.equals((java.lang.Object) isoEra35);
        java.time.LocalTime localTime41 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime42 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime41);
        java.time.LocalTime localTime47 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime48 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime47);
        java.time.temporal.ChronoField chronoField49 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime51 = localTime47.with((java.time.temporal.TemporalField) chronoField49, (long) (short) 1);
        long long52 = localTime41.getLong((java.time.temporal.TemporalField) chronoField49);
        boolean boolean53 = isoEra35.isSupported((java.time.temporal.TemporalField) chronoField49);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery54 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period55 = isoEra35.query(periodTemporalQuery54);
        java.time.chrono.ChronoPeriod chronoPeriod56 = period30.minus((java.time.temporal.TemporalAmount) period55);
        java.time.chrono.ChronoPeriod chronoPeriod57 = period55.negated();
        org.junit.Assert.assertNotNull(period0);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertTrue("'" + isoEra4 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra4.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertTrue("'" + chronoField18 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField18.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 3601000000001L + "'", long21 == 3601000000001L);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(periodTemporalQuery23);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertTrue("'" + isoEra35 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra35.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(localTime41);
        org.junit.Assert.assertNotNull(localTime42);
        org.junit.Assert.assertNotNull(localTime47);
        org.junit.Assert.assertNotNull(localTime48);
        org.junit.Assert.assertTrue("'" + chronoField49 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField49.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime51);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 3601000000001L + "'", long52 == 3601000000001L);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(periodTemporalQuery54);
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertNotNull(chronoPeriod56);
        org.junit.Assert.assertNotNull(chronoPeriod57);
    }

    @Test
    public void test5475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5475");
        java.nio.LongBuffer longBuffer1 = java.nio.LongBuffer.allocate(32769);
        boolean boolean2 = longBuffer1.isDirect();
        java.nio.LongBuffer longBuffer3 = longBuffer1.compact();
        boolean boolean4 = longBuffer1.isDirect();
        java.nio.LongBuffer longBuffer6 = java.nio.LongBuffer.allocate((int) (short) 0);
        java.nio.Buffer buffer7 = longBuffer6.mark();
        java.time.LocalTime localTime12 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime13 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime12);
        java.time.temporal.ChronoField chronoField14 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime16 = localTime12.with((java.time.temporal.TemporalField) chronoField14, (long) (short) 1);
        java.time.Duration duration18 = java.time.Duration.ofMinutes((long) 3);
        java.time.LocalTime localTime19 = localTime12.minus((java.time.temporal.TemporalAmount) duration18);
        boolean boolean20 = longBuffer6.equals((java.lang.Object) localTime12);
        java.nio.LongBuffer longBuffer21 = longBuffer6.slice();
        boolean boolean22 = longBuffer6.hasArray();
        int int23 = longBuffer1.compareTo(longBuffer6);
        // The following exception was thrown during execution in test generation
        try {
            long long25 = longBuffer6.get((-1314000057));
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(longBuffer1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(longBuffer3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(longBuffer6);
        org.junit.Assert.assertNotNull(buffer7);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertTrue("'" + chronoField14 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField14.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(longBuffer21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
    }

    @Test
    public void test5476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5476");
        java.net.InetAddress inetAddress0 = java.net.InetAddress.getLocalHost();
        java.lang.String str1 = inetAddress0.toString();
        java.net.NetworkInterface networkInterface2 = java.net.NetworkInterface.getByInetAddress(inetAddress0);
        java.lang.String str3 = networkInterface2.toString();
        java.net.NetworkInterface networkInterface4 = networkInterface2.getParent();
        java.lang.String str5 = networkInterface2.toString();
        org.junit.Assert.assertNotNull(inetAddress0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "599b081c1808/172.17.0.2" + "'", str1, "599b081c1808/172.17.0.2");
        org.junit.Assert.assertNotNull(networkInterface2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "name:eth0 (eth0)" + "'", str3, "name:eth0 (eth0)");
        org.junit.Assert.assertNull(networkInterface4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "name:eth0 (eth0)" + "'", str5, "name:eth0 (eth0)");
    }

    @Test
    public void test5477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5477");
        java.util.stream.IntStream intStream1 = java.util.stream.IntStream.of(365);
        java.util.stream.LongStream longStream2 = intStream1.asLongStream();
        java.util.stream.LongStream longStream3 = longStream2.parallel();
        java.util.function.LongUnaryOperator longUnaryOperator4 = java.util.function.LongUnaryOperator.identity();
        java.util.function.LongUnaryOperator longUnaryOperator5 = java.util.function.LongUnaryOperator.identity();
        java.util.function.LongUnaryOperator longUnaryOperator6 = longUnaryOperator4.compose(longUnaryOperator5);
        java.util.function.LongUnaryOperator longUnaryOperator7 = java.util.function.LongUnaryOperator.identity();
        java.util.function.LongUnaryOperator longUnaryOperator8 = longUnaryOperator6.andThen(longUnaryOperator7);
        java.util.stream.LongStream longStream9 = longStream3.map(longUnaryOperator8);
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.LongStream longStream11 = longStream3.limit(1645436490000L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: stream has already been operated upon or closed");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intStream1);
        org.junit.Assert.assertNotNull(longStream2);
        org.junit.Assert.assertNotNull(longStream3);
        org.junit.Assert.assertNotNull(longUnaryOperator4);
        org.junit.Assert.assertNotNull(longUnaryOperator5);
        org.junit.Assert.assertNotNull(longUnaryOperator6);
        org.junit.Assert.assertNotNull(longUnaryOperator7);
        org.junit.Assert.assertNotNull(longUnaryOperator8);
        org.junit.Assert.assertNotNull(longStream9);
    }

    @Test
    public void test5478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5478");
        java.time.OffsetTime offsetTime0 = java.time.OffsetTime.MAX;
        java.time.LocalTime localTime1 = offsetTime0.toLocalTime();
        java.lang.String str2 = offsetTime0.toString();
        java.time.Duration duration3 = java.time.Duration.ZERO;
        java.lang.String str4 = duration3.toString();
        java.time.OffsetTime offsetTime5 = offsetTime0.plus((java.time.temporal.TemporalAmount) duration3);
        java.time.Duration duration7 = java.time.Duration.ofMinutes((long) 3);
        java.time.Duration duration8 = duration7.abs();
        java.time.Duration duration10 = duration8.minusSeconds((long) 1970);
        java.time.ZoneOffset zoneOffset14 = java.time.ZoneOffset.ofHoursMinutes(1, 10);
        java.time.LocalDate localDate15 = java.time.LocalDate.now((java.time.ZoneId) zoneOffset14);
        java.time.LocalDate localDate16 = java.time.LocalDate.now((java.time.ZoneId) zoneOffset14);
        java.time.OffsetDateTime offsetDateTime18 = java.time.OffsetDateTime.now();
        java.time.LocalDate localDate20 = java.time.LocalDate.ofEpochDay((long) ' ');
        int int21 = localDate20.getMonthValue();
        org.joda.time.Period period22 = org.joda.time.Period.ZERO;
        org.joda.time.Period period23 = period22.normalizedStandard();
        org.joda.time.Period period25 = period22.plusHours(2);
        java.time.chrono.IsoEra isoEra26 = java.time.chrono.IsoEra.CE;
        boolean boolean27 = period25.equals((java.lang.Object) isoEra26);
        java.time.LocalTime localTime32 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime33 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime32);
        java.time.LocalTime localTime38 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime39 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime38);
        java.time.temporal.ChronoField chronoField40 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime42 = localTime38.with((java.time.temporal.TemporalField) chronoField40, (long) (short) 1);
        long long43 = localTime32.getLong((java.time.temporal.TemporalField) chronoField40);
        boolean boolean44 = isoEra26.isSupported((java.time.temporal.TemporalField) chronoField40);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery45 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period46 = isoEra26.query(periodTemporalQuery45);
        boolean boolean47 = period46.isNegative();
        java.time.Period period49 = period46.plusDays((long) ' ');
        java.time.temporal.ChronoField chronoField50 = java.time.temporal.ChronoField.SECOND_OF_DAY;
        boolean boolean51 = period46.equals((java.lang.Object) chronoField50);
        boolean boolean52 = localDate20.isSupported((java.time.temporal.TemporalField) chronoField50);
        java.time.temporal.TemporalUnit temporalUnit53 = chronoField50.getRangeUnit();
        java.time.OffsetDateTime offsetDateTime54 = offsetDateTime18.truncatedTo(temporalUnit53);
        java.time.LocalDate localDate57 = java.time.LocalDate.ofEpochDay((long) ' ');
        int int58 = localDate57.getMonthValue();
        org.joda.time.Period period59 = org.joda.time.Period.ZERO;
        org.joda.time.Period period60 = period59.normalizedStandard();
        org.joda.time.Period period62 = period59.plusHours(2);
        java.time.chrono.IsoEra isoEra63 = java.time.chrono.IsoEra.CE;
        boolean boolean64 = period62.equals((java.lang.Object) isoEra63);
        java.time.LocalTime localTime69 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime70 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime69);
        java.time.LocalTime localTime75 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime76 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime75);
        java.time.temporal.ChronoField chronoField77 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime79 = localTime75.with((java.time.temporal.TemporalField) chronoField77, (long) (short) 1);
        long long80 = localTime69.getLong((java.time.temporal.TemporalField) chronoField77);
        boolean boolean81 = isoEra63.isSupported((java.time.temporal.TemporalField) chronoField77);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery82 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period83 = isoEra63.query(periodTemporalQuery82);
        boolean boolean84 = period83.isNegative();
        java.time.Period period86 = period83.plusDays((long) ' ');
        java.time.temporal.ChronoField chronoField87 = java.time.temporal.ChronoField.SECOND_OF_DAY;
        boolean boolean88 = period83.equals((java.lang.Object) chronoField87);
        boolean boolean89 = localDate57.isSupported((java.time.temporal.TemporalField) chronoField87);
        java.time.temporal.TemporalUnit temporalUnit90 = chronoField87.getRangeUnit();
        java.time.OffsetDateTime offsetDateTime91 = offsetDateTime54.minus(8L, temporalUnit90);
        java.time.LocalDate localDate92 = localDate16.minus((long) '4', temporalUnit90);
        java.time.Duration duration93 = duration10.minus(201327L, temporalUnit90);
        java.time.Duration duration95 = duration10.plusSeconds(8380800010L);
        java.time.OffsetTime offsetTime96 = offsetTime0.plus((java.time.temporal.TemporalAmount) duration95);
        org.junit.Assert.assertNotNull(offsetTime0);
        org.junit.Assert.assertNotNull(localTime1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "23:59:59.999999999-18:00" + "'", str2, "23:59:59.999999999-18:00");
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "PT0S" + "'", str4, "PT0S");
        org.junit.Assert.assertNotNull(offsetTime5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(zoneOffset14);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(offsetDateTime18);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertTrue("'" + isoEra26 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra26.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(localTime32);
        org.junit.Assert.assertNotNull(localTime33);
        org.junit.Assert.assertNotNull(localTime38);
        org.junit.Assert.assertNotNull(localTime39);
        org.junit.Assert.assertTrue("'" + chronoField40 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField40.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime42);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 3601000000001L + "'", long43 == 3601000000001L);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(periodTemporalQuery45);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(period49);
        org.junit.Assert.assertTrue("'" + chronoField50 + "' != '" + java.time.temporal.ChronoField.SECOND_OF_DAY + "'", chronoField50.equals(java.time.temporal.ChronoField.SECOND_OF_DAY));
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + temporalUnit53 + "' != '" + java.time.temporal.ChronoUnit.DAYS + "'", temporalUnit53.equals(java.time.temporal.ChronoUnit.DAYS));
        org.junit.Assert.assertNotNull(offsetDateTime54);
        org.junit.Assert.assertNotNull(localDate57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 2 + "'", int58 == 2);
        org.junit.Assert.assertNotNull(period59);
        org.junit.Assert.assertNotNull(period60);
        org.junit.Assert.assertNotNull(period62);
        org.junit.Assert.assertTrue("'" + isoEra63 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra63.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(localTime69);
        org.junit.Assert.assertNotNull(localTime70);
        org.junit.Assert.assertNotNull(localTime75);
        org.junit.Assert.assertNotNull(localTime76);
        org.junit.Assert.assertTrue("'" + chronoField77 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField77.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime79);
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 3601000000001L + "'", long80 == 3601000000001L);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(periodTemporalQuery82);
        org.junit.Assert.assertNotNull(period83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(period86);
        org.junit.Assert.assertTrue("'" + chronoField87 + "' != '" + java.time.temporal.ChronoField.SECOND_OF_DAY + "'", chronoField87.equals(java.time.temporal.ChronoField.SECOND_OF_DAY));
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertTrue("'" + temporalUnit90 + "' != '" + java.time.temporal.ChronoUnit.DAYS + "'", temporalUnit90.equals(java.time.temporal.ChronoUnit.DAYS));
        org.junit.Assert.assertNotNull(offsetDateTime91);
        org.junit.Assert.assertNotNull(localDate92);
        org.junit.Assert.assertNotNull(duration93);
        org.junit.Assert.assertNotNull(duration95);
        org.junit.Assert.assertNotNull(offsetTime96);
    }

    @Test
    public void test5479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5479");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        int int1 = localDate0.getCenturyOfEra();
        org.joda.time.LocalDate.Property property2 = localDate0.dayOfWeek();
        org.joda.time.LocalDate localDate4 = property2.addWrapFieldToCopy(2022);
        org.joda.time.LocalDate localDate5 = property2.withMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate.Property property7 = localDate5.property(dateTimeFieldType6);
        org.joda.time.LocalDate localDate9 = localDate5.minusYears(42);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 20 + "'", int1 == 20);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate9);
    }

    @Test
    public void test5480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5480");
        org.joda.time.Period period0 = org.joda.time.Period.ZERO;
        org.joda.time.Period period1 = period0.normalizedStandard();
        org.joda.time.Period period3 = period0.plusHours(2);
        java.time.chrono.IsoEra isoEra4 = java.time.chrono.IsoEra.CE;
        boolean boolean5 = period3.equals((java.lang.Object) isoEra4);
        java.time.LocalTime localTime10 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime11 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime10);
        java.time.LocalTime localTime16 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime17 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime16);
        java.time.temporal.ChronoField chronoField18 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime20 = localTime16.with((java.time.temporal.TemporalField) chronoField18, (long) (short) 1);
        long long21 = localTime10.getLong((java.time.temporal.TemporalField) chronoField18);
        boolean boolean22 = isoEra4.isSupported((java.time.temporal.TemporalField) chronoField18);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery23 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period24 = isoEra4.query(periodTemporalQuery23);
        boolean boolean25 = period24.isNegative();
        java.time.Period period27 = period24.plusDays((long) ' ');
        boolean boolean28 = period24.isNegative();
        java.time.Period period30 = period24.minusYears((long) 10);
        java.time.Period period32 = period24.minusYears((long) 366);
        // The following exception was thrown during execution in test generation
        try {
            java.time.chrono.ChronoPeriod chronoPeriod34 = period32.multipliedBy((-16000000));
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: integer overflow");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period0);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertTrue("'" + isoEra4 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra4.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertTrue("'" + chronoField18 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField18.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 3601000000001L + "'", long21 == 3601000000001L);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(periodTemporalQuery23);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(period32);
    }

    @Test
    public void test5481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5481");
        org.joda.time.TimeOfDay timeOfDay1 = org.joda.time.TimeOfDay.fromMillisOfDay((long) (short) 0);
        org.joda.time.TimeOfDay timeOfDay3 = org.joda.time.TimeOfDay.fromMillisOfDay((long) (short) 0);
        org.joda.time.Hours hours4 = org.joda.time.Hours.hoursBetween((org.joda.time.ReadablePartial) timeOfDay1, (org.joda.time.ReadablePartial) timeOfDay3);
        org.joda.time.DurationFieldType durationFieldType5 = org.joda.time.DurationFieldType.hours();
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay3.withFieldAdded(durationFieldType5, (int) (byte) 0);
        int int8 = timeOfDay3.getMillisOfSecond();
        org.joda.time.TimeOfDay timeOfDay10 = timeOfDay3.plusHours(9);
        org.joda.time.TimeOfDay.Property property11 = timeOfDay3.secondOfMinute();
        java.time.ZoneOffset zoneOffset14 = java.time.ZoneOffset.ofHoursMinutes(1, 10);
        java.time.LocalDate localDate15 = java.time.LocalDate.now((java.time.ZoneId) zoneOffset14);
        boolean boolean16 = property11.equals((java.lang.Object) localDate15);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = property11.getFieldType();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) 3, chronology19);
        org.joda.time.DateTime.Property property21 = dateTime20.dayOfYear();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateMidnight dateMidnight23 = new org.joda.time.DateMidnight((java.lang.Object) dateTime20, chronology22);
        org.joda.time.MutableDateTime mutableDateTime24 = dateTime20.toMutableDateTime();
        mutableDateTime24.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property27 = mutableDateTime24.dayOfWeek();
        org.joda.time.MutableDateTime.Property property28 = mutableDateTime24.year();
        java.util.TimeZone timeZone29 = null;
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forTimeZone(timeZone29);
        mutableDateTime24.setZone(dateTimeZone30);
        java.util.Locale locale33 = java.util.Locale.TAIWAN;
        java.lang.String str34 = dateTimeZone30.getShortName((long) 64, locale33);
        int int35 = property11.getMaximumTextLength(locale33);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str37 = locale33.getExtension(':');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed extension key: :");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeOfDay1);
        org.junit.Assert.assertNotNull(timeOfDay3);
        org.junit.Assert.assertNotNull(hours4);
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(zoneOffset14);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(mutableDateTime24);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "+00:00" + "'", str34, "+00:00");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2 + "'", int35 == 2);
    }

    @Test
    public void test5482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5482");
        java.time.format.DateTimeFormatter dateTimeFormatter0 = java.time.format.DateTimeFormatter.ISO_DATE;
        java.text.Format format1 = dateTimeFormatter0.toFormat();
        java.time.LocalDate localDate3 = java.time.LocalDate.ofEpochDay((long) ' ');
        java.time.OffsetTime offsetTime4 = java.time.OffsetTime.MAX;
        java.time.LocalTime localTime5 = offsetTime4.toLocalTime();
        java.lang.String str6 = offsetTime4.toString();
        java.time.Duration duration7 = java.time.Duration.ZERO;
        java.lang.String str8 = duration7.toString();
        java.time.OffsetTime offsetTime9 = offsetTime4.plus((java.time.temporal.TemporalAmount) duration7);
        java.time.LocalTime localTime10 = offsetTime4.toLocalTime();
        java.time.chrono.ChronoLocalDateTime<?> wildcardChronoLocalDateTime11 = localDate3.atTime(localTime10);
        java.time.LocalDate localDate13 = localDate3.minusWeeks((long) 2097);
        java.util.TimeZone timeZone15 = null;
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forTimeZone(timeZone15);
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight((long) 1970, dateTimeZone16);
        long long20 = dateTimeZone16.convertLocalToUTC((long) 3, false);
        long long23 = dateTimeZone16.convertLocalToUTC(0L, true);
        boolean boolean24 = localDate3.equals((java.lang.Object) true);
        int int25 = localDate3.lengthOfMonth();
        java.time.LocalDate localDate28 = java.time.LocalDate.ofEpochDay((long) ' ');
        int int29 = localDate28.getMonthValue();
        org.joda.time.Period period30 = org.joda.time.Period.ZERO;
        org.joda.time.Period period31 = period30.normalizedStandard();
        org.joda.time.Period period33 = period30.plusHours(2);
        java.time.chrono.IsoEra isoEra34 = java.time.chrono.IsoEra.CE;
        boolean boolean35 = period33.equals((java.lang.Object) isoEra34);
        java.time.LocalTime localTime40 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime41 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime40);
        java.time.LocalTime localTime46 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime47 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime46);
        java.time.temporal.ChronoField chronoField48 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime50 = localTime46.with((java.time.temporal.TemporalField) chronoField48, (long) (short) 1);
        long long51 = localTime40.getLong((java.time.temporal.TemporalField) chronoField48);
        boolean boolean52 = isoEra34.isSupported((java.time.temporal.TemporalField) chronoField48);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery53 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period54 = isoEra34.query(periodTemporalQuery53);
        boolean boolean55 = period54.isNegative();
        java.time.Period period57 = period54.plusDays((long) ' ');
        java.time.temporal.ChronoField chronoField58 = java.time.temporal.ChronoField.SECOND_OF_DAY;
        boolean boolean59 = period54.equals((java.lang.Object) chronoField58);
        boolean boolean60 = localDate28.isSupported((java.time.temporal.TemporalField) chronoField58);
        java.time.temporal.TemporalUnit temporalUnit61 = chronoField58.getRangeUnit();
        java.time.chrono.ChronoLocalDate chronoLocalDate62 = localDate3.minus((long) (-1), temporalUnit61);
        java.time.format.DateTimeFormatter dateTimeFormatter63 = java.time.format.DateTimeFormatter.ISO_DATE;
        java.lang.String str64 = dateTimeFormatter63.toString();
        java.time.LocalDateTime localDateTime65 = java.time.LocalDateTime.now();
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery66 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period67 = localDateTime65.query(periodTemporalQuery66);
        java.text.Format format68 = dateTimeFormatter63.toFormat(periodTemporalQuery66);
        java.time.Period period69 = chronoLocalDate62.query(periodTemporalQuery66);
        java.text.Format format70 = dateTimeFormatter0.toFormat(periodTemporalQuery66);
        float[] floatArray73 = new float[] { (-1L), (byte) -1 };
        java.nio.FloatBuffer floatBuffer74 = java.nio.FloatBuffer.wrap(floatArray73);
        java.nio.FloatBuffer floatBuffer75 = floatBuffer74.compact();
        java.nio.FloatBuffer floatBuffer76 = floatBuffer74.asReadOnlyBuffer();
        java.nio.ByteOrder byteOrder77 = floatBuffer74.order();
        java.nio.Buffer buffer78 = floatBuffer74.clear();
        float[] floatArray81 = new float[] { (-1L), (byte) -1 };
        java.nio.FloatBuffer floatBuffer82 = java.nio.FloatBuffer.wrap(floatArray81);
        java.nio.FloatBuffer floatBuffer83 = floatBuffer74.get(floatArray81);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str84 = format70.format((java.lang.Object) floatBuffer83);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Format target must implement TemporalAccessor");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatter0);
        org.junit.Assert.assertNotNull(format1);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(offsetTime4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "23:59:59.999999999-18:00" + "'", str6, "23:59:59.999999999-18:00");
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "PT0S" + "'", str8, "PT0S");
        org.junit.Assert.assertNotNull(offsetTime9);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(wildcardChronoLocalDateTime11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 3L + "'", long20 == 3L);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 28 + "'", int25 == 28);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2 + "'", int29 == 2);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertTrue("'" + isoEra34 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra34.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(localTime40);
        org.junit.Assert.assertNotNull(localTime41);
        org.junit.Assert.assertNotNull(localTime46);
        org.junit.Assert.assertNotNull(localTime47);
        org.junit.Assert.assertTrue("'" + chronoField48 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField48.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime50);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 3601000000001L + "'", long51 == 3601000000001L);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(periodTemporalQuery53);
        org.junit.Assert.assertNotNull(period54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertTrue("'" + chronoField58 + "' != '" + java.time.temporal.ChronoField.SECOND_OF_DAY + "'", chronoField58.equals(java.time.temporal.ChronoField.SECOND_OF_DAY));
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + temporalUnit61 + "' != '" + java.time.temporal.ChronoUnit.DAYS + "'", temporalUnit61.equals(java.time.temporal.ChronoUnit.DAYS));
        org.junit.Assert.assertNotNull(chronoLocalDate62);
        org.junit.Assert.assertNotNull(dateTimeFormatter63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "ParseCaseSensitive(false)(Value(Year,4,10,EXCEEDS_PAD)'-'Value(MonthOfYear,2)'-'Value(DayOfMonth,2))[Offset(+HH:MM:ss,'Z')]" + "'", str64, "ParseCaseSensitive(false)(Value(Year,4,10,EXCEEDS_PAD)'-'Value(MonthOfYear,2)'-'Value(DayOfMonth,2))[Offset(+HH:MM:ss,'Z')]");
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertNotNull(periodTemporalQuery66);
        org.junit.Assert.assertNotNull(period67);
        org.junit.Assert.assertNotNull(format68);
        org.junit.Assert.assertNotNull(period69);
        org.junit.Assert.assertNotNull(format70);
        org.junit.Assert.assertNotNull(floatArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray73), "[-1.0, -1.0]");
        org.junit.Assert.assertNotNull(floatBuffer74);
        org.junit.Assert.assertNotNull(floatBuffer75);
        org.junit.Assert.assertNotNull(floatBuffer76);
        org.junit.Assert.assertNotNull(byteOrder77);
        org.junit.Assert.assertNotNull(buffer78);
        org.junit.Assert.assertNotNull(floatArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray81), "[-1.0, -1.0]");
        org.junit.Assert.assertNotNull(floatBuffer82);
        org.junit.Assert.assertNotNull(floatBuffer83);
    }

    @Test
    public void test5483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5483");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 3, chronology1);
        org.joda.time.DateTime.Property property3 = dateTime2.dayOfYear();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateMidnight dateMidnight5 = new org.joda.time.DateMidnight((java.lang.Object) dateTime2, chronology4);
        org.joda.time.MutableDateTime mutableDateTime6 = dateTime2.toMutableDateTime();
        org.joda.time.Days days7 = org.joda.time.Days.ONE;
        org.joda.time.MutableInterval mutableInterval8 = new org.joda.time.MutableInterval((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadablePeriod) days7);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) 3, chronology10);
        org.joda.time.DateTime.Property property12 = dateTime11.dayOfYear();
        org.joda.time.Interval interval13 = property12.toInterval();
        mutableInterval8.setInterval((org.joda.time.ReadableInterval) interval13);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) 3, chronology16);
        org.joda.time.DateTime.Property property18 = dateTime17.dayOfYear();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateMidnight dateMidnight20 = new org.joda.time.DateMidnight((java.lang.Object) dateTime17, chronology19);
        org.joda.time.DateMidnight dateMidnight22 = dateMidnight20.minusMonths((-1));
        boolean boolean23 = interval13.isAfter((org.joda.time.ReadableInstant) dateMidnight20);
        int int24 = dateMidnight20.getYearOfEra();
        org.joda.time.DateMidnight dateMidnight26 = dateMidnight20.plusDays(353);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((long) 3, chronology28);
        org.joda.time.DateTime.Property property30 = dateTime29.dayOfYear();
        org.joda.time.Interval interval31 = property30.toInterval();
        org.joda.time.DateTimeField dateTimeField32 = property30.getField();
        org.joda.time.DateTime dateTime34 = property30.addToCopy((long) (byte) 1);
        org.joda.time.DateTime dateTime36 = dateTime34.withYear(4);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime((long) 3, chronology38);
        org.joda.time.Period period40 = org.joda.time.Period.ZERO;
        org.joda.time.Period period41 = period40.normalizedStandard();
        org.joda.time.Period period43 = period41.minusMinutes((int) ' ');
        org.joda.time.Period period45 = period43.minusMonths((int) (byte) 0);
        org.joda.time.PeriodType periodType46 = period45.getPeriodType();
        org.joda.time.DateTime dateTime47 = dateTime39.minus((org.joda.time.ReadablePeriod) period45);
        org.joda.time.Duration duration48 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime36, (org.joda.time.ReadableInstant) dateTime47);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.LocalTime localTime51 = new org.joda.time.LocalTime((long) 0, chronology50);
        org.joda.time.Chronology chronology52 = localTime51.getChronology();
        org.joda.time.DateTimeField dateTimeField53 = chronology52.weekyearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime54 = org.joda.time.MutableDateTime.now(chronology52);
        mutableDateTime54.setWeekOfWeekyear((int) '#');
        mutableDateTime54.addHours(0);
        boolean boolean59 = dateTime47.isBefore((org.joda.time.ReadableInstant) mutableDateTime54);
        boolean boolean60 = dateMidnight20.isAfter((org.joda.time.ReadableInstant) dateTime47);
        boolean boolean62 = dateTime47.isAfter((long) (short) 10);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(days7);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1970 + "'", int24 == 1970);
        org.junit.Assert.assertNotNull(dateMidnight26);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertNotNull(periodType46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(mutableDateTime54);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
    }

    @Test
    public void test5484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5484");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        mutableDateTime0.addMonths(0);
        mutableDateTime0.addMonths(88);
    }

    @Test
    public void test5485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5485");
        org.joda.time.PeriodType periodType1 = org.joda.time.PeriodType.time();
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod((long) 'a', periodType1);
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod(periodType1);
        org.joda.time.DurationFieldType durationFieldType4 = null;
        // The following exception was thrown during execution in test generation
        try {
            mutablePeriod3.set(durationFieldType4, 49);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'null'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType1);
    }

    @Test
    public void test5486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5486");
        short[] shortArray2 = new short[] { (short) 1, (byte) 10 };
        java.nio.ShortBuffer shortBuffer3 = java.nio.ShortBuffer.wrap(shortArray2);
        short[] shortArray6 = new short[] { (short) 1, (byte) 10 };
        java.nio.ShortBuffer shortBuffer7 = java.nio.ShortBuffer.wrap(shortArray6);
        java.nio.ShortBuffer shortBuffer8 = shortBuffer3.put(shortBuffer7);
        int int9 = shortBuffer8.limit();
        java.nio.ShortBuffer shortBuffer10 = shortBuffer8.asReadOnlyBuffer();
        short[] shortArray11 = shortBuffer8.array();
        short[] shortArray12 = shortBuffer8.array();
        // The following exception was thrown during execution in test generation
        try {
            java.nio.ShortBuffer shortBuffer15 = shortBuffer8.put(2098, (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: null");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(shortArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray2), "[1, 10]");
        org.junit.Assert.assertNotNull(shortBuffer3);
        org.junit.Assert.assertNotNull(shortArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray6), "[1, 10]");
        org.junit.Assert.assertNotNull(shortBuffer7);
        org.junit.Assert.assertNotNull(shortBuffer8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
        org.junit.Assert.assertNotNull(shortBuffer10);
        org.junit.Assert.assertNotNull(shortArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray11), "[1, 10]");
        org.junit.Assert.assertNotNull(shortArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray12), "[1, 10]");
    }

    @Test
    public void test5487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5487");
        java.util.Comparator<java.time.LocalTime> localTimeComparator0 = java.util.Comparator.naturalOrder();
        org.junit.Assert.assertNotNull(localTimeComparator0);
    }

    @Test
    public void test5488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5488");
        org.joda.time.TimeOfDay timeOfDay1 = org.joda.time.TimeOfDay.fromMillisOfDay((long) (short) 0);
        org.joda.time.TimeOfDay timeOfDay3 = org.joda.time.TimeOfDay.fromMillisOfDay((long) (short) 0);
        org.joda.time.Hours hours4 = org.joda.time.Hours.hoursBetween((org.joda.time.ReadablePartial) timeOfDay1, (org.joda.time.ReadablePartial) timeOfDay3);
        org.joda.time.DurationFieldType durationFieldType5 = org.joda.time.DurationFieldType.hours();
        org.joda.time.TimeOfDay timeOfDay7 = timeOfDay3.withFieldAdded(durationFieldType5, (int) (byte) 0);
        int int8 = timeOfDay3.getMillisOfSecond();
        org.joda.time.TimeOfDay timeOfDay10 = timeOfDay3.plusHours(9);
        org.joda.time.TimeOfDay.Property property11 = timeOfDay3.secondOfMinute();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) 3, chronology13);
        org.joda.time.DateTime.Property property15 = dateTime14.dayOfYear();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateMidnight dateMidnight17 = new org.joda.time.DateMidnight((java.lang.Object) dateTime14, chronology16);
        org.joda.time.MutableDateTime mutableDateTime18 = dateTime14.toMutableDateTime();
        mutableDateTime18.addYears((int) (short) 100);
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime18.millisOfDay();
        org.joda.time.PeriodType periodType22 = org.joda.time.PeriodType.years();
        org.joda.time.DurationFieldType durationFieldType23 = org.joda.time.DurationFieldType.halfdays();
        int int24 = periodType22.indexOf(durationFieldType23);
        mutableDateTime18.add(durationFieldType23, (int) 'a');
        java.util.TimeZone timeZone28 = null;
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forTimeZone(timeZone28);
        org.joda.time.DateMidnight dateMidnight30 = new org.joda.time.DateMidnight((long) 1970, dateTimeZone29);
        mutableDateTime18.setTime((org.joda.time.ReadableInstant) dateMidnight30);
        int int32 = property11.compareTo((org.joda.time.ReadableInstant) dateMidnight30);
        java.lang.String str33 = property11.getName();
        java.lang.String str34 = property11.toString();
        int int35 = property11.getMinimumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = property11.getFieldType();
        org.junit.Assert.assertNotNull(timeOfDay1);
        org.junit.Assert.assertNotNull(timeOfDay3);
        org.junit.Assert.assertNotNull(hours4);
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertNotNull(timeOfDay7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(timeOfDay10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertNotNull(durationFieldType23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "secondOfMinute" + "'", str33, "secondOfMinute");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Property[secondOfMinute]" + "'", str34, "Property[secondOfMinute]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
    }

    @Test
    public void test5489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5489");
        org.joda.time.MutablePeriod mutablePeriod0 = new org.joda.time.MutablePeriod();
        mutablePeriod0.setPeriod(12, 9, 2022, 34, (int) (short) 0, (int) (short) 1, 4096, 1);
        org.joda.time.MutablePeriod mutablePeriod10 = mutablePeriod0.copy();
        mutablePeriod10.addYears((int) (byte) 1);
        org.junit.Assert.assertNotNull(mutablePeriod10);
    }

    @Test
    public void test5490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5490");
        java.nio.LongBuffer longBuffer1 = java.nio.LongBuffer.allocate(32769);
        boolean boolean2 = longBuffer1.isDirect();
        java.nio.LongBuffer longBuffer3 = longBuffer1.compact();
        boolean boolean4 = longBuffer1.isDirect();
        // The following exception was thrown during execution in test generation
        try {
            java.nio.Buffer buffer5 = longBuffer1.reset();
            org.junit.Assert.fail("Expected exception of type java.nio.InvalidMarkException; message: null");
        } catch (java.nio.InvalidMarkException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(longBuffer1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(longBuffer3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test5491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5491");
        java.util.Set<java.lang.String> strSet0 = java.time.ZoneId.getAvailableZoneIds();
        java.util.stream.Stream<java.lang.String> strStream1 = strSet0.parallelStream();
        java.lang.Object[] objArray2 = strSet0.toArray();
        java.util.Spliterator<java.lang.String> strSpliterator3 = strSet0.spliterator();
        java.util.Set<java.lang.String> strSet4 = java.time.ZoneId.getAvailableZoneIds();
        java.util.stream.Stream<java.lang.String> strStream5 = strSet4.parallelStream();
        boolean boolean7 = strSet4.remove((java.lang.Object) 0);
        java.time.LocalTime localTime12 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime13 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime12);
        java.time.LocalTime localTime18 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime19 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime18);
        java.time.temporal.ChronoField chronoField20 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime22 = localTime18.with((java.time.temporal.TemporalField) chronoField20, (long) (short) 1);
        long long23 = localTime12.getLong((java.time.temporal.TemporalField) chronoField20);
        java.time.LocalTime localTime25 = localTime12.withSecond((int) (short) 1);
        java.time.temporal.ChronoField chronoField26 = java.time.temporal.ChronoField.SECOND_OF_DAY;
        java.time.temporal.ValueRange valueRange27 = localTime25.range((java.time.temporal.TemporalField) chronoField26);
        boolean boolean28 = strSet4.remove((java.lang.Object) chronoField26);
        boolean boolean29 = strSet0.retainAll((java.util.Collection<java.lang.String>) strSet4);
        java.util.Spliterator<java.lang.String> strSpliterator30 = strSet0.spliterator();
        boolean boolean32 = strSpliterator30.hasCharacteristics(508);
        boolean boolean34 = strSpliterator30.hasCharacteristics(57);
        org.junit.Assert.assertNotNull(strSet0);
        org.junit.Assert.assertNotNull(strStream1);
        org.junit.Assert.assertNotNull(objArray2);
        org.junit.Assert.assertNotNull(strSpliterator3);
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNotNull(strStream5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertTrue("'" + chronoField20 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField20.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 3601000000001L + "'", long23 == 3601000000001L);
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertTrue("'" + chronoField26 + "' != '" + java.time.temporal.ChronoField.SECOND_OF_DAY + "'", chronoField26.equals(java.time.temporal.ChronoField.SECOND_OF_DAY));
        org.junit.Assert.assertNotNull(valueRange27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(strSpliterator30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test5492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5492");
        java.util.Date date1 = new java.util.Date(6603384152663167654L);
        java.lang.String str2 = date1.toLocaleString();
        org.junit.Assert.assertEquals(date1.toString(), "Fri Sep 03 11:46:07 UTC 209254883");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "209254883-9-3 11:46:07" + "'", str2, "209254883-9-3 11:46:07");
    }

    @Test
    public void test5493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5493");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder4 = builder0.setDate(0, 0, (int) (byte) 100);
        java.util.Calendar.Builder builder8 = builder0.setDate((int) (byte) 10, 57, 0);
        java.util.Calendar calendar9 = builder0.build();
        long long10 = calendar9.getTimeInMillis();
        org.joda.time.LocalDate localDate11 = org.joda.time.LocalDate.fromCalendarFields(calendar9);
        java.lang.String str12 = calendar9.toString();
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(calendar9);
// flaky:         org.junit.Assert.assertEquals(calendar9.toString(), "java.util.GregorianCalendar[time=-61702041600035,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=35,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=14,MONTH=8,WEEK_OF_YEAR=39,WEEK_OF_MONTH=4,DAY_OF_MONTH=30,DAY_OF_YEAR=273,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=35,DST_OFFSET=0]");
// flaky:         org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-61702041600035L) + "'", long10 == (-61702041600035L));
        org.junit.Assert.assertNotNull(localDate11);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "java.util.GregorianCalendar[time=-61702041600035,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=35,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=14,MONTH=8,WEEK_OF_YEAR=39,WEEK_OF_MONTH=4,DAY_OF_MONTH=30,DAY_OF_YEAR=273,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=35,DST_OFFSET=0]" + "'", str12, "java.util.GregorianCalendar[time=-61702041600035,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"Etc/UTC\",offset=35,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=14,MONTH=8,WEEK_OF_YEAR=39,WEEK_OF_MONTH=4,DAY_OF_MONTH=30,DAY_OF_YEAR=273,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=5,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=35,DST_OFFSET=0]");
    }

    @Test
    public void test5494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5494");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.now();
        java.time.LocalDateTime localDateTime2 = localDateTime0.minusYears((long) (byte) 10);
        int int3 = localDateTime0.getHour();
        java.time.LocalDateTime localDateTime5 = localDateTime0.plusWeeks((long) 5);
        java.time.Instant instant6 = java.time.Instant.now();
        java.time.Instant instant7 = java.time.Instant.now();
        boolean boolean8 = instant6.isAfter(instant7);
        java.time.LocalDate localDate10 = java.time.LocalDate.ofEpochDay((long) ' ');
        int int11 = localDate10.getMonthValue();
        org.joda.time.Period period12 = org.joda.time.Period.ZERO;
        org.joda.time.Period period13 = period12.normalizedStandard();
        org.joda.time.Period period15 = period12.plusHours(2);
        java.time.chrono.IsoEra isoEra16 = java.time.chrono.IsoEra.CE;
        boolean boolean17 = period15.equals((java.lang.Object) isoEra16);
        java.time.LocalTime localTime22 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime23 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime22);
        java.time.LocalTime localTime28 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime29 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime28);
        java.time.temporal.ChronoField chronoField30 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime32 = localTime28.with((java.time.temporal.TemporalField) chronoField30, (long) (short) 1);
        long long33 = localTime22.getLong((java.time.temporal.TemporalField) chronoField30);
        boolean boolean34 = isoEra16.isSupported((java.time.temporal.TemporalField) chronoField30);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery35 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period36 = isoEra16.query(periodTemporalQuery35);
        boolean boolean37 = period36.isNegative();
        java.time.Period period39 = period36.plusDays((long) ' ');
        java.time.temporal.ChronoField chronoField40 = java.time.temporal.ChronoField.SECOND_OF_DAY;
        boolean boolean41 = period36.equals((java.lang.Object) chronoField40);
        boolean boolean42 = localDate10.isSupported((java.time.temporal.TemporalField) chronoField40);
        java.time.temporal.TemporalUnit temporalUnit43 = chronoField40.getRangeUnit();
        java.time.Instant instant44 = instant7.truncatedTo(temporalUnit43);
        java.time.ZoneOffset zoneOffset47 = java.time.ZoneOffset.ofHoursMinutes(1, 10);
        java.time.LocalDate localDate48 = java.time.LocalDate.now((java.time.ZoneId) zoneOffset47);
        java.time.ZonedDateTime zonedDateTime49 = java.time.ZonedDateTime.ofInstant(instant44, (java.time.ZoneId) zoneOffset47);
        java.time.ZoneOffset zoneOffset52 = java.time.ZoneOffset.ofHoursMinutes(1, 10);
        java.time.LocalDate localDate53 = java.time.LocalDate.now((java.time.ZoneId) zoneOffset52);
        java.time.Clock clock54 = java.time.Clock.system((java.time.ZoneId) zoneOffset52);
        java.time.Clock clock55 = java.time.Clock.tickSeconds((java.time.ZoneId) zoneOffset52);
        java.time.zone.ZoneRules zoneRules56 = zoneOffset52.getRules();
        java.time.ZonedDateTime zonedDateTime57 = java.time.ZonedDateTime.ofLocal(localDateTime5, (java.time.ZoneId) zoneOffset47, zoneOffset52);
        java.time.LocalDateTime localDateTime59 = localDateTime5.plusDays(1870L);
        java.time.LocalDateTime localDateTime61 = localDateTime5.plusMinutes(6552109211L);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 9 + "'", int3 == 9);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(instant6);
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertTrue("'" + isoEra16 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra16.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertNotNull(localTime28);
        org.junit.Assert.assertNotNull(localTime29);
        org.junit.Assert.assertTrue("'" + chronoField30 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField30.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime32);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 3601000000001L + "'", long33 == 3601000000001L);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(periodTemporalQuery35);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertTrue("'" + chronoField40 + "' != '" + java.time.temporal.ChronoField.SECOND_OF_DAY + "'", chronoField40.equals(java.time.temporal.ChronoField.SECOND_OF_DAY));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + temporalUnit43 + "' != '" + java.time.temporal.ChronoUnit.DAYS + "'", temporalUnit43.equals(java.time.temporal.ChronoUnit.DAYS));
        org.junit.Assert.assertNotNull(instant44);
        org.junit.Assert.assertNotNull(zoneOffset47);
        org.junit.Assert.assertNotNull(localDate48);
        org.junit.Assert.assertNotNull(zonedDateTime49);
        org.junit.Assert.assertNotNull(zoneOffset52);
        org.junit.Assert.assertNotNull(localDate53);
        org.junit.Assert.assertNotNull(clock54);
        org.junit.Assert.assertNotNull(clock55);
        org.junit.Assert.assertNotNull(zoneRules56);
        org.junit.Assert.assertNotNull(zonedDateTime57);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(localDateTime61);
    }

    @Test
    public void test5495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5495");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.Interval interval1 = localDate0.toInterval();
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = null;
        boolean boolean3 = localDate0.isSupported(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(interval1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test5496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5496");
        java.time.LocalDateTime localDateTime0 = java.time.LocalDateTime.now();
        java.time.temporal.ChronoField chronoField1 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime3 = localDateTime0.with((java.time.temporal.TemporalField) chronoField1, (long) 10);
        java.time.LocalDateTime localDateTime5 = localDateTime0.withDayOfYear((int) '/');
        java.time.LocalDateTime localDateTime6 = java.time.LocalDateTime.now();
        java.time.temporal.ChronoField chronoField7 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime9 = localDateTime6.with((java.time.temporal.TemporalField) chronoField7, (long) 10);
        java.time.LocalDateTime localDateTime11 = localDateTime6.minusMinutes((long) 12);
        java.time.LocalDateTime localDateTime12 = java.time.LocalDateTime.now();
        java.time.temporal.ChronoField chronoField13 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime15 = localDateTime12.with((java.time.temporal.TemporalField) chronoField13, (long) 10);
        java.time.Duration duration17 = java.time.Duration.ofSeconds((long) 0);
        java.time.temporal.Temporal temporal18 = localDateTime12.minus((java.time.temporal.TemporalAmount) duration17);
        boolean boolean19 = localDateTime6.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime12);
        int int20 = localDateTime12.getMonthValue();
        org.joda.time.Period period21 = org.joda.time.Period.ZERO;
        org.joda.time.Period period22 = period21.normalizedStandard();
        org.joda.time.Period period24 = period21.plusHours(2);
        java.time.chrono.IsoEra isoEra25 = java.time.chrono.IsoEra.CE;
        boolean boolean26 = period24.equals((java.lang.Object) isoEra25);
        java.time.LocalTime localTime31 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime32 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime31);
        java.time.LocalTime localTime37 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime38 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime37);
        java.time.temporal.ChronoField chronoField39 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime41 = localTime37.with((java.time.temporal.TemporalField) chronoField39, (long) (short) 1);
        long long42 = localTime31.getLong((java.time.temporal.TemporalField) chronoField39);
        boolean boolean43 = isoEra25.isSupported((java.time.temporal.TemporalField) chronoField39);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery44 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period45 = isoEra25.query(periodTemporalQuery44);
        boolean boolean46 = period45.isNegative();
        java.time.Period period48 = period45.plusDays((long) ' ');
        boolean boolean49 = period45.isNegative();
        java.time.Period period51 = period45.minusYears((long) 10);
        org.joda.time.Period period52 = org.joda.time.Period.ZERO;
        org.joda.time.Period period53 = period52.normalizedStandard();
        org.joda.time.Period period55 = period52.plusHours(2);
        java.time.chrono.IsoEra isoEra56 = java.time.chrono.IsoEra.CE;
        boolean boolean57 = period55.equals((java.lang.Object) isoEra56);
        java.time.LocalTime localTime62 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime63 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime62);
        java.time.LocalTime localTime68 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime69 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime68);
        java.time.temporal.ChronoField chronoField70 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime72 = localTime68.with((java.time.temporal.TemporalField) chronoField70, (long) (short) 1);
        long long73 = localTime62.getLong((java.time.temporal.TemporalField) chronoField70);
        boolean boolean74 = isoEra56.isSupported((java.time.temporal.TemporalField) chronoField70);
        java.time.temporal.TemporalQuery<java.time.Period> periodTemporalQuery75 = java.time.format.DateTimeFormatter.parsedExcessDays();
        java.time.Period period76 = isoEra56.query(periodTemporalQuery75);
        java.time.chrono.ChronoPeriod chronoPeriod77 = period51.minus((java.time.temporal.TemporalAmount) period76);
        java.time.chrono.ChronoPeriod chronoPeriod79 = period51.multipliedBy(4096);
        int int80 = period51.getMonths();
        java.time.chrono.IsoChronology isoChronology81 = period51.getChronology();
        java.time.LocalDateTime localDateTime82 = java.time.LocalDateTime.now();
        java.time.temporal.ChronoField chronoField83 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.chrono.ChronoLocalDateTime<java.time.LocalDate> localDateChronoLocalDateTime85 = localDateTime82.with((java.time.temporal.TemporalField) chronoField83, (long) 10);
        java.time.temporal.ValueRange valueRange86 = isoChronology81.range(chronoField83);
        boolean boolean87 = localDateTime12.isSupported((java.time.temporal.TemporalField) chronoField83);
        boolean boolean88 = localDateTime5.isEqual((java.time.chrono.ChronoLocalDateTime<java.time.LocalDate>) localDateTime12);
        // The following exception was thrown during execution in test generation
        try {
            java.time.LocalDateTime localDateTime90 = localDateTime5.withDayOfYear(679);
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid value for DayOfYear (valid values 1 - 365/366): 679");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertTrue("'" + chronoField1 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField1.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertTrue("'" + chronoField7 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField7.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + chronoField13 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField13.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime15);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(temporal18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertTrue("'" + isoEra25 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra25.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(localTime31);
        org.junit.Assert.assertNotNull(localTime32);
        org.junit.Assert.assertNotNull(localTime37);
        org.junit.Assert.assertNotNull(localTime38);
        org.junit.Assert.assertTrue("'" + chronoField39 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField39.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime41);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 3601000000001L + "'", long42 == 3601000000001L);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(periodTemporalQuery44);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertTrue("'" + isoEra56 + "' != '" + java.time.chrono.IsoEra.CE + "'", isoEra56.equals(java.time.chrono.IsoEra.CE));
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(localTime62);
        org.junit.Assert.assertNotNull(localTime63);
        org.junit.Assert.assertNotNull(localTime68);
        org.junit.Assert.assertNotNull(localTime69);
        org.junit.Assert.assertTrue("'" + chronoField70 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField70.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime72);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 3601000000001L + "'", long73 == 3601000000001L);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(periodTemporalQuery75);
        org.junit.Assert.assertNotNull(period76);
        org.junit.Assert.assertNotNull(chronoPeriod77);
        org.junit.Assert.assertNotNull(chronoPeriod79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 0 + "'", int80 == 0);
        org.junit.Assert.assertNotNull(isoChronology81);
        org.junit.Assert.assertNotNull(localDateTime82);
        org.junit.Assert.assertTrue("'" + chronoField83 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField83.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localDateChronoLocalDateTime85);
        org.junit.Assert.assertNotNull(valueRange86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test5497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5497");
        java.util.Properties properties0 = null;
        java.util.Properties properties1 = new java.util.Properties(properties0);
        java.time.LocalTime localTime6 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime7 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime6);
        java.time.LocalTime localTime12 = java.time.LocalTime.of((int) (short) 1, (int) (short) 0, 1, (int) (short) 1);
        java.time.LocalTime localTime13 = java.time.LocalTime.from((java.time.temporal.TemporalAccessor) localTime12);
        java.time.temporal.ChronoField chronoField14 = java.time.temporal.ChronoField.NANO_OF_DAY;
        java.time.LocalTime localTime16 = localTime12.with((java.time.temporal.TemporalField) chronoField14, (long) (short) 1);
        long long17 = localTime6.getLong((java.time.temporal.TemporalField) chronoField14);
        java.time.LocalTime localTime19 = localTime6.withSecond((int) (short) 1);
        java.lang.Object obj21 = properties1.put((java.lang.Object) localTime19, (java.lang.Object) "117");
        boolean boolean23 = properties1.containsValue((java.lang.Object) 6);
        java.time.LocalDate localDate26 = java.time.LocalDate.ofEpochDay((long) ' ');
        int int27 = localDate26.getMonthValue();
        java.lang.Object obj28 = properties1.replace((java.lang.Object) 21, (java.lang.Object) localDate26);
        java.util.Collection<java.lang.Object> objCollection29 = properties1.values();
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertTrue("'" + chronoField14 + "' != '" + java.time.temporal.ChronoField.NANO_OF_DAY + "'", chronoField14.equals(java.time.temporal.ChronoField.NANO_OF_DAY));
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 3601000000001L + "'", long17 == 3601000000001L);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertNull(obj21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2 + "'", int27 == 2);
        org.junit.Assert.assertNull(obj28);
        org.junit.Assert.assertNotNull(objCollection29);
    }

    @Test
    public void test5498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5498");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((long) 0, chronology1);
        org.joda.time.Chronology chronology3 = localTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField4 = chronology3.weekyearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime5 = org.joda.time.MutableDateTime.now(chronology3);
        mutableDateTime5.setWeekOfWeekyear((int) '#');
        mutableDateTime5.addHours(0);
        int int10 = mutableDateTime5.getMillisOfDay();
        mutableDateTime5.setWeekyear((-100));
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 34929155 + "'", int10 == 34929155);
    }

    @Test
    public void test5499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5499");
        java.net.FileNameMap fileNameMap0 = java.net.URLConnection.getFileNameMap();
        java.lang.String str2 = fileNameMap0.getContentTypeFor("");
        java.lang.String str4 = fileNameMap0.getContentTypeFor("+09:00");
        org.joda.time.Minutes minutes5 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes7 = minutes5.minus(12);
        org.joda.time.Minutes minutes8 = org.joda.time.Minutes.MAX_VALUE;
        org.joda.time.Minutes minutes10 = minutes8.minus(12);
        org.joda.time.Minutes minutes11 = minutes5.minus(minutes8);
        org.joda.time.PeriodType periodType12 = minutes11.getPeriodType();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period13 = new org.joda.time.Period((java.lang.Object) fileNameMap0, periodType12);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: java.net.URLConnection$1");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(fileNameMap0);
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(minutes5);
        org.junit.Assert.assertNotNull(minutes7);
        org.junit.Assert.assertNotNull(minutes8);
        org.junit.Assert.assertNotNull(minutes10);
        org.junit.Assert.assertNotNull(minutes11);
        org.junit.Assert.assertNotNull(periodType12);
    }

    @Test
    public void test5500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test5500");
        java.util.stream.DoubleStream doubleStream0 = java.util.stream.DoubleStream.empty();
        java.util.OptionalDouble optionalDouble1 = doubleStream0.findFirst();
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.DoubleStream doubleStream3 = doubleStream0.limit(0L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: stream has already been operated upon or closed");
        } catch (java.lang.IllegalStateException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleStream0);
        org.junit.Assert.assertNotNull(optionalDouble1);
    }
}

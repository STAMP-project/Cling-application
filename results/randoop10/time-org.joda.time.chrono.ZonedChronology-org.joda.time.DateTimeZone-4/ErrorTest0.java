import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class ErrorTest0 {

    public static boolean debug = false;

    @Test
    public void test0001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0001");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Instant instant2 = dateTime1.toInstant();
        org.joda.time.Chronology chronology3 = dateTime1.getChronology();
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((long) 2, chronology3);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and instant2", (dateTime1.compareTo(instant2) == 0) == dateTime1.equals(instant2));
    }

    @Test
    public void test0002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0002");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.Instant instant1 = dateTime0.toInstant();
        org.joda.time.Chronology chronology2 = dateTime0.getChronology();
        org.joda.time.DateTimeField dateTimeField3 = chronology2.clockhourOfHalfday();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime0 and instant1", (dateTime0.compareTo(instant1) == 0) == dateTime0.equals(instant1));
    }

    @Test
    public void test0003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0003");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.Instant instant1 = dateTime0.toInstant();
        org.joda.time.Chronology chronology2 = dateTime0.getChronology();
        org.joda.time.DateTimeField dateTimeField3 = chronology2.monthOfYear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime0 and instant1", (dateTime0.compareTo(instant1) == 0) == dateTime0.equals(instant1));
    }

    @Test
    public void test0004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0004");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Instant instant2 = dateTime1.toInstant();
        org.joda.time.Chronology chronology3 = dateTime1.getChronology();
        org.joda.time.LocalTime localTime4 = new org.joda.time.LocalTime((long) 100, chronology3);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and instant2", (dateTime1.compareTo(instant2) == 0) == dateTime1.equals(instant2));
    }

    @Test
    public void test0005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0005");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Instant instant2 = dateTime1.toInstant();
        org.joda.time.Chronology chronology3 = dateTime1.getChronology();
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime(0L, chronology3);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and instant2", (dateTime1.compareTo(instant2) == 0) == dateTime1.equals(instant2));
    }

    @Test
    public void test0006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0006");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.Instant instant1 = dateTime0.toInstant();
        org.joda.time.Chronology chronology2 = dateTime0.getChronology();
        org.joda.time.DateTimeField dateTimeField3 = chronology2.secondOfMinute();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime0 and instant1", (dateTime0.compareTo(instant1) == 0) == dateTime0.equals(instant1));
    }

    @Test
    public void test0007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0007");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.Instant instant1 = dateTime0.toInstant();
        org.joda.time.Chronology chronology2 = dateTime0.getChronology();
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now(chronology2);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime0 and instant1", (dateTime0.compareTo(instant1) == 0) == dateTime0.equals(instant1));
    }

    @Test
    public void test0008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0008");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.Instant instant1 = dateTime0.toInstant();
        org.joda.time.Chronology chronology2 = dateTime0.getChronology();
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        long long6 = chronology2.add(readablePeriod3, (long) 11, 100);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime0 and instant1", (dateTime0.compareTo(instant1) == 0) == dateTime0.equals(instant1));
    }

    @Test
    public void test0009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0009");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.Instant instant1 = dateTime0.toInstant();
        org.joda.time.Chronology chronology2 = dateTime0.getChronology();
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.Chronology chronology4 = chronology2.withZone(dateTimeZone3);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime0 and instant1", (dateTime0.compareTo(instant1) == 0) == dateTime0.equals(instant1));
    }

    @Test
    public void test0010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0010");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.Instant instant1 = dateTime0.toInstant();
        org.joda.time.Chronology chronology2 = dateTime0.getChronology();
        org.joda.time.DateTimeField dateTimeField3 = chronology2.millisOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime0 and instant1", (dateTime0.compareTo(instant1) == 0) == dateTime0.equals(instant1));
    }

    @Test
    public void test0011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0011");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.Instant instant1 = dateTime0.toInstant();
        org.joda.time.Chronology chronology2 = dateTime0.getChronology();
        org.joda.time.DurationField durationField3 = chronology2.halfdays();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime0 and instant1", (dateTime0.compareTo(instant1) == 0) == dateTime0.equals(instant1));
    }

    @Test
    public void test0012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0012");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Instant instant2 = dateTime1.toInstant();
        org.joda.time.Chronology chronology3 = dateTime1.getChronology();
        boolean boolean4 = dateTime0.isEqual((org.joda.time.ReadableInstant) dateTime1);
        org.joda.time.DateTime dateTime5 = dateTime1.toDateTime();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime0 and instant2", (dateTime0.compareTo(instant2) == 0) == dateTime0.equals(instant2));
    }

    @Test
    public void test0013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0013");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Instant instant2 = dateTime1.toInstant();
        org.joda.time.Chronology chronology3 = dateTime1.getChronology();
        boolean boolean4 = dateTime0.isEqual((org.joda.time.ReadableInstant) dateTime1);
        org.joda.time.MutableDateTime mutableDateTime5 = dateTime1.toMutableDateTime();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime0 and instant2", (dateTime0.compareTo(instant2) == 0) == dateTime0.equals(instant2));
    }

    @Test
    public void test0014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0014");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.Instant instant1 = dateTime0.toInstant();
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime();
        int int4 = dateTimeZone2.getOffset((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((java.lang.Object) instant1, dateTimeZone2);
        org.joda.time.LocalTime localTime6 = new org.joda.time.LocalTime(dateTimeZone2);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime0 and instant1", (dateTime0.compareTo(instant1) == 0) == dateTime0.equals(instant1));
    }

    @Test
    public void test0015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0015");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property1 = localDateTime0.yearOfEra();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime4 = dateTime2.minusHours((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalTime localTime6 = new org.joda.time.LocalTime(dateTimeZone5);
        org.joda.time.DateTime dateTime7 = dateTime2.withZone(dateTimeZone5);
        org.joda.time.DateTime dateTime8 = localDateTime0.toDateTime(dateTimeZone5);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and dateTime7", (dateTime2.compareTo(dateTime7) == 0) == dateTime2.equals(dateTime7));
    }

    @Test
    public void test0016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0016");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.Instant instant1 = dateTime0.toInstant();
        org.joda.time.Chronology chronology2 = dateTime0.getChronology();
        long long6 = chronology2.add((long) (byte) -1, 10L, 53);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime0 and instant1", (dateTime0.compareTo(instant1) == 0) == dateTime0.equals(instant1));
    }

    @Test
    public void test0017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0017");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime2 = dateTime0.minusHours((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalTime localTime4 = new org.joda.time.LocalTime(dateTimeZone3);
        org.joda.time.DateTime dateTime5 = dateTime0.withZone(dateTimeZone3);
        org.joda.time.LocalTime localTime6 = org.joda.time.LocalTime.now(dateTimeZone3);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime0 and dateTime5", (dateTime0.compareTo(dateTime5) == 0) == dateTime0.equals(dateTime5));
    }

    @Test
    public void test0018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0018");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime2 = dateTime0.minusHours((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalTime localTime4 = new org.joda.time.LocalTime(dateTimeZone3);
        org.joda.time.DateTime dateTime5 = dateTime0.withZone(dateTimeZone3);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalTime localTime7 = new org.joda.time.LocalTime(dateTimeZone6);
        org.joda.time.LocalTime localTime8 = new org.joda.time.LocalTime(dateTimeZone6);
        org.joda.time.LocalTime localTime10 = localTime8.plusSeconds(10);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = localTime8.getFieldType(0);
        org.joda.time.DateTime dateTime14 = dateTime0.withField(dateTimeFieldType12, 5);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate((long) 100, dateTimeZone16);
        org.joda.time.LocalDate localDate19 = localDate17.plusDays(50);
        org.joda.time.Chronology chronology20 = localDate19.getChronology();
        org.joda.time.DateTimeField dateTimeField21 = chronology20.millisOfDay();
        org.joda.time.DateTimeField dateTimeField22 = dateTimeFieldType12.getField(chronology20);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime0 and dateTime5", (dateTime0.compareTo(dateTime5) == 0) == dateTime0.equals(dateTime5));
    }

    @Test
    public void test0019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0019");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        int int1 = dateTime0.getDayOfYear();
        org.joda.time.DateTime dateTime3 = dateTime0.withYear(11751002);
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime();
        int int5 = dateTime4.getDayOfYear();
        org.joda.time.DateTime dateTime7 = dateTime4.withYear(11751002);
        org.joda.time.Instant instant8 = dateTime4.toInstant();
        boolean boolean9 = dateTime0.isEqual((org.joda.time.ReadableInstant) instant8);
        org.joda.time.DateTime dateTime11 = dateTime0.plus((long) 0);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and instant8", (dateTime4.compareTo(instant8) == 0) == dateTime4.equals(instant8));
    }

    @Test
    public void test0020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0020");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.Instant instant1 = dateTime0.toInstant();
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime();
        int int4 = dateTimeZone2.getOffset((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((java.lang.Object) instant1, dateTimeZone2);
        org.joda.time.LocalDateTime localDateTime6 = org.joda.time.LocalDateTime.now(dateTimeZone2);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime0 and instant1", (dateTime0.compareTo(instant1) == 0) == dateTime0.equals(instant1));
    }

    @Test
    public void test0021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0021");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Instant instant2 = dateTime1.toInstant();
        org.joda.time.Chronology chronology3 = dateTime1.getChronology();
        boolean boolean4 = dateTime0.isEqual((org.joda.time.ReadableInstant) dateTime1);
        int int5 = dateTime1.getMonthOfYear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime0 and instant2", (dateTime0.compareTo(instant2) == 0) == dateTime0.equals(instant2));
    }

    @Test
    public void test0022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0022");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.Instant instant1 = dateTime0.toInstant();
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime();
        int int4 = dateTimeZone2.getOffset((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((java.lang.Object) instant1, dateTimeZone2);
        java.util.TimeZone timeZone6 = dateTimeZone2.toTimeZone();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime0 and instant1", (dateTime0.compareTo(instant1) == 0) == dateTime0.equals(instant1));
    }

    @Test
    public void test0023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0023");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime2 = dateTime0.minusHours((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int4 = dateTime2.get(dateTimeFieldType3);
        org.joda.time.Instant instant5 = new org.joda.time.Instant();
        org.joda.time.Instant instant7 = instant5.withMillis((long) 11);
        org.joda.time.Instant instant8 = instant7.toInstant();
        org.joda.time.Chronology chronology9 = instant7.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.minuteOfHour();
        boolean boolean11 = dateTimeFieldType3.isSupported(chronology9);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime0 and instant5", (dateTime0.compareTo(instant5) == 0) == dateTime0.equals(instant5));
    }

    @Test
    public void test0024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0024");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.Instant instant1 = dateTime0.toInstant();
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime();
        int int4 = dateTimeZone2.getOffset((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((java.lang.Object) instant1, dateTimeZone2);
        long long7 = dateTimeZone2.previousTransition((long) 'x');
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime0 and instant1", (dateTime0.compareTo(instant1) == 0) == dateTime0.equals(instant1));
    }

    @Test
    public void test0025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0025");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        int int1 = dateTime0.getDayOfYear();
        org.joda.time.DateTime dateTime3 = dateTime0.withYear(11751002);
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime();
        int int5 = dateTime4.getDayOfYear();
        org.joda.time.DateTime dateTime7 = dateTime4.withYear(11751002);
        org.joda.time.Instant instant8 = dateTime4.toInstant();
        boolean boolean9 = dateTime0.isEqual((org.joda.time.ReadableInstant) instant8);
        org.joda.time.DateTime dateTime11 = dateTime0.minusSeconds(2022);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and instant8", (dateTime4.compareTo(instant8) == 0) == dateTime4.equals(instant8));
    }

    @Test
    public void test0026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0026");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.Instant instant1 = dateTime0.toInstant();
        org.joda.time.Chronology chronology2 = dateTime0.getChronology();
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now(chronology2);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime0 and instant1", (dateTime0.compareTo(instant1) == 0) == dateTime0.equals(instant1));
    }

    @Test
    public void test0027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0027");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        int int1 = dateTime0.getDayOfYear();
        org.joda.time.DateTime dateTime3 = dateTime0.withYear(11751002);
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime();
        int int5 = dateTime4.getDayOfYear();
        org.joda.time.DateTime dateTime7 = dateTime4.withYear(11751002);
        org.joda.time.Instant instant8 = dateTime4.toInstant();
        boolean boolean9 = dateTime0.isEqual((org.joda.time.ReadableInstant) instant8);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate((long) 100, dateTimeZone11);
        org.joda.time.LocalDate.Property property13 = localDate12.weekyear();
        int int14 = localDate12.getYear();
        boolean boolean15 = dateTime0.equals((java.lang.Object) localDate12);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and instant8", (dateTime4.compareTo(instant8) == 0) == dateTime4.equals(instant8));
    }

    @Test
    public void test0028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0028");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.Instant instant1 = dateTime0.toInstant();
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime();
        int int4 = dateTimeZone2.getOffset((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((java.lang.Object) instant1, dateTimeZone2);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate((long) 100, dateTimeZone7);
        org.joda.time.LocalDate.Property property9 = localDate8.weekyear();
        org.joda.time.LocalDate localDate11 = property9.setCopy(2022);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime5.withFields((org.joda.time.ReadablePartial) localDate11);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime0 and instant1", (dateTime0.compareTo(instant1) == 0) == dateTime0.equals(instant1));
    }

    @Test
    public void test0029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0029");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime2 = dateTime0.minusHours((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int4 = dateTime2.get(dateTimeFieldType3);
        org.joda.time.DurationFieldType durationFieldType5 = dateTimeFieldType3.getRangeDurationType();
        org.joda.time.Instant instant7 = new org.joda.time.Instant();
        org.joda.time.Instant instant9 = instant7.withMillis((long) 11);
        org.joda.time.Instant instant10 = instant9.toInstant();
        org.joda.time.Chronology chronology11 = instant9.getChronology();
        org.joda.time.DateTimeField dateTimeField12 = chronology11.clockhourOfHalfday();
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((long) 11760560, chronology11);
        org.joda.time.DurationField durationField14 = durationFieldType5.getField(chronology11);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime0 and instant7", (dateTime0.compareTo(instant7) == 0) == dateTime0.equals(instant7));
    }

    @Test
    public void test0030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0030");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime2 = dateTime0.minusHours((int) (short) 100);
        org.joda.time.DateMidnight dateMidnight3 = dateTime2.toDateMidnight();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime(dateTimeZone4);
        org.joda.time.LocalTime localTime6 = new org.joda.time.LocalTime(dateTimeZone4);
        org.joda.time.LocalTime localTime8 = localTime6.plusSeconds(10);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = localTime6.getFieldType(0);
        int int11 = dateMidnight3.get(dateTimeFieldType10);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.UTC;
        int int14 = dateTimeZone12.getOffsetFromLocal((long) 'a');
        org.joda.time.DateTime dateTime15 = dateMidnight3.toDateTime(dateTimeZone12);
        org.joda.time.Instant instant16 = new org.joda.time.Instant();
        org.joda.time.Instant instant18 = instant16.withMillis((long) 11);
        org.joda.time.Instant instant19 = instant18.toInstant();
        boolean boolean20 = dateMidnight3.isEqual((org.joda.time.ReadableInstant) instant19);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime0 and instant16", (dateTime0.compareTo(instant16) == 0) == dateTime0.equals(instant16));
    }

    @Test
    public void test0031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0031");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime2 = dateTime0.minusHours((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalTime localTime4 = new org.joda.time.LocalTime(dateTimeZone3);
        org.joda.time.DateTime dateTime5 = dateTime0.withZone(dateTimeZone3);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalTime localTime7 = new org.joda.time.LocalTime(dateTimeZone6);
        org.joda.time.LocalTime localTime8 = new org.joda.time.LocalTime(dateTimeZone6);
        org.joda.time.LocalTime localTime10 = localTime8.plusSeconds(10);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = localTime8.getFieldType(0);
        org.joda.time.DateTime dateTime14 = dateTime0.withField(dateTimeFieldType12, 5);
        org.joda.time.DateTime dateTime16 = dateTime0.plusDays(0);
        org.joda.time.DateTime.Property property17 = dateTime16.yearOfEra();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime16 and dateTime5", (dateTime16.compareTo(dateTime5) == 0) == dateTime16.equals(dateTime5));
    }

    @Test
    public void test0032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0032");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        int int1 = dateTime0.getDayOfYear();
        org.joda.time.DateTime dateTime3 = dateTime0.withYear(11751002);
        org.joda.time.Instant instant4 = dateTime0.toInstant();
        org.joda.time.DateTime dateTime6 = dateTime0.plusYears(26160835);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(59, 50);
        java.lang.String str10 = dateTimeZone9.getID();
        org.joda.time.DateTime dateTime11 = dateTime6.withZoneRetainFields(dateTimeZone9);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime0 and instant4", (dateTime0.compareTo(instant4) == 0) == dateTime0.equals(instant4));
    }

    @Test
    public void test0033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0033");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.Instant instant1 = dateTime0.toInstant();
        org.joda.time.Chronology chronology2 = dateTime0.getChronology();
        org.joda.time.DateTimeField dateTimeField3 = chronology2.yearOfEra();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime0 and instant1", (dateTime0.compareTo(instant1) == 0) == dateTime0.equals(instant1));
    }

    @Test
    public void test0034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0034");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.Instant instant1 = dateTime0.toInstant();
        org.joda.time.Chronology chronology2 = dateTime0.getChronology();
        org.joda.time.DateTimeField dateTimeField3 = chronology2.dayOfWeek();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime0 and instant1", (dateTime0.compareTo(instant1) == 0) == dateTime0.equals(instant1));
    }

    @Test
    public void test0035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0035");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime2 = dateTime0.minusHours((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalTime localTime4 = new org.joda.time.LocalTime(dateTimeZone3);
        org.joda.time.DateTime dateTime5 = dateTime0.withZone(dateTimeZone3);
        org.joda.time.DateTime dateTime7 = dateTime0.withMillisOfSecond(11);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.DateTime dateTime10 = dateTime7.withPeriodAdded(readablePeriod8, 1970);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime0 and dateTime5", (dateTime0.compareTo(dateTime5) == 0) == dateTime0.equals(dateTime5));
    }

    @Test
    public void test0036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0036");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.Instant instant2 = instant0.minus((long) 2);
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.Instant instant4 = instant2.plus(readableDuration3);
        org.joda.time.MutableDateTime mutableDateTime5 = instant2.toMutableDateTime();
        org.joda.time.Instant instant7 = instant2.plus((long) (byte) -1);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant2 and mutableDateTime5", (instant2.compareTo(mutableDateTime5) == 0) == instant2.equals(mutableDateTime5));
    }

    @Test
    public void test0037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0037");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime2 = dateTime0.minusHours((int) (short) 100);
        org.joda.time.DateMidnight dateMidnight3 = dateTime2.toDateMidnight();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime(dateTimeZone4);
        org.joda.time.LocalTime localTime6 = new org.joda.time.LocalTime(dateTimeZone4);
        org.joda.time.LocalTime localTime8 = localTime6.plusSeconds(10);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = localTime6.getFieldType(0);
        int int11 = dateMidnight3.get(dateTimeFieldType10);
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime14 = dateTime12.minusHours((int) (short) 100);
        org.joda.time.DateTime dateTime16 = dateTime12.withHourOfDay(10);
        java.util.GregorianCalendar gregorianCalendar17 = dateTime12.toGregorianCalendar();
        org.joda.time.Instant instant19 = new org.joda.time.Instant();
        org.joda.time.Instant instant21 = instant19.withMillis((long) 11);
        org.joda.time.Instant instant22 = instant21.toInstant();
        org.joda.time.Chronology chronology23 = instant21.getChronology();
        org.joda.time.DateTimeField dateTimeField24 = chronology23.clockhourOfHalfday();
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((long) 11760560, chronology23);
        org.joda.time.DateTime dateTime26 = dateTime12.withChronology(chronology23);
        boolean boolean27 = dateTimeFieldType10.isSupported(chronology23);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime0 and instant19", (dateTime0.compareTo(instant19) == 0) == dateTime0.equals(instant19));
    }

    @Test
    public void test0038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0038");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.Instant instant1 = dateTime0.toInstant();
        org.joda.time.Chronology chronology2 = dateTime0.getChronology();
        org.joda.time.DateTime dateTime4 = dateTime0.plusDays(2);
        java.util.Date date5 = dateTime4.toDate();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime0 and instant1", (dateTime0.compareTo(instant1) == 0) == dateTime0.equals(instant1));
    }

    @Test
    public void test0039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0039");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.Instant instant2 = instant0.withMillis((long) 11);
        org.joda.time.Instant instant3 = instant2.toInstant();
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime6 = dateTime4.minusHours((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int8 = dateTime6.get(dateTimeFieldType7);
        org.joda.time.DateTime dateTime10 = dateTime6.minusMillis((int) '#');
        org.joda.time.DateTime dateTime12 = dateTime10.plusDays(11);
        org.joda.time.DateTime dateTime15 = dateTime10.withDurationAdded((long) (byte) 10, 11);
        org.joda.time.DateTime dateTime17 = dateTime10.plusDays(26159400);
        boolean boolean18 = instant2.isAfter((org.joda.time.ReadableInstant) dateTime17);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and dateTime4", (instant0.compareTo(dateTime4) == 0) == instant0.equals(dateTime4));
    }

    @Test
    public void test0040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0040");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.Instant instant1 = dateTime0.toInstant();
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime();
        int int4 = dateTimeZone2.getOffset((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((java.lang.Object) instant1, dateTimeZone2);
        int int7 = dateTimeZone2.getOffset((long) 22);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime0 and instant1", (dateTime0.compareTo(instant1) == 0) == dateTime0.equals(instant1));
    }

    @Test
    public void test0041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0041");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.Instant instant2 = instant0.withMillis((long) 11);
        org.joda.time.Instant instant3 = instant2.toInstant();
        org.joda.time.Chronology chronology4 = instant2.getChronology();
        org.joda.time.DateTimeField dateTimeField5 = chronology4.minuteOfDay();
        org.joda.time.Chronology chronology6 = chronology4.withUTC();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(chronology6);
        org.joda.time.Instant instant8 = new org.joda.time.Instant();
        org.joda.time.Instant instant10 = instant8.withMillis((long) 11);
        org.joda.time.Instant instant11 = instant10.toInstant();
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.Instant instant13 = instant10.minus(readableDuration12);
        org.joda.time.MutableDateTime mutableDateTime14 = instant10.toMutableDateTime();
        boolean boolean15 = dateTime7.isEqual((org.joda.time.ReadableInstant) instant10);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant2 and mutableDateTime14", (instant2.compareTo(mutableDateTime14) == 0) == instant2.equals(mutableDateTime14));
    }

    @Test
    public void test0042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0042");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.Instant instant1 = dateTime0.toInstant();
        org.joda.time.Chronology chronology2 = dateTime0.getChronology();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime5 = dateTime3.withMinuteOfHour(14);
        org.joda.time.DateTime dateTime7 = dateTime3.withCenturyOfEra(50);
        boolean boolean8 = dateTime0.isEqual((org.joda.time.ReadableInstant) dateTime7);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and dateTime3", (instant1.compareTo(dateTime3) == 0) == instant1.equals(dateTime3));
    }

    @Test
    public void test0043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0043");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        int int1 = dateTime0.getDayOfYear();
        org.joda.time.DateTime dateTime3 = dateTime0.withYear(11751002);
        org.joda.time.Instant instant4 = dateTime0.toInstant();
        org.joda.time.DateTime.Property property5 = dateTime0.dayOfWeek();
        org.joda.time.DateTime dateTime7 = property5.addToCopy(11764152);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime0 and instant4", (dateTime0.compareTo(instant4) == 0) == dateTime0.equals(instant4));
    }

    @Test
    public void test0044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0044");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime2 = dateTime0.minusHours((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalTime localTime4 = new org.joda.time.LocalTime(dateTimeZone3);
        org.joda.time.DateTime dateTime5 = dateTime0.withZone(dateTimeZone3);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalTime localTime7 = new org.joda.time.LocalTime(dateTimeZone6);
        org.joda.time.LocalTime localTime8 = new org.joda.time.LocalTime(dateTimeZone6);
        org.joda.time.LocalTime localTime10 = localTime8.plusSeconds(10);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = localTime8.getFieldType(0);
        org.joda.time.DateTime dateTime14 = dateTime0.withField(dateTimeFieldType12, 5);
        org.joda.time.DateTime dateTime16 = dateTime0.plusDays(0);
        int int17 = dateTime16.getWeekyear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime16 and dateTime5", (dateTime16.compareTo(dateTime5) == 0) == dateTime16.equals(dateTime5));
    }

    @Test
    public void test0045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0045");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        int int1 = dateTime0.getDayOfYear();
        org.joda.time.DateTime dateTime3 = dateTime0.withYear(11751002);
        org.joda.time.Instant instant4 = dateTime0.toInstant();
        org.joda.time.DateTime dateTime6 = dateTime0.plusYears(26160835);
        java.util.Calendar.Builder builder7 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder11 = builder7.setWeekDate((int) (short) 0, (int) '4', (int) '4');
        java.util.Calendar.Builder builder13 = builder11.setLenient(false);
        java.util.TimeZone timeZone15 = java.util.TimeZone.getTimeZone("");
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(59, 50);
        java.util.TimeZone timeZone19 = dateTimeZone18.toTimeZone();
        java.util.TimeZone timeZone20 = dateTimeZone18.toTimeZone();
        boolean boolean21 = timeZone15.hasSameRules(timeZone20);
        java.util.Calendar.Builder builder22 = builder11.setTimeZone(timeZone20);
        boolean boolean23 = dateTime6.equals((java.lang.Object) timeZone20);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime0 and instant4", (dateTime0.compareTo(instant4) == 0) == dateTime0.equals(instant4));
    }

    @Test
    public void test0046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0046");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withPivotYear((java.lang.Integer) (-26151846));
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatter2.withZoneUTC();
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime8 = dateTime6.minusHours((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int10 = dateTime8.get(dateTimeFieldType9);
        org.joda.time.DateTime dateTime12 = dateTime8.minusMillis((int) '#');
        org.joda.time.DateTime dateTime14 = dateTime12.plusDays(11);
        org.joda.time.DateTime dateTime17 = dateTime12.withDurationAdded((long) (byte) 10, 11);
        org.joda.time.DateTime dateTime19 = dateTime12.plusDays(26159400);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalTime localTime21 = new org.joda.time.LocalTime(dateTimeZone20);
        int int23 = dateTimeZone20.getStandardOffset((long) 49);
        int int25 = dateTimeZone20.getOffset((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime26 = dateTime12.toMutableDateTime(dateTimeZone20);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter2.withZone(dateTimeZone20);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime12 and mutableDateTime26", (dateTime12.compareTo(mutableDateTime26) == 0) == dateTime12.equals(mutableDateTime26));
    }

    @Test
    public void test0047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0047");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 100, dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.plusDays(50);
        org.joda.time.Chronology chronology5 = localDate4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 100, dateTimeZone8);
        org.joda.time.LocalDate localDate11 = localDate9.plusDays(50);
        int int12 = localDate9.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate14 = localDate9.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        int int17 = dateTimeZone15.getOffset((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateMidnight dateMidnight18 = localDate9.toDateMidnight(dateTimeZone15);
        long long20 = dateTimeZone15.convertUTCToLocal(60000L);
        org.joda.time.chrono.ZonedChronology zonedChronology21 = org.joda.time.chrono.ZonedChronology.getInstance(chronology5, dateTimeZone15);
        org.joda.time.DurationField durationField22 = zonedChronology21.weeks();
        org.joda.time.DateTimeField dateTimeField23 = zonedChronology21.weekyear();
        org.joda.time.DateTimeField dateTimeField24 = zonedChronology21.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(59, 50);
        java.util.TimeZone timeZone29 = dateTimeZone28.toTimeZone();
        java.util.TimeZone timeZone30 = dateTimeZone28.toTimeZone();
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime(72000000L, dateTimeZone28);
        int int33 = dateTimeZone28.getStandardOffset((long) 'u');
        java.lang.String str35 = dateTimeZone28.getName(1645142400000L);
        org.joda.time.DateTime dateTime36 = org.joda.time.DateTime.now(dateTimeZone28);
        org.joda.time.Chronology chronology37 = zonedChronology21.withZone(dateTimeZone28);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime16 and dateTime36", (dateTime16.compareTo(dateTime36) == 0) == dateTime16.equals(dateTime36));
    }

    @Test
    public void test0048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0048");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 100, dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.plusDays(50);
        org.joda.time.Chronology chronology5 = localDate4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 100, dateTimeZone8);
        org.joda.time.LocalDate localDate11 = localDate9.plusDays(50);
        int int12 = localDate9.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate14 = localDate9.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        int int17 = dateTimeZone15.getOffset((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateMidnight dateMidnight18 = localDate9.toDateMidnight(dateTimeZone15);
        long long20 = dateTimeZone15.convertUTCToLocal(60000L);
        org.joda.time.chrono.ZonedChronology zonedChronology21 = org.joda.time.chrono.ZonedChronology.getInstance(chronology5, dateTimeZone15);
        org.joda.time.DurationField durationField22 = zonedChronology21.weeks();
        org.joda.time.DurationField durationField23 = zonedChronology21.centuries();
        org.joda.time.DurationField durationField24 = zonedChronology21.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField24, durationField22, and durationField23", !(durationField24.compareTo(durationField22) == 0) || (Math.signum(durationField24.compareTo(durationField23)) == Math.signum(durationField22.compareTo(durationField23))));
    }

    @Test
    public void test0049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0049");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 100, dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.plusDays(50);
        org.joda.time.Chronology chronology5 = localDate4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 100, dateTimeZone8);
        org.joda.time.LocalDate localDate11 = localDate9.plusDays(50);
        int int12 = localDate9.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate14 = localDate9.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        int int17 = dateTimeZone15.getOffset((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateMidnight dateMidnight18 = localDate9.toDateMidnight(dateTimeZone15);
        long long20 = dateTimeZone15.convertUTCToLocal(60000L);
        org.joda.time.chrono.ZonedChronology zonedChronology21 = org.joda.time.chrono.ZonedChronology.getInstance(chronology5, dateTimeZone15);
        org.joda.time.DurationField durationField22 = zonedChronology21.eras();
        org.joda.time.DateTimeField dateTimeField23 = zonedChronology21.minuteOfDay();
        org.joda.time.Chronology chronology24 = zonedChronology21.withUTC();
        org.joda.time.DateTimeField dateTimeField25 = zonedChronology21.minuteOfHour();
        org.joda.time.DurationField durationField26 = zonedChronology21.minutes();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField22, durationField26, and durationField22", !(durationField22.compareTo(durationField26) == 0) || (Math.signum(durationField22.compareTo(durationField22)) == Math.signum(durationField26.compareTo(durationField22))));
    }

    @Test
    public void test0050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0050");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 100, dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.plusDays(50);
        org.joda.time.Chronology chronology5 = localDate4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 100, dateTimeZone8);
        org.joda.time.LocalDate localDate11 = localDate9.plusDays(50);
        int int12 = localDate9.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate14 = localDate9.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        int int17 = dateTimeZone15.getOffset((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateMidnight dateMidnight18 = localDate9.toDateMidnight(dateTimeZone15);
        long long20 = dateTimeZone15.convertUTCToLocal(60000L);
        org.joda.time.chrono.ZonedChronology zonedChronology21 = org.joda.time.chrono.ZonedChronology.getInstance(chronology5, dateTimeZone15);
        org.joda.time.DurationField durationField22 = zonedChronology21.eras();
        org.joda.time.DateTimeField dateTimeField23 = zonedChronology21.minuteOfDay();
        org.joda.time.Chronology chronology24 = zonedChronology21.withUTC();
        org.joda.time.DateTimeField dateTimeField25 = zonedChronology21.monthOfYear();
        org.joda.time.DateTimeField dateTimeField26 = zonedChronology21.minuteOfDay();
        org.joda.time.DurationField durationField27 = zonedChronology21.centuries();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField22, durationField27, and durationField22", !(durationField22.compareTo(durationField27) == 0) || (Math.signum(durationField22.compareTo(durationField22)) == Math.signum(durationField27.compareTo(durationField22))));
    }

    @Test
    public void test0051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0051");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 100, dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.plusDays(50);
        org.joda.time.Chronology chronology5 = localDate4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 100, dateTimeZone8);
        org.joda.time.LocalDate localDate11 = localDate9.plusDays(50);
        int int12 = localDate9.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate14 = localDate9.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        int int17 = dateTimeZone15.getOffset((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateMidnight dateMidnight18 = localDate9.toDateMidnight(dateTimeZone15);
        long long20 = dateTimeZone15.convertUTCToLocal(60000L);
        org.joda.time.chrono.ZonedChronology zonedChronology21 = org.joda.time.chrono.ZonedChronology.getInstance(chronology5, dateTimeZone15);
        org.joda.time.DurationField durationField22 = zonedChronology21.weeks();
        org.joda.time.DurationField durationField23 = zonedChronology21.millis();
        org.joda.time.DurationField durationField24 = zonedChronology21.millis();
        org.joda.time.DurationField durationField25 = zonedChronology21.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField25, durationField22, and durationField23", !(durationField25.compareTo(durationField22) == 0) || (Math.signum(durationField25.compareTo(durationField23)) == Math.signum(durationField22.compareTo(durationField23))));
    }

    @Test
    public void test0052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0052");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 100, dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.plusDays(50);
        org.joda.time.Chronology chronology5 = localDate4.getChronology();
        org.joda.time.DateTime dateTime6 = localDate4.toDateTimeAtCurrentTime();
        int int7 = localDate4.getDayOfYear();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime10 = dateTime8.minusHours((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int12 = dateTime10.get(dateTimeFieldType11);
        org.joda.time.DateTime dateTime14 = dateTime10.minusMillis((int) '#');
        org.joda.time.DateTime dateTime16 = dateTime14.plusDays(11);
        org.joda.time.DateTime dateTime19 = dateTime14.withDurationAdded((long) (byte) 10, 11);
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(59, 50);
        java.util.TimeZone timeZone25 = dateTimeZone24.toTimeZone();
        java.util.TimeZone timeZone26 = dateTimeZone24.toTimeZone();
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime(72000000L, dateTimeZone24);
        int int29 = dateTimeZone24.getStandardOffset((long) 'u');
        org.joda.time.LocalDate localDate30 = new org.joda.time.LocalDate((long) 49, dateTimeZone24);
        org.joda.time.DateTime dateTime31 = dateTime19.withZone(dateTimeZone24);
        org.joda.time.DateTime dateTime32 = localDate4.toDateTimeAtStartOfDay(dateTimeZone24);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime19 and dateTime31", (dateTime19.compareTo(dateTime31) == 0) == dateTime19.equals(dateTime31));
    }

    @Test
    public void test0053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0053");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 100, dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.plusDays(50);
        org.joda.time.Chronology chronology5 = localDate4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 100, dateTimeZone8);
        org.joda.time.LocalDate localDate11 = localDate9.plusDays(50);
        int int12 = localDate9.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate14 = localDate9.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        int int17 = dateTimeZone15.getOffset((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateMidnight dateMidnight18 = localDate9.toDateMidnight(dateTimeZone15);
        long long20 = dateTimeZone15.convertUTCToLocal(60000L);
        org.joda.time.chrono.ZonedChronology zonedChronology21 = org.joda.time.chrono.ZonedChronology.getInstance(chronology5, dateTimeZone15);
        org.joda.time.DurationField durationField22 = zonedChronology21.weeks();
        org.joda.time.DateTimeField dateTimeField23 = zonedChronology21.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        long long27 = zonedChronology21.add(readablePeriod24, (long) 2022, 0);
        org.joda.time.DurationField durationField28 = zonedChronology21.seconds();
        org.joda.time.DurationField durationField29 = zonedChronology21.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField29, durationField22, and durationField28", !(durationField29.compareTo(durationField22) == 0) || (Math.signum(durationField29.compareTo(durationField28)) == Math.signum(durationField22.compareTo(durationField28))));
    }

    @Test
    public void test0054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0054");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime2 = dateTime0.withMinuteOfHour(14);
        org.joda.time.DateTime dateTime4 = dateTime0.withCenturyOfEra(50);
        org.joda.time.DateTime dateTime5 = dateTime4.toDateTime();
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.DateTime dateTime7 = dateTime4.minus(readablePeriod6);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate((long) 100, dateTimeZone9);
        org.joda.time.LocalDate localDate12 = localDate10.plusDays(50);
        org.joda.time.Chronology chronology13 = localDate12.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate((long) 100, dateTimeZone16);
        org.joda.time.LocalDate localDate19 = localDate17.plusDays(50);
        int int20 = localDate17.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate22 = localDate17.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime();
        int int25 = dateTimeZone23.getOffset((org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.DateMidnight dateMidnight26 = localDate17.toDateMidnight(dateTimeZone23);
        long long28 = dateTimeZone23.convertUTCToLocal(60000L);
        org.joda.time.chrono.ZonedChronology zonedChronology29 = org.joda.time.chrono.ZonedChronology.getInstance(chronology13, dateTimeZone23);
        org.joda.time.DurationField durationField30 = zonedChronology29.weeks();
        org.joda.time.DateTimeField dateTimeField31 = zonedChronology29.weekyear();
        org.joda.time.DurationField durationField32 = zonedChronology29.weekyears();
        org.joda.time.DateTimeField dateTimeField33 = zonedChronology29.centuryOfEra();
        org.joda.time.DateTime dateTime34 = dateTime4.toDateTime((org.joda.time.Chronology) zonedChronology29);
        org.joda.time.DurationField durationField35 = zonedChronology29.years();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and dateTime34", (dateTime4.compareTo(dateTime34) == 0) == dateTime4.equals(dateTime34));
    }

    @Test
    public void test0055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0055");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime2 = dateTime0.withMinuteOfHour(14);
        org.joda.time.DateTime dateTime4 = dateTime0.withCenturyOfEra(50);
        org.joda.time.DateTime dateTime5 = dateTime4.toDateTime();
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.DateTime dateTime7 = dateTime4.minus(readablePeriod6);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate((long) 100, dateTimeZone9);
        org.joda.time.LocalDate localDate12 = localDate10.plusDays(50);
        org.joda.time.Chronology chronology13 = localDate12.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate((long) 100, dateTimeZone16);
        org.joda.time.LocalDate localDate19 = localDate17.plusDays(50);
        int int20 = localDate17.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate22 = localDate17.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime();
        int int25 = dateTimeZone23.getOffset((org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.DateMidnight dateMidnight26 = localDate17.toDateMidnight(dateTimeZone23);
        long long28 = dateTimeZone23.convertUTCToLocal(60000L);
        org.joda.time.chrono.ZonedChronology zonedChronology29 = org.joda.time.chrono.ZonedChronology.getInstance(chronology13, dateTimeZone23);
        org.joda.time.DurationField durationField30 = zonedChronology29.weeks();
        org.joda.time.DateTimeField dateTimeField31 = zonedChronology29.weekyear();
        org.joda.time.DurationField durationField32 = zonedChronology29.weekyears();
        org.joda.time.DateTimeField dateTimeField33 = zonedChronology29.centuryOfEra();
        org.joda.time.DateTime dateTime34 = dateTime4.toDateTime((org.joda.time.Chronology) zonedChronology29);
        org.joda.time.DurationField durationField35 = zonedChronology29.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and dateTime34", (dateTime4.compareTo(dateTime34) == 0) == dateTime4.equals(dateTime34));
    }

    @Test
    public void test0056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0056");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 100, dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.plusDays(50);
        org.joda.time.Chronology chronology5 = localDate4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 100, dateTimeZone8);
        org.joda.time.LocalDate localDate11 = localDate9.plusDays(50);
        int int12 = localDate9.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate14 = localDate9.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        int int17 = dateTimeZone15.getOffset((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateMidnight dateMidnight18 = localDate9.toDateMidnight(dateTimeZone15);
        long long20 = dateTimeZone15.convertUTCToLocal(60000L);
        org.joda.time.chrono.ZonedChronology zonedChronology21 = org.joda.time.chrono.ZonedChronology.getInstance(chronology5, dateTimeZone15);
        org.joda.time.DurationField durationField22 = zonedChronology21.eras();
        org.joda.time.DateTimeField dateTimeField23 = zonedChronology21.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField24 = zonedChronology21.secondOfMinute();
        org.joda.time.DurationField durationField25 = dateTimeField24.getRangeDurationField();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField22, durationField25, and durationField22", !(durationField22.compareTo(durationField25) == 0) || (Math.signum(durationField22.compareTo(durationField22)) == Math.signum(durationField25.compareTo(durationField22))));
    }

    @Test
    public void test0057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0057");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime2 = dateTime0.withMinuteOfHour(14);
        org.joda.time.DateTime dateTime4 = dateTime0.withCenturyOfEra(50);
        org.joda.time.DateTime dateTime5 = dateTime4.toDateTime();
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.DateTime dateTime7 = dateTime4.minus(readablePeriod6);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate((long) 100, dateTimeZone9);
        org.joda.time.LocalDate localDate12 = localDate10.plusDays(50);
        org.joda.time.Chronology chronology13 = localDate12.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate((long) 100, dateTimeZone16);
        org.joda.time.LocalDate localDate19 = localDate17.plusDays(50);
        int int20 = localDate17.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate22 = localDate17.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime();
        int int25 = dateTimeZone23.getOffset((org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.DateMidnight dateMidnight26 = localDate17.toDateMidnight(dateTimeZone23);
        long long28 = dateTimeZone23.convertUTCToLocal(60000L);
        org.joda.time.chrono.ZonedChronology zonedChronology29 = org.joda.time.chrono.ZonedChronology.getInstance(chronology13, dateTimeZone23);
        org.joda.time.DurationField durationField30 = zonedChronology29.weeks();
        org.joda.time.DateTimeField dateTimeField31 = zonedChronology29.weekyear();
        org.joda.time.DurationField durationField32 = zonedChronology29.weekyears();
        org.joda.time.DateTimeField dateTimeField33 = zonedChronology29.centuryOfEra();
        org.joda.time.DateTime dateTime34 = dateTime4.toDateTime((org.joda.time.Chronology) zonedChronology29);
        org.joda.time.DurationField durationField35 = zonedChronology29.minutes();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and dateTime34", (dateTime4.compareTo(dateTime34) == 0) == dateTime4.equals(dateTime34));
    }

    @Test
    public void test0058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0058");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        int int2 = dateTime1.getDayOfYear();
        org.joda.time.DateTime dateTime4 = dateTime1.withYear(11751002);
        org.joda.time.DateTime dateTime6 = dateTime1.minusYears(100);
        org.joda.time.DateTimeZone dateTimeZone7 = dateTime6.getZone();
        org.joda.time.DateTime dateTime9 = dateTime6.plusSeconds((int) 'x');
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate((long) 100, dateTimeZone11);
        org.joda.time.LocalDate localDate14 = localDate12.plusDays(50);
        org.joda.time.Chronology chronology15 = localDate14.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate((long) 100, dateTimeZone18);
        org.joda.time.LocalDate localDate21 = localDate19.plusDays(50);
        int int22 = localDate19.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate24 = localDate19.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime();
        int int27 = dateTimeZone25.getOffset((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.DateMidnight dateMidnight28 = localDate19.toDateMidnight(dateTimeZone25);
        long long30 = dateTimeZone25.convertUTCToLocal(60000L);
        org.joda.time.chrono.ZonedChronology zonedChronology31 = org.joda.time.chrono.ZonedChronology.getInstance(chronology15, dateTimeZone25);
        org.joda.time.DurationField durationField32 = zonedChronology31.weeks();
        org.joda.time.DateTimeField dateTimeField33 = zonedChronology31.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod34 = null;
        long long37 = zonedChronology31.add(readablePeriod34, (long) 2022, 0);
        org.joda.time.DurationField durationField38 = zonedChronology31.seconds();
        org.joda.time.MutableDateTime mutableDateTime39 = dateTime6.toMutableDateTime((org.joda.time.Chronology) zonedChronology31);
        org.joda.time.LocalTime localTime40 = org.joda.time.LocalTime.fromMillisOfDay((long) 28, (org.joda.time.Chronology) zonedChronology31);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime6 and mutableDateTime39", (dateTime6.compareTo(mutableDateTime39) == 0) == dateTime6.equals(mutableDateTime39));
    }

    @Test
    public void test0059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0059");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 100, dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.plusDays(50);
        org.joda.time.Chronology chronology5 = localDate4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 100, dateTimeZone8);
        org.joda.time.LocalDate localDate11 = localDate9.plusDays(50);
        int int12 = localDate9.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate14 = localDate9.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        int int17 = dateTimeZone15.getOffset((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateMidnight dateMidnight18 = localDate9.toDateMidnight(dateTimeZone15);
        long long20 = dateTimeZone15.convertUTCToLocal(60000L);
        org.joda.time.chrono.ZonedChronology zonedChronology21 = org.joda.time.chrono.ZonedChronology.getInstance(chronology5, dateTimeZone15);
        org.joda.time.DurationField durationField22 = zonedChronology21.weeks();
        org.joda.time.DateTimeField dateTimeField23 = zonedChronology21.year();
        org.joda.time.DateTimeZone dateTimeZone24 = zonedChronology21.getZone();
        org.joda.time.DurationField durationField25 = zonedChronology21.months();
        org.joda.time.DateTimeField dateTimeField26 = zonedChronology21.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate((long) 100, dateTimeZone28);
        org.joda.time.LocalDate localDate31 = localDate29.plusDays(50);
        int int32 = localDate31.getDayOfMonth();
        int int33 = localDate31.getYear();
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate36 = new org.joda.time.LocalDate((long) 100, dateTimeZone35);
        org.joda.time.LocalDate localDate38 = localDate36.plusDays(50);
        org.joda.time.Chronology chronology39 = localDate38.getChronology();
        org.joda.time.DateTimeField dateTimeField40 = chronology39.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate43 = new org.joda.time.LocalDate((long) 100, dateTimeZone42);
        org.joda.time.LocalDate localDate45 = localDate43.plusDays(50);
        int int46 = localDate43.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate48 = localDate43.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime();
        int int51 = dateTimeZone49.getOffset((org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.DateMidnight dateMidnight52 = localDate43.toDateMidnight(dateTimeZone49);
        long long54 = dateTimeZone49.convertUTCToLocal(60000L);
        org.joda.time.chrono.ZonedChronology zonedChronology55 = org.joda.time.chrono.ZonedChronology.getInstance(chronology39, dateTimeZone49);
        org.joda.time.DurationField durationField56 = zonedChronology55.weeks();
        org.joda.time.DateTimeField dateTimeField57 = zonedChronology55.weekyear();
        org.joda.time.DurationField durationField58 = zonedChronology55.weekyears();
        org.joda.time.DateTimeZone dateTimeZone60 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate61 = new org.joda.time.LocalDate((long) 100, dateTimeZone60);
        org.joda.time.LocalDate localDate63 = localDate61.plusDays(50);
        org.joda.time.Chronology chronology64 = localDate63.getChronology();
        org.joda.time.LocalDate.Property property65 = localDate63.era();
        org.joda.time.DateTimeField dateTimeField66 = property65.getField();
        org.joda.time.LocalDate localDate67 = property65.getLocalDate();
        org.joda.time.LocalDate localDate69 = localDate67.withYear(26160535);
        org.joda.time.LocalDate localDate71 = localDate69.minusYears(11766550);
        int[] intArray73 = zonedChronology55.get((org.joda.time.ReadablePartial) localDate71, (long) 11764640);
        int int74 = dateTimeField26.getMaximumValue((org.joda.time.ReadablePartial) localDate31, intArray73);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on durationField22 and durationField56", (durationField22.compareTo(durationField56) == 0) == durationField22.equals(durationField56));
    }

    @Test
    public void test0060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0060");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 100, dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.plusDays(50);
        org.joda.time.Chronology chronology5 = localDate4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 100, dateTimeZone8);
        org.joda.time.LocalDate localDate11 = localDate9.plusDays(50);
        int int12 = localDate9.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate14 = localDate9.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        int int17 = dateTimeZone15.getOffset((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateMidnight dateMidnight18 = localDate9.toDateMidnight(dateTimeZone15);
        long long20 = dateTimeZone15.convertUTCToLocal(60000L);
        org.joda.time.chrono.ZonedChronology zonedChronology21 = org.joda.time.chrono.ZonedChronology.getInstance(chronology5, dateTimeZone15);
        org.joda.time.DurationField durationField22 = zonedChronology21.weeks();
        org.joda.time.DateTimeField dateTimeField23 = zonedChronology21.year();
        org.joda.time.DateTimeZone dateTimeZone24 = zonedChronology21.getZone();
        org.joda.time.DateTimeField dateTimeField25 = zonedChronology21.weekyear();
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        long long29 = zonedChronology21.add(readablePeriod26, (long) 11783576, 26163273);
        org.joda.time.DateTimeField dateTimeField30 = zonedChronology21.weekyear();
        org.joda.time.DurationField durationField31 = zonedChronology21.eras();
        org.joda.time.DurationField durationField32 = zonedChronology21.weeks();
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField32 and durationField31", Math.signum(durationField32.compareTo(durationField31)) == -Math.signum(durationField31.compareTo(durationField32)));
    }

    @Test
    public void test0061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0061");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime2 = dateTime0.minusHours((int) (short) 100);
        org.joda.time.DateTime dateTime4 = dateTime0.withHourOfDay(10);
        java.util.GregorianCalendar gregorianCalendar5 = dateTime0.toGregorianCalendar();
        org.joda.time.Instant instant7 = new org.joda.time.Instant();
        org.joda.time.Instant instant9 = instant7.withMillis((long) 11);
        org.joda.time.Instant instant10 = instant9.toInstant();
        org.joda.time.Chronology chronology11 = instant9.getChronology();
        org.joda.time.DateTimeField dateTimeField12 = chronology11.clockhourOfHalfday();
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((long) 11760560, chronology11);
        org.joda.time.DateTime dateTime14 = dateTime0.withChronology(chronology11);
        org.joda.time.DateTimeField dateTimeField15 = chronology11.yearOfCentury();
        org.joda.time.DurationField durationField16 = chronology11.years();
        org.joda.time.DurationField durationField17 = chronology11.eras();
        org.joda.time.Chronology chronology18 = chronology11.withUTC();
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField16 and durationField17", Math.signum(durationField16.compareTo(durationField17)) == -Math.signum(durationField17.compareTo(durationField16)));
    }

    @Test
    public void test0062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0062");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 100, dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.plusDays(50);
        org.joda.time.Chronology chronology5 = localDate4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 100, dateTimeZone8);
        org.joda.time.LocalDate localDate11 = localDate9.plusDays(50);
        int int12 = localDate9.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate14 = localDate9.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        int int17 = dateTimeZone15.getOffset((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateMidnight dateMidnight18 = localDate9.toDateMidnight(dateTimeZone15);
        long long20 = dateTimeZone15.convertUTCToLocal(60000L);
        org.joda.time.chrono.ZonedChronology zonedChronology21 = org.joda.time.chrono.ZonedChronology.getInstance(chronology5, dateTimeZone15);
        org.joda.time.DurationField durationField22 = zonedChronology21.eras();
        org.joda.time.DateTimeField dateTimeField23 = zonedChronology21.minuteOfDay();
        org.joda.time.Chronology chronology24 = zonedChronology21.withUTC();
        org.joda.time.DateTimeField dateTimeField25 = zonedChronology21.monthOfYear();
        org.joda.time.DateTimeField dateTimeField26 = zonedChronology21.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField27 = zonedChronology21.clockhourOfDay();
        org.joda.time.DurationField durationField28 = zonedChronology21.hours();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField22, durationField28, and durationField22", !(durationField22.compareTo(durationField28) == 0) || (Math.signum(durationField22.compareTo(durationField22)) == Math.signum(durationField28.compareTo(durationField22))));
    }

    @Test
    public void test0063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0063");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 100, dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.plusDays(50);
        org.joda.time.Chronology chronology5 = localDate4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 100, dateTimeZone8);
        org.joda.time.LocalDate localDate11 = localDate9.plusDays(50);
        int int12 = localDate9.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate14 = localDate9.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        int int17 = dateTimeZone15.getOffset((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateMidnight dateMidnight18 = localDate9.toDateMidnight(dateTimeZone15);
        long long20 = dateTimeZone15.convertUTCToLocal(60000L);
        org.joda.time.chrono.ZonedChronology zonedChronology21 = org.joda.time.chrono.ZonedChronology.getInstance(chronology5, dateTimeZone15);
        org.joda.time.DurationField durationField22 = zonedChronology21.weeks();
        org.joda.time.DateTimeField dateTimeField23 = zonedChronology21.year();
        org.joda.time.DateTimeZone dateTimeZone24 = zonedChronology21.getZone();
        org.joda.time.DateTimeField dateTimeField25 = zonedChronology21.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField26 = zonedChronology21.yearOfCentury();
        org.joda.time.DurationField durationField27 = zonedChronology21.months();
        org.joda.time.DurationField durationField28 = zonedChronology21.hours();
        org.joda.time.DurationField durationField29 = zonedChronology21.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField29, durationField22, and durationField27", !(durationField29.compareTo(durationField22) == 0) || (Math.signum(durationField29.compareTo(durationField27)) == Math.signum(durationField22.compareTo(durationField27))));
    }

    @Test
    public void test0064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0064");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 100, dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.plusDays(50);
        org.joda.time.Chronology chronology5 = localDate4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 100, dateTimeZone8);
        org.joda.time.LocalDate localDate11 = localDate9.plusDays(50);
        int int12 = localDate9.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate14 = localDate9.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        int int17 = dateTimeZone15.getOffset((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateMidnight dateMidnight18 = localDate9.toDateMidnight(dateTimeZone15);
        long long20 = dateTimeZone15.convertUTCToLocal(60000L);
        org.joda.time.chrono.ZonedChronology zonedChronology21 = org.joda.time.chrono.ZonedChronology.getInstance(chronology5, dateTimeZone15);
        org.joda.time.DurationField durationField22 = zonedChronology21.weeks();
        org.joda.time.DateTimeField dateTimeField23 = zonedChronology21.weekyear();
        org.joda.time.DurationField durationField24 = zonedChronology21.weekyears();
        long long28 = zonedChronology21.add(0L, 11776486L, 0);
        org.joda.time.DurationField durationField29 = zonedChronology21.years();
        org.joda.time.DateTimeField dateTimeField30 = zonedChronology21.clockhourOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on durationField24 and durationField29", (durationField24.compareTo(durationField29) == 0) == durationField24.equals(durationField29));
    }

    @Test
    public void test0065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0065");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 100, dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.plusDays(50);
        org.joda.time.Chronology chronology5 = localDate4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 100, dateTimeZone8);
        org.joda.time.LocalDate localDate11 = localDate9.plusDays(50);
        int int12 = localDate9.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate14 = localDate9.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        int int17 = dateTimeZone15.getOffset((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateMidnight dateMidnight18 = localDate9.toDateMidnight(dateTimeZone15);
        long long20 = dateTimeZone15.convertUTCToLocal(60000L);
        org.joda.time.chrono.ZonedChronology zonedChronology21 = org.joda.time.chrono.ZonedChronology.getInstance(chronology5, dateTimeZone15);
        org.joda.time.DurationField durationField22 = zonedChronology21.eras();
        org.joda.time.DateTimeField dateTimeField23 = zonedChronology21.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField24 = zonedChronology21.clockhourOfDay();
        org.joda.time.DurationField durationField25 = zonedChronology21.millis();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField22, durationField25, and durationField22", !(durationField22.compareTo(durationField25) == 0) || (Math.signum(durationField22.compareTo(durationField22)) == Math.signum(durationField25.compareTo(durationField22))));
    }

    @Test
    public void test0066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0066");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 100, dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.plusDays(50);
        org.joda.time.Chronology chronology5 = localDate4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 100, dateTimeZone8);
        org.joda.time.LocalDate localDate11 = localDate9.plusDays(50);
        int int12 = localDate9.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate14 = localDate9.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        int int17 = dateTimeZone15.getOffset((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateMidnight dateMidnight18 = localDate9.toDateMidnight(dateTimeZone15);
        long long20 = dateTimeZone15.convertUTCToLocal(60000L);
        org.joda.time.chrono.ZonedChronology zonedChronology21 = org.joda.time.chrono.ZonedChronology.getInstance(chronology5, dateTimeZone15);
        org.joda.time.DurationField durationField22 = zonedChronology21.eras();
        org.joda.time.DateTimeField dateTimeField23 = zonedChronology21.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField24 = zonedChronology21.weekyearOfCentury();
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        long long28 = zonedChronology21.add(readablePeriod25, (long) 38, 11809825);
        org.joda.time.DurationField durationField29 = zonedChronology21.centuries();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField22, durationField29, and durationField22", !(durationField22.compareTo(durationField29) == 0) || (Math.signum(durationField22.compareTo(durationField22)) == Math.signum(durationField29.compareTo(durationField22))));
    }

    @Test
    public void test0067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0067");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 100, dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.plusDays(50);
        org.joda.time.Chronology chronology5 = localDate4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 100, dateTimeZone8);
        org.joda.time.LocalDate localDate11 = localDate9.plusDays(50);
        int int12 = localDate9.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate14 = localDate9.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        int int17 = dateTimeZone15.getOffset((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateMidnight dateMidnight18 = localDate9.toDateMidnight(dateTimeZone15);
        long long20 = dateTimeZone15.convertUTCToLocal(60000L);
        org.joda.time.chrono.ZonedChronology zonedChronology21 = org.joda.time.chrono.ZonedChronology.getInstance(chronology5, dateTimeZone15);
        org.joda.time.DurationField durationField22 = zonedChronology21.eras();
        org.joda.time.DateTimeField dateTimeField23 = zonedChronology21.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField24 = zonedChronology21.secondOfMinute();
        org.joda.time.DurationField durationField25 = zonedChronology21.weekyears();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField22, durationField25, and durationField22", !(durationField22.compareTo(durationField25) == 0) || (Math.signum(durationField22.compareTo(durationField22)) == Math.signum(durationField25.compareTo(durationField22))));
    }

    @Test
    public void test0068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0068");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime2 = dateTime0.minusHours((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int4 = dateTime2.get(dateTimeFieldType3);
        org.joda.time.DateTime dateTime6 = dateTime2.minusMillis((int) '#');
        org.joda.time.DateTime dateTime8 = dateTime6.plusDays(11);
        org.joda.time.DateTime dateTime11 = dateTime6.withDurationAdded((long) (byte) 10, 11);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(59, 50);
        java.util.TimeZone timeZone17 = dateTimeZone16.toTimeZone();
        java.util.TimeZone timeZone18 = dateTimeZone16.toTimeZone();
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(72000000L, dateTimeZone16);
        int int21 = dateTimeZone16.getStandardOffset((long) 'u');
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate((long) 49, dateTimeZone16);
        org.joda.time.DateTime dateTime23 = dateTime11.withZone(dateTimeZone16);
        boolean boolean25 = dateTimeZone16.isStandardOffset((long) 11809176);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime11 and dateTime23", (dateTime11.compareTo(dateTime23) == 0) == dateTime11.equals(dateTime23));
    }

    @Test
    public void test0069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0069");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime2 = dateTime0.withMinuteOfHour(14);
        org.joda.time.DateTime dateTime4 = dateTime0.withCenturyOfEra(50);
        org.joda.time.DateTime dateTime5 = dateTime4.toDateTime();
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.DateTime dateTime7 = dateTime4.minus(readablePeriod6);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate((long) 100, dateTimeZone9);
        org.joda.time.LocalDate localDate12 = localDate10.plusDays(50);
        org.joda.time.Chronology chronology13 = localDate12.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate((long) 100, dateTimeZone16);
        org.joda.time.LocalDate localDate19 = localDate17.plusDays(50);
        int int20 = localDate17.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate22 = localDate17.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime();
        int int25 = dateTimeZone23.getOffset((org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.DateMidnight dateMidnight26 = localDate17.toDateMidnight(dateTimeZone23);
        long long28 = dateTimeZone23.convertUTCToLocal(60000L);
        org.joda.time.chrono.ZonedChronology zonedChronology29 = org.joda.time.chrono.ZonedChronology.getInstance(chronology13, dateTimeZone23);
        org.joda.time.DurationField durationField30 = zonedChronology29.weeks();
        org.joda.time.DateTimeField dateTimeField31 = zonedChronology29.weekyear();
        org.joda.time.DurationField durationField32 = zonedChronology29.weekyears();
        org.joda.time.DateTimeField dateTimeField33 = zonedChronology29.centuryOfEra();
        org.joda.time.DateTime dateTime34 = dateTime4.toDateTime((org.joda.time.Chronology) zonedChronology29);
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate37 = new org.joda.time.LocalDate((long) 100, dateTimeZone36);
        java.util.Date date38 = localDate37.toDate();
        org.joda.time.DateTime dateTime39 = localDate37.toDateTimeAtMidnight();
        int int40 = localDate37.getYearOfCentury();
        org.joda.time.DateTime dateTime41 = localDate37.toDateTimeAtCurrentTime();
        org.joda.time.LocalDate localDate43 = localDate37.minusDays(615);
        int[] intArray45 = zonedChronology29.get((org.joda.time.ReadablePartial) localDate43, (long) (-195));
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and dateTime34", (dateTime4.compareTo(dateTime34) == 0) == dateTime4.equals(dateTime34));
    }

    @Test
    public void test0070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0070");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 100, dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.plusDays(50);
        org.joda.time.Chronology chronology5 = localDate4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 100, dateTimeZone8);
        org.joda.time.LocalDate localDate11 = localDate9.plusDays(50);
        int int12 = localDate9.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate14 = localDate9.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        int int17 = dateTimeZone15.getOffset((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateMidnight dateMidnight18 = localDate9.toDateMidnight(dateTimeZone15);
        long long20 = dateTimeZone15.convertUTCToLocal(60000L);
        org.joda.time.chrono.ZonedChronology zonedChronology21 = org.joda.time.chrono.ZonedChronology.getInstance(chronology5, dateTimeZone15);
        org.joda.time.DurationField durationField22 = zonedChronology21.eras();
        org.joda.time.DateTimeField dateTimeField23 = zonedChronology21.weekyearOfCentury();
        org.joda.time.DurationField durationField24 = zonedChronology21.hours();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField22, durationField24, and durationField22", !(durationField22.compareTo(durationField24) == 0) || (Math.signum(durationField22.compareTo(durationField22)) == Math.signum(durationField24.compareTo(durationField22))));
    }

    @Test
    public void test0071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0071");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 100, dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.plusDays(50);
        org.joda.time.Chronology chronology5 = localDate4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 100, dateTimeZone8);
        org.joda.time.LocalDate localDate11 = localDate9.plusDays(50);
        int int12 = localDate9.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate14 = localDate9.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        int int17 = dateTimeZone15.getOffset((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateMidnight dateMidnight18 = localDate9.toDateMidnight(dateTimeZone15);
        long long20 = dateTimeZone15.convertUTCToLocal(60000L);
        org.joda.time.chrono.ZonedChronology zonedChronology21 = org.joda.time.chrono.ZonedChronology.getInstance(chronology5, dateTimeZone15);
        org.joda.time.DurationField durationField22 = zonedChronology21.weeks();
        org.joda.time.DateTimeField dateTimeField23 = zonedChronology21.year();
        org.joda.time.DateTimeZone dateTimeZone24 = zonedChronology21.getZone();
        org.joda.time.DateTimeField dateTimeField25 = zonedChronology21.weekyear();
        org.joda.time.DateTimeField dateTimeField26 = zonedChronology21.minuteOfHour();
        org.joda.time.DurationField durationField27 = zonedChronology21.hours();
        org.joda.time.DurationField durationField28 = zonedChronology21.weeks();
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology21.hourOfHalfday();
        org.joda.time.DurationField durationField30 = zonedChronology21.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField30, durationField22, and durationField27", !(durationField30.compareTo(durationField22) == 0) || (Math.signum(durationField30.compareTo(durationField27)) == Math.signum(durationField22.compareTo(durationField27))));
    }

    @Test
    public void test0072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0072");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 100, dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.plusDays(50);
        org.joda.time.Chronology chronology5 = localDate4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 100, dateTimeZone8);
        org.joda.time.LocalDate localDate11 = localDate9.plusDays(50);
        int int12 = localDate9.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate14 = localDate9.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        int int17 = dateTimeZone15.getOffset((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateMidnight dateMidnight18 = localDate9.toDateMidnight(dateTimeZone15);
        long long20 = dateTimeZone15.convertUTCToLocal(60000L);
        org.joda.time.chrono.ZonedChronology zonedChronology21 = org.joda.time.chrono.ZonedChronology.getInstance(chronology5, dateTimeZone15);
        org.joda.time.DurationField durationField22 = zonedChronology21.eras();
        org.joda.time.DateTimeField dateTimeField23 = zonedChronology21.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField24 = zonedChronology21.weekyearOfCentury();
        org.joda.time.DurationField durationField25 = zonedChronology21.halfdays();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField22, durationField25, and durationField22", !(durationField22.compareTo(durationField25) == 0) || (Math.signum(durationField22.compareTo(durationField22)) == Math.signum(durationField25.compareTo(durationField22))));
    }

    @Test
    public void test0073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0073");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 100, dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.plusDays(50);
        org.joda.time.Chronology chronology5 = localDate4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 100, dateTimeZone8);
        org.joda.time.LocalDate localDate11 = localDate9.plusDays(50);
        int int12 = localDate9.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate14 = localDate9.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        int int17 = dateTimeZone15.getOffset((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateMidnight dateMidnight18 = localDate9.toDateMidnight(dateTimeZone15);
        long long20 = dateTimeZone15.convertUTCToLocal(60000L);
        org.joda.time.chrono.ZonedChronology zonedChronology21 = org.joda.time.chrono.ZonedChronology.getInstance(chronology5, dateTimeZone15);
        org.joda.time.DurationField durationField22 = zonedChronology21.eras();
        org.joda.time.DateTimeField dateTimeField23 = zonedChronology21.minuteOfDay();
        org.joda.time.Chronology chronology24 = zonedChronology21.withUTC();
        org.joda.time.DateTimeField dateTimeField25 = zonedChronology21.monthOfYear();
        org.joda.time.DateTimeField dateTimeField26 = zonedChronology21.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField27 = zonedChronology21.minuteOfDay();
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate30 = localDate28.plusYears(19);
        org.joda.time.LocalDate.Property property31 = localDate30.dayOfYear();
        org.joda.time.Interval interval32 = localDate30.toInterval();
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate36 = new org.joda.time.LocalDate((long) 100, dateTimeZone35);
        org.joda.time.LocalDate localDate38 = localDate36.plusDays(50);
        org.joda.time.Chronology chronology39 = localDate38.getChronology();
        org.joda.time.DurationField durationField40 = chronology39.centuries();
        org.joda.time.DateTimeField dateTimeField41 = chronology39.hourOfDay();
        org.joda.time.LocalDate localDate42 = new org.joda.time.LocalDate((long) 11754349, chronology39);
        int[] intArray43 = localDate42.getValues();
        zonedChronology21.validate((org.joda.time.ReadablePartial) localDate30, intArray43);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField22 and durationField40", Math.signum(durationField22.compareTo(durationField40)) == -Math.signum(durationField40.compareTo(durationField22)));
    }

    @Test
    public void test0074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0074");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 100, dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.plusDays(50);
        org.joda.time.Chronology chronology5 = localDate4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 100, dateTimeZone8);
        org.joda.time.LocalDate localDate11 = localDate9.plusDays(50);
        int int12 = localDate9.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate14 = localDate9.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        int int17 = dateTimeZone15.getOffset((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateMidnight dateMidnight18 = localDate9.toDateMidnight(dateTimeZone15);
        long long20 = dateTimeZone15.convertUTCToLocal(60000L);
        org.joda.time.chrono.ZonedChronology zonedChronology21 = org.joda.time.chrono.ZonedChronology.getInstance(chronology5, dateTimeZone15);
        org.joda.time.DurationField durationField22 = zonedChronology21.eras();
        org.joda.time.DateTimeField dateTimeField23 = zonedChronology21.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField24 = zonedChronology21.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField25 = zonedChronology21.monthOfYear();
        org.joda.time.DurationField durationField26 = dateTimeField25.getRangeDurationField();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField22, durationField26, and durationField22", !(durationField22.compareTo(durationField26) == 0) || (Math.signum(durationField22.compareTo(durationField22)) == Math.signum(durationField26.compareTo(durationField22))));
    }

    @Test
    public void test0075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0075");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 100, dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.plusDays(50);
        org.joda.time.Chronology chronology5 = localDate4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 100, dateTimeZone8);
        org.joda.time.LocalDate localDate11 = localDate9.plusDays(50);
        int int12 = localDate9.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate14 = localDate9.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        int int17 = dateTimeZone15.getOffset((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateMidnight dateMidnight18 = localDate9.toDateMidnight(dateTimeZone15);
        long long20 = dateTimeZone15.convertUTCToLocal(60000L);
        org.joda.time.chrono.ZonedChronology zonedChronology21 = org.joda.time.chrono.ZonedChronology.getInstance(chronology5, dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField22 = zonedChronology21.yearOfCentury();
        org.joda.time.DurationField durationField23 = zonedChronology21.millis();
        org.joda.time.DurationField durationField24 = zonedChronology21.seconds();
        org.joda.time.DateTimeField dateTimeField25 = zonedChronology21.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate30 = new org.joda.time.LocalDate((long) 100, dateTimeZone29);
        org.joda.time.LocalDate localDate32 = localDate30.plusDays(50);
        org.joda.time.Chronology chronology33 = localDate32.getChronology();
        org.joda.time.DateTimeField dateTimeField34 = chronology33.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate37 = new org.joda.time.LocalDate((long) 100, dateTimeZone36);
        org.joda.time.LocalDate localDate39 = localDate37.plusDays(50);
        int int40 = localDate37.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate42 = localDate37.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime();
        int int45 = dateTimeZone43.getOffset((org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.DateMidnight dateMidnight46 = localDate37.toDateMidnight(dateTimeZone43);
        long long48 = dateTimeZone43.convertUTCToLocal(60000L);
        org.joda.time.chrono.ZonedChronology zonedChronology49 = org.joda.time.chrono.ZonedChronology.getInstance(chronology33, dateTimeZone43);
        org.joda.time.DateTimeField dateTimeField50 = zonedChronology49.yearOfCentury();
        org.joda.time.DurationField durationField51 = zonedChronology49.millis();
        org.joda.time.DurationField durationField52 = zonedChronology49.seconds();
        org.joda.time.DateTimeField dateTimeField53 = zonedChronology49.millisOfSecond();
        java.util.Locale locale55 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet56 = locale55.getUnicodeLocaleAttributes();
        java.lang.String str57 = locale55.toLanguageTag();
        boolean boolean58 = locale55.hasExtensions();
        java.lang.String str59 = dateTimeField53.getAsText((long) 11843814, locale55);
        long long60 = dateTimeField25.set(11825569L, "11842946", locale55);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on durationField23 and durationField51", (durationField23.compareTo(durationField51) == 0) == durationField23.equals(durationField51));
    }

    @Test
    public void test0076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0076");
        java.util.Locale locale0 = java.util.Locale.TAIWAN;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        calendar1.setMinimalDaysInFirstWeek(26168469);
        calendar1.setTimeInMillis((long) 11790335);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate((long) 100, dateTimeZone7);
        java.util.Date date9 = localDate8.toDate();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate((long) 100, dateTimeZone11);
        java.util.Date date13 = localDate12.toDate();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate((long) 100, dateTimeZone15);
        java.util.Date date17 = localDate16.toDate();
        boolean boolean18 = date13.after(date17);
        boolean boolean19 = date9.before(date13);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate((long) 100, dateTimeZone21);
        java.util.Date date23 = localDate22.toDate();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate((long) 100, dateTimeZone25);
        java.util.Date date27 = localDate26.toDate();
        boolean boolean28 = date23.after(date27);
        boolean boolean29 = date9.before(date23);
        int int30 = date23.getMinutes();
        java.time.Instant instant31 = date23.toInstant();
        java.util.Date date32 = java.util.Date.from(instant31);
        java.util.Date date33 = java.util.Date.from(instant31);
        calendar1.setTime(date33);
        java.util.Locale locale35 = java.util.Locale.TAIWAN;
        java.util.Calendar calendar36 = java.util.Calendar.getInstance(locale35);
        int int37 = calendar36.getWeeksInWeekYear();
        java.util.Locale locale40 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet41 = locale40.getUnicodeLocaleAttributes();
        java.lang.String str42 = locale40.toLanguageTag();
        boolean boolean43 = locale40.hasExtensions();
        java.util.Map<java.lang.String, java.lang.Integer> strMap44 = calendar36.getDisplayNames((int) (short) 10, 32772, locale40);
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate47 = new org.joda.time.LocalDate((long) 100, dateTimeZone46);
        java.util.Date date48 = localDate47.toDate();
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate51 = new org.joda.time.LocalDate((long) 100, dateTimeZone50);
        java.util.Date date52 = localDate51.toDate();
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate55 = new org.joda.time.LocalDate((long) 100, dateTimeZone54);
        java.util.Date date56 = localDate55.toDate();
        boolean boolean57 = date52.after(date56);
        boolean boolean58 = date48.before(date52);
        org.joda.time.DateTimeZone dateTimeZone60 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate61 = new org.joda.time.LocalDate((long) 100, dateTimeZone60);
        java.util.Date date62 = localDate61.toDate();
        org.joda.time.DateTimeZone dateTimeZone64 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate65 = new org.joda.time.LocalDate((long) 100, dateTimeZone64);
        java.util.Date date66 = localDate65.toDate();
        boolean boolean67 = date62.after(date66);
        boolean boolean68 = date48.before(date62);
        int int69 = date62.getMinutes();
        java.time.Instant instant70 = date62.toInstant();
        java.util.Date date71 = java.util.Date.from(instant70);
        calendar36.setTime(date71);
        int int73 = date33.compareTo(date71);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar1 and calendar36", (calendar1.compareTo(calendar36) == 0) == calendar1.equals(calendar36));
    }

    @Test
    public void test0077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0077");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 100, dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.plusDays(50);
        org.joda.time.Chronology chronology5 = localDate4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 100, dateTimeZone8);
        org.joda.time.LocalDate localDate11 = localDate9.plusDays(50);
        int int12 = localDate9.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate14 = localDate9.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        int int17 = dateTimeZone15.getOffset((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateMidnight dateMidnight18 = localDate9.toDateMidnight(dateTimeZone15);
        long long20 = dateTimeZone15.convertUTCToLocal(60000L);
        org.joda.time.chrono.ZonedChronology zonedChronology21 = org.joda.time.chrono.ZonedChronology.getInstance(chronology5, dateTimeZone15);
        org.joda.time.DurationField durationField22 = zonedChronology21.weeks();
        org.joda.time.DateTimeField dateTimeField23 = zonedChronology21.year();
        org.joda.time.DateTimeZone dateTimeZone24 = zonedChronology21.getZone();
        org.joda.time.DurationField durationField25 = zonedChronology21.months();
        org.joda.time.DateTimeField dateTimeField26 = zonedChronology21.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField27 = zonedChronology21.weekOfWeekyear();
        org.joda.time.DurationField durationField28 = zonedChronology21.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField28, durationField22, and durationField25", !(durationField28.compareTo(durationField22) == 0) || (Math.signum(durationField28.compareTo(durationField25)) == Math.signum(durationField22.compareTo(durationField25))));
    }

    @Test
    public void test0078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0078");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime2 = dateTime0.minusHours((int) (short) 100);
        org.joda.time.DateTime dateTime4 = dateTime0.withHourOfDay(10);
        java.util.GregorianCalendar gregorianCalendar5 = dateTime0.toGregorianCalendar();
        org.joda.time.Instant instant7 = new org.joda.time.Instant();
        org.joda.time.Instant instant9 = instant7.withMillis((long) 11);
        org.joda.time.Instant instant10 = instant9.toInstant();
        org.joda.time.Chronology chronology11 = instant9.getChronology();
        org.joda.time.DateTimeField dateTimeField12 = chronology11.clockhourOfHalfday();
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((long) 11760560, chronology11);
        org.joda.time.DateTime dateTime14 = dateTime0.withChronology(chronology11);
        org.joda.time.DateTimeField dateTimeField15 = chronology11.yearOfCentury();
        org.joda.time.DurationField durationField16 = chronology11.years();
        org.joda.time.DurationField durationField17 = chronology11.eras();
        org.joda.time.DateTimeField dateTimeField18 = chronology11.monthOfYear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField16 and durationField17", Math.signum(durationField16.compareTo(durationField17)) == -Math.signum(durationField17.compareTo(durationField16)));
    }

    @Test
    public void test0079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0079");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 100, dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.plusDays(50);
        org.joda.time.Chronology chronology5 = localDate4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 100, dateTimeZone8);
        org.joda.time.LocalDate localDate11 = localDate9.plusDays(50);
        int int12 = localDate9.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate14 = localDate9.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        int int17 = dateTimeZone15.getOffset((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateMidnight dateMidnight18 = localDate9.toDateMidnight(dateTimeZone15);
        long long20 = dateTimeZone15.convertUTCToLocal(60000L);
        org.joda.time.chrono.ZonedChronology zonedChronology21 = org.joda.time.chrono.ZonedChronology.getInstance(chronology5, dateTimeZone15);
        org.joda.time.DurationField durationField22 = zonedChronology21.eras();
        org.joda.time.DateTimeField dateTimeField23 = zonedChronology21.minuteOfDay();
        org.joda.time.Chronology chronology24 = zonedChronology21.withUTC();
        org.joda.time.DateTimeField dateTimeField25 = zonedChronology21.monthOfYear();
        org.joda.time.DateTimeField dateTimeField26 = zonedChronology21.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField27 = zonedChronology21.secondOfMinute();
        boolean boolean28 = dateTimeField27.isSupported();
        org.joda.time.DurationField durationField29 = dateTimeField27.getDurationField();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField22, durationField29, and durationField22", !(durationField22.compareTo(durationField29) == 0) || (Math.signum(durationField22.compareTo(durationField22)) == Math.signum(durationField29.compareTo(durationField22))));
    }

    @Test
    public void test0080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0080");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime2 = dateTime0.minusHours((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int4 = dateTime2.get(dateTimeFieldType3);
        org.joda.time.DateTime dateTime6 = dateTime2.minusMillis((int) '#');
        org.joda.time.DateTime dateTime8 = dateTime6.plusDays(11);
        org.joda.time.DateTime dateTime11 = dateTime6.withDurationAdded((long) (byte) 10, 11);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(59, 50);
        java.util.TimeZone timeZone17 = dateTimeZone16.toTimeZone();
        java.util.TimeZone timeZone18 = dateTimeZone16.toTimeZone();
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(72000000L, dateTimeZone16);
        int int21 = dateTimeZone16.getStandardOffset((long) 'u');
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate((long) 49, dateTimeZone16);
        org.joda.time.DateTime dateTime23 = dateTime11.withZone(dateTimeZone16);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate((long) 100, dateTimeZone25);
        org.joda.time.LocalDate localDate28 = localDate26.plusDays(50);
        org.joda.time.Chronology chronology29 = localDate28.getChronology();
        org.joda.time.DateTimeField dateTimeField30 = chronology29.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate((long) 100, dateTimeZone32);
        org.joda.time.LocalDate localDate35 = localDate33.plusDays(50);
        int int36 = localDate33.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate38 = localDate33.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime();
        int int41 = dateTimeZone39.getOffset((org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.DateMidnight dateMidnight42 = localDate33.toDateMidnight(dateTimeZone39);
        long long44 = dateTimeZone39.convertUTCToLocal(60000L);
        org.joda.time.chrono.ZonedChronology zonedChronology45 = org.joda.time.chrono.ZonedChronology.getInstance(chronology29, dateTimeZone39);
        org.joda.time.DurationField durationField46 = zonedChronology45.weeks();
        org.joda.time.DateTimeField dateTimeField47 = zonedChronology45.year();
        org.joda.time.DateTimeZone dateTimeZone48 = zonedChronology45.getZone();
        org.joda.time.DurationField durationField49 = zonedChronology45.months();
        org.joda.time.DateTimeField dateTimeField50 = zonedChronology45.clockhourOfHalfday();
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime((org.joda.time.Chronology) zonedChronology45);
        org.joda.time.LocalDate localDate52 = new org.joda.time.LocalDate((java.lang.Object) dateTime11, (org.joda.time.Chronology) zonedChronology45);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime0 and dateTime51", (dateTime0.compareTo(dateTime51) == 0) == dateTime0.equals(dateTime51));
    }

    @Test
    public void test0081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0081");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime2 = dateTime0.withMinuteOfHour(14);
        org.joda.time.DateTime dateTime4 = dateTime0.withCenturyOfEra(50);
        org.joda.time.DateTime dateTime5 = dateTime4.toDateTime();
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.DateTime dateTime7 = dateTime4.minus(readablePeriod6);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate((long) 100, dateTimeZone9);
        org.joda.time.LocalDate localDate12 = localDate10.plusDays(50);
        org.joda.time.Chronology chronology13 = localDate12.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate((long) 100, dateTimeZone16);
        org.joda.time.LocalDate localDate19 = localDate17.plusDays(50);
        int int20 = localDate17.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate22 = localDate17.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime();
        int int25 = dateTimeZone23.getOffset((org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.DateMidnight dateMidnight26 = localDate17.toDateMidnight(dateTimeZone23);
        long long28 = dateTimeZone23.convertUTCToLocal(60000L);
        org.joda.time.chrono.ZonedChronology zonedChronology29 = org.joda.time.chrono.ZonedChronology.getInstance(chronology13, dateTimeZone23);
        org.joda.time.DurationField durationField30 = zonedChronology29.weeks();
        org.joda.time.DateTimeField dateTimeField31 = zonedChronology29.weekyear();
        org.joda.time.DurationField durationField32 = zonedChronology29.weekyears();
        org.joda.time.DateTimeField dateTimeField33 = zonedChronology29.centuryOfEra();
        org.joda.time.DateTime dateTime34 = dateTime4.toDateTime((org.joda.time.Chronology) zonedChronology29);
        org.joda.time.DateTimeField dateTimeField35 = zonedChronology29.secondOfMinute();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and dateTime34", (dateTime4.compareTo(dateTime34) == 0) == dateTime4.equals(dateTime34));
    }

    @Test
    public void test0082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0082");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 100, dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.plusDays(50);
        org.joda.time.Chronology chronology5 = localDate4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 100, dateTimeZone8);
        org.joda.time.LocalDate localDate11 = localDate9.plusDays(50);
        int int12 = localDate9.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate14 = localDate9.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        int int17 = dateTimeZone15.getOffset((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateMidnight dateMidnight18 = localDate9.toDateMidnight(dateTimeZone15);
        long long20 = dateTimeZone15.convertUTCToLocal(60000L);
        org.joda.time.chrono.ZonedChronology zonedChronology21 = org.joda.time.chrono.ZonedChronology.getInstance(chronology5, dateTimeZone15);
        org.joda.time.DurationField durationField22 = zonedChronology21.eras();
        org.joda.time.DateTimeField dateTimeField23 = zonedChronology21.minuteOfDay();
        org.joda.time.Chronology chronology24 = zonedChronology21.withUTC();
        org.joda.time.DateTimeField dateTimeField25 = zonedChronology21.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField26 = zonedChronology21.hourOfDay();
        org.joda.time.DurationField durationField27 = zonedChronology21.seconds();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField22, durationField27, and durationField22", !(durationField22.compareTo(durationField27) == 0) || (Math.signum(durationField22.compareTo(durationField22)) == Math.signum(durationField27.compareTo(durationField22))));
    }

    @Test
    public void test0083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0083");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 100, dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.plusDays(50);
        org.joda.time.Chronology chronology5 = localDate4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 100, dateTimeZone8);
        org.joda.time.LocalDate localDate11 = localDate9.plusDays(50);
        int int12 = localDate9.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate14 = localDate9.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        int int17 = dateTimeZone15.getOffset((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateMidnight dateMidnight18 = localDate9.toDateMidnight(dateTimeZone15);
        long long20 = dateTimeZone15.convertUTCToLocal(60000L);
        org.joda.time.chrono.ZonedChronology zonedChronology21 = org.joda.time.chrono.ZonedChronology.getInstance(chronology5, dateTimeZone15);
        org.joda.time.DurationField durationField22 = zonedChronology21.eras();
        org.joda.time.DateTimeField dateTimeField23 = zonedChronology21.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField24 = zonedChronology21.clockhourOfDay();
        org.joda.time.DurationField durationField25 = zonedChronology21.weeks();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField22, durationField25, and durationField22", !(durationField22.compareTo(durationField25) == 0) || (Math.signum(durationField22.compareTo(durationField22)) == Math.signum(durationField25.compareTo(durationField22))));
    }

    @Test
    public void test0084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0084");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 100, dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.plusDays(50);
        org.joda.time.Chronology chronology5 = localDate4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 100, dateTimeZone8);
        org.joda.time.LocalDate localDate11 = localDate9.plusDays(50);
        int int12 = localDate9.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate14 = localDate9.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        int int17 = dateTimeZone15.getOffset((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateMidnight dateMidnight18 = localDate9.toDateMidnight(dateTimeZone15);
        long long20 = dateTimeZone15.convertUTCToLocal(60000L);
        org.joda.time.chrono.ZonedChronology zonedChronology21 = org.joda.time.chrono.ZonedChronology.getInstance(chronology5, dateTimeZone15);
        org.joda.time.DurationField durationField22 = zonedChronology21.eras();
        org.joda.time.DateTimeField dateTimeField23 = zonedChronology21.minuteOfDay();
        org.joda.time.Chronology chronology24 = zonedChronology21.withUTC();
        org.joda.time.DateTimeField dateTimeField25 = zonedChronology21.monthOfYear();
        org.joda.time.DateTimeField dateTimeField26 = zonedChronology21.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField27 = zonedChronology21.clockhourOfDay();
        org.joda.time.DurationField durationField28 = zonedChronology21.halfdays();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField22, durationField28, and durationField22", !(durationField22.compareTo(durationField28) == 0) || (Math.signum(durationField22.compareTo(durationField22)) == Math.signum(durationField28.compareTo(durationField22))));
    }

    @Test
    public void test0085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0085");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime2 = dateTime0.minusHours((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int4 = dateTime2.get(dateTimeFieldType3);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalTime localTime6 = new org.joda.time.LocalTime(dateTimeZone5);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalTime localTime8 = new org.joda.time.LocalTime(dateTimeZone7);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = localTime8.getFieldType((int) (byte) 1);
        int int11 = localTime6.get(dateTimeFieldType10);
        org.joda.time.DurationFieldType durationFieldType12 = dateTimeFieldType10.getDurationType();
        int int13 = dateTime2.get(dateTimeFieldType10);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate((long) 100, dateTimeZone15);
        org.joda.time.LocalDate localDate18 = localDate16.plusDays(50);
        org.joda.time.Chronology chronology19 = localDate18.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate((long) 100, dateTimeZone22);
        org.joda.time.LocalDate localDate25 = localDate23.plusDays(50);
        int int26 = localDate23.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate28 = localDate23.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime();
        int int31 = dateTimeZone29.getOffset((org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.DateMidnight dateMidnight32 = localDate23.toDateMidnight(dateTimeZone29);
        long long34 = dateTimeZone29.convertUTCToLocal(60000L);
        org.joda.time.chrono.ZonedChronology zonedChronology35 = org.joda.time.chrono.ZonedChronology.getInstance(chronology19, dateTimeZone29);
        org.joda.time.DurationField durationField36 = zonedChronology35.weeks();
        org.joda.time.DateTimeField dateTimeField37 = zonedChronology35.year();
        org.joda.time.DateTimeZone dateTimeZone38 = zonedChronology35.getZone();
        org.joda.time.DurationField durationField39 = zonedChronology35.months();
        org.joda.time.DateTimeField dateTimeField40 = zonedChronology35.clockhourOfHalfday();
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime((org.joda.time.Chronology) zonedChronology35);
        org.joda.time.DateTimeField dateTimeField42 = dateTimeFieldType10.getField((org.joda.time.Chronology) zonedChronology35);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime0 and dateTime41", (dateTime0.compareTo(dateTime41) == 0) == dateTime0.equals(dateTime41));
    }

    @Test
    public void test0086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0086");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 100, dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.plusDays(50);
        org.joda.time.Chronology chronology5 = localDate4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 100, dateTimeZone8);
        org.joda.time.LocalDate localDate11 = localDate9.plusDays(50);
        int int12 = localDate9.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate14 = localDate9.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        int int17 = dateTimeZone15.getOffset((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateMidnight dateMidnight18 = localDate9.toDateMidnight(dateTimeZone15);
        long long20 = dateTimeZone15.convertUTCToLocal(60000L);
        org.joda.time.chrono.ZonedChronology zonedChronology21 = org.joda.time.chrono.ZonedChronology.getInstance(chronology5, dateTimeZone15);
        org.joda.time.DurationField durationField22 = zonedChronology21.eras();
        org.joda.time.DateTimeField dateTimeField23 = zonedChronology21.minuteOfDay();
        org.joda.time.Chronology chronology24 = zonedChronology21.withUTC();
        org.joda.time.DateTimeField dateTimeField25 = zonedChronology21.minuteOfHour();
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        long long29 = zonedChronology21.add(readablePeriod26, (long) 37, 26161850);
        org.joda.time.DurationField durationField30 = zonedChronology21.eras();
        org.joda.time.DurationField durationField31 = zonedChronology21.minutes();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField22, durationField31, and durationField22", !(durationField22.compareTo(durationField31) == 0) || (Math.signum(durationField22.compareTo(durationField22)) == Math.signum(durationField31.compareTo(durationField22))));
    }

    @Test
    public void test0087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0087");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        int int1 = dateTime0.getDayOfYear();
        org.joda.time.DateTime dateTime3 = dateTime0.withYear(11751002);
        org.joda.time.DateTime dateTime5 = dateTime0.minusYears(100);
        org.joda.time.DateTimeZone dateTimeZone6 = dateTime5.getZone();
        org.joda.time.DateTime dateTime8 = dateTime5.plusSeconds((int) 'x');
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate((long) 100, dateTimeZone10);
        org.joda.time.LocalDate localDate13 = localDate11.plusDays(50);
        org.joda.time.Chronology chronology14 = localDate13.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate((long) 100, dateTimeZone17);
        org.joda.time.LocalDate localDate20 = localDate18.plusDays(50);
        int int21 = localDate18.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate23 = localDate18.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime();
        int int26 = dateTimeZone24.getOffset((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.DateMidnight dateMidnight27 = localDate18.toDateMidnight(dateTimeZone24);
        long long29 = dateTimeZone24.convertUTCToLocal(60000L);
        org.joda.time.chrono.ZonedChronology zonedChronology30 = org.joda.time.chrono.ZonedChronology.getInstance(chronology14, dateTimeZone24);
        org.joda.time.DurationField durationField31 = zonedChronology30.weeks();
        org.joda.time.DateTimeField dateTimeField32 = zonedChronology30.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        long long36 = zonedChronology30.add(readablePeriod33, (long) 2022, 0);
        org.joda.time.DurationField durationField37 = zonedChronology30.seconds();
        org.joda.time.MutableDateTime mutableDateTime38 = dateTime5.toMutableDateTime((org.joda.time.Chronology) zonedChronology30);
        org.joda.time.DateTimeField dateTimeField39 = zonedChronology30.secondOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime5 and mutableDateTime38", (dateTime5.compareTo(mutableDateTime38) == 0) == dateTime5.equals(mutableDateTime38));
    }

    @Test
    public void test0088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0088");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 100, dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.plusDays(50);
        org.joda.time.Chronology chronology5 = localDate4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 100, dateTimeZone8);
        org.joda.time.LocalDate localDate11 = localDate9.plusDays(50);
        int int12 = localDate9.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate14 = localDate9.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        int int17 = dateTimeZone15.getOffset((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateMidnight dateMidnight18 = localDate9.toDateMidnight(dateTimeZone15);
        long long20 = dateTimeZone15.convertUTCToLocal(60000L);
        org.joda.time.chrono.ZonedChronology zonedChronology21 = org.joda.time.chrono.ZonedChronology.getInstance(chronology5, dateTimeZone15);
        org.joda.time.DurationField durationField22 = zonedChronology21.weeks();
        org.joda.time.DateTimeField dateTimeField23 = zonedChronology21.weekyear();
        org.joda.time.DurationField durationField24 = zonedChronology21.weekyears();
        long long28 = zonedChronology21.add(0L, 11776486L, 0);
        org.joda.time.DurationField durationField29 = zonedChronology21.years();
        org.joda.time.DateTimeField dateTimeField30 = zonedChronology21.dayOfWeek();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on durationField24 and durationField29", (durationField24.compareTo(durationField29) == 0) == durationField24.equals(durationField29));
    }

    @Test
    public void test0089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0089");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime2 = dateTime0.minusHours((int) (short) 100);
        org.joda.time.DateTime dateTime4 = dateTime0.withHourOfDay(10);
        java.util.GregorianCalendar gregorianCalendar5 = dateTime0.toGregorianCalendar();
        org.joda.time.Instant instant7 = new org.joda.time.Instant();
        org.joda.time.Instant instant9 = instant7.withMillis((long) 11);
        org.joda.time.Instant instant10 = instant9.toInstant();
        org.joda.time.Chronology chronology11 = instant9.getChronology();
        org.joda.time.DateTimeField dateTimeField12 = chronology11.clockhourOfHalfday();
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((long) 11760560, chronology11);
        org.joda.time.DateTime dateTime14 = dateTime0.withChronology(chronology11);
        org.joda.time.DateTimeField dateTimeField15 = chronology11.yearOfCentury();
        org.joda.time.DurationField durationField16 = chronology11.years();
        org.joda.time.DurationField durationField17 = chronology11.eras();
        org.joda.time.DateTimeField dateTimeField18 = chronology11.millisOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField16 and durationField17", Math.signum(durationField16.compareTo(durationField17)) == -Math.signum(durationField17.compareTo(durationField16)));
    }

    @Test
    public void test0090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0090");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime2 = dateTime0.minusHours((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int4 = dateTime2.get(dateTimeFieldType3);
        org.joda.time.DateTime dateTime6 = dateTime2.minusMillis((int) '#');
        org.joda.time.DateTime dateTime8 = dateTime6.plusDays(11);
        org.joda.time.DateTime dateTime11 = dateTime6.withDurationAdded((long) (byte) 10, 11);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(59, 50);
        java.util.TimeZone timeZone17 = dateTimeZone16.toTimeZone();
        java.util.TimeZone timeZone18 = dateTimeZone16.toTimeZone();
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(72000000L, dateTimeZone16);
        int int21 = dateTimeZone16.getStandardOffset((long) 'u');
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate((long) 49, dateTimeZone16);
        org.joda.time.DateTime dateTime23 = dateTime11.withZone(dateTimeZone16);
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime();
        int int26 = dateTimeZone24.getOffset((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.DateTime dateTime27 = org.joda.time.DateTime.now(dateTimeZone24);
        org.joda.time.DateTime dateTime28 = dateTime23.withZone(dateTimeZone24);
        int int29 = dateTime28.getDayOfMonth();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime11 and dateTime23", (dateTime11.compareTo(dateTime23) == 0) == dateTime11.equals(dateTime23));
    }

    @Test
    public void test0091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0091");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(59, 50);
        java.util.TimeZone timeZone4 = dateTimeZone3.toTimeZone();
        java.util.TimeZone timeZone5 = dateTimeZone3.toTimeZone();
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(72000000L, dateTimeZone3);
        int int8 = dateTimeZone3.getStandardOffset((long) 'u');
        java.lang.String str10 = dateTimeZone3.getName(1645142400000L);
        org.joda.time.DateTime dateTime11 = org.joda.time.DateTime.now(dateTimeZone3);
        org.joda.time.DateTime dateTime12 = dateTime11.withTimeAtStartOfDay();
        org.joda.time.LocalTime localTime13 = dateTime11.toLocalTime();
        org.joda.time.DateTime dateTime15 = dateTime11.withMinuteOfHour(20);
        org.joda.time.Instant instant16 = new org.joda.time.Instant();
        org.joda.time.Instant instant18 = instant16.withMillis((long) 11);
        org.joda.time.Instant instant19 = instant18.toInstant();
        org.joda.time.Chronology chronology20 = instant18.getChronology();
        org.joda.time.DateTimeField dateTimeField21 = chronology20.clockhourOfHalfday();
        org.joda.time.MutableDateTime mutableDateTime22 = dateTime15.toMutableDateTime(chronology20);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime11 and instant16", (dateTime11.compareTo(instant16) == 0) == dateTime11.equals(instant16));
    }

    @Test
    public void test0092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0092");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 100, dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.plusDays(50);
        org.joda.time.Chronology chronology5 = localDate4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 100, dateTimeZone8);
        org.joda.time.LocalDate localDate11 = localDate9.plusDays(50);
        int int12 = localDate9.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate14 = localDate9.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        int int17 = dateTimeZone15.getOffset((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateMidnight dateMidnight18 = localDate9.toDateMidnight(dateTimeZone15);
        long long20 = dateTimeZone15.convertUTCToLocal(60000L);
        org.joda.time.chrono.ZonedChronology zonedChronology21 = org.joda.time.chrono.ZonedChronology.getInstance(chronology5, dateTimeZone15);
        org.joda.time.DurationField durationField22 = zonedChronology21.eras();
        org.joda.time.DateTimeField dateTimeField23 = zonedChronology21.minuteOfDay();
        org.joda.time.Chronology chronology24 = zonedChronology21.withUTC();
        org.joda.time.DateTimeField dateTimeField25 = zonedChronology21.monthOfYear();
        org.joda.time.DateTimeField dateTimeField26 = zonedChronology21.minuteOfDay();
        org.joda.time.DurationField durationField27 = zonedChronology21.hours();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField22, durationField27, and durationField22", !(durationField22.compareTo(durationField27) == 0) || (Math.signum(durationField22.compareTo(durationField22)) == Math.signum(durationField27.compareTo(durationField22))));
    }

    @Test
    public void test0093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0093");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 100, dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.plusDays(50);
        org.joda.time.Chronology chronology5 = localDate4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 100, dateTimeZone8);
        org.joda.time.LocalDate localDate11 = localDate9.plusDays(50);
        int int12 = localDate9.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate14 = localDate9.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        int int17 = dateTimeZone15.getOffset((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateMidnight dateMidnight18 = localDate9.toDateMidnight(dateTimeZone15);
        long long20 = dateTimeZone15.convertUTCToLocal(60000L);
        org.joda.time.chrono.ZonedChronology zonedChronology21 = org.joda.time.chrono.ZonedChronology.getInstance(chronology5, dateTimeZone15);
        org.joda.time.DurationField durationField22 = zonedChronology21.eras();
        org.joda.time.DateTimeField dateTimeField23 = zonedChronology21.minuteOfDay();
        org.joda.time.Chronology chronology24 = zonedChronology21.withUTC();
        org.joda.time.DateTimeField dateTimeField25 = zonedChronology21.monthOfYear();
        org.joda.time.DateTimeField dateTimeField26 = zonedChronology21.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField27 = zonedChronology21.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField28 = zonedChronology21.weekOfWeekyear();
        org.joda.time.DurationField durationField29 = zonedChronology21.hours();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField22, durationField29, and durationField22", !(durationField22.compareTo(durationField29) == 0) || (Math.signum(durationField22.compareTo(durationField22)) == Math.signum(durationField29.compareTo(durationField22))));
    }

    @Test
    public void test0094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0094");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 100, dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.plusDays(50);
        org.joda.time.Chronology chronology5 = localDate4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 100, dateTimeZone8);
        org.joda.time.LocalDate localDate11 = localDate9.plusDays(50);
        int int12 = localDate9.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate14 = localDate9.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        int int17 = dateTimeZone15.getOffset((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateMidnight dateMidnight18 = localDate9.toDateMidnight(dateTimeZone15);
        long long20 = dateTimeZone15.convertUTCToLocal(60000L);
        org.joda.time.chrono.ZonedChronology zonedChronology21 = org.joda.time.chrono.ZonedChronology.getInstance(chronology5, dateTimeZone15);
        org.joda.time.DurationField durationField22 = zonedChronology21.eras();
        org.joda.time.DateTimeField dateTimeField23 = zonedChronology21.minuteOfDay();
        org.joda.time.Chronology chronology24 = zonedChronology21.withUTC();
        org.joda.time.DateTimeField dateTimeField25 = zonedChronology21.monthOfYear();
        org.joda.time.DateTimeField dateTimeField26 = zonedChronology21.dayOfYear();
        org.joda.time.DateTimeField dateTimeField27 = zonedChronology21.centuryOfEra();
        org.joda.time.DurationField durationField28 = zonedChronology21.halfdays();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField22, durationField28, and durationField22", !(durationField22.compareTo(durationField28) == 0) || (Math.signum(durationField22.compareTo(durationField22)) == Math.signum(durationField28.compareTo(durationField22))));
    }

    @Test
    public void test0095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0095");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 100, dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.plusDays(50);
        org.joda.time.Chronology chronology5 = localDate4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 100, dateTimeZone8);
        org.joda.time.LocalDate localDate11 = localDate9.plusDays(50);
        int int12 = localDate9.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate14 = localDate9.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        int int17 = dateTimeZone15.getOffset((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateMidnight dateMidnight18 = localDate9.toDateMidnight(dateTimeZone15);
        long long20 = dateTimeZone15.convertUTCToLocal(60000L);
        org.joda.time.chrono.ZonedChronology zonedChronology21 = org.joda.time.chrono.ZonedChronology.getInstance(chronology5, dateTimeZone15);
        org.joda.time.DurationField durationField22 = zonedChronology21.weeks();
        org.joda.time.DateTimeField dateTimeField23 = zonedChronology21.year();
        org.joda.time.DateTimeZone dateTimeZone24 = zonedChronology21.getZone();
        org.joda.time.DateTimeField dateTimeField25 = zonedChronology21.weekyear();
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        long long29 = zonedChronology21.add(readablePeriod26, (long) 11783576, 26163273);
        org.joda.time.DateTimeField dateTimeField30 = zonedChronology21.weekyear();
        org.joda.time.DurationField durationField31 = zonedChronology21.eras();
        org.joda.time.DateTimeField dateTimeField32 = zonedChronology21.hourOfHalfday();
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField22 and durationField31", Math.signum(durationField22.compareTo(durationField31)) == -Math.signum(durationField31.compareTo(durationField22)));
    }

    @Test
    public void test0096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0096");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 100, dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.plusDays(50);
        org.joda.time.Chronology chronology5 = localDate4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 100, dateTimeZone8);
        org.joda.time.LocalDate localDate11 = localDate9.plusDays(50);
        int int12 = localDate9.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate14 = localDate9.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        int int17 = dateTimeZone15.getOffset((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateMidnight dateMidnight18 = localDate9.toDateMidnight(dateTimeZone15);
        long long20 = dateTimeZone15.convertUTCToLocal(60000L);
        org.joda.time.chrono.ZonedChronology zonedChronology21 = org.joda.time.chrono.ZonedChronology.getInstance(chronology5, dateTimeZone15);
        org.joda.time.DurationField durationField22 = zonedChronology21.eras();
        org.joda.time.DateTimeField dateTimeField23 = zonedChronology21.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField24 = zonedChronology21.weekyearOfCentury();
        org.joda.time.DurationField durationField25 = zonedChronology21.hours();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField22, durationField25, and durationField22", !(durationField22.compareTo(durationField25) == 0) || (Math.signum(durationField22.compareTo(durationField22)) == Math.signum(durationField25.compareTo(durationField22))));
    }

    @Test
    public void test0097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0097");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 100, dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.plusDays(50);
        org.joda.time.Chronology chronology5 = localDate4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 100, dateTimeZone8);
        org.joda.time.LocalDate localDate11 = localDate9.plusDays(50);
        int int12 = localDate9.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate14 = localDate9.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        int int17 = dateTimeZone15.getOffset((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateMidnight dateMidnight18 = localDate9.toDateMidnight(dateTimeZone15);
        long long20 = dateTimeZone15.convertUTCToLocal(60000L);
        org.joda.time.chrono.ZonedChronology zonedChronology21 = org.joda.time.chrono.ZonedChronology.getInstance(chronology5, dateTimeZone15);
        org.joda.time.DurationField durationField22 = zonedChronology21.eras();
        org.joda.time.DateTimeField dateTimeField23 = zonedChronology21.minuteOfDay();
        org.joda.time.Chronology chronology24 = zonedChronology21.withUTC();
        org.joda.time.DateTimeField dateTimeField25 = zonedChronology21.monthOfYear();
        org.joda.time.DateTimeField dateTimeField26 = zonedChronology21.minuteOfDay();
        org.joda.time.DurationField durationField27 = zonedChronology21.months();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField22, durationField27, and durationField22", !(durationField22.compareTo(durationField27) == 0) || (Math.signum(durationField22.compareTo(durationField22)) == Math.signum(durationField27.compareTo(durationField22))));
    }

    @Test
    public void test0098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0098");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 100, dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.plusDays(50);
        org.joda.time.Chronology chronology5 = localDate4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 100, dateTimeZone8);
        org.joda.time.LocalDate localDate11 = localDate9.plusDays(50);
        int int12 = localDate9.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate14 = localDate9.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        int int17 = dateTimeZone15.getOffset((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateMidnight dateMidnight18 = localDate9.toDateMidnight(dateTimeZone15);
        long long20 = dateTimeZone15.convertUTCToLocal(60000L);
        org.joda.time.chrono.ZonedChronology zonedChronology21 = org.joda.time.chrono.ZonedChronology.getInstance(chronology5, dateTimeZone15);
        org.joda.time.DurationField durationField22 = zonedChronology21.weeks();
        org.joda.time.DateTimeField dateTimeField23 = zonedChronology21.weekyear();
        org.joda.time.DateTimeField dateTimeField24 = zonedChronology21.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField25 = zonedChronology21.weekOfWeekyear();
        org.joda.time.DurationField durationField26 = zonedChronology21.eras();
        org.joda.time.DurationField durationField27 = zonedChronology21.weekyears();
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField22 and durationField26", Math.signum(durationField22.compareTo(durationField26)) == -Math.signum(durationField26.compareTo(durationField22)));
    }

    @Test
    public void test0099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0099");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 100, dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.plusDays(50);
        org.joda.time.Chronology chronology5 = localDate4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 100, dateTimeZone8);
        org.joda.time.LocalDate localDate11 = localDate9.plusDays(50);
        int int12 = localDate9.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate14 = localDate9.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        int int17 = dateTimeZone15.getOffset((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateMidnight dateMidnight18 = localDate9.toDateMidnight(dateTimeZone15);
        long long20 = dateTimeZone15.convertUTCToLocal(60000L);
        org.joda.time.chrono.ZonedChronology zonedChronology21 = org.joda.time.chrono.ZonedChronology.getInstance(chronology5, dateTimeZone15);
        org.joda.time.DurationField durationField22 = zonedChronology21.weeks();
        org.joda.time.DateTimeField dateTimeField23 = zonedChronology21.year();
        org.joda.time.DateTimeZone dateTimeZone24 = zonedChronology21.getZone();
        org.joda.time.DateTimeField dateTimeField25 = zonedChronology21.weekyear();
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        long long29 = zonedChronology21.add(readablePeriod26, (long) 11783576, 26163273);
        org.joda.time.DateTimeField dateTimeField30 = zonedChronology21.weekyear();
        org.joda.time.DurationField durationField31 = zonedChronology21.eras();
        org.joda.time.DurationField durationField32 = zonedChronology21.millis();
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField22 and durationField31", Math.signum(durationField22.compareTo(durationField31)) == -Math.signum(durationField31.compareTo(durationField22)));
    }

    @Test
    public void test0100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0100");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 100, dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.plusDays(50);
        org.joda.time.Chronology chronology5 = localDate4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 100, dateTimeZone8);
        org.joda.time.LocalDate localDate11 = localDate9.plusDays(50);
        int int12 = localDate9.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate14 = localDate9.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        int int17 = dateTimeZone15.getOffset((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateMidnight dateMidnight18 = localDate9.toDateMidnight(dateTimeZone15);
        long long20 = dateTimeZone15.convertUTCToLocal(60000L);
        org.joda.time.chrono.ZonedChronology zonedChronology21 = org.joda.time.chrono.ZonedChronology.getInstance(chronology5, dateTimeZone15);
        org.joda.time.DurationField durationField22 = zonedChronology21.eras();
        org.joda.time.DateTimeField dateTimeField23 = zonedChronology21.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField24 = zonedChronology21.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField25 = zonedChronology21.monthOfYear();
        org.joda.time.DateTimeField dateTimeField26 = zonedChronology21.yearOfCentury();
        org.joda.time.DurationField durationField27 = zonedChronology21.halfdays();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField22, durationField27, and durationField22", !(durationField22.compareTo(durationField27) == 0) || (Math.signum(durationField22.compareTo(durationField22)) == Math.signum(durationField27.compareTo(durationField22))));
    }

    @Test
    public void test0101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0101");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 100, dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.plusDays(50);
        org.joda.time.Chronology chronology5 = localDate4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 100, dateTimeZone8);
        org.joda.time.LocalDate localDate11 = localDate9.plusDays(50);
        int int12 = localDate9.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate14 = localDate9.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        int int17 = dateTimeZone15.getOffset((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateMidnight dateMidnight18 = localDate9.toDateMidnight(dateTimeZone15);
        long long20 = dateTimeZone15.convertUTCToLocal(60000L);
        org.joda.time.chrono.ZonedChronology zonedChronology21 = org.joda.time.chrono.ZonedChronology.getInstance(chronology5, dateTimeZone15);
        org.joda.time.DurationField durationField22 = zonedChronology21.weeks();
        org.joda.time.DateTimeField dateTimeField23 = zonedChronology21.year();
        org.joda.time.DateTimeZone dateTimeZone24 = zonedChronology21.getZone();
        org.joda.time.DateTimeField dateTimeField25 = zonedChronology21.halfdayOfDay();
        org.joda.time.DurationField durationField26 = zonedChronology21.hours();
        org.joda.time.DurationField durationField27 = zonedChronology21.months();
        org.joda.time.DateTimeField dateTimeField28 = zonedChronology21.monthOfYear();
        org.joda.time.DurationField durationField29 = zonedChronology21.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField29, durationField22, and durationField26", !(durationField29.compareTo(durationField22) == 0) || (Math.signum(durationField29.compareTo(durationField26)) == Math.signum(durationField22.compareTo(durationField26))));
    }

    @Test
    public void test0102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0102");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 100, dateTimeZone2);
        org.joda.time.LocalDate localDate5 = localDate3.plusDays(50);
        org.joda.time.Chronology chronology6 = localDate5.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate((long) 100, dateTimeZone9);
        org.joda.time.LocalDate localDate12 = localDate10.plusDays(50);
        int int13 = localDate10.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate15 = localDate10.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime();
        int int18 = dateTimeZone16.getOffset((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.DateMidnight dateMidnight19 = localDate10.toDateMidnight(dateTimeZone16);
        long long21 = dateTimeZone16.convertUTCToLocal(60000L);
        org.joda.time.chrono.ZonedChronology zonedChronology22 = org.joda.time.chrono.ZonedChronology.getInstance(chronology6, dateTimeZone16);
        org.joda.time.DurationField durationField23 = zonedChronology22.weeks();
        org.joda.time.DateTimeField dateTimeField24 = zonedChronology22.weekyear();
        org.joda.time.DurationField durationField25 = zonedChronology22.weekyears();
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate((long) 100, dateTimeZone27);
        org.joda.time.LocalDate localDate30 = localDate28.plusDays(50);
        org.joda.time.Chronology chronology31 = localDate30.getChronology();
        org.joda.time.LocalDate.Property property32 = localDate30.era();
        org.joda.time.DateTimeField dateTimeField33 = property32.getField();
        org.joda.time.LocalDate localDate34 = property32.getLocalDate();
        org.joda.time.LocalDate localDate36 = localDate34.withYear(26160535);
        org.joda.time.LocalDate localDate38 = localDate36.minusYears(11766550);
        int[] intArray40 = zonedChronology22.get((org.joda.time.ReadablePartial) localDate38, (long) 11764640);
        java.lang.String str41 = zonedChronology22.toString();
        org.joda.time.DateTimeField dateTimeField42 = zonedChronology22.monthOfYear();
        org.joda.time.DurationField durationField43 = zonedChronology22.years();
        org.joda.time.LocalTime localTime44 = org.joda.time.LocalTime.fromMillisOfDay((long) 11839594, (org.joda.time.Chronology) zonedChronology22);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on durationField25 and durationField43", (durationField25.compareTo(durationField43) == 0) == durationField25.equals(durationField43));
    }

    @Test
    public void test0103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0103");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 100, dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.plusDays(50);
        org.joda.time.Chronology chronology5 = localDate4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 100, dateTimeZone8);
        org.joda.time.LocalDate localDate11 = localDate9.plusDays(50);
        int int12 = localDate9.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate14 = localDate9.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        int int17 = dateTimeZone15.getOffset((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateMidnight dateMidnight18 = localDate9.toDateMidnight(dateTimeZone15);
        long long20 = dateTimeZone15.convertUTCToLocal(60000L);
        org.joda.time.chrono.ZonedChronology zonedChronology21 = org.joda.time.chrono.ZonedChronology.getInstance(chronology5, dateTimeZone15);
        org.joda.time.DurationField durationField22 = zonedChronology21.eras();
        org.joda.time.DateTimeField dateTimeField23 = zonedChronology21.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField24 = zonedChronology21.weekyearOfCentury();
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        long long28 = zonedChronology21.add(readablePeriod25, (long) 38, 11809825);
        org.joda.time.DurationField durationField29 = zonedChronology21.days();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField22, durationField29, and durationField22", !(durationField22.compareTo(durationField29) == 0) || (Math.signum(durationField22.compareTo(durationField22)) == Math.signum(durationField29.compareTo(durationField22))));
    }

    @Test
    public void test0104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0104");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.halfdays();
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 100, dateTimeZone2);
        org.joda.time.LocalDate localDate5 = localDate3.plusDays(50);
        org.joda.time.Chronology chronology6 = localDate5.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.weekyearOfCentury();
        org.joda.time.DurationField durationField8 = durationFieldType0.getField(chronology6);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate((long) 100, dateTimeZone10);
        org.joda.time.LocalDate localDate13 = localDate11.plusDays(50);
        org.joda.time.Chronology chronology14 = localDate13.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate((long) 100, dateTimeZone17);
        org.joda.time.LocalDate localDate20 = localDate18.plusDays(50);
        int int21 = localDate18.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate23 = localDate18.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime();
        int int26 = dateTimeZone24.getOffset((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.DateMidnight dateMidnight27 = localDate18.toDateMidnight(dateTimeZone24);
        long long29 = dateTimeZone24.convertUTCToLocal(60000L);
        org.joda.time.chrono.ZonedChronology zonedChronology30 = org.joda.time.chrono.ZonedChronology.getInstance(chronology14, dateTimeZone24);
        org.joda.time.DurationField durationField31 = zonedChronology30.eras();
        org.joda.time.DateTimeField dateTimeField32 = zonedChronology30.weekyear();
        boolean boolean33 = durationFieldType0.isSupported((org.joda.time.Chronology) zonedChronology30);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField8 and durationField31", Math.signum(durationField8.compareTo(durationField31)) == -Math.signum(durationField31.compareTo(durationField8)));
    }

    @Test
    public void test0105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0105");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.eras();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.minusHours((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int5 = dateTime3.get(dateTimeFieldType4);
        org.joda.time.DateTime dateTime7 = dateTime3.minusMillis((int) '#');
        boolean boolean8 = dateTime3.isBeforeNow();
        org.joda.time.DateTime dateTime10 = dateTime3.plusMillis((int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate((long) 100, dateTimeZone12);
        org.joda.time.LocalDate localDate15 = localDate13.plusDays(50);
        org.joda.time.Chronology chronology16 = localDate15.getChronology();
        org.joda.time.DateTimeField dateTimeField17 = chronology16.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate((long) 100, dateTimeZone19);
        org.joda.time.LocalDate localDate22 = localDate20.plusDays(50);
        int int23 = localDate20.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate25 = localDate20.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime();
        int int28 = dateTimeZone26.getOffset((org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.DateMidnight dateMidnight29 = localDate20.toDateMidnight(dateTimeZone26);
        long long31 = dateTimeZone26.convertUTCToLocal(60000L);
        org.joda.time.chrono.ZonedChronology zonedChronology32 = org.joda.time.chrono.ZonedChronology.getInstance(chronology16, dateTimeZone26);
        org.joda.time.DateTimeField dateTimeField33 = zonedChronology32.yearOfCentury();
        org.joda.time.DurationField durationField34 = zonedChronology32.millis();
        org.joda.time.DurationField durationField35 = zonedChronology32.seconds();
        org.joda.time.DateTimeField dateTimeField36 = zonedChronology32.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField37 = zonedChronology32.hourOfDay();
        org.joda.time.DateTimeField dateTimeField38 = zonedChronology32.year();
        org.joda.time.DateTime dateTime39 = dateTime3.withChronology((org.joda.time.Chronology) zonedChronology32);
        boolean boolean40 = durationFieldType0.isSupported((org.joda.time.Chronology) zonedChronology32);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and dateTime39", (dateTime3.compareTo(dateTime39) == 0) == dateTime3.equals(dateTime39));
    }

    @Test
    public void test0106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0106");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 100, dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.plusDays(50);
        org.joda.time.Chronology chronology5 = localDate4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 100, dateTimeZone8);
        org.joda.time.LocalDate localDate11 = localDate9.plusDays(50);
        int int12 = localDate9.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate14 = localDate9.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        int int17 = dateTimeZone15.getOffset((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateMidnight dateMidnight18 = localDate9.toDateMidnight(dateTimeZone15);
        long long20 = dateTimeZone15.convertUTCToLocal(60000L);
        org.joda.time.chrono.ZonedChronology zonedChronology21 = org.joda.time.chrono.ZonedChronology.getInstance(chronology5, dateTimeZone15);
        org.joda.time.DurationField durationField22 = zonedChronology21.eras();
        org.joda.time.DateTimeField dateTimeField23 = zonedChronology21.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField24 = zonedChronology21.weekyearOfCentury();
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        long long28 = zonedChronology21.add(readablePeriod25, (long) 38, 11809825);
        org.joda.time.DurationField durationField29 = zonedChronology21.weeks();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField22, durationField29, and durationField22", !(durationField22.compareTo(durationField29) == 0) || (Math.signum(durationField22.compareTo(durationField22)) == Math.signum(durationField29.compareTo(durationField22))));
    }

    @Test
    public void test0107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0107");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime2 = dateTime0.minusHours((int) (short) 100);
        org.joda.time.TimeOfDay timeOfDay3 = dateTime2.toTimeOfDay();
        org.joda.time.DateTime.Property property4 = dateTime2.yearOfEra();
        org.joda.time.DateTime dateTime6 = property4.setCopy(26156834);
        org.joda.time.DateTime dateTime8 = property4.addToCopy((long) 1970);
        org.joda.time.DateTime.Property property9 = dateTime8.hourOfDay();
        org.joda.time.DateTimeField dateTimeField10 = property9.getField();
        org.joda.time.DateTime dateTime12 = property9.addWrapFieldToCopy(18);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(59, 50);
        java.lang.String str17 = dateTimeZone16.getID();
        org.joda.time.LocalTime localTime18 = new org.joda.time.LocalTime((long) 26150856, dateTimeZone16);
        java.lang.String str20 = dateTimeZone16.getShortName(2022L);
        org.joda.time.DateTime dateTime21 = dateTime12.withZone(dateTimeZone16);
        java.lang.String str23 = dateTimeZone16.getName((long) 75);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime12 and dateTime21", (dateTime12.compareTo(dateTime21) == 0) == dateTime12.equals(dateTime21));
    }

    @Test
    public void test0108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0108");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 100, dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.plusDays(50);
        org.joda.time.Chronology chronology5 = localDate4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 100, dateTimeZone8);
        org.joda.time.LocalDate localDate11 = localDate9.plusDays(50);
        int int12 = localDate9.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate14 = localDate9.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        int int17 = dateTimeZone15.getOffset((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateMidnight dateMidnight18 = localDate9.toDateMidnight(dateTimeZone15);
        long long20 = dateTimeZone15.convertUTCToLocal(60000L);
        org.joda.time.chrono.ZonedChronology zonedChronology21 = org.joda.time.chrono.ZonedChronology.getInstance(chronology5, dateTimeZone15);
        org.joda.time.DurationField durationField22 = zonedChronology21.eras();
        org.joda.time.DateTimeField dateTimeField23 = zonedChronology21.minuteOfDay();
        org.joda.time.Chronology chronology24 = zonedChronology21.withUTC();
        org.joda.time.DateTimeField dateTimeField25 = zonedChronology21.monthOfYear();
        org.joda.time.DateTimeField dateTimeField26 = zonedChronology21.yearOfEra();
        org.joda.time.DurationField durationField27 = zonedChronology21.millis();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField22, durationField27, and durationField22", !(durationField22.compareTo(durationField27) == 0) || (Math.signum(durationField22.compareTo(durationField22)) == Math.signum(durationField27.compareTo(durationField22))));
    }

    @Test
    public void test0109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0109");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 100, dateTimeZone2);
        org.joda.time.LocalDate localDate5 = localDate3.plusDays(50);
        org.joda.time.Chronology chronology6 = localDate5.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate((long) 100, dateTimeZone9);
        org.joda.time.LocalDate localDate12 = localDate10.plusDays(50);
        int int13 = localDate10.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate15 = localDate10.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime();
        int int18 = dateTimeZone16.getOffset((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.DateMidnight dateMidnight19 = localDate10.toDateMidnight(dateTimeZone16);
        long long21 = dateTimeZone16.convertUTCToLocal(60000L);
        org.joda.time.chrono.ZonedChronology zonedChronology22 = org.joda.time.chrono.ZonedChronology.getInstance(chronology6, dateTimeZone16);
        org.joda.time.DurationField durationField23 = zonedChronology22.weeks();
        org.joda.time.DateTimeField dateTimeField24 = zonedChronology22.weekyear();
        org.joda.time.DurationField durationField25 = zonedChronology22.weekyears();
        org.joda.time.DateTimeField dateTimeField26 = zonedChronology22.year();
        org.joda.time.DateTimeZone dateTimeZone27 = zonedChronology22.getZone();
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate(8541846766L, (org.joda.time.Chronology) zonedChronology22);
        org.joda.time.Chronology chronology29 = zonedChronology22.withUTC();
        org.joda.time.DateTimeField dateTimeField30 = zonedChronology22.millisOfDay();
        org.joda.time.DurationField durationField31 = zonedChronology22.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField31, durationField23, and durationField25", !(durationField31.compareTo(durationField23) == 0) || (Math.signum(durationField31.compareTo(durationField25)) == Math.signum(durationField23.compareTo(durationField25))));
    }

    @Test
    public void test0110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0110");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 100, dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.plusDays(50);
        org.joda.time.Chronology chronology5 = localDate4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 100, dateTimeZone8);
        org.joda.time.LocalDate localDate11 = localDate9.plusDays(50);
        int int12 = localDate9.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate14 = localDate9.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        int int17 = dateTimeZone15.getOffset((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateMidnight dateMidnight18 = localDate9.toDateMidnight(dateTimeZone15);
        long long20 = dateTimeZone15.convertUTCToLocal(60000L);
        org.joda.time.chrono.ZonedChronology zonedChronology21 = org.joda.time.chrono.ZonedChronology.getInstance(chronology5, dateTimeZone15);
        org.joda.time.DurationField durationField22 = zonedChronology21.eras();
        org.joda.time.DateTimeField dateTimeField23 = zonedChronology21.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField24 = zonedChronology21.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField25 = zonedChronology21.monthOfYear();
        org.joda.time.DateTimeField dateTimeField26 = zonedChronology21.yearOfCentury();
        org.joda.time.DurationField durationField27 = zonedChronology21.seconds();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField22, durationField27, and durationField22", !(durationField22.compareTo(durationField27) == 0) || (Math.signum(durationField22.compareTo(durationField22)) == Math.signum(durationField27.compareTo(durationField22))));
    }

    @Test
    public void test0111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0111");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 100, dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.plusDays(50);
        org.joda.time.Chronology chronology5 = localDate4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 100, dateTimeZone8);
        org.joda.time.LocalDate localDate11 = localDate9.plusDays(50);
        int int12 = localDate9.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate14 = localDate9.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        int int17 = dateTimeZone15.getOffset((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateMidnight dateMidnight18 = localDate9.toDateMidnight(dateTimeZone15);
        long long20 = dateTimeZone15.convertUTCToLocal(60000L);
        org.joda.time.chrono.ZonedChronology zonedChronology21 = org.joda.time.chrono.ZonedChronology.getInstance(chronology5, dateTimeZone15);
        org.joda.time.DurationField durationField22 = zonedChronology21.eras();
        org.joda.time.DateTimeField dateTimeField23 = zonedChronology21.minuteOfDay();
        org.joda.time.Chronology chronology24 = zonedChronology21.withUTC();
        org.joda.time.DateTimeField dateTimeField25 = zonedChronology21.monthOfYear();
        org.joda.time.DateTimeField dateTimeField26 = zonedChronology21.minuteOfDay();
        org.joda.time.DurationField durationField27 = zonedChronology21.millis();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField22, durationField27, and durationField22", !(durationField22.compareTo(durationField27) == 0) || (Math.signum(durationField22.compareTo(durationField22)) == Math.signum(durationField27.compareTo(durationField22))));
    }

    @Test
    public void test0112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0112");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 100, dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.plusDays(50);
        org.joda.time.Chronology chronology5 = localDate4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 100, dateTimeZone8);
        org.joda.time.LocalDate localDate11 = localDate9.plusDays(50);
        int int12 = localDate9.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate14 = localDate9.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        int int17 = dateTimeZone15.getOffset((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateMidnight dateMidnight18 = localDate9.toDateMidnight(dateTimeZone15);
        long long20 = dateTimeZone15.convertUTCToLocal(60000L);
        org.joda.time.chrono.ZonedChronology zonedChronology21 = org.joda.time.chrono.ZonedChronology.getInstance(chronology5, dateTimeZone15);
        org.joda.time.DurationField durationField22 = zonedChronology21.weeks();
        org.joda.time.DateTimeField dateTimeField23 = zonedChronology21.weekyear();
        org.joda.time.DurationField durationField24 = zonedChronology21.weekyears();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate((long) 100, dateTimeZone26);
        org.joda.time.LocalDate localDate29 = localDate27.plusDays(50);
        org.joda.time.Chronology chronology30 = localDate29.getChronology();
        org.joda.time.LocalDate.Property property31 = localDate29.era();
        org.joda.time.DateTimeField dateTimeField32 = property31.getField();
        org.joda.time.LocalDate localDate33 = property31.getLocalDate();
        org.joda.time.LocalDate localDate35 = localDate33.withYear(26160535);
        org.joda.time.LocalDate localDate37 = localDate35.minusYears(11766550);
        int[] intArray39 = zonedChronology21.get((org.joda.time.ReadablePartial) localDate37, (long) 11764640);
        java.lang.String str40 = zonedChronology21.toString();
        org.joda.time.DateTimeField dateTimeField41 = zonedChronology21.monthOfYear();
        org.joda.time.DurationField durationField42 = zonedChronology21.years();
        org.joda.time.DurationField durationField43 = zonedChronology21.seconds();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on durationField24 and durationField42", (durationField24.compareTo(durationField42) == 0) == durationField24.equals(durationField42));
    }

    @Test
    public void test0113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0113");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime2 = dateTime0.withMinuteOfHour(14);
        org.joda.time.DateTime dateTime4 = dateTime0.withCenturyOfEra(50);
        org.joda.time.DateTime dateTime5 = dateTime4.toDateTime();
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.DateTime dateTime7 = dateTime4.minus(readablePeriod6);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate((long) 100, dateTimeZone9);
        org.joda.time.LocalDate localDate12 = localDate10.plusDays(50);
        org.joda.time.Chronology chronology13 = localDate12.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate((long) 100, dateTimeZone16);
        org.joda.time.LocalDate localDate19 = localDate17.plusDays(50);
        int int20 = localDate17.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate22 = localDate17.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime();
        int int25 = dateTimeZone23.getOffset((org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.DateMidnight dateMidnight26 = localDate17.toDateMidnight(dateTimeZone23);
        long long28 = dateTimeZone23.convertUTCToLocal(60000L);
        org.joda.time.chrono.ZonedChronology zonedChronology29 = org.joda.time.chrono.ZonedChronology.getInstance(chronology13, dateTimeZone23);
        org.joda.time.DurationField durationField30 = zonedChronology29.weeks();
        org.joda.time.DateTimeField dateTimeField31 = zonedChronology29.weekyear();
        org.joda.time.DurationField durationField32 = zonedChronology29.weekyears();
        org.joda.time.DateTimeField dateTimeField33 = zonedChronology29.centuryOfEra();
        org.joda.time.DateTime dateTime34 = dateTime4.toDateTime((org.joda.time.Chronology) zonedChronology29);
        org.joda.time.LocalDateTime localDateTime35 = dateTime4.toLocalDateTime();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and dateTime34", (dateTime4.compareTo(dateTime34) == 0) == dateTime4.equals(dateTime34));
    }

    @Test
    public void test0114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0114");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime2 = dateTime0.minusHours((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int4 = dateTime2.get(dateTimeFieldType3);
        org.joda.time.DateTime dateTime6 = dateTime2.minusSeconds((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(59, 50);
        java.util.TimeZone timeZone12 = dateTimeZone11.toTimeZone();
        java.util.TimeZone timeZone13 = dateTimeZone11.toTimeZone();
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(72000000L, dateTimeZone11);
        int int16 = dateTimeZone11.getStandardOffset((long) 'u');
        java.lang.String str18 = dateTimeZone11.getName(1645142400000L);
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) 11779950, dateTimeZone11);
        org.joda.time.DateTime dateTime20 = dateTime2.withZoneRetainFields(dateTimeZone11);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(59, 50);
        java.util.TimeZone timeZone26 = dateTimeZone25.toTimeZone();
        java.util.TimeZone timeZone27 = dateTimeZone25.toTimeZone();
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime(72000000L, dateTimeZone25);
        int int30 = dateTimeZone25.getStandardOffset((long) 'u');
        java.lang.String str32 = dateTimeZone25.getName(1645142400000L);
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((long) 11779950, dateTimeZone25);
        long long35 = dateTimeZone11.getMillisKeepLocal(dateTimeZone25, (long) 11817955);
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime(dateTimeZone25);
        int int38 = dateTimeZone25.getOffset(1645514278299L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime0 and dateTime36", (dateTime0.compareTo(dateTime36) == 0) == dateTime0.equals(dateTime36));
    }

    @Test
    public void test0115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0115");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 100, dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.plusDays(50);
        org.joda.time.Chronology chronology5 = localDate4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 100, dateTimeZone8);
        org.joda.time.LocalDate localDate11 = localDate9.plusDays(50);
        int int12 = localDate9.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate14 = localDate9.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        int int17 = dateTimeZone15.getOffset((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateMidnight dateMidnight18 = localDate9.toDateMidnight(dateTimeZone15);
        long long20 = dateTimeZone15.convertUTCToLocal(60000L);
        org.joda.time.chrono.ZonedChronology zonedChronology21 = org.joda.time.chrono.ZonedChronology.getInstance(chronology5, dateTimeZone15);
        org.joda.time.DurationField durationField22 = zonedChronology21.eras();
        org.joda.time.DateTimeField dateTimeField23 = zonedChronology21.minuteOfDay();
        org.joda.time.Chronology chronology24 = zonedChronology21.withUTC();
        org.joda.time.DateTimeField dateTimeField25 = zonedChronology21.minuteOfHour();
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        long long29 = zonedChronology21.add(readablePeriod26, (long) 37, 26161850);
        org.joda.time.DateTimeField dateTimeField30 = zonedChronology21.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate((long) 100, dateTimeZone32);
        org.joda.time.LocalDate localDate35 = localDate33.plusDays(50);
        org.joda.time.DateTime dateTime36 = localDate35.toDateTimeAtMidnight();
        org.joda.time.LocalDate.Property property37 = localDate35.yearOfEra();
        org.joda.time.LocalDate localDate38 = property37.roundHalfCeilingCopy();
        org.joda.time.LocalDate localDate40 = property37.addToCopy((int) (short) 1);
        org.joda.time.LocalDate localDate41 = property37.roundFloorCopy();
        org.joda.time.LocalDate localDate42 = property37.roundHalfFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate46 = new org.joda.time.LocalDate((long) 100, dateTimeZone45);
        org.joda.time.LocalDate.Property property47 = localDate46.weekyear();
        org.joda.time.LocalDate localDate49 = localDate46.plusDays(51);
        org.joda.time.ReadablePeriod readablePeriod50 = null;
        org.joda.time.LocalDate localDate51 = localDate46.minus(readablePeriod50);
        org.joda.time.LocalDate.Property property52 = localDate46.yearOfEra();
        org.joda.time.LocalDate localDate54 = property52.setCopy(47);
        int int55 = localDate54.getCenturyOfEra();
        java.util.Locale locale58 = java.util.Locale.forLanguageTag("hi!");
        java.util.Locale locale59 = java.util.Locale.TAIWAN;
        java.lang.String str60 = locale58.getDisplayCountry(locale59);
        java.util.Calendar calendar61 = java.util.Calendar.getInstance(locale59);
        java.lang.String str62 = localDate54.toString("32", locale59);
        org.joda.time.LocalDate localDate63 = property37.setCopy("11771566", locale59);
        int[] intArray65 = zonedChronology21.get((org.joda.time.ReadablePartial) localDate63, (long) 70);
        org.joda.time.DurationField durationField66 = zonedChronology21.years();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField22, durationField66, and durationField22", !(durationField22.compareTo(durationField66) == 0) || (Math.signum(durationField22.compareTo(durationField22)) == Math.signum(durationField66.compareTo(durationField22))));
    }

    @Test
    public void test0116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0116");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 100, dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.plusDays(50);
        org.joda.time.Chronology chronology5 = localDate4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 100, dateTimeZone8);
        org.joda.time.LocalDate localDate11 = localDate9.plusDays(50);
        int int12 = localDate9.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate14 = localDate9.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        int int17 = dateTimeZone15.getOffset((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateMidnight dateMidnight18 = localDate9.toDateMidnight(dateTimeZone15);
        long long20 = dateTimeZone15.convertUTCToLocal(60000L);
        org.joda.time.chrono.ZonedChronology zonedChronology21 = org.joda.time.chrono.ZonedChronology.getInstance(chronology5, dateTimeZone15);
        org.joda.time.DurationField durationField22 = zonedChronology21.weeks();
        org.joda.time.DateTimeField dateTimeField23 = zonedChronology21.year();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate((long) 100, dateTimeZone25);
        org.joda.time.LocalDate localDate28 = localDate26.plusDays(50);
        org.joda.time.Chronology chronology29 = localDate28.getChronology();
        org.joda.time.DateTimeField dateTimeField30 = chronology29.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate((long) 100, dateTimeZone32);
        org.joda.time.LocalDate localDate35 = localDate33.plusDays(50);
        int int36 = localDate33.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate38 = localDate33.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime();
        int int41 = dateTimeZone39.getOffset((org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.DateMidnight dateMidnight42 = localDate33.toDateMidnight(dateTimeZone39);
        long long44 = dateTimeZone39.convertUTCToLocal(60000L);
        org.joda.time.chrono.ZonedChronology zonedChronology45 = org.joda.time.chrono.ZonedChronology.getInstance(chronology29, dateTimeZone39);
        org.joda.time.DurationField durationField46 = zonedChronology45.weeks();
        org.joda.time.DateTimeField dateTimeField47 = zonedChronology45.weekyear();
        org.joda.time.DurationField durationField48 = zonedChronology45.weekyears();
        org.joda.time.DateTimeField dateTimeField49 = zonedChronology45.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone50 = zonedChronology45.getZone();
        org.joda.time.Chronology chronology51 = zonedChronology21.withZone(dateTimeZone50);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on durationField22 and durationField46", (durationField22.compareTo(durationField46) == 0) == durationField22.equals(durationField46));
    }

    @Test
    public void test0117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0117");
        org.joda.time.Instant instant1 = new org.joda.time.Instant();
        org.joda.time.Instant instant3 = instant1.withMillis((long) 11);
        org.joda.time.Instant instant4 = instant3.toInstant();
        org.joda.time.Chronology chronology5 = instant3.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.seconds();
        org.joda.time.LocalTime localTime7 = org.joda.time.LocalTime.fromMillisOfDay((long) 26160535, chronology5);
        org.joda.time.DurationField durationField8 = chronology5.minutes();
        org.joda.time.DurationField durationField9 = chronology5.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField9, durationField6, and durationField8", !(durationField9.compareTo(durationField6) == 0) || (Math.signum(durationField9.compareTo(durationField8)) == Math.signum(durationField6.compareTo(durationField8))));
    }

    @Test
    public void test0118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0118");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 100, dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.plusDays(50);
        org.joda.time.Chronology chronology5 = localDate4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 100, dateTimeZone8);
        org.joda.time.LocalDate localDate11 = localDate9.plusDays(50);
        int int12 = localDate9.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate14 = localDate9.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        int int17 = dateTimeZone15.getOffset((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateMidnight dateMidnight18 = localDate9.toDateMidnight(dateTimeZone15);
        long long20 = dateTimeZone15.convertUTCToLocal(60000L);
        org.joda.time.chrono.ZonedChronology zonedChronology21 = org.joda.time.chrono.ZonedChronology.getInstance(chronology5, dateTimeZone15);
        org.joda.time.DurationField durationField22 = zonedChronology21.weeks();
        org.joda.time.DateTimeField dateTimeField23 = zonedChronology21.weekyear();
        org.joda.time.DurationField durationField24 = zonedChronology21.weekyears();
        org.joda.time.DateTimeField dateTimeField25 = zonedChronology21.minuteOfHour();
        org.joda.time.DurationField durationField26 = zonedChronology21.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField26, durationField22, and durationField24", !(durationField26.compareTo(durationField22) == 0) || (Math.signum(durationField26.compareTo(durationField24)) == Math.signum(durationField22.compareTo(durationField24))));
    }

    @Test
    public void test0119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0119");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 100, dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.plusDays(50);
        org.joda.time.Chronology chronology5 = localDate4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 100, dateTimeZone8);
        org.joda.time.LocalDate localDate11 = localDate9.plusDays(50);
        int int12 = localDate9.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate14 = localDate9.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        int int17 = dateTimeZone15.getOffset((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateMidnight dateMidnight18 = localDate9.toDateMidnight(dateTimeZone15);
        long long20 = dateTimeZone15.convertUTCToLocal(60000L);
        org.joda.time.chrono.ZonedChronology zonedChronology21 = org.joda.time.chrono.ZonedChronology.getInstance(chronology5, dateTimeZone15);
        org.joda.time.DurationField durationField22 = zonedChronology21.eras();
        org.joda.time.DateTimeField dateTimeField23 = zonedChronology21.minuteOfDay();
        org.joda.time.Chronology chronology24 = zonedChronology21.withUTC();
        org.joda.time.DateTimeField dateTimeField25 = zonedChronology21.monthOfYear();
        org.joda.time.DateTimeField dateTimeField26 = zonedChronology21.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField27 = zonedChronology21.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField28 = zonedChronology21.monthOfYear();
        org.joda.time.DurationField durationField29 = zonedChronology21.hours();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField22, durationField29, and durationField22", !(durationField22.compareTo(durationField29) == 0) || (Math.signum(durationField22.compareTo(durationField22)) == Math.signum(durationField29.compareTo(durationField22))));
    }

    @Test
    public void test0120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0120");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        int int1 = dateTime0.getDayOfYear();
        org.joda.time.DateTime dateTime3 = dateTime0.withYear(11751002);
        org.joda.time.DateTime dateTime5 = dateTime0.minusYears(100);
        org.joda.time.DateTimeZone dateTimeZone6 = dateTime5.getZone();
        org.joda.time.DateTime dateTime8 = dateTime5.plusSeconds((int) 'x');
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate((long) 100, dateTimeZone10);
        org.joda.time.LocalDate localDate13 = localDate11.plusDays(50);
        org.joda.time.Chronology chronology14 = localDate13.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate((long) 100, dateTimeZone17);
        org.joda.time.LocalDate localDate20 = localDate18.plusDays(50);
        int int21 = localDate18.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate23 = localDate18.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime();
        int int26 = dateTimeZone24.getOffset((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.DateMidnight dateMidnight27 = localDate18.toDateMidnight(dateTimeZone24);
        long long29 = dateTimeZone24.convertUTCToLocal(60000L);
        org.joda.time.chrono.ZonedChronology zonedChronology30 = org.joda.time.chrono.ZonedChronology.getInstance(chronology14, dateTimeZone24);
        org.joda.time.DurationField durationField31 = zonedChronology30.weeks();
        org.joda.time.DateTimeField dateTimeField32 = zonedChronology30.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        long long36 = zonedChronology30.add(readablePeriod33, (long) 2022, 0);
        org.joda.time.DurationField durationField37 = zonedChronology30.seconds();
        org.joda.time.MutableDateTime mutableDateTime38 = dateTime5.toMutableDateTime((org.joda.time.Chronology) zonedChronology30);
        org.joda.time.DateTimeField dateTimeField39 = zonedChronology30.dayOfWeek();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime5 and mutableDateTime38", (dateTime5.compareTo(mutableDateTime38) == 0) == dateTime5.equals(mutableDateTime38));
    }

    @Test
    public void test0121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0121");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 100, dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.plusDays(50);
        org.joda.time.Chronology chronology5 = localDate4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 100, dateTimeZone8);
        org.joda.time.LocalDate localDate11 = localDate9.plusDays(50);
        int int12 = localDate9.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate14 = localDate9.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        int int17 = dateTimeZone15.getOffset((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateMidnight dateMidnight18 = localDate9.toDateMidnight(dateTimeZone15);
        long long20 = dateTimeZone15.convertUTCToLocal(60000L);
        org.joda.time.chrono.ZonedChronology zonedChronology21 = org.joda.time.chrono.ZonedChronology.getInstance(chronology5, dateTimeZone15);
        org.joda.time.DurationField durationField22 = zonedChronology21.eras();
        org.joda.time.DateTimeField dateTimeField23 = zonedChronology21.minuteOfDay();
        org.joda.time.Chronology chronology24 = zonedChronology21.withUTC();
        org.joda.time.DateTimeField dateTimeField25 = zonedChronology21.monthOfYear();
        org.joda.time.DateTimeField dateTimeField26 = zonedChronology21.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField27 = zonedChronology21.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField28 = zonedChronology21.hourOfHalfday();
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate((org.joda.time.Chronology) zonedChronology21);
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate((long) 100, dateTimeZone31);
        org.joda.time.LocalDate localDate34 = localDate32.plusDays(50);
        org.joda.time.Chronology chronology35 = localDate34.getChronology();
        org.joda.time.DateTimeField dateTimeField36 = chronology35.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate39 = new org.joda.time.LocalDate((long) 100, dateTimeZone38);
        org.joda.time.LocalDate localDate41 = localDate39.plusDays(50);
        int int42 = localDate39.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate44 = localDate39.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime();
        int int47 = dateTimeZone45.getOffset((org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.DateMidnight dateMidnight48 = localDate39.toDateMidnight(dateTimeZone45);
        long long50 = dateTimeZone45.convertUTCToLocal(60000L);
        org.joda.time.chrono.ZonedChronology zonedChronology51 = org.joda.time.chrono.ZonedChronology.getInstance(chronology35, dateTimeZone45);
        org.joda.time.DurationField durationField52 = zonedChronology51.weeks();
        java.lang.String str53 = zonedChronology51.toString();
        org.joda.time.DateTimeField dateTimeField54 = zonedChronology51.secondOfDay();
        org.joda.time.DateTimeField dateTimeField55 = zonedChronology51.weekyearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate58 = new org.joda.time.LocalDate((long) 100, dateTimeZone57);
        org.joda.time.LocalDate localDate60 = localDate58.plusDays(50);
        org.joda.time.Chronology chronology61 = localDate60.getChronology();
        org.joda.time.LocalDate.Property property62 = localDate60.era();
        org.joda.time.DateTimeField dateTimeField63 = property62.getField();
        org.joda.time.LocalDate localDate64 = property62.getLocalDate();
        java.util.Locale locale67 = java.util.Locale.forLanguageTag("hi!");
        java.util.Locale locale68 = java.util.Locale.JAPAN;
        java.util.Set<java.lang.String> strSet69 = locale68.getUnicodeLocaleAttributes();
        java.lang.String str70 = locale67.getDisplayLanguage(locale68);
        java.lang.String str71 = localDate64.toString("11760560", locale68);
        org.joda.time.DateTimeZone dateTimeZone73 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate74 = new org.joda.time.LocalDate((long) 100, dateTimeZone73);
        org.joda.time.LocalDate localDate76 = localDate74.plusDays(50);
        org.joda.time.Chronology chronology77 = localDate76.getChronology();
        int int78 = localDate76.getEra();
        int[] intArray79 = localDate76.getValues();
        int int80 = dateTimeField55.getMinimumValue((org.joda.time.ReadablePartial) localDate64, intArray79);
        boolean boolean81 = zonedChronology21.equals((java.lang.Object) dateTimeField55);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField22 and durationField52", Math.signum(durationField22.compareTo(durationField52)) == -Math.signum(durationField52.compareTo(durationField22)));
    }

    @Test
    public void test0122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0122");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 100, dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.plusDays(50);
        org.joda.time.Chronology chronology5 = localDate4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.millisOfDay();
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(chronology5);
        org.joda.time.DurationField durationField8 = chronology5.eras();
        org.joda.time.DurationField durationField9 = chronology5.weeks();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField8, durationField9, and durationField8", !(durationField8.compareTo(durationField9) == 0) || (Math.signum(durationField8.compareTo(durationField8)) == Math.signum(durationField9.compareTo(durationField8))));
    }

    @Test
    public void test0123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0123");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 100, dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.plusDays(50);
        org.joda.time.Chronology chronology5 = localDate4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 100, dateTimeZone8);
        org.joda.time.LocalDate localDate11 = localDate9.plusDays(50);
        int int12 = localDate9.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate14 = localDate9.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        int int17 = dateTimeZone15.getOffset((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateMidnight dateMidnight18 = localDate9.toDateMidnight(dateTimeZone15);
        long long20 = dateTimeZone15.convertUTCToLocal(60000L);
        org.joda.time.chrono.ZonedChronology zonedChronology21 = org.joda.time.chrono.ZonedChronology.getInstance(chronology5, dateTimeZone15);
        org.joda.time.DurationField durationField22 = zonedChronology21.weeks();
        org.joda.time.DateTimeField dateTimeField23 = zonedChronology21.weekyear();
        org.joda.time.DurationField durationField24 = zonedChronology21.weekyears();
        org.joda.time.DateTimeField dateTimeField25 = zonedChronology21.minuteOfDay();
        org.joda.time.DurationField durationField26 = zonedChronology21.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField26, durationField22, and durationField24", !(durationField26.compareTo(durationField22) == 0) || (Math.signum(durationField26.compareTo(durationField24)) == Math.signum(durationField22.compareTo(durationField24))));
    }

    @Test
    public void test0124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0124");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 100, dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.plusDays(50);
        org.joda.time.Chronology chronology5 = localDate4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 100, dateTimeZone8);
        org.joda.time.LocalDate localDate11 = localDate9.plusDays(50);
        int int12 = localDate9.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate14 = localDate9.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        int int17 = dateTimeZone15.getOffset((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateMidnight dateMidnight18 = localDate9.toDateMidnight(dateTimeZone15);
        long long20 = dateTimeZone15.convertUTCToLocal(60000L);
        org.joda.time.chrono.ZonedChronology zonedChronology21 = org.joda.time.chrono.ZonedChronology.getInstance(chronology5, dateTimeZone15);
        org.joda.time.DurationField durationField22 = zonedChronology21.weeks();
        org.joda.time.DateTimeField dateTimeField23 = zonedChronology21.weekyear();
        org.joda.time.DurationField durationField24 = zonedChronology21.weekyears();
        long long28 = zonedChronology21.add(0L, 11776486L, 0);
        long long32 = zonedChronology21.add((long) 26198001, (long) 11797368, 32);
        org.joda.time.DurationField durationField33 = zonedChronology21.centuries();
        org.joda.time.DurationField durationField34 = zonedChronology21.millis();
        org.joda.time.DurationField durationField35 = zonedChronology21.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField35, durationField22, and durationField24", !(durationField35.compareTo(durationField22) == 0) || (Math.signum(durationField35.compareTo(durationField24)) == Math.signum(durationField22.compareTo(durationField24))));
    }

    @Test
    public void test0125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0125");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 100, dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.plusDays(50);
        org.joda.time.Chronology chronology5 = localDate4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 100, dateTimeZone8);
        org.joda.time.LocalDate localDate11 = localDate9.plusDays(50);
        int int12 = localDate9.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate14 = localDate9.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        int int17 = dateTimeZone15.getOffset((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateMidnight dateMidnight18 = localDate9.toDateMidnight(dateTimeZone15);
        long long20 = dateTimeZone15.convertUTCToLocal(60000L);
        org.joda.time.chrono.ZonedChronology zonedChronology21 = org.joda.time.chrono.ZonedChronology.getInstance(chronology5, dateTimeZone15);
        org.joda.time.DurationField durationField22 = zonedChronology21.weeks();
        org.joda.time.DateTimeField dateTimeField23 = zonedChronology21.year();
        org.joda.time.DateTimeZone dateTimeZone24 = zonedChronology21.getZone();
        org.joda.time.DateTimeField dateTimeField25 = zonedChronology21.dayOfMonth();
        org.joda.time.DurationField durationField26 = zonedChronology21.weeks();
        org.joda.time.Chronology chronology27 = zonedChronology21.withUTC();
        org.joda.time.DateTimeField dateTimeField28 = zonedChronology21.monthOfYear();
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology21.dayOfYear();
        org.joda.time.DateTimeField dateTimeField30 = zonedChronology21.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate((long) 100, dateTimeZone32);
        org.joda.time.LocalDate localDate35 = localDate33.plusDays(50);
        org.joda.time.Chronology chronology36 = localDate35.getChronology();
        org.joda.time.DateTimeField dateTimeField37 = chronology36.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate40 = new org.joda.time.LocalDate((long) 100, dateTimeZone39);
        org.joda.time.LocalDate localDate42 = localDate40.plusDays(50);
        int int43 = localDate40.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate45 = localDate40.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime();
        int int48 = dateTimeZone46.getOffset((org.joda.time.ReadableInstant) dateTime47);
        org.joda.time.DateMidnight dateMidnight49 = localDate40.toDateMidnight(dateTimeZone46);
        long long51 = dateTimeZone46.convertUTCToLocal(60000L);
        org.joda.time.chrono.ZonedChronology zonedChronology52 = org.joda.time.chrono.ZonedChronology.getInstance(chronology36, dateTimeZone46);
        org.joda.time.DurationField durationField53 = zonedChronology52.weeks();
        org.joda.time.DateTimeField dateTimeField54 = zonedChronology52.weekyear();
        org.joda.time.DateTimeField dateTimeField55 = zonedChronology52.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField56 = zonedChronology52.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone57 = zonedChronology52.getZone();
        org.joda.time.Chronology chronology58 = zonedChronology21.withZone(dateTimeZone57);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on durationField22 and durationField53", (durationField22.compareTo(durationField53) == 0) == durationField22.equals(durationField53));
    }

    @Test
    public void test0126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0126");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 100, dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.plusDays(50);
        org.joda.time.Chronology chronology5 = localDate4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 100, dateTimeZone8);
        org.joda.time.LocalDate localDate11 = localDate9.plusDays(50);
        int int12 = localDate9.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate14 = localDate9.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        int int17 = dateTimeZone15.getOffset((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateMidnight dateMidnight18 = localDate9.toDateMidnight(dateTimeZone15);
        long long20 = dateTimeZone15.convertUTCToLocal(60000L);
        org.joda.time.chrono.ZonedChronology zonedChronology21 = org.joda.time.chrono.ZonedChronology.getInstance(chronology5, dateTimeZone15);
        org.joda.time.DurationField durationField22 = zonedChronology21.weeks();
        org.joda.time.DateTimeField dateTimeField23 = zonedChronology21.weekyear();
        org.joda.time.DurationField durationField24 = zonedChronology21.weekyears();
        org.joda.time.DateTimeField dateTimeField25 = zonedChronology21.year();
        org.joda.time.DateTimeZone dateTimeZone26 = zonedChronology21.getZone();
        org.joda.time.DateTimeField dateTimeField27 = zonedChronology21.dayOfMonth();
        org.joda.time.DurationField durationField28 = zonedChronology21.halfdays();
        java.lang.String str29 = zonedChronology21.toString();
        org.joda.time.DurationField durationField30 = zonedChronology21.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField30, durationField22, and durationField24", !(durationField30.compareTo(durationField22) == 0) || (Math.signum(durationField30.compareTo(durationField24)) == Math.signum(durationField22.compareTo(durationField24))));
    }

    @Test
    public void test0127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0127");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 100, dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.plusDays(50);
        org.joda.time.Chronology chronology5 = localDate4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 100, dateTimeZone8);
        org.joda.time.LocalDate localDate11 = localDate9.plusDays(50);
        int int12 = localDate9.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate14 = localDate9.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        int int17 = dateTimeZone15.getOffset((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateMidnight dateMidnight18 = localDate9.toDateMidnight(dateTimeZone15);
        long long20 = dateTimeZone15.convertUTCToLocal(60000L);
        org.joda.time.chrono.ZonedChronology zonedChronology21 = org.joda.time.chrono.ZonedChronology.getInstance(chronology5, dateTimeZone15);
        org.joda.time.DurationField durationField22 = zonedChronology21.weeks();
        org.joda.time.DateTimeField dateTimeField23 = zonedChronology21.weekyear();
        org.joda.time.DurationField durationField24 = zonedChronology21.weekyears();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate((long) 100, dateTimeZone26);
        org.joda.time.LocalDate localDate29 = localDate27.plusDays(50);
        org.joda.time.Chronology chronology30 = localDate29.getChronology();
        org.joda.time.LocalDate.Property property31 = localDate29.era();
        org.joda.time.DateTimeField dateTimeField32 = property31.getField();
        org.joda.time.LocalDate localDate33 = property31.getLocalDate();
        org.joda.time.LocalDate localDate35 = localDate33.withYear(26160535);
        org.joda.time.LocalDate localDate37 = localDate35.minusYears(11766550);
        int[] intArray39 = zonedChronology21.get((org.joda.time.ReadablePartial) localDate37, (long) 11764640);
        java.lang.String str40 = zonedChronology21.toString();
        org.joda.time.DateTimeField dateTimeField41 = zonedChronology21.monthOfYear();
        org.joda.time.DurationField durationField42 = zonedChronology21.years();
        org.joda.time.DateTimeField dateTimeField43 = zonedChronology21.hourOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on durationField24 and durationField42", (durationField24.compareTo(durationField42) == 0) == durationField24.equals(durationField42));
    }

    @Test
    public void test0128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0128");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime2 = dateTime0.minusHours((int) (short) 100);
        org.joda.time.DateMidnight dateMidnight3 = dateTime2.toDateMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.dayOfYear();
        int int5 = dateTime2.get(dateTimeFieldType4);
        org.joda.time.DateTime dateTime7 = dateTime2.withMillisOfSecond(616);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate((long) 100, dateTimeZone9);
        org.joda.time.LocalDate localDate12 = localDate10.plusDays(50);
        org.joda.time.Chronology chronology13 = localDate12.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.millisOfDay();
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate(chronology13);
        org.joda.time.DateTimeField dateTimeField16 = chronology13.minuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(59, 50);
        java.util.TimeZone timeZone21 = dateTimeZone20.toTimeZone();
        java.util.TimeZone timeZone22 = dateTimeZone20.toTimeZone();
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime(72000000L, dateTimeZone20);
        int int25 = dateTimeZone20.getStandardOffset((long) 'u');
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate(dateTimeZone20);
        org.joda.time.chrono.ZonedChronology zonedChronology27 = org.joda.time.chrono.ZonedChronology.getInstance(chronology13, dateTimeZone20);
        org.joda.time.DateTimeField dateTimeField28 = zonedChronology27.minuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone29 = zonedChronology27.getZone();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate((long) 100, dateTimeZone31);
        org.joda.time.LocalDate localDate34 = localDate32.plusDays(50);
        int int35 = localDate32.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate37 = localDate32.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime();
        int int40 = dateTimeZone38.getOffset((org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.DateMidnight dateMidnight41 = localDate32.toDateMidnight(dateTimeZone38);
        long long43 = dateTimeZone38.convertUTCToLocal(60000L);
        org.joda.time.LocalDate localDate44 = org.joda.time.LocalDate.now(dateTimeZone38);
        boolean boolean45 = zonedChronology27.equals((java.lang.Object) dateTimeZone38);
        org.joda.time.DateTime dateTime46 = dateTime7.toDateTime((org.joda.time.Chronology) zonedChronology27);
        org.joda.time.DateTimeField dateTimeField47 = zonedChronology27.era();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime7 and dateTime46", (dateTime7.compareTo(dateTime46) == 0) == dateTime7.equals(dateTime46));
    }

    @Test
    public void test0129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0129");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 100, dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.plusDays(50);
        org.joda.time.Chronology chronology5 = localDate4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 100, dateTimeZone8);
        org.joda.time.LocalDate localDate11 = localDate9.plusDays(50);
        int int12 = localDate9.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate14 = localDate9.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        int int17 = dateTimeZone15.getOffset((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateMidnight dateMidnight18 = localDate9.toDateMidnight(dateTimeZone15);
        long long20 = dateTimeZone15.convertUTCToLocal(60000L);
        org.joda.time.chrono.ZonedChronology zonedChronology21 = org.joda.time.chrono.ZonedChronology.getInstance(chronology5, dateTimeZone15);
        org.joda.time.DurationField durationField22 = zonedChronology21.weeks();
        org.joda.time.DateTimeField dateTimeField23 = zonedChronology21.year();
        org.joda.time.DateTimeZone dateTimeZone24 = zonedChronology21.getZone();
        org.joda.time.DurationField durationField25 = zonedChronology21.weekyears();
        org.joda.time.DateTimeField dateTimeField26 = zonedChronology21.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField27 = zonedChronology21.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField28 = zonedChronology21.weekyear();
        org.joda.time.DurationField durationField29 = zonedChronology21.centuries();
        org.joda.time.DurationField durationField30 = zonedChronology21.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField30, durationField22, and durationField25", !(durationField30.compareTo(durationField22) == 0) || (Math.signum(durationField30.compareTo(durationField25)) == Math.signum(durationField22.compareTo(durationField25))));
    }

    @Test
    public void test0130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0130");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime2 = dateTime0.minusHours((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int4 = dateTime2.get(dateTimeFieldType3);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) 100, dateTimeZone6);
        org.joda.time.LocalDate localDate9 = localDate7.plusDays(50);
        org.joda.time.Chronology chronology10 = localDate9.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) 100, dateTimeZone13);
        org.joda.time.LocalDate localDate16 = localDate14.plusDays(50);
        int int17 = localDate14.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate19 = localDate14.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime();
        int int22 = dateTimeZone20.getOffset((org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.DateMidnight dateMidnight23 = localDate14.toDateMidnight(dateTimeZone20);
        long long25 = dateTimeZone20.convertUTCToLocal(60000L);
        org.joda.time.chrono.ZonedChronology zonedChronology26 = org.joda.time.chrono.ZonedChronology.getInstance(chronology10, dateTimeZone20);
        org.joda.time.DurationField durationField27 = zonedChronology26.weeks();
        org.joda.time.DateTimeField dateTimeField28 = zonedChronology26.year();
        org.joda.time.DateTimeZone dateTimeZone29 = zonedChronology26.getZone();
        org.joda.time.DurationField durationField30 = zonedChronology26.months();
        org.joda.time.DateTimeField dateTimeField31 = zonedChronology26.clockhourOfHalfday();
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((org.joda.time.Chronology) zonedChronology26);
        org.joda.time.DateTimeField dateTimeField33 = dateTimeFieldType3.getField((org.joda.time.Chronology) zonedChronology26);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime0 and dateTime32", (dateTime0.compareTo(dateTime32) == 0) == dateTime0.equals(dateTime32));
    }

    @Test
    public void test0131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0131");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime2 = dateTime0.withMinuteOfHour(14);
        org.joda.time.DateTime dateTime4 = dateTime0.withCenturyOfEra(50);
        org.joda.time.DateTime dateTime5 = dateTime4.toDateTime();
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.DateTime dateTime7 = dateTime4.minus(readablePeriod6);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate((long) 100, dateTimeZone9);
        org.joda.time.LocalDate localDate12 = localDate10.plusDays(50);
        org.joda.time.Chronology chronology13 = localDate12.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate((long) 100, dateTimeZone16);
        org.joda.time.LocalDate localDate19 = localDate17.plusDays(50);
        int int20 = localDate17.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate22 = localDate17.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime();
        int int25 = dateTimeZone23.getOffset((org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.DateMidnight dateMidnight26 = localDate17.toDateMidnight(dateTimeZone23);
        long long28 = dateTimeZone23.convertUTCToLocal(60000L);
        org.joda.time.chrono.ZonedChronology zonedChronology29 = org.joda.time.chrono.ZonedChronology.getInstance(chronology13, dateTimeZone23);
        org.joda.time.DurationField durationField30 = zonedChronology29.weeks();
        org.joda.time.DateTimeField dateTimeField31 = zonedChronology29.weekyear();
        org.joda.time.DurationField durationField32 = zonedChronology29.weekyears();
        org.joda.time.DateTimeField dateTimeField33 = zonedChronology29.centuryOfEra();
        org.joda.time.DateTime dateTime34 = dateTime4.toDateTime((org.joda.time.Chronology) zonedChronology29);
        org.joda.time.DurationField durationField35 = zonedChronology29.days();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and dateTime34", (dateTime4.compareTo(dateTime34) == 0) == dateTime4.equals(dateTime34));
    }

    @Test
    public void test0132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0132");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 100, dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.plusDays(50);
        org.joda.time.Chronology chronology5 = localDate4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 100, dateTimeZone8);
        org.joda.time.LocalDate localDate11 = localDate9.plusDays(50);
        int int12 = localDate9.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate14 = localDate9.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        int int17 = dateTimeZone15.getOffset((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateMidnight dateMidnight18 = localDate9.toDateMidnight(dateTimeZone15);
        long long20 = dateTimeZone15.convertUTCToLocal(60000L);
        org.joda.time.chrono.ZonedChronology zonedChronology21 = org.joda.time.chrono.ZonedChronology.getInstance(chronology5, dateTimeZone15);
        org.joda.time.DurationField durationField22 = zonedChronology21.eras();
        org.joda.time.DateTimeField dateTimeField23 = zonedChronology21.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField24 = zonedChronology21.year();
        long long28 = zonedChronology21.add((long) 11841758, (long) 26186860, 26272);
        org.joda.time.DurationField durationField29 = zonedChronology21.halfdays();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField22, durationField29, and durationField22", !(durationField22.compareTo(durationField29) == 0) || (Math.signum(durationField22.compareTo(durationField22)) == Math.signum(durationField29.compareTo(durationField22))));
    }

    @Test
    public void test0133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0133");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 100, dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.plusDays(50);
        org.joda.time.Chronology chronology5 = localDate4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 100, dateTimeZone8);
        org.joda.time.LocalDate localDate11 = localDate9.plusDays(50);
        int int12 = localDate9.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate14 = localDate9.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        int int17 = dateTimeZone15.getOffset((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateMidnight dateMidnight18 = localDate9.toDateMidnight(dateTimeZone15);
        long long20 = dateTimeZone15.convertUTCToLocal(60000L);
        org.joda.time.chrono.ZonedChronology zonedChronology21 = org.joda.time.chrono.ZonedChronology.getInstance(chronology5, dateTimeZone15);
        org.joda.time.DurationField durationField22 = zonedChronology21.weeks();
        org.joda.time.DateTimeField dateTimeField23 = zonedChronology21.weekyear();
        org.joda.time.DurationField durationField24 = zonedChronology21.weekyears();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate((long) 100, dateTimeZone26);
        org.joda.time.LocalDate localDate29 = localDate27.plusDays(50);
        org.joda.time.Chronology chronology30 = localDate29.getChronology();
        org.joda.time.LocalDate.Property property31 = localDate29.era();
        org.joda.time.DateTimeField dateTimeField32 = property31.getField();
        org.joda.time.LocalDate localDate33 = property31.getLocalDate();
        org.joda.time.LocalDate localDate35 = localDate33.withYear(26160535);
        org.joda.time.LocalDate localDate37 = localDate35.minusYears(11766550);
        int[] intArray39 = zonedChronology21.get((org.joda.time.ReadablePartial) localDate37, (long) 11764640);
        org.joda.time.Chronology chronology40 = zonedChronology21.withUTC();
        org.joda.time.DurationField durationField41 = chronology40.weeks();
        org.joda.time.DateTimeField dateTimeField42 = chronology40.weekOfWeekyear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on durationField22 and durationField41", (durationField22.compareTo(durationField41) == 0) == durationField22.equals(durationField41));
    }

    @Test
    public void test0134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0134");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 100, dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.plusDays(50);
        org.joda.time.Chronology chronology5 = localDate4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 100, dateTimeZone8);
        org.joda.time.LocalDate localDate11 = localDate9.plusDays(50);
        int int12 = localDate9.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate14 = localDate9.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        int int17 = dateTimeZone15.getOffset((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateMidnight dateMidnight18 = localDate9.toDateMidnight(dateTimeZone15);
        long long20 = dateTimeZone15.convertUTCToLocal(60000L);
        org.joda.time.chrono.ZonedChronology zonedChronology21 = org.joda.time.chrono.ZonedChronology.getInstance(chronology5, dateTimeZone15);
        org.joda.time.DurationField durationField22 = zonedChronology21.eras();
        org.joda.time.DateTimeField dateTimeField23 = zonedChronology21.minuteOfDay();
        org.joda.time.Chronology chronology24 = zonedChronology21.withUTC();
        org.joda.time.DateTimeField dateTimeField25 = zonedChronology21.monthOfYear();
        org.joda.time.DateTimeField dateTimeField26 = zonedChronology21.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField27 = zonedChronology21.minuteOfDay();
        org.joda.time.Chronology chronology28 = zonedChronology21.withUTC();
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology21.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField30 = zonedChronology21.halfdayOfDay();
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate((long) 100, dateTimeZone32);
        org.joda.time.LocalDate localDate35 = localDate33.plusDays(50);
        org.joda.time.Chronology chronology36 = localDate35.getChronology();
        org.joda.time.LocalDate.Property property37 = localDate35.era();
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime();
        int int40 = dateTimeZone38.getOffset((org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.DateTime dateTime41 = localDate35.toDateTimeAtMidnight(dateTimeZone38);
        org.joda.time.Chronology chronology42 = localDate35.getChronology();
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate45 = new org.joda.time.LocalDate((long) 100, dateTimeZone44);
        org.joda.time.LocalDate localDate47 = localDate45.plusDays(50);
        org.joda.time.Chronology chronology48 = localDate47.getChronology();
        org.joda.time.DateTimeField dateTimeField49 = chronology48.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate52 = new org.joda.time.LocalDate((long) 100, dateTimeZone51);
        org.joda.time.LocalDate localDate54 = localDate52.plusDays(50);
        int int55 = localDate52.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate57 = localDate52.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime59 = new org.joda.time.DateTime();
        int int60 = dateTimeZone58.getOffset((org.joda.time.ReadableInstant) dateTime59);
        org.joda.time.DateMidnight dateMidnight61 = localDate52.toDateMidnight(dateTimeZone58);
        long long63 = dateTimeZone58.convertUTCToLocal(60000L);
        org.joda.time.chrono.ZonedChronology zonedChronology64 = org.joda.time.chrono.ZonedChronology.getInstance(chronology48, dateTimeZone58);
        org.joda.time.DurationField durationField65 = zonedChronology64.weeks();
        org.joda.time.DateTimeField dateTimeField66 = zonedChronology64.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField67 = zonedChronology64.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField68 = zonedChronology64.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone70 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate71 = new org.joda.time.LocalDate((long) 100, dateTimeZone70);
        org.joda.time.LocalDate localDate73 = localDate71.plusDays(50);
        int int74 = localDate71.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate76 = localDate71.plusMonths(6);
        int int77 = localDate71.getYearOfEra();
        int int78 = localDate71.getCenturyOfEra();
        int int79 = localDate71.getMonthOfYear();
        int int80 = localDate71.getYearOfEra();
        org.joda.time.LocalDate localDate82 = localDate71.plusYears(11790918);
        java.lang.String str83 = localDate82.toString();
        int[] intArray85 = zonedChronology64.get((org.joda.time.ReadablePartial) localDate82, 26157373L);
        zonedChronology21.validate((org.joda.time.ReadablePartial) localDate35, intArray85);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField22 and durationField65", Math.signum(durationField22.compareTo(durationField65)) == -Math.signum(durationField65.compareTo(durationField22)));
    }

    @Test
    public void test0135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0135");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 100, dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.plusDays(50);
        org.joda.time.Chronology chronology5 = localDate4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 100, dateTimeZone8);
        org.joda.time.LocalDate localDate11 = localDate9.plusDays(50);
        int int12 = localDate9.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate14 = localDate9.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        int int17 = dateTimeZone15.getOffset((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateMidnight dateMidnight18 = localDate9.toDateMidnight(dateTimeZone15);
        long long20 = dateTimeZone15.convertUTCToLocal(60000L);
        org.joda.time.chrono.ZonedChronology zonedChronology21 = org.joda.time.chrono.ZonedChronology.getInstance(chronology5, dateTimeZone15);
        org.joda.time.DurationField durationField22 = zonedChronology21.eras();
        org.joda.time.DateTimeField dateTimeField23 = zonedChronology21.minuteOfDay();
        org.joda.time.Chronology chronology24 = zonedChronology21.withUTC();
        org.joda.time.DateTimeField dateTimeField25 = zonedChronology21.monthOfYear();
        org.joda.time.DateTimeField dateTimeField26 = zonedChronology21.dayOfYear();
        org.joda.time.DurationField durationField27 = zonedChronology21.months();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField22, durationField27, and durationField22", !(durationField22.compareTo(durationField27) == 0) || (Math.signum(durationField22.compareTo(durationField22)) == Math.signum(durationField27.compareTo(durationField22))));
    }

    @Test
    public void test0136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0136");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 100, dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.plusDays(50);
        org.joda.time.Chronology chronology5 = localDate4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 100, dateTimeZone8);
        org.joda.time.LocalDate localDate11 = localDate9.plusDays(50);
        int int12 = localDate9.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate14 = localDate9.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        int int17 = dateTimeZone15.getOffset((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateMidnight dateMidnight18 = localDate9.toDateMidnight(dateTimeZone15);
        long long20 = dateTimeZone15.convertUTCToLocal(60000L);
        org.joda.time.chrono.ZonedChronology zonedChronology21 = org.joda.time.chrono.ZonedChronology.getInstance(chronology5, dateTimeZone15);
        org.joda.time.DurationField durationField22 = zonedChronology21.weeks();
        org.joda.time.DurationField durationField23 = zonedChronology21.centuries();
        org.joda.time.DurationField durationField24 = zonedChronology21.weekyears();
        org.joda.time.DurationField durationField25 = zonedChronology21.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField25, durationField22, and durationField23", !(durationField25.compareTo(durationField22) == 0) || (Math.signum(durationField25.compareTo(durationField23)) == Math.signum(durationField22.compareTo(durationField23))));
    }

    @Test
    public void test0137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0137");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 10);
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime();
        org.joda.time.Instant instant3 = dateTime2.toInstant();
        org.joda.time.Chronology chronology4 = dateTime2.getChronology();
        long long5 = dateTime2.getMillis();
        boolean boolean6 = dateTime1.isEqual((org.joda.time.ReadableInstant) dateTime2);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 100, dateTimeZone8);
        org.joda.time.LocalDate localDate11 = localDate9.plusDays(50);
        org.joda.time.Chronology chronology12 = localDate11.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate((long) 100, dateTimeZone15);
        org.joda.time.LocalDate localDate18 = localDate16.plusDays(50);
        int int19 = localDate16.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate21 = localDate16.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime();
        int int24 = dateTimeZone22.getOffset((org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.DateMidnight dateMidnight25 = localDate16.toDateMidnight(dateTimeZone22);
        long long27 = dateTimeZone22.convertUTCToLocal(60000L);
        org.joda.time.chrono.ZonedChronology zonedChronology28 = org.joda.time.chrono.ZonedChronology.getInstance(chronology12, dateTimeZone22);
        org.joda.time.DurationField durationField29 = zonedChronology28.weeks();
        org.joda.time.DateTimeField dateTimeField30 = zonedChronology28.year();
        org.joda.time.DateTimeZone dateTimeZone31 = zonedChronology28.getZone();
        org.joda.time.DateTimeField dateTimeField32 = zonedChronology28.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField33 = zonedChronology28.hourOfHalfday();
        org.joda.time.DurationField durationField34 = zonedChronology28.hours();
        org.joda.time.DateTime dateTime35 = dateTime2.withChronology((org.joda.time.Chronology) zonedChronology28);
        int int36 = dateTime2.getYearOfCentury();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant3 and dateTime35", (instant3.compareTo(dateTime35) == 0) == instant3.equals(dateTime35));
    }

    @Test
    public void test0138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0138");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 100, dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.plusDays(50);
        org.joda.time.Chronology chronology5 = localDate4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 100, dateTimeZone8);
        org.joda.time.LocalDate localDate11 = localDate9.plusDays(50);
        int int12 = localDate9.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate14 = localDate9.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        int int17 = dateTimeZone15.getOffset((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateMidnight dateMidnight18 = localDate9.toDateMidnight(dateTimeZone15);
        long long20 = dateTimeZone15.convertUTCToLocal(60000L);
        org.joda.time.chrono.ZonedChronology zonedChronology21 = org.joda.time.chrono.ZonedChronology.getInstance(chronology5, dateTimeZone15);
        org.joda.time.DurationField durationField22 = zonedChronology21.weeks();
        org.joda.time.DateTimeField dateTimeField23 = zonedChronology21.year();
        org.joda.time.DateTimeZone dateTimeZone24 = zonedChronology21.getZone();
        org.joda.time.DurationField durationField25 = zonedChronology21.weekyears();
        org.joda.time.DateTimeField dateTimeField26 = zonedChronology21.clockhourOfHalfday();
        org.joda.time.DurationField durationField27 = zonedChronology21.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField27, durationField22, and durationField25", !(durationField27.compareTo(durationField22) == 0) || (Math.signum(durationField27.compareTo(durationField25)) == Math.signum(durationField22.compareTo(durationField25))));
    }

    @Test
    public void test0139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0139");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 100, dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.plusDays(50);
        org.joda.time.Chronology chronology5 = localDate4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 100, dateTimeZone8);
        org.joda.time.LocalDate localDate11 = localDate9.plusDays(50);
        int int12 = localDate9.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate14 = localDate9.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        int int17 = dateTimeZone15.getOffset((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateMidnight dateMidnight18 = localDate9.toDateMidnight(dateTimeZone15);
        long long20 = dateTimeZone15.convertUTCToLocal(60000L);
        org.joda.time.chrono.ZonedChronology zonedChronology21 = org.joda.time.chrono.ZonedChronology.getInstance(chronology5, dateTimeZone15);
        org.joda.time.DurationField durationField22 = zonedChronology21.weeks();
        org.joda.time.DateTimeField dateTimeField23 = zonedChronology21.year();
        org.joda.time.DateTimeZone dateTimeZone24 = zonedChronology21.getZone();
        org.joda.time.DateTimeField dateTimeField25 = zonedChronology21.weekyear();
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        long long29 = zonedChronology21.add(readablePeriod26, (long) 11783576, 26163273);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        long long33 = zonedChronology21.add(readablePeriod30, 11776486L, 38);
        org.joda.time.Chronology chronology34 = zonedChronology21.withUTC();
        org.joda.time.DurationField durationField35 = zonedChronology21.years();
        org.joda.time.DateTimeField dateTimeField36 = zonedChronology21.clockhourOfDay();
        org.joda.time.DurationField durationField37 = zonedChronology21.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField37, durationField22, and durationField35", !(durationField37.compareTo(durationField22) == 0) || (Math.signum(durationField37.compareTo(durationField35)) == Math.signum(durationField22.compareTo(durationField35))));
    }

    @Test
    public void test0140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0140");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 100, dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.plusDays(50);
        org.joda.time.Chronology chronology5 = localDate4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 100, dateTimeZone8);
        org.joda.time.LocalDate localDate11 = localDate9.plusDays(50);
        int int12 = localDate9.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate14 = localDate9.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        int int17 = dateTimeZone15.getOffset((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateMidnight dateMidnight18 = localDate9.toDateMidnight(dateTimeZone15);
        long long20 = dateTimeZone15.convertUTCToLocal(60000L);
        org.joda.time.chrono.ZonedChronology zonedChronology21 = org.joda.time.chrono.ZonedChronology.getInstance(chronology5, dateTimeZone15);
        org.joda.time.DurationField durationField22 = zonedChronology21.weeks();
        org.joda.time.DateTimeField dateTimeField23 = zonedChronology21.weekyear();
        org.joda.time.DurationField durationField24 = zonedChronology21.weekyears();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate((long) 100, dateTimeZone26);
        org.joda.time.LocalDate localDate29 = localDate27.plusDays(50);
        org.joda.time.Chronology chronology30 = localDate29.getChronology();
        org.joda.time.LocalDate.Property property31 = localDate29.era();
        org.joda.time.DateTimeField dateTimeField32 = property31.getField();
        org.joda.time.LocalDate localDate33 = property31.getLocalDate();
        org.joda.time.LocalDate localDate35 = localDate33.withYear(26160535);
        org.joda.time.LocalDate localDate37 = localDate35.minusYears(11766550);
        int[] intArray39 = zonedChronology21.get((org.joda.time.ReadablePartial) localDate37, (long) 11764640);
        org.joda.time.Chronology chronology40 = zonedChronology21.withUTC();
        org.joda.time.DurationField durationField41 = chronology40.weeks();
        org.joda.time.ReadablePeriod readablePeriod42 = null;
        long long45 = chronology40.add(readablePeriod42, (long) 26265847, 11757696);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on durationField22 and durationField41", (durationField22.compareTo(durationField41) == 0) == durationField22.equals(durationField41));
    }

    @Test
    public void test0141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0141");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 100, dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.plusDays(50);
        org.joda.time.Chronology chronology5 = localDate4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 100, dateTimeZone8);
        org.joda.time.LocalDate localDate11 = localDate9.plusDays(50);
        int int12 = localDate9.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate14 = localDate9.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        int int17 = dateTimeZone15.getOffset((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateMidnight dateMidnight18 = localDate9.toDateMidnight(dateTimeZone15);
        long long20 = dateTimeZone15.convertUTCToLocal(60000L);
        org.joda.time.chrono.ZonedChronology zonedChronology21 = org.joda.time.chrono.ZonedChronology.getInstance(chronology5, dateTimeZone15);
        org.joda.time.DurationField durationField22 = zonedChronology21.eras();
        org.joda.time.DateTimeField dateTimeField23 = zonedChronology21.minuteOfDay();
        org.joda.time.Chronology chronology24 = zonedChronology21.withUTC();
        org.joda.time.DateTimeField dateTimeField25 = zonedChronology21.monthOfYear();
        org.joda.time.DateTimeField dateTimeField26 = zonedChronology21.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField27 = zonedChronology21.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField28 = zonedChronology21.hourOfHalfday();
        org.joda.time.Chronology chronology29 = zonedChronology21.withUTC();
        org.joda.time.DurationField durationField30 = zonedChronology21.years();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField22, durationField30, and durationField22", !(durationField22.compareTo(durationField30) == 0) || (Math.signum(durationField22.compareTo(durationField22)) == Math.signum(durationField30.compareTo(durationField22))));
    }

    @Test
    public void test0142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0142");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime2 = dateTime0.minusHours((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int4 = dateTime2.get(dateTimeFieldType3);
        org.joda.time.DateTime dateTime6 = dateTime2.minusMillis((int) '#');
        org.joda.time.DateTime dateTime8 = dateTime6.plusDays(11);
        org.joda.time.DateTime dateTime11 = dateTime6.withDurationAdded((long) 11757696, (int) ' ');
        int int12 = dateTime6.getWeekOfWeekyear();
        int int13 = dateTime6.getDayOfYear();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(59, 50);
        java.util.TimeZone timeZone18 = dateTimeZone17.toTimeZone();
        java.util.TimeZone timeZone19 = dateTimeZone17.toTimeZone();
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime(72000000L, dateTimeZone17);
        int int22 = dateTimeZone17.getStandardOffset((long) 'u');
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate(dateTimeZone17);
        org.joda.time.DateTime dateTime24 = dateTime6.withZone(dateTimeZone17);
        org.joda.time.DateMidnight dateMidnight25 = dateTime24.toDateMidnight();
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate((long) 100, dateTimeZone27);
        org.joda.time.LocalDate localDate30 = localDate28.plusDays(50);
        int int31 = localDate28.getWeekOfWeekyear();
        org.joda.time.DateMidnight dateMidnight32 = localDate28.toDateMidnight();
        int int33 = localDate28.getDayOfWeek();
        org.joda.time.LocalDate localDate35 = localDate28.plusYears(11751002);
        int int36 = localDate35.getWeekyear();
        org.joda.time.DateTime dateTime37 = dateTime24.withFields((org.joda.time.ReadablePartial) localDate35);
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property39 = localDateTime38.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.LocalDateTime localDateTime42 = localDateTime38.withField(dateTimeFieldType40, (int) (short) 10);
        int int43 = localDateTime38.getMillisOfDay();
        int int44 = localDateTime38.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime46 = localDateTime38.withSecondOfMinute(6);
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.UTC;
        int int49 = dateTimeZone47.getOffsetFromLocal((long) 'a');
        long long52 = dateTimeZone47.adjustOffset(9505L, true);
        org.joda.time.DateTime dateTime53 = localDateTime38.toDateTime(dateTimeZone47);
        org.joda.time.DateTime dateTime54 = dateTime37.toDateTime(dateTimeZone47);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime6 and dateTime24", (dateTime6.compareTo(dateTime24) == 0) == dateTime6.equals(dateTime24));
    }

    @Test
    public void test0143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0143");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withPivotYear((java.lang.Integer) (-26151846));
        java.util.Locale locale5 = java.util.Locale.KOREAN;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = dateTimeFormatter4.withLocale(locale5);
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime9 = dateTime7.minusHours((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int11 = dateTime9.get(dateTimeFieldType10);
        org.joda.time.DateTime dateTime13 = dateTime9.minusMillis((int) '#');
        org.joda.time.DateTime dateTime15 = dateTime13.plusDays(11);
        org.joda.time.DateTime dateTime18 = dateTime13.withDurationAdded((long) 11757696, (int) ' ');
        int int19 = dateTime13.getWeekOfWeekyear();
        int int20 = dateTime13.getDayOfYear();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(59, 50);
        java.util.TimeZone timeZone25 = dateTimeZone24.toTimeZone();
        java.util.TimeZone timeZone26 = dateTimeZone24.toTimeZone();
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime(72000000L, dateTimeZone24);
        int int29 = dateTimeZone24.getStandardOffset((long) 'u');
        org.joda.time.LocalDate localDate30 = new org.joda.time.LocalDate(dateTimeZone24);
        org.joda.time.DateTime dateTime31 = dateTime13.withZone(dateTimeZone24);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter32 = dateTimeFormatter6.withZone(dateTimeZone24);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime13 and dateTime31", (dateTime13.compareTo(dateTime31) == 0) == dateTime13.equals(dateTime31));
    }

    @Test
    public void test0144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0144");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 100, dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.plusDays(50);
        org.joda.time.Chronology chronology5 = localDate4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 100, dateTimeZone8);
        org.joda.time.LocalDate localDate11 = localDate9.plusDays(50);
        int int12 = localDate9.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate14 = localDate9.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        int int17 = dateTimeZone15.getOffset((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateMidnight dateMidnight18 = localDate9.toDateMidnight(dateTimeZone15);
        long long20 = dateTimeZone15.convertUTCToLocal(60000L);
        org.joda.time.chrono.ZonedChronology zonedChronology21 = org.joda.time.chrono.ZonedChronology.getInstance(chronology5, dateTimeZone15);
        org.joda.time.DurationField durationField22 = zonedChronology21.weeks();
        org.joda.time.DateTimeField dateTimeField23 = zonedChronology21.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        long long27 = zonedChronology21.add(readablePeriod24, (long) 2022, 0);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.UTC;
        int int30 = dateTimeZone28.getStandardOffset((long) (byte) 1);
        java.util.TimeZone timeZone31 = dateTimeZone28.toTimeZone();
        org.joda.time.Chronology chronology32 = zonedChronology21.withZone(dateTimeZone28);
        org.joda.time.DurationField durationField33 = zonedChronology21.weeks();
        org.joda.time.DurationField durationField34 = zonedChronology21.eras();
        org.joda.time.DurationField durationField35 = zonedChronology21.hours();
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField22 and durationField34", Math.signum(durationField22.compareTo(durationField34)) == -Math.signum(durationField34.compareTo(durationField22)));
    }

    @Test
    public void test0145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0145");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime2 = dateTime0.minusHours((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int4 = dateTime2.get(dateTimeFieldType3);
        org.joda.time.DateTime dateTime6 = dateTime2.minusMillis((int) '#');
        org.joda.time.DateTime dateTime8 = dateTime2.withYearOfEra(17);
        org.joda.time.TimeOfDay timeOfDay9 = dateTime8.toTimeOfDay();
        java.util.GregorianCalendar gregorianCalendar10 = dateTime8.toGregorianCalendar();
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((java.lang.Object) gregorianCalendar10);
        gregorianCalendar10.set(11923881, 11902614, 26275822, 11917422, 38048541);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime8 and dateTime11", (dateTime8.compareTo(dateTime11) == 0) == dateTime8.equals(dateTime11));
    }

    @Test
    public void test0146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0146");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 100, dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.plusDays(50);
        org.joda.time.Chronology chronology5 = localDate4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 100, dateTimeZone8);
        org.joda.time.LocalDate localDate11 = localDate9.plusDays(50);
        int int12 = localDate9.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate14 = localDate9.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        int int17 = dateTimeZone15.getOffset((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateMidnight dateMidnight18 = localDate9.toDateMidnight(dateTimeZone15);
        long long20 = dateTimeZone15.convertUTCToLocal(60000L);
        org.joda.time.chrono.ZonedChronology zonedChronology21 = org.joda.time.chrono.ZonedChronology.getInstance(chronology5, dateTimeZone15);
        org.joda.time.DurationField durationField22 = zonedChronology21.eras();
        long long26 = zonedChronology21.add((long) 11767256, (long) 11781671, 11830648);
        org.joda.time.DurationField durationField27 = zonedChronology21.hours();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField22, durationField27, and durationField22", !(durationField22.compareTo(durationField27) == 0) || (Math.signum(durationField22.compareTo(durationField22)) == Math.signum(durationField27.compareTo(durationField22))));
    }

    @Test
    public void test0147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0147");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime2 = dateTime0.minusHours((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int4 = dateTime2.get(dateTimeFieldType3);
        org.joda.time.DateTime dateTime6 = dateTime2.minusMillis((int) '#');
        boolean boolean7 = dateTime2.isBeforeNow();
        int int8 = dateTime2.getYearOfEra();
        org.joda.time.Instant instant9 = dateTime2.toInstant();
        org.joda.time.DateTime dateTime10 = instant9.toDateTime();
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.Instant instant13 = instant9.withDurationAdded(readableDuration11, 11768869);
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.Instant instant16 = instant9.withDurationAdded(readableDuration14, 11869983);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate((long) 100, dateTimeZone18);
        org.joda.time.LocalDate localDate21 = localDate19.plusDays(50);
        org.joda.time.Chronology chronology22 = localDate21.getChronology();
        org.joda.time.DateTimeField dateTimeField23 = chronology22.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate((long) 100, dateTimeZone25);
        org.joda.time.LocalDate localDate28 = localDate26.plusDays(50);
        int int29 = localDate26.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate31 = localDate26.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime();
        int int34 = dateTimeZone32.getOffset((org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.DateMidnight dateMidnight35 = localDate26.toDateMidnight(dateTimeZone32);
        long long37 = dateTimeZone32.convertUTCToLocal(60000L);
        org.joda.time.chrono.ZonedChronology zonedChronology38 = org.joda.time.chrono.ZonedChronology.getInstance(chronology22, dateTimeZone32);
        org.joda.time.DurationField durationField39 = zonedChronology38.weeks();
        org.joda.time.DateTimeField dateTimeField40 = zonedChronology38.centuryOfEra();
        org.joda.time.DurationField durationField41 = zonedChronology38.minutes();
        org.joda.time.DateTimeField dateTimeField42 = zonedChronology38.year();
        org.joda.time.DateTimeField dateTimeField43 = zonedChronology38.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField44 = zonedChronology38.clockhourOfHalfday();
        org.joda.time.MutableDateTime mutableDateTime45 = instant16.toMutableDateTime((org.joda.time.Chronology) zonedChronology38);
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime();
        int int48 = dateTimeZone46.getOffset((org.joda.time.ReadableInstant) dateTime47);
        org.joda.time.LocalTime localTime49 = org.joda.time.LocalTime.now(dateTimeZone46);
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime(dateTimeZone46);
        java.lang.String str52 = dateTimeZone46.getShortName((long) 4);
        org.joda.time.Chronology chronology53 = zonedChronology38.withZone(dateTimeZone46);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and mutableDateTime45", (dateTime2.compareTo(mutableDateTime45) == 0) == dateTime2.equals(mutableDateTime45));
    }

    @Test
    public void test0148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0148");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 100, dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.plusDays(50);
        org.joda.time.Chronology chronology5 = localDate4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 100, dateTimeZone8);
        org.joda.time.LocalDate localDate11 = localDate9.plusDays(50);
        int int12 = localDate9.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate14 = localDate9.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        int int17 = dateTimeZone15.getOffset((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateMidnight dateMidnight18 = localDate9.toDateMidnight(dateTimeZone15);
        long long20 = dateTimeZone15.convertUTCToLocal(60000L);
        org.joda.time.chrono.ZonedChronology zonedChronology21 = org.joda.time.chrono.ZonedChronology.getInstance(chronology5, dateTimeZone15);
        org.joda.time.DurationField durationField22 = zonedChronology21.weeks();
        org.joda.time.DateTimeField dateTimeField23 = zonedChronology21.centuryOfEra();
        org.joda.time.DurationField durationField24 = zonedChronology21.minutes();
        org.joda.time.DateTimeField dateTimeField25 = zonedChronology21.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone26 = zonedChronology21.getZone();
        org.joda.time.Chronology chronology27 = zonedChronology21.withUTC();
        org.joda.time.Instant instant28 = new org.joda.time.Instant();
        org.joda.time.Instant instant30 = instant28.withMillis((long) 11);
        org.joda.time.Instant instant31 = instant30.toInstant();
        org.joda.time.Chronology chronology32 = instant30.getChronology();
        org.joda.time.DateTimeField dateTimeField33 = chronology32.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate36 = new org.joda.time.LocalDate((long) 100, dateTimeZone35);
        int int37 = dateTimeField33.getMaximumValue((org.joda.time.ReadablePartial) localDate36);
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        org.joda.time.LocalDate localDate39 = localDate36.minus(readablePeriod38);
        java.util.Date date40 = localDate39.toDate();
        long long42 = zonedChronology21.set((org.joda.time.ReadablePartial) localDate39, (long) 11836898);
        org.joda.time.DateTimeField dateTimeField43 = zonedChronology21.yearOfCentury();
        org.joda.time.DurationField durationField44 = zonedChronology21.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField44, durationField22, and durationField24", !(durationField44.compareTo(durationField22) == 0) || (Math.signum(durationField44.compareTo(durationField24)) == Math.signum(durationField22.compareTo(durationField24))));
    }

    @Test
    public void test0149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0149");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 100, dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.plusDays(50);
        org.joda.time.Chronology chronology5 = localDate4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 100, dateTimeZone8);
        org.joda.time.LocalDate localDate11 = localDate9.plusDays(50);
        int int12 = localDate9.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate14 = localDate9.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        int int17 = dateTimeZone15.getOffset((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateMidnight dateMidnight18 = localDate9.toDateMidnight(dateTimeZone15);
        long long20 = dateTimeZone15.convertUTCToLocal(60000L);
        org.joda.time.chrono.ZonedChronology zonedChronology21 = org.joda.time.chrono.ZonedChronology.getInstance(chronology5, dateTimeZone15);
        org.joda.time.DurationField durationField22 = zonedChronology21.weeks();
        org.joda.time.DateTimeField dateTimeField23 = zonedChronology21.year();
        org.joda.time.DateTimeZone dateTimeZone24 = zonedChronology21.getZone();
        org.joda.time.DateTimeField dateTimeField25 = zonedChronology21.weekyear();
        org.joda.time.DateTimeField dateTimeField26 = zonedChronology21.minuteOfHour();
        org.joda.time.DurationField durationField27 = zonedChronology21.hours();
        org.joda.time.DurationField durationField28 = zonedChronology21.weeks();
        org.joda.time.DurationField durationField29 = zonedChronology21.centuries();
        org.joda.time.DurationField durationField30 = zonedChronology21.centuries();
        org.joda.time.DateTimeField dateTimeField31 = zonedChronology21.weekyearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate34 = new org.joda.time.LocalDate((long) 100, dateTimeZone33);
        java.util.Date date35 = localDate34.toDate();
        org.joda.time.DateTime dateTime36 = localDate34.toDateTimeAtMidnight();
        int int37 = localDate34.getYearOfCentury();
        org.joda.time.DateTime dateTime38 = localDate34.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        org.joda.time.LocalDate localDate40 = localDate34.plus(readablePeriod39);
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate43 = new org.joda.time.LocalDate((long) 100, dateTimeZone42);
        org.joda.time.LocalDate localDate45 = localDate43.plusDays(50);
        org.joda.time.DateTime dateTime46 = localDate45.toDateTimeAtMidnight();
        int[] intArray47 = localDate45.getValues();
        org.joda.time.DurationFieldType durationFieldType48 = org.joda.time.DurationFieldType.days();
        boolean boolean49 = localDate45.isSupported(durationFieldType48);
        boolean boolean50 = localDate40.isSupported(durationFieldType48);
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate53 = new org.joda.time.LocalDate((long) 100, dateTimeZone52);
        org.joda.time.LocalDate localDate55 = localDate53.plusDays(50);
        org.joda.time.Chronology chronology56 = localDate55.getChronology();
        org.joda.time.DateTimeField dateTimeField57 = chronology56.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate60 = new org.joda.time.LocalDate((long) 100, dateTimeZone59);
        org.joda.time.LocalDate localDate62 = localDate60.plusDays(50);
        int int63 = localDate60.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate65 = localDate60.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone66 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime67 = new org.joda.time.DateTime();
        int int68 = dateTimeZone66.getOffset((org.joda.time.ReadableInstant) dateTime67);
        org.joda.time.DateMidnight dateMidnight69 = localDate60.toDateMidnight(dateTimeZone66);
        long long71 = dateTimeZone66.convertUTCToLocal(60000L);
        org.joda.time.chrono.ZonedChronology zonedChronology72 = org.joda.time.chrono.ZonedChronology.getInstance(chronology56, dateTimeZone66);
        org.joda.time.DurationField durationField73 = zonedChronology72.weeks();
        org.joda.time.DateTimeField dateTimeField74 = zonedChronology72.weekyear();
        org.joda.time.DurationField durationField75 = zonedChronology72.weekyears();
        org.joda.time.DateTimeZone dateTimeZone77 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate78 = new org.joda.time.LocalDate((long) 100, dateTimeZone77);
        org.joda.time.LocalDate localDate80 = localDate78.plusDays(50);
        org.joda.time.Chronology chronology81 = localDate80.getChronology();
        org.joda.time.LocalDate.Property property82 = localDate80.era();
        org.joda.time.DateTimeField dateTimeField83 = property82.getField();
        org.joda.time.LocalDate localDate84 = property82.getLocalDate();
        org.joda.time.LocalDate localDate86 = localDate84.withYear(26160535);
        org.joda.time.LocalDate localDate88 = localDate86.minusYears(11766550);
        int[] intArray90 = zonedChronology72.get((org.joda.time.ReadablePartial) localDate88, (long) 11764640);
        zonedChronology21.validate((org.joda.time.ReadablePartial) localDate40, intArray90);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on durationField22 and durationField73", (durationField22.compareTo(durationField73) == 0) == durationField22.equals(durationField73));
    }

    @Test
    public void test0150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0150");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        int int2 = dateTime1.getDayOfYear();
        org.joda.time.DateTime dateTime4 = dateTime1.withYear(11751002);
        org.joda.time.Instant instant5 = dateTime1.toInstant();
        org.joda.time.DateTime dateTime7 = dateTime1.withMillisOfDay(16);
        org.joda.time.DateTime dateTime9 = dateTime1.plusWeeks(11);
        java.util.Locale locale11 = java.util.Locale.JAPAN;
        java.util.Set<java.lang.String> strSet12 = locale11.getUnicodeLocaleAttributes();
        java.util.Iterator<java.lang.String> strItor13 = strSet12.iterator();
        java.util.stream.Stream<java.lang.String> strStream14 = strSet12.parallelStream();
        java.util.Locale locale15 = java.util.Locale.JAPAN;
        java.util.Set<java.lang.String> strSet16 = locale15.getUnicodeLocaleAttributes();
        java.util.Iterator<java.lang.String> strItor17 = strSet16.iterator();
        boolean boolean18 = strSet12.removeAll((java.util.Collection<java.lang.String>) strSet16);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(59, 50);
        java.util.TimeZone timeZone22 = dateTimeZone21.toTimeZone();
        boolean boolean23 = strSet12.equals((java.lang.Object) dateTimeZone21);
        long long25 = dateTimeZone21.previousTransition(6059809176L);
        boolean boolean26 = dateTimeZone21.isFixed();
        org.joda.time.LocalTime localTime27 = new org.joda.time.LocalTime((long) 11812320, dateTimeZone21);
        org.joda.time.DateTime dateTime28 = dateTime1.toDateTime(dateTimeZone21);
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate((long) 11862171, dateTimeZone21);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime28", (dateTime1.compareTo(dateTime28) == 0) == dateTime1.equals(dateTime28));
    }

    @Test
    public void test0151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0151");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 100, dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.plusDays(50);
        org.joda.time.Chronology chronology5 = localDate4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 100, dateTimeZone8);
        org.joda.time.LocalDate localDate11 = localDate9.plusDays(50);
        int int12 = localDate9.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate14 = localDate9.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        int int17 = dateTimeZone15.getOffset((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateMidnight dateMidnight18 = localDate9.toDateMidnight(dateTimeZone15);
        long long20 = dateTimeZone15.convertUTCToLocal(60000L);
        org.joda.time.chrono.ZonedChronology zonedChronology21 = org.joda.time.chrono.ZonedChronology.getInstance(chronology5, dateTimeZone15);
        org.joda.time.DurationField durationField22 = zonedChronology21.weeks();
        org.joda.time.DateTimeField dateTimeField23 = zonedChronology21.weekyear();
        org.joda.time.DurationField durationField24 = zonedChronology21.weekyears();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate((long) 100, dateTimeZone26);
        org.joda.time.LocalDate localDate29 = localDate27.plusDays(50);
        org.joda.time.Chronology chronology30 = localDate29.getChronology();
        org.joda.time.LocalDate.Property property31 = localDate29.era();
        org.joda.time.DateTimeField dateTimeField32 = property31.getField();
        org.joda.time.LocalDate localDate33 = property31.getLocalDate();
        org.joda.time.LocalDate localDate35 = localDate33.withYear(26160535);
        org.joda.time.LocalDate localDate37 = localDate35.minusYears(11766550);
        int[] intArray39 = zonedChronology21.get((org.joda.time.ReadablePartial) localDate37, (long) 11764640);
        java.lang.String str40 = zonedChronology21.toString();
        org.joda.time.DateTimeField dateTimeField41 = zonedChronology21.monthOfYear();
        org.joda.time.DurationField durationField42 = zonedChronology21.years();
        org.joda.time.DateTimeField dateTimeField43 = zonedChronology21.centuryOfEra();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on durationField24 and durationField42", (durationField24.compareTo(durationField42) == 0) == durationField24.equals(durationField42));
    }

    @Test
    public void test0152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0152");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 100, dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.plusDays(50);
        org.joda.time.Chronology chronology5 = localDate4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 100, dateTimeZone8);
        org.joda.time.LocalDate localDate11 = localDate9.plusDays(50);
        int int12 = localDate9.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate14 = localDate9.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        int int17 = dateTimeZone15.getOffset((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateMidnight dateMidnight18 = localDate9.toDateMidnight(dateTimeZone15);
        long long20 = dateTimeZone15.convertUTCToLocal(60000L);
        org.joda.time.chrono.ZonedChronology zonedChronology21 = org.joda.time.chrono.ZonedChronology.getInstance(chronology5, dateTimeZone15);
        org.joda.time.DurationField durationField22 = zonedChronology21.eras();
        org.joda.time.DateTimeField dateTimeField23 = zonedChronology21.minuteOfDay();
        org.joda.time.Chronology chronology24 = zonedChronology21.withUTC();
        org.joda.time.DateTimeField dateTimeField25 = zonedChronology21.dayOfWeek();
        org.joda.time.DurationField durationField26 = zonedChronology21.seconds();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField22, durationField26, and durationField22", !(durationField22.compareTo(durationField26) == 0) || (Math.signum(durationField22.compareTo(durationField22)) == Math.signum(durationField26.compareTo(durationField22))));
    }

    @Test
    public void test0153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0153");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 100, dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.plusDays(50);
        org.joda.time.Chronology chronology5 = localDate4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 100, dateTimeZone8);
        org.joda.time.LocalDate localDate11 = localDate9.plusDays(50);
        int int12 = localDate9.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate14 = localDate9.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        int int17 = dateTimeZone15.getOffset((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateMidnight dateMidnight18 = localDate9.toDateMidnight(dateTimeZone15);
        long long20 = dateTimeZone15.convertUTCToLocal(60000L);
        org.joda.time.chrono.ZonedChronology zonedChronology21 = org.joda.time.chrono.ZonedChronology.getInstance(chronology5, dateTimeZone15);
        org.joda.time.DurationField durationField22 = zonedChronology21.eras();
        org.joda.time.DateTimeField dateTimeField23 = zonedChronology21.minuteOfDay();
        org.joda.time.Chronology chronology24 = zonedChronology21.withUTC();
        org.joda.time.DateTimeField dateTimeField25 = zonedChronology21.monthOfYear();
        org.joda.time.DateTimeField dateTimeField26 = zonedChronology21.minuteOfDay();
        org.joda.time.DurationField durationField27 = dateTimeField26.getRangeDurationField();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField22, durationField27, and durationField22", !(durationField22.compareTo(durationField27) == 0) || (Math.signum(durationField22.compareTo(durationField22)) == Math.signum(durationField27.compareTo(durationField22))));
    }

    @Test
    public void test0154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0154");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 100, dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.plusDays(50);
        org.joda.time.Chronology chronology5 = localDate4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 100, dateTimeZone8);
        org.joda.time.LocalDate localDate11 = localDate9.plusDays(50);
        int int12 = localDate9.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate14 = localDate9.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        int int17 = dateTimeZone15.getOffset((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateMidnight dateMidnight18 = localDate9.toDateMidnight(dateTimeZone15);
        long long20 = dateTimeZone15.convertUTCToLocal(60000L);
        org.joda.time.chrono.ZonedChronology zonedChronology21 = org.joda.time.chrono.ZonedChronology.getInstance(chronology5, dateTimeZone15);
        org.joda.time.DurationField durationField22 = zonedChronology21.eras();
        org.joda.time.DateTimeField dateTimeField23 = zonedChronology21.minuteOfDay();
        org.joda.time.Chronology chronology24 = zonedChronology21.withUTC();
        org.joda.time.DateTimeField dateTimeField25 = zonedChronology21.dayOfMonth();
        org.joda.time.DurationField durationField26 = zonedChronology21.minutes();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField22, durationField26, and durationField22", !(durationField22.compareTo(durationField26) == 0) || (Math.signum(durationField22.compareTo(durationField22)) == Math.signum(durationField26.compareTo(durationField22))));
    }

    @Test
    public void test0155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0155");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 100, dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.plusDays(50);
        org.joda.time.Chronology chronology5 = localDate4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 100, dateTimeZone8);
        org.joda.time.LocalDate localDate11 = localDate9.plusDays(50);
        int int12 = localDate9.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate14 = localDate9.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        int int17 = dateTimeZone15.getOffset((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateMidnight dateMidnight18 = localDate9.toDateMidnight(dateTimeZone15);
        long long20 = dateTimeZone15.convertUTCToLocal(60000L);
        org.joda.time.chrono.ZonedChronology zonedChronology21 = org.joda.time.chrono.ZonedChronology.getInstance(chronology5, dateTimeZone15);
        org.joda.time.DurationField durationField22 = zonedChronology21.eras();
        org.joda.time.DateTimeField dateTimeField23 = zonedChronology21.minuteOfDay();
        org.joda.time.Chronology chronology24 = zonedChronology21.withUTC();
        org.joda.time.DateTimeField dateTimeField25 = zonedChronology21.monthOfYear();
        org.joda.time.DurationField durationField26 = zonedChronology21.weekyears();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField22, durationField26, and durationField22", !(durationField22.compareTo(durationField26) == 0) || (Math.signum(durationField22.compareTo(durationField22)) == Math.signum(durationField26.compareTo(durationField22))));
    }

    @Test
    public void test0156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0156");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 100, dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.plusDays(50);
        org.joda.time.Chronology chronology5 = localDate4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 100, dateTimeZone8);
        org.joda.time.LocalDate localDate11 = localDate9.plusDays(50);
        int int12 = localDate9.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate14 = localDate9.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        int int17 = dateTimeZone15.getOffset((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateMidnight dateMidnight18 = localDate9.toDateMidnight(dateTimeZone15);
        long long20 = dateTimeZone15.convertUTCToLocal(60000L);
        org.joda.time.chrono.ZonedChronology zonedChronology21 = org.joda.time.chrono.ZonedChronology.getInstance(chronology5, dateTimeZone15);
        org.joda.time.DurationField durationField22 = zonedChronology21.weeks();
        org.joda.time.DateTimeField dateTimeField23 = zonedChronology21.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField24 = zonedChronology21.millisOfSecond();
        org.joda.time.DurationField durationField25 = zonedChronology21.millis();
        org.joda.time.DurationField durationField26 = zonedChronology21.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField26, durationField22, and durationField25", !(durationField26.compareTo(durationField22) == 0) || (Math.signum(durationField26.compareTo(durationField25)) == Math.signum(durationField22.compareTo(durationField25))));
    }

    @Test
    public void test0157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0157");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime2 = dateTime0.minusHours((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int4 = dateTime2.get(dateTimeFieldType3);
        org.joda.time.DateTime dateTime6 = dateTime2.minusMillis((int) '#');
        org.joda.time.DateTime dateTime8 = dateTime6.plusDays(11);
        org.joda.time.DateTime dateTime11 = dateTime6.withDurationAdded((long) (byte) 10, 11);
        org.joda.time.DateTime dateTime13 = dateTime6.plusDays(26159400);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate((long) 100, dateTimeZone15);
        org.joda.time.LocalDate localDate18 = localDate16.plusDays(50);
        org.joda.time.Chronology chronology19 = localDate18.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.minuteOfHour();
        org.joda.time.MutableDateTime mutableDateTime21 = dateTime6.toMutableDateTime(chronology19);
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime24 = dateTime22.minusHours((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int26 = dateTime24.get(dateTimeFieldType25);
        org.joda.time.DateTime dateTime28 = dateTime24.minusMillis((int) '#');
        org.joda.time.DateTime dateTime30 = dateTime28.plusDays(11);
        org.joda.time.DateTime dateTime33 = dateTime28.withDurationAdded((long) 11757696, (int) ' ');
        int int34 = dateTime28.getWeekOfWeekyear();
        int int35 = dateTime28.getDayOfYear();
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(59, 50);
        java.util.TimeZone timeZone40 = dateTimeZone39.toTimeZone();
        java.util.TimeZone timeZone41 = dateTimeZone39.toTimeZone();
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime(72000000L, dateTimeZone39);
        int int44 = dateTimeZone39.getStandardOffset((long) 'u');
        org.joda.time.LocalDate localDate45 = new org.joda.time.LocalDate(dateTimeZone39);
        org.joda.time.DateTime dateTime46 = dateTime28.withZone(dateTimeZone39);
        org.joda.time.DateTime dateTime47 = dateTime6.withZone(dateTimeZone39);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime21 and dateTime46", (mutableDateTime21.compareTo(dateTime46) == 0) == mutableDateTime21.equals(dateTime46));
    }

    @Test
    public void test0158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0158");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        int int1 = dateTime0.getDayOfYear();
        org.joda.time.DateTime dateTime3 = dateTime0.withYear(11751002);
        org.joda.time.Instant instant4 = dateTime0.toInstant();
        org.joda.time.DateTime dateTime6 = dateTime0.withMillisOfDay(16);
        org.joda.time.DateTime dateTime8 = dateTime0.plusWeeks(11);
        java.util.Locale locale10 = java.util.Locale.JAPAN;
        java.util.Set<java.lang.String> strSet11 = locale10.getUnicodeLocaleAttributes();
        java.util.Iterator<java.lang.String> strItor12 = strSet11.iterator();
        java.util.stream.Stream<java.lang.String> strStream13 = strSet11.parallelStream();
        java.util.Locale locale14 = java.util.Locale.JAPAN;
        java.util.Set<java.lang.String> strSet15 = locale14.getUnicodeLocaleAttributes();
        java.util.Iterator<java.lang.String> strItor16 = strSet15.iterator();
        boolean boolean17 = strSet11.removeAll((java.util.Collection<java.lang.String>) strSet15);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(59, 50);
        java.util.TimeZone timeZone21 = dateTimeZone20.toTimeZone();
        boolean boolean22 = strSet11.equals((java.lang.Object) dateTimeZone20);
        long long24 = dateTimeZone20.previousTransition(6059809176L);
        boolean boolean25 = dateTimeZone20.isFixed();
        org.joda.time.LocalTime localTime26 = new org.joda.time.LocalTime((long) 11812320, dateTimeZone20);
        org.joda.time.DateTime dateTime27 = dateTime0.toDateTime(dateTimeZone20);
        int int28 = dateTime0.getDayOfWeek();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant4 and dateTime27", (instant4.compareTo(dateTime27) == 0) == instant4.equals(dateTime27));
    }

    @Test
    public void test0159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0159");
        java.util.Locale locale0 = java.util.Locale.TAIWAN;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        int int3 = calendar1.getMinimum(1);
        calendar1.setFirstDayOfWeek(0);
        java.util.TimeZone timeZone7 = java.util.TimeZone.getTimeZone("");
        timeZone7.setRawOffset((int) (short) 0);
        java.util.TimeZone.setDefault(timeZone7);
        calendar1.setTimeZone(timeZone7);
        java.util.Locale locale14 = new java.util.Locale("\u4e2d\u56fd\u8a9e", "10.04.1970 00:00:00");
        java.lang.String str15 = locale14.getCountry();
        java.util.Calendar calendar16 = java.util.Calendar.getInstance(timeZone7, locale14);
        java.lang.String str17 = locale14.getDisplayVariant();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar1 and calendar16", (calendar1.compareTo(calendar16) == 0) == calendar1.equals(calendar16));
    }

    @Test
    public void test0160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0160");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.Instant instant2 = instant0.withMillis((long) 11);
        org.joda.time.Instant instant3 = instant2.toInstant();
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Instant instant5 = instant2.minus(readableDuration4);
        org.joda.time.DateTime dateTime6 = instant2.toDateTimeISO();
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime9 = dateTime7.minusHours((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int11 = dateTime9.get(dateTimeFieldType10);
        org.joda.time.DateTime dateTime13 = dateTime9.minusSeconds((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(59, 50);
        java.util.TimeZone timeZone19 = dateTimeZone18.toTimeZone();
        java.util.TimeZone timeZone20 = dateTimeZone18.toTimeZone();
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(72000000L, dateTimeZone18);
        int int23 = dateTimeZone18.getStandardOffset((long) 'u');
        java.lang.String str25 = dateTimeZone18.getName(1645142400000L);
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((long) 11779950, dateTimeZone18);
        org.joda.time.DateTime dateTime27 = dateTime9.withZoneRetainFields(dateTimeZone18);
        org.joda.time.MutableDateTime mutableDateTime28 = dateTime6.toMutableDateTime(dateTimeZone18);
        java.util.Locale locale30 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet31 = locale30.getUnicodeLocaleAttributes();
        java.lang.String str32 = locale30.toLanguageTag();
        boolean boolean33 = locale30.hasExtensions();
        java.util.Locale locale34 = locale30.stripExtensions();
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime37 = dateTime35.withMinuteOfHour(14);
        org.joda.time.DateTime dateTime39 = dateTime35.withCenturyOfEra(50);
        org.joda.time.Instant instant40 = new org.joda.time.Instant();
        org.joda.time.Instant instant42 = instant40.minus((long) 2);
        int int43 = dateTime39.compareTo((org.joda.time.ReadableInstant) instant40);
        org.joda.time.DateTime.Property property44 = dateTime39.centuryOfEra();
        org.joda.time.DateTime dateTime46 = dateTime39.plusDays(58);
        java.util.Locale locale47 = java.util.Locale.JAPAN;
        java.util.Set<java.lang.String> strSet48 = locale47.getUnicodeLocaleAttributes();
        java.lang.String str49 = locale47.getScript();
        java.util.Set<java.lang.String> strSet50 = locale47.getUnicodeLocaleKeys();
        java.util.Set<java.lang.String> strSet51 = locale47.getUnicodeLocaleKeys();
        java.util.Calendar calendar52 = dateTime39.toCalendar(locale47);
        java.lang.String str53 = locale34.getDisplayCountry(locale47);
        java.lang.String str54 = dateTime6.toString("11770-01-01", locale34);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant2 and mutableDateTime28", (instant2.compareTo(mutableDateTime28) == 0) == instant2.equals(mutableDateTime28));
    }

    @Test
    public void test0161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0161");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 100, dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.plusDays(50);
        int int5 = localDate4.getDayOfMonth();
        org.joda.time.LocalDate.Property property6 = localDate4.dayOfMonth();
        java.lang.String str8 = localDate4.toString("29");
        org.joda.time.Instant instant9 = new org.joda.time.Instant();
        org.joda.time.Instant instant11 = instant9.withMillis((long) 11);
        org.joda.time.Instant instant12 = instant11.toInstant();
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.Instant instant14 = instant11.minus(readableDuration13);
        org.joda.time.DateTime dateTime15 = instant11.toDateTimeISO();
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime18 = dateTime16.minusHours((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int20 = dateTime18.get(dateTimeFieldType19);
        org.joda.time.DateTime dateTime22 = dateTime18.minusSeconds((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(59, 50);
        java.util.TimeZone timeZone28 = dateTimeZone27.toTimeZone();
        java.util.TimeZone timeZone29 = dateTimeZone27.toTimeZone();
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime(72000000L, dateTimeZone27);
        int int32 = dateTimeZone27.getStandardOffset((long) 'u');
        java.lang.String str34 = dateTimeZone27.getName(1645142400000L);
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime((long) 11779950, dateTimeZone27);
        org.joda.time.DateTime dateTime36 = dateTime18.withZoneRetainFields(dateTimeZone27);
        org.joda.time.MutableDateTime mutableDateTime37 = dateTime15.toMutableDateTime(dateTimeZone27);
        org.joda.time.DateTime dateTime38 = localDate4.toDateTimeAtStartOfDay(dateTimeZone27);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant11 and mutableDateTime37", (instant11.compareTo(mutableDateTime37) == 0) == instant11.equals(mutableDateTime37));
    }

    @Test
    public void test0162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0162");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 100, dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.plusDays(50);
        org.joda.time.Chronology chronology5 = localDate4.getChronology();
        org.joda.time.LocalDate.Property property6 = localDate4.era();
        org.joda.time.DateTimeField dateTimeField7 = property6.getField();
        org.joda.time.LocalDate localDate8 = property6.getLocalDate();
        org.joda.time.LocalDate localDate9 = property6.getLocalDate();
        int int10 = localDate9.getMonthOfYear();
        int int11 = localDate9.size();
        org.joda.time.LocalDate.Property property12 = localDate9.yearOfCentury();
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime15 = dateTime13.withMinuteOfHour(14);
        org.joda.time.DateTime dateTime17 = dateTime13.withCenturyOfEra(50);
        org.joda.time.Instant instant18 = new org.joda.time.Instant();
        org.joda.time.Instant instant20 = instant18.minus((long) 2);
        int int21 = dateTime17.compareTo((org.joda.time.ReadableInstant) instant18);
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(59, 50);
        java.util.TimeZone timeZone25 = dateTimeZone24.toTimeZone();
        org.joda.time.Instant instant26 = new org.joda.time.Instant();
        org.joda.time.Instant instant28 = instant26.withMillis((long) 11);
        org.joda.time.Instant instant29 = instant28.toInstant();
        org.joda.time.Instant instant31 = instant29.plus((long) 11757325);
        org.joda.time.Instant instant32 = new org.joda.time.Instant();
        org.joda.time.Instant instant34 = instant32.minus((long) 2);
        org.joda.time.ReadableDuration readableDuration35 = null;
        org.joda.time.Instant instant36 = instant34.plus(readableDuration35);
        boolean boolean37 = instant29.isBefore((org.joda.time.ReadableInstant) instant34);
        int int38 = dateTimeZone24.getOffset((org.joda.time.ReadableInstant) instant29);
        org.joda.time.DateTime dateTime39 = dateTime17.toDateTime(dateTimeZone24);
        org.joda.time.Interval interval40 = localDate9.toInterval(dateTimeZone24);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime17 and dateTime39", (dateTime17.compareTo(dateTime39) == 0) == dateTime17.equals(dateTime39));
    }

    @Test
    public void test0163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0163");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 100, dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.plusDays(50);
        org.joda.time.Chronology chronology5 = localDate4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 100, dateTimeZone8);
        org.joda.time.LocalDate localDate11 = localDate9.plusDays(50);
        int int12 = localDate9.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate14 = localDate9.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        int int17 = dateTimeZone15.getOffset((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateMidnight dateMidnight18 = localDate9.toDateMidnight(dateTimeZone15);
        long long20 = dateTimeZone15.convertUTCToLocal(60000L);
        org.joda.time.chrono.ZonedChronology zonedChronology21 = org.joda.time.chrono.ZonedChronology.getInstance(chronology5, dateTimeZone15);
        org.joda.time.DurationField durationField22 = zonedChronology21.weeks();
        org.joda.time.DateTimeField dateTimeField23 = zonedChronology21.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        long long27 = zonedChronology21.add(readablePeriod24, (long) 2022, 0);
        org.joda.time.DateTimeField dateTimeField28 = zonedChronology21.millisOfDay();
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology21.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField30 = zonedChronology21.year();
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate34 = new org.joda.time.LocalDate((long) 100, dateTimeZone33);
        org.joda.time.LocalDate localDate36 = localDate34.plusDays(50);
        org.joda.time.Chronology chronology37 = localDate36.getChronology();
        org.joda.time.DateTimeField dateTimeField38 = chronology37.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate41 = new org.joda.time.LocalDate((long) 100, dateTimeZone40);
        org.joda.time.LocalDate localDate43 = localDate41.plusDays(50);
        int int44 = localDate41.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate46 = localDate41.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime();
        int int49 = dateTimeZone47.getOffset((org.joda.time.ReadableInstant) dateTime48);
        org.joda.time.DateMidnight dateMidnight50 = localDate41.toDateMidnight(dateTimeZone47);
        long long52 = dateTimeZone47.convertUTCToLocal(60000L);
        org.joda.time.chrono.ZonedChronology zonedChronology53 = org.joda.time.chrono.ZonedChronology.getInstance(chronology37, dateTimeZone47);
        org.joda.time.DurationField durationField54 = zonedChronology53.weeks();
        org.joda.time.DateTimeField dateTimeField55 = zonedChronology53.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod56 = null;
        long long59 = zonedChronology53.add(readablePeriod56, (long) 2022, 0);
        org.joda.time.DateTimeField dateTimeField60 = zonedChronology53.millisOfDay();
        java.util.Locale locale64 = java.util.Locale.forLanguageTag("\u6cd5\u6587");
        long long65 = dateTimeField60.set((long) 11880208, "39", locale64);
        java.lang.String str66 = dateTimeField30.getAsShortText((-27418800), locale64);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on durationField22 and durationField54", (durationField22.compareTo(durationField54) == 0) == durationField22.equals(durationField54));
    }

    @Test
    public void test0164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0164");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 100, dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.plusDays(50);
        org.joda.time.Chronology chronology5 = localDate4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 100, dateTimeZone8);
        org.joda.time.LocalDate localDate11 = localDate9.plusDays(50);
        int int12 = localDate9.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate14 = localDate9.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        int int17 = dateTimeZone15.getOffset((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateMidnight dateMidnight18 = localDate9.toDateMidnight(dateTimeZone15);
        long long20 = dateTimeZone15.convertUTCToLocal(60000L);
        org.joda.time.chrono.ZonedChronology zonedChronology21 = org.joda.time.chrono.ZonedChronology.getInstance(chronology5, dateTimeZone15);
        org.joda.time.DurationField durationField22 = zonedChronology21.eras();
        org.joda.time.DateTimeField dateTimeField23 = zonedChronology21.minuteOfDay();
        org.joda.time.Chronology chronology24 = zonedChronology21.withUTC();
        org.joda.time.DateTimeField dateTimeField25 = zonedChronology21.minuteOfHour();
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        long long29 = zonedChronology21.add(readablePeriod26, (long) 37, 26161850);
        org.joda.time.DateTimeField dateTimeField30 = zonedChronology21.dayOfYear();
        org.joda.time.DateTimeField dateTimeField31 = zonedChronology21.yearOfCentury();
        org.joda.time.DurationField durationField32 = zonedChronology21.millis();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField22, durationField32, and durationField22", !(durationField22.compareTo(durationField32) == 0) || (Math.signum(durationField22.compareTo(durationField22)) == Math.signum(durationField32.compareTo(durationField22))));
    }

    @Test
    public void test0165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0165");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.Instant instant2 = instant0.withMillis((long) 11);
        org.joda.time.Instant instant3 = instant2.toInstant();
        org.joda.time.Chronology chronology4 = instant2.getChronology();
        org.joda.time.DateTimeField dateTimeField5 = chronology4.minuteOfDay();
        org.joda.time.Chronology chronology6 = chronology4.withUTC();
        org.joda.time.DateTime dateTime7 = org.joda.time.DateTime.now(chronology6);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate((long) 100, dateTimeZone9);
        org.joda.time.LocalDate localDate12 = localDate10.plusDays(50);
        org.joda.time.Chronology chronology13 = localDate12.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate((long) 100, dateTimeZone16);
        org.joda.time.LocalDate localDate19 = localDate17.plusDays(50);
        int int20 = localDate17.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate22 = localDate17.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime();
        int int25 = dateTimeZone23.getOffset((org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.DateMidnight dateMidnight26 = localDate17.toDateMidnight(dateTimeZone23);
        long long28 = dateTimeZone23.convertUTCToLocal(60000L);
        org.joda.time.chrono.ZonedChronology zonedChronology29 = org.joda.time.chrono.ZonedChronology.getInstance(chronology13, dateTimeZone23);
        org.joda.time.DurationField durationField30 = zonedChronology29.weeks();
        org.joda.time.DateTimeField dateTimeField31 = zonedChronology29.year();
        org.joda.time.DateTimeZone dateTimeZone32 = zonedChronology29.getZone();
        org.joda.time.DateTimeField dateTimeField33 = zonedChronology29.weekyear();
        org.joda.time.DateTimeField dateTimeField34 = zonedChronology29.minuteOfHour();
        org.joda.time.DurationField durationField35 = zonedChronology29.hours();
        org.joda.time.DurationField durationField36 = zonedChronology29.weeks();
        org.joda.time.DateTimeField dateTimeField37 = zonedChronology29.hourOfHalfday();
        org.joda.time.DateTime dateTime38 = dateTime7.toDateTime((org.joda.time.Chronology) zonedChronology29);
        org.joda.time.DateTimeField dateTimeField39 = zonedChronology29.halfdayOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and dateTime38", (instant0.compareTo(dateTime38) == 0) == instant0.equals(dateTime38));
    }

    @Test
    public void test0166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0166");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 100, dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.plusDays(50);
        org.joda.time.Chronology chronology5 = localDate4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 100, dateTimeZone8);
        org.joda.time.LocalDate localDate11 = localDate9.plusDays(50);
        int int12 = localDate9.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate14 = localDate9.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        int int17 = dateTimeZone15.getOffset((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateMidnight dateMidnight18 = localDate9.toDateMidnight(dateTimeZone15);
        long long20 = dateTimeZone15.convertUTCToLocal(60000L);
        org.joda.time.chrono.ZonedChronology zonedChronology21 = org.joda.time.chrono.ZonedChronology.getInstance(chronology5, dateTimeZone15);
        org.joda.time.DurationField durationField22 = zonedChronology21.weeks();
        org.joda.time.DateTimeField dateTimeField23 = zonedChronology21.weekyear();
        org.joda.time.DurationField durationField24 = zonedChronology21.weekyears();
        org.joda.time.DateTimeField dateTimeField25 = zonedChronology21.minuteOfDay();
        java.lang.String str26 = zonedChronology21.toString();
        org.joda.time.DateTimeField dateTimeField27 = zonedChronology21.millisOfSecond();
        org.joda.time.DurationField durationField28 = zonedChronology21.years();
        org.joda.time.DurationField durationField29 = zonedChronology21.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on durationField24 and durationField28", (durationField24.compareTo(durationField28) == 0) == durationField24.equals(durationField28));
    }

    @Test
    public void test0167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0167");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 100, dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.plusDays(50);
        org.joda.time.Chronology chronology5 = localDate4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 100, dateTimeZone8);
        org.joda.time.LocalDate localDate11 = localDate9.plusDays(50);
        int int12 = localDate9.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate14 = localDate9.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        int int17 = dateTimeZone15.getOffset((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateMidnight dateMidnight18 = localDate9.toDateMidnight(dateTimeZone15);
        long long20 = dateTimeZone15.convertUTCToLocal(60000L);
        org.joda.time.chrono.ZonedChronology zonedChronology21 = org.joda.time.chrono.ZonedChronology.getInstance(chronology5, dateTimeZone15);
        org.joda.time.DurationField durationField22 = zonedChronology21.eras();
        org.joda.time.DateTimeField dateTimeField23 = zonedChronology21.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField24 = zonedChronology21.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField25 = zonedChronology21.monthOfYear();
        org.joda.time.DateTimeField dateTimeField26 = zonedChronology21.dayOfWeek();
        org.joda.time.DurationField durationField27 = zonedChronology21.hours();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField22, durationField27, and durationField22", !(durationField22.compareTo(durationField27) == 0) || (Math.signum(durationField22.compareTo(durationField22)) == Math.signum(durationField27.compareTo(durationField22))));
    }

    @Test
    public void test0168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0168");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime2 = dateTime0.minusHours((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int4 = dateTime2.get(dateTimeFieldType3);
        org.joda.time.DateTime dateTime6 = dateTime2.minusMillis((int) '#');
        boolean boolean7 = dateTime2.isBeforeNow();
        int int8 = dateTime2.getYearOfEra();
        org.joda.time.Instant instant9 = dateTime2.toInstant();
        org.joda.time.DateTime dateTime10 = instant9.toDateTime();
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.Instant instant13 = instant9.withDurationAdded(readableDuration11, 11768869);
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.Instant instant16 = instant9.withDurationAdded(readableDuration14, 11869983);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate((long) 100, dateTimeZone18);
        org.joda.time.LocalDate localDate21 = localDate19.plusDays(50);
        org.joda.time.Chronology chronology22 = localDate21.getChronology();
        org.joda.time.DateTimeField dateTimeField23 = chronology22.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate((long) 100, dateTimeZone25);
        org.joda.time.LocalDate localDate28 = localDate26.plusDays(50);
        int int29 = localDate26.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate31 = localDate26.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime();
        int int34 = dateTimeZone32.getOffset((org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.DateMidnight dateMidnight35 = localDate26.toDateMidnight(dateTimeZone32);
        long long37 = dateTimeZone32.convertUTCToLocal(60000L);
        org.joda.time.chrono.ZonedChronology zonedChronology38 = org.joda.time.chrono.ZonedChronology.getInstance(chronology22, dateTimeZone32);
        org.joda.time.DurationField durationField39 = zonedChronology38.weeks();
        org.joda.time.DateTimeField dateTimeField40 = zonedChronology38.centuryOfEra();
        org.joda.time.DurationField durationField41 = zonedChronology38.minutes();
        org.joda.time.DateTimeField dateTimeField42 = zonedChronology38.year();
        org.joda.time.DateTimeField dateTimeField43 = zonedChronology38.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField44 = zonedChronology38.clockhourOfHalfday();
        org.joda.time.MutableDateTime mutableDateTime45 = instant16.toMutableDateTime((org.joda.time.Chronology) zonedChronology38);
        org.joda.time.DateTimeField dateTimeField46 = zonedChronology38.secondOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and mutableDateTime45", (dateTime2.compareTo(mutableDateTime45) == 0) == dateTime2.equals(mutableDateTime45));
    }

    @Test
    public void test0169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0169");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 100, dateTimeZone2);
        org.joda.time.LocalDate localDate5 = localDate3.plusDays(50);
        org.joda.time.Chronology chronology6 = localDate5.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate((long) 100, dateTimeZone9);
        org.joda.time.LocalDate localDate12 = localDate10.plusDays(50);
        int int13 = localDate10.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate15 = localDate10.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime();
        int int18 = dateTimeZone16.getOffset((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.DateMidnight dateMidnight19 = localDate10.toDateMidnight(dateTimeZone16);
        long long21 = dateTimeZone16.convertUTCToLocal(60000L);
        org.joda.time.chrono.ZonedChronology zonedChronology22 = org.joda.time.chrono.ZonedChronology.getInstance(chronology6, dateTimeZone16);
        org.joda.time.DurationField durationField23 = zonedChronology22.weeks();
        org.joda.time.DateTimeField dateTimeField24 = zonedChronology22.year();
        org.joda.time.DateTimeZone dateTimeZone25 = zonedChronology22.getZone();
        org.joda.time.DurationField durationField26 = zonedChronology22.weekyears();
        org.joda.time.DateTimeField dateTimeField27 = zonedChronology22.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField28 = zonedChronology22.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology22.weekyear();
        org.joda.time.DateTimeField dateTimeField30 = zonedChronology22.weekOfWeekyear();
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((long) 35, (org.joda.time.Chronology) zonedChronology22);
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate34 = new org.joda.time.LocalDate((long) 100, dateTimeZone33);
        org.joda.time.LocalDate localDate36 = localDate34.plusDays(50);
        org.joda.time.Chronology chronology37 = localDate36.getChronology();
        org.joda.time.DateTimeField dateTimeField38 = chronology37.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate41 = new org.joda.time.LocalDate((long) 100, dateTimeZone40);
        org.joda.time.LocalDate localDate43 = localDate41.plusDays(50);
        int int44 = localDate41.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate46 = localDate41.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime();
        int int49 = dateTimeZone47.getOffset((org.joda.time.ReadableInstant) dateTime48);
        org.joda.time.DateMidnight dateMidnight50 = localDate41.toDateMidnight(dateTimeZone47);
        long long52 = dateTimeZone47.convertUTCToLocal(60000L);
        org.joda.time.chrono.ZonedChronology zonedChronology53 = org.joda.time.chrono.ZonedChronology.getInstance(chronology37, dateTimeZone47);
        org.joda.time.DurationField durationField54 = zonedChronology53.weeks();
        org.joda.time.DateTimeField dateTimeField55 = zonedChronology53.year();
        org.joda.time.DateTimeZone dateTimeZone56 = zonedChronology53.getZone();
        org.joda.time.DateTimeField dateTimeField57 = zonedChronology53.weekyear();
        org.joda.time.ReadablePeriod readablePeriod58 = null;
        long long61 = zonedChronology53.add(readablePeriod58, (long) 11783576, 26163273);
        org.joda.time.DateTimeField dateTimeField62 = zonedChronology53.weekyear();
        org.joda.time.DateTimeField dateTimeField63 = zonedChronology53.yearOfEra();
        org.joda.time.DateTimeField dateTimeField64 = zonedChronology53.monthOfYear();
        org.joda.time.DurationField durationField65 = zonedChronology53.halfdays();
        boolean boolean66 = zonedChronology22.equals((java.lang.Object) zonedChronology53);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on durationField23 and durationField54", (durationField23.compareTo(durationField54) == 0) == durationField23.equals(durationField54));
    }

    @Test
    public void test0170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0170");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 100, dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.plusDays(50);
        org.joda.time.Chronology chronology5 = localDate4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 100, dateTimeZone8);
        org.joda.time.LocalDate localDate11 = localDate9.plusDays(50);
        int int12 = localDate9.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate14 = localDate9.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        int int17 = dateTimeZone15.getOffset((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateMidnight dateMidnight18 = localDate9.toDateMidnight(dateTimeZone15);
        long long20 = dateTimeZone15.convertUTCToLocal(60000L);
        org.joda.time.chrono.ZonedChronology zonedChronology21 = org.joda.time.chrono.ZonedChronology.getInstance(chronology5, dateTimeZone15);
        org.joda.time.DurationField durationField22 = zonedChronology21.weeks();
        org.joda.time.DateTimeField dateTimeField23 = zonedChronology21.year();
        org.joda.time.DateTimeZone dateTimeZone24 = zonedChronology21.getZone();
        org.joda.time.DateTimeField dateTimeField25 = zonedChronology21.weekyear();
        org.joda.time.DateTimeField dateTimeField26 = zonedChronology21.minuteOfHour();
        org.joda.time.DurationField durationField27 = zonedChronology21.hours();
        org.joda.time.DurationField durationField28 = zonedChronology21.weeks();
        org.joda.time.DurationField durationField29 = zonedChronology21.centuries();
        org.joda.time.DurationField durationField30 = zonedChronology21.centuries();
        org.joda.time.DateTimeField dateTimeField31 = zonedChronology21.centuryOfEra();
        int int33 = dateTimeField31.get((long) 11903689);
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.UTC;
        int int36 = dateTimeZone34.getStandardOffset((long) (byte) 1);
        org.joda.time.LocalDateTime localDateTime37 = org.joda.time.LocalDateTime.now(dateTimeZone34);
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate40 = new org.joda.time.LocalDate((long) 100, dateTimeZone39);
        org.joda.time.LocalDate localDate42 = localDate40.plusDays(50);
        org.joda.time.Chronology chronology43 = localDate42.getChronology();
        org.joda.time.DateTimeField dateTimeField44 = chronology43.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate47 = new org.joda.time.LocalDate((long) 100, dateTimeZone46);
        org.joda.time.LocalDate localDate49 = localDate47.plusDays(50);
        int int50 = localDate47.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate52 = localDate47.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime();
        int int55 = dateTimeZone53.getOffset((org.joda.time.ReadableInstant) dateTime54);
        org.joda.time.DateMidnight dateMidnight56 = localDate47.toDateMidnight(dateTimeZone53);
        long long58 = dateTimeZone53.convertUTCToLocal(60000L);
        org.joda.time.chrono.ZonedChronology zonedChronology59 = org.joda.time.chrono.ZonedChronology.getInstance(chronology43, dateTimeZone53);
        org.joda.time.DurationField durationField60 = zonedChronology59.weeks();
        org.joda.time.DateTimeField dateTimeField61 = zonedChronology59.weekyear();
        org.joda.time.DurationField durationField62 = zonedChronology59.weekyears();
        org.joda.time.DateTimeZone dateTimeZone64 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate65 = new org.joda.time.LocalDate((long) 100, dateTimeZone64);
        org.joda.time.LocalDate localDate67 = localDate65.plusDays(50);
        org.joda.time.Chronology chronology68 = localDate67.getChronology();
        org.joda.time.LocalDate.Property property69 = localDate67.era();
        org.joda.time.DateTimeField dateTimeField70 = property69.getField();
        org.joda.time.LocalDate localDate71 = property69.getLocalDate();
        org.joda.time.LocalDate localDate73 = localDate71.withYear(26160535);
        org.joda.time.LocalDate localDate75 = localDate73.minusYears(11766550);
        int[] intArray77 = zonedChronology59.get((org.joda.time.ReadablePartial) localDate75, (long) 11764640);
        int int78 = dateTimeField31.getMinimumValue((org.joda.time.ReadablePartial) localDateTime37, intArray77);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on durationField22 and durationField60", (durationField22.compareTo(durationField60) == 0) == durationField22.equals(durationField60));
    }

    @Test
    public void test0171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0171");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 100, dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.plusDays(50);
        org.joda.time.Chronology chronology5 = localDate4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField7 = chronology5.dayOfMonth();
        int int9 = dateTimeField7.get((long) 11768869);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = dateTimeField7.getType();
        org.joda.time.DurationFieldType durationFieldType11 = dateTimeFieldType10.getRangeDurationType();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) 100, dateTimeZone13);
        org.joda.time.LocalDate localDate16 = localDate14.plusDays(50);
        org.joda.time.Chronology chronology17 = localDate16.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate((long) 100, dateTimeZone20);
        org.joda.time.LocalDate localDate23 = localDate21.plusDays(50);
        int int24 = localDate21.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate26 = localDate21.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime();
        int int29 = dateTimeZone27.getOffset((org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.DateMidnight dateMidnight30 = localDate21.toDateMidnight(dateTimeZone27);
        long long32 = dateTimeZone27.convertUTCToLocal(60000L);
        org.joda.time.chrono.ZonedChronology zonedChronology33 = org.joda.time.chrono.ZonedChronology.getInstance(chronology17, dateTimeZone27);
        org.joda.time.DurationField durationField34 = zonedChronology33.eras();
        org.joda.time.DateTimeField dateTimeField35 = zonedChronology33.weekyearOfCentury();
        boolean boolean36 = durationFieldType11.isSupported((org.joda.time.Chronology) zonedChronology33);
        org.joda.time.DurationField durationField37 = zonedChronology33.centuries();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField34, durationField37, and durationField34", !(durationField34.compareTo(durationField37) == 0) || (Math.signum(durationField34.compareTo(durationField34)) == Math.signum(durationField37.compareTo(durationField34))));
    }

    @Test
    public void test0172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0172");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 100, dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.plusDays(50);
        org.joda.time.Chronology chronology5 = localDate4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 100, dateTimeZone8);
        org.joda.time.LocalDate localDate11 = localDate9.plusDays(50);
        int int12 = localDate9.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate14 = localDate9.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        int int17 = dateTimeZone15.getOffset((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateMidnight dateMidnight18 = localDate9.toDateMidnight(dateTimeZone15);
        long long20 = dateTimeZone15.convertUTCToLocal(60000L);
        org.joda.time.chrono.ZonedChronology zonedChronology21 = org.joda.time.chrono.ZonedChronology.getInstance(chronology5, dateTimeZone15);
        org.joda.time.DurationField durationField22 = zonedChronology21.weeks();
        org.joda.time.DateTimeField dateTimeField23 = zonedChronology21.weekyear();
        org.joda.time.DurationField durationField24 = zonedChronology21.weekyears();
        long long28 = zonedChronology21.add(0L, 11776486L, 0);
        org.joda.time.DurationField durationField29 = zonedChronology21.halfdays();
        org.joda.time.DateTimeField dateTimeField30 = zonedChronology21.clockhourOfDay();
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((org.joda.time.Chronology) zonedChronology21);
        org.joda.time.DateTime.Property property32 = dateTime31.secondOfMinute();
        org.joda.time.DurationField durationField33 = property32.getDurationField();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime16 and dateTime31", (dateTime16.compareTo(dateTime31) == 0) == dateTime16.equals(dateTime31));
    }

    @Test
    public void test0173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0173");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        int int1 = dateTime0.getDayOfYear();
        org.joda.time.DateTime dateTime3 = dateTime0.withYear(11751002);
        org.joda.time.DateTime dateTime5 = dateTime0.minusYears(100);
        int int6 = dateTime0.getSecondOfMinute();
        java.lang.String str7 = dateTime0.toString();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime10 = dateTime8.withMinuteOfHour(14);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate((long) 100, dateTimeZone12);
        org.joda.time.LocalDate localDate15 = localDate13.plusDays(50);
        org.joda.time.Chronology chronology16 = localDate15.getChronology();
        org.joda.time.DateTimeField dateTimeField17 = chronology16.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate((long) 100, dateTimeZone19);
        org.joda.time.LocalDate localDate22 = localDate20.plusDays(50);
        int int23 = localDate20.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate25 = localDate20.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime();
        int int28 = dateTimeZone26.getOffset((org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.DateMidnight dateMidnight29 = localDate20.toDateMidnight(dateTimeZone26);
        long long31 = dateTimeZone26.convertUTCToLocal(60000L);
        org.joda.time.chrono.ZonedChronology zonedChronology32 = org.joda.time.chrono.ZonedChronology.getInstance(chronology16, dateTimeZone26);
        org.joda.time.DurationField durationField33 = zonedChronology32.weeks();
        org.joda.time.DateTimeField dateTimeField34 = zonedChronology32.weekOfWeekyear();
        org.joda.time.DurationField durationField35 = zonedChronology32.centuries();
        org.joda.time.DateTimeField dateTimeField36 = zonedChronology32.dayOfWeek();
        java.lang.String str37 = zonedChronology32.toString();
        org.joda.time.DateTimeField dateTimeField38 = zonedChronology32.year();
        int int39 = dateTime8.get(dateTimeField38);
        org.joda.time.Chronology chronology40 = dateTime8.getChronology();
        org.joda.time.MutableDateTime mutableDateTime41 = dateTime0.toMutableDateTime(chronology40);
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate44 = new org.joda.time.LocalDate((long) 100, dateTimeZone43);
        org.joda.time.LocalDate localDate46 = localDate44.plusDays(50);
        org.joda.time.Chronology chronology47 = localDate46.getChronology();
        org.joda.time.DateTimeField dateTimeField48 = chronology47.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate51 = new org.joda.time.LocalDate((long) 100, dateTimeZone50);
        org.joda.time.LocalDate localDate53 = localDate51.plusDays(50);
        int int54 = localDate51.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate56 = localDate51.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime58 = new org.joda.time.DateTime();
        int int59 = dateTimeZone57.getOffset((org.joda.time.ReadableInstant) dateTime58);
        org.joda.time.DateMidnight dateMidnight60 = localDate51.toDateMidnight(dateTimeZone57);
        long long62 = dateTimeZone57.convertUTCToLocal(60000L);
        org.joda.time.chrono.ZonedChronology zonedChronology63 = org.joda.time.chrono.ZonedChronology.getInstance(chronology47, dateTimeZone57);
        org.joda.time.DurationField durationField64 = zonedChronology63.weeks();
        org.joda.time.DateTimeField dateTimeField65 = zonedChronology63.year();
        org.joda.time.DateTimeZone dateTimeZone66 = zonedChronology63.getZone();
        org.joda.time.DateTimeField dateTimeField67 = zonedChronology63.weekyear();
        org.joda.time.DurationField durationField68 = zonedChronology63.years();
        org.joda.time.DateTimeField dateTimeField69 = zonedChronology63.secondOfDay();
        org.joda.time.DateTime dateTime70 = mutableDateTime41.toDateTime((org.joda.time.Chronology) zonedChronology63);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on durationField33 and durationField64", (durationField33.compareTo(durationField64) == 0) == durationField33.equals(durationField64));
    }

    @Test
    public void test0174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0174");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime2 = dateTime0.minusHours((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int4 = dateTime2.get(dateTimeFieldType3);
        org.joda.time.DateTime dateTime6 = dateTime2.minusMillis((int) '#');
        org.joda.time.DateTime dateTime8 = dateTime6.plusDays(11);
        org.joda.time.DateTime dateTime11 = dateTime6.withDurationAdded((long) (byte) 10, 11);
        org.joda.time.DateTimeZone dateTimeZone12 = dateTime6.getZone();
        org.joda.time.DateTime dateTime14 = dateTime6.minusDays(22);
        org.joda.time.DateTime dateTime16 = dateTime6.withYearOfCentury(14);
        org.joda.time.Instant instant17 = org.joda.time.Instant.now();
        org.joda.time.Instant instant19 = instant17.plus((long) 11753187);
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.Instant instant21 = instant19.plus(readableDuration20);
        boolean boolean22 = dateTime6.equals((java.lang.Object) instant21);
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate((long) 100, dateTimeZone24);
        org.joda.time.LocalDate localDate27 = localDate25.plusDays(50);
        org.joda.time.Chronology chronology28 = localDate27.getChronology();
        org.joda.time.DateTimeField dateTimeField29 = chronology28.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate((long) 100, dateTimeZone31);
        org.joda.time.LocalDate localDate34 = localDate32.plusDays(50);
        int int35 = localDate32.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate37 = localDate32.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime();
        int int40 = dateTimeZone38.getOffset((org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.DateMidnight dateMidnight41 = localDate32.toDateMidnight(dateTimeZone38);
        long long43 = dateTimeZone38.convertUTCToLocal(60000L);
        org.joda.time.chrono.ZonedChronology zonedChronology44 = org.joda.time.chrono.ZonedChronology.getInstance(chronology28, dateTimeZone38);
        org.joda.time.DurationField durationField45 = zonedChronology44.eras();
        org.joda.time.DateTimeField dateTimeField46 = zonedChronology44.minuteOfDay();
        org.joda.time.Chronology chronology47 = zonedChronology44.withUTC();
        org.joda.time.DateTimeField dateTimeField48 = zonedChronology44.monthOfYear();
        org.joda.time.DateTimeField dateTimeField49 = zonedChronology44.dayOfYear();
        org.joda.time.DateTimeField dateTimeField50 = zonedChronology44.halfdayOfDay();
        org.joda.time.DateTime dateTime51 = dateTime6.toDateTime((org.joda.time.Chronology) zonedChronology44);
        org.joda.time.DateTime.Property property52 = dateTime6.minuteOfHour();
        org.joda.time.DateTime dateTime53 = property52.roundCeilingCopy();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime6 and dateTime51", (dateTime6.compareTo(dateTime51) == 0) == dateTime6.equals(dateTime51));
    }

    @Test
    public void test0175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0175");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.weekyears();
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 100, dateTimeZone2);
        org.joda.time.LocalDate localDate5 = localDate3.plusDays(50);
        org.joda.time.Chronology chronology6 = localDate5.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate((long) 100, dateTimeZone9);
        org.joda.time.LocalDate localDate12 = localDate10.plusDays(50);
        int int13 = localDate10.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate15 = localDate10.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime();
        int int18 = dateTimeZone16.getOffset((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.DateMidnight dateMidnight19 = localDate10.toDateMidnight(dateTimeZone16);
        long long21 = dateTimeZone16.convertUTCToLocal(60000L);
        org.joda.time.chrono.ZonedChronology zonedChronology22 = org.joda.time.chrono.ZonedChronology.getInstance(chronology6, dateTimeZone16);
        org.joda.time.DurationField durationField23 = zonedChronology22.weeks();
        org.joda.time.DurationField durationField24 = zonedChronology22.centuries();
        org.joda.time.DurationField durationField25 = zonedChronology22.weekyears();
        boolean boolean26 = durationFieldType0.isSupported((org.joda.time.Chronology) zonedChronology22);
        org.joda.time.DurationField durationField27 = zonedChronology22.weeks();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate30 = new org.joda.time.LocalDate((long) 100, dateTimeZone29);
        org.joda.time.LocalDate localDate32 = localDate30.plusDays(50);
        org.joda.time.Chronology chronology33 = localDate32.getChronology();
        org.joda.time.DateTimeField dateTimeField34 = chronology33.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate37 = new org.joda.time.LocalDate((long) 100, dateTimeZone36);
        org.joda.time.LocalDate localDate39 = localDate37.plusDays(50);
        int int40 = localDate37.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate42 = localDate37.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime();
        int int45 = dateTimeZone43.getOffset((org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.DateMidnight dateMidnight46 = localDate37.toDateMidnight(dateTimeZone43);
        long long48 = dateTimeZone43.convertUTCToLocal(60000L);
        org.joda.time.chrono.ZonedChronology zonedChronology49 = org.joda.time.chrono.ZonedChronology.getInstance(chronology33, dateTimeZone43);
        org.joda.time.DurationField durationField50 = zonedChronology49.weeks();
        org.joda.time.DurationField durationField51 = zonedChronology49.millis();
        org.joda.time.DurationField durationField52 = zonedChronology49.millis();
        org.joda.time.DateTimeField dateTimeField53 = zonedChronology49.monthOfYear();
        java.util.Locale.Category category55 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale56 = java.util.Locale.ROOT;
        java.util.Locale locale57 = locale56.stripExtensions();
        java.util.Locale.setDefault(category55, locale57);
        java.lang.String str59 = dateTimeField53.getAsShortText((long) 11785439, locale57);
        java.util.Calendar calendar60 = java.util.Calendar.getInstance(locale57);
        boolean boolean61 = zonedChronology22.equals((java.lang.Object) calendar60);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on durationField23 and durationField50", (durationField23.compareTo(durationField50) == 0) == durationField23.equals(durationField50));
    }

    @Test
    public void test0176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0176");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 100, dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.plusDays(50);
        org.joda.time.Chronology chronology5 = localDate4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 100, dateTimeZone8);
        org.joda.time.LocalDate localDate11 = localDate9.plusDays(50);
        int int12 = localDate9.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate14 = localDate9.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        int int17 = dateTimeZone15.getOffset((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateMidnight dateMidnight18 = localDate9.toDateMidnight(dateTimeZone15);
        long long20 = dateTimeZone15.convertUTCToLocal(60000L);
        org.joda.time.chrono.ZonedChronology zonedChronology21 = org.joda.time.chrono.ZonedChronology.getInstance(chronology5, dateTimeZone15);
        org.joda.time.DurationField durationField22 = zonedChronology21.weeks();
        org.joda.time.DateTimeField dateTimeField23 = zonedChronology21.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        long long27 = zonedChronology21.add(readablePeriod24, (long) 2022, 0);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.UTC;
        int int30 = dateTimeZone28.getStandardOffset((long) (byte) 1);
        java.util.TimeZone timeZone31 = dateTimeZone28.toTimeZone();
        org.joda.time.Chronology chronology32 = zonedChronology21.withZone(dateTimeZone28);
        org.joda.time.DurationField durationField33 = zonedChronology21.weeks();
        org.joda.time.DurationField durationField34 = zonedChronology21.eras();
        org.joda.time.DurationField durationField35 = zonedChronology21.weekyears();
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField22 and durationField34", Math.signum(durationField22.compareTo(durationField34)) == -Math.signum(durationField34.compareTo(durationField22)));
    }

    @Test
    public void test0177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0177");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 100, dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.plusDays(50);
        org.joda.time.Chronology chronology5 = localDate4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 100, dateTimeZone8);
        org.joda.time.LocalDate localDate11 = localDate9.plusDays(50);
        int int12 = localDate9.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate14 = localDate9.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        int int17 = dateTimeZone15.getOffset((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateMidnight dateMidnight18 = localDate9.toDateMidnight(dateTimeZone15);
        long long20 = dateTimeZone15.convertUTCToLocal(60000L);
        org.joda.time.chrono.ZonedChronology zonedChronology21 = org.joda.time.chrono.ZonedChronology.getInstance(chronology5, dateTimeZone15);
        org.joda.time.DurationField durationField22 = zonedChronology21.weeks();
        java.lang.String str23 = zonedChronology21.toString();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate((long) 100, dateTimeZone25);
        org.joda.time.LocalDate.Property property27 = localDate26.weekyear();
        org.joda.time.LocalDate localDate29 = property27.setCopy(2022);
        org.joda.time.Instant instant30 = new org.joda.time.Instant();
        org.joda.time.Instant instant32 = instant30.withMillis((long) 11);
        org.joda.time.Instant instant33 = instant32.toInstant();
        org.joda.time.Chronology chronology34 = instant32.getChronology();
        org.joda.time.DateTimeField dateTimeField35 = chronology34.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate38 = new org.joda.time.LocalDate((long) 100, dateTimeZone37);
        int int39 = dateTimeField35.getMaximumValue((org.joda.time.ReadablePartial) localDate38);
        int int41 = localDate38.getValue(2);
        org.joda.time.DateMidnight dateMidnight42 = localDate38.toDateMidnight();
        org.joda.time.LocalDate localDate44 = localDate38.plusMonths(26160535);
        int int45 = localDate44.getYear();
        boolean boolean46 = property27.equals((java.lang.Object) localDate44);
        org.joda.time.DateTime dateTime47 = localDate44.toDateTimeAtStartOfDay();
        boolean boolean48 = zonedChronology21.equals((java.lang.Object) dateTime47);
        org.joda.time.DurationField durationField49 = zonedChronology21.days();
        org.joda.time.DurationField durationField50 = zonedChronology21.minutes();
        org.joda.time.DurationField durationField51 = zonedChronology21.centuries();
        org.joda.time.DateTimeZone dateTimeZone52 = zonedChronology21.getZone();
        org.joda.time.DurationField durationField53 = zonedChronology21.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField53, durationField22, and durationField49", !(durationField53.compareTo(durationField22) == 0) || (Math.signum(durationField53.compareTo(durationField49)) == Math.signum(durationField22.compareTo(durationField49))));
    }

    @Test
    public void test0178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0178");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 100, dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.plusDays(50);
        org.joda.time.Chronology chronology5 = localDate4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 100, dateTimeZone8);
        org.joda.time.LocalDate localDate11 = localDate9.plusDays(50);
        int int12 = localDate9.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate14 = localDate9.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        int int17 = dateTimeZone15.getOffset((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateMidnight dateMidnight18 = localDate9.toDateMidnight(dateTimeZone15);
        long long20 = dateTimeZone15.convertUTCToLocal(60000L);
        org.joda.time.chrono.ZonedChronology zonedChronology21 = org.joda.time.chrono.ZonedChronology.getInstance(chronology5, dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField22 = zonedChronology21.yearOfCentury();
        org.joda.time.DurationField durationField23 = zonedChronology21.millis();
        org.joda.time.DurationField durationField24 = zonedChronology21.seconds();
        org.joda.time.DateTimeField dateTimeField25 = zonedChronology21.millisOfDay();
        org.joda.time.DateTimeField dateTimeField26 = zonedChronology21.weekyear();
        org.joda.time.DateTime dateTime27 = org.joda.time.DateTime.now((org.joda.time.Chronology) zonedChronology21);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate30 = new org.joda.time.LocalDate((long) 100, dateTimeZone29);
        org.joda.time.LocalDate localDate32 = localDate30.plusDays(50);
        org.joda.time.Chronology chronology33 = localDate32.getChronology();
        org.joda.time.DateTimeField dateTimeField34 = chronology33.millisOfDay();
        org.joda.time.LocalDate localDate35 = new org.joda.time.LocalDate(chronology33);
        org.joda.time.DateTimeField dateTimeField36 = chronology33.minuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(59, 50);
        java.util.TimeZone timeZone41 = dateTimeZone40.toTimeZone();
        java.util.TimeZone timeZone42 = dateTimeZone40.toTimeZone();
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime(72000000L, dateTimeZone40);
        int int45 = dateTimeZone40.getStandardOffset((long) 'u');
        org.joda.time.LocalDate localDate46 = new org.joda.time.LocalDate(dateTimeZone40);
        org.joda.time.chrono.ZonedChronology zonedChronology47 = org.joda.time.chrono.ZonedChronology.getInstance(chronology33, dateTimeZone40);
        org.joda.time.DateTimeField dateTimeField48 = zonedChronology47.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField49 = zonedChronology47.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField50 = zonedChronology47.year();
        org.joda.time.DateTimeField dateTimeField51 = zonedChronology47.secondOfMinute();
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime54 = dateTime52.minusHours((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType55 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int56 = dateTime54.get(dateTimeFieldType55);
        org.joda.time.DateTime dateTime58 = dateTime54.minusSeconds((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone63 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(59, 50);
        java.util.TimeZone timeZone64 = dateTimeZone63.toTimeZone();
        java.util.TimeZone timeZone65 = dateTimeZone63.toTimeZone();
        org.joda.time.DateTime dateTime66 = new org.joda.time.DateTime(72000000L, dateTimeZone63);
        int int68 = dateTimeZone63.getStandardOffset((long) 'u');
        java.lang.String str70 = dateTimeZone63.getName(1645142400000L);
        org.joda.time.DateTime dateTime71 = new org.joda.time.DateTime((long) 11779950, dateTimeZone63);
        org.joda.time.DateTime dateTime72 = dateTime54.withZoneRetainFields(dateTimeZone63);
        org.joda.time.DateTimeZone dateTimeZone77 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(59, 50);
        java.util.TimeZone timeZone78 = dateTimeZone77.toTimeZone();
        java.util.TimeZone timeZone79 = dateTimeZone77.toTimeZone();
        org.joda.time.DateTime dateTime80 = new org.joda.time.DateTime(72000000L, dateTimeZone77);
        int int82 = dateTimeZone77.getStandardOffset((long) 'u');
        java.lang.String str84 = dateTimeZone77.getName(1645142400000L);
        org.joda.time.DateTime dateTime85 = new org.joda.time.DateTime((long) 11779950, dateTimeZone77);
        long long87 = dateTimeZone63.getMillisKeepLocal(dateTimeZone77, (long) 11817955);
        org.joda.time.Chronology chronology88 = zonedChronology47.withZone(dateTimeZone77);
        org.joda.time.Chronology chronology89 = zonedChronology21.withZone(dateTimeZone77);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime16 and dateTime27", (dateTime16.compareTo(dateTime27) == 0) == dateTime16.equals(dateTime27));
    }

    @Test
    public void test0179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0179");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 100, dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.plusDays(50);
        org.joda.time.Chronology chronology5 = localDate4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 100, dateTimeZone8);
        org.joda.time.LocalDate localDate11 = localDate9.plusDays(50);
        int int12 = localDate9.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate14 = localDate9.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        int int17 = dateTimeZone15.getOffset((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateMidnight dateMidnight18 = localDate9.toDateMidnight(dateTimeZone15);
        long long20 = dateTimeZone15.convertUTCToLocal(60000L);
        org.joda.time.chrono.ZonedChronology zonedChronology21 = org.joda.time.chrono.ZonedChronology.getInstance(chronology5, dateTimeZone15);
        org.joda.time.DurationField durationField22 = zonedChronology21.weeks();
        org.joda.time.DateTimeField dateTimeField23 = zonedChronology21.weekyear();
        org.joda.time.DurationField durationField24 = zonedChronology21.weekyears();
        org.joda.time.DateTimeField dateTimeField25 = zonedChronology21.year();
        org.joda.time.DateTimeField dateTimeField26 = zonedChronology21.yearOfCentury();
        org.joda.time.DurationField durationField27 = zonedChronology21.seconds();
        org.joda.time.DurationField durationField28 = zonedChronology21.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField28, durationField22, and durationField24", !(durationField28.compareTo(durationField22) == 0) || (Math.signum(durationField28.compareTo(durationField24)) == Math.signum(durationField22.compareTo(durationField24))));
    }

    @Test
    public void test0180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0180");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.millis();
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 100, dateTimeZone2);
        org.joda.time.LocalDate localDate5 = localDate3.plusDays(50);
        org.joda.time.Chronology chronology6 = localDate5.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.millisOfDay();
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate(chronology6);
        org.joda.time.DateTimeField dateTimeField9 = chronology6.minuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(59, 50);
        java.util.TimeZone timeZone14 = dateTimeZone13.toTimeZone();
        java.util.TimeZone timeZone15 = dateTimeZone13.toTimeZone();
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(72000000L, dateTimeZone13);
        int int18 = dateTimeZone13.getStandardOffset((long) 'u');
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate(dateTimeZone13);
        org.joda.time.chrono.ZonedChronology zonedChronology20 = org.joda.time.chrono.ZonedChronology.getInstance(chronology6, dateTimeZone13);
        org.joda.time.DurationField durationField21 = durationFieldType0.getField(chronology6);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate((long) 100, dateTimeZone23);
        org.joda.time.LocalDate localDate26 = localDate24.minusYears(53);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.UTC;
        int int29 = dateTimeZone27.getOffsetFromLocal((long) 'a');
        long long32 = dateTimeZone27.adjustOffset(9505L, true);
        org.joda.time.DateMidnight dateMidnight33 = localDate24.toDateMidnight(dateTimeZone27);
        org.joda.time.Chronology chronology34 = chronology6.withZone(dateTimeZone27);
        org.joda.time.Instant instant35 = new org.joda.time.Instant();
        org.joda.time.Instant instant37 = instant35.withMillis((long) 11);
        org.joda.time.Instant instant38 = instant37.toInstant();
        org.joda.time.Chronology chronology39 = instant37.getChronology();
        org.joda.time.DateTimeField dateTimeField40 = chronology39.minuteOfDay();
        org.joda.time.Chronology chronology41 = chronology39.withUTC();
        org.joda.time.DurationField durationField42 = chronology39.eras();
        org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime(chronology39);
        long long45 = chronology6.set((org.joda.time.ReadablePartial) localDateTime43, (long) 3364);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField21 and durationField42", Math.signum(durationField21.compareTo(durationField42)) == -Math.signum(durationField42.compareTo(durationField21)));
    }

    @Test
    public void test0181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0181");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 100, dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.plusDays(50);
        org.joda.time.Chronology chronology5 = localDate4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 100, dateTimeZone8);
        org.joda.time.LocalDate localDate11 = localDate9.plusDays(50);
        int int12 = localDate9.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate14 = localDate9.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        int int17 = dateTimeZone15.getOffset((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateMidnight dateMidnight18 = localDate9.toDateMidnight(dateTimeZone15);
        long long20 = dateTimeZone15.convertUTCToLocal(60000L);
        org.joda.time.chrono.ZonedChronology zonedChronology21 = org.joda.time.chrono.ZonedChronology.getInstance(chronology5, dateTimeZone15);
        org.joda.time.DurationField durationField22 = zonedChronology21.eras();
        org.joda.time.DateTimeField dateTimeField23 = zonedChronology21.minuteOfDay();
        org.joda.time.Chronology chronology24 = zonedChronology21.withUTC();
        org.joda.time.DateTimeField dateTimeField25 = zonedChronology21.monthOfYear();
        org.joda.time.DateTimeField dateTimeField26 = zonedChronology21.yearOfCentury();
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        long long30 = zonedChronology21.add(readablePeriod27, (long) 26199721, 196);
        org.joda.time.DateTimeField dateTimeField31 = zonedChronology21.dayOfYear();
        org.joda.time.DurationField durationField32 = zonedChronology21.seconds();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField22, durationField32, and durationField22", !(durationField22.compareTo(durationField32) == 0) || (Math.signum(durationField22.compareTo(durationField22)) == Math.signum(durationField32.compareTo(durationField22))));
    }

    @Test
    public void test0182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0182");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime2 = dateTime0.minusHours((int) (short) 100);
        org.joda.time.DateTime dateTime4 = dateTime2.plusMonths(11821997);
        org.joda.time.DateTime dateTime6 = dateTime4.withMillisOfSecond(361);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 100, dateTimeZone8);
        org.joda.time.LocalDate localDate11 = localDate9.plusDays(50);
        org.joda.time.Chronology chronology12 = localDate11.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate((long) 100, dateTimeZone15);
        org.joda.time.LocalDate localDate18 = localDate16.plusDays(50);
        int int19 = localDate16.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate21 = localDate16.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime();
        int int24 = dateTimeZone22.getOffset((org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.DateMidnight dateMidnight25 = localDate16.toDateMidnight(dateTimeZone22);
        long long27 = dateTimeZone22.convertUTCToLocal(60000L);
        org.joda.time.chrono.ZonedChronology zonedChronology28 = org.joda.time.chrono.ZonedChronology.getInstance(chronology12, dateTimeZone22);
        org.joda.time.DurationField durationField29 = zonedChronology28.weeks();
        org.joda.time.DateTimeField dateTimeField30 = zonedChronology28.weekyear();
        org.joda.time.DurationField durationField31 = zonedChronology28.weekyears();
        long long35 = zonedChronology28.add(0L, 11776486L, 0);
        org.joda.time.DateTimeField dateTimeField36 = zonedChronology28.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField37 = zonedChronology28.dayOfMonth();
        org.joda.time.DateTime dateTime38 = dateTime4.toDateTime((org.joda.time.Chronology) zonedChronology28);
        org.joda.time.DurationField durationField39 = zonedChronology28.weekyears();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and dateTime38", (dateTime4.compareTo(dateTime38) == 0) == dateTime4.equals(dateTime38));
    }

    @Test
    public void test0183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0183");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 100, dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.plusDays(50);
        org.joda.time.Chronology chronology5 = localDate4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 100, dateTimeZone8);
        org.joda.time.LocalDate localDate11 = localDate9.plusDays(50);
        int int12 = localDate9.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate14 = localDate9.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        int int17 = dateTimeZone15.getOffset((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateMidnight dateMidnight18 = localDate9.toDateMidnight(dateTimeZone15);
        long long20 = dateTimeZone15.convertUTCToLocal(60000L);
        org.joda.time.chrono.ZonedChronology zonedChronology21 = org.joda.time.chrono.ZonedChronology.getInstance(chronology5, dateTimeZone15);
        org.joda.time.DurationField durationField22 = zonedChronology21.weeks();
        org.joda.time.DateTimeField dateTimeField23 = zonedChronology21.year();
        org.joda.time.DateTimeZone dateTimeZone24 = zonedChronology21.getZone();
        org.joda.time.DateTimeField dateTimeField25 = zonedChronology21.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField26 = zonedChronology21.hourOfHalfday();
        org.joda.time.DurationField durationField27 = zonedChronology21.hours();
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        long long31 = zonedChronology21.add(readablePeriod28, 708651328L, 11830648);
        org.joda.time.DateTimeField dateTimeField32 = zonedChronology21.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField33 = zonedChronology21.minuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate36 = new org.joda.time.LocalDate((long) 100, dateTimeZone35);
        org.joda.time.LocalDate localDate38 = localDate36.plusDays(50);
        org.joda.time.Chronology chronology39 = localDate38.getChronology();
        org.joda.time.LocalDate.Property property40 = localDate38.era();
        org.joda.time.DateTimeField dateTimeField41 = property40.getField();
        org.joda.time.LocalDate localDate42 = property40.getLocalDate();
        org.joda.time.LocalDate localDate43 = property40.roundHalfEvenCopy();
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate46 = new org.joda.time.LocalDate((long) 100, dateTimeZone45);
        org.joda.time.LocalDate localDate48 = localDate46.plusDays(50);
        org.joda.time.Chronology chronology49 = localDate48.getChronology();
        int int50 = localDate48.getEra();
        org.joda.time.LocalDate.Property property51 = localDate48.monthOfYear();
        org.joda.time.LocalDate localDate52 = property51.roundFloorCopy();
        org.joda.time.LocalDate localDate54 = property51.addWrapFieldToCopy(11777629);
        org.joda.time.DateTime dateTime55 = localDate54.toDateTimeAtCurrentTime();
        boolean boolean56 = localDate43.equals((java.lang.Object) dateTime55);
        org.joda.time.LocalDate localDate58 = localDate43.plusYears(11934737);
        org.joda.time.DateTimeZone dateTimeZone60 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate61 = new org.joda.time.LocalDate((long) 100, dateTimeZone60);
        org.joda.time.LocalDate localDate63 = localDate61.plusDays(50);
        org.joda.time.Chronology chronology64 = localDate63.getChronology();
        org.joda.time.DateTimeField dateTimeField65 = chronology64.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone67 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate68 = new org.joda.time.LocalDate((long) 100, dateTimeZone67);
        org.joda.time.LocalDate localDate70 = localDate68.plusDays(50);
        int int71 = localDate68.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate73 = localDate68.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone74 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime75 = new org.joda.time.DateTime();
        int int76 = dateTimeZone74.getOffset((org.joda.time.ReadableInstant) dateTime75);
        org.joda.time.DateMidnight dateMidnight77 = localDate68.toDateMidnight(dateTimeZone74);
        long long79 = dateTimeZone74.convertUTCToLocal(60000L);
        org.joda.time.chrono.ZonedChronology zonedChronology80 = org.joda.time.chrono.ZonedChronology.getInstance(chronology64, dateTimeZone74);
        org.joda.time.DurationField durationField81 = zonedChronology80.weeks();
        org.joda.time.DateTimeField dateTimeField82 = zonedChronology80.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod83 = null;
        long long86 = zonedChronology80.add(readablePeriod83, (long) 2022, 0);
        org.joda.time.DateTimeField dateTimeField87 = zonedChronology80.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone89 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate90 = new org.joda.time.LocalDate((long) 100, dateTimeZone89);
        org.joda.time.LocalDate localDate92 = localDate90.plusDays(50);
        int int93 = localDate90.getWeekOfWeekyear();
        org.joda.time.DateMidnight dateMidnight94 = localDate90.toDateMidnight();
        int[] intArray96 = zonedChronology80.get((org.joda.time.ReadablePartial) localDate90, 4518998492L);
        zonedChronology21.validate((org.joda.time.ReadablePartial) localDate43, intArray96);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on durationField22 and durationField81", (durationField22.compareTo(durationField81) == 0) == durationField22.equals(durationField81));
    }

    @Test
    public void test0184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0184");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime2 = dateTime0.minusHours((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int4 = dateTime2.get(dateTimeFieldType3);
        org.joda.time.DateTime dateTime6 = dateTime2.minusMillis((int) '#');
        org.joda.time.DateTime dateTime8 = dateTime6.plusDays(11);
        org.joda.time.DateTime dateTime11 = dateTime6.withDurationAdded((long) (byte) 10, 11);
        org.joda.time.DateTime dateTime13 = dateTime6.plusDays(26159400);
        org.joda.time.DateTimeZone dateTimeZone14 = dateTime6.getZone();
        org.joda.time.DateTime dateTime17 = dateTime6.withDurationAdded((long) 2271, 215400000);
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime20 = dateTime18.minusHours((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int22 = dateTime20.get(dateTimeFieldType21);
        org.joda.time.DateTime dateTime24 = dateTime20.minusMillis((int) '#');
        boolean boolean25 = dateTime20.isBeforeNow();
        org.joda.time.DateTime dateTime27 = dateTime20.plusMillis((int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate30 = new org.joda.time.LocalDate((long) 100, dateTimeZone29);
        org.joda.time.LocalDate localDate32 = localDate30.plusDays(50);
        org.joda.time.Chronology chronology33 = localDate32.getChronology();
        org.joda.time.DateTimeField dateTimeField34 = chronology33.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate37 = new org.joda.time.LocalDate((long) 100, dateTimeZone36);
        org.joda.time.LocalDate localDate39 = localDate37.plusDays(50);
        int int40 = localDate37.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate42 = localDate37.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime();
        int int45 = dateTimeZone43.getOffset((org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.DateMidnight dateMidnight46 = localDate37.toDateMidnight(dateTimeZone43);
        long long48 = dateTimeZone43.convertUTCToLocal(60000L);
        org.joda.time.chrono.ZonedChronology zonedChronology49 = org.joda.time.chrono.ZonedChronology.getInstance(chronology33, dateTimeZone43);
        org.joda.time.DateTimeField dateTimeField50 = zonedChronology49.yearOfCentury();
        org.joda.time.DurationField durationField51 = zonedChronology49.millis();
        org.joda.time.DurationField durationField52 = zonedChronology49.seconds();
        org.joda.time.DateTimeField dateTimeField53 = zonedChronology49.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField54 = zonedChronology49.hourOfDay();
        org.joda.time.DateTimeField dateTimeField55 = zonedChronology49.year();
        org.joda.time.DateTime dateTime56 = dateTime20.withChronology((org.joda.time.Chronology) zonedChronology49);
        org.joda.time.MutableDateTime mutableDateTime57 = dateTime6.toMutableDateTime((org.joda.time.Chronology) zonedChronology49);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and dateTime56", (dateTime2.compareTo(dateTime56) == 0) == dateTime2.equals(dateTime56));
    }

    @Test
    public void test0185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0185");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 100, dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.plusDays(50);
        org.joda.time.Chronology chronology5 = localDate4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 100, dateTimeZone8);
        org.joda.time.LocalDate localDate11 = localDate9.plusDays(50);
        int int12 = localDate9.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate14 = localDate9.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        int int17 = dateTimeZone15.getOffset((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateMidnight dateMidnight18 = localDate9.toDateMidnight(dateTimeZone15);
        long long20 = dateTimeZone15.convertUTCToLocal(60000L);
        org.joda.time.chrono.ZonedChronology zonedChronology21 = org.joda.time.chrono.ZonedChronology.getInstance(chronology5, dateTimeZone15);
        org.joda.time.DurationField durationField22 = zonedChronology21.weeks();
        org.joda.time.DateTimeField dateTimeField23 = zonedChronology21.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        long long27 = zonedChronology21.add(readablePeriod24, (long) 2022, 0);
        org.joda.time.DateTimeField dateTimeField28 = zonedChronology21.millisOfDay();
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology21.secondOfMinute();
        org.joda.time.DurationField durationField30 = zonedChronology21.eras();
        org.joda.time.DateTimeField dateTimeField31 = zonedChronology21.dayOfYear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField22 and durationField30", Math.signum(durationField22.compareTo(durationField30)) == -Math.signum(durationField30.compareTo(durationField22)));
    }

    @Test
    public void test0186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0186");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("gregory");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((long) 100, dateTimeZone3);
        org.joda.time.LocalDate localDate6 = localDate4.minusYears(53);
        org.joda.time.DateMidnight dateMidnight7 = localDate4.toDateMidnight();
        int int8 = localDate4.getWeekOfWeekyear();
        java.util.Calendar.Builder builder9 = new java.util.Calendar.Builder();
        java.util.Locale locale10 = java.util.Locale.JAPAN;
        java.util.Calendar.Builder builder11 = builder9.setLocale(locale10);
        java.util.Calendar.Builder builder12 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder16 = builder12.setWeekDate((int) (short) 0, (int) '4', (int) '4');
        java.util.Calendar.Builder builder18 = builder16.setLenient(false);
        java.util.TimeZone timeZone20 = java.util.TimeZone.getTimeZone("");
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(59, 50);
        java.util.TimeZone timeZone24 = dateTimeZone23.toTimeZone();
        java.util.TimeZone timeZone25 = dateTimeZone23.toTimeZone();
        boolean boolean26 = timeZone20.hasSameRules(timeZone25);
        java.util.Calendar.Builder builder27 = builder16.setTimeZone(timeZone25);
        java.util.Calendar.Builder builder28 = builder9.setTimeZone(timeZone25);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.forTimeZone(timeZone25);
        org.joda.time.DateTime dateTime30 = localDate4.toDateTimeAtStartOfDay(dateTimeZone29);
        java.util.TimeZone timeZone31 = dateTimeZone29.toTimeZone();
        boolean boolean32 = timeZone1.hasSameRules(timeZone31);
        java.util.Locale locale33 = java.util.Locale.CHINA;
        java.util.Locale.setDefault(locale33);
        java.util.Locale locale35 = locale33.stripExtensions();
        java.util.Calendar calendar36 = java.util.Calendar.getInstance(timeZone31, locale33);
        java.util.Locale locale37 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str39 = locale37.getExtension('x');
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate42 = new org.joda.time.LocalDate((long) 100, dateTimeZone41);
        long long46 = dateTimeZone41.convertLocalToUTC((long) 2017, false, (long) 0);
        java.util.Locale locale49 = java.util.Locale.forLanguageTag("hi!");
        java.util.Locale locale50 = java.util.Locale.TAIWAN;
        java.lang.String str51 = locale49.getDisplayCountry(locale50);
        java.lang.String str52 = dateTimeZone41.getName((long) 26160535, locale49);
        java.lang.String str53 = locale37.getDisplayVariant(locale49);
        java.util.Calendar calendar54 = java.util.Calendar.getInstance(locale49);
        java.lang.String str55 = locale33.getDisplayScript(locale49);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on calendar36 and calendar54", (calendar36.compareTo(calendar54) == 0) == calendar36.equals(calendar54));
    }

    @Test
    public void test0187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0187");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime2 = dateTime0.minusHours((int) (short) 100);
        org.joda.time.TimeOfDay timeOfDay3 = dateTime2.toTimeOfDay();
        org.joda.time.DateTime.Property property4 = dateTime2.yearOfEra();
        org.joda.time.DateTime dateTime6 = property4.setCopy(26156834);
        org.joda.time.DateTime dateTime8 = property4.addToCopy((long) 1970);
        org.joda.time.DateTime.Property property9 = dateTime8.hourOfDay();
        org.joda.time.DateTimeField dateTimeField10 = property9.getField();
        org.joda.time.DateTime dateTime12 = property9.addWrapFieldToCopy(18);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(59, 50);
        java.lang.String str17 = dateTimeZone16.getID();
        org.joda.time.LocalTime localTime18 = new org.joda.time.LocalTime((long) 26150856, dateTimeZone16);
        java.lang.String str20 = dateTimeZone16.getShortName(2022L);
        org.joda.time.DateTime dateTime21 = dateTime12.withZone(dateTimeZone16);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone16);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime12 and dateTime21", (dateTime12.compareTo(dateTime21) == 0) == dateTime12.equals(dateTime21));
    }

    @Test
    public void test0188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0188");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 100, dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.plusDays(50);
        org.joda.time.Chronology chronology5 = localDate4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 100, dateTimeZone8);
        org.joda.time.LocalDate localDate11 = localDate9.plusDays(50);
        int int12 = localDate9.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate14 = localDate9.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        int int17 = dateTimeZone15.getOffset((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateMidnight dateMidnight18 = localDate9.toDateMidnight(dateTimeZone15);
        long long20 = dateTimeZone15.convertUTCToLocal(60000L);
        org.joda.time.chrono.ZonedChronology zonedChronology21 = org.joda.time.chrono.ZonedChronology.getInstance(chronology5, dateTimeZone15);
        org.joda.time.DurationField durationField22 = zonedChronology21.weeks();
        org.joda.time.DateTimeField dateTimeField23 = zonedChronology21.year();
        org.joda.time.DateTimeZone dateTimeZone24 = zonedChronology21.getZone();
        org.joda.time.DateTimeField dateTimeField25 = zonedChronology21.weekyear();
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        long long29 = zonedChronology21.add(readablePeriod26, (long) 11783576, 26163273);
        org.joda.time.DateTimeField dateTimeField30 = zonedChronology21.weekyear();
        org.joda.time.DateTimeField dateTimeField31 = zonedChronology21.yearOfEra();
        org.joda.time.DurationField durationField32 = zonedChronology21.centuries();
        org.joda.time.DurationField durationField33 = zonedChronology21.seconds();
        org.joda.time.Instant instant34 = new org.joda.time.Instant();
        org.joda.time.Instant instant36 = instant34.withMillis((long) 11);
        org.joda.time.Instant instant37 = instant36.toInstant();
        org.joda.time.Chronology chronology38 = instant36.getChronology();
        org.joda.time.DurationField durationField39 = chronology38.seconds();
        long long42 = durationField39.getValueAsLong((long) (short) 10, (-1L));
        boolean boolean43 = durationField39.isSupported();
        long long46 = durationField39.getValueAsLong((long) 11815434, (long) 26184352);
        int int47 = durationField33.compareTo(durationField39);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime16 and instant34", (dateTime16.compareTo(instant34) == 0) == dateTime16.equals(instant34));
    }

    @Test
    public void test0189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0189");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 100, dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.plusDays(50);
        org.joda.time.Chronology chronology5 = localDate4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 100, dateTimeZone8);
        org.joda.time.LocalDate localDate11 = localDate9.plusDays(50);
        int int12 = localDate9.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate14 = localDate9.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        int int17 = dateTimeZone15.getOffset((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateMidnight dateMidnight18 = localDate9.toDateMidnight(dateTimeZone15);
        long long20 = dateTimeZone15.convertUTCToLocal(60000L);
        org.joda.time.chrono.ZonedChronology zonedChronology21 = org.joda.time.chrono.ZonedChronology.getInstance(chronology5, dateTimeZone15);
        org.joda.time.DurationField durationField22 = zonedChronology21.weeks();
        org.joda.time.DateTimeField dateTimeField23 = zonedChronology21.year();
        org.joda.time.DateTimeZone dateTimeZone24 = zonedChronology21.getZone();
        org.joda.time.DurationField durationField25 = zonedChronology21.weekyears();
        org.joda.time.DateTimeField dateTimeField26 = zonedChronology21.dayOfWeek();
        org.joda.time.DurationField durationField27 = dateTimeField26.getRangeDurationField();
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime30 = dateTime28.minusHours((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int32 = dateTime30.get(dateTimeFieldType31);
        org.joda.time.DateTime dateTime34 = dateTime30.minusMillis((int) '#');
        org.joda.time.DateTime dateTime36 = dateTime34.plusDays(11);
        org.joda.time.DateTime dateTime39 = dateTime34.withDurationAdded((long) (byte) 10, 11);
        org.joda.time.DateTimeZone dateTimeZone40 = dateTime34.getZone();
        org.joda.time.LocalDateTime localDateTime41 = dateTime34.toLocalDateTime();
        org.joda.time.DateTimeField[] dateTimeFieldArray42 = localDateTime41.getFields();
        java.util.Locale locale43 = java.util.Locale.ITALIAN;
        java.lang.String str44 = locale43.getScript();
        java.util.Locale locale45 = java.util.Locale.ROOT;
        java.lang.String str46 = locale43.getDisplayName(locale45);
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate49 = new org.joda.time.LocalDate((long) 100, dateTimeZone48);
        org.joda.time.LocalDate localDate51 = localDate49.plusDays(50);
        org.joda.time.Chronology chronology52 = localDate51.getChronology();
        org.joda.time.DateTimeField dateTimeField53 = chronology52.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate56 = new org.joda.time.LocalDate((long) 100, dateTimeZone55);
        org.joda.time.LocalDate localDate58 = localDate56.plusDays(50);
        int int59 = localDate56.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate61 = localDate56.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone62 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime63 = new org.joda.time.DateTime();
        int int64 = dateTimeZone62.getOffset((org.joda.time.ReadableInstant) dateTime63);
        org.joda.time.DateMidnight dateMidnight65 = localDate56.toDateMidnight(dateTimeZone62);
        long long67 = dateTimeZone62.convertUTCToLocal(60000L);
        org.joda.time.chrono.ZonedChronology zonedChronology68 = org.joda.time.chrono.ZonedChronology.getInstance(chronology52, dateTimeZone62);
        org.joda.time.DurationField durationField69 = zonedChronology68.weeks();
        org.joda.time.DateTimeField dateTimeField70 = zonedChronology68.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod71 = null;
        long long74 = zonedChronology68.add(readablePeriod71, (long) 2022, 0);
        org.joda.time.DateTimeField dateTimeField75 = zonedChronology68.millisOfDay();
        java.util.Locale locale77 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Calendar calendar78 = java.util.Calendar.getInstance(locale77);
        java.lang.String str79 = dateTimeField75.getAsText(11802246, locale77);
        java.lang.String str80 = locale77.getVariant();
        java.lang.String str81 = locale45.getDisplayName(locale77);
        java.lang.String str82 = dateTimeField26.getAsText((org.joda.time.ReadablePartial) localDateTime41, locale77);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on durationField22 and durationField69", (durationField22.compareTo(durationField69) == 0) == durationField22.equals(durationField69));
    }

    @Test
    public void test0190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0190");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property1 = localDateTime0.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withField(dateTimeFieldType2, (int) (short) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.minusYears(5);
        int int7 = localDateTime0.getYearOfCentury();
        org.joda.time.LocalDateTime.Property property8 = localDateTime0.millisOfDay();
        org.joda.time.LocalDateTime.Property property9 = localDateTime0.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime10 = property9.roundHalfEvenCopy();
        java.lang.String str12 = localDateTime10.toString("1970-01-01");
        java.lang.String str13 = localDateTime10.toString();
        org.joda.time.Instant instant14 = new org.joda.time.Instant();
        org.joda.time.Instant instant16 = instant14.withMillis((long) 11);
        org.joda.time.Instant instant17 = instant16.toInstant();
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.Instant instant19 = instant16.minus(readableDuration18);
        org.joda.time.Instant instant20 = instant16.toInstant();
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.Instant instant22 = instant16.plus(readableDuration21);
        org.joda.time.Instant instant23 = new org.joda.time.Instant();
        org.joda.time.Instant instant25 = instant23.withMillis((long) 11);
        org.joda.time.Instant instant26 = instant25.toInstant();
        org.joda.time.Chronology chronology27 = instant25.getChronology();
        org.joda.time.MutableDateTime mutableDateTime28 = instant25.toMutableDateTimeISO();
        boolean boolean29 = instant16.isAfter((org.joda.time.ReadableInstant) instant25);
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property31 = localDateTime30.minuteOfHour();
        org.joda.time.LocalDateTime.Property property32 = localDateTime30.minuteOfHour();
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = property32.getFieldType();
        org.joda.time.DurationFieldType durationFieldType34 = dateTimeFieldType33.getDurationType();
        boolean boolean35 = instant16.isSupported(dateTimeFieldType33);
        org.joda.time.LocalDateTime.Property property36 = localDateTime10.property(dateTimeFieldType33);
        org.joda.time.LocalTime localTime37 = localDateTime10.toLocalTime();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant16 and mutableDateTime28", (instant16.compareTo(mutableDateTime28) == 0) == instant16.equals(mutableDateTime28));
    }

    @Test
    public void test0191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0191");
        java.lang.String[] strArray3 = new java.lang.String[] { "+00:00", "zh_TW", "centuries" };
        java.util.LinkedHashSet<java.lang.String> strSet4 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet4, strArray3);
        strSet4.clear();
        java.util.Locale locale7 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet8 = locale7.getUnicodeLocaleAttributes();
        boolean boolean9 = strSet8.isEmpty();
        java.util.Locale locale10 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet11 = locale10.getUnicodeLocaleAttributes();
        boolean boolean12 = strSet11.isEmpty();
        boolean boolean13 = strSet8.removeAll((java.util.Collection<java.lang.String>) strSet11);
        boolean boolean14 = strSet4.addAll((java.util.Collection<java.lang.String>) strSet8);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalTime localTime16 = new org.joda.time.LocalTime(dateTimeZone15);
        org.joda.time.LocalTime localTime17 = new org.joda.time.LocalTime(dateTimeZone15);
        org.joda.time.LocalTime localTime19 = localTime17.plusSeconds(10);
        org.joda.time.LocalTime.Property property20 = localTime19.minuteOfHour();
        org.joda.time.LocalTime localTime22 = property20.addCopy((long) 59);
        boolean boolean23 = strSet4.contains((java.lang.Object) localTime22);
        org.joda.time.Instant instant24 = new org.joda.time.Instant();
        org.joda.time.Instant instant26 = instant24.withMillis((long) 11);
        org.joda.time.Instant instant27 = instant26.toInstant();
        org.joda.time.Chronology chronology28 = instant26.getChronology();
        org.joda.time.MutableDateTime mutableDateTime29 = instant26.toMutableDateTimeISO();
        boolean boolean30 = strSet4.equals((java.lang.Object) instant26);
        org.joda.time.ReadableDuration readableDuration31 = null;
        org.joda.time.Instant instant33 = instant26.withDurationAdded(readableDuration31, 11884895);
        org.joda.time.ReadableDuration readableDuration34 = null;
        org.joda.time.Instant instant35 = instant33.plus(readableDuration34);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant35 and mutableDateTime29", (instant35.compareTo(mutableDateTime29) == 0) == instant35.equals(mutableDateTime29));
    }

    @Test
    public void test0192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0192");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 10);
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime();
        org.joda.time.Instant instant3 = dateTime2.toInstant();
        org.joda.time.Chronology chronology4 = dateTime2.getChronology();
        long long5 = dateTime2.getMillis();
        boolean boolean6 = dateTime1.isEqual((org.joda.time.ReadableInstant) dateTime2);
        org.joda.time.DateTime dateTime7 = dateTime2.withTimeAtStartOfDay();
        org.joda.time.DateTimeZone dateTimeZone8 = dateTime7.getZone();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and instant3", (dateTime2.compareTo(instant3) == 0) == dateTime2.equals(instant3));
    }

    @Test
    public void test0193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0193");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 100, dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.minusYears(53);
        int int5 = localDate4.getEra();
        int int6 = localDate4.getYearOfCentury();
        org.joda.time.LocalDate.Property property7 = localDate4.centuryOfEra();
        org.joda.time.Instant instant9 = new org.joda.time.Instant();
        org.joda.time.Instant instant11 = instant9.withMillis((long) 11);
        org.joda.time.Instant instant12 = instant11.toInstant();
        org.joda.time.Instant instant14 = instant12.plus((long) 11757325);
        org.joda.time.Instant instant15 = new org.joda.time.Instant();
        org.joda.time.Instant instant17 = instant15.minus((long) 2);
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.Instant instant19 = instant17.plus(readableDuration18);
        boolean boolean20 = instant12.isBefore((org.joda.time.ReadableInstant) instant17);
        org.joda.time.DateTime dateTime21 = instant12.toDateTimeISO();
        int int22 = dateTime21.getSecondOfMinute();
        long long23 = dateTime21.getMillis();
        java.util.Locale locale24 = java.util.Locale.FRENCH;
        java.util.Locale locale26 = new java.util.Locale("it");
        java.lang.String str27 = locale24.getDisplayName(locale26);
        java.util.Calendar calendar28 = dateTime21.toCalendar(locale26);
        java.lang.String str29 = locale26.getDisplayCountry();
        java.lang.String str30 = localDate4.toString("12", locale26);
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(59, 50);
        java.util.TimeZone timeZone35 = dateTimeZone34.toTimeZone();
        java.util.TimeZone timeZone36 = dateTimeZone34.toTimeZone();
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime(72000000L, dateTimeZone34);
        int int39 = dateTimeZone34.getStandardOffset((long) 'u');
        long long42 = dateTimeZone34.adjustOffset((long) 99, false);
        org.joda.time.DateTime dateTime43 = localDate4.toDateTimeAtStartOfDay(dateTimeZone34);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant11 and dateTime21", (instant11.compareTo(dateTime21) == 0) == instant11.equals(dateTime21));
    }

    @Test
    public void test0194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0194");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 100, dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.plusDays(50);
        org.joda.time.Chronology chronology5 = localDate4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 100, dateTimeZone8);
        org.joda.time.LocalDate localDate11 = localDate9.plusDays(50);
        int int12 = localDate9.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate14 = localDate9.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        int int17 = dateTimeZone15.getOffset((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateMidnight dateMidnight18 = localDate9.toDateMidnight(dateTimeZone15);
        long long20 = dateTimeZone15.convertUTCToLocal(60000L);
        org.joda.time.chrono.ZonedChronology zonedChronology21 = org.joda.time.chrono.ZonedChronology.getInstance(chronology5, dateTimeZone15);
        org.joda.time.DurationField durationField22 = zonedChronology21.weeks();
        org.joda.time.DateTimeField dateTimeField23 = zonedChronology21.weekyear();
        org.joda.time.DurationField durationField24 = zonedChronology21.weekyears();
        org.joda.time.DateTimeField dateTimeField25 = zonedChronology21.year();
        org.joda.time.DateTimeZone dateTimeZone26 = zonedChronology21.getZone();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate((long) 100, dateTimeZone28);
        org.joda.time.LocalDate localDate31 = localDate29.plusDays(50);
        org.joda.time.Chronology chronology32 = localDate31.getChronology();
        org.joda.time.DateTimeField dateTimeField33 = chronology32.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate36 = new org.joda.time.LocalDate((long) 100, dateTimeZone35);
        org.joda.time.LocalDate localDate38 = localDate36.plusDays(50);
        int int39 = localDate36.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate41 = localDate36.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime();
        int int44 = dateTimeZone42.getOffset((org.joda.time.ReadableInstant) dateTime43);
        org.joda.time.DateMidnight dateMidnight45 = localDate36.toDateMidnight(dateTimeZone42);
        long long47 = dateTimeZone42.convertUTCToLocal(60000L);
        org.joda.time.chrono.ZonedChronology zonedChronology48 = org.joda.time.chrono.ZonedChronology.getInstance(chronology32, dateTimeZone42);
        org.joda.time.DurationField durationField49 = zonedChronology48.eras();
        org.joda.time.DateTimeField dateTimeField50 = zonedChronology48.minuteOfDay();
        org.joda.time.Chronology chronology51 = zonedChronology48.withUTC();
        org.joda.time.DateTimeField dateTimeField52 = zonedChronology48.monthOfYear();
        org.joda.time.DateTimeField dateTimeField53 = zonedChronology48.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField54 = zonedChronology48.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField55 = zonedChronology48.monthOfYear();
        org.joda.time.DateTimeField dateTimeField56 = zonedChronology48.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone57 = zonedChronology48.getZone();
        int int59 = dateTimeZone57.getOffset((long) 11895354);
        long long61 = dateTimeZone26.getMillisKeepLocal(dateTimeZone57, (long) 599);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField22 and durationField49", Math.signum(durationField22.compareTo(durationField49)) == -Math.signum(durationField49.compareTo(durationField22)));
    }

    @Test
    public void test0195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0195");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property1 = localDateTime0.yearOfEra();
        org.joda.time.LocalDateTime localDateTime2 = property1.roundFloorCopy();
        int int3 = localDateTime2.getYearOfCentury();
        org.joda.time.DateTime dateTime4 = localDateTime2.toDateTime();
        org.joda.time.DateTime dateTime6 = dateTime4.plusMinutes(26165440);
        org.joda.time.Instant instant7 = dateTime6.toInstant();
        org.joda.time.DateTime.Property property8 = dateTime6.yearOfCentury();
        org.joda.time.DateTime dateTime9 = property8.roundHalfEvenCopy();
        org.joda.time.DateTime.Property property10 = dateTime9.era();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime6 and instant7", (dateTime6.compareTo(instant7) == 0) == dateTime6.equals(instant7));
    }

    @Test
    public void test0196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0196");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime2 = dateTime0.minusHours((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int4 = dateTime2.get(dateTimeFieldType3);
        org.joda.time.DateTime dateTime6 = dateTime2.minusMillis((int) '#');
        org.joda.time.DateTime dateTime8 = dateTime6.plusDays(11);
        org.joda.time.DateTime dateTime11 = dateTime6.withDurationAdded((long) (byte) 10, 11);
        org.joda.time.DateTimeZone dateTimeZone12 = dateTime6.getZone();
        org.joda.time.DateTime dateTime14 = dateTime6.minusDays(22);
        org.joda.time.DateTime dateTime16 = dateTime6.withYearOfCentury(14);
        org.joda.time.Instant instant17 = org.joda.time.Instant.now();
        org.joda.time.Instant instant19 = instant17.plus((long) 11753187);
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.Instant instant21 = instant19.plus(readableDuration20);
        boolean boolean22 = dateTime6.equals((java.lang.Object) instant21);
        org.joda.time.DateTime.Property property23 = dateTime6.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property25 = localDateTime24.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime24.withField(dateTimeFieldType26, (int) (short) 10);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime24.plusWeeks((-1));
        org.joda.time.LocalDateTime localDateTime32 = localDateTime30.withMillisOfSecond((int) '4');
        org.joda.time.LocalDateTime localDateTime34 = localDateTime30.plusWeeks(26160458);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime30.minusMinutes((int) 'u');
        org.joda.time.LocalDateTime localDateTime38 = localDateTime36.minusMonths(3);
        org.joda.time.DateTime dateTime39 = dateTime6.withFields((org.joda.time.ReadablePartial) localDateTime36);
        org.joda.time.DateTime dateTime41 = dateTime39.plusHours(11764640);
        org.joda.time.DateTime dateTime43 = dateTime41.withMonthOfYear(12);
        boolean boolean45 = dateTime41.isAfter(403713777L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime0 and instant17", (dateTime0.compareTo(instant17) == 0) == dateTime0.equals(instant17));
    }

    @Test
    public void test0197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0197");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.Instant instant2 = instant0.withMillis((long) 11);
        org.joda.time.Instant instant3 = instant2.toInstant();
        org.joda.time.Chronology chronology4 = instant2.getChronology();
        org.joda.time.DateTimeField dateTimeField5 = chronology4.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate((long) 100, dateTimeZone7);
        int int9 = dateTimeField5.getMaximumValue((org.joda.time.ReadablePartial) localDate8);
        int int11 = localDate8.getValue(2);
        org.joda.time.DateMidnight dateMidnight12 = localDate8.toDateMidnight();
        org.joda.time.LocalDate localDate14 = localDate8.plusMonths(26160535);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime();
        int int16 = dateTime15.getDayOfYear();
        org.joda.time.DateTime dateTime18 = dateTime15.withYear(11751002);
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime();
        int int20 = dateTime19.getDayOfYear();
        org.joda.time.DateTime dateTime22 = dateTime19.withYear(11751002);
        org.joda.time.Instant instant23 = dateTime19.toInstant();
        boolean boolean24 = dateTime15.isEqual((org.joda.time.ReadableInstant) instant23);
        org.joda.time.DateTime dateTime25 = localDate14.toDateTime((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.DateTime dateTime27 = dateTime15.minusMinutes(11857717);
        org.joda.time.DateTime.Property property28 = dateTime27.dayOfMonth();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and dateTime15", (instant0.compareTo(dateTime15) == 0) == instant0.equals(dateTime15));
    }

    @Test
    public void test0198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0198");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.Instant instant2 = instant0.minus((long) 2);
        org.joda.time.MutableDateTime mutableDateTime3 = instant0.toMutableDateTimeISO();
        java.util.TimeZone timeZone4 = java.util.TimeZone.getDefault();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone4);
        org.joda.time.DateTime dateTime6 = instant0.toDateTime(dateTimeZone5);
        int int8 = dateTimeZone5.getStandardOffset((long) 26184352);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and mutableDateTime3", (instant0.compareTo(mutableDateTime3) == 0) == instant0.equals(mutableDateTime3));
    }

    @Test
    public void test0199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0199");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        int int1 = dateTime0.getDayOfYear();
        org.joda.time.DateTime dateTime3 = dateTime0.withYear(11751002);
        org.joda.time.Instant instant4 = dateTime0.toInstant();
        org.joda.time.DateTime dateTime6 = dateTime0.withMillisOfDay(16);
        org.joda.time.DateTime dateTime8 = dateTime0.plusWeeks(11);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime11 = dateTime9.minusHours((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int13 = dateTime11.get(dateTimeFieldType12);
        org.joda.time.DateTime dateTime15 = dateTime11.minusMillis((int) '#');
        org.joda.time.DateTime dateTime17 = dateTime11.withYearOfEra(17);
        org.joda.time.DateTime dateTime19 = dateTime17.minusDays(292278993);
        org.joda.time.Instant instant20 = dateTime19.toInstant();
        boolean boolean21 = dateTime8.isBefore((org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.DateTime dateTime23 = dateTime19.plusMillis((-195));
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime0 and instant4", (dateTime0.compareTo(instant4) == 0) == dateTime0.equals(instant4));
    }

    @Test
    public void test0200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0200");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime2 = dateTime0.minusHours((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int4 = dateTime2.get(dateTimeFieldType3);
        org.joda.time.DateTime dateTime6 = dateTime2.minusMillis((int) '#');
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime();
        int int9 = dateTimeZone7.getOffset((org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.DateTime dateTime10 = org.joda.time.DateTime.now(dateTimeZone7);
        boolean boolean11 = dateTime6.isEqual((org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.DateTime dateTime13 = dateTime10.minusMinutes(11814974);
        long long14 = dateTime13.getMillis();
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime17 = dateTime15.minusHours((int) (short) 100);
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime20 = dateTime18.minusHours((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int22 = dateTime20.get(dateTimeFieldType21);
        org.joda.time.DurationFieldType durationFieldType23 = dateTimeFieldType21.getRangeDurationType();
        org.joda.time.DateTime dateTime25 = dateTime17.withFieldAdded(durationFieldType23, 11764515);
        org.joda.time.ReadableDuration readableDuration26 = null;
        org.joda.time.DateTime dateTime28 = dateTime17.withDurationAdded(readableDuration26, 11811003);
        int int29 = dateTime17.getYearOfEra();
        org.joda.time.Instant instant30 = dateTime17.toInstant();
        org.joda.time.Instant instant31 = new org.joda.time.Instant();
        org.joda.time.Instant instant33 = instant31.withMillis((long) 11);
        org.joda.time.Instant instant34 = instant33.toInstant();
        org.joda.time.Chronology chronology35 = instant33.getChronology();
        org.joda.time.DateTimeField dateTimeField36 = chronology35.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate39 = new org.joda.time.LocalDate((long) 100, dateTimeZone38);
        int int40 = dateTimeField36.getMaximumValue((org.joda.time.ReadablePartial) localDate39);
        int int42 = localDate39.getValue(2);
        org.joda.time.DateMidnight dateMidnight43 = localDate39.toDateMidnight();
        org.joda.time.LocalDate localDate45 = localDate39.plusMonths(26160535);
        org.joda.time.format.DateTimePrinter dateTimePrinter46 = null;
        org.joda.time.format.DateTimeParser dateTimeParser47 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter48 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter46, dateTimeParser47);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter50 = dateTimeFormatter48.withPivotYear((java.lang.Integer) (-26151846));
        org.joda.time.format.DateTimeFormatter dateTimeFormatter51 = dateTimeFormatter48.withZoneUTC();
        org.joda.time.DateTimeZone dateTimeZone52 = dateTimeFormatter51.getZone();
        org.joda.time.DateTime dateTime53 = localDate45.toDateTimeAtStartOfDay(dateTimeZone52);
        org.joda.time.DateTime dateTime54 = dateTime17.toDateTime(dateTimeZone52);
        org.joda.time.DateTime dateTime55 = dateTime13.toDateTime(dateTimeZone52);
        org.joda.time.ReadableDuration readableDuration56 = null;
        org.joda.time.DateTime dateTime57 = dateTime55.plus(readableDuration56);
        long long58 = dateTime57.getMillis();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime8 and dateTime10", (dateTime8.compareTo(dateTime10) == 0) == dateTime8.equals(dateTime10));
    }

    @Test
    public void test0201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0201");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime2 = dateTime0.minusHours((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int4 = dateTime2.get(dateTimeFieldType3);
        org.joda.time.DateTime dateTime6 = dateTime2.minusMillis((int) '#');
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime();
        int int9 = dateTimeZone7.getOffset((org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.DateTime dateTime10 = org.joda.time.DateTime.now(dateTimeZone7);
        boolean boolean11 = dateTime6.isEqual((org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.DateTime dateTime13 = dateTime10.minusMinutes(11814974);
        long long14 = dateTime13.getMillis();
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime17 = dateTime15.minusHours((int) (short) 100);
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime20 = dateTime18.minusHours((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int22 = dateTime20.get(dateTimeFieldType21);
        org.joda.time.DurationFieldType durationFieldType23 = dateTimeFieldType21.getRangeDurationType();
        org.joda.time.DateTime dateTime25 = dateTime17.withFieldAdded(durationFieldType23, 11764515);
        org.joda.time.ReadableDuration readableDuration26 = null;
        org.joda.time.DateTime dateTime28 = dateTime17.withDurationAdded(readableDuration26, 11811003);
        int int29 = dateTime17.getYearOfEra();
        org.joda.time.Instant instant30 = dateTime17.toInstant();
        org.joda.time.Instant instant31 = new org.joda.time.Instant();
        org.joda.time.Instant instant33 = instant31.withMillis((long) 11);
        org.joda.time.Instant instant34 = instant33.toInstant();
        org.joda.time.Chronology chronology35 = instant33.getChronology();
        org.joda.time.DateTimeField dateTimeField36 = chronology35.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate39 = new org.joda.time.LocalDate((long) 100, dateTimeZone38);
        int int40 = dateTimeField36.getMaximumValue((org.joda.time.ReadablePartial) localDate39);
        int int42 = localDate39.getValue(2);
        org.joda.time.DateMidnight dateMidnight43 = localDate39.toDateMidnight();
        org.joda.time.LocalDate localDate45 = localDate39.plusMonths(26160535);
        org.joda.time.format.DateTimePrinter dateTimePrinter46 = null;
        org.joda.time.format.DateTimeParser dateTimeParser47 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter48 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter46, dateTimeParser47);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter50 = dateTimeFormatter48.withPivotYear((java.lang.Integer) (-26151846));
        org.joda.time.format.DateTimeFormatter dateTimeFormatter51 = dateTimeFormatter48.withZoneUTC();
        org.joda.time.DateTimeZone dateTimeZone52 = dateTimeFormatter51.getZone();
        org.joda.time.DateTime dateTime53 = localDate45.toDateTimeAtStartOfDay(dateTimeZone52);
        org.joda.time.DateTime dateTime54 = dateTime17.toDateTime(dateTimeZone52);
        org.joda.time.DateTime dateTime55 = dateTime13.toDateTime(dateTimeZone52);
        org.joda.time.ReadableDuration readableDuration56 = null;
        org.joda.time.DateTime dateTime57 = dateTime55.plus(readableDuration56);
        org.joda.time.DateTime dateTime59 = dateTime55.minusSeconds(11930552);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime0 and dateTime10", (dateTime0.compareTo(dateTime10) == 0) == dateTime0.equals(dateTime10));
    }

    @Test
    public void test0202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0202");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime2 = dateTime0.minusHours((int) (short) 100);
        org.joda.time.DateTime dateTime4 = dateTime2.minus(0L);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) 100, dateTimeZone6);
        org.joda.time.DateTime dateTime8 = dateTime4.withZone(dateTimeZone6);
        org.joda.time.LocalDate localDate9 = dateTime4.toLocalDate();
        org.joda.time.LocalDate localDate11 = localDate9.plusMonths(49);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) 100, dateTimeZone13);
        org.joda.time.LocalDate localDate16 = localDate14.plusDays(50);
        org.joda.time.LocalDate.Property property17 = localDate16.monthOfYear();
        org.joda.time.LocalDate.Property property18 = localDate16.year();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate((long) 100, dateTimeZone20);
        org.joda.time.LocalDate localDate23 = localDate21.plusDays(50);
        org.joda.time.Chronology chronology24 = localDate23.getChronology();
        org.joda.time.DateTimeField dateTimeField25 = chronology24.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate((long) 100, dateTimeZone27);
        org.joda.time.LocalDate localDate30 = localDate28.plusDays(50);
        int int31 = localDate28.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate33 = localDate28.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime();
        int int36 = dateTimeZone34.getOffset((org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.DateMidnight dateMidnight37 = localDate28.toDateMidnight(dateTimeZone34);
        long long39 = dateTimeZone34.convertUTCToLocal(60000L);
        org.joda.time.chrono.ZonedChronology zonedChronology40 = org.joda.time.chrono.ZonedChronology.getInstance(chronology24, dateTimeZone34);
        org.joda.time.DateTime dateTime41 = localDate16.toDateTimeAtStartOfDay(dateTimeZone34);
        java.lang.String str43 = dateTimeZone34.getName((-3155695200000L));
        org.joda.time.LocalDate localDate44 = new org.joda.time.LocalDate(dateTimeZone34);
        org.joda.time.Interval interval45 = localDate11.toInterval(dateTimeZone34);
        org.joda.time.LocalDate localDate47 = localDate11.plusMonths(11842946);
        org.joda.time.LocalDate localDate49 = localDate47.minusWeeks(26235382);
        org.joda.time.Chronology chronology50 = localDate49.getChronology();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and dateTime8", (dateTime2.compareTo(dateTime8) == 0) == dateTime2.equals(dateTime8));
    }

    @Test
    public void test0203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0203");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 100, dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.plusDays(50);
        org.joda.time.Chronology chronology5 = localDate4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 100, dateTimeZone8);
        org.joda.time.LocalDate localDate11 = localDate9.plusDays(50);
        int int12 = localDate9.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate14 = localDate9.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        int int17 = dateTimeZone15.getOffset((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateMidnight dateMidnight18 = localDate9.toDateMidnight(dateTimeZone15);
        long long20 = dateTimeZone15.convertUTCToLocal(60000L);
        org.joda.time.chrono.ZonedChronology zonedChronology21 = org.joda.time.chrono.ZonedChronology.getInstance(chronology5, dateTimeZone15);
        org.joda.time.DurationField durationField22 = zonedChronology21.eras();
        org.joda.time.DateTimeField dateTimeField23 = zonedChronology21.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField24 = zonedChronology21.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField25 = zonedChronology21.monthOfYear();
        org.joda.time.DateTimeField dateTimeField26 = zonedChronology21.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate((long) 100, dateTimeZone28);
        org.joda.time.LocalDate localDate31 = localDate29.plusDays(50);
        org.joda.time.Chronology chronology32 = localDate31.getChronology();
        org.joda.time.DateTimeField dateTimeField33 = chronology32.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate36 = new org.joda.time.LocalDate((long) 100, dateTimeZone35);
        org.joda.time.LocalDate localDate38 = localDate36.plusDays(50);
        int int39 = localDate36.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate41 = localDate36.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime();
        int int44 = dateTimeZone42.getOffset((org.joda.time.ReadableInstant) dateTime43);
        org.joda.time.DateMidnight dateMidnight45 = localDate36.toDateMidnight(dateTimeZone42);
        long long47 = dateTimeZone42.convertUTCToLocal(60000L);
        org.joda.time.chrono.ZonedChronology zonedChronology48 = org.joda.time.chrono.ZonedChronology.getInstance(chronology32, dateTimeZone42);
        org.joda.time.DurationField durationField49 = zonedChronology48.weeks();
        org.joda.time.DateTimeField dateTimeField50 = zonedChronology48.year();
        org.joda.time.DateTimeZone dateTimeZone51 = zonedChronology48.getZone();
        org.joda.time.LocalDate localDate52 = org.joda.time.LocalDate.now(dateTimeZone51);
        org.joda.time.Chronology chronology53 = zonedChronology21.withZone(dateTimeZone51);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField22 and durationField49", Math.signum(durationField22.compareTo(durationField49)) == -Math.signum(durationField49.compareTo(durationField22)));
    }

    @Test
    public void test0204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0204");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime2 = dateTime0.minusHours((int) (short) 100);
        org.joda.time.DateMidnight dateMidnight3 = dateTime2.toDateMidnight();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime(dateTimeZone4);
        org.joda.time.LocalTime localTime6 = new org.joda.time.LocalTime(dateTimeZone4);
        org.joda.time.LocalTime localTime8 = localTime6.plusSeconds(10);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = localTime6.getFieldType(0);
        int int11 = dateMidnight3.get(dateTimeFieldType10);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.UTC;
        int int14 = dateTimeZone12.getOffsetFromLocal((long) 'a');
        org.joda.time.DateTime dateTime15 = dateMidnight3.toDateTime(dateTimeZone12);
        boolean boolean16 = dateMidnight3.isEqualNow();
        java.util.Date date17 = dateMidnight3.toDate();
        date17.setMonth(11847553);
        java.lang.String str20 = date17.toGMTString();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateMidnight3 and dateTime15", (dateMidnight3.compareTo(dateTime15) == 0) == dateMidnight3.equals(dateTime15));
    }

    @Test
    public void test0205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0205");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.Instant instant2 = instant0.withMillis((long) 11);
        org.joda.time.DateTimeZone dateTimeZone3 = instant0.getZone();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) 100, dateTimeZone5);
        org.joda.time.LocalDate localDate8 = localDate6.plusDays(50);
        org.joda.time.Chronology chronology9 = localDate8.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate((long) 100, dateTimeZone12);
        org.joda.time.LocalDate localDate15 = localDate13.plusDays(50);
        int int16 = localDate13.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate18 = localDate13.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime();
        int int21 = dateTimeZone19.getOffset((org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.DateMidnight dateMidnight22 = localDate13.toDateMidnight(dateTimeZone19);
        long long24 = dateTimeZone19.convertUTCToLocal(60000L);
        org.joda.time.chrono.ZonedChronology zonedChronology25 = org.joda.time.chrono.ZonedChronology.getInstance(chronology9, dateTimeZone19);
        org.joda.time.DurationField durationField26 = zonedChronology25.eras();
        org.joda.time.DateTimeField dateTimeField27 = zonedChronology25.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField28 = zonedChronology25.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology25.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField30 = zonedChronology25.hourOfDay();
        org.joda.time.DateTimeField dateTimeField31 = zonedChronology25.dayOfMonth();
        boolean boolean32 = dateTimeZone3.equals((java.lang.Object) zonedChronology25);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and dateTime20", (instant0.compareTo(dateTime20) == 0) == instant0.equals(dateTime20));
    }

    @Test
    public void test0206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0206");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.Instant instant2 = instant0.minus((long) 2);
        org.joda.time.MutableDateTime mutableDateTime3 = instant0.toMutableDateTimeISO();
        java.util.TimeZone timeZone4 = java.util.TimeZone.getDefault();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone4);
        org.joda.time.DateTime dateTime6 = instant0.toDateTime(dateTimeZone5);
        org.joda.time.DateTime.Property property7 = dateTime6.weekOfWeekyear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and mutableDateTime3", (instant0.compareTo(mutableDateTime3) == 0) == instant0.equals(mutableDateTime3));
    }

    @Test
    public void test0207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0207");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Instant instant2 = dateTime1.toInstant();
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime();
        int int5 = dateTimeZone3.getOffset((org.joda.time.ReadableInstant) dateTime4);
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((java.lang.Object) instant2, dateTimeZone3);
        long long8 = dateTimeZone3.nextTransition((long) 11860797);
        org.joda.time.LocalDateTime localDateTime9 = org.joda.time.LocalDateTime.now(dateTimeZone3);
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime(26175023L, dateTimeZone3);
        int int11 = localDateTime10.getMillisOfSecond();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and instant2", (dateTime1.compareTo(instant2) == 0) == dateTime1.equals(instant2));
    }

    @Test
    public void test0208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0208");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime2 = dateTime0.minusHours((int) (short) 100);
        org.joda.time.DateMidnight dateMidnight3 = dateTime2.toDateMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.dayOfYear();
        int int5 = dateTime2.get(dateTimeFieldType4);
        int int6 = dateTime2.getDayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 100, dateTimeZone8);
        org.joda.time.LocalDate localDate11 = localDate9.plusDays(50);
        org.joda.time.Chronology chronology12 = localDate11.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField14 = chronology12.dayOfMonth();
        org.joda.time.DateTime dateTime15 = dateTime2.withChronology(chronology12);
        org.joda.time.DateTime dateTime17 = dateTime15.plusSeconds(100);
        org.joda.time.DateTime.Property property18 = dateTime15.hourOfDay();
        org.joda.time.DateTime dateTime19 = property18.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime21 = dateTime19.minusMinutes(0);
        org.joda.time.DateTime dateTime23 = dateTime21.minus((long) 499774);
        org.joda.time.Instant instant24 = dateTime23.toInstant();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and dateTime15", (dateTime2.compareTo(dateTime15) == 0) == dateTime2.equals(dateTime15));
    }

    @Test
    public void test0209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0209");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        int int1 = dateTime0.getDayOfYear();
        org.joda.time.DateTime dateTime3 = dateTime0.withYear(11751002);
        org.joda.time.Instant instant4 = dateTime0.toInstant();
        org.joda.time.DateTime dateTime6 = dateTime0.plusYears(26160835);
        boolean boolean8 = dateTime6.equals((java.lang.Object) 0.0f);
        org.joda.time.DateTime dateTime10 = dateTime6.minusMinutes(11775531);
        org.joda.time.DateTime dateTime12 = dateTime10.withWeekyear(26163273);
        org.joda.time.DateTime.Property property13 = dateTime10.yearOfCentury();
        org.joda.time.DurationField durationField14 = property13.getLeapDurationField();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime0 and instant4", (dateTime0.compareTo(instant4) == 0) == dateTime0.equals(instant4));
    }

    @Test
    public void test0210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0210");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime2 = dateTime0.minusHours((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int4 = dateTime2.get(dateTimeFieldType3);
        org.joda.time.DateTime dateTime6 = dateTime2.minusMillis((int) '#');
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime();
        int int9 = dateTimeZone7.getOffset((org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.DateTime dateTime10 = org.joda.time.DateTime.now(dateTimeZone7);
        boolean boolean11 = dateTime6.isEqual((org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.DateTime dateTime13 = dateTime10.minusMinutes(11814974);
        long long14 = dateTime13.getMillis();
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime17 = dateTime15.minusHours((int) (short) 100);
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime20 = dateTime18.minusHours((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int22 = dateTime20.get(dateTimeFieldType21);
        org.joda.time.DurationFieldType durationFieldType23 = dateTimeFieldType21.getRangeDurationType();
        org.joda.time.DateTime dateTime25 = dateTime17.withFieldAdded(durationFieldType23, 11764515);
        org.joda.time.ReadableDuration readableDuration26 = null;
        org.joda.time.DateTime dateTime28 = dateTime17.withDurationAdded(readableDuration26, 11811003);
        int int29 = dateTime17.getYearOfEra();
        org.joda.time.Instant instant30 = dateTime17.toInstant();
        org.joda.time.Instant instant31 = new org.joda.time.Instant();
        org.joda.time.Instant instant33 = instant31.withMillis((long) 11);
        org.joda.time.Instant instant34 = instant33.toInstant();
        org.joda.time.Chronology chronology35 = instant33.getChronology();
        org.joda.time.DateTimeField dateTimeField36 = chronology35.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate39 = new org.joda.time.LocalDate((long) 100, dateTimeZone38);
        int int40 = dateTimeField36.getMaximumValue((org.joda.time.ReadablePartial) localDate39);
        int int42 = localDate39.getValue(2);
        org.joda.time.DateMidnight dateMidnight43 = localDate39.toDateMidnight();
        org.joda.time.LocalDate localDate45 = localDate39.plusMonths(26160535);
        org.joda.time.format.DateTimePrinter dateTimePrinter46 = null;
        org.joda.time.format.DateTimeParser dateTimeParser47 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter48 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter46, dateTimeParser47);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter50 = dateTimeFormatter48.withPivotYear((java.lang.Integer) (-26151846));
        org.joda.time.format.DateTimeFormatter dateTimeFormatter51 = dateTimeFormatter48.withZoneUTC();
        org.joda.time.DateTimeZone dateTimeZone52 = dateTimeFormatter51.getZone();
        org.joda.time.DateTime dateTime53 = localDate45.toDateTimeAtStartOfDay(dateTimeZone52);
        org.joda.time.DateTime dateTime54 = dateTime17.toDateTime(dateTimeZone52);
        org.joda.time.DateTime dateTime55 = dateTime13.toDateTime(dateTimeZone52);
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime58 = dateTime56.minusHours((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType59 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int60 = dateTime58.get(dateTimeFieldType59);
        org.joda.time.DateTimeZone dateTimeZone61 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalTime localTime62 = new org.joda.time.LocalTime(dateTimeZone61);
        org.joda.time.DateTimeZone dateTimeZone63 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalTime localTime64 = new org.joda.time.LocalTime(dateTimeZone63);
        org.joda.time.DateTimeFieldType dateTimeFieldType66 = localTime64.getFieldType((int) (byte) 1);
        int int67 = localTime62.get(dateTimeFieldType66);
        org.joda.time.DurationFieldType durationFieldType68 = dateTimeFieldType66.getDurationType();
        int int69 = dateTime58.get(dateTimeFieldType66);
        org.joda.time.DateTime.Property property70 = dateTime55.property(dateTimeFieldType66);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime0 and dateTime10", (dateTime0.compareTo(dateTime10) == 0) == dateTime0.equals(dateTime10));
    }

    @Test
    public void test0211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0211");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.Instant instant2 = instant0.withMillis((long) 11);
        org.joda.time.Instant instant3 = instant2.toInstant();
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Instant instant5 = instant2.minus(readableDuration4);
        org.joda.time.Instant instant6 = instant2.toInstant();
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.Instant instant8 = instant2.plus(readableDuration7);
        org.joda.time.Instant instant9 = new org.joda.time.Instant();
        org.joda.time.Instant instant11 = instant9.withMillis((long) 11);
        org.joda.time.Instant instant12 = instant11.toInstant();
        org.joda.time.Chronology chronology13 = instant11.getChronology();
        org.joda.time.MutableDateTime mutableDateTime14 = instant11.toMutableDateTimeISO();
        boolean boolean15 = instant2.isAfter((org.joda.time.ReadableInstant) instant11);
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property17 = localDateTime16.minuteOfHour();
        org.joda.time.LocalDateTime.Property property18 = localDateTime16.minuteOfHour();
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = property18.getFieldType();
        org.joda.time.DurationFieldType durationFieldType20 = dateTimeFieldType19.getDurationType();
        boolean boolean21 = instant2.isSupported(dateTimeFieldType19);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate((long) 100, dateTimeZone23);
        org.joda.time.LocalDate localDate26 = localDate24.plusDays(50);
        org.joda.time.Chronology chronology27 = localDate26.getChronology();
        org.joda.time.DateTimeField dateTimeField28 = chronology27.millisOfDay();
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime(chronology27);
        org.joda.time.DateTimeField dateTimeField30 = chronology27.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField31 = chronology27.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField32 = dateTimeFieldType19.getField(chronology27);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant2 and mutableDateTime14", (instant2.compareTo(mutableDateTime14) == 0) == instant2.equals(mutableDateTime14));
    }

    @Test
    public void test0212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0212");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 100, dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.plusDays(50);
        org.joda.time.Chronology chronology5 = localDate4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 100, dateTimeZone8);
        org.joda.time.LocalDate localDate11 = localDate9.plusDays(50);
        int int12 = localDate9.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate14 = localDate9.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        int int17 = dateTimeZone15.getOffset((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateMidnight dateMidnight18 = localDate9.toDateMidnight(dateTimeZone15);
        long long20 = dateTimeZone15.convertUTCToLocal(60000L);
        org.joda.time.chrono.ZonedChronology zonedChronology21 = org.joda.time.chrono.ZonedChronology.getInstance(chronology5, dateTimeZone15);
        org.joda.time.DurationField durationField22 = zonedChronology21.weeks();
        org.joda.time.DurationField durationField23 = zonedChronology21.millis();
        org.joda.time.DurationField durationField24 = zonedChronology21.millis();
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime();
        int int26 = dateTime25.getDayOfYear();
        org.joda.time.DateTime dateTime28 = dateTime25.withYear(11751002);
        org.joda.time.Instant instant29 = dateTime25.toInstant();
        org.joda.time.DateTime.Property property30 = dateTime25.monthOfYear();
        boolean boolean31 = zonedChronology21.equals((java.lang.Object) dateTime25);
        org.joda.time.DurationField durationField32 = zonedChronology21.months();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime16 and instant29", (dateTime16.compareTo(instant29) == 0) == dateTime16.equals(instant29));
    }

    @Test
    public void test0213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0213");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(dateTimeZone0);
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalTime localTime4 = new org.joda.time.LocalTime(dateTimeZone3);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalTime localTime6 = new org.joda.time.LocalTime(dateTimeZone5);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = localTime6.getFieldType((int) (byte) 1);
        int int9 = localTime4.get(dateTimeFieldType8);
        org.joda.time.LocalTime.Property property10 = localTime2.property(dateTimeFieldType8);
        org.joda.time.LocalTime localTime11 = property10.roundHalfFloorCopy();
        org.joda.time.LocalTime localTime12 = property10.getLocalTime();
        java.lang.String str13 = property10.toString();
        java.lang.String str14 = property10.getAsShortText();
        int int15 = property10.getMinimumValue();
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime();
        org.joda.time.Instant instant18 = dateTime17.toInstant();
        org.joda.time.Chronology chronology19 = dateTime17.getChronology();
        boolean boolean20 = dateTime16.isEqual((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalTime localTime22 = new org.joda.time.LocalTime(dateTimeZone21);
        org.joda.time.LocalTime localTime23 = new org.joda.time.LocalTime(dateTimeZone21);
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalTime localTime25 = new org.joda.time.LocalTime(dateTimeZone24);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalTime localTime27 = new org.joda.time.LocalTime(dateTimeZone26);
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = localTime27.getFieldType((int) (byte) 1);
        int int30 = localTime25.get(dateTimeFieldType29);
        org.joda.time.LocalTime.Property property31 = localTime23.property(dateTimeFieldType29);
        org.joda.time.LocalTime localTime32 = property31.roundHalfFloorCopy();
        org.joda.time.LocalTime localTime33 = property31.getLocalTime();
        org.joda.time.LocalTime localTime34 = property31.roundFloorCopy();
        org.joda.time.LocalTime localTime36 = property31.addWrapFieldToCopy(26159400);
        org.joda.time.DateTimeField dateTimeField37 = property31.getField();
        org.joda.time.LocalTime localTime38 = property31.roundCeilingCopy();
        org.joda.time.LocalTime localTime40 = localTime38.minusHours(11753441);
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.UTC;
        int int43 = dateTimeZone41.getStandardOffset((long) (byte) 1);
        org.joda.time.DateTime dateTime44 = localTime40.toDateTimeToday(dateTimeZone41);
        org.joda.time.DateTime dateTime45 = dateTime16.withZone(dateTimeZone41);
        boolean boolean46 = property10.equals((java.lang.Object) dateTime45);
        int int47 = dateTime45.getYearOfEra();
        long long48 = dateTime45.getMillis();
        org.joda.time.Instant instant49 = dateTime45.toInstant();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime16 and instant18", (dateTime16.compareTo(instant18) == 0) == dateTime16.equals(instant18));
    }

    @Test
    public void test0214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0214");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 100, dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.plusDays(50);
        org.joda.time.Chronology chronology5 = localDate4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 100, dateTimeZone8);
        org.joda.time.LocalDate localDate11 = localDate9.plusDays(50);
        int int12 = localDate9.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate14 = localDate9.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        int int17 = dateTimeZone15.getOffset((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateMidnight dateMidnight18 = localDate9.toDateMidnight(dateTimeZone15);
        long long20 = dateTimeZone15.convertUTCToLocal(60000L);
        org.joda.time.chrono.ZonedChronology zonedChronology21 = org.joda.time.chrono.ZonedChronology.getInstance(chronology5, dateTimeZone15);
        org.joda.time.DurationField durationField22 = zonedChronology21.weeks();
        org.joda.time.DateTimeField dateTimeField23 = zonedChronology21.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField24 = zonedChronology21.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField25 = zonedChronology21.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField26 = zonedChronology21.halfdayOfDay();
        org.joda.time.DurationField durationField27 = zonedChronology21.halfdays();
        org.joda.time.DateTimeField dateTimeField28 = zonedChronology21.minuteOfHour();
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime31 = dateTime29.minusHours((int) (short) 100);
        org.joda.time.DateTime dateTime33 = dateTime31.minus(0L);
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate36 = new org.joda.time.LocalDate((long) 100, dateTimeZone35);
        org.joda.time.DateTime dateTime37 = dateTime33.withZone(dateTimeZone35);
        org.joda.time.LocalDate localDate38 = dateTime33.toLocalDate();
        org.joda.time.LocalDate localDate40 = localDate38.plusMonths(49);
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate43 = new org.joda.time.LocalDate((long) 100, dateTimeZone42);
        org.joda.time.LocalDate localDate45 = localDate43.plusDays(50);
        org.joda.time.LocalDate.Property property46 = localDate45.monthOfYear();
        org.joda.time.LocalDate.Property property47 = localDate45.year();
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate50 = new org.joda.time.LocalDate((long) 100, dateTimeZone49);
        org.joda.time.LocalDate localDate52 = localDate50.plusDays(50);
        org.joda.time.Chronology chronology53 = localDate52.getChronology();
        org.joda.time.DateTimeField dateTimeField54 = chronology53.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate57 = new org.joda.time.LocalDate((long) 100, dateTimeZone56);
        org.joda.time.LocalDate localDate59 = localDate57.plusDays(50);
        int int60 = localDate57.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate62 = localDate57.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone63 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime64 = new org.joda.time.DateTime();
        int int65 = dateTimeZone63.getOffset((org.joda.time.ReadableInstant) dateTime64);
        org.joda.time.DateMidnight dateMidnight66 = localDate57.toDateMidnight(dateTimeZone63);
        long long68 = dateTimeZone63.convertUTCToLocal(60000L);
        org.joda.time.chrono.ZonedChronology zonedChronology69 = org.joda.time.chrono.ZonedChronology.getInstance(chronology53, dateTimeZone63);
        org.joda.time.DateTime dateTime70 = localDate45.toDateTimeAtStartOfDay(dateTimeZone63);
        java.lang.String str72 = dateTimeZone63.getName((-3155695200000L));
        org.joda.time.LocalDate localDate73 = new org.joda.time.LocalDate(dateTimeZone63);
        org.joda.time.Interval interval74 = localDate40.toInterval(dateTimeZone63);
        org.joda.time.LocalDate localDate76 = localDate40.plusMonths(11842946);
        long long78 = zonedChronology21.set((org.joda.time.ReadablePartial) localDate76, (long) 11801884);
        int int79 = localDate76.getWeekyear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime31 and dateTime37", (dateTime31.compareTo(dateTime37) == 0) == dateTime31.equals(dateTime37));
    }

    @Test
    public void test0215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0215");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 100, dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.plusDays(50);
        org.joda.time.Chronology chronology5 = localDate4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 100, dateTimeZone8);
        org.joda.time.LocalDate localDate11 = localDate9.plusDays(50);
        int int12 = localDate9.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate14 = localDate9.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        int int17 = dateTimeZone15.getOffset((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateMidnight dateMidnight18 = localDate9.toDateMidnight(dateTimeZone15);
        long long20 = dateTimeZone15.convertUTCToLocal(60000L);
        org.joda.time.chrono.ZonedChronology zonedChronology21 = org.joda.time.chrono.ZonedChronology.getInstance(chronology5, dateTimeZone15);
        org.joda.time.DurationField durationField22 = zonedChronology21.weeks();
        org.joda.time.DateTimeField dateTimeField23 = zonedChronology21.weekyear();
        org.joda.time.DurationField durationField24 = zonedChronology21.weekyears();
        org.joda.time.DateTimeField dateTimeField25 = zonedChronology21.minuteOfDay();
        java.lang.String str26 = zonedChronology21.toString();
        org.joda.time.DateTimeField dateTimeField27 = zonedChronology21.millisOfSecond();
        org.joda.time.DurationField durationField28 = zonedChronology21.years();
        org.joda.time.DurationField durationField29 = zonedChronology21.seconds();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on durationField24 and durationField28", (durationField24.compareTo(durationField28) == 0) == durationField24.equals(durationField28));
    }

    @Test
    public void test0216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0216");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime2 = dateTime0.minusHours((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int4 = dateTime2.get(dateTimeFieldType3);
        org.joda.time.DateTime dateTime6 = dateTime2.minusMillis((int) '#');
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime();
        int int9 = dateTimeZone7.getOffset((org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.DateTime dateTime10 = org.joda.time.DateTime.now(dateTimeZone7);
        boolean boolean11 = dateTime6.isEqual((org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.DateTime dateTime13 = dateTime10.minusMinutes(11814974);
        int int14 = dateTime13.getYearOfCentury();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime0 and dateTime10", (dateTime0.compareTo(dateTime10) == 0) == dateTime0.equals(dateTime10));
    }

    @Test
    public void test0217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0217");
        java.util.Locale locale0 = java.util.Locale.TAIWAN;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        calendar1.setMinimalDaysInFirstWeek(26168469);
        calendar1.set(11757696, 16, (int) (short) 100);
        org.joda.time.Instant instant9 = new org.joda.time.Instant();
        org.joda.time.Instant instant11 = instant9.withMillis((long) 11);
        org.joda.time.Instant instant12 = instant11.toInstant();
        org.joda.time.Chronology chronology13 = instant11.getChronology();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((long) '#', chronology13);
        boolean boolean15 = calendar1.before((java.lang.Object) chronology13);
        org.joda.time.DurationField durationField16 = chronology13.millis();
        org.joda.time.DurationFieldType durationFieldType17 = durationField16.getType();
        org.joda.time.DurationFieldType durationFieldType18 = durationField16.getType();
        java.util.Locale locale19 = java.util.Locale.TAIWAN;
        java.util.Calendar calendar20 = java.util.Calendar.getInstance(locale19);
        calendar20.setMinimalDaysInFirstWeek(26168469);
        calendar20.set(11757696, 16, (int) (short) 100);
        org.joda.time.Instant instant28 = new org.joda.time.Instant();
        org.joda.time.Instant instant30 = instant28.withMillis((long) 11);
        org.joda.time.Instant instant31 = instant30.toInstant();
        org.joda.time.Chronology chronology32 = instant30.getChronology();
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime((long) '#', chronology32);
        boolean boolean34 = calendar20.before((java.lang.Object) chronology32);
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((long) (byte) 10);
        org.joda.time.DateTime dateTime38 = dateTime36.plusMinutes(49);
        org.joda.time.DateTime dateTime40 = dateTime38.plus(10L);
        org.joda.time.Chronology chronology41 = dateTime40.getChronology();
        org.joda.time.DateTimeField dateTimeField42 = chronology41.monthOfYear();
        boolean boolean43 = calendar20.after((java.lang.Object) chronology41);
        org.joda.time.DurationField durationField44 = durationFieldType18.getField(chronology41);
        java.lang.String str45 = durationFieldType18.getName();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on durationField16 and durationField44", (durationField16.compareTo(durationField44) == 0) == durationField16.equals(durationField44));
    }

    @Test
    public void test0218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0218");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime2 = dateTime0.minusHours((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int4 = dateTime2.get(dateTimeFieldType3);
        org.joda.time.DateTime dateTime6 = dateTime2.minusMillis((int) '#');
        org.joda.time.DateTime dateTime8 = dateTime6.plusDays(11);
        org.joda.time.DateTime dateTime11 = dateTime6.withDurationAdded((long) 11757696, (int) ' ');
        int int12 = dateTime6.getWeekOfWeekyear();
        org.joda.time.DateTime dateTime14 = dateTime6.minusWeeks(215400000);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime17 = dateTime15.minusHours((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalTime localTime19 = new org.joda.time.LocalTime(dateTimeZone18);
        org.joda.time.DateTime dateTime20 = dateTime15.withZone(dateTimeZone18);
        org.joda.time.DateTime dateTime22 = dateTime15.withMillisOfSecond(11);
        org.joda.time.DateTime dateTime24 = dateTime22.minus((long) 11808074);
        org.joda.time.DateTime dateTime26 = dateTime22.plusYears(11849633);
        boolean boolean27 = dateTime14.isBefore((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate((long) 100, dateTimeZone30);
        org.joda.time.LocalDate localDate33 = localDate31.plusDays(50);
        org.joda.time.Chronology chronology34 = localDate33.getChronology();
        org.joda.time.DateTimeField dateTimeField35 = chronology34.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate38 = new org.joda.time.LocalDate((long) 100, dateTimeZone37);
        org.joda.time.LocalDate localDate40 = localDate38.plusDays(50);
        int int41 = localDate38.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate43 = localDate38.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime();
        int int46 = dateTimeZone44.getOffset((org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.DateMidnight dateMidnight47 = localDate38.toDateMidnight(dateTimeZone44);
        long long49 = dateTimeZone44.convertUTCToLocal(60000L);
        org.joda.time.chrono.ZonedChronology zonedChronology50 = org.joda.time.chrono.ZonedChronology.getInstance(chronology34, dateTimeZone44);
        org.joda.time.DurationField durationField51 = zonedChronology50.weeks();
        org.joda.time.DateTimeField dateTimeField52 = zonedChronology50.weekOfWeekyear();
        org.joda.time.DurationField durationField53 = zonedChronology50.centuries();
        org.joda.time.DateTimeField dateTimeField54 = zonedChronology50.dayOfWeek();
        org.joda.time.DurationField durationField55 = zonedChronology50.millis();
        org.joda.time.LocalDate localDate56 = new org.joda.time.LocalDate((long) 52, (org.joda.time.Chronology) zonedChronology50);
        org.joda.time.DateTimeField dateTimeField57 = zonedChronology50.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField58 = zonedChronology50.weekyearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime59 = dateTime22.toMutableDateTime((org.joda.time.Chronology) zonedChronology50);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime15 and dateTime20", (dateTime15.compareTo(dateTime20) == 0) == dateTime15.equals(dateTime20));
    }

    @Test
    public void test0219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0219");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property1 = localDateTime0.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withField(dateTimeFieldType2, (int) (short) 10);
        org.joda.time.LocalDateTime.Property property5 = localDateTime0.minuteOfHour();
        org.joda.time.LocalDateTime.Property property6 = localDateTime0.millisOfDay();
        org.joda.time.LocalDateTime.Property property7 = localDateTime0.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime8 = property7.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.withCenturyOfEra(320);
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime14 = dateTime12.minusHours((int) (short) 100);
        org.joda.time.DateTime dateTime16 = dateTime12.withHourOfDay(10);
        java.util.GregorianCalendar gregorianCalendar17 = dateTime12.toGregorianCalendar();
        org.joda.time.Instant instant19 = new org.joda.time.Instant();
        org.joda.time.Instant instant21 = instant19.withMillis((long) 11);
        org.joda.time.Instant instant22 = instant21.toInstant();
        org.joda.time.Chronology chronology23 = instant21.getChronology();
        org.joda.time.DateTimeField dateTimeField24 = chronology23.clockhourOfHalfday();
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((long) 11760560, chronology23);
        org.joda.time.DateTime dateTime26 = dateTime12.withChronology(chronology23);
        boolean boolean27 = dateTimeFieldType11.isSupported(chronology23);
        boolean boolean28 = localDateTime8.isSupported(dateTimeFieldType11);
        org.joda.time.LocalDateTime.Property property29 = localDateTime8.monthOfYear();
        org.joda.time.DateTimeField dateTimeField30 = property29.getField();
        boolean boolean31 = property29.isLeap();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime12 and dateTime26", (dateTime12.compareTo(dateTime26) == 0) == dateTime12.equals(dateTime26));
    }

    @Test
    public void test0220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0220");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withPivotYear((java.lang.Integer) (-26151846));
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime7 = dateTime5.minusHours((int) (short) 100);
        org.joda.time.DateMidnight dateMidnight8 = dateTime7.toDateMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.dayOfYear();
        int int10 = dateTime7.get(dateTimeFieldType9);
        int int11 = dateTime7.getDayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) 100, dateTimeZone13);
        org.joda.time.LocalDate localDate16 = localDate14.plusDays(50);
        org.joda.time.Chronology chronology17 = localDate16.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField19 = chronology17.dayOfMonth();
        org.joda.time.DateTime dateTime20 = dateTime7.withChronology(chronology17);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = dateTimeFormatter4.withChronology(chronology17);
        int int22 = dateTimeFormatter4.getDefaultYear();
        org.joda.time.format.DateTimeParser dateTimeParser23 = dateTimeFormatter4.getParser();
        int int24 = dateTimeFormatter4.getDefaultYear();
        int int25 = dateTimeFormatter4.getDefaultYear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime7 and dateTime20", (dateTime7.compareTo(dateTime20) == 0) == dateTime7.equals(dateTime20));
    }

    @Test
    public void test0221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0221");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 100, dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.plusDays(50);
        org.joda.time.Chronology chronology5 = localDate4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 100, dateTimeZone8);
        org.joda.time.LocalDate localDate11 = localDate9.plusDays(50);
        int int12 = localDate9.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate14 = localDate9.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        int int17 = dateTimeZone15.getOffset((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateMidnight dateMidnight18 = localDate9.toDateMidnight(dateTimeZone15);
        long long20 = dateTimeZone15.convertUTCToLocal(60000L);
        org.joda.time.chrono.ZonedChronology zonedChronology21 = org.joda.time.chrono.ZonedChronology.getInstance(chronology5, dateTimeZone15);
        org.joda.time.DurationField durationField22 = zonedChronology21.eras();
        org.joda.time.DateTimeField dateTimeField23 = zonedChronology21.minuteOfDay();
        org.joda.time.Chronology chronology24 = zonedChronology21.withUTC();
        org.joda.time.DateTimeField dateTimeField25 = zonedChronology21.monthOfYear();
        org.joda.time.DateTimeField dateTimeField26 = zonedChronology21.dayOfYear();
        org.joda.time.DateTimeField dateTimeField27 = zonedChronology21.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField28 = zonedChronology21.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology21.weekyearOfCentury();
        org.joda.time.DurationField durationField30 = zonedChronology21.eras();
        org.joda.time.DurationField durationField31 = zonedChronology21.halfdays();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField22, durationField31, and durationField22", !(durationField22.compareTo(durationField31) == 0) || (Math.signum(durationField22.compareTo(durationField22)) == Math.signum(durationField31.compareTo(durationField22))));
    }

    @Test
    public void test0222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0222");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime2 = dateTime0.minusHours((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int4 = dateTime2.get(dateTimeFieldType3);
        org.joda.time.DateTime dateTime6 = dateTime2.minusMillis((int) '#');
        org.joda.time.DateTime dateTime8 = dateTime6.plusDays(11);
        org.joda.time.DateTime dateTime11 = dateTime6.withDurationAdded((long) (byte) 10, 11);
        org.joda.time.DateTime dateTime12 = dateTime11.toDateTime();
        org.joda.time.DateTime dateTime14 = dateTime12.minusHours(11771697);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime();
        org.joda.time.Instant instant16 = dateTime15.toInstant();
        org.joda.time.Chronology chronology17 = dateTime15.getChronology();
        org.joda.time.DateTime dateTime19 = dateTime15.plusDays(2);
        int int20 = dateTime15.getWeekOfWeekyear();
        org.joda.time.DateTime dateTime22 = dateTime15.withMillisOfDay(11771566);
        boolean boolean23 = dateTime14.isEqual((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.YearMonthDay yearMonthDay24 = dateTime22.toYearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate((long) 100, dateTimeZone26);
        org.joda.time.LocalDate localDate29 = localDate27.plusDays(50);
        org.joda.time.Chronology chronology30 = localDate29.getChronology();
        org.joda.time.LocalDate.Property property31 = localDate29.era();
        org.joda.time.LocalDate localDate32 = property31.getLocalDate();
        org.joda.time.LocalDate localDate33 = property31.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime34 = dateTime22.withFields((org.joda.time.ReadablePartial) localDate33);
        org.joda.time.LocalTime localTime35 = dateTime34.toLocalTime();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime0 and instant16", (dateTime0.compareTo(instant16) == 0) == dateTime0.equals(instant16));
    }

    @Test
    public void test0223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0223");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.Instant instant1 = dateTime0.toInstant();
        org.joda.time.Chronology chronology2 = dateTime0.getChronology();
        long long3 = dateTime0.getMillis();
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property5 = localDateTime4.yearOfEra();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.minusSeconds(53);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.dayOfYear();
        int int9 = localDateTime4.get(dateTimeFieldType8);
        org.joda.time.DurationFieldType durationFieldType10 = dateTimeFieldType8.getDurationType();
        org.joda.time.DateTime.Property property11 = dateTime0.property(dateTimeFieldType8);
        org.joda.time.DateTime dateTime13 = property11.addToCopy((long) 11919);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime0 and instant1", (dateTime0.compareTo(instant1) == 0) == dateTime0.equals(instant1));
    }

    @Test
    public void test0224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0224");
        java.util.Date date5 = new java.util.Date(26342, 26203484, 37, 0, 11934993);
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime8 = dateTime6.minusHours((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int10 = dateTime8.get(dateTimeFieldType9);
        org.joda.time.DateTime dateTime12 = dateTime8.minusMillis((int) '#');
        org.joda.time.DateTime dateTime14 = dateTime12.plusDays(11);
        org.joda.time.DateTime dateTime17 = dateTime12.withDurationAdded((long) (byte) 10, 11);
        org.joda.time.DateTimeZone dateTimeZone18 = dateTime12.getZone();
        org.joda.time.DateTime dateTime20 = dateTime12.minusDays(22);
        org.joda.time.DateTime dateTime22 = dateTime12.withYearOfCentury(14);
        org.joda.time.Instant instant23 = org.joda.time.Instant.now();
        org.joda.time.Instant instant25 = instant23.plus((long) 11753187);
        org.joda.time.ReadableDuration readableDuration26 = null;
        org.joda.time.Instant instant27 = instant25.plus(readableDuration26);
        boolean boolean28 = dateTime12.equals((java.lang.Object) instant27);
        org.joda.time.DateTime.Property property29 = dateTime12.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property31 = localDateTime30.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.LocalDateTime localDateTime34 = localDateTime30.withField(dateTimeFieldType32, (int) (short) 10);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime30.plusWeeks((-1));
        org.joda.time.LocalDateTime localDateTime38 = localDateTime36.withMillisOfSecond((int) '4');
        org.joda.time.LocalDateTime localDateTime40 = localDateTime36.plusWeeks(26160458);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime36.minusMinutes((int) 'u');
        org.joda.time.LocalDateTime localDateTime44 = localDateTime42.minusMonths(3);
        org.joda.time.DateTime dateTime45 = dateTime12.withFields((org.joda.time.ReadablePartial) localDateTime42);
        boolean boolean46 = date5.equals((java.lang.Object) dateTime45);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime6 and instant23", (dateTime6.compareTo(instant23) == 0) == dateTime6.equals(instant23));
    }

    @Test
    public void test0225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0225");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 100, dateTimeZone1);
        org.joda.time.LocalDate.Property property3 = localDate2.weekyear();
        org.joda.time.LocalDate localDate5 = property3.setCopy(2022);
        org.joda.time.Instant instant6 = new org.joda.time.Instant();
        org.joda.time.Instant instant8 = instant6.withMillis((long) 11);
        org.joda.time.Instant instant9 = instant8.toInstant();
        org.joda.time.Chronology chronology10 = instant8.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) 100, dateTimeZone13);
        int int15 = dateTimeField11.getMaximumValue((org.joda.time.ReadablePartial) localDate14);
        int int17 = localDate14.getValue(2);
        org.joda.time.DateMidnight dateMidnight18 = localDate14.toDateMidnight();
        org.joda.time.LocalDate localDate20 = localDate14.plusMonths(26160535);
        int int21 = localDate20.getYear();
        boolean boolean22 = property3.equals((java.lang.Object) localDate20);
        org.joda.time.DateTimeField dateTimeField23 = property3.getField();
        long long26 = dateTimeField23.add((long) 11769357, (long) 2982081);
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime29 = dateTime27.minusHours((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int31 = dateTime29.get(dateTimeFieldType30);
        org.joda.time.DateTime dateTime33 = dateTime29.minusSeconds((int) (short) 0);
        org.joda.time.LocalDate localDate34 = dateTime29.toLocalDate();
        int int35 = dateTimeField23.getMinimumValue((org.joda.time.ReadablePartial) localDate34);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant6 and dateTime27", (instant6.compareTo(dateTime27) == 0) == instant6.equals(dateTime27));
    }

    @Test
    public void test0226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0226");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime2 = dateTime0.minusHours((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int4 = dateTime2.get(dateTimeFieldType3);
        org.joda.time.DateTime dateTime6 = dateTime2.minusMillis((int) '#');
        boolean boolean7 = dateTime2.isBeforeNow();
        int int8 = dateTime2.getYearOfEra();
        org.joda.time.Instant instant9 = dateTime2.toInstant();
        org.joda.time.DateTime dateTime10 = instant9.toDateTime();
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.Instant instant13 = instant9.withDurationAdded(readableDuration11, 11768869);
        org.joda.time.Instant instant15 = instant13.plus((long) 11859299);
        org.joda.time.Chronology chronology16 = instant15.getChronology();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and instant9", (dateTime2.compareTo(instant9) == 0) == dateTime2.equals(instant9));
    }

    @Test
    public void test0227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0227");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime2 = dateTime0.withMinuteOfHour(14);
        org.joda.time.DateTime dateTime4 = dateTime0.withCenturyOfEra(50);
        org.joda.time.Instant instant5 = new org.joda.time.Instant();
        org.joda.time.Instant instant7 = instant5.minus((long) 2);
        int int8 = dateTime4.compareTo((org.joda.time.ReadableInstant) instant5);
        org.joda.time.DateTime.Property property9 = dateTime4.centuryOfEra();
        org.joda.time.DateTime dateTime10 = property9.roundCeilingCopy();
        org.joda.time.DateTime dateTime12 = dateTime10.minusYears(7);
        org.joda.time.DateTime dateTime13 = dateTime12.withLaterOffsetAtOverlap();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime0 and instant5", (dateTime0.compareTo(instant5) == 0) == dateTime0.equals(instant5));
    }

    @Test
    public void test0228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0228");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property1 = localDateTime0.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withField(dateTimeFieldType2, (int) (short) 10);
        org.joda.time.LocalDateTime.Property property5 = localDateTime0.minuteOfHour();
        long long6 = property5.remainder();
        org.joda.time.DateTimeField dateTimeField7 = property5.getField();
        java.util.Calendar.Builder builder8 = new java.util.Calendar.Builder();
        java.util.Locale locale9 = java.util.Locale.JAPAN;
        java.util.Calendar.Builder builder10 = builder8.setLocale(locale9);
        int int11 = property5.getMaximumShortTextLength(locale9);
        org.joda.time.LocalDateTime localDateTime12 = property5.roundFloorCopy();
        org.joda.time.Instant instant13 = new org.joda.time.Instant();
        org.joda.time.Instant instant15 = instant13.minus((long) 2);
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.Instant instant17 = instant15.plus(readableDuration16);
        org.joda.time.DateTime dateTime18 = localDateTime12.toDateTime((org.joda.time.ReadableInstant) instant15);
        org.joda.time.DateTime dateTime19 = instant15.toDateTimeISO();
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime22 = dateTime20.minusHours((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int24 = dateTime22.get(dateTimeFieldType23);
        org.joda.time.DateTime dateTime26 = dateTime22.minusMillis((int) '#');
        boolean boolean27 = dateTime22.isBeforeNow();
        int int28 = dateTime22.getYearOfEra();
        org.joda.time.Instant instant29 = dateTime22.toInstant();
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = org.joda.time.DateTimeFieldType.dayOfYear();
        int int32 = dateTime30.get(dateTimeFieldType31);
        java.lang.String str33 = dateTimeFieldType31.getName();
        int int34 = dateTime22.get(dateTimeFieldType31);
        org.joda.time.DateTime.Property property35 = dateTime19.property(dateTimeFieldType31);
        java.lang.String str36 = dateTimeFieldType31.getName();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant13 and dateTime20", (instant13.compareTo(dateTime20) == 0) == instant13.equals(dateTime20));
    }

    @Test
    public void test0229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0229");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime2 = dateTime0.minusHours((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int4 = dateTime2.get(dateTimeFieldType3);
        org.joda.time.DateTime dateTime6 = dateTime2.minusMillis((int) '#');
        org.joda.time.DateTime dateTime8 = dateTime6.plusDays(11);
        org.joda.time.DateTime dateTime11 = dateTime6.withDurationAdded((long) (byte) 10, 11);
        org.joda.time.DateTimeZone dateTimeZone12 = dateTime6.getZone();
        org.joda.time.DateTime dateTime14 = dateTime6.minusDays(22);
        org.joda.time.DateTime dateTime16 = dateTime14.plusMillis(11789419);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate((long) 100, dateTimeZone18);
        org.joda.time.LocalDate localDate21 = localDate19.plusDays(50);
        int int22 = localDate21.getDayOfMonth();
        int int23 = localDate21.getYear();
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime26 = dateTime24.minusHours((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int28 = dateTime26.get(dateTimeFieldType27);
        org.joda.time.DateTime dateTime30 = dateTime26.minusMillis((int) '#');
        org.joda.time.DateTime dateTime32 = dateTime30.plusDays(11);
        org.joda.time.DateTime dateTime35 = dateTime30.withDurationAdded((long) (byte) 10, 11);
        org.joda.time.DateTime dateTime37 = dateTime30.plusDays(26159400);
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate40 = new org.joda.time.LocalDate((long) 100, dateTimeZone39);
        org.joda.time.LocalDate localDate42 = localDate40.plusDays(50);
        org.joda.time.Chronology chronology43 = localDate42.getChronology();
        org.joda.time.DateTimeField dateTimeField44 = chronology43.minuteOfHour();
        org.joda.time.MutableDateTime mutableDateTime45 = dateTime30.toMutableDateTime(chronology43);
        org.joda.time.LocalDate localDate46 = org.joda.time.LocalDate.now(chronology43);
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = org.joda.time.DateTimeFieldType.weekyear();
        int int48 = localDate46.get(dateTimeFieldType47);
        org.joda.time.LocalDate.Property property49 = localDate21.property(dateTimeFieldType47);
        org.joda.time.DateTime.Property property50 = dateTime16.property(dateTimeFieldType47);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime6 and mutableDateTime45", (dateTime6.compareTo(mutableDateTime45) == 0) == dateTime6.equals(mutableDateTime45));
    }

    @Test
    public void test0230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0230");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 100, dateTimeZone1);
        org.joda.time.LocalDate.Property property3 = localDate2.weekyear();
        org.joda.time.LocalDate localDate5 = property3.setCopy(2022);
        org.joda.time.Instant instant6 = new org.joda.time.Instant();
        org.joda.time.Instant instant8 = instant6.withMillis((long) 11);
        org.joda.time.Instant instant9 = instant8.toInstant();
        org.joda.time.Chronology chronology10 = instant8.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) 100, dateTimeZone13);
        int int15 = dateTimeField11.getMaximumValue((org.joda.time.ReadablePartial) localDate14);
        int int17 = localDate14.getValue(2);
        org.joda.time.DateMidnight dateMidnight18 = localDate14.toDateMidnight();
        org.joda.time.LocalDate localDate20 = localDate14.plusMonths(26160535);
        int int21 = localDate20.getYear();
        boolean boolean22 = property3.equals((java.lang.Object) localDate20);
        org.joda.time.DateTime dateTime23 = localDate20.toDateTimeAtStartOfDay();
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.DateTime dateTime26 = dateTime23.withPeriodAdded(readablePeriod24, 11761333);
        org.joda.time.DateTime dateTime28 = dateTime23.minusHours(11735);
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime31 = dateTime29.minusHours((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int33 = dateTime31.get(dateTimeFieldType32);
        org.joda.time.DateTime dateTime35 = dateTime31.minusSeconds((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(59, 50);
        java.util.TimeZone timeZone41 = dateTimeZone40.toTimeZone();
        java.util.TimeZone timeZone42 = dateTimeZone40.toTimeZone();
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime(72000000L, dateTimeZone40);
        int int45 = dateTimeZone40.getStandardOffset((long) 'u');
        java.lang.String str47 = dateTimeZone40.getName(1645142400000L);
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime((long) 11779950, dateTimeZone40);
        org.joda.time.DateTime dateTime49 = dateTime31.withZoneRetainFields(dateTimeZone40);
        boolean boolean50 = dateTime23.equals((java.lang.Object) dateTimeZone40);
        org.joda.time.DateTime.Property property51 = dateTime23.centuryOfEra();
        org.joda.time.format.DateTimePrinter dateTimePrinter52 = null;
        org.joda.time.format.DateTimeParser dateTimeParser53 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter54 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter52, dateTimeParser53);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter56 = dateTimeFormatter54.withPivotYear((java.lang.Integer) (-26151846));
        java.util.Locale locale57 = java.util.Locale.KOREAN;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter58 = dateTimeFormatter56.withLocale(locale57);
        int int59 = property51.getMaximumShortTextLength(locale57);
        java.lang.String str60 = locale57.getDisplayLanguage();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant6 and dateTime29", (instant6.compareTo(dateTime29) == 0) == instant6.equals(dateTime29));
    }

    @Test
    public void test0231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0231");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        int int1 = dateTime0.getDayOfYear();
        org.joda.time.DateTime dateTime3 = dateTime0.withYear(11751002);
        org.joda.time.Instant instant4 = dateTime0.toInstant();
        org.joda.time.DateTime dateTime6 = dateTime0.plusYears(26160835);
        boolean boolean8 = dateTime6.equals((java.lang.Object) 0.0f);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime11 = dateTime9.minusHours((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int13 = dateTime11.get(dateTimeFieldType12);
        org.joda.time.DateTime dateTime15 = dateTime11.minusMillis((int) '#');
        org.joda.time.DateTime dateTime17 = dateTime15.plusDays(11);
        org.joda.time.DateTime dateTime20 = dateTime15.withDurationAdded((long) 11757696, (int) ' ');
        int int21 = dateTime15.getWeekOfWeekyear();
        org.joda.time.DateTime dateTime23 = dateTime15.minusWeeks(215400000);
        boolean boolean24 = dateTime6.isAfter((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime27 = dateTime25.minusHours((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int29 = dateTime27.get(dateTimeFieldType28);
        org.joda.time.DateTime dateTime31 = dateTime27.minusSeconds((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalTime localTime33 = new org.joda.time.LocalTime(dateTimeZone32);
        org.joda.time.LocalTime localTime35 = localTime33.minusHours(0);
        org.joda.time.LocalTime localTime37 = localTime35.plusMillis(8);
        org.joda.time.LocalTime localTime39 = localTime37.plusMinutes(26156834);
        org.joda.time.LocalTime localTime41 = localTime37.withMillisOfDay(11764152);
        org.joda.time.DateTime dateTime42 = dateTime31.withFields((org.joda.time.ReadablePartial) localTime37);
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalTime localTime44 = new org.joda.time.LocalTime(dateTimeZone43);
        org.joda.time.LocalTime localTime46 = localTime44.minusHours(0);
        org.joda.time.LocalTime localTime48 = localTime46.plusMillis(8);
        org.joda.time.LocalTime localTime50 = localTime48.plusMinutes(26156834);
        int int51 = localTime50.getMillisOfSecond();
        java.util.TimeZone timeZone52 = java.util.TimeZone.getDefault();
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.forTimeZone(timeZone52);
        org.joda.time.DateTime dateTime54 = localTime50.toDateTimeToday(dateTimeZone53);
        org.joda.time.DateTime dateTime55 = dateTime42.withZoneRetainFields(dateTimeZone53);
        org.joda.time.DateTime dateTime56 = dateTime15.withZoneRetainFields(dateTimeZone53);
        org.joda.time.DateTime dateTime58 = new org.joda.time.DateTime();
        int int59 = dateTime58.getDayOfYear();
        org.joda.time.DateTime dateTime61 = dateTime58.withYear(11751002);
        org.joda.time.Instant instant62 = dateTime58.toInstant();
        org.joda.time.DateTime dateTime64 = dateTime58.plusYears(26160835);
        boolean boolean66 = dateTime64.equals((java.lang.Object) 0.0f);
        org.joda.time.DateTime dateTime67 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime69 = dateTime67.minusHours((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType70 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int71 = dateTime69.get(dateTimeFieldType70);
        org.joda.time.DateTime dateTime73 = dateTime69.minusMillis((int) '#');
        org.joda.time.DateTime dateTime75 = dateTime73.plusDays(11);
        org.joda.time.DateTime dateTime78 = dateTime73.withDurationAdded((long) 11757696, (int) ' ');
        int int79 = dateTime73.getWeekOfWeekyear();
        org.joda.time.DateTime dateTime81 = dateTime73.minusWeeks(215400000);
        boolean boolean82 = dateTime64.isAfter((org.joda.time.ReadableInstant) dateTime73);
        org.joda.time.LocalDateTime localDateTime84 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property85 = localDateTime84.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime87 = property85.addWrapFieldToCopy(11756302);
        org.joda.time.LocalDateTime.Property property88 = localDateTime87.secondOfMinute();
        java.util.Locale locale89 = java.util.Locale.TAIWAN;
        java.util.Calendar calendar90 = java.util.Calendar.getInstance(locale89);
        boolean boolean91 = locale89.hasExtensions();
        java.lang.String str92 = property88.getAsShortText(locale89);
        java.util.Locale locale93 = java.util.Locale.JAPAN;
        java.util.Set<java.lang.String> strSet94 = locale93.getUnicodeLocaleAttributes();
        java.util.Locale.setDefault(locale93);
        java.lang.String str96 = locale93.toLanguageTag();
        java.lang.String str97 = locale89.getDisplayCountry(locale93);
        java.lang.String str98 = dateTime64.toString("663", locale89);
        java.lang.String str99 = dateTimeZone53.getName(0L, locale89);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime0 and instant4", (dateTime0.compareTo(instant4) == 0) == dateTime0.equals(instant4));
    }

    @Test
    public void test0232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0232");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 100, dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.plusDays(50);
        org.joda.time.Chronology chronology5 = localDate4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 100, dateTimeZone8);
        org.joda.time.LocalDate localDate11 = localDate9.plusDays(50);
        int int12 = localDate9.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate14 = localDate9.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        int int17 = dateTimeZone15.getOffset((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateMidnight dateMidnight18 = localDate9.toDateMidnight(dateTimeZone15);
        long long20 = dateTimeZone15.convertUTCToLocal(60000L);
        org.joda.time.chrono.ZonedChronology zonedChronology21 = org.joda.time.chrono.ZonedChronology.getInstance(chronology5, dateTimeZone15);
        org.joda.time.DurationField durationField22 = zonedChronology21.weeks();
        org.joda.time.DateTimeField dateTimeField23 = zonedChronology21.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField24 = zonedChronology21.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField25 = zonedChronology21.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField26 = zonedChronology21.halfdayOfDay();
        org.joda.time.DurationField durationField27 = zonedChronology21.halfdays();
        org.joda.time.DateTimeField dateTimeField28 = zonedChronology21.minuteOfHour();
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime31 = dateTime29.minusHours((int) (short) 100);
        org.joda.time.DateTime dateTime33 = dateTime31.minus(0L);
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate36 = new org.joda.time.LocalDate((long) 100, dateTimeZone35);
        org.joda.time.DateTime dateTime37 = dateTime33.withZone(dateTimeZone35);
        org.joda.time.LocalDate localDate38 = dateTime33.toLocalDate();
        org.joda.time.LocalDate localDate40 = localDate38.plusMonths(49);
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate43 = new org.joda.time.LocalDate((long) 100, dateTimeZone42);
        org.joda.time.LocalDate localDate45 = localDate43.plusDays(50);
        org.joda.time.LocalDate.Property property46 = localDate45.monthOfYear();
        org.joda.time.LocalDate.Property property47 = localDate45.year();
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate50 = new org.joda.time.LocalDate((long) 100, dateTimeZone49);
        org.joda.time.LocalDate localDate52 = localDate50.plusDays(50);
        org.joda.time.Chronology chronology53 = localDate52.getChronology();
        org.joda.time.DateTimeField dateTimeField54 = chronology53.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate57 = new org.joda.time.LocalDate((long) 100, dateTimeZone56);
        org.joda.time.LocalDate localDate59 = localDate57.plusDays(50);
        int int60 = localDate57.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate62 = localDate57.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone63 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime64 = new org.joda.time.DateTime();
        int int65 = dateTimeZone63.getOffset((org.joda.time.ReadableInstant) dateTime64);
        org.joda.time.DateMidnight dateMidnight66 = localDate57.toDateMidnight(dateTimeZone63);
        long long68 = dateTimeZone63.convertUTCToLocal(60000L);
        org.joda.time.chrono.ZonedChronology zonedChronology69 = org.joda.time.chrono.ZonedChronology.getInstance(chronology53, dateTimeZone63);
        org.joda.time.DateTime dateTime70 = localDate45.toDateTimeAtStartOfDay(dateTimeZone63);
        java.lang.String str72 = dateTimeZone63.getName((-3155695200000L));
        org.joda.time.LocalDate localDate73 = new org.joda.time.LocalDate(dateTimeZone63);
        org.joda.time.Interval interval74 = localDate40.toInterval(dateTimeZone63);
        org.joda.time.LocalDate localDate76 = localDate40.plusMonths(11842946);
        long long78 = zonedChronology21.set((org.joda.time.ReadablePartial) localDate76, (long) 11801884);
        org.joda.time.DurationField durationField79 = zonedChronology21.seconds();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime31 and dateTime37", (dateTime31.compareTo(dateTime37) == 0) == dateTime31.equals(dateTime37));
    }

    @Test
    public void test0233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0233");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        int int1 = dateTime0.getDayOfYear();
        int int2 = dateTime0.getWeekyear();
        org.joda.time.DateTime dateTime3 = dateTime0.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) 100, dateTimeZone5);
        org.joda.time.LocalDate localDate8 = localDate6.minusYears(53);
        org.joda.time.DateMidnight dateMidnight9 = localDate6.toDateMidnight();
        int int10 = localDate6.getWeekOfWeekyear();
        java.util.Calendar.Builder builder11 = new java.util.Calendar.Builder();
        java.util.Locale locale12 = java.util.Locale.JAPAN;
        java.util.Calendar.Builder builder13 = builder11.setLocale(locale12);
        java.util.Calendar.Builder builder14 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder18 = builder14.setWeekDate((int) (short) 0, (int) '4', (int) '4');
        java.util.Calendar.Builder builder20 = builder18.setLenient(false);
        java.util.TimeZone timeZone22 = java.util.TimeZone.getTimeZone("");
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(59, 50);
        java.util.TimeZone timeZone26 = dateTimeZone25.toTimeZone();
        java.util.TimeZone timeZone27 = dateTimeZone25.toTimeZone();
        boolean boolean28 = timeZone22.hasSameRules(timeZone27);
        java.util.Calendar.Builder builder29 = builder18.setTimeZone(timeZone27);
        java.util.Calendar.Builder builder30 = builder11.setTimeZone(timeZone27);
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forTimeZone(timeZone27);
        org.joda.time.DateTime dateTime32 = localDate6.toDateTimeAtStartOfDay(dateTimeZone31);
        java.util.TimeZone timeZone33 = dateTimeZone31.toTimeZone();
        long long36 = dateTimeZone31.adjustOffset(1645514214684L, false);
        org.joda.time.DateTime dateTime37 = org.joda.time.DateTime.now(dateTimeZone31);
        org.joda.time.DateTime dateTime38 = dateTime0.toDateTime(dateTimeZone31);
        org.joda.time.DateTime.Property property39 = dateTime38.yearOfCentury();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime0 and dateTime37", (dateTime0.compareTo(dateTime37) == 0) == dateTime0.equals(dateTime37));
    }

    @Test
    public void test0234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0234");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime2 = dateTime0.minusHours((int) (short) 100);
        org.joda.time.DateTime dateTime4 = dateTime2.minus(0L);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) 100, dateTimeZone6);
        org.joda.time.DateTime dateTime8 = dateTime4.withZone(dateTimeZone6);
        long long11 = dateTimeZone6.convertLocalToUTC((long) 34, false);
        long long13 = dateTimeZone6.previousTransition((long) 11907532);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and dateTime8", (dateTime2.compareTo(dateTime8) == 0) == dateTime2.equals(dateTime8));
    }

    @Test
    public void test0235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0235");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.Instant instant1 = dateTime0.toInstant();
        org.joda.time.Chronology chronology2 = dateTime0.getChronology();
        org.joda.time.DateTime dateTime4 = dateTime0.plusDays(2);
        java.util.Date date5 = dateTime0.toDate();
        java.lang.String str7 = dateTime0.toString("15");
        java.util.GregorianCalendar gregorianCalendar8 = dateTime0.toGregorianCalendar();
        gregorianCalendar8.setFirstDayOfWeek(11760949);
        java.util.Date date11 = gregorianCalendar8.getTime();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime0 and instant1", (dateTime0.compareTo(instant1) == 0) == dateTime0.equals(instant1));
    }

    @Test
    public void test0236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0236");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        int int1 = dateTime0.getDayOfYear();
        org.joda.time.DateTime dateTime3 = dateTime0.withYear(11751002);
        org.joda.time.Instant instant4 = dateTime0.toInstant();
        org.joda.time.DateTime.Property property5 = dateTime0.monthOfYear();
        org.joda.time.DateTime dateTime6 = property5.withMaximumValue();
        int int7 = property5.get();
        org.joda.time.DateTime dateTime8 = property5.getDateTime();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime8 and instant4", (dateTime8.compareTo(instant4) == 0) == dateTime8.equals(instant4));
    }

    @Test
    public void test0237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0237");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 10);
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime();
        org.joda.time.Instant instant3 = dateTime2.toInstant();
        org.joda.time.Chronology chronology4 = dateTime2.getChronology();
        long long5 = dateTime2.getMillis();
        boolean boolean6 = dateTime1.isEqual((org.joda.time.ReadableInstant) dateTime2);
        org.joda.time.DateTime dateTime7 = dateTime2.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime9 = dateTime2.minusMonths(11833538);
        org.joda.time.DateTime.Property property10 = dateTime2.millisOfDay();
        org.joda.time.DateTime dateTime11 = property10.getDateTime();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime11 and instant3", (dateTime11.compareTo(instant3) == 0) == dateTime11.equals(instant3));
    }

    @Test
    public void test0238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0238");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.Instant instant2 = instant0.minus((long) 2);
        org.joda.time.MutableDateTime mutableDateTime3 = instant0.toMutableDateTimeISO();
        java.util.TimeZone timeZone4 = java.util.TimeZone.getDefault();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone4);
        org.joda.time.DateTime dateTime6 = instant0.toDateTime(dateTimeZone5);
        org.joda.time.MutableDateTime mutableDateTime7 = instant0.toMutableDateTime();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime3 and dateTime6", (mutableDateTime3.compareTo(dateTime6) == 0) == mutableDateTime3.equals(dateTime6));
    }

    @Test
    public void test0239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0239");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.Instant instant2 = instant0.withMillis((long) 11);
        org.joda.time.Instant instant3 = instant2.toInstant();
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Instant instant5 = instant2.minus(readableDuration4);
        org.joda.time.MutableDateTime mutableDateTime6 = instant2.toMutableDateTime();
        org.joda.time.Chronology chronology7 = instant2.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.dayOfMonth();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant2 and mutableDateTime6", (instant2.compareTo(mutableDateTime6) == 0) == instant2.equals(mutableDateTime6));
    }

    @Test
    public void test0240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0240");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(dateTimeZone0);
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalTime localTime4 = new org.joda.time.LocalTime(dateTimeZone3);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalTime localTime6 = new org.joda.time.LocalTime(dateTimeZone5);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = localTime6.getFieldType((int) (byte) 1);
        int int9 = localTime4.get(dateTimeFieldType8);
        org.joda.time.LocalTime.Property property10 = localTime2.property(dateTimeFieldType8);
        org.joda.time.LocalTime localTime11 = property10.roundHalfFloorCopy();
        org.joda.time.LocalTime localTime12 = property10.getLocalTime();
        java.lang.String str13 = property10.toString();
        java.lang.String str14 = property10.getAsShortText();
        int int15 = property10.getMinimumValue();
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime();
        org.joda.time.Instant instant18 = dateTime17.toInstant();
        org.joda.time.Chronology chronology19 = dateTime17.getChronology();
        boolean boolean20 = dateTime16.isEqual((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalTime localTime22 = new org.joda.time.LocalTime(dateTimeZone21);
        org.joda.time.LocalTime localTime23 = new org.joda.time.LocalTime(dateTimeZone21);
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalTime localTime25 = new org.joda.time.LocalTime(dateTimeZone24);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalTime localTime27 = new org.joda.time.LocalTime(dateTimeZone26);
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = localTime27.getFieldType((int) (byte) 1);
        int int30 = localTime25.get(dateTimeFieldType29);
        org.joda.time.LocalTime.Property property31 = localTime23.property(dateTimeFieldType29);
        org.joda.time.LocalTime localTime32 = property31.roundHalfFloorCopy();
        org.joda.time.LocalTime localTime33 = property31.getLocalTime();
        org.joda.time.LocalTime localTime34 = property31.roundFloorCopy();
        org.joda.time.LocalTime localTime36 = property31.addWrapFieldToCopy(26159400);
        org.joda.time.DateTimeField dateTimeField37 = property31.getField();
        org.joda.time.LocalTime localTime38 = property31.roundCeilingCopy();
        org.joda.time.LocalTime localTime40 = localTime38.minusHours(11753441);
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.UTC;
        int int43 = dateTimeZone41.getStandardOffset((long) (byte) 1);
        org.joda.time.DateTime dateTime44 = localTime40.toDateTimeToday(dateTimeZone41);
        org.joda.time.DateTime dateTime45 = dateTime16.withZone(dateTimeZone41);
        boolean boolean46 = property10.equals((java.lang.Object) dateTime45);
        org.joda.time.ReadableDuration readableDuration47 = null;
        org.joda.time.DateTime dateTime48 = dateTime45.plus(readableDuration47);
        org.joda.time.DateTime dateTime50 = dateTime45.plusWeeks(215400000);
        int int51 = dateTime45.getMonthOfYear();
        org.joda.time.DateTime.Property property52 = dateTime45.dayOfYear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime16 and instant18", (dateTime16.compareTo(instant18) == 0) == dateTime16.equals(instant18));
    }

    @Test
    public void test0241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0241");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        int int1 = dateTime0.getDayOfYear();
        int int2 = dateTime0.getWeekyear();
        org.joda.time.DateTime dateTime3 = dateTime0.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) 100, dateTimeZone5);
        org.joda.time.LocalDate localDate8 = localDate6.minusYears(53);
        org.joda.time.DateMidnight dateMidnight9 = localDate6.toDateMidnight();
        int int10 = localDate6.getWeekOfWeekyear();
        java.util.Calendar.Builder builder11 = new java.util.Calendar.Builder();
        java.util.Locale locale12 = java.util.Locale.JAPAN;
        java.util.Calendar.Builder builder13 = builder11.setLocale(locale12);
        java.util.Calendar.Builder builder14 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder18 = builder14.setWeekDate((int) (short) 0, (int) '4', (int) '4');
        java.util.Calendar.Builder builder20 = builder18.setLenient(false);
        java.util.TimeZone timeZone22 = java.util.TimeZone.getTimeZone("");
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(59, 50);
        java.util.TimeZone timeZone26 = dateTimeZone25.toTimeZone();
        java.util.TimeZone timeZone27 = dateTimeZone25.toTimeZone();
        boolean boolean28 = timeZone22.hasSameRules(timeZone27);
        java.util.Calendar.Builder builder29 = builder18.setTimeZone(timeZone27);
        java.util.Calendar.Builder builder30 = builder11.setTimeZone(timeZone27);
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forTimeZone(timeZone27);
        org.joda.time.DateTime dateTime32 = localDate6.toDateTimeAtStartOfDay(dateTimeZone31);
        java.util.TimeZone timeZone33 = dateTimeZone31.toTimeZone();
        long long36 = dateTimeZone31.adjustOffset(1645514214684L, false);
        org.joda.time.DateTime dateTime37 = org.joda.time.DateTime.now(dateTimeZone31);
        org.joda.time.DateTime dateTime38 = dateTime0.toDateTime(dateTimeZone31);
        org.joda.time.DateTime.Property property39 = dateTime38.minuteOfDay();
        org.joda.time.DateTime dateTime40 = property39.withMinimumValue();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime0 and dateTime38", (dateTime0.compareTo(dateTime38) == 0) == dateTime0.equals(dateTime38));
    }

    @Test
    public void test0242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0242");
        org.joda.time.Instant instant1 = new org.joda.time.Instant();
        org.joda.time.Instant instant3 = instant1.withMillis((long) 11);
        org.joda.time.Instant instant4 = instant3.toInstant();
        org.joda.time.Chronology chronology5 = instant3.getChronology();
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((long) '#', chronology5);
        org.joda.time.Chronology chronology7 = localDateTime6.getChronology();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.withWeekyear(117);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate((long) 100, dateTimeZone11);
        org.joda.time.LocalDate localDate14 = localDate12.plusDays(50);
        org.joda.time.Chronology chronology15 = localDate14.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate((long) 100, dateTimeZone18);
        org.joda.time.LocalDate localDate21 = localDate19.plusDays(50);
        int int22 = localDate19.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate24 = localDate19.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime();
        int int27 = dateTimeZone25.getOffset((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.DateMidnight dateMidnight28 = localDate19.toDateMidnight(dateTimeZone25);
        long long30 = dateTimeZone25.convertUTCToLocal(60000L);
        org.joda.time.chrono.ZonedChronology zonedChronology31 = org.joda.time.chrono.ZonedChronology.getInstance(chronology15, dateTimeZone25);
        org.joda.time.DurationField durationField32 = zonedChronology31.weeks();
        org.joda.time.DateTimeField dateTimeField33 = zonedChronology31.weekyear();
        org.joda.time.DurationField durationField34 = zonedChronology31.weekyears();
        long long38 = zonedChronology31.add(0L, 11776486L, 0);
        org.joda.time.DurationField durationField39 = zonedChronology31.halfdays();
        org.joda.time.DateTimeField dateTimeField40 = zonedChronology31.clockhourOfDay();
        java.lang.String str41 = zonedChronology31.toString();
        org.joda.time.DateTimeField dateTimeField42 = zonedChronology31.dayOfMonth();
        org.joda.time.LocalDate localDate43 = new org.joda.time.LocalDate((java.lang.Object) localDateTime9, (org.joda.time.Chronology) zonedChronology31);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and dateTime26", (instant1.compareTo(dateTime26) == 0) == instant1.equals(dateTime26));
    }

    @Test
    public void test0243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0243");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.Instant instant2 = instant0.plus((long) 11753187);
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.Instant instant4 = instant2.plus(readableDuration3);
        org.joda.time.Instant instant5 = new org.joda.time.Instant();
        org.joda.time.Instant instant7 = instant5.withMillis((long) 11);
        org.joda.time.Instant instant8 = instant7.toInstant();
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.Instant instant10 = instant7.minus(readableDuration9);
        org.joda.time.Instant instant11 = instant7.toInstant();
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.Instant instant13 = instant7.plus(readableDuration12);
        org.joda.time.Instant instant14 = new org.joda.time.Instant();
        org.joda.time.Instant instant16 = instant14.withMillis((long) 11);
        org.joda.time.Instant instant17 = instant16.toInstant();
        org.joda.time.Chronology chronology18 = instant16.getChronology();
        org.joda.time.MutableDateTime mutableDateTime19 = instant16.toMutableDateTimeISO();
        boolean boolean20 = instant7.isAfter((org.joda.time.ReadableInstant) instant16);
        int int21 = instant2.compareTo((org.joda.time.ReadableInstant) instant16);
        org.joda.time.MutableDateTime mutableDateTime22 = instant2.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate((long) 100, dateTimeZone24);
        org.joda.time.LocalDate localDate27 = localDate25.plusDays(50);
        org.joda.time.Chronology chronology28 = localDate27.getChronology();
        org.joda.time.DateTimeField dateTimeField29 = chronology28.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate((long) 100, dateTimeZone31);
        org.joda.time.LocalDate localDate34 = localDate32.plusDays(50);
        int int35 = localDate32.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate37 = localDate32.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime();
        int int40 = dateTimeZone38.getOffset((org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.DateMidnight dateMidnight41 = localDate32.toDateMidnight(dateTimeZone38);
        long long43 = dateTimeZone38.convertUTCToLocal(60000L);
        org.joda.time.chrono.ZonedChronology zonedChronology44 = org.joda.time.chrono.ZonedChronology.getInstance(chronology28, dateTimeZone38);
        org.joda.time.DurationField durationField45 = zonedChronology44.weeks();
        org.joda.time.DateTimeField dateTimeField46 = zonedChronology44.year();
        org.joda.time.DateTimeZone dateTimeZone47 = zonedChronology44.getZone();
        org.joda.time.DateTimeField dateTimeField48 = zonedChronology44.weekyear();
        org.joda.time.ReadablePeriod readablePeriod49 = null;
        long long52 = zonedChronology44.add(readablePeriod49, (long) 11783576, 26163273);
        org.joda.time.DateTimeField dateTimeField53 = zonedChronology44.weekyear();
        org.joda.time.DateTimeField dateTimeField54 = zonedChronology44.millisOfSecond();
        boolean boolean55 = instant2.equals((java.lang.Object) dateTimeField54);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and dateTime39", (instant0.compareTo(dateTime39) == 0) == instant0.equals(dateTime39));
    }

    @Test
    public void test0244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0244");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.Instant instant1 = dateTime0.toInstant();
        org.joda.time.Chronology chronology2 = dateTime0.getChronology();
        org.joda.time.DateTime.Property property3 = dateTime0.minuteOfDay();
        org.joda.time.DateTime dateTime4 = property3.getDateTime();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and instant1", (dateTime4.compareTo(instant1) == 0) == dateTime4.equals(instant1));
    }

    @Test
    public void test0245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0245");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime2 = dateTime0.minusHours((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int4 = dateTime2.get(dateTimeFieldType3);
        org.joda.time.DateTime dateTime6 = dateTime2.minusMillis((int) '#');
        org.joda.time.DateTime dateTime8 = dateTime6.plusDays(11);
        org.joda.time.Instant instant9 = new org.joda.time.Instant();
        org.joda.time.Instant instant11 = instant9.minus((long) 2);
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.Instant instant13 = instant11.plus(readableDuration12);
        long long14 = instant11.getMillis();
        org.joda.time.Chronology chronology15 = instant11.getChronology();
        org.joda.time.Instant instant18 = instant11.withDurationAdded((long) 20, 11871230);
        int int19 = dateTime6.compareTo((org.joda.time.ReadableInstant) instant11);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate((long) 100, dateTimeZone21);
        org.joda.time.LocalDate.Property property23 = localDate22.weekyear();
        org.joda.time.LocalDate localDate25 = localDate22.plusDays(51);
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.LocalDate localDate27 = localDate22.minus(readablePeriod26);
        org.joda.time.LocalDate.Property property28 = localDate22.yearOfEra();
        org.joda.time.LocalDate localDate30 = property28.setCopy(47);
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = org.joda.time.DateTimeFieldType.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate34 = new org.joda.time.LocalDate((long) 100, dateTimeZone33);
        org.joda.time.LocalDate localDate36 = localDate34.plusDays(50);
        org.joda.time.Chronology chronology37 = localDate36.getChronology();
        org.joda.time.DateTimeField dateTimeField38 = chronology37.millisOfDay();
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime(chronology37);
        org.joda.time.DateTimeField dateTimeField40 = dateTimeFieldType31.getField(chronology37);
        boolean boolean41 = localDate30.isSupported(dateTimeFieldType31);
        boolean boolean42 = dateTime6.isSupported(dateTimeFieldType31);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime0 and instant9", (dateTime0.compareTo(instant9) == 0) == dateTime0.equals(instant9));
    }

    @Test
    public void test0246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0246");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime2 = dateTime0.minusHours((int) (short) 100);
        org.joda.time.DateTime dateTime4 = dateTime2.minus(0L);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) 100, dateTimeZone6);
        org.joda.time.DateTime dateTime8 = dateTime4.withZone(dateTimeZone6);
        org.joda.time.LocalDate localDate9 = dateTime4.toLocalDate();
        org.joda.time.LocalDate localDate11 = localDate9.plusMonths(49);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) 100, dateTimeZone13);
        org.joda.time.LocalDate localDate16 = localDate14.plusDays(50);
        org.joda.time.LocalDate.Property property17 = localDate16.monthOfYear();
        org.joda.time.LocalDate.Property property18 = localDate16.year();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate((long) 100, dateTimeZone20);
        org.joda.time.LocalDate localDate23 = localDate21.plusDays(50);
        org.joda.time.Chronology chronology24 = localDate23.getChronology();
        org.joda.time.DateTimeField dateTimeField25 = chronology24.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate((long) 100, dateTimeZone27);
        org.joda.time.LocalDate localDate30 = localDate28.plusDays(50);
        int int31 = localDate28.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate33 = localDate28.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime();
        int int36 = dateTimeZone34.getOffset((org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.DateMidnight dateMidnight37 = localDate28.toDateMidnight(dateTimeZone34);
        long long39 = dateTimeZone34.convertUTCToLocal(60000L);
        org.joda.time.chrono.ZonedChronology zonedChronology40 = org.joda.time.chrono.ZonedChronology.getInstance(chronology24, dateTimeZone34);
        org.joda.time.DateTime dateTime41 = localDate16.toDateTimeAtStartOfDay(dateTimeZone34);
        java.lang.String str43 = dateTimeZone34.getName((-3155695200000L));
        org.joda.time.LocalDate localDate44 = new org.joda.time.LocalDate(dateTimeZone34);
        org.joda.time.Interval interval45 = localDate11.toInterval(dateTimeZone34);
        org.joda.time.LocalDateTime localDateTime46 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property47 = localDateTime46.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.LocalDateTime localDateTime50 = localDateTime46.withField(dateTimeFieldType48, (int) (short) 10);
        org.joda.time.LocalDateTime localDateTime52 = localDateTime46.minusYears(5);
        org.joda.time.LocalDateTime localDateTime54 = localDateTime52.withCenturyOfEra(100);
        org.joda.time.LocalDateTime localDateTime55 = new org.joda.time.LocalDateTime();
        int int56 = localDateTime55.getSecondOfMinute();
        boolean boolean57 = localDateTime52.isAfter((org.joda.time.ReadablePartial) localDateTime55);
        org.joda.time.LocalDateTime localDateTime58 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property59 = localDateTime58.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType60 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.LocalDateTime localDateTime62 = localDateTime58.withField(dateTimeFieldType60, (int) (short) 10);
        org.joda.time.LocalDateTime localDateTime64 = localDateTime58.minusYears(5);
        java.lang.String str65 = localDateTime64.toString();
        org.joda.time.LocalDateTime localDateTime66 = localDateTime52.withFields((org.joda.time.ReadablePartial) localDateTime64);
        org.joda.time.LocalDateTime localDateTime68 = localDateTime52.plusSeconds(2022);
        int int69 = localDateTime68.getCenturyOfEra();
        org.joda.time.LocalDateTime localDateTime71 = localDateTime68.plusSeconds(26165440);
        boolean boolean72 = dateTimeZone34.equals((java.lang.Object) localDateTime71);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and dateTime8", (dateTime2.compareTo(dateTime8) == 0) == dateTime2.equals(dateTime8));
    }

    @Test
    public void test0247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0247");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime2 = dateTime0.minusHours((int) (short) 100);
        org.joda.time.DateTime dateTime4 = dateTime0.withHourOfDay(10);
        java.util.GregorianCalendar gregorianCalendar5 = dateTime0.toGregorianCalendar();
        org.joda.time.Instant instant7 = new org.joda.time.Instant();
        org.joda.time.Instant instant9 = instant7.withMillis((long) 11);
        org.joda.time.Instant instant10 = instant9.toInstant();
        org.joda.time.Chronology chronology11 = instant9.getChronology();
        org.joda.time.DateTimeField dateTimeField12 = chronology11.clockhourOfHalfday();
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((long) 11760560, chronology11);
        org.joda.time.DateTime dateTime14 = dateTime0.withChronology(chronology11);
        org.joda.time.DateTimeZone dateTimeZone15 = dateTime14.getZone();
        long long17 = dateTimeZone15.nextTransition((long) 26324891);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime0 and instant7", (dateTime0.compareTo(instant7) == 0) == dateTime0.equals(instant7));
    }

    @Test
    public void test0248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0248");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) 58);
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime();
        int int3 = dateTime2.getDayOfYear();
        org.joda.time.DateTime dateTime5 = dateTime2.withYear(11751002);
        org.joda.time.Instant instant6 = dateTime2.toInstant();
        org.joda.time.DateTime dateTime8 = dateTime2.plusYears(26160835);
        boolean boolean10 = dateTime8.equals((java.lang.Object) 0.0f);
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime13 = dateTime11.minusHours((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int15 = dateTime13.get(dateTimeFieldType14);
        org.joda.time.DateTime dateTime17 = dateTime13.minusMillis((int) '#');
        org.joda.time.DateTime dateTime19 = dateTime17.plusDays(11);
        org.joda.time.DateTime dateTime22 = dateTime17.withDurationAdded((long) 11757696, (int) ' ');
        int int23 = dateTime17.getWeekOfWeekyear();
        org.joda.time.DateTime dateTime25 = dateTime17.minusWeeks(215400000);
        boolean boolean26 = dateTime8.isAfter((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.centuryOfEra();
        int int28 = dateTime8.get(dateTimeFieldType27);
        int int29 = dateTime1.get(dateTimeFieldType27);
        org.joda.time.DateTime dateTime31 = dateTime1.minusYears(11854316);
        org.joda.time.Instant instant32 = new org.joda.time.Instant();
        org.joda.time.Instant instant34 = instant32.withMillis((long) 11);
        org.joda.time.Instant instant35 = instant34.toInstant();
        org.joda.time.Instant instant37 = instant35.plus((long) 589);
        org.joda.time.Instant instant39 = instant35.plus(11781L);
        org.joda.time.ReadableDuration readableDuration40 = null;
        org.joda.time.Instant instant42 = instant35.withDurationAdded(readableDuration40, (int) 'x');
        org.joda.time.Instant instant44 = instant35.plus(0L);
        boolean boolean45 = dateTime1.isBefore((org.joda.time.ReadableInstant) instant44);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and instant6", (dateTime2.compareTo(instant6) == 0) == dateTime2.equals(instant6));
    }

    @Test
    public void test0249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0249");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime2 = dateTime0.withMinuteOfHour(14);
        org.joda.time.DateTime dateTime4 = dateTime0.withCenturyOfEra(50);
        org.joda.time.DateTime dateTime5 = dateTime4.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate((long) 100, dateTimeZone7);
        org.joda.time.LocalDate localDate10 = localDate8.plusDays(50);
        org.joda.time.Chronology chronology11 = localDate10.getChronology();
        org.joda.time.DateTimeField dateTimeField12 = chronology11.millisOfDay();
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate(chronology11);
        org.joda.time.DateTimeField dateTimeField14 = chronology11.minuteOfHour();
        org.joda.time.DateTime dateTime15 = org.joda.time.DateTime.now(chronology11);
        org.joda.time.DateTime dateTime16 = org.joda.time.DateTime.now(chronology11);
        boolean boolean17 = dateTime4.isBefore((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateTime dateTime19 = dateTime4.minusMillis(11849234);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime0 and dateTime15", (dateTime0.compareTo(dateTime15) == 0) == dateTime0.equals(dateTime15));
    }

    @Test
    public void test0250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0250");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.Instant instant2 = instant0.withMillis((long) 11);
        org.joda.time.Instant instant3 = instant2.toInstant();
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Instant instant5 = instant2.minus(readableDuration4);
        org.joda.time.Instant instant6 = instant2.toInstant();
        org.joda.time.MutableDateTime mutableDateTime7 = instant6.toMutableDateTime();
        java.util.GregorianCalendar gregorianCalendar8 = mutableDateTime7.toGregorianCalendar();
        org.joda.time.LocalDate localDate9 = org.joda.time.LocalDate.fromCalendarFields((java.util.Calendar) gregorianCalendar8);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant2 and mutableDateTime7", (instant2.compareTo(mutableDateTime7) == 0) == instant2.equals(mutableDateTime7));
    }

    @Test
    public void test0251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0251");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.Instant instant1 = dateTime0.toInstant();
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime();
        int int4 = dateTimeZone2.getOffset((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((java.lang.Object) instant1, dateTimeZone2);
        long long7 = dateTimeZone2.nextTransition((long) 11860797);
        org.joda.time.LocalDateTime localDateTime8 = org.joda.time.LocalDateTime.now(dateTimeZone2);
        int int10 = dateTimeZone2.getOffset(139471960885078L);
        org.joda.time.LocalDate localDate11 = org.joda.time.LocalDate.now(dateTimeZone2);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime0 and instant1", (dateTime0.compareTo(instant1) == 0) == dateTime0.equals(instant1));
    }

    @Test
    public void test0252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0252");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime2 = dateTime0.minusHours((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int4 = dateTime2.get(dateTimeFieldType3);
        org.joda.time.DateTime dateTime6 = dateTime2.minusMillis((int) '#');
        boolean boolean7 = dateTime2.isBeforeNow();
        org.joda.time.DateTime dateTime9 = dateTime2.plusMillis((int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate((long) 100, dateTimeZone11);
        org.joda.time.LocalDate localDate14 = localDate12.plusDays(50);
        org.joda.time.Chronology chronology15 = localDate14.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate((long) 100, dateTimeZone18);
        org.joda.time.LocalDate localDate21 = localDate19.plusDays(50);
        int int22 = localDate19.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate24 = localDate19.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime();
        int int27 = dateTimeZone25.getOffset((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.DateMidnight dateMidnight28 = localDate19.toDateMidnight(dateTimeZone25);
        long long30 = dateTimeZone25.convertUTCToLocal(60000L);
        org.joda.time.chrono.ZonedChronology zonedChronology31 = org.joda.time.chrono.ZonedChronology.getInstance(chronology15, dateTimeZone25);
        org.joda.time.DateTimeField dateTimeField32 = zonedChronology31.yearOfCentury();
        org.joda.time.DurationField durationField33 = zonedChronology31.millis();
        org.joda.time.DurationField durationField34 = zonedChronology31.seconds();
        org.joda.time.DateTimeField dateTimeField35 = zonedChronology31.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField36 = zonedChronology31.hourOfDay();
        org.joda.time.DateTimeField dateTimeField37 = zonedChronology31.year();
        org.joda.time.DateTime dateTime38 = dateTime2.withChronology((org.joda.time.Chronology) zonedChronology31);
        org.joda.time.DateTimeField dateTimeField39 = zonedChronology31.hourOfHalfday();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and dateTime38", (dateTime2.compareTo(dateTime38) == 0) == dateTime2.equals(dateTime38));
    }

    @Test
    public void test0253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0253");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime2 = dateTime0.minusHours((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int4 = dateTime2.get(dateTimeFieldType3);
        org.joda.time.DateTime dateTime6 = dateTime2.minusMillis((int) '#');
        org.joda.time.DateTime dateTime8 = dateTime6.plusDays(11);
        org.joda.time.DateTime dateTime11 = dateTime6.withDurationAdded((long) (byte) 10, 11);
        org.joda.time.DateTime dateTime13 = dateTime6.plusDays(26159400);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime(dateTimeZone14);
        int int17 = dateTimeZone14.getStandardOffset((long) 49);
        int int19 = dateTimeZone14.getOffset((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime20 = dateTime6.toMutableDateTime(dateTimeZone14);
        java.lang.String str22 = dateTimeZone14.getShortName(0L);
        java.util.Locale.Builder builder23 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder24 = builder23.clear();
        java.util.Locale.Builder builder25 = builder24.clearExtensions();
        java.util.Locale locale26 = builder24.build();
        java.util.Locale.Builder builder27 = builder24.clear();
        java.util.Locale locale28 = java.util.Locale.TAIWAN;
        java.lang.String str29 = locale28.toLanguageTag();
        java.lang.String str30 = locale28.toLanguageTag();
        java.util.Locale.Builder builder31 = builder27.setLocale(locale28);
        boolean boolean32 = dateTimeZone14.equals((java.lang.Object) builder27);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime6 and mutableDateTime20", (dateTime6.compareTo(mutableDateTime20) == 0) == dateTime6.equals(mutableDateTime20));
    }

    @Test
    public void test0254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0254");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        int int1 = dateTime0.getDayOfYear();
        org.joda.time.DateTime dateTime3 = dateTime0.withYear(11751002);
        org.joda.time.Instant instant4 = dateTime0.toInstant();
        org.joda.time.DateTime dateTime6 = dateTime0.plusYears(26160835);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 100, dateTimeZone8);
        org.joda.time.LocalDate.Property property10 = localDate9.weekyear();
        java.util.Locale locale12 = java.util.Locale.getDefault();
        java.lang.String str13 = localDate9.toString("14", locale12);
        java.util.Calendar calendar14 = dateTime6.toCalendar(locale12);
        calendar14.setLenient(false);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime0 and instant4", (dateTime0.compareTo(instant4) == 0) == dateTime0.equals(instant4));
    }

    @Test
    public void test0255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0255");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(dateTimeZone0);
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalTime localTime4 = new org.joda.time.LocalTime(dateTimeZone3);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalTime localTime6 = new org.joda.time.LocalTime(dateTimeZone5);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = localTime6.getFieldType((int) (byte) 1);
        int int9 = localTime4.get(dateTimeFieldType8);
        org.joda.time.LocalTime.Property property10 = localTime2.property(dateTimeFieldType8);
        org.joda.time.LocalTime localTime11 = property10.roundHalfFloorCopy();
        org.joda.time.LocalTime localTime12 = property10.getLocalTime();
        java.lang.String str13 = property10.toString();
        java.lang.String str14 = property10.getAsShortText();
        int int15 = property10.getMinimumValue();
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime();
        org.joda.time.Instant instant18 = dateTime17.toInstant();
        org.joda.time.Chronology chronology19 = dateTime17.getChronology();
        boolean boolean20 = dateTime16.isEqual((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalTime localTime22 = new org.joda.time.LocalTime(dateTimeZone21);
        org.joda.time.LocalTime localTime23 = new org.joda.time.LocalTime(dateTimeZone21);
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalTime localTime25 = new org.joda.time.LocalTime(dateTimeZone24);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalTime localTime27 = new org.joda.time.LocalTime(dateTimeZone26);
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = localTime27.getFieldType((int) (byte) 1);
        int int30 = localTime25.get(dateTimeFieldType29);
        org.joda.time.LocalTime.Property property31 = localTime23.property(dateTimeFieldType29);
        org.joda.time.LocalTime localTime32 = property31.roundHalfFloorCopy();
        org.joda.time.LocalTime localTime33 = property31.getLocalTime();
        org.joda.time.LocalTime localTime34 = property31.roundFloorCopy();
        org.joda.time.LocalTime localTime36 = property31.addWrapFieldToCopy(26159400);
        org.joda.time.DateTimeField dateTimeField37 = property31.getField();
        org.joda.time.LocalTime localTime38 = property31.roundCeilingCopy();
        org.joda.time.LocalTime localTime40 = localTime38.minusHours(11753441);
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.UTC;
        int int43 = dateTimeZone41.getStandardOffset((long) (byte) 1);
        org.joda.time.DateTime dateTime44 = localTime40.toDateTimeToday(dateTimeZone41);
        org.joda.time.DateTime dateTime45 = dateTime16.withZone(dateTimeZone41);
        boolean boolean46 = property10.equals((java.lang.Object) dateTime45);
        int int47 = dateTime45.getYearOfEra();
        long long48 = dateTime45.getMillis();
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalTime localTime50 = new org.joda.time.LocalTime(dateTimeZone49);
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalTime localTime52 = new org.joda.time.LocalTime(dateTimeZone51);
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = localTime52.getFieldType((int) (byte) 1);
        int int55 = localTime50.get(dateTimeFieldType54);
        org.joda.time.DurationFieldType durationFieldType56 = dateTimeFieldType54.getDurationType();
        org.joda.time.DateTime dateTime58 = dateTime45.withFieldAdded(durationFieldType56, 11930552);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime16 and instant18", (dateTime16.compareTo(instant18) == 0) == dateTime16.equals(instant18));
    }

    @Test
    public void test0256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0256");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.Instant instant2 = instant0.withMillis((long) 11);
        org.joda.time.Instant instant3 = instant2.toInstant();
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Instant instant5 = instant2.minus(readableDuration4);
        org.joda.time.Instant instant6 = instant2.toInstant();
        org.joda.time.Instant instant8 = instant6.withMillis((long) 59);
        org.joda.time.Instant instant10 = instant8.withMillis((long) 11782828);
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (byte) 10);
        org.joda.time.DateTime dateTime14 = dateTime12.plusMinutes(49);
        org.joda.time.DateTime dateTime16 = dateTime14.plus(10L);
        org.joda.time.Chronology chronology17 = dateTime16.getChronology();
        org.joda.time.DateTime dateTime19 = dateTime16.minusMonths((int) 'a');
        boolean boolean20 = instant8.isEqual((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.format.DateTimePrinter dateTimePrinter21 = null;
        org.joda.time.format.DateTimeParser dateTimeParser22 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter21, dateTimeParser22);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = dateTimeFormatter23.withPivotYear((java.lang.Integer) (-26151846));
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime28 = dateTime26.minusHours((int) (short) 100);
        org.joda.time.DateMidnight dateMidnight29 = dateTime28.toDateMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.dayOfYear();
        int int31 = dateTime28.get(dateTimeFieldType30);
        int int32 = dateTime28.getDayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate35 = new org.joda.time.LocalDate((long) 100, dateTimeZone34);
        org.joda.time.LocalDate localDate37 = localDate35.plusDays(50);
        org.joda.time.Chronology chronology38 = localDate37.getChronology();
        org.joda.time.DateTimeField dateTimeField39 = chronology38.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField40 = chronology38.dayOfMonth();
        org.joda.time.DateTime dateTime41 = dateTime28.withChronology(chronology38);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter42 = dateTimeFormatter25.withChronology(chronology38);
        org.joda.time.DateTime dateTime43 = dateTime16.toDateTime(chronology38);
        org.joda.time.DateTime.Property property44 = dateTime16.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField45 = property44.getField();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime16 and dateTime43", (dateTime16.compareTo(dateTime43) == 0) == dateTime16.equals(dateTime43));
    }

    @Test
    public void test0257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0257");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 100, dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.plusDays(50);
        org.joda.time.Chronology chronology5 = localDate4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 100, dateTimeZone8);
        org.joda.time.LocalDate localDate11 = localDate9.plusDays(50);
        int int12 = localDate9.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate14 = localDate9.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        int int17 = dateTimeZone15.getOffset((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateMidnight dateMidnight18 = localDate9.toDateMidnight(dateTimeZone15);
        long long20 = dateTimeZone15.convertUTCToLocal(60000L);
        org.joda.time.chrono.ZonedChronology zonedChronology21 = org.joda.time.chrono.ZonedChronology.getInstance(chronology5, dateTimeZone15);
        org.joda.time.DurationField durationField22 = zonedChronology21.weeks();
        org.joda.time.DateTimeField dateTimeField23 = zonedChronology21.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        long long27 = zonedChronology21.add(readablePeriod24, (long) 2022, 0);
        org.joda.time.DateTimeField dateTimeField28 = zonedChronology21.millisOfDay();
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology21.secondOfMinute();
        org.joda.time.DurationField durationField30 = zonedChronology21.eras();
        org.joda.time.DurationField durationField31 = zonedChronology21.centuries();
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField22 and durationField30", Math.signum(durationField22.compareTo(durationField30)) == -Math.signum(durationField30.compareTo(durationField22)));
    }

    @Test
    public void test0258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0258");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withPivotYear((java.lang.Integer) (-26151846));
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime7 = dateTime5.minusHours((int) (short) 100);
        org.joda.time.DateMidnight dateMidnight8 = dateTime7.toDateMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.dayOfYear();
        int int10 = dateTime7.get(dateTimeFieldType9);
        int int11 = dateTime7.getDayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) 100, dateTimeZone13);
        org.joda.time.LocalDate localDate16 = localDate14.plusDays(50);
        org.joda.time.Chronology chronology17 = localDate16.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField19 = chronology17.dayOfMonth();
        org.joda.time.DateTime dateTime20 = dateTime7.withChronology(chronology17);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = dateTimeFormatter4.withChronology(chronology17);
        int int22 = dateTimeFormatter4.getDefaultYear();
        java.lang.Integer int23 = dateTimeFormatter4.getPivotYear();
        java.lang.Integer int24 = dateTimeFormatter4.getPivotYear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime7 and dateTime20", (dateTime7.compareTo(dateTime20) == 0) == dateTime7.equals(dateTime20));
    }

    @Test
    public void test0259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0259");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 10);
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime();
        org.joda.time.Instant instant3 = dateTime2.toInstant();
        org.joda.time.Chronology chronology4 = dateTime2.getChronology();
        long long5 = dateTime2.getMillis();
        boolean boolean6 = dateTime1.isEqual((org.joda.time.ReadableInstant) dateTime2);
        org.joda.time.DateTime dateTime7 = dateTime2.withTimeAtStartOfDay();
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.DateTime dateTime9 = dateTime2.plus(readableDuration8);
        org.joda.time.DateTime dateTime11 = dateTime2.minusMonths(11915122);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant3 and dateTime2", (instant3.compareTo(dateTime2) == 0) == instant3.equals(dateTime2));
    }

    @Test
    public void test0260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0260");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 100, dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.plusDays(50);
        org.joda.time.Chronology chronology5 = localDate4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 100, dateTimeZone8);
        org.joda.time.LocalDate localDate11 = localDate9.plusDays(50);
        int int12 = localDate9.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate14 = localDate9.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        int int17 = dateTimeZone15.getOffset((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateMidnight dateMidnight18 = localDate9.toDateMidnight(dateTimeZone15);
        long long20 = dateTimeZone15.convertUTCToLocal(60000L);
        org.joda.time.chrono.ZonedChronology zonedChronology21 = org.joda.time.chrono.ZonedChronology.getInstance(chronology5, dateTimeZone15);
        org.joda.time.DurationField durationField22 = zonedChronology21.weeks();
        java.lang.String str23 = zonedChronology21.toString();
        org.joda.time.DurationField durationField24 = zonedChronology21.weeks();
        org.joda.time.DateTimeField dateTimeField25 = zonedChronology21.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField26 = zonedChronology21.yearOfCentury();
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((org.joda.time.Chronology) zonedChronology21);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate30 = new org.joda.time.LocalDate((long) 100, dateTimeZone29);
        org.joda.time.LocalDate localDate32 = localDate30.plusDays(50);
        org.joda.time.Chronology chronology33 = localDate32.getChronology();
        org.joda.time.DateTimeField dateTimeField34 = chronology33.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate37 = new org.joda.time.LocalDate((long) 100, dateTimeZone36);
        org.joda.time.LocalDate localDate39 = localDate37.plusDays(50);
        int int40 = localDate37.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate42 = localDate37.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime();
        int int45 = dateTimeZone43.getOffset((org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.DateMidnight dateMidnight46 = localDate37.toDateMidnight(dateTimeZone43);
        long long48 = dateTimeZone43.convertUTCToLocal(60000L);
        org.joda.time.chrono.ZonedChronology zonedChronology49 = org.joda.time.chrono.ZonedChronology.getInstance(chronology33, dateTimeZone43);
        org.joda.time.DurationField durationField50 = zonedChronology49.weeks();
        org.joda.time.DateTimeField dateTimeField51 = zonedChronology49.year();
        org.joda.time.DateTimeZone dateTimeZone52 = zonedChronology49.getZone();
        org.joda.time.DurationField durationField53 = zonedChronology49.months();
        org.joda.time.DateTimeField dateTimeField54 = zonedChronology49.dayOfMonth();
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime57 = dateTime55.minusHours((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType58 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int59 = dateTime57.get(dateTimeFieldType58);
        org.joda.time.DateTime dateTime61 = dateTime57.minusMillis((int) '#');
        org.joda.time.DateTime dateTime63 = dateTime61.plusDays(11);
        int int64 = dateTime63.getCenturyOfEra();
        org.joda.time.DateTime dateTime66 = dateTime63.plusDays(780);
        org.joda.time.DateTimeZone dateTimeZone67 = dateTime63.getZone();
        org.joda.time.Chronology chronology68 = zonedChronology49.withZone(dateTimeZone67);
        org.joda.time.LocalDate localDate69 = org.joda.time.LocalDate.now(dateTimeZone67);
        org.joda.time.Chronology chronology70 = zonedChronology21.withZone(dateTimeZone67);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime16 and dateTime27", (dateTime16.compareTo(dateTime27) == 0) == dateTime16.equals(dateTime27));
    }

    @Test
    public void test0261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0261");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime2 = dateTime0.minusHours((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int4 = dateTime2.get(dateTimeFieldType3);
        org.joda.time.DateTime dateTime6 = dateTime2.minusMillis((int) '#');
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime();
        int int9 = dateTimeZone7.getOffset((org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.DateTime dateTime10 = org.joda.time.DateTime.now(dateTimeZone7);
        boolean boolean11 = dateTime6.isEqual((org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.DateTime dateTime13 = dateTime10.minusMinutes(11814974);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime16 = dateTime14.minusHours((int) (short) 100);
        org.joda.time.TimeOfDay timeOfDay17 = dateTime16.toTimeOfDay();
        org.joda.time.DateTime.Property property18 = dateTime16.yearOfEra();
        org.joda.time.DateTime dateTime19 = property18.roundCeilingCopy();
        long long20 = dateTime19.getMillis();
        org.joda.time.DateTime dateTime22 = dateTime19.withWeekyear(320);
        int int23 = dateTime13.compareTo((org.joda.time.ReadableInstant) dateTime19);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime0 and dateTime10", (dateTime0.compareTo(dateTime10) == 0) == dateTime0.equals(dateTime10));
    }

    @Test
    public void test0262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0262");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime2 = dateTime0.minusHours((int) (short) 100);
        org.joda.time.DateTime dateTime4 = dateTime0.withHourOfDay(10);
        java.util.GregorianCalendar gregorianCalendar5 = dateTime0.toGregorianCalendar();
        org.joda.time.Instant instant7 = new org.joda.time.Instant();
        org.joda.time.Instant instant9 = instant7.withMillis((long) 11);
        org.joda.time.Instant instant10 = instant9.toInstant();
        org.joda.time.Chronology chronology11 = instant9.getChronology();
        org.joda.time.DateTimeField dateTimeField12 = chronology11.clockhourOfHalfday();
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((long) 11760560, chronology11);
        org.joda.time.DateTime dateTime14 = dateTime0.withChronology(chronology11);
        java.util.GregorianCalendar gregorianCalendar15 = dateTime14.toGregorianCalendar();
        org.joda.time.DateTime dateTime17 = dateTime14.minusMillis(26226390);
        int int18 = dateTime17.getWeekyear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime0 and instant7", (dateTime0.compareTo(instant7) == 0) == dateTime0.equals(instant7));
    }

    @Test
    public void test0263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0263");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.minusHours((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int5 = dateTime3.get(dateTimeFieldType4);
        org.joda.time.DateTime dateTime7 = dateTime3.minusMillis((int) '#');
        boolean boolean8 = dateTime3.isBeforeNow();
        int int9 = dateTime3.getYearOfEra();
        org.joda.time.Instant instant10 = dateTime3.toInstant();
        org.joda.time.DateTime dateTime11 = instant10.toDateTime();
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.Instant instant14 = instant10.withDurationAdded(readableDuration12, 11768869);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.Instant instant17 = instant10.withDurationAdded(readableDuration15, 11869983);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate((long) 100, dateTimeZone19);
        org.joda.time.LocalDate localDate22 = localDate20.plusDays(50);
        org.joda.time.Chronology chronology23 = localDate22.getChronology();
        org.joda.time.DateTimeField dateTimeField24 = chronology23.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate((long) 100, dateTimeZone26);
        org.joda.time.LocalDate localDate29 = localDate27.plusDays(50);
        int int30 = localDate27.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate32 = localDate27.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime();
        int int35 = dateTimeZone33.getOffset((org.joda.time.ReadableInstant) dateTime34);
        org.joda.time.DateMidnight dateMidnight36 = localDate27.toDateMidnight(dateTimeZone33);
        long long38 = dateTimeZone33.convertUTCToLocal(60000L);
        org.joda.time.chrono.ZonedChronology zonedChronology39 = org.joda.time.chrono.ZonedChronology.getInstance(chronology23, dateTimeZone33);
        org.joda.time.DurationField durationField40 = zonedChronology39.weeks();
        org.joda.time.DateTimeField dateTimeField41 = zonedChronology39.centuryOfEra();
        org.joda.time.DurationField durationField42 = zonedChronology39.minutes();
        org.joda.time.DateTimeField dateTimeField43 = zonedChronology39.year();
        org.joda.time.DateTimeField dateTimeField44 = zonedChronology39.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField45 = zonedChronology39.clockhourOfHalfday();
        org.joda.time.MutableDateTime mutableDateTime46 = instant17.toMutableDateTime((org.joda.time.Chronology) zonedChronology39);
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime((long) 48, (org.joda.time.Chronology) zonedChronology39);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and instant10", (dateTime3.compareTo(instant10) == 0) == dateTime3.equals(instant10));
    }

    @Test
    public void test0264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0264");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 100, dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.plusDays(50);
        org.joda.time.Chronology chronology5 = localDate4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 100, dateTimeZone8);
        org.joda.time.LocalDate localDate11 = localDate9.plusDays(50);
        int int12 = localDate9.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate14 = localDate9.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        int int17 = dateTimeZone15.getOffset((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateMidnight dateMidnight18 = localDate9.toDateMidnight(dateTimeZone15);
        long long20 = dateTimeZone15.convertUTCToLocal(60000L);
        org.joda.time.chrono.ZonedChronology zonedChronology21 = org.joda.time.chrono.ZonedChronology.getInstance(chronology5, dateTimeZone15);
        org.joda.time.DurationField durationField22 = zonedChronology21.weeks();
        org.joda.time.DurationField durationField23 = zonedChronology21.centuries();
        org.joda.time.DurationField durationField24 = zonedChronology21.weekyears();
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate((org.joda.time.Chronology) zonedChronology21);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetMillis(14);
        org.joda.time.DateTime dateTime28 = localDate25.toDateTimeAtCurrentTime(dateTimeZone27);
        org.joda.time.LocalDate localDate30 = localDate25.plusMonths(68972086);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime16 and dateTime28", (dateTime16.compareTo(dateTime28) == 0) == dateTime16.equals(dateTime28));
    }

    @Test
    public void test0265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0265");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime2 = dateTime0.withMinuteOfHour(14);
        org.joda.time.DateTime dateTime4 = dateTime0.withCenturyOfEra(50);
        org.joda.time.Instant instant5 = new org.joda.time.Instant();
        org.joda.time.Instant instant7 = instant5.minus((long) 2);
        int int8 = dateTime4.compareTo((org.joda.time.ReadableInstant) instant5);
        org.joda.time.DateTime.Property property9 = dateTime4.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate((long) 100, dateTimeZone11);
        org.joda.time.LocalDate localDate14 = localDate12.plusDays(50);
        org.joda.time.Chronology chronology15 = localDate14.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.minuteOfHour();
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(chronology15);
        org.joda.time.DateTime dateTime19 = dateTime17.plusMonths(11767873);
        int int20 = dateTime19.getSecondOfDay();
        org.joda.time.DateTime dateTime22 = dateTime19.withWeekyear(11775531);
        org.joda.time.DateTime dateTime24 = dateTime22.plusMinutes(26180512);
        int int25 = property9.compareTo((org.joda.time.ReadableInstant) dateTime24);
        java.lang.String str26 = property9.getName();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime0 and instant5", (dateTime0.compareTo(instant5) == 0) == dateTime0.equals(instant5));
    }

    @Test
    public void test0266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0266");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 100, dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.plusDays(50);
        org.joda.time.Chronology chronology5 = localDate4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 100, dateTimeZone8);
        org.joda.time.LocalDate localDate11 = localDate9.plusDays(50);
        int int12 = localDate9.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate14 = localDate9.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        int int17 = dateTimeZone15.getOffset((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateMidnight dateMidnight18 = localDate9.toDateMidnight(dateTimeZone15);
        long long20 = dateTimeZone15.convertUTCToLocal(60000L);
        org.joda.time.chrono.ZonedChronology zonedChronology21 = org.joda.time.chrono.ZonedChronology.getInstance(chronology5, dateTimeZone15);
        org.joda.time.DurationField durationField22 = zonedChronology21.weeks();
        org.joda.time.DateTimeField dateTimeField23 = zonedChronology21.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        long long27 = zonedChronology21.add(readablePeriod24, (long) 2022, 0);
        org.joda.time.DurationField durationField28 = zonedChronology21.seconds();
        java.lang.String str29 = zonedChronology21.toString();
        org.joda.time.DateTimeField dateTimeField30 = zonedChronology21.dayOfMonth();
        org.joda.time.Instant instant31 = new org.joda.time.Instant();
        org.joda.time.Instant instant33 = instant31.withMillis((long) 11);
        org.joda.time.Instant instant34 = instant33.toInstant();
        org.joda.time.Chronology chronology35 = instant33.getChronology();
        org.joda.time.DateTimeField dateTimeField36 = chronology35.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate39 = new org.joda.time.LocalDate((long) 100, dateTimeZone38);
        int int40 = dateTimeField36.getMaximumValue((org.joda.time.ReadablePartial) localDate39);
        int int42 = localDate39.getValue(2);
        org.joda.time.DateMidnight dateMidnight43 = localDate39.toDateMidnight();
        org.joda.time.LocalDate.Property property44 = localDate39.era();
        java.util.Locale locale45 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet46 = locale45.getUnicodeLocaleAttributes();
        java.lang.String str47 = locale45.toLanguageTag();
        boolean boolean48 = locale45.hasExtensions();
        java.util.Locale locale49 = locale45.stripExtensions();
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime52 = dateTime50.withMinuteOfHour(14);
        org.joda.time.DateTime dateTime54 = dateTime50.withCenturyOfEra(50);
        org.joda.time.Instant instant55 = new org.joda.time.Instant();
        org.joda.time.Instant instant57 = instant55.minus((long) 2);
        int int58 = dateTime54.compareTo((org.joda.time.ReadableInstant) instant55);
        org.joda.time.DateTime.Property property59 = dateTime54.centuryOfEra();
        org.joda.time.DateTime dateTime61 = dateTime54.plusDays(58);
        java.util.Locale locale62 = java.util.Locale.JAPAN;
        java.util.Set<java.lang.String> strSet63 = locale62.getUnicodeLocaleAttributes();
        java.lang.String str64 = locale62.getScript();
        java.util.Set<java.lang.String> strSet65 = locale62.getUnicodeLocaleKeys();
        java.util.Set<java.lang.String> strSet66 = locale62.getUnicodeLocaleKeys();
        java.util.Calendar calendar67 = dateTime54.toCalendar(locale62);
        java.lang.String str68 = locale49.getDisplayCountry(locale62);
        java.lang.String str69 = dateTimeField30.getAsText((org.joda.time.ReadablePartial) localDate39, locale62);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime16 and instant31", (dateTime16.compareTo(instant31) == 0) == dateTime16.equals(instant31));
    }

    @Test
    public void test0267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0267");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.Instant instant2 = instant0.withMillis((long) 11);
        org.joda.time.Instant instant3 = instant2.toInstant();
        org.joda.time.Chronology chronology4 = instant2.getChronology();
        org.joda.time.DateTimeField dateTimeField5 = chronology4.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate((long) 100, dateTimeZone7);
        int int9 = dateTimeField5.getMaximumValue((org.joda.time.ReadablePartial) localDate8);
        int int11 = localDate8.getValue(2);
        org.joda.time.DateMidnight dateMidnight12 = localDate8.toDateMidnight();
        org.joda.time.LocalDate localDate14 = localDate8.plusMonths(26160535);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime();
        int int16 = dateTime15.getDayOfYear();
        org.joda.time.DateTime dateTime18 = dateTime15.withYear(11751002);
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime();
        int int20 = dateTime19.getDayOfYear();
        org.joda.time.DateTime dateTime22 = dateTime19.withYear(11751002);
        org.joda.time.Instant instant23 = dateTime19.toInstant();
        boolean boolean24 = dateTime15.isEqual((org.joda.time.ReadableInstant) instant23);
        org.joda.time.DateTime dateTime25 = localDate14.toDateTime((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate((long) 100, dateTimeZone27);
        org.joda.time.LocalDate localDate30 = localDate28.plusDays(50);
        org.joda.time.Chronology chronology31 = localDate30.getChronology();
        org.joda.time.DateTimeField dateTimeField32 = chronology31.weekyearOfCentury();
        java.lang.String str34 = dateTimeField32.getAsText(72000000L);
        int int36 = dateTimeField32.get(11770587L);
        int int37 = dateTime25.get(dateTimeField32);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and dateTime15", (instant0.compareTo(dateTime15) == 0) == instant0.equals(dateTime15));
    }

    @Test
    public void test0268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0268");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(59, 50);
        java.util.TimeZone timeZone4 = dateTimeZone3.toTimeZone();
        java.util.TimeZone timeZone5 = dateTimeZone3.toTimeZone();
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(72000000L, dateTimeZone3);
        org.joda.time.DateTime.Property property7 = dateTime6.dayOfWeek();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime();
        int int9 = dateTime8.getDayOfYear();
        org.joda.time.DateTime dateTime11 = dateTime8.withYear(11751002);
        org.joda.time.Instant instant12 = dateTime8.toInstant();
        org.joda.time.DateTime.Property property13 = dateTime8.monthOfYear();
        long long14 = property7.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.DateTime dateTime15 = property7.roundCeilingCopy();
        org.joda.time.LocalDate localDate16 = dateTime15.toLocalDate();
        java.lang.String str17 = localDate16.toString();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime8 and instant12", (dateTime8.compareTo(instant12) == 0) == dateTime8.equals(instant12));
    }

    @Test
    public void test0269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0269");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 100, dateTimeZone1);
        org.joda.time.LocalDate.Property property3 = localDate2.weekyear();
        org.joda.time.LocalDate localDate5 = property3.setCopy(2022);
        org.joda.time.Instant instant6 = new org.joda.time.Instant();
        org.joda.time.Instant instant8 = instant6.withMillis((long) 11);
        org.joda.time.Instant instant9 = instant8.toInstant();
        org.joda.time.Chronology chronology10 = instant8.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) 100, dateTimeZone13);
        int int15 = dateTimeField11.getMaximumValue((org.joda.time.ReadablePartial) localDate14);
        int int17 = localDate14.getValue(2);
        org.joda.time.DateMidnight dateMidnight18 = localDate14.toDateMidnight();
        org.joda.time.LocalDate localDate20 = localDate14.plusMonths(26160535);
        int int21 = localDate20.getYear();
        boolean boolean22 = property3.equals((java.lang.Object) localDate20);
        org.joda.time.DateTime dateTime23 = localDate20.toDateTimeAtStartOfDay();
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.DateTime dateTime26 = dateTime23.withPeriodAdded(readablePeriod24, 11761333);
        org.joda.time.DateTime dateTime28 = dateTime23.minusHours(11735);
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime31 = dateTime29.minusHours((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int33 = dateTime31.get(dateTimeFieldType32);
        org.joda.time.DateTime dateTime35 = dateTime31.minusSeconds((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(59, 50);
        java.util.TimeZone timeZone41 = dateTimeZone40.toTimeZone();
        java.util.TimeZone timeZone42 = dateTimeZone40.toTimeZone();
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime(72000000L, dateTimeZone40);
        int int45 = dateTimeZone40.getStandardOffset((long) 'u');
        java.lang.String str47 = dateTimeZone40.getName(1645142400000L);
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime((long) 11779950, dateTimeZone40);
        org.joda.time.DateTime dateTime49 = dateTime31.withZoneRetainFields(dateTimeZone40);
        boolean boolean50 = dateTime23.equals((java.lang.Object) dateTimeZone40);
        org.joda.time.DateTime.Property property51 = dateTime23.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime52 = dateTime23.toLocalDateTime();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant6 and dateTime29", (instant6.compareTo(dateTime29) == 0) == instant6.equals(dateTime29));
    }

    @Test
    public void test0270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0270");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime3 = dateTime1.withMinuteOfHour(14);
        org.joda.time.DateTime dateTime5 = dateTime1.withCenturyOfEra(50);
        org.joda.time.Instant instant6 = new org.joda.time.Instant();
        org.joda.time.Instant instant8 = instant6.minus((long) 2);
        int int9 = dateTime5.compareTo((org.joda.time.ReadableInstant) instant6);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(59, 50);
        java.util.TimeZone timeZone13 = dateTimeZone12.toTimeZone();
        org.joda.time.Instant instant14 = new org.joda.time.Instant();
        org.joda.time.Instant instant16 = instant14.withMillis((long) 11);
        org.joda.time.Instant instant17 = instant16.toInstant();
        org.joda.time.Instant instant19 = instant17.plus((long) 11757325);
        org.joda.time.Instant instant20 = new org.joda.time.Instant();
        org.joda.time.Instant instant22 = instant20.minus((long) 2);
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.Instant instant24 = instant22.plus(readableDuration23);
        boolean boolean25 = instant17.isBefore((org.joda.time.ReadableInstant) instant22);
        int int26 = dateTimeZone12.getOffset((org.joda.time.ReadableInstant) instant17);
        org.joda.time.DateTime dateTime27 = dateTime5.toDateTime(dateTimeZone12);
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime(0L, dateTimeZone12);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and instant6", (dateTime1.compareTo(instant6) == 0) == dateTime1.equals(instant6));
    }

    @Test
    public void test0271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0271");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 100, dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.plusDays(50);
        org.joda.time.Chronology chronology5 = localDate4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 100, dateTimeZone8);
        org.joda.time.LocalDate localDate11 = localDate9.plusDays(50);
        int int12 = localDate9.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate14 = localDate9.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        int int17 = dateTimeZone15.getOffset((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateMidnight dateMidnight18 = localDate9.toDateMidnight(dateTimeZone15);
        long long20 = dateTimeZone15.convertUTCToLocal(60000L);
        org.joda.time.chrono.ZonedChronology zonedChronology21 = org.joda.time.chrono.ZonedChronology.getInstance(chronology5, dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField22 = zonedChronology21.yearOfCentury();
        org.joda.time.DurationField durationField23 = zonedChronology21.millis();
        org.joda.time.DurationField durationField24 = zonedChronology21.seconds();
        org.joda.time.DateTimeField dateTimeField25 = zonedChronology21.millisOfSecond();
        org.joda.time.DurationField durationField26 = zonedChronology21.minutes();
        org.joda.time.DurationField durationField27 = zonedChronology21.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField27, durationField23, and durationField24", !(durationField27.compareTo(durationField23) == 0) || (Math.signum(durationField27.compareTo(durationField24)) == Math.signum(durationField23.compareTo(durationField24))));
    }

    @Test
    public void test0272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0272");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        int int1 = dateTime0.getDayOfYear();
        org.joda.time.DateTime dateTime3 = dateTime0.withYear(11751002);
        org.joda.time.Instant instant4 = dateTime0.toInstant();
        org.joda.time.DateTime.Property property5 = dateTime0.monthOfYear();
        org.joda.time.DateTime dateTime6 = property5.withMaximumValue();
        org.joda.time.DateTime.Property property7 = dateTime6.yearOfEra();
        java.lang.Object obj9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.UTC;
        int int12 = dateTimeZone10.getStandardOffset((long) (byte) 1);
        java.lang.String str14 = dateTimeZone10.getShortName((long) 11756302);
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime(obj9, dateTimeZone10);
        org.joda.time.LocalTime localTime16 = new org.joda.time.LocalTime((long) 26174, dateTimeZone10);
        org.joda.time.DateTime dateTime17 = dateTime6.withFields((org.joda.time.ReadablePartial) localTime16);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime0 and instant4", (dateTime0.compareTo(instant4) == 0) == dateTime0.equals(instant4));
    }

    @Test
    public void test0273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0273");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime2 = dateTime0.minusHours((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int4 = dateTime2.get(dateTimeFieldType3);
        org.joda.time.DateTime dateTime6 = dateTime2.minusMillis((int) '#');
        boolean boolean7 = dateTime2.isBeforeNow();
        int int8 = dateTime2.getYearOfEra();
        org.joda.time.Instant instant9 = dateTime2.toInstant();
        org.joda.time.DateTime dateTime10 = instant9.toDateTime();
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.Instant instant13 = instant9.withDurationAdded(readableDuration11, 11768869);
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.Instant instant16 = instant9.withDurationAdded(readableDuration14, 11869983);
        boolean boolean18 = instant9.isEqual(1645154358616L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and instant9", (dateTime2.compareTo(instant9) == 0) == dateTime2.equals(instant9));
    }

    @Test
    public void test0274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0274");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property1 = localDateTime0.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withField(dateTimeFieldType2, (int) (short) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.plusWeeks((-1));
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.withMillisOfSecond((int) '4');
        org.joda.time.LocalDateTime localDateTime10 = localDateTime6.plusWeeks(26160458);
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime13 = dateTime11.minusHours((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int15 = dateTime13.get(dateTimeFieldType14);
        org.joda.time.DateTime dateTime17 = dateTime13.minusMillis((int) '#');
        org.joda.time.DateTime dateTime18 = localDateTime6.toDateTime((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.DateTime dateTime20 = dateTime17.withMillis((long) 26175513);
        org.joda.time.DateTime dateTime21 = dateTime17.toDateTime();
        org.joda.time.Instant instant22 = new org.joda.time.Instant();
        org.joda.time.Instant instant24 = instant22.withMillis((long) 11);
        org.joda.time.Instant instant25 = instant24.toInstant();
        org.joda.time.Chronology chronology26 = instant24.getChronology();
        org.joda.time.DateTimeField dateTimeField27 = chronology26.minuteOfHour();
        boolean boolean28 = dateTimeField27.isSupported();
        java.util.Locale locale29 = java.util.Locale.TAIWAN;
        java.lang.String str30 = locale29.toLanguageTag();
        java.lang.String str31 = locale29.toLanguageTag();
        java.lang.String str32 = locale29.getDisplayScript();
        int int33 = dateTimeField27.getMaximumShortTextLength(locale29);
        java.lang.String str35 = dateTimeField27.getAsText((long) 26221127);
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = dateTimeField27.getType();
        org.joda.time.DateTime.Property property37 = dateTime21.property(dateTimeFieldType36);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime11 and instant22", (dateTime11.compareTo(instant22) == 0) == dateTime11.equals(instant22));
    }

    @Test
    public void test0275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0275");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 10);
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime();
        org.joda.time.Instant instant3 = dateTime2.toInstant();
        org.joda.time.Chronology chronology4 = dateTime2.getChronology();
        long long5 = dateTime2.getMillis();
        boolean boolean6 = dateTime1.isEqual((org.joda.time.ReadableInstant) dateTime2);
        org.joda.time.DateTime dateTime8 = dateTime1.plusHours(26278156);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate((long) 100, dateTimeZone10);
        org.joda.time.LocalDate localDate13 = localDate11.plusDays(50);
        org.joda.time.Chronology chronology14 = localDate13.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate((long) 100, dateTimeZone17);
        org.joda.time.LocalDate localDate20 = localDate18.plusDays(50);
        int int21 = localDate18.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate23 = localDate18.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime();
        int int26 = dateTimeZone24.getOffset((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.DateMidnight dateMidnight27 = localDate18.toDateMidnight(dateTimeZone24);
        long long29 = dateTimeZone24.convertUTCToLocal(60000L);
        org.joda.time.chrono.ZonedChronology zonedChronology30 = org.joda.time.chrono.ZonedChronology.getInstance(chronology14, dateTimeZone24);
        org.joda.time.DurationField durationField31 = zonedChronology30.eras();
        org.joda.time.DateTimeField dateTimeField32 = zonedChronology30.minuteOfDay();
        org.joda.time.Chronology chronology33 = zonedChronology30.withUTC();
        org.joda.time.DateTimeField dateTimeField34 = zonedChronology30.monthOfYear();
        org.joda.time.DateTimeField dateTimeField35 = zonedChronology30.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField36 = zonedChronology30.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField37 = zonedChronology30.weekyear();
        org.joda.time.DateTime dateTime38 = dateTime1.withChronology((org.joda.time.Chronology) zonedChronology30);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and instant3", (dateTime2.compareTo(instant3) == 0) == dateTime2.equals(instant3));
    }

    @Test
    public void test0276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0276");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime2 = dateTime0.withMinuteOfHour(14);
        org.joda.time.DateTime dateTime4 = dateTime0.withCenturyOfEra(50);
        org.joda.time.Instant instant5 = new org.joda.time.Instant();
        org.joda.time.Instant instant7 = instant5.minus((long) 2);
        int int8 = dateTime4.compareTo((org.joda.time.ReadableInstant) instant5);
        org.joda.time.DateTime dateTime10 = dateTime4.minusWeeks(26194721);
        org.joda.time.DateTime dateTime11 = dateTime10.withLaterOffsetAtOverlap();
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.DateTime dateTime13 = dateTime11.plus(readablePeriod12);
        java.lang.String str14 = dateTime13.toString();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime0 and instant5", (dateTime0.compareTo(instant5) == 0) == dateTime0.equals(instant5));
    }

    @Test
    public void test0277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0277");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.Instant instant1 = dateTime0.toInstant();
        org.joda.time.Chronology chronology2 = dateTime0.getChronology();
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime();
        int int5 = dateTimeZone3.getOffset((org.joda.time.ReadableInstant) dateTime4);
        int int7 = dateTimeZone3.getOffsetFromLocal((long) 26187981);
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate((java.lang.Object) dateTime0, dateTimeZone3);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.LocalDate localDate11 = localDate8.withPeriodAdded(readablePeriod9, 11909862);
        org.joda.time.LocalDate.Property property12 = localDate8.era();
        org.joda.time.LocalDate localDate13 = property12.roundCeilingCopy();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime0 and instant1", (dateTime0.compareTo(instant1) == 0) == dateTime0.equals(instant1));
    }

    @Test
    public void test0278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0278");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property1 = localDateTime0.yearOfEra();
        org.joda.time.LocalDateTime localDateTime3 = localDateTime0.plusMonths((int) (short) 10);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.yearOfEra();
        int int5 = localDateTime3.getEra();
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((long) (byte) 10);
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime();
        org.joda.time.Instant instant9 = dateTime8.toInstant();
        org.joda.time.Chronology chronology10 = dateTime8.getChronology();
        long long11 = dateTime8.getMillis();
        boolean boolean12 = dateTime7.isEqual((org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.DateTime dateTime13 = dateTime8.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime14 = localDateTime3.toDateTime((org.joda.time.ReadableInstant) dateTime13);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime8 and instant9", (dateTime8.compareTo(instant9) == 0) == dateTime8.equals(instant9));
    }

    @Test
    public void test0279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0279");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime2 = dateTime0.minusHours((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int4 = dateTime2.get(dateTimeFieldType3);
        org.joda.time.DateTime dateTime6 = dateTime2.minusMillis((int) '#');
        boolean boolean7 = dateTime2.isBeforeNow();
        org.joda.time.Instant instant9 = new org.joda.time.Instant();
        org.joda.time.Instant instant11 = instant9.withMillis((long) 11);
        org.joda.time.Instant instant12 = instant11.toInstant();
        org.joda.time.Chronology chronology13 = instant11.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.minuteOfDay();
        org.joda.time.Chronology chronology15 = chronology13.withUTC();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.era();
        org.joda.time.LocalTime localTime17 = org.joda.time.LocalTime.fromMillisOfDay((long) 26175513, chronology15);
        org.joda.time.DurationField durationField18 = chronology15.weeks();
        org.joda.time.DateTimeField dateTimeField19 = chronology15.dayOfYear();
        org.joda.time.DateTimeField dateTimeField20 = chronology15.millisOfSecond();
        int int21 = dateTime2.get(dateTimeField20);
        int int24 = dateTimeField20.getDifference(227225569L, 26160835L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime0 and instant9", (dateTime0.compareTo(instant9) == 0) == dateTime0.equals(instant9));
    }

    @Test
    public void test0280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0280");
        java.util.Locale locale0 = java.util.Locale.TAIWAN;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        calendar1.setMinimalDaysInFirstWeek(26168469);
        calendar1.set(11757696, 16, (int) (short) 100);
        org.joda.time.Instant instant9 = new org.joda.time.Instant();
        org.joda.time.Instant instant11 = instant9.withMillis((long) 11);
        org.joda.time.Instant instant12 = instant11.toInstant();
        org.joda.time.Chronology chronology13 = instant11.getChronology();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((long) '#', chronology13);
        boolean boolean15 = calendar1.before((java.lang.Object) chronology13);
        org.joda.time.DurationField durationField16 = chronology13.millis();
        org.joda.time.DurationFieldType durationFieldType17 = durationField16.getType();
        org.joda.time.DurationFieldType durationFieldType18 = durationField16.getType();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate((long) 100, dateTimeZone20);
        org.joda.time.LocalDate localDate23 = localDate21.plusDays(50);
        org.joda.time.Chronology chronology24 = localDate23.getChronology();
        org.joda.time.DateTimeField dateTimeField25 = chronology24.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate((long) 100, dateTimeZone27);
        org.joda.time.LocalDate localDate30 = localDate28.plusDays(50);
        int int31 = localDate28.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate33 = localDate28.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime();
        int int36 = dateTimeZone34.getOffset((org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.DateMidnight dateMidnight37 = localDate28.toDateMidnight(dateTimeZone34);
        long long39 = dateTimeZone34.convertUTCToLocal(60000L);
        org.joda.time.chrono.ZonedChronology zonedChronology40 = org.joda.time.chrono.ZonedChronology.getInstance(chronology24, dateTimeZone34);
        org.joda.time.DurationField durationField41 = zonedChronology40.halfdays();
        int int42 = durationField16.compareTo(durationField41);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant9 and dateTime35", (instant9.compareTo(dateTime35) == 0) == instant9.equals(dateTime35));
    }

    @Test
    public void test0281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0281");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime2 = dateTime0.minusHours((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalTime localTime4 = new org.joda.time.LocalTime(dateTimeZone3);
        org.joda.time.DateTime dateTime5 = dateTime0.withZone(dateTimeZone3);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalTime localTime7 = new org.joda.time.LocalTime(dateTimeZone6);
        org.joda.time.LocalTime localTime8 = new org.joda.time.LocalTime(dateTimeZone6);
        org.joda.time.LocalTime localTime10 = localTime8.plusSeconds(10);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = localTime8.getFieldType(0);
        org.joda.time.DateTime dateTime14 = dateTime0.withField(dateTimeFieldType12, 5);
        java.util.GregorianCalendar gregorianCalendar15 = dateTime14.toGregorianCalendar();
        boolean boolean16 = gregorianCalendar15.isLenient();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime0 and dateTime5", (dateTime0.compareTo(dateTime5) == 0) == dateTime0.equals(dateTime5));
    }

    @Test
    public void test0282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0282");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withPivotYear((java.lang.Integer) (-26151846));
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime7 = dateTime5.minusHours((int) (short) 100);
        org.joda.time.DateMidnight dateMidnight8 = dateTime7.toDateMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.dayOfYear();
        int int10 = dateTime7.get(dateTimeFieldType9);
        int int11 = dateTime7.getDayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) 100, dateTimeZone13);
        org.joda.time.LocalDate localDate16 = localDate14.plusDays(50);
        org.joda.time.Chronology chronology17 = localDate16.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField19 = chronology17.dayOfMonth();
        org.joda.time.DateTime dateTime20 = dateTime7.withChronology(chronology17);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = dateTimeFormatter4.withChronology(chronology17);
        org.joda.time.format.DateTimeParser dateTimeParser22 = dateTimeFormatter21.getParser();
        java.lang.Integer int23 = dateTimeFormatter21.getPivotYear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime7 and dateTime20", (dateTime7.compareTo(dateTime20) == 0) == dateTime7.equals(dateTime20));
    }

    @Test
    public void test0283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0283");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime2 = dateTime0.minusHours((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalTime localTime4 = new org.joda.time.LocalTime(dateTimeZone3);
        org.joda.time.DateTime dateTime5 = dateTime0.withZone(dateTimeZone3);
        org.joda.time.DateTime dateTime7 = dateTime0.withMillisOfSecond(11);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime();
        int int10 = dateTimeZone8.getOffset((org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.LocalTime localTime11 = org.joda.time.LocalTime.now(dateTimeZone8);
        int int13 = dateTimeZone8.getStandardOffset((long) 26156834);
        java.lang.String str15 = dateTimeZone8.getNameKey((long) 26160458);
        org.joda.time.DateTime dateTime16 = dateTime7.toDateTime(dateTimeZone8);
        org.joda.time.LocalDate localDate17 = org.joda.time.LocalDate.now(dateTimeZone8);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime0 and dateTime5", (dateTime0.compareTo(dateTime5) == 0) == dateTime0.equals(dateTime5));
    }

    @Test
    public void test0284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0284");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 100, dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.plusDays(50);
        org.joda.time.Chronology chronology5 = localDate4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 100, dateTimeZone8);
        org.joda.time.LocalDate localDate11 = localDate9.plusDays(50);
        int int12 = localDate9.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate14 = localDate9.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        int int17 = dateTimeZone15.getOffset((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateMidnight dateMidnight18 = localDate9.toDateMidnight(dateTimeZone15);
        long long20 = dateTimeZone15.convertUTCToLocal(60000L);
        org.joda.time.chrono.ZonedChronology zonedChronology21 = org.joda.time.chrono.ZonedChronology.getInstance(chronology5, dateTimeZone15);
        org.joda.time.DurationField durationField22 = zonedChronology21.eras();
        org.joda.time.DateTimeField dateTimeField23 = zonedChronology21.minuteOfDay();
        org.joda.time.Chronology chronology24 = zonedChronology21.withUTC();
        org.joda.time.DateTimeField dateTimeField25 = zonedChronology21.monthOfYear();
        org.joda.time.DateTimeField dateTimeField26 = zonedChronology21.yearOfCentury();
        org.joda.time.DurationField durationField27 = zonedChronology21.weekyears();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField22, durationField27, and durationField22", !(durationField22.compareTo(durationField27) == 0) || (Math.signum(durationField22.compareTo(durationField22)) == Math.signum(durationField27.compareTo(durationField22))));
    }

    @Test
    public void test0285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0285");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 100, dateTimeZone1);
        java.util.Date date3 = localDate2.toDate();
        org.joda.time.LocalDate localDate5 = localDate2.withCenturyOfEra((int) 'u');
        org.joda.time.LocalDate localDate7 = localDate5.minusYears((int) '#');
        org.joda.time.DurationFieldType durationFieldType8 = org.joda.time.DurationFieldType.weekyears();
        java.lang.String str9 = durationFieldType8.getName();
        org.joda.time.LocalDate localDate11 = localDate7.withFieldAdded(durationFieldType8, 0);
        org.joda.time.LocalDate localDate13 = localDate7.withYear(26179764);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime16 = dateTime14.minusHours((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int18 = dateTime16.get(dateTimeFieldType17);
        org.joda.time.DateTime dateTime20 = dateTime16.minusMillis((int) '#');
        org.joda.time.DateTime dateTime22 = dateTime20.plusDays(11);
        org.joda.time.DateTime dateTime25 = dateTime20.withDurationAdded((long) (byte) 10, 11);
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(59, 50);
        java.util.TimeZone timeZone31 = dateTimeZone30.toTimeZone();
        java.util.TimeZone timeZone32 = dateTimeZone30.toTimeZone();
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime(72000000L, dateTimeZone30);
        int int35 = dateTimeZone30.getStandardOffset((long) 'u');
        org.joda.time.LocalDate localDate36 = new org.joda.time.LocalDate((long) 49, dateTimeZone30);
        org.joda.time.DateTime dateTime37 = dateTime25.withZone(dateTimeZone30);
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime();
        int int40 = dateTimeZone38.getOffset((org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.DateTime dateTime41 = org.joda.time.DateTime.now(dateTimeZone38);
        org.joda.time.DateTime dateTime42 = dateTime37.withZone(dateTimeZone38);
        org.joda.time.DateTime dateTime43 = localDate13.toDateTimeAtMidnight(dateTimeZone38);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime14 and dateTime41", (dateTime14.compareTo(dateTime41) == 0) == dateTime14.equals(dateTime41));
    }

    @Test
    public void test0286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0286");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 100, dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.plusDays(50);
        org.joda.time.Chronology chronology5 = localDate4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 100, dateTimeZone8);
        org.joda.time.LocalDate localDate11 = localDate9.plusDays(50);
        int int12 = localDate9.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate14 = localDate9.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        int int17 = dateTimeZone15.getOffset((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateMidnight dateMidnight18 = localDate9.toDateMidnight(dateTimeZone15);
        long long20 = dateTimeZone15.convertUTCToLocal(60000L);
        org.joda.time.chrono.ZonedChronology zonedChronology21 = org.joda.time.chrono.ZonedChronology.getInstance(chronology5, dateTimeZone15);
        org.joda.time.DurationField durationField22 = zonedChronology21.weeks();
        org.joda.time.DateTimeField dateTimeField23 = zonedChronology21.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField24 = zonedChronology21.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField25 = zonedChronology21.minuteOfHour();
        org.joda.time.DurationField durationField26 = zonedChronology21.eras();
        org.joda.time.DateTimeField dateTimeField27 = zonedChronology21.dayOfMonth();
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField22 and durationField26", Math.signum(durationField22.compareTo(durationField26)) == -Math.signum(durationField26.compareTo(durationField22)));
    }

    @Test
    public void test0287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0287");
        java.lang.String[] strArray3 = new java.lang.String[] { "+00:00", "zh_TW", "centuries" };
        java.util.LinkedHashSet<java.lang.String> strSet4 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet4, strArray3);
        strSet4.clear();
        java.util.Locale locale7 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet8 = locale7.getUnicodeLocaleAttributes();
        boolean boolean9 = strSet8.isEmpty();
        java.util.Locale locale10 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet11 = locale10.getUnicodeLocaleAttributes();
        boolean boolean12 = strSet11.isEmpty();
        boolean boolean13 = strSet8.removeAll((java.util.Collection<java.lang.String>) strSet11);
        boolean boolean14 = strSet4.addAll((java.util.Collection<java.lang.String>) strSet8);
        java.util.Locale locale15 = java.util.Locale.JAPAN;
        java.util.Set<java.lang.String> strSet16 = locale15.getUnicodeLocaleAttributes();
        java.util.Iterator<java.lang.String> strItor17 = strSet16.iterator();
        java.util.stream.Stream<java.lang.String> strStream18 = strSet16.parallelStream();
        java.util.Locale locale19 = java.util.Locale.JAPAN;
        java.util.Set<java.lang.String> strSet20 = locale19.getUnicodeLocaleAttributes();
        java.util.Iterator<java.lang.String> strItor21 = strSet20.iterator();
        boolean boolean22 = strSet16.removeAll((java.util.Collection<java.lang.String>) strSet20);
        boolean boolean23 = strSet8.containsAll((java.util.Collection<java.lang.String>) strSet16);
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime26 = dateTime24.minusHours((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int28 = dateTime26.get(dateTimeFieldType27);
        org.joda.time.DateTime dateTime30 = dateTime26.minusMillis((int) '#');
        org.joda.time.DateTime dateTime32 = dateTime30.plusDays(11);
        org.joda.time.DateTime dateTime35 = dateTime30.withDurationAdded((long) (byte) 10, 11);
        org.joda.time.DateTimeZone dateTimeZone36 = dateTime30.getZone();
        org.joda.time.DateTime dateTime38 = dateTime30.minusDays(22);
        org.joda.time.DateTime dateTime40 = dateTime30.withYearOfCentury(14);
        org.joda.time.Instant instant41 = org.joda.time.Instant.now();
        org.joda.time.Instant instant43 = instant41.plus((long) 11753187);
        org.joda.time.ReadableDuration readableDuration44 = null;
        org.joda.time.Instant instant45 = instant43.plus(readableDuration44);
        boolean boolean46 = dateTime30.equals((java.lang.Object) instant45);
        org.joda.time.DateTime.Property property47 = dateTime30.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime48 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property49 = localDateTime48.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.LocalDateTime localDateTime52 = localDateTime48.withField(dateTimeFieldType50, (int) (short) 10);
        org.joda.time.LocalDateTime localDateTime54 = localDateTime48.plusWeeks((-1));
        org.joda.time.LocalDateTime localDateTime56 = localDateTime54.withMillisOfSecond((int) '4');
        org.joda.time.LocalDateTime localDateTime58 = localDateTime54.plusWeeks(26160458);
        org.joda.time.LocalDateTime localDateTime60 = localDateTime54.minusMinutes((int) 'u');
        org.joda.time.LocalDateTime localDateTime62 = localDateTime60.minusMonths(3);
        org.joda.time.DateTime dateTime63 = dateTime30.withFields((org.joda.time.ReadablePartial) localDateTime60);
        org.joda.time.DateTime dateTime65 = dateTime63.plusHours(11764640);
        org.joda.time.DateTime dateTime67 = dateTime63.plusDays(11811527);
        boolean boolean68 = strSet8.contains((java.lang.Object) dateTime67);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime24 and instant41", (dateTime24.compareTo(instant41) == 0) == dateTime24.equals(instant41));
    }

    @Test
    public void test0288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0288");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        int int1 = dateTime0.getDayOfYear();
        org.joda.time.DateTime dateTime3 = dateTime0.withYear(11751002);
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime();
        int int5 = dateTime4.getDayOfYear();
        org.joda.time.DateTime dateTime7 = dateTime4.withYear(11751002);
        org.joda.time.Instant instant8 = dateTime4.toInstant();
        boolean boolean9 = dateTime0.isEqual((org.joda.time.ReadableInstant) instant8);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime12 = dateTime10.withMinuteOfHour(14);
        org.joda.time.DateTime dateTime14 = dateTime10.withCenturyOfEra(50);
        org.joda.time.DateTime dateTime15 = dateTime14.toDateTime();
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.DateTime dateTime17 = dateTime14.minus(readablePeriod16);
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime20 = dateTime18.withMinuteOfHour(14);
        org.joda.time.DateTime dateTime22 = dateTime18.withCenturyOfEra(50);
        org.joda.time.DateTime dateTime23 = dateTime22.toDateTime();
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.DateTime dateTime25 = dateTime22.minus(readablePeriod24);
        boolean boolean26 = dateTime17.isAfter((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalTime localTime28 = new org.joda.time.LocalTime(dateTimeZone27);
        org.joda.time.LocalTime localTime30 = localTime28.minusHours(0);
        org.joda.time.LocalTime localTime32 = localTime30.plusMillis(8);
        org.joda.time.LocalTime localTime34 = localTime32.plusMinutes(26156834);
        org.joda.time.LocalTime localTime36 = localTime32.withMillisOfDay(11764152);
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = org.joda.time.DateTimeFieldType.centuryOfEra();
        boolean boolean38 = localTime32.isSupported(dateTimeFieldType37);
        org.joda.time.DateTime dateTime40 = dateTime25.withField(dateTimeFieldType37, 917);
        org.joda.time.DateTime dateTime42 = dateTime25.plusSeconds(11865436);
        boolean boolean43 = dateTime0.isBefore((org.joda.time.ReadableInstant) dateTime25);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and instant8", (dateTime4.compareTo(instant8) == 0) == dateTime4.equals(instant8));
    }

    @Test
    public void test0289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0289");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property1 = localDateTime0.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withField(dateTimeFieldType2, (int) (short) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.minusYears(5);
        int int7 = localDateTime0.getYearOfCentury();
        org.joda.time.LocalDateTime.Property property8 = localDateTime0.millisOfDay();
        org.joda.time.LocalDateTime.Property property9 = localDateTime0.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime10 = property9.roundHalfEvenCopy();
        java.lang.String str12 = localDateTime10.toString("1970-01-01");
        java.lang.String str13 = localDateTime10.toString();
        org.joda.time.Instant instant14 = new org.joda.time.Instant();
        org.joda.time.Instant instant16 = instant14.withMillis((long) 11);
        org.joda.time.Instant instant17 = instant16.toInstant();
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.Instant instant19 = instant16.minus(readableDuration18);
        org.joda.time.Instant instant20 = instant16.toInstant();
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.Instant instant22 = instant16.plus(readableDuration21);
        org.joda.time.Instant instant23 = new org.joda.time.Instant();
        org.joda.time.Instant instant25 = instant23.withMillis((long) 11);
        org.joda.time.Instant instant26 = instant25.toInstant();
        org.joda.time.Chronology chronology27 = instant25.getChronology();
        org.joda.time.MutableDateTime mutableDateTime28 = instant25.toMutableDateTimeISO();
        boolean boolean29 = instant16.isAfter((org.joda.time.ReadableInstant) instant25);
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property31 = localDateTime30.minuteOfHour();
        org.joda.time.LocalDateTime.Property property32 = localDateTime30.minuteOfHour();
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = property32.getFieldType();
        org.joda.time.DurationFieldType durationFieldType34 = dateTimeFieldType33.getDurationType();
        boolean boolean35 = instant16.isSupported(dateTimeFieldType33);
        org.joda.time.LocalDateTime.Property property36 = localDateTime10.property(dateTimeFieldType33);
        org.joda.time.LocalDateTime localDateTime37 = property36.roundHalfFloorCopy();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant16 and mutableDateTime28", (instant16.compareTo(mutableDateTime28) == 0) == instant16.equals(mutableDateTime28));
    }

    @Test
    public void test0290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0290");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 100, dateTimeZone1);
        java.util.Date date3 = localDate2.toDate();
        org.joda.time.DateTime dateTime4 = localDate2.toDateTimeAtMidnight();
        int int5 = localDate2.getYearOfCentury();
        org.joda.time.DateTime dateTime6 = localDate2.toDateTimeAtCurrentTime();
        org.joda.time.DateTime dateTime8 = dateTime6.minusWeeks(11867719);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime11 = dateTime9.withMinuteOfHour(14);
        org.joda.time.DateTime dateTime13 = dateTime9.withCenturyOfEra(50);
        org.joda.time.Instant instant14 = new org.joda.time.Instant();
        org.joda.time.Instant instant16 = instant14.minus((long) 2);
        int int17 = dateTime13.compareTo((org.joda.time.ReadableInstant) instant14);
        org.joda.time.DateTime dateTime19 = dateTime13.minusWeeks(26194721);
        boolean boolean20 = dateTime8.isEqual((org.joda.time.ReadableInstant) dateTime19);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime9 and instant14", (dateTime9.compareTo(instant14) == 0) == dateTime9.equals(instant14));
    }

    @Test
    public void test0291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0291");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        int int1 = localDateTime0.getDayOfMonth();
        org.joda.time.LocalDateTime.Property property2 = localDateTime0.dayOfYear();
        int int3 = localDateTime0.getMillisOfSecond();
        org.joda.time.LocalDateTime.Property property4 = localDateTime0.era();
        org.joda.time.Instant instant5 = new org.joda.time.Instant();
        org.joda.time.Instant instant7 = instant5.minus((long) 2);
        org.joda.time.MutableDateTime mutableDateTime8 = instant5.toMutableDateTimeISO();
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.Instant instant10 = instant5.plus(readableDuration9);
        int int11 = property4.compareTo((org.joda.time.ReadableInstant) instant5);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime8 and instant5", (mutableDateTime8.compareTo(instant5) == 0) == mutableDateTime8.equals(instant5));
    }

    @Test
    public void test0292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0292");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 100, dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.plusDays(50);
        org.joda.time.Chronology chronology5 = localDate4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 100, dateTimeZone8);
        org.joda.time.LocalDate localDate11 = localDate9.plusDays(50);
        int int12 = localDate9.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate14 = localDate9.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        int int17 = dateTimeZone15.getOffset((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateMidnight dateMidnight18 = localDate9.toDateMidnight(dateTimeZone15);
        long long20 = dateTimeZone15.convertUTCToLocal(60000L);
        org.joda.time.chrono.ZonedChronology zonedChronology21 = org.joda.time.chrono.ZonedChronology.getInstance(chronology5, dateTimeZone15);
        org.joda.time.DurationField durationField22 = zonedChronology21.weeks();
        org.joda.time.DateTimeField dateTimeField23 = zonedChronology21.year();
        org.joda.time.DateTimeZone dateTimeZone24 = zonedChronology21.getZone();
        org.joda.time.DateTimeField dateTimeField25 = zonedChronology21.weekyear();
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        long long29 = zonedChronology21.add(readablePeriod26, (long) 11783576, 26163273);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        long long33 = zonedChronology21.add(readablePeriod30, 30902150430976312L, 0);
        org.joda.time.DurationField durationField34 = zonedChronology21.eras();
        org.joda.time.DateTimeField dateTimeField35 = zonedChronology21.clockhourOfHalfday();
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField22 and durationField34", Math.signum(durationField22.compareTo(durationField34)) == -Math.signum(durationField34.compareTo(durationField22)));
    }

    @Test
    public void test0293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0293");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 10);
        org.joda.time.DateTime dateTime3 = dateTime1.plusMinutes(49);
        org.joda.time.DateTime dateTime5 = dateTime3.plus(10L);
        org.joda.time.Chronology chronology6 = dateTime5.getChronology();
        org.joda.time.DateTime dateTime8 = dateTime5.minusMonths((int) 'a');
        org.joda.time.DateTime dateTime10 = dateTime8.plusSeconds(11781671);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalTime localTime12 = new org.joda.time.LocalTime(dateTimeZone11);
        org.joda.time.LocalTime localTime13 = new org.joda.time.LocalTime(dateTimeZone11);
        int int15 = dateTimeZone11.getStandardOffset(100L);
        org.joda.time.MutableDateTime mutableDateTime16 = dateTime8.toMutableDateTime(dateTimeZone11);
        long long20 = dateTimeZone11.convertLocalToUTC((long) 2, true, (long) 11874926);
        long long23 = dateTimeZone11.adjustOffset((long) 26277, false);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime8 and mutableDateTime16", (dateTime8.compareTo(mutableDateTime16) == 0) == dateTime8.equals(mutableDateTime16));
    }

    @Test
    public void test0294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0294");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 100, dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.plusDays(50);
        org.joda.time.Chronology chronology5 = localDate4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.millisOfDay();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.DateTimeField dateTimeField8 = chronology5.minuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(59, 50);
        java.util.TimeZone timeZone13 = dateTimeZone12.toTimeZone();
        java.util.TimeZone timeZone14 = dateTimeZone12.toTimeZone();
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(72000000L, dateTimeZone12);
        int int17 = dateTimeZone12.getStandardOffset((long) 'u');
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate(dateTimeZone12);
        org.joda.time.chrono.ZonedChronology zonedChronology19 = org.joda.time.chrono.ZonedChronology.getInstance(chronology5, dateTimeZone12);
        org.joda.time.DateTimeField dateTimeField20 = zonedChronology19.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField21 = zonedChronology19.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField22 = zonedChronology19.year();
        org.joda.time.DurationField durationField23 = zonedChronology19.weeks();
        org.joda.time.DateTimeField dateTimeField24 = zonedChronology19.millisOfSecond();
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime27 = dateTime25.minusHours((int) (short) 100);
        org.joda.time.DateTime dateTime29 = dateTime27.minus(0L);
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate((long) 100, dateTimeZone31);
        org.joda.time.DateTime dateTime33 = dateTime29.withZone(dateTimeZone31);
        org.joda.time.Chronology chronology34 = zonedChronology19.withZone(dateTimeZone31);
        org.joda.time.DurationField durationField35 = zonedChronology19.months();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime27 and dateTime33", (dateTime27.compareTo(dateTime33) == 0) == dateTime27.equals(dateTime33));
    }

    @Test
    public void test0295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0295");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        int int1 = dateTime0.getDayOfYear();
        org.joda.time.DateTime dateTime3 = dateTime0.withYear(11751002);
        org.joda.time.Instant instant4 = dateTime0.toInstant();
        org.joda.time.DateTime.Property property5 = dateTime0.dayOfWeek();
        org.joda.time.DateTime.Property property6 = dateTime0.secondOfMinute();
        org.joda.time.DateTime dateTime8 = dateTime0.plusHours(11763042);
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.DateTime dateTime11 = dateTime8.withDurationAdded(readableDuration9, 50);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.DateTime dateTime13 = dateTime8.minus(readablePeriod12);
        org.joda.time.DateTime dateTime15 = dateTime8.plusWeeks(11929596);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime0 and instant4", (dateTime0.compareTo(instant4) == 0) == dateTime0.equals(instant4));
    }

    @Test
    public void test0296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0296");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime2 = dateTime0.minusHours((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int4 = dateTime2.get(dateTimeFieldType3);
        org.joda.time.DateTime dateTime6 = dateTime2.minusMillis((int) '#');
        org.joda.time.DateTime dateTime8 = dateTime6.plusDays(11);
        int int9 = dateTime8.getCenturyOfEra();
        org.joda.time.DateTime dateTime11 = dateTime8.plusDays(780);
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime14 = dateTime12.minusHours((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalTime localTime16 = new org.joda.time.LocalTime(dateTimeZone15);
        org.joda.time.DateTime dateTime17 = dateTime12.withZone(dateTimeZone15);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalTime localTime19 = new org.joda.time.LocalTime(dateTimeZone18);
        org.joda.time.LocalTime localTime20 = new org.joda.time.LocalTime(dateTimeZone18);
        org.joda.time.LocalTime localTime22 = localTime20.plusSeconds(10);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = localTime20.getFieldType(0);
        org.joda.time.DateTime dateTime26 = dateTime12.withField(dateTimeFieldType24, 5);
        org.joda.time.DateTime.Property property27 = dateTime26.secondOfMinute();
        org.joda.time.DateTime dateTime29 = property27.addToCopy((int) (byte) 0);
        boolean boolean30 = dateTime11.isAfter((org.joda.time.ReadableInstant) dateTime29);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime0 and dateTime17", (dateTime0.compareTo(dateTime17) == 0) == dateTime0.equals(dateTime17));
    }

    @Test
    public void test0297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0297");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 100, dateTimeZone1);
        org.joda.time.LocalDate.Property property3 = localDate2.weekyear();
        org.joda.time.LocalDate localDate5 = localDate2.plusDays(51);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.LocalDate localDate7 = localDate2.minus(readablePeriod6);
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.Interval interval9 = localDate7.toInterval(dateTimeZone8);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate((long) 100, dateTimeZone11);
        org.joda.time.LocalDate localDate14 = localDate12.plusDays(50);
        int int15 = localDate12.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate17 = localDate12.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime();
        int int20 = dateTimeZone18.getOffset((org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.DateMidnight dateMidnight21 = localDate12.toDateMidnight(dateTimeZone18);
        long long23 = dateTimeZone18.convertUTCToLocal(60000L);
        org.joda.time.LocalDate localDate24 = org.joda.time.LocalDate.now(dateTimeZone18);
        long long26 = dateTimeZone18.previousTransition((long) 11763042);
        org.joda.time.DateTime dateTime27 = localDate7.toDateTimeAtCurrentTime(dateTimeZone18);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate30 = new org.joda.time.LocalDate((long) 100, dateTimeZone29);
        org.joda.time.LocalDate localDate32 = localDate30.plusDays(50);
        org.joda.time.Chronology chronology33 = localDate32.getChronology();
        org.joda.time.DateTimeField dateTimeField34 = chronology33.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate37 = new org.joda.time.LocalDate((long) 100, dateTimeZone36);
        org.joda.time.LocalDate localDate39 = localDate37.plusDays(50);
        int int40 = localDate37.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate42 = localDate37.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime();
        int int45 = dateTimeZone43.getOffset((org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.DateMidnight dateMidnight46 = localDate37.toDateMidnight(dateTimeZone43);
        long long48 = dateTimeZone43.convertUTCToLocal(60000L);
        org.joda.time.chrono.ZonedChronology zonedChronology49 = org.joda.time.chrono.ZonedChronology.getInstance(chronology33, dateTimeZone43);
        org.joda.time.DurationField durationField50 = zonedChronology49.weeks();
        org.joda.time.DateTimeField dateTimeField51 = zonedChronology49.year();
        org.joda.time.DateTimeZone dateTimeZone52 = zonedChronology49.getZone();
        org.joda.time.DurationField durationField53 = zonedChronology49.weekyears();
        org.joda.time.DateTimeField dateTimeField54 = zonedChronology49.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField55 = zonedChronology49.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField56 = zonedChronology49.weekyear();
        org.joda.time.DateTimeField dateTimeField57 = zonedChronology49.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField58 = zonedChronology49.weekyear();
        org.joda.time.DateTimeField dateTimeField59 = zonedChronology49.clockhourOfDay();
        org.joda.time.DateTime dateTime60 = dateTime27.toDateTime((org.joda.time.Chronology) zonedChronology49);
        org.joda.time.DateTimeField dateTimeField61 = zonedChronology49.yearOfEra();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime27 and dateTime60", (dateTime27.compareTo(dateTime60) == 0) == dateTime27.equals(dateTime60));
    }

    @Test
    public void test0298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0298");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 10);
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime();
        org.joda.time.Instant instant3 = dateTime2.toInstant();
        org.joda.time.Chronology chronology4 = dateTime2.getChronology();
        long long5 = dateTime2.getMillis();
        boolean boolean6 = dateTime1.isEqual((org.joda.time.ReadableInstant) dateTime2);
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime();
        int int8 = dateTime7.getDayOfYear();
        org.joda.time.DateTime dateTime10 = dateTime7.withYear(11751002);
        org.joda.time.Instant instant11 = dateTime7.toInstant();
        org.joda.time.DateTime dateTime13 = dateTime7.plusYears(26160835);
        boolean boolean14 = dateTime2.isBefore((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime17 = dateTime15.minusHours((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int19 = dateTime17.get(dateTimeFieldType18);
        org.joda.time.DateTime dateTime21 = dateTime17.minusMillis((int) '#');
        org.joda.time.DateTime dateTime23 = dateTime21.plusDays(11);
        org.joda.time.DateTime dateTime26 = dateTime21.withDurationAdded((long) (byte) 10, 11);
        org.joda.time.DateTimeZone dateTimeZone27 = dateTime21.getZone();
        org.joda.time.DateTime dateTime29 = dateTime21.minusDays(22);
        org.joda.time.DateTime dateTime31 = dateTime29.plusMillis(11789419);
        boolean boolean32 = dateTime31.isAfterNow();
        org.joda.time.DateTime.Property property33 = dateTime31.yearOfEra();
        int int34 = dateTime13.compareTo((org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.DateTime.Property property35 = dateTime13.millisOfSecond();
        org.joda.time.Chronology chronology36 = dateTime13.getChronology();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and instant3", (dateTime2.compareTo(instant3) == 0) == dateTime2.equals(instant3));
    }

    @Test
    public void test0299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0299");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 100, dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.plusDays(50);
        org.joda.time.DateTime dateTime5 = localDate4.toDateTimeAtMidnight();
        org.joda.time.LocalDate.Property property6 = localDate4.yearOfEra();
        org.joda.time.DateTime dateTime7 = localDate4.toDateTimeAtCurrentTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        boolean boolean9 = localDate4.equals((java.lang.Object) dateTimeFieldType8);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate((long) 100, dateTimeZone11);
        org.joda.time.LocalDate localDate14 = localDate12.plusDays(50);
        org.joda.time.Chronology chronology15 = localDate14.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate((long) 100, dateTimeZone18);
        org.joda.time.LocalDate localDate21 = localDate19.plusDays(50);
        int int22 = localDate19.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate24 = localDate19.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime();
        int int27 = dateTimeZone25.getOffset((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.DateMidnight dateMidnight28 = localDate19.toDateMidnight(dateTimeZone25);
        long long30 = dateTimeZone25.convertUTCToLocal(60000L);
        org.joda.time.chrono.ZonedChronology zonedChronology31 = org.joda.time.chrono.ZonedChronology.getInstance(chronology15, dateTimeZone25);
        org.joda.time.DurationField durationField32 = zonedChronology31.weeks();
        org.joda.time.DateTimeField dateTimeField33 = zonedChronology31.year();
        org.joda.time.DateTimeZone dateTimeZone34 = zonedChronology31.getZone();
        org.joda.time.DateTimeField dateTimeField35 = zonedChronology31.dayOfMonth();
        org.joda.time.DurationField durationField36 = zonedChronology31.weeks();
        org.joda.time.DateTimeField dateTimeField37 = zonedChronology31.year();
        boolean boolean38 = dateTimeFieldType8.isSupported((org.joda.time.Chronology) zonedChronology31);
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate41 = new org.joda.time.LocalDate((long) 100, dateTimeZone40);
        org.joda.time.LocalDate localDate43 = localDate41.plusDays(50);
        org.joda.time.Chronology chronology44 = localDate43.getChronology();
        org.joda.time.DateTimeField dateTimeField45 = chronology44.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate48 = new org.joda.time.LocalDate((long) 100, dateTimeZone47);
        org.joda.time.LocalDate localDate50 = localDate48.plusDays(50);
        int int51 = localDate48.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate53 = localDate48.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime();
        int int56 = dateTimeZone54.getOffset((org.joda.time.ReadableInstant) dateTime55);
        org.joda.time.DateMidnight dateMidnight57 = localDate48.toDateMidnight(dateTimeZone54);
        long long59 = dateTimeZone54.convertUTCToLocal(60000L);
        org.joda.time.chrono.ZonedChronology zonedChronology60 = org.joda.time.chrono.ZonedChronology.getInstance(chronology44, dateTimeZone54);
        org.joda.time.DurationField durationField61 = zonedChronology60.eras();
        org.joda.time.DateTimeField dateTimeField62 = zonedChronology60.minuteOfDay();
        org.joda.time.Chronology chronology63 = zonedChronology60.withUTC();
        org.joda.time.DateTimeField dateTimeField64 = zonedChronology60.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField65 = zonedChronology60.hourOfDay();
        boolean boolean66 = dateTimeFieldType8.isSupported((org.joda.time.Chronology) zonedChronology60);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField32 and durationField61", Math.signum(durationField32.compareTo(durationField61)) == -Math.signum(durationField61.compareTo(durationField32)));
    }

    @Test
    public void test0300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0300");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 100, dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.plusDays(50);
        org.joda.time.Chronology chronology5 = localDate4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 100, dateTimeZone8);
        org.joda.time.LocalDate localDate11 = localDate9.plusDays(50);
        int int12 = localDate9.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate14 = localDate9.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        int int17 = dateTimeZone15.getOffset((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateMidnight dateMidnight18 = localDate9.toDateMidnight(dateTimeZone15);
        long long20 = dateTimeZone15.convertUTCToLocal(60000L);
        org.joda.time.chrono.ZonedChronology zonedChronology21 = org.joda.time.chrono.ZonedChronology.getInstance(chronology5, dateTimeZone15);
        org.joda.time.DurationField durationField22 = zonedChronology21.eras();
        org.joda.time.DateTimeField dateTimeField23 = zonedChronology21.minuteOfDay();
        org.joda.time.Chronology chronology24 = zonedChronology21.withUTC();
        org.joda.time.DateTimeField dateTimeField25 = zonedChronology21.monthOfYear();
        org.joda.time.DateTimeField dateTimeField26 = zonedChronology21.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField27 = zonedChronology21.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField28 = zonedChronology21.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology21.millisOfDay();
        org.joda.time.DurationField durationField30 = zonedChronology21.seconds();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField22, durationField30, and durationField22", !(durationField22.compareTo(durationField30) == 0) || (Math.signum(durationField22.compareTo(durationField22)) == Math.signum(durationField30.compareTo(durationField22))));
    }

    @Test
    public void test0301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0301");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.Instant instant1 = dateTime0.toInstant();
        org.joda.time.Chronology chronology2 = dateTime0.getChronology();
        org.joda.time.DateTime dateTime4 = dateTime0.plusDays(2);
        int int5 = dateTime0.getWeekOfWeekyear();
        org.joda.time.DateTime.Property property6 = dateTime0.weekyear();
        org.joda.time.DateTime dateTime7 = property6.roundCeilingCopy();
        org.joda.time.DateTimeField dateTimeField8 = property6.getField();
        org.joda.time.tz.NameProvider nameProvider9 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeZone.setNameProvider(nameProvider9);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate((long) 100, dateTimeZone12);
        org.joda.time.LocalDate localDate15 = localDate13.plusDays(50);
        org.joda.time.Chronology chronology16 = localDate15.getChronology();
        org.joda.time.DateTimeField dateTimeField17 = chronology16.millisOfDay();
        java.util.Locale locale20 = java.util.Locale.forLanguageTag("hi!");
        java.util.Locale locale21 = java.util.Locale.JAPAN;
        java.util.Set<java.lang.String> strSet22 = locale21.getUnicodeLocaleAttributes();
        java.lang.String str23 = locale20.getDisplayLanguage(locale21);
        java.lang.String str24 = dateTimeField17.getAsShortText(26150856, locale21);
        java.lang.String str27 = nameProvider9.getName(locale21, "", "26150856");
        java.util.Locale locale28 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str31 = nameProvider9.getName(locale28, "hi!", "1970");
        java.util.Locale.Builder builder32 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder33 = builder32.clear();
        java.util.Locale.Builder builder34 = builder33.clearExtensions();
        java.util.Locale locale35 = builder33.build();
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate38 = new org.joda.time.LocalDate((long) 100, dateTimeZone37);
        org.joda.time.LocalDate localDate40 = localDate38.plusDays(50);
        org.joda.time.DateTime dateTime41 = localDate40.toDateTimeAtMidnight();
        org.joda.time.LocalDate.Property property42 = localDate40.yearOfEra();
        org.joda.time.LocalDate localDate43 = property42.roundHalfCeilingCopy();
        org.joda.time.LocalDate localDate44 = property42.roundHalfEvenCopy();
        java.util.Locale locale46 = java.util.Locale.TAIWAN;
        org.joda.time.LocalDate localDate47 = property42.setCopy("2017", locale46);
        java.lang.String str48 = locale35.getDisplayCountry(locale46);
        java.util.Set<java.lang.Character> charSet49 = locale46.getExtensionKeys();
        java.lang.String str50 = locale46.getLanguage();
        java.lang.String str51 = locale28.getDisplayLanguage(locale46);
        java.lang.String str52 = property6.getAsShortText(locale28);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime0 and instant1", (dateTime0.compareTo(instant1) == 0) == dateTime0.equals(instant1));
    }

    @Test
    public void test0302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0302");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 100, dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.plusDays(50);
        org.joda.time.Chronology chronology5 = localDate4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 100, dateTimeZone8);
        org.joda.time.LocalDate localDate11 = localDate9.plusDays(50);
        int int12 = localDate9.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate14 = localDate9.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        int int17 = dateTimeZone15.getOffset((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateMidnight dateMidnight18 = localDate9.toDateMidnight(dateTimeZone15);
        long long20 = dateTimeZone15.convertUTCToLocal(60000L);
        org.joda.time.chrono.ZonedChronology zonedChronology21 = org.joda.time.chrono.ZonedChronology.getInstance(chronology5, dateTimeZone15);
        org.joda.time.DurationField durationField22 = zonedChronology21.weeks();
        org.joda.time.DurationField durationField23 = zonedChronology21.millis();
        org.joda.time.DurationField durationField24 = zonedChronology21.millis();
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime();
        int int26 = dateTime25.getDayOfYear();
        org.joda.time.DateTime dateTime28 = dateTime25.withYear(11751002);
        org.joda.time.Instant instant29 = dateTime25.toInstant();
        org.joda.time.DateTime.Property property30 = dateTime25.monthOfYear();
        boolean boolean31 = zonedChronology21.equals((java.lang.Object) dateTime25);
        org.joda.time.DateTimeField dateTimeField32 = zonedChronology21.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField33 = zonedChronology21.weekyearOfCentury();
        org.joda.time.DurationField durationField34 = dateTimeField33.getDurationField();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime16 and instant29", (dateTime16.compareTo(instant29) == 0) == dateTime16.equals(instant29));
    }

    @Test
    public void test0303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0303");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime2 = dateTime0.minusHours((int) (short) 100);
        org.joda.time.DateMidnight dateMidnight3 = dateTime2.toDateMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.dayOfYear();
        int int5 = dateTime2.get(dateTimeFieldType4);
        int int6 = dateTime2.getDayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 100, dateTimeZone8);
        org.joda.time.LocalDate localDate11 = localDate9.plusDays(50);
        org.joda.time.Chronology chronology12 = localDate11.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField14 = chronology12.dayOfMonth();
        org.joda.time.DateTime dateTime15 = dateTime2.withChronology(chronology12);
        org.joda.time.DateTimeField dateTimeField16 = chronology12.halfdayOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and dateTime15", (dateTime2.compareTo(dateTime15) == 0) == dateTime2.equals(dateTime15));
    }

    @Test
    public void test0304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0304");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime2 = dateTime0.minusHours((int) (short) 100);
        org.joda.time.DateTime dateTime4 = dateTime2.minus(0L);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) 100, dateTimeZone6);
        org.joda.time.DateTime dateTime8 = dateTime4.withZone(dateTimeZone6);
        org.joda.time.LocalDate localDate9 = dateTime4.toLocalDate();
        org.joda.time.LocalDate localDate11 = localDate9.plusMonths(49);
        org.joda.time.DurationFieldType durationFieldType12 = org.joda.time.DurationFieldType.years();
        org.joda.time.LocalDate localDate14 = localDate9.withFieldAdded(durationFieldType12, 26275822);
        int int15 = localDate14.getWeekOfWeekyear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and dateTime8", (dateTime2.compareTo(dateTime8) == 0) == dateTime2.equals(dateTime8));
    }

    @Test
    public void test0305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0305");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 100, dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.plusDays(50);
        org.joda.time.Chronology chronology5 = localDate4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 100, dateTimeZone8);
        org.joda.time.LocalDate localDate11 = localDate9.plusDays(50);
        int int12 = localDate9.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate14 = localDate9.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        int int17 = dateTimeZone15.getOffset((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateMidnight dateMidnight18 = localDate9.toDateMidnight(dateTimeZone15);
        long long20 = dateTimeZone15.convertUTCToLocal(60000L);
        org.joda.time.chrono.ZonedChronology zonedChronology21 = org.joda.time.chrono.ZonedChronology.getInstance(chronology5, dateTimeZone15);
        org.joda.time.DurationField durationField22 = zonedChronology21.weeks();
        org.joda.time.DateTimeField dateTimeField23 = zonedChronology21.weekyear();
        org.joda.time.DurationField durationField24 = zonedChronology21.weekyears();
        long long28 = zonedChronology21.add(0L, 11776486L, 0);
        org.joda.time.DurationField durationField29 = zonedChronology21.halfdays();
        org.joda.time.DateTimeField dateTimeField30 = zonedChronology21.clockhourOfDay();
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((org.joda.time.Chronology) zonedChronology21);
        org.joda.time.DateTime.Property property32 = dateTime31.secondOfMinute();
        java.util.Date date33 = dateTime31.toDate();
        org.joda.time.LocalDate localDate34 = org.joda.time.LocalDate.fromDateFields(date33);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime16 and dateTime31", (dateTime16.compareTo(dateTime31) == 0) == dateTime16.equals(dateTime31));
    }

    @Test
    public void test0306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0306");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime2 = dateTime0.minusHours((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int4 = dateTime2.get(dateTimeFieldType3);
        org.joda.time.DateTime dateTime6 = dateTime2.minusMillis((int) '#');
        org.joda.time.DateTime.Property property7 = dateTime2.weekyear();
        int int8 = dateTime2.getEra();
        org.joda.time.DurationFieldType durationFieldType9 = org.joda.time.DurationFieldType.weeks();
        org.joda.time.DateTime dateTime11 = dateTime2.withFieldAdded(durationFieldType9, 11844408);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) 100, dateTimeZone13);
        org.joda.time.LocalDate localDate16 = localDate14.plusDays(50);
        org.joda.time.DateTime dateTime17 = localDate16.toDateTimeAtMidnight();
        boolean boolean18 = dateTime11.isEqual((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.Instant instant19 = dateTime17.toInstant();
        org.joda.time.DateTime dateTime20 = instant19.toDateTime();
        java.util.Locale locale21 = java.util.Locale.JAPAN;
        boolean boolean22 = locale21.hasExtensions();
        java.lang.String str23 = locale21.getVariant();
        java.lang.String str24 = locale21.toLanguageTag();
        java.util.Calendar calendar25 = dateTime20.toCalendar(locale21);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime17 and instant19", (dateTime17.compareTo(instant19) == 0) == dateTime17.equals(instant19));
    }

    @Test
    public void test0307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0307");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        int int1 = dateTime0.getDayOfYear();
        org.joda.time.DateTime dateTime3 = dateTime0.withYear(11751002);
        org.joda.time.DateTime dateTime5 = dateTime0.minusYears(100);
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime8 = dateTime6.minusHours((int) (short) 100);
        org.joda.time.DateMidnight dateMidnight9 = dateTime8.toDateMidnight();
        int int10 = dateMidnight9.getDayOfYear();
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime();
        int int12 = dateTime11.getDayOfYear();
        org.joda.time.DateTime dateTime14 = dateTime11.withYear(11751002);
        org.joda.time.Instant instant15 = dateTime11.toInstant();
        org.joda.time.DateTime dateTime17 = dateTime11.plusYears(26160835);
        boolean boolean19 = dateTime17.equals((java.lang.Object) 0.0f);
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime22 = dateTime20.minusHours((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int24 = dateTime22.get(dateTimeFieldType23);
        org.joda.time.DateTime dateTime26 = dateTime22.minusMillis((int) '#');
        org.joda.time.DateTime dateTime28 = dateTime26.plusDays(11);
        org.joda.time.DateTime dateTime31 = dateTime26.withDurationAdded((long) 11757696, (int) ' ');
        int int32 = dateTime26.getWeekOfWeekyear();
        org.joda.time.DateTime dateTime34 = dateTime26.minusWeeks(215400000);
        boolean boolean35 = dateTime17.isAfter((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = org.joda.time.DateTimeFieldType.centuryOfEra();
        int int37 = dateTime17.get(dateTimeFieldType36);
        boolean boolean38 = dateMidnight9.isSupported(dateTimeFieldType36);
        int int39 = dateTime0.get(dateTimeFieldType36);
        int int40 = dateTime0.getYear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime6 and instant15", (dateTime6.compareTo(instant15) == 0) == dateTime6.equals(instant15));
    }

    @Test
    public void test0308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0308");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 100, dateTimeZone1);
        org.joda.time.LocalDate.Property property3 = localDate2.weekyear();
        org.joda.time.LocalDate localDate5 = property3.setCopy(2022);
        org.joda.time.Instant instant6 = new org.joda.time.Instant();
        org.joda.time.Instant instant8 = instant6.withMillis((long) 11);
        org.joda.time.Instant instant9 = instant8.toInstant();
        org.joda.time.Chronology chronology10 = instant8.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) 100, dateTimeZone13);
        int int15 = dateTimeField11.getMaximumValue((org.joda.time.ReadablePartial) localDate14);
        int int17 = localDate14.getValue(2);
        org.joda.time.DateMidnight dateMidnight18 = localDate14.toDateMidnight();
        org.joda.time.LocalDate localDate20 = localDate14.plusMonths(26160535);
        int int21 = localDate20.getYear();
        boolean boolean22 = property3.equals((java.lang.Object) localDate20);
        org.joda.time.DateTime dateTime23 = localDate20.toDateTimeAtStartOfDay();
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.DateTime dateTime26 = dateTime23.withPeriodAdded(readablePeriod24, 11761333);
        org.joda.time.DateTime dateTime28 = dateTime23.minusHours(11735);
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime31 = dateTime29.minusHours((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int33 = dateTime31.get(dateTimeFieldType32);
        org.joda.time.DateTime dateTime35 = dateTime31.minusSeconds((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(59, 50);
        java.util.TimeZone timeZone41 = dateTimeZone40.toTimeZone();
        java.util.TimeZone timeZone42 = dateTimeZone40.toTimeZone();
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime(72000000L, dateTimeZone40);
        int int45 = dateTimeZone40.getStandardOffset((long) 'u');
        java.lang.String str47 = dateTimeZone40.getName(1645142400000L);
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime((long) 11779950, dateTimeZone40);
        org.joda.time.DateTime dateTime49 = dateTime31.withZoneRetainFields(dateTimeZone40);
        boolean boolean50 = dateTime23.equals((java.lang.Object) dateTimeZone40);
        org.joda.time.DateTime.Property property51 = dateTime23.centuryOfEra();
        org.joda.time.DateTime dateTime53 = dateTime23.withMillis((long) 11863811);
        org.joda.time.DateTime dateTime55 = dateTime53.withMillis((long) 11968144);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant6 and dateTime29", (instant6.compareTo(dateTime29) == 0) == instant6.equals(dateTime29));
    }

    @Test
    public void test0309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0309");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.Instant instant2 = instant0.withMillis((long) 11);
        org.joda.time.Instant instant3 = instant2.toInstant();
        org.joda.time.Instant instant5 = instant3.plus((long) 11757325);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate((long) 100, dateTimeZone7);
        org.joda.time.LocalDate localDate10 = localDate8.plusDays(50);
        org.joda.time.Chronology chronology11 = localDate10.getChronology();
        org.joda.time.DateTimeField dateTimeField12 = chronology11.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate((long) 100, dateTimeZone14);
        org.joda.time.LocalDate localDate17 = localDate15.plusDays(50);
        int int18 = localDate15.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate20 = localDate15.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime();
        int int23 = dateTimeZone21.getOffset((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.DateMidnight dateMidnight24 = localDate15.toDateMidnight(dateTimeZone21);
        long long26 = dateTimeZone21.convertUTCToLocal(60000L);
        org.joda.time.chrono.ZonedChronology zonedChronology27 = org.joda.time.chrono.ZonedChronology.getInstance(chronology11, dateTimeZone21);
        org.joda.time.DurationField durationField28 = zonedChronology27.weeks();
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology27.year();
        org.joda.time.DateTimeZone dateTimeZone30 = zonedChronology27.getZone();
        org.joda.time.DateTimeField dateTimeField31 = zonedChronology27.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField32 = zonedChronology27.yearOfEra();
        org.joda.time.MutableDateTime mutableDateTime33 = instant5.toMutableDateTime((org.joda.time.Chronology) zonedChronology27);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and dateTime22", (instant0.compareTo(dateTime22) == 0) == instant0.equals(dateTime22));
    }

    @Test
    public void test0310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0310");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime(dateTimeZone2);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = localTime3.getFieldType((int) (byte) 1);
        int int6 = localTime1.get(dateTimeFieldType5);
        org.joda.time.Instant instant7 = new org.joda.time.Instant();
        org.joda.time.Instant instant9 = instant7.withMillis((long) 11);
        org.joda.time.Instant instant10 = instant9.toInstant();
        org.joda.time.Chronology chronology11 = instant9.getChronology();
        org.joda.time.DateTimeField dateTimeField12 = chronology11.minuteOfDay();
        org.joda.time.Chronology chronology13 = chronology11.withUTC();
        org.joda.time.DurationField durationField14 = chronology13.months();
        org.joda.time.DateTimeField dateTimeField15 = chronology13.year();
        org.joda.time.DateTimeField dateTimeField16 = chronology13.minuteOfDay();
        org.joda.time.DurationField durationField17 = chronology13.weekyears();
        org.joda.time.DateTimeField dateTimeField18 = dateTimeFieldType5.getField(chronology13);
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime();
        org.joda.time.Instant instant21 = dateTime20.toInstant();
        org.joda.time.Chronology chronology22 = dateTime20.getChronology();
        boolean boolean23 = dateTime19.isEqual((org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalTime localTime25 = new org.joda.time.LocalTime(dateTimeZone24);
        org.joda.time.LocalTime localTime26 = new org.joda.time.LocalTime(dateTimeZone24);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalTime localTime28 = new org.joda.time.LocalTime(dateTimeZone27);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalTime localTime30 = new org.joda.time.LocalTime(dateTimeZone29);
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = localTime30.getFieldType((int) (byte) 1);
        int int33 = localTime28.get(dateTimeFieldType32);
        org.joda.time.LocalTime.Property property34 = localTime26.property(dateTimeFieldType32);
        org.joda.time.LocalTime localTime35 = property34.roundHalfFloorCopy();
        org.joda.time.LocalTime localTime36 = property34.getLocalTime();
        org.joda.time.LocalTime localTime37 = property34.roundFloorCopy();
        org.joda.time.LocalTime localTime39 = property34.addWrapFieldToCopy(26159400);
        org.joda.time.DateTimeField dateTimeField40 = property34.getField();
        org.joda.time.LocalTime localTime41 = property34.roundCeilingCopy();
        org.joda.time.LocalTime localTime43 = localTime41.minusHours(11753441);
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.UTC;
        int int46 = dateTimeZone44.getStandardOffset((long) (byte) 1);
        org.joda.time.DateTime dateTime47 = localTime43.toDateTimeToday(dateTimeZone44);
        org.joda.time.DateTime dateTime48 = dateTime19.withZone(dateTimeZone44);
        long long52 = dateTimeZone44.convertLocalToUTC((long) 19, false, (long) 11753234);
        org.joda.time.chrono.ZonedChronology zonedChronology53 = org.joda.time.chrono.ZonedChronology.getInstance(chronology13, dateTimeZone44);
        long long55 = dateTimeZone44.convertUTCToLocal((long) 11900235);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant7 and dateTime19", (instant7.compareTo(dateTime19) == 0) == instant7.equals(dateTime19));
    }

    @Test
    public void test0311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0311");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.Instant instant2 = instant0.withMillis((long) 11);
        org.joda.time.Instant instant3 = instant2.toInstant();
        org.joda.time.Instant instant5 = instant3.plus((long) 11757325);
        org.joda.time.Instant instant6 = new org.joda.time.Instant();
        org.joda.time.Instant instant8 = instant6.minus((long) 2);
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.Instant instant10 = instant8.plus(readableDuration9);
        boolean boolean11 = instant3.isBefore((org.joda.time.ReadableInstant) instant8);
        org.joda.time.DateTime dateTime12 = instant3.toDateTimeISO();
        org.joda.time.DateTime.Property property13 = dateTime12.weekyear();
        java.util.Locale locale14 = null;
        int int15 = property13.getMaximumTextLength(locale14);
        java.lang.String str16 = property13.getAsText();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant2 and dateTime12", (instant2.compareTo(dateTime12) == 0) == instant2.equals(dateTime12));
    }

    @Test
    public void test0312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0312");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 100, dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.plusDays(50);
        org.joda.time.DateTime dateTime5 = localDate4.toDateTimeAtMidnight();
        org.joda.time.LocalDate.Property property6 = localDate4.yearOfEra();
        org.joda.time.DateTime dateTime7 = localDate4.toDateTimeAtCurrentTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        boolean boolean9 = localDate4.equals((java.lang.Object) dateTimeFieldType8);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate((long) 100, dateTimeZone11);
        org.joda.time.LocalDate localDate14 = localDate12.plusDays(50);
        org.joda.time.Chronology chronology15 = localDate14.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate((long) 100, dateTimeZone18);
        org.joda.time.LocalDate localDate21 = localDate19.plusDays(50);
        int int22 = localDate19.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate24 = localDate19.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime();
        int int27 = dateTimeZone25.getOffset((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.DateMidnight dateMidnight28 = localDate19.toDateMidnight(dateTimeZone25);
        long long30 = dateTimeZone25.convertUTCToLocal(60000L);
        org.joda.time.chrono.ZonedChronology zonedChronology31 = org.joda.time.chrono.ZonedChronology.getInstance(chronology15, dateTimeZone25);
        org.joda.time.DurationField durationField32 = zonedChronology31.weeks();
        org.joda.time.DateTimeField dateTimeField33 = zonedChronology31.year();
        org.joda.time.DateTimeZone dateTimeZone34 = zonedChronology31.getZone();
        org.joda.time.DateTimeField dateTimeField35 = zonedChronology31.dayOfMonth();
        org.joda.time.DurationField durationField36 = zonedChronology31.weeks();
        org.joda.time.DateTimeField dateTimeField37 = zonedChronology31.year();
        boolean boolean38 = dateTimeFieldType8.isSupported((org.joda.time.Chronology) zonedChronology31);
        long long42 = zonedChronology31.add((long) 31, (long) 11826129, 11793543);
        org.joda.time.DateTimeZone dateTimeZone43 = zonedChronology31.getZone();
        org.joda.time.DurationField durationField44 = zonedChronology31.months();
        org.joda.time.DateTimeField dateTimeField45 = zonedChronology31.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate49 = new org.joda.time.LocalDate((long) 100, dateTimeZone48);
        org.joda.time.LocalDate localDate51 = localDate49.plusDays(50);
        org.joda.time.Chronology chronology52 = localDate51.getChronology();
        org.joda.time.LocalDate.Property property53 = localDate51.era();
        org.joda.time.Instant instant54 = new org.joda.time.Instant();
        org.joda.time.Instant instant56 = instant54.withMillis((long) 11);
        org.joda.time.Instant instant57 = instant56.toInstant();
        org.joda.time.Chronology chronology58 = instant56.getChronology();
        org.joda.time.DateTimeField dateTimeField59 = chronology58.weekyearOfCentury();
        java.util.Locale locale61 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str63 = locale61.getExtension('x');
        org.joda.time.DateTimeZone dateTimeZone65 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate66 = new org.joda.time.LocalDate((long) 100, dateTimeZone65);
        long long70 = dateTimeZone65.convertLocalToUTC((long) 2017, false, (long) 0);
        java.util.Locale locale73 = java.util.Locale.forLanguageTag("hi!");
        java.util.Locale locale74 = java.util.Locale.TAIWAN;
        java.lang.String str75 = locale73.getDisplayCountry(locale74);
        java.lang.String str76 = dateTimeZone65.getName((long) 26160535, locale73);
        java.lang.String str77 = locale61.getDisplayVariant(locale73);
        java.lang.String str78 = dateTimeField59.getAsShortText((long) 11762043, locale61);
        java.lang.String str79 = locale61.getDisplayCountry();
        java.lang.String str80 = locale61.getDisplayCountry();
        int int81 = property53.getMaximumTextLength(locale61);
        java.lang.String str82 = dateTimeField45.getAsText((long) 30, locale61);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime26 and instant54", (dateTime26.compareTo(instant54) == 0) == dateTime26.equals(instant54));
    }

    @Test
    public void test0313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0313");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property1 = localDateTime0.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withField(dateTimeFieldType2, (int) (short) 10);
        org.joda.time.LocalDateTime.Property property5 = localDateTime0.minuteOfHour();
        long long6 = property5.remainder();
        org.joda.time.DateTimeField dateTimeField7 = property5.getField();
        java.util.Calendar.Builder builder8 = new java.util.Calendar.Builder();
        java.util.Locale locale9 = java.util.Locale.JAPAN;
        java.util.Calendar.Builder builder10 = builder8.setLocale(locale9);
        int int11 = property5.getMaximumShortTextLength(locale9);
        org.joda.time.LocalDateTime localDateTime12 = property5.roundFloorCopy();
        org.joda.time.Instant instant13 = new org.joda.time.Instant();
        org.joda.time.Instant instant15 = instant13.minus((long) 2);
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.Instant instant17 = instant15.plus(readableDuration16);
        org.joda.time.DateTime dateTime18 = localDateTime12.toDateTime((org.joda.time.ReadableInstant) instant15);
        org.joda.time.DateTime dateTime19 = instant15.toDateTimeISO();
        org.joda.time.Instant instant21 = instant15.plus((long) 11797133);
        org.joda.time.DateTime dateTime22 = instant15.toDateTime();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant15 and dateTime19", (instant15.compareTo(dateTime19) == 0) == instant15.equals(dateTime19));
    }

    @Test
    public void test0314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0314");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.Instant instant2 = instant0.withMillis((long) 11);
        org.joda.time.Instant instant3 = instant2.toInstant();
        org.joda.time.Chronology chronology4 = instant2.getChronology();
        org.joda.time.DateTimeField dateTimeField5 = chronology4.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField6 = chronology4.hourOfDay();
        org.joda.time.DurationField durationField7 = chronology4.weekyears();
        long long10 = durationField7.getDifferenceAsLong(11778505L, (long) 26160835);
        org.joda.time.Instant instant11 = new org.joda.time.Instant();
        org.joda.time.Instant instant13 = instant11.withMillis((long) 11);
        org.joda.time.Instant instant14 = instant13.toInstant();
        org.joda.time.Instant instant16 = instant14.plus((long) 11757325);
        org.joda.time.Instant instant17 = new org.joda.time.Instant();
        org.joda.time.Instant instant19 = instant17.minus((long) 2);
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.Instant instant21 = instant19.plus(readableDuration20);
        boolean boolean22 = instant14.isBefore((org.joda.time.ReadableInstant) instant19);
        org.joda.time.DateTime dateTime23 = instant14.toDateTimeISO();
        int int24 = dateTime23.getSecondOfMinute();
        long long25 = dateTime23.getMillis();
        org.joda.time.DateTime.Property property26 = dateTime23.millisOfDay();
        org.joda.time.DurationField durationField27 = property26.getRangeDurationField();
        long long30 = durationField27.getValueAsLong(197L, (long) 11860820);
        int int31 = durationField7.compareTo(durationField27);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant2 and dateTime23", (instant2.compareTo(dateTime23) == 0) == instant2.equals(dateTime23));
    }

    @Test
    public void test0315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0315");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        int int1 = dateTime0.getDayOfYear();
        org.joda.time.DateTime dateTime3 = dateTime0.withYear(11751002);
        org.joda.time.Instant instant4 = dateTime0.toInstant();
        org.joda.time.DateTime dateTime6 = dateTime0.plusYears(26160835);
        boolean boolean8 = dateTime6.equals((java.lang.Object) 0.0f);
        org.joda.time.DateTime dateTime10 = dateTime6.minusMinutes(11775531);
        org.joda.time.DateTime dateTime12 = dateTime10.withWeekyear(26163273);
        org.joda.time.DateTime.Property property13 = dateTime10.yearOfCentury();
        org.joda.time.DateTime dateTime15 = property13.addWrapFieldToCopy(11810407);
        org.joda.time.DateTime.Property property16 = dateTime15.centuryOfEra();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime0 and instant4", (dateTime0.compareTo(instant4) == 0) == dateTime0.equals(instant4));
    }

    @Test
    public void test0316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0316");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.Instant instant1 = dateTime0.toInstant();
        org.joda.time.Chronology chronology2 = dateTime0.getChronology();
        org.joda.time.DateTime dateTime4 = dateTime0.plusDays(2);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property6 = localDateTime5.yearOfEra();
        org.joda.time.LocalDateTime localDateTime7 = property6.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.plusDays((int) (byte) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.hourOfDay();
        int int11 = localDateTime9.get(dateTimeFieldType10);
        boolean boolean12 = dateTime4.isSupported(dateTimeFieldType10);
        org.joda.time.DateTime dateTime14 = dateTime4.minusHours(11881089);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime0 and instant1", (dateTime0.compareTo(instant1) == 0) == dateTime0.equals(instant1));
    }

    @Test
    public void test0317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0317");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 100, dateTimeZone1);
        org.joda.time.LocalDate.Property property3 = localDate2.weekyear();
        org.joda.time.LocalDate localDate5 = localDate2.minusMonths(11753234);
        org.joda.time.LocalDate.Property property6 = localDate2.dayOfWeek();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = property6.getFieldType();
        int int8 = property6.getMaximumValueOverall();
        java.util.Locale.Builder builder9 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder10 = builder9.clear();
        java.util.Locale.Builder builder11 = builder10.clearExtensions();
        java.util.Locale locale12 = builder10.build();
        java.util.Locale.Builder builder13 = builder10.clear();
        java.util.Locale locale14 = java.util.Locale.TAIWAN;
        java.lang.String str15 = locale14.toLanguageTag();
        java.lang.String str16 = locale14.toLanguageTag();
        java.util.Locale.Builder builder17 = builder13.setLocale(locale14);
        java.util.Locale locale18 = java.util.Locale.ITALIAN;
        java.lang.String str19 = locale18.getDisplayCountry();
        java.util.Locale.Builder builder20 = builder17.setLocale(locale18);
        java.lang.String str21 = property6.getAsShortText(locale18);
        org.joda.time.LocalDate localDate22 = property6.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime25 = dateTime23.minusHours((int) (short) 100);
        org.joda.time.DateMidnight dateMidnight26 = dateTime25.toDateMidnight();
        int int27 = dateMidnight26.getDayOfYear();
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime();
        int int29 = dateTime28.getDayOfYear();
        org.joda.time.DateTime dateTime31 = dateTime28.withYear(11751002);
        org.joda.time.Instant instant32 = dateTime28.toInstant();
        org.joda.time.DateTime dateTime34 = dateTime28.plusYears(26160835);
        boolean boolean36 = dateTime34.equals((java.lang.Object) 0.0f);
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime39 = dateTime37.minusHours((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int41 = dateTime39.get(dateTimeFieldType40);
        org.joda.time.DateTime dateTime43 = dateTime39.minusMillis((int) '#');
        org.joda.time.DateTime dateTime45 = dateTime43.plusDays(11);
        org.joda.time.DateTime dateTime48 = dateTime43.withDurationAdded((long) 11757696, (int) ' ');
        int int49 = dateTime43.getWeekOfWeekyear();
        org.joda.time.DateTime dateTime51 = dateTime43.minusWeeks(215400000);
        boolean boolean52 = dateTime34.isAfter((org.joda.time.ReadableInstant) dateTime43);
        org.joda.time.DateTimeFieldType dateTimeFieldType53 = org.joda.time.DateTimeFieldType.centuryOfEra();
        int int54 = dateTime34.get(dateTimeFieldType53);
        boolean boolean55 = dateMidnight26.isSupported(dateTimeFieldType53);
        org.joda.time.LocalDate.Property property56 = localDate22.property(dateTimeFieldType53);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime23 and instant32", (dateTime23.compareTo(instant32) == 0) == dateTime23.equals(instant32));
    }

    @Test
    public void test0318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0318");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 100, dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.plusDays(50);
        org.joda.time.Chronology chronology5 = localDate4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 100, dateTimeZone8);
        org.joda.time.LocalDate localDate11 = localDate9.plusDays(50);
        int int12 = localDate9.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate14 = localDate9.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        int int17 = dateTimeZone15.getOffset((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateMidnight dateMidnight18 = localDate9.toDateMidnight(dateTimeZone15);
        long long20 = dateTimeZone15.convertUTCToLocal(60000L);
        org.joda.time.chrono.ZonedChronology zonedChronology21 = org.joda.time.chrono.ZonedChronology.getInstance(chronology5, dateTimeZone15);
        org.joda.time.DurationField durationField22 = zonedChronology21.weeks();
        org.joda.time.DateTimeField dateTimeField23 = zonedChronology21.year();
        org.joda.time.DateTimeZone dateTimeZone24 = zonedChronology21.getZone();
        org.joda.time.DurationField durationField25 = zonedChronology21.months();
        org.joda.time.DateTimeField dateTimeField26 = zonedChronology21.clockhourOfHalfday();
        org.joda.time.Instant instant27 = new org.joda.time.Instant();
        org.joda.time.Instant instant29 = instant27.withMillis((long) 11);
        org.joda.time.Instant instant30 = instant29.toInstant();
        org.joda.time.Chronology chronology31 = instant29.getChronology();
        org.joda.time.DateTimeField dateTimeField32 = chronology31.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate35 = new org.joda.time.LocalDate((long) 100, dateTimeZone34);
        int int36 = dateTimeField32.getMaximumValue((org.joda.time.ReadablePartial) localDate35);
        int int37 = dateTimeField32.getMinimumValue();
        boolean boolean38 = zonedChronology21.equals((java.lang.Object) int37);
        org.joda.time.DateTimeField dateTimeField39 = zonedChronology21.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField40 = zonedChronology21.dayOfWeek();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime16 and instant27", (dateTime16.compareTo(instant27) == 0) == dateTime16.equals(instant27));
    }

    @Test
    public void test0319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0319");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.Instant instant2 = instant0.withMillis((long) 11);
        org.joda.time.Instant instant3 = instant2.toInstant();
        org.joda.time.Chronology chronology4 = instant2.getChronology();
        org.joda.time.DateTimeField dateTimeField5 = chronology4.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate((long) 100, dateTimeZone7);
        int int9 = dateTimeField5.getMaximumValue((org.joda.time.ReadablePartial) localDate8);
        org.joda.time.Instant instant11 = new org.joda.time.Instant();
        org.joda.time.Instant instant13 = instant11.withMillis((long) 11);
        org.joda.time.Instant instant14 = instant13.toInstant();
        org.joda.time.Chronology chronology15 = instant13.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.clockhourOfHalfday();
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((long) 11760560, chronology15);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.LocalDateTime.Property property19 = localDateTime17.property(dateTimeFieldType18);
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.LocalDateTime localDateTime21 = localDateTime17.plus(readableDuration20);
        org.joda.time.LocalDateTime.Property property22 = localDateTime17.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime17.minusHours(11781671);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate((long) 100, dateTimeZone26);
        org.joda.time.LocalDate localDate29 = localDate27.plusDays(50);
        org.joda.time.Chronology chronology30 = localDate29.getChronology();
        org.joda.time.DateTimeField dateTimeField31 = chronology30.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate34 = new org.joda.time.LocalDate((long) 100, dateTimeZone33);
        org.joda.time.LocalDate localDate36 = localDate34.plusDays(50);
        int int37 = localDate34.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate39 = localDate34.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime();
        int int42 = dateTimeZone40.getOffset((org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.DateMidnight dateMidnight43 = localDate34.toDateMidnight(dateTimeZone40);
        long long45 = dateTimeZone40.convertUTCToLocal(60000L);
        org.joda.time.chrono.ZonedChronology zonedChronology46 = org.joda.time.chrono.ZonedChronology.getInstance(chronology30, dateTimeZone40);
        org.joda.time.DurationField durationField47 = zonedChronology46.weeks();
        org.joda.time.DateTimeField dateTimeField48 = zonedChronology46.weekyear();
        org.joda.time.DurationField durationField49 = zonedChronology46.weekyears();
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate52 = new org.joda.time.LocalDate((long) 100, dateTimeZone51);
        org.joda.time.LocalDate localDate54 = localDate52.plusDays(50);
        org.joda.time.Chronology chronology55 = localDate54.getChronology();
        org.joda.time.LocalDate.Property property56 = localDate54.era();
        org.joda.time.DateTimeField dateTimeField57 = property56.getField();
        org.joda.time.LocalDate localDate58 = property56.getLocalDate();
        org.joda.time.LocalDate localDate60 = localDate58.withYear(26160535);
        org.joda.time.LocalDate localDate62 = localDate60.minusYears(11766550);
        int[] intArray64 = zonedChronology46.get((org.joda.time.ReadablePartial) localDate62, (long) 11764640);
        int int65 = dateTimeField5.getMaximumValue((org.joda.time.ReadablePartial) localDateTime17, intArray64);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and dateTime41", (instant0.compareTo(dateTime41) == 0) == instant0.equals(dateTime41));
    }

    @Test
    public void test0320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0320");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 10);
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime();
        org.joda.time.Instant instant3 = dateTime2.toInstant();
        org.joda.time.Chronology chronology4 = dateTime2.getChronology();
        long long5 = dateTime2.getMillis();
        boolean boolean6 = dateTime1.isEqual((org.joda.time.ReadableInstant) dateTime2);
        org.joda.time.DateTime dateTime7 = dateTime2.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime9 = dateTime2.minusMonths(11833538);
        java.lang.Object obj10 = null;
        boolean boolean11 = dateTime9.equals(obj10);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and instant3", (dateTime2.compareTo(instant3) == 0) == dateTime2.equals(instant3));
    }

    @Test
    public void test0321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0321");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.Instant instant2 = instant0.withMillis((long) 11);
        org.joda.time.Instant instant3 = instant2.toInstant();
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Instant instant5 = instant2.minus(readableDuration4);
        org.joda.time.Instant instant6 = instant2.toInstant();
        org.joda.time.Instant instant8 = instant6.withMillis((long) 59);
        org.joda.time.Instant instant10 = instant8.withMillis((long) 11782828);
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) (byte) 10);
        org.joda.time.DateTime dateTime14 = dateTime12.plusMinutes(49);
        org.joda.time.DateTime dateTime16 = dateTime14.plus(10L);
        org.joda.time.Chronology chronology17 = dateTime16.getChronology();
        org.joda.time.DateTime dateTime19 = dateTime16.minusMonths((int) 'a');
        boolean boolean20 = instant8.isEqual((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.format.DateTimePrinter dateTimePrinter21 = null;
        org.joda.time.format.DateTimeParser dateTimeParser22 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter21, dateTimeParser22);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = dateTimeFormatter23.withPivotYear((java.lang.Integer) (-26151846));
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime28 = dateTime26.minusHours((int) (short) 100);
        org.joda.time.DateMidnight dateMidnight29 = dateTime28.toDateMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.dayOfYear();
        int int31 = dateTime28.get(dateTimeFieldType30);
        int int32 = dateTime28.getDayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate35 = new org.joda.time.LocalDate((long) 100, dateTimeZone34);
        org.joda.time.LocalDate localDate37 = localDate35.plusDays(50);
        org.joda.time.Chronology chronology38 = localDate37.getChronology();
        org.joda.time.DateTimeField dateTimeField39 = chronology38.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField40 = chronology38.dayOfMonth();
        org.joda.time.DateTime dateTime41 = dateTime28.withChronology(chronology38);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter42 = dateTimeFormatter25.withChronology(chronology38);
        org.joda.time.DateTime dateTime43 = dateTime16.toDateTime(chronology38);
        org.joda.time.DateTime.Property property44 = dateTime16.minuteOfHour();
        int int45 = dateTime16.getMillisOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and dateTime26", (instant0.compareTo(dateTime26) == 0) == instant0.equals(dateTime26));
    }

    @Test
    public void test0322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0322");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime2 = dateTime0.withMinuteOfHour(14);
        org.joda.time.DateTime dateTime4 = dateTime0.withCenturyOfEra(50);
        org.joda.time.Instant instant5 = new org.joda.time.Instant();
        org.joda.time.Instant instant7 = instant5.minus((long) 2);
        int int8 = dateTime4.compareTo((org.joda.time.ReadableInstant) instant5);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(59, 50);
        java.util.TimeZone timeZone12 = dateTimeZone11.toTimeZone();
        org.joda.time.Instant instant13 = new org.joda.time.Instant();
        org.joda.time.Instant instant15 = instant13.withMillis((long) 11);
        org.joda.time.Instant instant16 = instant15.toInstant();
        org.joda.time.Instant instant18 = instant16.plus((long) 11757325);
        org.joda.time.Instant instant19 = new org.joda.time.Instant();
        org.joda.time.Instant instant21 = instant19.minus((long) 2);
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.Instant instant23 = instant21.plus(readableDuration22);
        boolean boolean24 = instant16.isBefore((org.joda.time.ReadableInstant) instant21);
        int int25 = dateTimeZone11.getOffset((org.joda.time.ReadableInstant) instant16);
        org.joda.time.DateTime dateTime26 = dateTime4.toDateTime(dateTimeZone11);
        org.joda.time.Instant instant27 = dateTime4.toInstant();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime0 and instant5", (dateTime0.compareTo(instant5) == 0) == dateTime0.equals(instant5));
    }

    @Test
    public void test0323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0323");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 100, dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.plusDays(50);
        org.joda.time.Chronology chronology5 = localDate4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 100, dateTimeZone8);
        org.joda.time.LocalDate localDate11 = localDate9.plusDays(50);
        int int12 = localDate9.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate14 = localDate9.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        int int17 = dateTimeZone15.getOffset((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateMidnight dateMidnight18 = localDate9.toDateMidnight(dateTimeZone15);
        long long20 = dateTimeZone15.convertUTCToLocal(60000L);
        org.joda.time.chrono.ZonedChronology zonedChronology21 = org.joda.time.chrono.ZonedChronology.getInstance(chronology5, dateTimeZone15);
        org.joda.time.DurationField durationField22 = zonedChronology21.weeks();
        org.joda.time.DateTimeField dateTimeField23 = zonedChronology21.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        long long27 = zonedChronology21.add(readablePeriod24, (long) 2022, 0);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.UTC;
        int int30 = dateTimeZone28.getStandardOffset((long) (byte) 1);
        java.util.TimeZone timeZone31 = dateTimeZone28.toTimeZone();
        org.joda.time.Chronology chronology32 = zonedChronology21.withZone(dateTimeZone28);
        org.joda.time.DurationField durationField33 = zonedChronology21.weeks();
        org.joda.time.DurationField durationField34 = zonedChronology21.eras();
        java.util.TimeZone timeZone36 = java.util.TimeZone.getTimeZone("");
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(59, 50);
        java.util.TimeZone timeZone40 = dateTimeZone39.toTimeZone();
        java.util.TimeZone timeZone41 = dateTimeZone39.toTimeZone();
        boolean boolean42 = timeZone36.hasSameRules(timeZone41);
        java.time.ZoneId zoneId43 = timeZone41.toZoneId();
        java.util.TimeZone timeZone44 = java.util.TimeZone.getTimeZone(zoneId43);
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forTimeZone(timeZone44);
        org.joda.time.Chronology chronology46 = zonedChronology21.withZone(dateTimeZone45);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField22 and durationField34", Math.signum(durationField22.compareTo(durationField34)) == -Math.signum(durationField34.compareTo(durationField22)));
    }

    @Test
    public void test0324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0324");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(dateTimeZone0);
        org.joda.time.LocalTime localTime3 = localTime1.minusHours(0);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalTime localTime5 = localTime3.plus(readablePeriod4);
        org.joda.time.LocalTime localTime7 = localTime3.minusSeconds(5);
        org.joda.time.LocalTime localTime9 = localTime3.plusMillis((int) (byte) 0);
        int int10 = localTime9.getMillisOfDay();
        int int11 = localTime9.getHourOfDay();
        org.joda.time.DateTime dateTime12 = localTime9.toDateTimeToday();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalTime localTime14 = new org.joda.time.LocalTime(dateTimeZone13);
        org.joda.time.LocalTime localTime16 = localTime14.minusHours(0);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.LocalTime localTime18 = localTime16.plus(readablePeriod17);
        org.joda.time.LocalTime localTime20 = localTime16.minusSeconds(5);
        org.joda.time.LocalTime localTime22 = localTime16.plusMillis((int) (byte) 0);
        int int23 = localTime22.getMillisOfDay();
        org.joda.time.LocalTime.Property property24 = localTime22.minuteOfHour();
        org.joda.time.LocalTime localTime26 = property24.addWrapFieldToCopy((int) (short) 0);
        org.joda.time.LocalTime localTime27 = localTime9.withFields((org.joda.time.ReadablePartial) localTime26);
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime30 = dateTime28.minusHours((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int32 = dateTime30.get(dateTimeFieldType31);
        org.joda.time.DateTime dateTime34 = dateTime30.minusMillis((int) '#');
        boolean boolean35 = dateTime30.isBeforeNow();
        org.joda.time.DateTime dateTime37 = dateTime30.plusMillis((int) (short) 1);
        org.joda.time.DateTime.Property property38 = dateTime37.yearOfEra();
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime41 = dateTime39.minusHours((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int43 = dateTime41.get(dateTimeFieldType42);
        org.joda.time.DateTime dateTime45 = dateTime41.minusMillis((int) '#');
        boolean boolean46 = dateTime41.isBeforeNow();
        int int47 = dateTime41.getYearOfEra();
        org.joda.time.Instant instant48 = dateTime41.toInstant();
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = org.joda.time.DateTimeFieldType.dayOfYear();
        int int51 = dateTime49.get(dateTimeFieldType50);
        java.lang.String str52 = dateTimeFieldType50.getName();
        int int53 = dateTime41.get(dateTimeFieldType50);
        org.joda.time.DateTime.Property property54 = dateTime37.property(dateTimeFieldType50);
        boolean boolean55 = localTime27.isSupported(dateTimeFieldType50);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime30 and instant48", (dateTime30.compareTo(instant48) == 0) == dateTime30.equals(instant48));
    }

    @Test
    public void test0325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0325");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.dayOfYear();
        int int2 = dateTime0.get(dateTimeFieldType1);
        java.util.Calendar.Builder builder3 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder7 = builder3.setWeekDate((int) (short) 0, (int) '4', (int) '4');
        java.util.Calendar.Builder builder9 = builder7.setLenient(false);
        java.util.TimeZone timeZone11 = java.util.TimeZone.getTimeZone("");
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(59, 50);
        java.util.TimeZone timeZone15 = dateTimeZone14.toTimeZone();
        java.util.TimeZone timeZone16 = dateTimeZone14.toTimeZone();
        boolean boolean17 = timeZone11.hasSameRules(timeZone16);
        java.util.Calendar.Builder builder18 = builder7.setTimeZone(timeZone16);
        boolean boolean19 = dateTime0.equals((java.lang.Object) builder18);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate((long) 100, dateTimeZone21);
        org.joda.time.LocalDate localDate24 = localDate22.plusDays(50);
        org.joda.time.Chronology chronology25 = localDate24.getChronology();
        org.joda.time.DateTimeField dateTimeField26 = chronology25.millisOfDay();
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate(chronology25);
        org.joda.time.DateTimeField dateTimeField28 = chronology25.minuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(59, 50);
        java.util.TimeZone timeZone33 = dateTimeZone32.toTimeZone();
        java.util.TimeZone timeZone34 = dateTimeZone32.toTimeZone();
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime(72000000L, dateTimeZone32);
        int int37 = dateTimeZone32.getStandardOffset((long) 'u');
        org.joda.time.LocalDate localDate38 = new org.joda.time.LocalDate(dateTimeZone32);
        org.joda.time.chrono.ZonedChronology zonedChronology39 = org.joda.time.chrono.ZonedChronology.getInstance(chronology25, dateTimeZone32);
        org.joda.time.DateTimeField dateTimeField40 = zonedChronology39.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField41 = zonedChronology39.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField42 = zonedChronology39.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField43 = zonedChronology39.minuteOfDay();
        org.joda.time.DurationField durationField44 = zonedChronology39.weekyears();
        org.joda.time.DateTimeField dateTimeField45 = zonedChronology39.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime46 = dateTime0.toMutableDateTime((org.joda.time.Chronology) zonedChronology39);
        org.joda.time.LocalDateTime localDateTime47 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property48 = localDateTime47.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.LocalDateTime localDateTime51 = localDateTime47.withField(dateTimeFieldType49, (int) (short) 10);
        org.joda.time.LocalDateTime localDateTime53 = localDateTime47.minusYears(5);
        org.joda.time.LocalDateTime localDateTime55 = localDateTime53.withCenturyOfEra(100);
        org.joda.time.LocalDateTime localDateTime56 = new org.joda.time.LocalDateTime();
        int int57 = localDateTime56.getSecondOfMinute();
        boolean boolean58 = localDateTime53.isAfter((org.joda.time.ReadablePartial) localDateTime56);
        org.joda.time.LocalDateTime localDateTime59 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property60 = localDateTime59.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType61 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.LocalDateTime localDateTime63 = localDateTime59.withField(dateTimeFieldType61, (int) (short) 10);
        org.joda.time.LocalDateTime localDateTime65 = localDateTime59.minusYears(5);
        java.lang.String str66 = localDateTime65.toString();
        org.joda.time.LocalDateTime localDateTime67 = localDateTime53.withFields((org.joda.time.ReadablePartial) localDateTime65);
        org.joda.time.LocalDateTime localDateTime69 = localDateTime53.plusMonths(1970);
        org.joda.time.LocalDateTime.Property property70 = localDateTime69.millisOfSecond();
        org.joda.time.DateTime dateTime71 = localDateTime69.toDateTime();
        int[] intArray73 = zonedChronology39.get((org.joda.time.ReadablePartial) localDateTime69, (long) 11962469);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime0 and mutableDateTime46", (dateTime0.compareTo(mutableDateTime46) == 0) == dateTime0.equals(mutableDateTime46));
    }

    @Test
    public void test0326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0326");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 100, dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.minusYears(53);
        org.joda.time.Chronology chronology5 = localDate2.getChronology();
        org.joda.time.DateTime dateTime6 = org.joda.time.DateTime.now(chronology5);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate((long) 100, dateTimeZone10);
        org.joda.time.LocalDate localDate13 = localDate11.plusDays(50);
        org.joda.time.Chronology chronology14 = localDate13.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate((long) 100, dateTimeZone17);
        org.joda.time.LocalDate localDate20 = localDate18.plusDays(50);
        int int21 = localDate18.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate23 = localDate18.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime();
        int int26 = dateTimeZone24.getOffset((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.DateMidnight dateMidnight27 = localDate18.toDateMidnight(dateTimeZone24);
        long long29 = dateTimeZone24.convertUTCToLocal(60000L);
        org.joda.time.chrono.ZonedChronology zonedChronology30 = org.joda.time.chrono.ZonedChronology.getInstance(chronology14, dateTimeZone24);
        org.joda.time.DurationField durationField31 = zonedChronology30.weeks();
        org.joda.time.DateTimeField dateTimeField32 = zonedChronology30.weekOfWeekyear();
        org.joda.time.DurationField durationField33 = zonedChronology30.centuries();
        org.joda.time.DateTimeField dateTimeField34 = zonedChronology30.dayOfWeek();
        org.joda.time.DurationField durationField35 = zonedChronology30.millis();
        org.joda.time.LocalDate localDate36 = new org.joda.time.LocalDate((long) 52, (org.joda.time.Chronology) zonedChronology30);
        boolean boolean37 = localDate7.equals((java.lang.Object) zonedChronology30);
        org.joda.time.DateTimeField dateTimeField38 = zonedChronology30.dayOfYear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime6 and dateTime25", (dateTime6.compareTo(dateTime25) == 0) == dateTime6.equals(dateTime25));
    }

    @Test
    public void test0327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0327");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("CN");
        double double2 = languageRange1.getWeight();
        java.lang.String str3 = languageRange1.getRange();
        double double4 = languageRange1.getWeight();
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime7 = dateTime5.minusHours((int) (short) 100);
        org.joda.time.TimeOfDay timeOfDay8 = dateTime7.toTimeOfDay();
        org.joda.time.DateTime.Property property9 = dateTime7.yearOfEra();
        org.joda.time.DateTime dateTime10 = property9.roundCeilingCopy();
        org.joda.time.DateTime dateTime11 = property9.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime12 = property9.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime14 = dateTime12.minusSeconds(11783369);
        org.joda.time.Instant instant15 = dateTime12.toInstant();
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.DateTime dateTime17 = dateTime12.withZoneRetainFields(dateTimeZone16);
        org.joda.time.DateTime dateTime19 = dateTime17.withYear(11863);
        boolean boolean20 = languageRange1.equals((java.lang.Object) 11863);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime11 and instant15", (dateTime11.compareTo(instant15) == 0) == dateTime11.equals(instant15));
    }

    @Test
    public void test0328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0328");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        int int1 = dateTime0.getDayOfYear();
        org.joda.time.DateTime dateTime3 = dateTime0.withYear(11751002);
        org.joda.time.Instant instant4 = dateTime0.toInstant();
        org.joda.time.DateTime dateTime6 = dateTime0.withMillisOfDay(16);
        org.joda.time.DateTime dateTime8 = dateTime0.plusWeeks(11);
        org.joda.time.DateTime dateTime10 = dateTime8.minusMonths(11928409);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime0 and instant4", (dateTime0.compareTo(instant4) == 0) == dateTime0.equals(instant4));
    }

    @Test
    public void test0329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0329");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime2 = dateTime0.minusHours((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int4 = dateTime2.get(dateTimeFieldType3);
        org.joda.time.DateTime dateTime6 = dateTime2.minusMillis((int) '#');
        org.joda.time.DateTime dateTime8 = dateTime6.plusDays(11);
        org.joda.time.DateTime dateTime11 = dateTime6.withDurationAdded((long) (byte) 10, 11);
        org.joda.time.DateTimeZone dateTimeZone12 = dateTime6.getZone();
        org.joda.time.DateTime dateTime14 = dateTime6.minusDays(22);
        org.joda.time.DateTime dateTime16 = dateTime6.withYearOfCentury(14);
        org.joda.time.Instant instant17 = org.joda.time.Instant.now();
        org.joda.time.Instant instant19 = instant17.plus((long) 11753187);
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.Instant instant21 = instant19.plus(readableDuration20);
        boolean boolean22 = dateTime6.equals((java.lang.Object) instant21);
        org.joda.time.DateTime.Property property23 = dateTime6.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property25 = localDateTime24.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime24.withField(dateTimeFieldType26, (int) (short) 10);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime24.plusWeeks((-1));
        org.joda.time.LocalDateTime localDateTime32 = localDateTime30.withMillisOfSecond((int) '4');
        org.joda.time.LocalDateTime localDateTime34 = localDateTime30.plusWeeks(26160458);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime30.minusMinutes((int) 'u');
        org.joda.time.LocalDateTime localDateTime38 = localDateTime36.minusMonths(3);
        org.joda.time.DateTime dateTime39 = dateTime6.withFields((org.joda.time.ReadablePartial) localDateTime36);
        org.joda.time.DateTime dateTime41 = dateTime39.plusHours(11764640);
        org.joda.time.DateTime dateTime42 = dateTime39.withLaterOffsetAtOverlap();
        org.joda.time.DateTime dateTime44 = dateTime42.plusMinutes(26199086);
        java.lang.String str45 = dateTime44.toString();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime0 and instant17", (dateTime0.compareTo(instant17) == 0) == dateTime0.equals(instant17));
    }

    @Test
    public void test0330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0330");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime2 = dateTime0.minusHours((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalTime localTime4 = new org.joda.time.LocalTime(dateTimeZone3);
        org.joda.time.DateTime dateTime5 = dateTime0.withZone(dateTimeZone3);
        org.joda.time.DateTime.Property property6 = dateTime0.hourOfDay();
        org.joda.time.DateTime dateTime9 = dateTime0.withDurationAdded((long) 11774514, 11904633);
        org.joda.time.DateTime dateTime11 = dateTime9.minusYears(11968251);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime0 and dateTime5", (dateTime0.compareTo(dateTime5) == 0) == dateTime0.equals(dateTime5));
    }

    @Test
    public void test0331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0331");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.Instant instant2 = instant0.withMillis((long) 11);
        org.joda.time.DateTimeZone dateTimeZone3 = instant0.getZone();
        org.joda.time.DateTime dateTime4 = instant0.toDateTime();
        org.joda.time.Instant instant6 = instant0.minus((long) 292278994);
        boolean boolean8 = instant6.isAfter((long) 11735);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and dateTime4", (instant0.compareTo(dateTime4) == 0) == instant0.equals(dateTime4));
    }

    @Test
    public void test0332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0332");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime2 = dateTime0.minusHours((int) (short) 100);
        org.joda.time.DateTime dateTime4 = dateTime2.minus(0L);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) 100, dateTimeZone6);
        org.joda.time.DateTime dateTime8 = dateTime4.withZone(dateTimeZone6);
        org.joda.time.LocalDate localDate9 = dateTime4.toLocalDate();
        org.joda.time.LocalDate localDate11 = localDate9.plusMonths(49);
        org.joda.time.DurationFieldType durationFieldType12 = org.joda.time.DurationFieldType.years();
        org.joda.time.LocalDate localDate14 = localDate9.withFieldAdded(durationFieldType12, 26275822);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate((long) 100, dateTimeZone16);
        org.joda.time.LocalDate localDate19 = localDate17.plusDays(50);
        org.joda.time.DateTime dateTime20 = localDate19.toDateTimeAtMidnight();
        org.joda.time.LocalDate.Property property21 = localDate19.yearOfEra();
        org.joda.time.LocalDate localDate22 = property21.roundHalfCeilingCopy();
        org.joda.time.LocalDate localDate23 = property21.roundHalfEvenCopy();
        java.util.Locale locale25 = java.util.Locale.TAIWAN;
        org.joda.time.LocalDate localDate26 = property21.setCopy("2017", locale25);
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.centuryOfEra();
        boolean boolean28 = localDate26.isSupported(dateTimeFieldType27);
        org.joda.time.LocalDate localDate30 = localDate26.plusWeeks(11761333);
        org.joda.time.Instant instant31 = new org.joda.time.Instant();
        org.joda.time.Instant instant33 = instant31.withMillis((long) 11);
        org.joda.time.Instant instant34 = instant33.toInstant();
        org.joda.time.Chronology chronology35 = instant33.getChronology();
        org.joda.time.DateTimeField dateTimeField36 = chronology35.clockhourOfHalfday();
        org.joda.time.Chronology chronology37 = chronology35.withUTC();
        org.joda.time.DateTimeZone dateTimeZone38 = chronology35.getZone();
        org.joda.time.DateTime dateTime39 = localDate26.toDateTimeAtMidnight(dateTimeZone38);
        org.joda.time.DateTime dateTime40 = localDate14.toDateTimeAtCurrentTime(dateTimeZone38);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime0 and instant31", (dateTime0.compareTo(instant31) == 0) == dateTime0.equals(instant31));
    }

    @Test
    public void test0333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0333");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 100, dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.plusDays(50);
        org.joda.time.Chronology chronology5 = localDate4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 100, dateTimeZone8);
        org.joda.time.LocalDate localDate11 = localDate9.plusDays(50);
        int int12 = localDate9.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate14 = localDate9.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        int int17 = dateTimeZone15.getOffset((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateMidnight dateMidnight18 = localDate9.toDateMidnight(dateTimeZone15);
        long long20 = dateTimeZone15.convertUTCToLocal(60000L);
        org.joda.time.chrono.ZonedChronology zonedChronology21 = org.joda.time.chrono.ZonedChronology.getInstance(chronology5, dateTimeZone15);
        org.joda.time.DurationField durationField22 = zonedChronology21.weeks();
        org.joda.time.DurationField durationField23 = zonedChronology21.millis();
        org.joda.time.DurationField durationField24 = zonedChronology21.millis();
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime();
        int int26 = dateTime25.getDayOfYear();
        org.joda.time.DateTime dateTime28 = dateTime25.withYear(11751002);
        org.joda.time.Instant instant29 = dateTime25.toInstant();
        org.joda.time.DateTime.Property property30 = dateTime25.monthOfYear();
        boolean boolean31 = zonedChronology21.equals((java.lang.Object) dateTime25);
        int int32 = dateTime25.getMillisOfSecond();
        org.joda.time.DateTime dateTime34 = dateTime25.minusHours(11769266);
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate37 = new org.joda.time.LocalDate((long) 100, dateTimeZone36);
        org.joda.time.LocalDate localDate39 = localDate37.plusDays(50);
        org.joda.time.Chronology chronology40 = localDate39.getChronology();
        org.joda.time.DateTimeField dateTimeField41 = chronology40.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate44 = new org.joda.time.LocalDate((long) 100, dateTimeZone43);
        org.joda.time.LocalDate localDate46 = localDate44.plusDays(50);
        int int47 = localDate44.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate49 = localDate44.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime();
        int int52 = dateTimeZone50.getOffset((org.joda.time.ReadableInstant) dateTime51);
        org.joda.time.DateMidnight dateMidnight53 = localDate44.toDateMidnight(dateTimeZone50);
        long long55 = dateTimeZone50.convertUTCToLocal(60000L);
        org.joda.time.chrono.ZonedChronology zonedChronology56 = org.joda.time.chrono.ZonedChronology.getInstance(chronology40, dateTimeZone50);
        org.joda.time.DurationField durationField57 = zonedChronology56.weeks();
        org.joda.time.DateTimeField dateTimeField58 = zonedChronology56.year();
        org.joda.time.DateTimeZone dateTimeZone59 = zonedChronology56.getZone();
        org.joda.time.DateTimeField dateTimeField60 = zonedChronology56.weekyear();
        org.joda.time.DurationField durationField61 = zonedChronology56.years();
        org.joda.time.DateTimeField dateTimeField62 = zonedChronology56.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField63 = zonedChronology56.secondOfMinute();
        org.joda.time.MutableDateTime mutableDateTime64 = dateTime25.toMutableDateTime((org.joda.time.Chronology) zonedChronology56);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime16 and instant29", (dateTime16.compareTo(instant29) == 0) == dateTime16.equals(instant29));
    }

    @Test
    public void test0334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0334");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        int int1 = dateTime0.getDayOfYear();
        org.joda.time.DateTime dateTime3 = dateTime0.withYear(11751002);
        org.joda.time.Instant instant4 = dateTime0.toInstant();
        org.joda.time.DateTime dateTime6 = dateTime0.plusYears(26160835);
        boolean boolean8 = dateTime6.equals((java.lang.Object) 0.0f);
        org.joda.time.DateTime dateTime10 = dateTime6.minusMinutes(11775531);
        org.joda.time.DateTime dateTime12 = dateTime10.withWeekyear(26163273);
        org.joda.time.DateTime.Property property13 = dateTime10.yearOfCentury();
        org.joda.time.DateTime dateTime15 = property13.addWrapFieldToCopy(11810407);
        org.joda.time.DurationField durationField16 = property13.getDurationField();
        org.joda.time.DateTime dateTime17 = property13.roundFloorCopy();
        org.joda.time.DateTime dateTime18 = property13.roundHalfEvenCopy();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime0 and instant4", (dateTime0.compareTo(instant4) == 0) == dateTime0.equals(instant4));
    }

    @Test
    public void test0335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0335");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property1 = localDateTime0.yearOfEra();
        int int2 = localDateTime0.getDayOfYear();
        int int3 = localDateTime0.getMillisOfDay();
        org.joda.time.LocalDateTime.Property property4 = localDateTime0.secondOfMinute();
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime7 = dateTime5.minusHours((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int9 = dateTime7.get(dateTimeFieldType8);
        org.joda.time.DateTime dateTime11 = dateTime7.minusMillis((int) '#');
        boolean boolean12 = dateTime7.isBeforeNow();
        int int13 = dateTime7.getYearOfEra();
        org.joda.time.Instant instant14 = dateTime7.toInstant();
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.dayOfYear();
        int int17 = dateTime15.get(dateTimeFieldType16);
        java.lang.String str18 = dateTimeFieldType16.getName();
        int int19 = dateTime7.get(dateTimeFieldType16);
        boolean boolean20 = localDateTime0.isSupported(dateTimeFieldType16);
        java.lang.String str22 = localDateTime0.toString("11829200");
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime7 and instant14", (dateTime7.compareTo(instant14) == 0) == dateTime7.equals(instant14));
    }

    @Test
    public void test0336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0336");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime2 = dateTime0.minusHours((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int4 = dateTime2.get(dateTimeFieldType3);
        org.joda.time.DateTime dateTime6 = dateTime2.minusMillis((int) '#');
        org.joda.time.DateTime dateTime8 = dateTime6.plusDays(11);
        org.joda.time.DateTime dateTime11 = dateTime6.withDurationAdded((long) (byte) 10, 11);
        org.joda.time.DateTime dateTime13 = dateTime6.plusDays(26159400);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime(dateTimeZone14);
        int int17 = dateTimeZone14.getStandardOffset((long) 49);
        int int19 = dateTimeZone14.getOffset((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime20 = dateTime6.toMutableDateTime(dateTimeZone14);
        org.joda.time.DateTime dateTime22 = dateTime6.withYearOfEra(26160458);
        org.joda.time.DateTime dateTime24 = dateTime22.minusMillis(11831033);
        long long25 = dateTime24.getMillis();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime6 and mutableDateTime20", (dateTime6.compareTo(mutableDateTime20) == 0) == dateTime6.equals(mutableDateTime20));
    }

    @Test
    public void test0337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0337");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        int int1 = dateTime0.getDayOfYear();
        org.joda.time.DateTime dateTime3 = dateTime0.withYear(11751002);
        org.joda.time.Instant instant4 = dateTime0.toInstant();
        org.joda.time.DateTime.Property property5 = dateTime0.monthOfYear();
        org.joda.time.DateTime dateTime6 = property5.roundCeilingCopy();
        org.joda.time.DurationField durationField7 = property5.getRangeDurationField();
        long long10 = durationField7.subtract((long) 11842005, 11941782);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime0 and instant4", (dateTime0.compareTo(instant4) == 0) == dateTime0.equals(instant4));
    }

    @Test
    public void test0338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0338");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime2 = dateTime0.withMinuteOfHour(14);
        org.joda.time.DateTime dateTime4 = dateTime0.withCenturyOfEra(50);
        org.joda.time.Instant instant5 = new org.joda.time.Instant();
        org.joda.time.Instant instant7 = instant5.minus((long) 2);
        int int8 = dateTime4.compareTo((org.joda.time.ReadableInstant) instant5);
        org.joda.time.DateTime.Property property9 = dateTime4.centuryOfEra();
        org.joda.time.DateTime dateTime11 = dateTime4.plusDays(58);
        org.joda.time.DateTime dateTime13 = dateTime11.minusMonths(32770);
        int int14 = dateTime11.getMonthOfYear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime0 and instant5", (dateTime0.compareTo(instant5) == 0) == dateTime0.equals(instant5));
    }

    @Test
    public void test0339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0339");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property1 = localDateTime0.yearOfEra();
        java.lang.String str2 = property1.getAsText();
        org.joda.time.LocalDateTime localDateTime3 = property1.roundCeilingCopy();
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.minus(readablePeriod4);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime3.withYearOfEra(26220000);
        org.joda.time.Instant instant8 = org.joda.time.Instant.now();
        org.joda.time.Instant instant10 = instant8.plus((long) 11753187);
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.Instant instant12 = instant10.plus(readableDuration11);
        org.joda.time.Instant instant14 = instant12.plus((long) (short) -1);
        org.joda.time.Instant instant15 = new org.joda.time.Instant();
        org.joda.time.Instant instant17 = instant15.withMillis((long) 11);
        org.joda.time.Instant instant18 = instant17.toInstant();
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.Instant instant20 = instant17.minus(readableDuration19);
        org.joda.time.Instant instant21 = instant17.toInstant();
        org.joda.time.DateTime dateTime22 = instant17.toDateTime();
        boolean boolean23 = instant12.isEqual((org.joda.time.ReadableInstant) instant17);
        boolean boolean25 = instant12.isEqual(10075L);
        org.joda.time.ReadableDuration readableDuration26 = null;
        org.joda.time.Instant instant27 = instant12.plus(readableDuration26);
        org.joda.time.DateTime dateTime28 = localDateTime7.toDateTime((org.joda.time.ReadableInstant) instant12);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant17 and dateTime22", (instant17.compareTo(dateTime22) == 0) == instant17.equals(dateTime22));
    }

    @Test
    public void test0340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0340");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 100, dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.plusDays(50);
        org.joda.time.Chronology chronology5 = localDate4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 100, dateTimeZone8);
        org.joda.time.LocalDate localDate11 = localDate9.plusDays(50);
        int int12 = localDate9.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate14 = localDate9.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        int int17 = dateTimeZone15.getOffset((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateMidnight dateMidnight18 = localDate9.toDateMidnight(dateTimeZone15);
        long long20 = dateTimeZone15.convertUTCToLocal(60000L);
        org.joda.time.chrono.ZonedChronology zonedChronology21 = org.joda.time.chrono.ZonedChronology.getInstance(chronology5, dateTimeZone15);
        org.joda.time.DurationField durationField22 = zonedChronology21.eras();
        org.joda.time.DateTimeField dateTimeField23 = zonedChronology21.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField24 = zonedChronology21.secondOfDay();
        org.joda.time.DurationField durationField25 = zonedChronology21.weeks();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField22, durationField25, and durationField22", !(durationField22.compareTo(durationField25) == 0) || (Math.signum(durationField22.compareTo(durationField22)) == Math.signum(durationField25.compareTo(durationField22))));
    }

    @Test
    public void test0341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0341");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.Instant instant2 = instant0.minus((long) 2);
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.Instant instant4 = instant2.plus(readableDuration3);
        org.joda.time.MutableDateTime mutableDateTime5 = instant2.toMutableDateTime();
        org.joda.time.Instant instant7 = instant2.minus((long) 9);
        long long8 = instant2.getMillis();
        org.joda.time.Chronology chronology9 = instant2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone10 = chronology9.getZone();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant2 and mutableDateTime5", (instant2.compareTo(mutableDateTime5) == 0) == instant2.equals(mutableDateTime5));
    }

    @Test
    public void test0342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0342");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 100, dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.plusDays(50);
        org.joda.time.Chronology chronology5 = localDate4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 100, dateTimeZone8);
        org.joda.time.LocalDate localDate11 = localDate9.plusDays(50);
        int int12 = localDate9.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate14 = localDate9.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        int int17 = dateTimeZone15.getOffset((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateMidnight dateMidnight18 = localDate9.toDateMidnight(dateTimeZone15);
        long long20 = dateTimeZone15.convertUTCToLocal(60000L);
        org.joda.time.chrono.ZonedChronology zonedChronology21 = org.joda.time.chrono.ZonedChronology.getInstance(chronology5, dateTimeZone15);
        org.joda.time.DurationField durationField22 = zonedChronology21.weeks();
        org.joda.time.DurationField durationField23 = zonedChronology21.millis();
        org.joda.time.DurationField durationField24 = zonedChronology21.millis();
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime();
        int int26 = dateTime25.getDayOfYear();
        org.joda.time.DateTime dateTime28 = dateTime25.withYear(11751002);
        org.joda.time.Instant instant29 = dateTime25.toInstant();
        org.joda.time.DateTime.Property property30 = dateTime25.monthOfYear();
        boolean boolean31 = zonedChronology21.equals((java.lang.Object) dateTime25);
        org.joda.time.DateTimeField dateTimeField32 = zonedChronology21.minuteOfDay();
        org.joda.time.DurationField durationField33 = zonedChronology21.seconds();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime16 and instant29", (dateTime16.compareTo(instant29) == 0) == dateTime16.equals(instant29));
    }

    @Test
    public void test0343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0343");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withPivotYear((java.lang.Integer) (-26151846));
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime7 = dateTime5.minusHours((int) (short) 100);
        org.joda.time.DateMidnight dateMidnight8 = dateTime7.toDateMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.dayOfYear();
        int int10 = dateTime7.get(dateTimeFieldType9);
        int int11 = dateTime7.getDayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) 100, dateTimeZone13);
        org.joda.time.LocalDate localDate16 = localDate14.plusDays(50);
        org.joda.time.Chronology chronology17 = localDate16.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField19 = chronology17.dayOfMonth();
        org.joda.time.DateTime dateTime20 = dateTime7.withChronology(chronology17);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = dateTimeFormatter4.withChronology(chronology17);
        int int22 = dateTimeFormatter4.getDefaultYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = dateTimeFormatter4.withPivotYear(589);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = dateTimeFormatter24.withPivotYear((java.lang.Integer) 26190);
        java.util.Locale locale27 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter28 = dateTimeFormatter26.withLocale(locale27);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime7 and dateTime20", (dateTime7.compareTo(dateTime20) == 0) == dateTime7.equals(dateTime20));
    }

    @Test
    public void test0344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0344");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.Instant instant2 = instant0.withMillis((long) 11);
        org.joda.time.MutableDateTime mutableDateTime3 = instant2.toMutableDateTime();
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime6 = dateTime4.minusHours((int) (short) 100);
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime9 = dateTime7.minusHours((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int11 = dateTime9.get(dateTimeFieldType10);
        org.joda.time.DurationFieldType durationFieldType12 = dateTimeFieldType10.getRangeDurationType();
        org.joda.time.DateTime dateTime14 = dateTime6.withFieldAdded(durationFieldType12, 11764515);
        int int15 = instant2.compareTo((org.joda.time.ReadableInstant) dateTime14);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and dateTime4", (instant0.compareTo(dateTime4) == 0) == instant0.equals(dateTime4));
    }

    @Test
    public void test0345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0345");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime2 = dateTime0.minusHours((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int4 = dateTime2.get(dateTimeFieldType3);
        org.joda.time.DateTime dateTime6 = dateTime2.minusMillis((int) '#');
        org.joda.time.DateTime dateTime8 = dateTime6.plusDays(11);
        org.joda.time.DateTime dateTime11 = dateTime6.withDurationAdded((long) (byte) 10, 11);
        org.joda.time.DateTimeZone dateTimeZone12 = dateTime6.getZone();
        org.joda.time.DateTime dateTime14 = dateTime6.minusDays(22);
        org.joda.time.DateTime dateTime16 = dateTime6.withYearOfCentury(14);
        org.joda.time.Instant instant17 = org.joda.time.Instant.now();
        org.joda.time.Instant instant19 = instant17.plus((long) 11753187);
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.Instant instant21 = instant19.plus(readableDuration20);
        boolean boolean22 = dateTime6.equals((java.lang.Object) instant21);
        org.joda.time.DateTime.Property property23 = dateTime6.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property25 = localDateTime24.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime24.withField(dateTimeFieldType26, (int) (short) 10);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime24.plusWeeks((-1));
        org.joda.time.LocalDateTime localDateTime32 = localDateTime30.withMillisOfSecond((int) '4');
        org.joda.time.LocalDateTime localDateTime34 = localDateTime30.plusWeeks(26160458);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime30.minusMinutes((int) 'u');
        org.joda.time.LocalDateTime localDateTime38 = localDateTime36.minusMonths(3);
        org.joda.time.DateTime dateTime39 = dateTime6.withFields((org.joda.time.ReadablePartial) localDateTime36);
        org.joda.time.DateTime dateTime41 = dateTime39.plusHours(11764640);
        org.joda.time.DateTime dateTime42 = dateTime39.withLaterOffsetAtOverlap();
        org.joda.time.Instant instant43 = dateTime39.toInstant();
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate46 = new org.joda.time.LocalDate((long) 100, dateTimeZone45);
        org.joda.time.LocalDate localDate48 = localDate46.plusDays(50);
        org.joda.time.Chronology chronology49 = localDate48.getChronology();
        org.joda.time.DateTimeField dateTimeField50 = chronology49.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate53 = new org.joda.time.LocalDate((long) 100, dateTimeZone52);
        org.joda.time.LocalDate localDate55 = localDate53.plusDays(50);
        int int56 = localDate53.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate58 = localDate53.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime60 = new org.joda.time.DateTime();
        int int61 = dateTimeZone59.getOffset((org.joda.time.ReadableInstant) dateTime60);
        org.joda.time.DateMidnight dateMidnight62 = localDate53.toDateMidnight(dateTimeZone59);
        long long64 = dateTimeZone59.convertUTCToLocal(60000L);
        org.joda.time.chrono.ZonedChronology zonedChronology65 = org.joda.time.chrono.ZonedChronology.getInstance(chronology49, dateTimeZone59);
        org.joda.time.DurationField durationField66 = zonedChronology65.weeks();
        org.joda.time.DateTimeField dateTimeField67 = zonedChronology65.centuryOfEra();
        org.joda.time.DurationField durationField68 = zonedChronology65.minutes();
        org.joda.time.DateTimeField dateTimeField69 = zonedChronology65.yearOfEra();
        org.joda.time.DateTimeZone dateTimeZone70 = zonedChronology65.getZone();
        boolean boolean72 = dateTimeZone70.isStandardOffset(5923851084717420000L);
        long long74 = dateTimeZone70.convertUTCToLocal((long) 11828);
        java.lang.String str76 = dateTimeZone70.getShortName(1645525836972L);
        org.joda.time.DateTime dateTime77 = dateTime39.withZone(dateTimeZone70);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime0 and instant17", (dateTime0.compareTo(instant17) == 0) == dateTime0.equals(instant17));
    }

    @Test
    public void test0346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0346");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(dateTimeZone0);
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalTime localTime4 = new org.joda.time.LocalTime(dateTimeZone3);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalTime localTime6 = new org.joda.time.LocalTime(dateTimeZone5);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = localTime6.getFieldType((int) (byte) 1);
        int int9 = localTime4.get(dateTimeFieldType8);
        org.joda.time.LocalTime.Property property10 = localTime2.property(dateTimeFieldType8);
        org.joda.time.LocalTime localTime11 = property10.roundHalfFloorCopy();
        org.joda.time.LocalTime localTime12 = property10.getLocalTime();
        java.lang.String str13 = property10.toString();
        java.lang.String str14 = property10.getAsShortText();
        int int15 = property10.getMinimumValue();
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime();
        org.joda.time.Instant instant18 = dateTime17.toInstant();
        org.joda.time.Chronology chronology19 = dateTime17.getChronology();
        boolean boolean20 = dateTime16.isEqual((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalTime localTime22 = new org.joda.time.LocalTime(dateTimeZone21);
        org.joda.time.LocalTime localTime23 = new org.joda.time.LocalTime(dateTimeZone21);
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalTime localTime25 = new org.joda.time.LocalTime(dateTimeZone24);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalTime localTime27 = new org.joda.time.LocalTime(dateTimeZone26);
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = localTime27.getFieldType((int) (byte) 1);
        int int30 = localTime25.get(dateTimeFieldType29);
        org.joda.time.LocalTime.Property property31 = localTime23.property(dateTimeFieldType29);
        org.joda.time.LocalTime localTime32 = property31.roundHalfFloorCopy();
        org.joda.time.LocalTime localTime33 = property31.getLocalTime();
        org.joda.time.LocalTime localTime34 = property31.roundFloorCopy();
        org.joda.time.LocalTime localTime36 = property31.addWrapFieldToCopy(26159400);
        org.joda.time.DateTimeField dateTimeField37 = property31.getField();
        org.joda.time.LocalTime localTime38 = property31.roundCeilingCopy();
        org.joda.time.LocalTime localTime40 = localTime38.minusHours(11753441);
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.UTC;
        int int43 = dateTimeZone41.getStandardOffset((long) (byte) 1);
        org.joda.time.DateTime dateTime44 = localTime40.toDateTimeToday(dateTimeZone41);
        org.joda.time.DateTime dateTime45 = dateTime16.withZone(dateTimeZone41);
        boolean boolean46 = property10.equals((java.lang.Object) dateTime45);
        int int47 = dateTime45.getYearOfEra();
        long long48 = dateTime45.getMillis();
        org.joda.time.ReadablePeriod readablePeriod49 = null;
        org.joda.time.DateTime dateTime50 = dateTime45.plus(readablePeriod49);
        int int51 = dateTime50.getHourOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime16 and instant18", (dateTime16.compareTo(instant18) == 0) == dateTime16.equals(instant18));
    }

    @Test
    public void test0347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0347");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 100, dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.plusDays(50);
        org.joda.time.Chronology chronology5 = localDate4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 100, dateTimeZone8);
        org.joda.time.LocalDate localDate11 = localDate9.plusDays(50);
        int int12 = localDate9.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate14 = localDate9.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        int int17 = dateTimeZone15.getOffset((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateMidnight dateMidnight18 = localDate9.toDateMidnight(dateTimeZone15);
        long long20 = dateTimeZone15.convertUTCToLocal(60000L);
        org.joda.time.chrono.ZonedChronology zonedChronology21 = org.joda.time.chrono.ZonedChronology.getInstance(chronology5, dateTimeZone15);
        org.joda.time.DurationField durationField22 = zonedChronology21.weeks();
        org.joda.time.DateTimeField dateTimeField23 = zonedChronology21.weekyear();
        org.joda.time.DurationField durationField24 = zonedChronology21.weekyears();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate((long) 100, dateTimeZone26);
        org.joda.time.LocalDate localDate29 = localDate27.plusDays(50);
        org.joda.time.Chronology chronology30 = localDate29.getChronology();
        org.joda.time.LocalDate.Property property31 = localDate29.era();
        org.joda.time.DateTimeField dateTimeField32 = property31.getField();
        org.joda.time.LocalDate localDate33 = property31.getLocalDate();
        org.joda.time.LocalDate localDate35 = localDate33.withYear(26160535);
        org.joda.time.LocalDate localDate37 = localDate35.minusYears(11766550);
        int[] intArray39 = zonedChronology21.get((org.joda.time.ReadablePartial) localDate37, (long) 11764640);
        java.lang.String str40 = zonedChronology21.toString();
        org.joda.time.DateTimeField dateTimeField41 = zonedChronology21.monthOfYear();
        org.joda.time.DurationField durationField42 = zonedChronology21.years();
        org.joda.time.DateTimeField dateTimeField43 = zonedChronology21.clockhourOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on durationField24 and durationField42", (durationField24.compareTo(durationField42) == 0) == durationField24.equals(durationField42));
    }

    @Test
    public void test0348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0348");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        int int1 = dateTime0.getDayOfYear();
        org.joda.time.DateTime dateTime3 = dateTime0.withYear(11751002);
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime();
        int int5 = dateTime4.getDayOfYear();
        org.joda.time.DateTime dateTime7 = dateTime4.withYear(11751002);
        org.joda.time.Instant instant8 = dateTime4.toInstant();
        boolean boolean9 = dateTime0.isEqual((org.joda.time.ReadableInstant) instant8);
        org.joda.time.Instant instant10 = new org.joda.time.Instant();
        org.joda.time.Instant instant12 = instant10.withMillis((long) 11);
        org.joda.time.Instant instant13 = instant12.toInstant();
        org.joda.time.Instant instant15 = instant13.plus((long) 589);
        boolean boolean16 = instant8.isEqual((org.joda.time.ReadableInstant) instant15);
        long long17 = instant15.getMillis();
        org.joda.time.MutableDateTime mutableDateTime18 = instant15.toMutableDateTime();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime0 and instant8", (dateTime0.compareTo(instant8) == 0) == dateTime0.equals(instant8));
    }

    @Test
    public void test0349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0349");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Instant instant2 = dateTime1.toInstant();
        org.joda.time.Chronology chronology3 = dateTime1.getChronology();
        boolean boolean4 = dateTime0.isEqual((org.joda.time.ReadableInstant) dateTime1);
        org.joda.time.DateTime.Property property5 = dateTime0.hourOfDay();
        org.joda.time.DateTime dateTime7 = property5.addToCopy(11934920);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime0 and instant2", (dateTime0.compareTo(instant2) == 0) == dateTime0.equals(instant2));
    }

    @Test
    public void test0350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0350");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 100, dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.plusDays(50);
        org.joda.time.Chronology chronology5 = localDate4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 100, dateTimeZone8);
        org.joda.time.LocalDate localDate11 = localDate9.plusDays(50);
        int int12 = localDate9.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate14 = localDate9.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        int int17 = dateTimeZone15.getOffset((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateMidnight dateMidnight18 = localDate9.toDateMidnight(dateTimeZone15);
        long long20 = dateTimeZone15.convertUTCToLocal(60000L);
        org.joda.time.chrono.ZonedChronology zonedChronology21 = org.joda.time.chrono.ZonedChronology.getInstance(chronology5, dateTimeZone15);
        org.joda.time.DurationField durationField22 = zonedChronology21.eras();
        org.joda.time.DateTimeField dateTimeField23 = zonedChronology21.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField24 = zonedChronology21.yearOfEra();
        org.joda.time.DurationField durationField25 = zonedChronology21.minutes();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField22, durationField25, and durationField22", !(durationField22.compareTo(durationField25) == 0) || (Math.signum(durationField22.compareTo(durationField22)) == Math.signum(durationField25.compareTo(durationField22))));
    }

    @Test
    public void test0351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0351");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime2 = dateTime0.minusHours((int) (short) 100);
        org.joda.time.TimeOfDay timeOfDay3 = dateTime2.toTimeOfDay();
        org.joda.time.DateTime.Property property4 = dateTime2.yearOfEra();
        org.joda.time.DateTime dateTime5 = property4.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime8 = dateTime6.minusHours((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int10 = dateTime8.get(dateTimeFieldType9);
        org.joda.time.DateTime dateTime12 = dateTime8.minusMillis((int) '#');
        org.joda.time.DateTime dateTime14 = dateTime12.plusDays(11);
        org.joda.time.DateTime dateTime17 = dateTime12.withDurationAdded((long) (byte) 10, 11);
        org.joda.time.DateTime dateTime18 = dateTime17.toDateTime();
        org.joda.time.DateTime dateTime20 = dateTime18.minusHours(11771697);
        org.joda.time.DateTime dateTime22 = dateTime18.minusHours(11783576);
        org.joda.time.DateTime dateTime25 = dateTime22.withDurationAdded((long) 11787846, 47);
        org.joda.time.DateTime dateTime27 = dateTime22.minus((long) 26180236);
        org.joda.time.DurationFieldType durationFieldType28 = org.joda.time.DurationFieldType.years();
        org.joda.time.DateTime dateTime30 = dateTime27.withFieldAdded(durationFieldType28, 11764152);
        org.joda.time.DateTime dateTime32 = dateTime5.withFieldAdded(durationFieldType28, 11783192);
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime();
        int int34 = dateTime33.getDayOfYear();
        org.joda.time.DateTime dateTime36 = dateTime33.withYear(11751002);
        org.joda.time.Instant instant37 = dateTime33.toInstant();
        org.joda.time.DateTime dateTime39 = dateTime33.withMillisOfDay(16);
        org.joda.time.DateTime dateTime41 = dateTime33.plusWeeks(11);
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime44 = dateTime42.minusHours((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int46 = dateTime44.get(dateTimeFieldType45);
        org.joda.time.DateTime dateTime48 = dateTime44.minusMillis((int) '#');
        org.joda.time.DateTime dateTime50 = dateTime44.withYearOfEra(17);
        org.joda.time.DateTime dateTime52 = dateTime50.minusDays(292278993);
        org.joda.time.Instant instant53 = dateTime52.toInstant();
        boolean boolean54 = dateTime41.isBefore((org.joda.time.ReadableInstant) dateTime52);
        java.util.Locale locale55 = java.util.Locale.TAIWAN;
        java.util.Calendar calendar56 = java.util.Calendar.getInstance(locale55);
        calendar56.clear();
        org.joda.time.LocalDateTime localDateTime58 = org.joda.time.LocalDateTime.fromCalendarFields(calendar56);
        java.time.Instant instant59 = calendar56.toInstant();
        java.util.Locale locale60 = java.util.Locale.TAIWAN;
        java.util.Calendar calendar61 = java.util.Calendar.getInstance(locale60);
        calendar61.clear();
        calendar61.setTimeInMillis((long) (byte) 1);
        java.util.Date date65 = calendar61.getTime();
        date65.setSeconds(26161850);
        date65.setYear(19);
        calendar56.setTime(date65);
        int int72 = calendar56.getGreatestMinimum(0);
        org.joda.time.LocalDateTime localDateTime73 = org.joda.time.LocalDateTime.fromCalendarFields(calendar56);
        org.joda.time.DateTime dateTime74 = dateTime52.withFields((org.joda.time.ReadablePartial) localDateTime73);
        boolean boolean75 = dateTime5.isEqual((org.joda.time.ReadableInstant) dateTime52);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime0 and instant37", (dateTime0.compareTo(instant37) == 0) == dateTime0.equals(instant37));
    }

    @Test
    public void test0352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0352");
        org.joda.time.Instant instant1 = new org.joda.time.Instant();
        org.joda.time.Instant instant3 = instant1.withMillis((long) 11);
        org.joda.time.Instant instant4 = instant3.toInstant();
        org.joda.time.Chronology chronology5 = instant3.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.clockhourOfHalfday();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((long) 11760560, chronology5);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.LocalDateTime.Property property9 = localDateTime7.property(dateTimeFieldType8);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.LocalDateTime localDateTime11 = localDateTime7.plus(readableDuration10);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minusSeconds(11917559);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime16 = dateTime14.minusHours((int) (short) 100);
        org.joda.time.DateMidnight dateMidnight17 = dateTime16.toDateMidnight();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalTime localTime19 = new org.joda.time.LocalTime(dateTimeZone18);
        org.joda.time.LocalTime localTime20 = new org.joda.time.LocalTime(dateTimeZone18);
        org.joda.time.LocalTime localTime22 = localTime20.plusSeconds(10);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = localTime20.getFieldType(0);
        int int25 = dateMidnight17.get(dateTimeFieldType24);
        java.lang.String str26 = dateTimeFieldType24.toString();
        org.joda.time.LocalDateTime.Property property27 = localDateTime13.property(dateTimeFieldType24);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and dateTime14", (instant1.compareTo(dateTime14) == 0) == instant1.equals(dateTime14));
    }

    @Test
    public void test0353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0353");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.Instant instant1 = dateTime0.toInstant();
        org.joda.time.Chronology chronology2 = dateTime0.getChronology();
        org.joda.time.DateTime dateTime4 = dateTime0.plusDays(2);
        org.joda.time.DateTime dateTime6 = dateTime4.plusSeconds(11751002);
        org.joda.time.Instant instant7 = dateTime4.toInstant();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime10 = dateTime8.minusHours((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int12 = dateTime10.get(dateTimeFieldType11);
        org.joda.time.DateTime dateTime14 = dateTime10.minusMillis((int) '#');
        org.joda.time.DateTime dateTime16 = dateTime14.plusDays(11);
        org.joda.time.DateTime dateTime19 = dateTime14.withDurationAdded((long) 11757696, (int) ' ');
        int int20 = dateTime14.getWeekOfWeekyear();
        org.joda.time.DateTime dateTime22 = dateTime14.minusWeeks(215400000);
        boolean boolean23 = instant7.isBefore((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.DateTime dateTime26 = dateTime22.withDurationAdded(readableDuration24, 43363);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime0 and instant1", (dateTime0.compareTo(instant1) == 0) == dateTime0.equals(instant1));
    }

    @Test
    public void test0354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0354");
        java.util.Locale locale0 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet1 = locale0.getUnicodeLocaleAttributes();
        java.lang.String str2 = locale0.toLanguageTag();
        boolean boolean3 = locale0.hasExtensions();
        java.util.Locale locale4 = locale0.stripExtensions();
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime7 = dateTime5.withMinuteOfHour(14);
        org.joda.time.DateTime dateTime9 = dateTime5.withCenturyOfEra(50);
        org.joda.time.Instant instant10 = new org.joda.time.Instant();
        org.joda.time.Instant instant12 = instant10.minus((long) 2);
        int int13 = dateTime9.compareTo((org.joda.time.ReadableInstant) instant10);
        org.joda.time.DateTime.Property property14 = dateTime9.centuryOfEra();
        org.joda.time.DateTime dateTime16 = dateTime9.plusDays(58);
        java.util.Locale locale17 = java.util.Locale.JAPAN;
        java.util.Set<java.lang.String> strSet18 = locale17.getUnicodeLocaleAttributes();
        java.lang.String str19 = locale17.getScript();
        java.util.Set<java.lang.String> strSet20 = locale17.getUnicodeLocaleKeys();
        java.util.Set<java.lang.String> strSet21 = locale17.getUnicodeLocaleKeys();
        java.util.Calendar calendar22 = dateTime9.toCalendar(locale17);
        java.lang.String str23 = locale4.getDisplayCountry(locale17);
        java.lang.Object obj24 = locale17.clone();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime5 and instant10", (dateTime5.compareTo(instant10) == 0) == dateTime5.equals(instant10));
    }

    @Test
    public void test0355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0355");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime2 = dateTime0.minusHours((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int4 = dateTime2.get(dateTimeFieldType3);
        org.joda.time.DateTime dateTime6 = dateTime2.minusMillis((int) '#');
        boolean boolean7 = dateTime2.isBeforeNow();
        int int8 = dateTime2.getYearOfEra();
        org.joda.time.Instant instant9 = dateTime2.toInstant();
        org.joda.time.DateTime dateTime10 = instant9.toDateTime();
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.Instant instant13 = instant9.withDurationAdded(readableDuration11, 11768869);
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.Instant instant16 = instant9.withDurationAdded(readableDuration14, 11869983);
        org.joda.time.Instant instant17 = instant9.toInstant();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and instant17", (dateTime2.compareTo(instant17) == 0) == dateTime2.equals(instant17));
    }

    @Test
    public void test0356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0356");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        int int1 = dateTime0.getDayOfYear();
        org.joda.time.DateTime dateTime3 = dateTime0.withYear(11751002);
        org.joda.time.Instant instant4 = dateTime0.toInstant();
        org.joda.time.DateTime dateTime6 = dateTime0.plusYears(26160835);
        boolean boolean8 = dateTime6.equals((java.lang.Object) 0.0f);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime11 = dateTime9.minusHours((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int13 = dateTime11.get(dateTimeFieldType12);
        org.joda.time.DateTime dateTime15 = dateTime11.minusMillis((int) '#');
        org.joda.time.DateTime dateTime17 = dateTime15.plusDays(11);
        org.joda.time.DateTime dateTime20 = dateTime15.withDurationAdded((long) 11757696, (int) ' ');
        int int21 = dateTime15.getWeekOfWeekyear();
        org.joda.time.DateTime dateTime23 = dateTime15.minusWeeks(215400000);
        boolean boolean24 = dateTime6.isAfter((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.DateTime dateTime26 = dateTime6.plusHours(34);
        org.joda.time.DateTime dateTime28 = dateTime6.withWeekyear(11859299);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime0 and instant4", (dateTime0.compareTo(instant4) == 0) == dateTime0.equals(instant4));
    }

    @Test
    public void test0357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0357");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime2 = dateTime0.minusHours((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int4 = dateTime2.get(dateTimeFieldType3);
        org.joda.time.DateTime dateTime6 = dateTime2.minusSeconds((int) (short) 0);
        org.joda.time.LocalDate localDate7 = dateTime2.toLocalDate();
        org.joda.time.Instant instant8 = dateTime2.toInstant();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate((long) 100, dateTimeZone10);
        org.joda.time.LocalDate localDate13 = localDate11.plusDays(50);
        org.joda.time.DateTime dateTime14 = localDate13.toDateTimeAtMidnight();
        org.joda.time.LocalDate.Property property15 = localDate13.yearOfEra();
        org.joda.time.LocalDate localDate16 = property15.roundHalfCeilingCopy();
        org.joda.time.LocalDate localDate17 = property15.withMinimumValue();
        org.joda.time.DateTime dateTime18 = localDate17.toDateTimeAtCurrentTime();
        org.joda.time.DateTime dateTime20 = dateTime18.plusWeeks(2017);
        boolean boolean21 = dateTime2.isAfter((org.joda.time.ReadableInstant) dateTime18);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and instant8", (dateTime2.compareTo(instant8) == 0) == dateTime2.equals(instant8));
    }

    @Test
    public void test0358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0358");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withPivotYear((java.lang.Integer) (-26151846));
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime7 = dateTime5.minusHours((int) (short) 100);
        org.joda.time.DateMidnight dateMidnight8 = dateTime7.toDateMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.dayOfYear();
        int int10 = dateTime7.get(dateTimeFieldType9);
        int int11 = dateTime7.getDayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) 100, dateTimeZone13);
        org.joda.time.LocalDate localDate16 = localDate14.plusDays(50);
        org.joda.time.Chronology chronology17 = localDate16.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField19 = chronology17.dayOfMonth();
        org.joda.time.DateTime dateTime20 = dateTime7.withChronology(chronology17);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = dateTimeFormatter4.withChronology(chronology17);
        boolean boolean22 = dateTimeFormatter21.isPrinter();
        org.joda.time.Chronology chronology23 = dateTimeFormatter21.getChronology();
        org.joda.time.DurationField durationField24 = chronology23.halfdays();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime7 and dateTime20", (dateTime7.compareTo(dateTime20) == 0) == dateTime7.equals(dateTime20));
    }

    @Test
    public void test0359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0359");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        int int1 = dateTime0.getDayOfYear();
        org.joda.time.DateTime dateTime3 = dateTime0.withYear(11751002);
        org.joda.time.Instant instant4 = dateTime0.toInstant();
        org.joda.time.DateTime dateTime6 = dateTime0.plusYears(26160835);
        boolean boolean8 = dateTime6.equals((java.lang.Object) 0.0f);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime11 = dateTime9.minusHours((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int13 = dateTime11.get(dateTimeFieldType12);
        org.joda.time.DateTime dateTime15 = dateTime11.minusMillis((int) '#');
        org.joda.time.DateTime dateTime17 = dateTime15.plusDays(11);
        org.joda.time.DateTime dateTime20 = dateTime15.withDurationAdded((long) 11757696, (int) ' ');
        int int21 = dateTime15.getWeekOfWeekyear();
        org.joda.time.DateTime dateTime23 = dateTime15.minusWeeks(215400000);
        boolean boolean24 = dateTime6.isAfter((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property27 = localDateTime26.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime29 = property27.addWrapFieldToCopy(11756302);
        org.joda.time.LocalDateTime.Property property30 = localDateTime29.secondOfMinute();
        java.util.Locale locale31 = java.util.Locale.TAIWAN;
        java.util.Calendar calendar32 = java.util.Calendar.getInstance(locale31);
        boolean boolean33 = locale31.hasExtensions();
        java.lang.String str34 = property30.getAsShortText(locale31);
        java.util.Locale locale35 = java.util.Locale.JAPAN;
        java.util.Set<java.lang.String> strSet36 = locale35.getUnicodeLocaleAttributes();
        java.util.Locale.setDefault(locale35);
        java.lang.String str38 = locale35.toLanguageTag();
        java.lang.String str39 = locale31.getDisplayCountry(locale35);
        java.lang.String str40 = dateTime6.toString("663", locale31);
        java.lang.String str41 = locale31.getISO3Language();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime0 and instant4", (dateTime0.compareTo(instant4) == 0) == dateTime0.equals(instant4));
    }

    @Test
    public void test0360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0360");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 100, dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.plusDays(50);
        org.joda.time.Chronology chronology5 = localDate4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 100, dateTimeZone8);
        org.joda.time.LocalDate localDate11 = localDate9.plusDays(50);
        int int12 = localDate9.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate14 = localDate9.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        int int17 = dateTimeZone15.getOffset((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateMidnight dateMidnight18 = localDate9.toDateMidnight(dateTimeZone15);
        long long20 = dateTimeZone15.convertUTCToLocal(60000L);
        org.joda.time.chrono.ZonedChronology zonedChronology21 = org.joda.time.chrono.ZonedChronology.getInstance(chronology5, dateTimeZone15);
        org.joda.time.DurationField durationField22 = zonedChronology21.weeks();
        org.joda.time.DateTimeField dateTimeField23 = zonedChronology21.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField24 = zonedChronology21.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField25 = zonedChronology21.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField26 = zonedChronology21.halfdayOfDay();
        org.joda.time.DurationField durationField27 = zonedChronology21.halfdays();
        org.joda.time.DateTimeField dateTimeField28 = zonedChronology21.minuteOfHour();
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime31 = dateTime29.minusHours((int) (short) 100);
        org.joda.time.DateTime dateTime33 = dateTime31.minus(0L);
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate36 = new org.joda.time.LocalDate((long) 100, dateTimeZone35);
        org.joda.time.DateTime dateTime37 = dateTime33.withZone(dateTimeZone35);
        org.joda.time.LocalDate localDate38 = dateTime33.toLocalDate();
        org.joda.time.LocalDate localDate40 = localDate38.plusMonths(49);
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate43 = new org.joda.time.LocalDate((long) 100, dateTimeZone42);
        org.joda.time.LocalDate localDate45 = localDate43.plusDays(50);
        org.joda.time.LocalDate.Property property46 = localDate45.monthOfYear();
        org.joda.time.LocalDate.Property property47 = localDate45.year();
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate50 = new org.joda.time.LocalDate((long) 100, dateTimeZone49);
        org.joda.time.LocalDate localDate52 = localDate50.plusDays(50);
        org.joda.time.Chronology chronology53 = localDate52.getChronology();
        org.joda.time.DateTimeField dateTimeField54 = chronology53.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate57 = new org.joda.time.LocalDate((long) 100, dateTimeZone56);
        org.joda.time.LocalDate localDate59 = localDate57.plusDays(50);
        int int60 = localDate57.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate62 = localDate57.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone63 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime64 = new org.joda.time.DateTime();
        int int65 = dateTimeZone63.getOffset((org.joda.time.ReadableInstant) dateTime64);
        org.joda.time.DateMidnight dateMidnight66 = localDate57.toDateMidnight(dateTimeZone63);
        long long68 = dateTimeZone63.convertUTCToLocal(60000L);
        org.joda.time.chrono.ZonedChronology zonedChronology69 = org.joda.time.chrono.ZonedChronology.getInstance(chronology53, dateTimeZone63);
        org.joda.time.DateTime dateTime70 = localDate45.toDateTimeAtStartOfDay(dateTimeZone63);
        java.lang.String str72 = dateTimeZone63.getName((-3155695200000L));
        org.joda.time.LocalDate localDate73 = new org.joda.time.LocalDate(dateTimeZone63);
        org.joda.time.Interval interval74 = localDate40.toInterval(dateTimeZone63);
        org.joda.time.LocalDate localDate76 = localDate40.plusMonths(11842946);
        long long78 = zonedChronology21.set((org.joda.time.ReadablePartial) localDate76, (long) 11801884);
        org.joda.time.DurationField durationField79 = zonedChronology21.minutes();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime31 and dateTime37", (dateTime31.compareTo(dateTime37) == 0) == dateTime31.equals(dateTime37));
    }

    @Test
    public void test0361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0361");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime2 = dateTime0.minusHours((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int4 = dateTime2.get(dateTimeFieldType3);
        org.joda.time.DateTime dateTime6 = dateTime2.minusMillis((int) '#');
        boolean boolean7 = dateTime2.isBeforeNow();
        int int8 = dateTime2.getYearOfEra();
        org.joda.time.Instant instant9 = dateTime2.toInstant();
        org.joda.time.DateTime dateTime10 = instant9.toDateTime();
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.Instant instant12 = instant9.minus(readableDuration11);
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.Instant instant14 = instant9.minus(readableDuration13);
        org.joda.time.MutableDateTime mutableDateTime15 = instant9.toMutableDateTimeISO();
        boolean boolean16 = instant9.isBeforeNow();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and instant9", (dateTime2.compareTo(instant9) == 0) == dateTime2.equals(instant9));
    }

    @Test
    public void test0362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0362");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Instant instant2 = dateTime1.toInstant();
        org.joda.time.Chronology chronology3 = dateTime1.getChronology();
        boolean boolean4 = dateTime0.isEqual((org.joda.time.ReadableInstant) dateTime1);
        org.joda.time.DateTime.Property property5 = dateTime0.hourOfDay();
        org.joda.time.tz.NameProvider nameProvider6 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeZone.setNameProvider(nameProvider6);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate((long) 100, dateTimeZone9);
        org.joda.time.LocalDate localDate12 = localDate10.plusDays(50);
        org.joda.time.Chronology chronology13 = localDate12.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.millisOfDay();
        java.util.Locale locale17 = java.util.Locale.forLanguageTag("hi!");
        java.util.Locale locale18 = java.util.Locale.JAPAN;
        java.util.Set<java.lang.String> strSet19 = locale18.getUnicodeLocaleAttributes();
        java.lang.String str20 = locale17.getDisplayLanguage(locale18);
        java.lang.String str21 = dateTimeField14.getAsShortText(26150856, locale18);
        java.lang.String str24 = nameProvider6.getName(locale18, "", "26150856");
        java.util.Locale locale25 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str28 = nameProvider6.getName(locale25, "hi!", "1970");
        org.joda.time.Instant instant29 = new org.joda.time.Instant();
        org.joda.time.Instant instant31 = instant29.withMillis((long) 11);
        org.joda.time.Instant instant32 = instant31.toInstant();
        org.joda.time.Chronology chronology33 = instant31.getChronology();
        org.joda.time.DateTimeField dateTimeField34 = chronology33.minuteOfHour();
        boolean boolean35 = dateTimeField34.isSupported();
        java.util.Locale locale36 = java.util.Locale.TAIWAN;
        java.lang.String str37 = locale36.toLanguageTag();
        java.lang.String str38 = locale36.toLanguageTag();
        java.lang.String str39 = locale36.getDisplayScript();
        int int40 = dateTimeField34.getMaximumShortTextLength(locale36);
        java.lang.String str43 = nameProvider6.getName(locale36, "2000-01-01T00:00:00.000", "11796322");
        int int44 = property5.getMaximumTextLength(locale36);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime0 and instant2", (dateTime0.compareTo(instant2) == 0) == dateTime0.equals(instant2));
    }

    @Test
    public void test0363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0363");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        int int1 = dateTime0.getDayOfYear();
        org.joda.time.DateTime dateTime3 = dateTime0.withYear(11751002);
        org.joda.time.Instant instant4 = dateTime0.toInstant();
        org.joda.time.DateTime dateTime6 = dateTime0.plusYears(26160835);
        boolean boolean8 = dateTime6.equals((java.lang.Object) 0.0f);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate((long) 100, dateTimeZone10);
        org.joda.time.LocalDate localDate13 = localDate11.plusDays(50);
        org.joda.time.Chronology chronology14 = localDate13.getChronology();
        org.joda.time.DurationField durationField15 = chronology14.centuries();
        org.joda.time.DateTimeField dateTimeField16 = chronology14.hourOfDay();
        org.joda.time.MutableDateTime mutableDateTime17 = dateTime6.toMutableDateTime(chronology14);
        boolean boolean19 = dateTime6.isBefore((long) 11965680);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime0 and instant4", (dateTime0.compareTo(instant4) == 0) == dateTime0.equals(instant4));
    }

    @Test
    public void test0364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0364");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 100, dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.plusDays(50);
        org.joda.time.Chronology chronology5 = localDate4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 100, dateTimeZone8);
        org.joda.time.LocalDate localDate11 = localDate9.plusDays(50);
        int int12 = localDate9.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate14 = localDate9.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        int int17 = dateTimeZone15.getOffset((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateMidnight dateMidnight18 = localDate9.toDateMidnight(dateTimeZone15);
        long long20 = dateTimeZone15.convertUTCToLocal(60000L);
        org.joda.time.chrono.ZonedChronology zonedChronology21 = org.joda.time.chrono.ZonedChronology.getInstance(chronology5, dateTimeZone15);
        org.joda.time.DurationField durationField22 = zonedChronology21.weeks();
        org.joda.time.DateTimeField dateTimeField23 = zonedChronology21.weekyear();
        org.joda.time.DurationField durationField24 = zonedChronology21.weekyears();
        org.joda.time.DateTimeField dateTimeField25 = zonedChronology21.year();
        org.joda.time.DateTimeField dateTimeField26 = zonedChronology21.yearOfEra();
        org.joda.time.DateTimeField dateTimeField27 = zonedChronology21.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField28 = zonedChronology21.secondOfDay();
        org.joda.time.DurationField durationField29 = zonedChronology21.hours();
        org.joda.time.DurationField durationField30 = zonedChronology21.days();
        org.joda.time.DateTimeField dateTimeField31 = zonedChronology21.minuteOfHour();
        org.joda.time.DurationField durationField32 = zonedChronology21.weekyears();
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate35 = new org.joda.time.LocalDate((long) 100, dateTimeZone34);
        org.joda.time.LocalDate localDate37 = localDate35.plusDays(50);
        org.joda.time.Chronology chronology38 = localDate37.getChronology();
        org.joda.time.DateTimeField dateTimeField39 = chronology38.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate42 = new org.joda.time.LocalDate((long) 100, dateTimeZone41);
        org.joda.time.LocalDate localDate44 = localDate42.plusDays(50);
        int int45 = localDate42.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate47 = localDate42.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime();
        int int50 = dateTimeZone48.getOffset((org.joda.time.ReadableInstant) dateTime49);
        org.joda.time.DateMidnight dateMidnight51 = localDate42.toDateMidnight(dateTimeZone48);
        long long53 = dateTimeZone48.convertUTCToLocal(60000L);
        org.joda.time.chrono.ZonedChronology zonedChronology54 = org.joda.time.chrono.ZonedChronology.getInstance(chronology38, dateTimeZone48);
        org.joda.time.DurationField durationField55 = zonedChronology54.weeks();
        java.lang.String str56 = zonedChronology54.toString();
        org.joda.time.DateTimeField dateTimeField57 = zonedChronology54.secondOfDay();
        org.joda.time.DateTimeField dateTimeField58 = zonedChronology54.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField59 = zonedChronology54.millisOfSecond();
        org.joda.time.DurationField durationField60 = dateTimeField59.getRangeDurationField();
        int int61 = durationField32.compareTo(durationField60);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on durationField22 and durationField55", (durationField22.compareTo(durationField55) == 0) == durationField22.equals(durationField55));
    }

    @Test
    public void test0365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0365");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) 58);
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime();
        int int3 = dateTime2.getDayOfYear();
        org.joda.time.DateTime dateTime5 = dateTime2.withYear(11751002);
        org.joda.time.Instant instant6 = dateTime2.toInstant();
        org.joda.time.DateTime dateTime8 = dateTime2.plusYears(26160835);
        boolean boolean10 = dateTime8.equals((java.lang.Object) 0.0f);
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime13 = dateTime11.minusHours((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int15 = dateTime13.get(dateTimeFieldType14);
        org.joda.time.DateTime dateTime17 = dateTime13.minusMillis((int) '#');
        org.joda.time.DateTime dateTime19 = dateTime17.plusDays(11);
        org.joda.time.DateTime dateTime22 = dateTime17.withDurationAdded((long) 11757696, (int) ' ');
        int int23 = dateTime17.getWeekOfWeekyear();
        org.joda.time.DateTime dateTime25 = dateTime17.minusWeeks(215400000);
        boolean boolean26 = dateTime8.isAfter((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.centuryOfEra();
        int int28 = dateTime8.get(dateTimeFieldType27);
        int int29 = dateTime1.get(dateTimeFieldType27);
        org.joda.time.DateTime dateTime31 = dateTime1.minusYears(11854316);
        org.joda.time.DurationFieldType durationFieldType32 = org.joda.time.DurationFieldType.millis();
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate35 = new org.joda.time.LocalDate((long) 100, dateTimeZone34);
        org.joda.time.LocalDate localDate37 = localDate35.plusDays(50);
        org.joda.time.Chronology chronology38 = localDate37.getChronology();
        org.joda.time.DateTimeField dateTimeField39 = chronology38.millisOfDay();
        org.joda.time.LocalDate localDate40 = new org.joda.time.LocalDate(chronology38);
        org.joda.time.DateTimeField dateTimeField41 = chronology38.minuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(59, 50);
        java.util.TimeZone timeZone46 = dateTimeZone45.toTimeZone();
        java.util.TimeZone timeZone47 = dateTimeZone45.toTimeZone();
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime(72000000L, dateTimeZone45);
        int int50 = dateTimeZone45.getStandardOffset((long) 'u');
        org.joda.time.LocalDate localDate51 = new org.joda.time.LocalDate(dateTimeZone45);
        org.joda.time.chrono.ZonedChronology zonedChronology52 = org.joda.time.chrono.ZonedChronology.getInstance(chronology38, dateTimeZone45);
        org.joda.time.DurationField durationField53 = durationFieldType32.getField(chronology38);
        org.joda.time.DateTime dateTime55 = dateTime31.withFieldAdded(durationFieldType32, 11885623);
        org.joda.time.Chronology chronology56 = dateTime31.getChronology();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and instant6", (dateTime2.compareTo(instant6) == 0) == dateTime2.equals(instant6));
    }

    @Test
    public void test0366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0366");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) 58);
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime();
        int int3 = dateTime2.getDayOfYear();
        org.joda.time.DateTime dateTime5 = dateTime2.withYear(11751002);
        org.joda.time.Instant instant6 = dateTime2.toInstant();
        org.joda.time.DateTime dateTime8 = dateTime2.plusYears(26160835);
        boolean boolean10 = dateTime8.equals((java.lang.Object) 0.0f);
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime13 = dateTime11.minusHours((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int15 = dateTime13.get(dateTimeFieldType14);
        org.joda.time.DateTime dateTime17 = dateTime13.minusMillis((int) '#');
        org.joda.time.DateTime dateTime19 = dateTime17.plusDays(11);
        org.joda.time.DateTime dateTime22 = dateTime17.withDurationAdded((long) 11757696, (int) ' ');
        int int23 = dateTime17.getWeekOfWeekyear();
        org.joda.time.DateTime dateTime25 = dateTime17.minusWeeks(215400000);
        boolean boolean26 = dateTime8.isAfter((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.centuryOfEra();
        int int28 = dateTime8.get(dateTimeFieldType27);
        int int29 = dateTime1.get(dateTimeFieldType27);
        org.joda.time.DateTime dateTime31 = dateTime1.minusYears(11854316);
        org.joda.time.DateTime dateTime33 = dateTime31.minusWeeks(0);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and instant6", (dateTime2.compareTo(instant6) == 0) == dateTime2.equals(instant6));
    }

    @Test
    public void test0367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0367");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 100, dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.plusDays(50);
        org.joda.time.Chronology chronology5 = localDate4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 100, dateTimeZone8);
        org.joda.time.LocalDate localDate11 = localDate9.plusDays(50);
        int int12 = localDate9.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate14 = localDate9.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        int int17 = dateTimeZone15.getOffset((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateMidnight dateMidnight18 = localDate9.toDateMidnight(dateTimeZone15);
        long long20 = dateTimeZone15.convertUTCToLocal(60000L);
        org.joda.time.chrono.ZonedChronology zonedChronology21 = org.joda.time.chrono.ZonedChronology.getInstance(chronology5, dateTimeZone15);
        org.joda.time.DurationField durationField22 = zonedChronology21.weeks();
        org.joda.time.DateTimeField dateTimeField23 = zonedChronology21.weekyear();
        org.joda.time.DurationField durationField24 = zonedChronology21.weekyears();
        org.joda.time.DateTimeField dateTimeField25 = zonedChronology21.centuryOfEra();
        org.joda.time.DurationField durationField26 = zonedChronology21.millis();
        org.joda.time.DurationField durationField27 = zonedChronology21.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField27, durationField22, and durationField24", !(durationField27.compareTo(durationField22) == 0) || (Math.signum(durationField27.compareTo(durationField24)) == Math.signum(durationField22.compareTo(durationField24))));
    }

    @Test
    public void test0368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0368");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(dateTimeZone0);
        org.joda.time.LocalTime localTime3 = localTime1.minusHours(0);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalTime localTime5 = localTime3.plus(readablePeriod4);
        org.joda.time.LocalTime localTime7 = localTime3.minusSeconds(5);
        org.joda.time.LocalTime localTime9 = localTime3.plusMillis((int) (byte) 0);
        int int10 = localTime9.getMillisOfDay();
        int int11 = localTime9.getHourOfDay();
        org.joda.time.DateTime dateTime12 = localTime9.toDateTimeToday();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalTime localTime14 = new org.joda.time.LocalTime(dateTimeZone13);
        org.joda.time.LocalTime localTime16 = localTime14.minusHours(0);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.LocalTime localTime18 = localTime16.plus(readablePeriod17);
        org.joda.time.LocalTime localTime20 = localTime16.minusSeconds(5);
        org.joda.time.LocalTime localTime22 = localTime16.plusMillis((int) (byte) 0);
        int int23 = localTime22.getMillisOfDay();
        org.joda.time.LocalTime.Property property24 = localTime22.minuteOfHour();
        org.joda.time.LocalTime localTime26 = property24.addWrapFieldToCopy((int) (short) 0);
        org.joda.time.LocalTime localTime27 = localTime9.withFields((org.joda.time.ReadablePartial) localTime26);
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime();
        int int29 = dateTime28.getDayOfYear();
        org.joda.time.DateTime dateTime31 = dateTime28.withYear(11751002);
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime();
        int int33 = dateTime32.getDayOfYear();
        org.joda.time.DateTime dateTime35 = dateTime32.withYear(11751002);
        org.joda.time.Instant instant36 = dateTime32.toInstant();
        boolean boolean37 = dateTime28.isEqual((org.joda.time.ReadableInstant) instant36);
        org.joda.time.Instant instant40 = instant36.withDurationAdded((long) 26260461, 11844162);
        org.joda.time.DateTime dateTime41 = localTime9.toDateTime((org.joda.time.ReadableInstant) instant40);
        org.joda.time.ReadableDuration readableDuration42 = null;
        org.joda.time.Instant instant43 = instant40.plus(readableDuration42);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime28 and instant36", (dateTime28.compareTo(instant36) == 0) == dateTime28.equals(instant36));
    }

    @Test
    public void test0369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0369");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.Instant instant2 = instant0.withMillis((long) 11);
        org.joda.time.Instant instant3 = instant2.toInstant();
        org.joda.time.Instant instant5 = instant3.plus((long) 11757325);
        org.joda.time.Instant instant6 = new org.joda.time.Instant();
        org.joda.time.Instant instant8 = instant6.minus((long) 2);
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.Instant instant10 = instant8.plus(readableDuration9);
        boolean boolean11 = instant3.isBefore((org.joda.time.ReadableInstant) instant8);
        org.joda.time.DateTime dateTime12 = instant3.toDateTimeISO();
        int int13 = dateTime12.getSecondOfMinute();
        long long14 = dateTime12.getMillis();
        org.joda.time.DateTime.Property property15 = dateTime12.millisOfDay();
        org.joda.time.DurationField durationField16 = property15.getRangeDurationField();
        org.joda.time.DateTime dateTime18 = property15.addWrapFieldToCopy(11908470);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant2 and dateTime12", (instant2.compareTo(dateTime12) == 0) == instant2.equals(dateTime12));
    }

    @Test
    public void test0370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0370");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.Instant instant1 = dateTime0.toInstant();
        org.joda.time.Chronology chronology2 = dateTime0.getChronology();
        long long3 = dateTime0.getMillis();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) 100, dateTimeZone5);
        org.joda.time.LocalDate.Property property7 = localDate6.weekyear();
        org.joda.time.LocalDate localDate9 = localDate6.plusDays(51);
        org.joda.time.DateTime dateTime10 = localDate9.toDateTimeAtMidnight();
        org.joda.time.DateTime dateTime12 = dateTime10.plusMonths(11803413);
        org.joda.time.DateTime dateTime14 = dateTime12.plus((long) 26212957);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate((long) 100, dateTimeZone16);
        org.joda.time.LocalDate localDate19 = localDate17.plusDays(50);
        org.joda.time.Chronology chronology20 = localDate19.getChronology();
        org.joda.time.DateTimeField dateTimeField21 = chronology20.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate((long) 100, dateTimeZone23);
        org.joda.time.LocalDate localDate26 = localDate24.plusDays(50);
        int int27 = localDate24.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate29 = localDate24.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime();
        int int32 = dateTimeZone30.getOffset((org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.DateMidnight dateMidnight33 = localDate24.toDateMidnight(dateTimeZone30);
        long long35 = dateTimeZone30.convertUTCToLocal(60000L);
        org.joda.time.chrono.ZonedChronology zonedChronology36 = org.joda.time.chrono.ZonedChronology.getInstance(chronology20, dateTimeZone30);
        org.joda.time.DurationField durationField37 = zonedChronology36.weeks();
        org.joda.time.DateTimeField dateTimeField38 = zonedChronology36.year();
        org.joda.time.DateTimeZone dateTimeZone39 = zonedChronology36.getZone();
        org.joda.time.DateTimeField dateTimeField40 = zonedChronology36.halfdayOfDay();
        org.joda.time.DurationField durationField41 = zonedChronology36.hours();
        org.joda.time.DurationField durationField42 = zonedChronology36.months();
        org.joda.time.DateTimeField dateTimeField43 = zonedChronology36.monthOfYear();
        org.joda.time.DurationField durationField44 = zonedChronology36.seconds();
        org.joda.time.DateTimeField dateTimeField45 = zonedChronology36.millisOfDay();
        java.util.Locale locale46 = java.util.Locale.JAPAN;
        java.util.Set<java.lang.String> strSet47 = locale46.getUnicodeLocaleAttributes();
        java.util.Iterator<java.lang.String> strItor48 = strSet47.iterator();
        java.util.stream.Stream<java.lang.String> strStream49 = strSet47.parallelStream();
        java.util.Locale locale50 = java.util.Locale.JAPAN;
        java.util.Set<java.lang.String> strSet51 = locale50.getUnicodeLocaleAttributes();
        java.util.Iterator<java.lang.String> strItor52 = strSet51.iterator();
        boolean boolean53 = strSet47.removeAll((java.util.Collection<java.lang.String>) strSet51);
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(59, 50);
        java.util.TimeZone timeZone57 = dateTimeZone56.toTimeZone();
        boolean boolean58 = strSet47.equals((java.lang.Object) dateTimeZone56);
        long long60 = dateTimeZone56.previousTransition(6059809176L);
        org.joda.time.Chronology chronology61 = zonedChronology36.withZone(dateTimeZone56);
        org.joda.time.DateTime dateTime62 = dateTime14.toDateTime(dateTimeZone56);
        int int63 = dateTime0.compareTo((org.joda.time.ReadableInstant) dateTime62);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and dateTime31", (instant1.compareTo(dateTime31) == 0) == instant1.equals(dateTime31));
    }

    @Test
    public void test0371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0371");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 100, dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.plusDays(50);
        org.joda.time.Chronology chronology5 = localDate4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 100, dateTimeZone8);
        org.joda.time.LocalDate localDate11 = localDate9.plusDays(50);
        int int12 = localDate9.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate14 = localDate9.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        int int17 = dateTimeZone15.getOffset((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateMidnight dateMidnight18 = localDate9.toDateMidnight(dateTimeZone15);
        long long20 = dateTimeZone15.convertUTCToLocal(60000L);
        org.joda.time.chrono.ZonedChronology zonedChronology21 = org.joda.time.chrono.ZonedChronology.getInstance(chronology5, dateTimeZone15);
        org.joda.time.DurationField durationField22 = zonedChronology21.weeks();
        org.joda.time.DurationField durationField23 = zonedChronology21.centuries();
        org.joda.time.DateTimeField dateTimeField24 = zonedChronology21.secondOfMinute();
        org.joda.time.DurationField durationField25 = zonedChronology21.months();
        org.joda.time.DurationField durationField26 = zonedChronology21.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField26, durationField22, and durationField23", !(durationField26.compareTo(durationField22) == 0) || (Math.signum(durationField26.compareTo(durationField23)) == Math.signum(durationField22.compareTo(durationField23))));
    }

    @Test
    public void test0372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0372");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 100, dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.plusDays(50);
        org.joda.time.Chronology chronology5 = localDate4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 100, dateTimeZone8);
        org.joda.time.LocalDate localDate11 = localDate9.plusDays(50);
        int int12 = localDate9.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate14 = localDate9.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        int int17 = dateTimeZone15.getOffset((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateMidnight dateMidnight18 = localDate9.toDateMidnight(dateTimeZone15);
        long long20 = dateTimeZone15.convertUTCToLocal(60000L);
        org.joda.time.chrono.ZonedChronology zonedChronology21 = org.joda.time.chrono.ZonedChronology.getInstance(chronology5, dateTimeZone15);
        org.joda.time.DurationField durationField22 = zonedChronology21.weeks();
        org.joda.time.DateTimeField dateTimeField23 = zonedChronology21.year();
        org.joda.time.DateTimeZone dateTimeZone24 = zonedChronology21.getZone();
        org.joda.time.DurationField durationField25 = zonedChronology21.months();
        org.joda.time.DateTimeField dateTimeField26 = zonedChronology21.dayOfMonth();
        org.joda.time.DurationField durationField27 = zonedChronology21.weeks();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate30 = new org.joda.time.LocalDate((long) 100, dateTimeZone29);
        org.joda.time.LocalDate localDate32 = localDate30.plusDays(50);
        org.joda.time.Chronology chronology33 = localDate32.getChronology();
        org.joda.time.DateTimeField dateTimeField34 = chronology33.minuteOfHour();
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime(chronology33);
        org.joda.time.DateTime dateTime37 = dateTime35.plusMonths(11767873);
        int int38 = dateTime37.getSecondOfDay();
        org.joda.time.DateTime.Property property39 = dateTime37.weekOfWeekyear();
        org.joda.time.DateTime dateTime40 = dateTime37.withLaterOffsetAtOverlap();
        org.joda.time.DateTime dateTime42 = dateTime40.minusMonths(11814974);
        org.joda.time.DateTimeZone dateTimeZone43 = dateTime40.getZone();
        org.joda.time.Chronology chronology44 = zonedChronology21.withZone(dateTimeZone43);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime16 and dateTime35", (dateTime16.compareTo(dateTime35) == 0) == dateTime16.equals(dateTime35));
    }

    @Test
    public void test0373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0373");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(dateTimeZone0);
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalTime localTime4 = new org.joda.time.LocalTime(dateTimeZone3);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalTime localTime6 = new org.joda.time.LocalTime(dateTimeZone5);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = localTime6.getFieldType((int) (byte) 1);
        int int9 = localTime4.get(dateTimeFieldType8);
        org.joda.time.LocalTime.Property property10 = localTime2.property(dateTimeFieldType8);
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime();
        org.joda.time.Instant instant12 = dateTime11.toInstant();
        int int13 = property10.compareTo((org.joda.time.ReadableInstant) dateTime11);
        java.util.Date date14 = dateTime11.toDate();
        int int15 = date14.getMonth();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime11 and instant12", (dateTime11.compareTo(instant12) == 0) == dateTime11.equals(instant12));
    }

    @Test
    public void test0374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0374");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime2 = dateTime0.minusHours((int) (short) 100);
        org.joda.time.DateMidnight dateMidnight3 = dateTime2.toDateMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.dayOfYear();
        int int5 = dateTime2.get(dateTimeFieldType4);
        org.joda.time.DateTime dateTime7 = dateTime2.withMillisOfSecond(616);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate((long) 100, dateTimeZone9);
        org.joda.time.LocalDate localDate12 = localDate10.plusDays(50);
        org.joda.time.Chronology chronology13 = localDate12.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.millisOfDay();
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate(chronology13);
        org.joda.time.DateTimeField dateTimeField16 = chronology13.minuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(59, 50);
        java.util.TimeZone timeZone21 = dateTimeZone20.toTimeZone();
        java.util.TimeZone timeZone22 = dateTimeZone20.toTimeZone();
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime(72000000L, dateTimeZone20);
        int int25 = dateTimeZone20.getStandardOffset((long) 'u');
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate(dateTimeZone20);
        org.joda.time.chrono.ZonedChronology zonedChronology27 = org.joda.time.chrono.ZonedChronology.getInstance(chronology13, dateTimeZone20);
        org.joda.time.DateTimeField dateTimeField28 = zonedChronology27.minuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone29 = zonedChronology27.getZone();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate((long) 100, dateTimeZone31);
        org.joda.time.LocalDate localDate34 = localDate32.plusDays(50);
        int int35 = localDate32.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate37 = localDate32.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime();
        int int40 = dateTimeZone38.getOffset((org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.DateMidnight dateMidnight41 = localDate32.toDateMidnight(dateTimeZone38);
        long long43 = dateTimeZone38.convertUTCToLocal(60000L);
        org.joda.time.LocalDate localDate44 = org.joda.time.LocalDate.now(dateTimeZone38);
        boolean boolean45 = zonedChronology27.equals((java.lang.Object) dateTimeZone38);
        org.joda.time.DateTime dateTime46 = dateTime7.toDateTime((org.joda.time.Chronology) zonedChronology27);
        org.joda.time.DurationField durationField47 = zonedChronology27.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime7 and dateTime46", (dateTime7.compareTo(dateTime46) == 0) == dateTime7.equals(dateTime46));
    }

    @Test
    public void test0375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0375");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime2 = dateTime0.minusHours((int) (short) 100);
        org.joda.time.TimeOfDay timeOfDay3 = dateTime2.toTimeOfDay();
        org.joda.time.DateTime.Property property4 = dateTime2.yearOfEra();
        org.joda.time.DateTime dateTime5 = property4.roundCeilingCopy();
        org.joda.time.DateTime dateTime6 = property4.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime7 = property4.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime9 = dateTime7.minusSeconds(11783369);
        org.joda.time.Instant instant10 = dateTime7.toInstant();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.DateTime dateTime12 = dateTime7.withZoneRetainFields(dateTimeZone11);
        org.joda.time.DateTime dateTime14 = dateTime12.withYear(11863);
        org.joda.time.Instant instant15 = new org.joda.time.Instant();
        org.joda.time.Instant instant17 = instant15.withMillis((long) 11);
        org.joda.time.Instant instant18 = instant17.toInstant();
        org.joda.time.Chronology chronology19 = instant17.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.minuteOfHour();
        boolean boolean21 = dateTimeField20.isSupported();
        java.util.Locale locale22 = java.util.Locale.TAIWAN;
        java.lang.String str23 = locale22.toLanguageTag();
        java.lang.String str24 = locale22.toLanguageTag();
        java.lang.String str25 = locale22.getDisplayScript();
        int int26 = dateTimeField20.getMaximumShortTextLength(locale22);
        java.util.Calendar calendar27 = dateTime12.toCalendar(locale22);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime0 and instant15", (dateTime0.compareTo(instant15) == 0) == dateTime0.equals(instant15));
    }

    @Test
    public void test0376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0376");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime2 = dateTime0.minusHours((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalTime localTime4 = new org.joda.time.LocalTime(dateTimeZone3);
        org.joda.time.DateTime dateTime5 = dateTime0.withZone(dateTimeZone3);
        org.joda.time.DateTime dateTime6 = dateTime5.withLaterOffsetAtOverlap();
        java.util.GregorianCalendar gregorianCalendar7 = dateTime5.toGregorianCalendar();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime0 and dateTime5", (dateTime0.compareTo(dateTime5) == 0) == dateTime0.equals(dateTime5));
    }

    @Test
    public void test0377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0377");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 100, dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.plusDays(50);
        org.joda.time.Chronology chronology5 = localDate4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 100, dateTimeZone8);
        org.joda.time.LocalDate localDate11 = localDate9.plusDays(50);
        int int12 = localDate9.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate14 = localDate9.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        int int17 = dateTimeZone15.getOffset((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateMidnight dateMidnight18 = localDate9.toDateMidnight(dateTimeZone15);
        long long20 = dateTimeZone15.convertUTCToLocal(60000L);
        org.joda.time.chrono.ZonedChronology zonedChronology21 = org.joda.time.chrono.ZonedChronology.getInstance(chronology5, dateTimeZone15);
        org.joda.time.DurationField durationField22 = zonedChronology21.weeks();
        org.joda.time.DateTimeField dateTimeField23 = zonedChronology21.year();
        org.joda.time.DateTimeZone dateTimeZone24 = zonedChronology21.getZone();
        org.joda.time.DurationField durationField25 = zonedChronology21.months();
        org.joda.time.DateTimeField dateTimeField26 = zonedChronology21.clockhourOfHalfday();
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((org.joda.time.Chronology) zonedChronology21);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate30 = new org.joda.time.LocalDate((long) 100, dateTimeZone29);
        org.joda.time.LocalDate localDate32 = localDate30.plusDays(50);
        org.joda.time.Chronology chronology33 = localDate32.getChronology();
        org.joda.time.DateTimeField dateTimeField34 = chronology33.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate37 = new org.joda.time.LocalDate((long) 100, dateTimeZone36);
        org.joda.time.LocalDate localDate39 = localDate37.plusDays(50);
        int int40 = localDate37.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate42 = localDate37.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime();
        int int45 = dateTimeZone43.getOffset((org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.DateMidnight dateMidnight46 = localDate37.toDateMidnight(dateTimeZone43);
        long long48 = dateTimeZone43.convertUTCToLocal(60000L);
        org.joda.time.chrono.ZonedChronology zonedChronology49 = org.joda.time.chrono.ZonedChronology.getInstance(chronology33, dateTimeZone43);
        org.joda.time.DurationField durationField50 = zonedChronology49.weeks();
        org.joda.time.DateTimeField dateTimeField51 = zonedChronology49.weekyear();
        org.joda.time.DurationField durationField52 = zonedChronology49.weekyears();
        long long56 = zonedChronology49.add(0L, 11776486L, 0);
        org.joda.time.DateTimeField dateTimeField57 = zonedChronology49.era();
        org.joda.time.DateTimeField dateTimeField58 = zonedChronology49.yearOfEra();
        org.joda.time.DateTime dateTime59 = dateTime27.withChronology((org.joda.time.Chronology) zonedChronology49);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on durationField22 and durationField50", (durationField22.compareTo(durationField50) == 0) == durationField22.equals(durationField50));
    }

    @Test
    public void test0378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0378");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 100, dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.plusDays(50);
        org.joda.time.Chronology chronology5 = localDate4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 100, dateTimeZone8);
        org.joda.time.LocalDate localDate11 = localDate9.plusDays(50);
        int int12 = localDate9.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate14 = localDate9.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        int int17 = dateTimeZone15.getOffset((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateMidnight dateMidnight18 = localDate9.toDateMidnight(dateTimeZone15);
        long long20 = dateTimeZone15.convertUTCToLocal(60000L);
        org.joda.time.chrono.ZonedChronology zonedChronology21 = org.joda.time.chrono.ZonedChronology.getInstance(chronology5, dateTimeZone15);
        org.joda.time.DurationField durationField22 = zonedChronology21.eras();
        org.joda.time.DateTimeField dateTimeField23 = zonedChronology21.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField24 = zonedChronology21.weekyearOfCentury();
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        long long28 = zonedChronology21.add(readablePeriod25, (long) 38, 11809825);
        org.joda.time.DurationField durationField29 = zonedChronology21.weeks();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField22, durationField29, and durationField22", !(durationField22.compareTo(durationField29) == 0) || (Math.signum(durationField22.compareTo(durationField22)) == Math.signum(durationField29.compareTo(durationField22))));
    }

    @Test
    public void test0379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0379");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 100, dateTimeZone2);
        org.joda.time.LocalDate localDate5 = localDate3.plusDays(50);
        org.joda.time.Chronology chronology6 = localDate5.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate((long) 100, dateTimeZone9);
        org.joda.time.LocalDate localDate12 = localDate10.plusDays(50);
        int int13 = localDate10.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate15 = localDate10.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime();
        int int18 = dateTimeZone16.getOffset((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.DateMidnight dateMidnight19 = localDate10.toDateMidnight(dateTimeZone16);
        long long21 = dateTimeZone16.convertUTCToLocal(60000L);
        org.joda.time.chrono.ZonedChronology zonedChronology22 = org.joda.time.chrono.ZonedChronology.getInstance(chronology6, dateTimeZone16);
        org.joda.time.DurationField durationField23 = zonedChronology22.weeks();
        org.joda.time.DateTimeField dateTimeField24 = zonedChronology22.year();
        org.joda.time.DateTimeZone dateTimeZone25 = zonedChronology22.getZone();
        org.joda.time.DurationField durationField26 = zonedChronology22.months();
        org.joda.time.DateTimeField dateTimeField27 = zonedChronology22.clockhourOfHalfday();
        org.joda.time.Instant instant28 = new org.joda.time.Instant();
        org.joda.time.Instant instant30 = instant28.withMillis((long) 11);
        org.joda.time.Instant instant31 = instant30.toInstant();
        org.joda.time.Chronology chronology32 = instant30.getChronology();
        org.joda.time.DateTimeField dateTimeField33 = chronology32.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate36 = new org.joda.time.LocalDate((long) 100, dateTimeZone35);
        int int37 = dateTimeField33.getMaximumValue((org.joda.time.ReadablePartial) localDate36);
        int int38 = dateTimeField33.getMinimumValue();
        boolean boolean39 = zonedChronology22.equals((java.lang.Object) int38);
        org.joda.time.DateTimeField dateTimeField40 = zonedChronology22.yearOfEra();
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime((long) 2243, (org.joda.time.Chronology) zonedChronology22);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime17 and instant28", (dateTime17.compareTo(instant28) == 0) == dateTime17.equals(instant28));
    }

    @Test
    public void test0380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0380");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 100, dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.plusDays(50);
        org.joda.time.Chronology chronology5 = localDate4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 100, dateTimeZone8);
        org.joda.time.LocalDate localDate11 = localDate9.plusDays(50);
        int int12 = localDate9.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate14 = localDate9.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        int int17 = dateTimeZone15.getOffset((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateMidnight dateMidnight18 = localDate9.toDateMidnight(dateTimeZone15);
        long long20 = dateTimeZone15.convertUTCToLocal(60000L);
        org.joda.time.chrono.ZonedChronology zonedChronology21 = org.joda.time.chrono.ZonedChronology.getInstance(chronology5, dateTimeZone15);
        org.joda.time.DurationField durationField22 = zonedChronology21.weeks();
        java.lang.String str23 = zonedChronology21.toString();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate((long) 100, dateTimeZone25);
        org.joda.time.LocalDate.Property property27 = localDate26.weekyear();
        org.joda.time.LocalDate localDate29 = property27.setCopy(2022);
        org.joda.time.Instant instant30 = new org.joda.time.Instant();
        org.joda.time.Instant instant32 = instant30.withMillis((long) 11);
        org.joda.time.Instant instant33 = instant32.toInstant();
        org.joda.time.Chronology chronology34 = instant32.getChronology();
        org.joda.time.DateTimeField dateTimeField35 = chronology34.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate38 = new org.joda.time.LocalDate((long) 100, dateTimeZone37);
        int int39 = dateTimeField35.getMaximumValue((org.joda.time.ReadablePartial) localDate38);
        int int41 = localDate38.getValue(2);
        org.joda.time.DateMidnight dateMidnight42 = localDate38.toDateMidnight();
        org.joda.time.LocalDate localDate44 = localDate38.plusMonths(26160535);
        int int45 = localDate44.getYear();
        boolean boolean46 = property27.equals((java.lang.Object) localDate44);
        org.joda.time.DateTime dateTime47 = localDate44.toDateTimeAtStartOfDay();
        boolean boolean48 = zonedChronology21.equals((java.lang.Object) dateTime47);
        org.joda.time.DateTimeField dateTimeField49 = zonedChronology21.monthOfYear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime16 and instant30", (dateTime16.compareTo(instant30) == 0) == dateTime16.equals(instant30));
    }

    @Test
    public void test0381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0381");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime2 = dateTime0.minusHours((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int4 = dateTime2.get(dateTimeFieldType3);
        org.joda.time.DateTime dateTime6 = dateTime2.minusMillis((int) '#');
        org.joda.time.DateTime dateTime8 = dateTime6.plusDays(11);
        org.joda.time.DateTime dateTime11 = dateTime6.withDurationAdded((long) (byte) 10, 11);
        org.joda.time.DateTimeZone dateTimeZone12 = dateTime6.getZone();
        org.joda.time.DateTime dateTime14 = dateTime6.minusDays(22);
        org.joda.time.DateTime dateTime16 = dateTime6.withYearOfCentury(14);
        org.joda.time.Instant instant17 = org.joda.time.Instant.now();
        org.joda.time.Instant instant19 = instant17.plus((long) 11753187);
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.Instant instant21 = instant19.plus(readableDuration20);
        boolean boolean22 = dateTime6.equals((java.lang.Object) instant21);
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate((long) 100, dateTimeZone24);
        org.joda.time.LocalDate localDate27 = localDate25.plusDays(50);
        org.joda.time.Chronology chronology28 = localDate27.getChronology();
        org.joda.time.DateTimeField dateTimeField29 = chronology28.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate((long) 100, dateTimeZone31);
        org.joda.time.LocalDate localDate34 = localDate32.plusDays(50);
        int int35 = localDate32.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate37 = localDate32.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime();
        int int40 = dateTimeZone38.getOffset((org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.DateMidnight dateMidnight41 = localDate32.toDateMidnight(dateTimeZone38);
        long long43 = dateTimeZone38.convertUTCToLocal(60000L);
        org.joda.time.chrono.ZonedChronology zonedChronology44 = org.joda.time.chrono.ZonedChronology.getInstance(chronology28, dateTimeZone38);
        org.joda.time.DurationField durationField45 = zonedChronology44.eras();
        org.joda.time.DateTimeField dateTimeField46 = zonedChronology44.minuteOfDay();
        org.joda.time.Chronology chronology47 = zonedChronology44.withUTC();
        org.joda.time.DateTimeField dateTimeField48 = zonedChronology44.monthOfYear();
        org.joda.time.DateTimeField dateTimeField49 = zonedChronology44.dayOfYear();
        org.joda.time.DateTimeField dateTimeField50 = zonedChronology44.halfdayOfDay();
        org.joda.time.DateTime dateTime51 = dateTime6.toDateTime((org.joda.time.Chronology) zonedChronology44);
        int int52 = dateTime6.getYearOfCentury();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime0 and instant17", (dateTime0.compareTo(instant17) == 0) == dateTime0.equals(instant17));
    }

    @Test
    public void test0382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0382");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property1 = localDateTime0.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withField(dateTimeFieldType2, (int) (short) 10);
        org.joda.time.LocalDateTime.Property property5 = localDateTime0.minuteOfHour();
        org.joda.time.LocalDateTime.Property property6 = localDateTime0.millisOfDay();
        org.joda.time.LocalDateTime.Property property7 = localDateTime0.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime8 = property7.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.withCenturyOfEra(320);
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime14 = dateTime12.minusHours((int) (short) 100);
        org.joda.time.DateTime dateTime16 = dateTime12.withHourOfDay(10);
        java.util.GregorianCalendar gregorianCalendar17 = dateTime12.toGregorianCalendar();
        org.joda.time.Instant instant19 = new org.joda.time.Instant();
        org.joda.time.Instant instant21 = instant19.withMillis((long) 11);
        org.joda.time.Instant instant22 = instant21.toInstant();
        org.joda.time.Chronology chronology23 = instant21.getChronology();
        org.joda.time.DateTimeField dateTimeField24 = chronology23.clockhourOfHalfday();
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((long) 11760560, chronology23);
        org.joda.time.DateTime dateTime26 = dateTime12.withChronology(chronology23);
        boolean boolean27 = dateTimeFieldType11.isSupported(chronology23);
        boolean boolean28 = localDateTime8.isSupported(dateTimeFieldType11);
        org.joda.time.LocalDateTime.Property property29 = localDateTime8.monthOfYear();
        org.joda.time.LocalDateTime localDateTime31 = property29.addToCopy((long) 11960277);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime12 and instant19", (dateTime12.compareTo(instant19) == 0) == dateTime12.equals(instant19));
    }

    @Test
    public void test0383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0383");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime2 = dateTime0.withMinuteOfHour(14);
        org.joda.time.DateTime dateTime4 = dateTime0.withCenturyOfEra(50);
        org.joda.time.Instant instant5 = new org.joda.time.Instant();
        org.joda.time.Instant instant7 = instant5.minus((long) 2);
        int int8 = dateTime4.compareTo((org.joda.time.ReadableInstant) instant5);
        org.joda.time.DateTime dateTime10 = dateTime4.minusWeeks(26194721);
        org.joda.time.DateTime dateTime11 = dateTime10.withLaterOffsetAtOverlap();
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.DateTime dateTime13 = dateTime11.plus(readablePeriod12);
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime();
        int int15 = localDateTime14.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime14.minusDays(17);
        java.util.Date date18 = localDateTime17.toDate();
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((java.lang.Object) date18);
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property21 = localDateTime20.yearOfEra();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime20.minusSeconds(53);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.dayOfYear();
        int int25 = localDateTime20.get(dateTimeFieldType24);
        org.joda.time.DurationFieldType durationFieldType26 = dateTimeFieldType24.getDurationType();
        boolean boolean27 = dateTime19.isSupported(dateTimeFieldType24);
        int int28 = dateTime13.get(dateTimeFieldType24);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime0 and instant5", (dateTime0.compareTo(instant5) == 0) == dateTime0.equals(instant5));
    }

    @Test
    public void test0384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0384");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 100, dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.plusDays(50);
        org.joda.time.Chronology chronology5 = localDate4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 100, dateTimeZone8);
        org.joda.time.LocalDate localDate11 = localDate9.plusDays(50);
        int int12 = localDate9.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate14 = localDate9.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        int int17 = dateTimeZone15.getOffset((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateMidnight dateMidnight18 = localDate9.toDateMidnight(dateTimeZone15);
        long long20 = dateTimeZone15.convertUTCToLocal(60000L);
        org.joda.time.chrono.ZonedChronology zonedChronology21 = org.joda.time.chrono.ZonedChronology.getInstance(chronology5, dateTimeZone15);
        org.joda.time.DurationField durationField22 = zonedChronology21.weeks();
        org.joda.time.DateTimeField dateTimeField23 = zonedChronology21.weekyear();
        org.joda.time.DurationField durationField24 = zonedChronology21.weekyears();
        long long28 = zonedChronology21.add(0L, 11776486L, 0);
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology21.era();
        org.joda.time.DurationField durationField30 = zonedChronology21.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField30, durationField22, and durationField24", !(durationField30.compareTo(durationField22) == 0) || (Math.signum(durationField30.compareTo(durationField24)) == Math.signum(durationField22.compareTo(durationField24))));
    }

    @Test
    public void test0385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0385");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        int int2 = dateTimeZone0.getOffset((org.joda.time.ReadableInstant) dateTime1);
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now(dateTimeZone0);
        java.lang.String str5 = dateTimeZone0.getName((long) 18);
        org.joda.time.Instant instant6 = org.joda.time.Instant.now();
        org.joda.time.Instant instant8 = instant6.plus((long) 11753187);
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.Instant instant10 = instant8.plus(readableDuration9);
        org.joda.time.Instant instant12 = instant10.plus((long) (short) -1);
        org.joda.time.Instant instant14 = instant10.plus((long) 20);
        int int15 = dateTimeZone0.getOffset((org.joda.time.ReadableInstant) instant10);
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        boolean boolean17 = instant10.isSupported(dateTimeFieldType16);
        org.joda.time.DateTime dateTime18 = instant10.toDateTimeISO();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime3", (dateTime1.compareTo(dateTime3) == 0) == dateTime1.equals(dateTime3));
    }

    @Test
    public void test0386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0386");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 100, dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.plusDays(50);
        org.joda.time.Chronology chronology5 = localDate4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 100, dateTimeZone8);
        org.joda.time.LocalDate localDate11 = localDate9.plusDays(50);
        int int12 = localDate9.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate14 = localDate9.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        int int17 = dateTimeZone15.getOffset((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateMidnight dateMidnight18 = localDate9.toDateMidnight(dateTimeZone15);
        long long20 = dateTimeZone15.convertUTCToLocal(60000L);
        org.joda.time.chrono.ZonedChronology zonedChronology21 = org.joda.time.chrono.ZonedChronology.getInstance(chronology5, dateTimeZone15);
        org.joda.time.DurationField durationField22 = zonedChronology21.weeks();
        org.joda.time.DurationField durationField23 = zonedChronology21.millis();
        org.joda.time.DurationField durationField24 = zonedChronology21.millis();
        org.joda.time.DateTimeField dateTimeField25 = zonedChronology21.yearOfEra();
        org.joda.time.DurationField durationField26 = zonedChronology21.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField26, durationField22, and durationField23", !(durationField26.compareTo(durationField22) == 0) || (Math.signum(durationField26.compareTo(durationField23)) == Math.signum(durationField22.compareTo(durationField23))));
    }

    @Test
    public void test0387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0387");
        org.joda.time.Instant instant1 = new org.joda.time.Instant((long) 11777629);
        org.joda.time.DateTime dateTime2 = instant1.toDateTime();
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime5 = dateTime3.minusHours((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int7 = dateTime5.get(dateTimeFieldType6);
        org.joda.time.DurationFieldType durationFieldType8 = dateTimeFieldType6.getDurationType();
        org.joda.time.DateTime dateTime10 = dateTime2.withFieldAdded(durationFieldType8, 11811894);
        org.joda.time.DateTime dateTime12 = dateTime10.withMillis((long) 19);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and dateTime2", (instant1.compareTo(dateTime2) == 0) == instant1.equals(dateTime2));
    }

    @Test
    public void test0388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0388");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("CN");
        double double2 = languageRange1.getWeight();
        java.lang.String str3 = languageRange1.getRange();
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime6 = dateTime4.minusHours((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalTime localTime8 = new org.joda.time.LocalTime(dateTimeZone7);
        org.joda.time.DateTime dateTime9 = dateTime4.withZone(dateTimeZone7);
        org.joda.time.DateTime dateTime11 = dateTime4.withMillisOfSecond(11);
        org.joda.time.DateTime.Property property12 = dateTime11.dayOfMonth();
        org.joda.time.DateTime dateTime13 = property12.getDateTime();
        org.joda.time.DateTime dateTime14 = property12.roundHalfFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone15 = dateTime14.getZone();
        long long17 = dateTimeZone15.previousTransition((long) 11783192);
        boolean boolean18 = languageRange1.equals((java.lang.Object) dateTimeZone15);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and dateTime9", (dateTime4.compareTo(dateTime9) == 0) == dateTime4.equals(dateTime9));
    }

    @Test
    public void test0389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0389");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.Instant instant2 = instant0.withMillis((long) 11);
        org.joda.time.Instant instant3 = instant2.toInstant();
        org.joda.time.Instant instant5 = instant3.plus((long) 11757325);
        org.joda.time.Instant instant6 = new org.joda.time.Instant();
        org.joda.time.Instant instant8 = instant6.minus((long) 2);
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.Instant instant10 = instant8.plus(readableDuration9);
        boolean boolean11 = instant3.isBefore((org.joda.time.ReadableInstant) instant8);
        org.joda.time.DateTime dateTime12 = instant3.toDateTimeISO();
        int int13 = dateTime12.getSecondOfMinute();
        long long14 = dateTime12.getMillis();
        java.util.Locale locale15 = java.util.Locale.FRENCH;
        java.util.Locale locale17 = new java.util.Locale("it");
        java.lang.String str18 = locale15.getDisplayName(locale17);
        java.util.Calendar calendar19 = dateTime12.toCalendar(locale17);
        java.lang.String str20 = locale17.getDisplayCountry();
        java.lang.String str21 = locale17.getCountry();
        java.lang.String str22 = locale17.getDisplayCountry();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant2 and dateTime12", (instant2.compareTo(dateTime12) == 0) == instant2.equals(dateTime12));
    }

    @Test
    public void test0390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0390");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.Instant instant2 = instant0.plus((long) 11753187);
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.Instant instant4 = instant2.plus(readableDuration3);
        org.joda.time.Instant instant6 = instant4.plus((long) (short) -1);
        org.joda.time.Instant instant7 = new org.joda.time.Instant();
        org.joda.time.Instant instant9 = instant7.withMillis((long) 11);
        org.joda.time.Instant instant10 = instant9.toInstant();
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.Instant instant12 = instant9.minus(readableDuration11);
        org.joda.time.Instant instant13 = instant9.toInstant();
        org.joda.time.DateTime dateTime14 = instant9.toDateTime();
        boolean boolean15 = instant4.isEqual((org.joda.time.ReadableInstant) instant9);
        boolean boolean17 = instant4.isEqual(10075L);
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.Instant instant19 = instant4.plus(readableDuration18);
        org.joda.time.Instant instant21 = instant4.withMillis(4518000000L);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate((long) 100, dateTimeZone23);
        org.joda.time.LocalDate localDate26 = localDate24.minusYears(53);
        org.joda.time.Chronology chronology27 = localDate24.getChronology();
        org.joda.time.Chronology chronology28 = localDate24.getChronology();
        org.joda.time.LocalDate.Property property29 = localDate24.weekOfWeekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = property29.getFieldType();
        boolean boolean31 = instant4.isSupported(dateTimeFieldType30);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant9 and dateTime14", (instant9.compareTo(dateTime14) == 0) == instant9.equals(dateTime14));
    }

    @Test
    public void test0391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0391");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 10);
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime();
        org.joda.time.Instant instant3 = dateTime2.toInstant();
        org.joda.time.Chronology chronology4 = dateTime2.getChronology();
        long long5 = dateTime2.getMillis();
        boolean boolean6 = dateTime1.isEqual((org.joda.time.ReadableInstant) dateTime2);
        org.joda.time.MutableDateTime mutableDateTime7 = dateTime2.toMutableDateTime();
        int int8 = dateTime2.getWeekyear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant3 and mutableDateTime7", (instant3.compareTo(mutableDateTime7) == 0) == instant3.equals(mutableDateTime7));
    }

    @Test
    public void test0392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0392");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime2 = dateTime0.minusHours((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int4 = dateTime2.get(dateTimeFieldType3);
        org.joda.time.DateTime dateTime6 = dateTime2.minusMillis((int) '#');
        boolean boolean7 = dateTime2.isBeforeNow();
        int int8 = dateTime2.getYearOfEra();
        org.joda.time.Instant instant9 = dateTime2.toInstant();
        org.joda.time.DateTime dateTime10 = instant9.toDateTime();
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.Instant instant13 = instant9.withDurationAdded(readableDuration11, 11768869);
        org.joda.time.Instant instant15 = instant13.plus((long) 11859299);
        org.joda.time.Instant instant17 = instant15.withMillis((long) 11883681);
        org.joda.time.Instant instant19 = instant17.plus(26257734L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and instant9", (dateTime2.compareTo(instant9) == 0) == dateTime2.equals(instant9));
    }

    @Test
    public void test0393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0393");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property1 = localDateTime0.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withField(dateTimeFieldType2, (int) (short) 10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.minusYears(5);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.plusHours((int) '4');
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.withMillisOfDay(51);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusHours(26173881);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime10.minusMillis(26180512);
        org.joda.time.LocalDateTime.Property property15 = localDateTime14.hourOfDay();
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        int int17 = dateTime16.getDayOfYear();
        org.joda.time.DateTime dateTime19 = dateTime16.withYear(11751002);
        org.joda.time.Instant instant20 = dateTime16.toInstant();
        org.joda.time.DateTime dateTime22 = dateTime16.withMillisOfDay(16);
        org.joda.time.DateTime dateTime24 = dateTime16.plusWeeks(11);
        org.joda.time.DateTime dateTime25 = dateTime16.toDateTime();
        int int26 = property15.getDifference((org.joda.time.ReadableInstant) dateTime16);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant20 and dateTime16", (instant20.compareTo(dateTime16) == 0) == instant20.equals(dateTime16));
    }

    @Test
    public void test0394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0394");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.Instant instant2 = instant0.withMillis((long) 11);
        org.joda.time.Instant instant3 = instant2.toInstant();
        org.joda.time.Instant instant5 = instant3.plus((long) 11757325);
        org.joda.time.Instant instant6 = new org.joda.time.Instant();
        org.joda.time.Instant instant8 = instant6.minus((long) 2);
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.Instant instant10 = instant8.plus(readableDuration9);
        boolean boolean11 = instant3.isBefore((org.joda.time.ReadableInstant) instant8);
        org.joda.time.DateTime dateTime12 = instant3.toDateTimeISO();
        org.joda.time.DateTime.Property property13 = dateTime12.weekyear();
        org.joda.time.DateTime dateTime14 = dateTime12.withEarlierOffsetAtOverlap();
        int int15 = dateTime12.getCenturyOfEra();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant2 and dateTime12", (instant2.compareTo(dateTime12) == 0) == instant2.equals(dateTime12));
    }

    @Test
    public void test0395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0395");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime2 = dateTime0.minusHours((int) (short) 100);
        org.joda.time.DateMidnight dateMidnight3 = dateTime2.toDateMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.dayOfYear();
        int int5 = dateTime2.get(dateTimeFieldType4);
        int int6 = dateTime2.getDayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 100, dateTimeZone8);
        org.joda.time.LocalDate localDate11 = localDate9.plusDays(50);
        org.joda.time.Chronology chronology12 = localDate11.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField14 = chronology12.dayOfMonth();
        org.joda.time.DateTime dateTime15 = dateTime2.withChronology(chronology12);
        org.joda.time.DateTime dateTime17 = dateTime15.plusSeconds(100);
        org.joda.time.DateTime dateTime19 = dateTime17.minusMonths(11753187);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and dateTime15", (dateTime2.compareTo(dateTime15) == 0) == dateTime2.equals(dateTime15));
    }

    @Test
    public void test0396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0396");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Instant instant2 = dateTime1.toInstant();
        org.joda.time.Chronology chronology3 = dateTime1.getChronology();
        boolean boolean4 = dateTime0.isEqual((org.joda.time.ReadableInstant) dateTime1);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalTime localTime6 = new org.joda.time.LocalTime(dateTimeZone5);
        org.joda.time.LocalTime localTime7 = new org.joda.time.LocalTime(dateTimeZone5);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalTime localTime9 = new org.joda.time.LocalTime(dateTimeZone8);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalTime localTime11 = new org.joda.time.LocalTime(dateTimeZone10);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = localTime11.getFieldType((int) (byte) 1);
        int int14 = localTime9.get(dateTimeFieldType13);
        org.joda.time.LocalTime.Property property15 = localTime7.property(dateTimeFieldType13);
        org.joda.time.LocalTime localTime16 = property15.roundHalfFloorCopy();
        org.joda.time.LocalTime localTime17 = property15.getLocalTime();
        org.joda.time.LocalTime localTime18 = property15.roundFloorCopy();
        org.joda.time.LocalTime localTime20 = property15.addWrapFieldToCopy(26159400);
        org.joda.time.DateTimeField dateTimeField21 = property15.getField();
        org.joda.time.LocalTime localTime22 = property15.roundCeilingCopy();
        org.joda.time.LocalTime localTime24 = localTime22.minusHours(11753441);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.UTC;
        int int27 = dateTimeZone25.getStandardOffset((long) (byte) 1);
        org.joda.time.DateTime dateTime28 = localTime24.toDateTimeToday(dateTimeZone25);
        org.joda.time.DateTime dateTime29 = dateTime0.withZone(dateTimeZone25);
        int int30 = dateTime29.getCenturyOfEra();
        org.joda.time.DateTime dateTime32 = dateTime29.withYearOfEra(32769);
        org.joda.time.DateTime.Property property33 = dateTime29.millisOfSecond();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime0 and instant2", (dateTime0.compareTo(instant2) == 0) == dateTime0.equals(instant2));
    }

    @Test
    public void test0397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0397");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime2 = dateTime0.minusHours((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int4 = dateTime2.get(dateTimeFieldType3);
        org.joda.time.DateTime dateTime6 = dateTime2.minusMillis((int) '#');
        org.joda.time.DateTime dateTime8 = dateTime6.plusDays(11);
        org.joda.time.DateTime dateTime11 = dateTime6.withDurationAdded((long) (byte) 10, 11);
        int int12 = dateTime6.getYearOfEra();
        org.joda.time.DateTime dateTime14 = dateTime6.withMinuteOfHour(11);
        org.joda.time.DateTime dateTime16 = dateTime14.minusWeeks(1);
        org.joda.time.DateTime dateTime18 = dateTime16.withMillisOfDay(11785612);
        org.joda.time.Instant instant19 = new org.joda.time.Instant();
        org.joda.time.Instant instant21 = instant19.withMillis((long) 11);
        org.joda.time.Instant instant22 = instant21.toInstant();
        org.joda.time.Chronology chronology23 = instant21.getChronology();
        org.joda.time.DateTimeField dateTimeField24 = chronology23.weekyearOfCentury();
        java.util.Locale locale26 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str28 = locale26.getExtension('x');
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate((long) 100, dateTimeZone30);
        long long35 = dateTimeZone30.convertLocalToUTC((long) 2017, false, (long) 0);
        java.util.Locale locale38 = java.util.Locale.forLanguageTag("hi!");
        java.util.Locale locale39 = java.util.Locale.TAIWAN;
        java.lang.String str40 = locale38.getDisplayCountry(locale39);
        java.lang.String str41 = dateTimeZone30.getName((long) 26160535, locale38);
        java.lang.String str42 = locale26.getDisplayVariant(locale38);
        java.lang.String str43 = dateTimeField24.getAsShortText((long) 11762043, locale26);
        java.lang.String str44 = locale26.getDisplayCountry();
        java.util.Calendar calendar45 = dateTime16.toCalendar(locale26);
        org.joda.time.LocalTime localTime46 = new org.joda.time.LocalTime((java.lang.Object) dateTime16);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime0 and instant19", (dateTime0.compareTo(instant19) == 0) == dateTime0.equals(instant19));
    }

    @Test
    public void test0398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0398");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withPivotYear((java.lang.Integer) (-26151846));
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime7 = dateTime5.minusHours((int) (short) 100);
        org.joda.time.DateMidnight dateMidnight8 = dateTime7.toDateMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.dayOfYear();
        int int10 = dateTime7.get(dateTimeFieldType9);
        int int11 = dateTime7.getDayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) 100, dateTimeZone13);
        org.joda.time.LocalDate localDate16 = localDate14.plusDays(50);
        org.joda.time.Chronology chronology17 = localDate16.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField19 = chronology17.dayOfMonth();
        org.joda.time.DateTime dateTime20 = dateTime7.withChronology(chronology17);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = dateTimeFormatter4.withChronology(chronology17);
        boolean boolean22 = dateTimeFormatter21.isPrinter();
        java.util.Locale locale25 = new java.util.Locale("", "");
        java.lang.String str26 = locale25.getDisplayCountry();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter21.withLocale(locale25);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime7 and dateTime20", (dateTime7.compareTo(dateTime20) == 0) == dateTime7.equals(dateTime20));
    }

    @Test
    public void test0399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0399");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withPivotYear((java.lang.Integer) (-26151846));
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime7 = dateTime5.minusHours((int) (short) 100);
        org.joda.time.DateMidnight dateMidnight8 = dateTime7.toDateMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.dayOfYear();
        int int10 = dateTime7.get(dateTimeFieldType9);
        int int11 = dateTime7.getDayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) 100, dateTimeZone13);
        org.joda.time.LocalDate localDate16 = localDate14.plusDays(50);
        org.joda.time.Chronology chronology17 = localDate16.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField19 = chronology17.dayOfMonth();
        org.joda.time.DateTime dateTime20 = dateTime7.withChronology(chronology17);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = dateTimeFormatter4.withChronology(chronology17);
        int int22 = dateTimeFormatter4.getDefaultYear();
        java.lang.Integer int23 = dateTimeFormatter4.getPivotYear();
        org.joda.time.Chronology chronology24 = dateTimeFormatter4.getChronolgy();
        int int25 = dateTimeFormatter4.getDefaultYear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime7 and dateTime20", (dateTime7.compareTo(dateTime20) == 0) == dateTime7.equals(dateTime20));
    }

    @Test
    public void test0400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0400");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        int int1 = dateTime0.getDayOfYear();
        org.joda.time.DateTime dateTime3 = dateTime0.withYear(11751002);
        org.joda.time.Instant instant4 = dateTime0.toInstant();
        int int5 = dateTime0.getEra();
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.DateTime dateTime7 = dateTime0.plus(readableDuration6);
        org.joda.time.DateTime dateTime9 = dateTime0.plusMinutes((int) ' ');
        org.joda.time.LocalTime localTime10 = dateTime0.toLocalTime();
        org.joda.time.LocalTime localTime12 = localTime10.minusMinutes(26227292);
        int int13 = localTime10.getMillisOfSecond();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime0 and instant4", (dateTime0.compareTo(instant4) == 0) == dateTime0.equals(instant4));
    }

    @Test
    public void test0401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0401");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.Instant instant1 = dateTime0.toInstant();
        org.joda.time.Chronology chronology2 = dateTime0.getChronology();
        org.joda.time.DateTime dateTime4 = dateTime0.plusDays(2);
        java.util.Date date5 = dateTime0.toDate();
        java.lang.String str7 = dateTime0.toString("15");
        java.util.GregorianCalendar gregorianCalendar8 = dateTime0.toGregorianCalendar();
        gregorianCalendar8.setFirstDayOfWeek(11760949);
        int int11 = gregorianCalendar8.getWeekYear();
        org.joda.time.LocalDateTime localDateTime12 = org.joda.time.LocalDateTime.fromCalendarFields((java.util.Calendar) gregorianCalendar8);
        org.joda.time.LocalTime localTime13 = org.joda.time.LocalTime.fromCalendarFields((java.util.Calendar) gregorianCalendar8);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime0 and instant1", (dateTime0.compareTo(instant1) == 0) == dateTime0.equals(instant1));
    }

    @Test
    public void test0402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0402");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime2 = dateTime0.withMinuteOfHour(14);
        org.joda.time.DateTime dateTime4 = dateTime0.withCenturyOfEra(50);
        org.joda.time.Instant instant5 = new org.joda.time.Instant();
        org.joda.time.Instant instant7 = instant5.minus((long) 2);
        int int8 = dateTime4.compareTo((org.joda.time.ReadableInstant) instant5);
        org.joda.time.DateTime.Property property9 = dateTime4.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate((long) 100, dateTimeZone11);
        org.joda.time.LocalDate localDate14 = localDate12.plusDays(50);
        org.joda.time.Chronology chronology15 = localDate14.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.minuteOfHour();
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(chronology15);
        org.joda.time.DateTime dateTime19 = dateTime17.plusMonths(11767873);
        int int20 = dateTime19.getSecondOfDay();
        org.joda.time.DateTime dateTime22 = dateTime19.withWeekyear(11775531);
        org.joda.time.DateTime dateTime24 = dateTime22.plusMinutes(26180512);
        int int25 = property9.compareTo((org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.DateTime dateTime27 = dateTime24.plusMillis(11771235);
        org.joda.time.DateTime.Property property28 = dateTime24.hourOfDay();
        org.joda.time.DateTime dateTime29 = property28.roundFloorCopy();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime0 and instant5", (dateTime0.compareTo(instant5) == 0) == dateTime0.equals(instant5));
    }

    @Test
    public void test0403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0403");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withPivotYear((java.lang.Integer) (-26151846));
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime7 = dateTime5.minusHours((int) (short) 100);
        org.joda.time.DateMidnight dateMidnight8 = dateTime7.toDateMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.dayOfYear();
        int int10 = dateTime7.get(dateTimeFieldType9);
        int int11 = dateTime7.getDayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) 100, dateTimeZone13);
        org.joda.time.LocalDate localDate16 = localDate14.plusDays(50);
        org.joda.time.Chronology chronology17 = localDate16.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField19 = chronology17.dayOfMonth();
        org.joda.time.DateTime dateTime20 = dateTime7.withChronology(chronology17);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = dateTimeFormatter4.withChronology(chronology17);
        org.joda.time.format.DateTimeParser dateTimeParser22 = dateTimeFormatter21.getParser();
        org.joda.time.Chronology chronology23 = dateTimeFormatter21.getChronolgy();
        org.joda.time.format.DateTimePrinter dateTimePrinter24 = dateTimeFormatter21.getPrinter();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime7 and dateTime20", (dateTime7.compareTo(dateTime20) == 0) == dateTime7.equals(dateTime20));
    }

    @Test
    public void test0404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0404");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(dateTimeZone0);
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime(dateTimeZone0);
        org.joda.time.LocalTime localTime4 = localTime2.plusSeconds(10);
        org.joda.time.LocalTime.Property property5 = localTime4.minuteOfHour();
        org.joda.time.LocalTime localTime7 = property5.addCopy((long) 59);
        org.joda.time.LocalTime localTime8 = property5.roundCeilingCopy();
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime();
        org.joda.time.Instant instant11 = dateTime10.toInstant();
        org.joda.time.Chronology chronology12 = dateTime10.getChronology();
        boolean boolean13 = dateTime9.isEqual((org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime(dateTimeZone14);
        org.joda.time.LocalTime localTime16 = new org.joda.time.LocalTime(dateTimeZone14);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalTime localTime18 = new org.joda.time.LocalTime(dateTimeZone17);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalTime localTime20 = new org.joda.time.LocalTime(dateTimeZone19);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = localTime20.getFieldType((int) (byte) 1);
        int int23 = localTime18.get(dateTimeFieldType22);
        org.joda.time.LocalTime.Property property24 = localTime16.property(dateTimeFieldType22);
        org.joda.time.LocalTime localTime25 = property24.roundHalfFloorCopy();
        org.joda.time.LocalTime localTime26 = property24.getLocalTime();
        org.joda.time.LocalTime localTime27 = property24.roundFloorCopy();
        org.joda.time.LocalTime localTime29 = property24.addWrapFieldToCopy(26159400);
        org.joda.time.DateTimeField dateTimeField30 = property24.getField();
        org.joda.time.LocalTime localTime31 = property24.roundCeilingCopy();
        org.joda.time.LocalTime localTime33 = localTime31.minusHours(11753441);
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.UTC;
        int int36 = dateTimeZone34.getStandardOffset((long) (byte) 1);
        org.joda.time.DateTime dateTime37 = localTime33.toDateTimeToday(dateTimeZone34);
        org.joda.time.DateTime dateTime38 = dateTime9.withZone(dateTimeZone34);
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        org.joda.time.DateTime dateTime41 = dateTime9.withPeriodAdded(readablePeriod39, 54);
        org.joda.time.DateTime dateTime42 = localTime8.toDateTime((org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.DateTimeZone dateTimeZone43 = dateTime42.getZone();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime9 and instant11", (dateTime9.compareTo(instant11) == 0) == dateTime9.equals(instant11));
    }

    @Test
    public void test0405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0405");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 100, dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.plusDays(50);
        org.joda.time.Chronology chronology5 = localDate4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 100, dateTimeZone8);
        org.joda.time.LocalDate localDate11 = localDate9.plusDays(50);
        int int12 = localDate9.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate14 = localDate9.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        int int17 = dateTimeZone15.getOffset((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateMidnight dateMidnight18 = localDate9.toDateMidnight(dateTimeZone15);
        long long20 = dateTimeZone15.convertUTCToLocal(60000L);
        org.joda.time.chrono.ZonedChronology zonedChronology21 = org.joda.time.chrono.ZonedChronology.getInstance(chronology5, dateTimeZone15);
        org.joda.time.DurationField durationField22 = zonedChronology21.eras();
        org.joda.time.DateTimeField dateTimeField23 = zonedChronology21.minuteOfDay();
        org.joda.time.Chronology chronology24 = zonedChronology21.withUTC();
        org.joda.time.DateTimeField dateTimeField25 = zonedChronology21.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField26 = zonedChronology21.hourOfDay();
        org.joda.time.Chronology chronology27 = zonedChronology21.withUTC();
        org.joda.time.DurationField durationField28 = chronology27.centuries();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField22, durationField28, and durationField22", !(durationField22.compareTo(durationField28) == 0) || (Math.signum(durationField22.compareTo(durationField22)) == Math.signum(durationField28.compareTo(durationField22))));
    }

    @Test
    public void test0406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0406");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(dateTimeZone0);
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalTime localTime4 = new org.joda.time.LocalTime(dateTimeZone3);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalTime localTime6 = new org.joda.time.LocalTime(dateTimeZone5);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = localTime6.getFieldType((int) (byte) 1);
        int int9 = localTime4.get(dateTimeFieldType8);
        org.joda.time.LocalTime.Property property10 = localTime2.property(dateTimeFieldType8);
        org.joda.time.LocalTime localTime11 = property10.roundHalfFloorCopy();
        org.joda.time.LocalTime localTime12 = property10.getLocalTime();
        org.joda.time.LocalTime localTime13 = property10.getLocalTime();
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime16 = dateTime14.minusHours((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalTime localTime18 = new org.joda.time.LocalTime(dateTimeZone17);
        org.joda.time.DateTime dateTime19 = dateTime14.withZone(dateTimeZone17);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalTime localTime21 = new org.joda.time.LocalTime(dateTimeZone20);
        org.joda.time.LocalTime localTime22 = new org.joda.time.LocalTime(dateTimeZone20);
        org.joda.time.LocalTime localTime24 = localTime22.plusSeconds(10);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = localTime22.getFieldType(0);
        org.joda.time.DateTime dateTime28 = dateTime14.withField(dateTimeFieldType26, 5);
        boolean boolean29 = localTime13.isSupported(dateTimeFieldType26);
        org.joda.time.LocalTime.Property property30 = localTime13.hourOfDay();
        org.joda.time.LocalTime.Property property31 = localTime13.hourOfDay();
        java.lang.String str33 = localTime13.toString("\u30c9\u30a4\u30c4\u8a9e\u30c9\u30a4\u30c4)");
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime14 and dateTime19", (dateTime14.compareTo(dateTime19) == 0) == dateTime14.equals(dateTime19));
    }

    @Test
    public void test0407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0407");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) 58);
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime();
        int int3 = dateTime2.getDayOfYear();
        org.joda.time.DateTime dateTime5 = dateTime2.withYear(11751002);
        org.joda.time.Instant instant6 = dateTime2.toInstant();
        org.joda.time.DateTime dateTime8 = dateTime2.plusYears(26160835);
        boolean boolean10 = dateTime8.equals((java.lang.Object) 0.0f);
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime13 = dateTime11.minusHours((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int15 = dateTime13.get(dateTimeFieldType14);
        org.joda.time.DateTime dateTime17 = dateTime13.minusMillis((int) '#');
        org.joda.time.DateTime dateTime19 = dateTime17.plusDays(11);
        org.joda.time.DateTime dateTime22 = dateTime17.withDurationAdded((long) 11757696, (int) ' ');
        int int23 = dateTime17.getWeekOfWeekyear();
        org.joda.time.DateTime dateTime25 = dateTime17.minusWeeks(215400000);
        boolean boolean26 = dateTime8.isAfter((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.centuryOfEra();
        int int28 = dateTime8.get(dateTimeFieldType27);
        int int29 = dateTime1.get(dateTimeFieldType27);
        org.joda.time.DateTime dateTime31 = dateTime1.minusYears(11854316);
        org.joda.time.DurationFieldType durationFieldType32 = org.joda.time.DurationFieldType.millis();
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate35 = new org.joda.time.LocalDate((long) 100, dateTimeZone34);
        org.joda.time.LocalDate localDate37 = localDate35.plusDays(50);
        org.joda.time.Chronology chronology38 = localDate37.getChronology();
        org.joda.time.DateTimeField dateTimeField39 = chronology38.millisOfDay();
        org.joda.time.LocalDate localDate40 = new org.joda.time.LocalDate(chronology38);
        org.joda.time.DateTimeField dateTimeField41 = chronology38.minuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(59, 50);
        java.util.TimeZone timeZone46 = dateTimeZone45.toTimeZone();
        java.util.TimeZone timeZone47 = dateTimeZone45.toTimeZone();
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime(72000000L, dateTimeZone45);
        int int50 = dateTimeZone45.getStandardOffset((long) 'u');
        org.joda.time.LocalDate localDate51 = new org.joda.time.LocalDate(dateTimeZone45);
        org.joda.time.chrono.ZonedChronology zonedChronology52 = org.joda.time.chrono.ZonedChronology.getInstance(chronology38, dateTimeZone45);
        org.joda.time.DurationField durationField53 = durationFieldType32.getField(chronology38);
        org.joda.time.DateTime dateTime55 = dateTime31.withFieldAdded(durationFieldType32, 11885623);
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime58 = dateTime56.minusHours((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType59 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int60 = dateTime58.get(dateTimeFieldType59);
        org.joda.time.DateTime dateTime62 = dateTime58.minusMillis((int) '#');
        org.joda.time.DateTime dateTime64 = dateTime62.plusDays(11);
        org.joda.time.DateTime dateTime67 = dateTime62.withDurationAdded((long) (byte) 10, 11);
        org.joda.time.DateTime dateTime69 = dateTime62.plusDays(26159400);
        org.joda.time.DateTimeZone dateTimeZone70 = dateTime62.getZone();
        org.joda.time.DateTime dateTime73 = dateTime62.withDurationAdded((long) 2271, 215400000);
        int int74 = dateTime55.compareTo((org.joda.time.ReadableInstant) dateTime73);
        org.joda.time.LocalDateTime localDateTime75 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property76 = localDateTime75.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType77 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.LocalDateTime localDateTime79 = localDateTime75.withField(dateTimeFieldType77, (int) (short) 10);
        org.joda.time.LocalDateTime localDateTime81 = localDateTime75.minusYears(5);
        int int82 = localDateTime75.getYearOfCentury();
        org.joda.time.Chronology chronology83 = localDateTime75.getChronology();
        org.joda.time.LocalDateTime localDateTime84 = new org.joda.time.LocalDateTime(chronology83);
        org.joda.time.DateTime dateTime85 = new org.joda.time.DateTime((java.lang.Object) dateTime55, chronology83);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and instant6", (dateTime2.compareTo(instant6) == 0) == dateTime2.equals(instant6));
    }

    @Test
    public void test0408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0408");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime2 = dateTime0.withMinuteOfHour(14);
        org.joda.time.DateTime dateTime4 = dateTime0.withCenturyOfEra(50);
        org.joda.time.Instant instant5 = new org.joda.time.Instant();
        org.joda.time.Instant instant7 = instant5.minus((long) 2);
        int int8 = dateTime4.compareTo((org.joda.time.ReadableInstant) instant5);
        org.joda.time.Instant instant10 = instant5.plus((long) (short) 100);
        org.joda.time.DateTime dateTime11 = instant5.toDateTime();
        org.joda.time.DateTime dateTime12 = dateTime11.toDateTimeISO();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime0 and instant5", (dateTime0.compareTo(instant5) == 0) == dateTime0.equals(instant5));
    }

    @Test
    public void test0409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0409");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime2 = dateTime0.minusHours((int) (short) 100);
        org.joda.time.TimeOfDay timeOfDay3 = dateTime2.toTimeOfDay();
        org.joda.time.DateTime.Property property4 = dateTime2.yearOfEra();
        org.joda.time.DateTime dateTime5 = property4.roundCeilingCopy();
        org.joda.time.Interval interval6 = property4.toInterval();
        long long7 = property4.remainder();
        org.joda.time.Instant instant8 = new org.joda.time.Instant();
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.Instant instant10 = instant8.minus(readableDuration9);
        org.joda.time.Instant instant13 = instant8.withDurationAdded((long) 11810407, 0);
        long long14 = property4.getDifferenceAsLong((org.joda.time.ReadableInstant) instant13);
        java.lang.String str15 = property4.toString();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime0 and instant8", (dateTime0.compareTo(instant8) == 0) == dateTime0.equals(instant8));
    }

    @Test
    public void test0410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0410");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        int int2 = dateTimeZone0.getOffset((org.joda.time.ReadableInstant) dateTime1);
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now(dateTimeZone0);
        java.lang.String str5 = dateTimeZone0.getName((long) 18);
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate(dateTimeZone0);
        org.joda.time.LocalDate.Property property7 = localDate6.dayOfYear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime3", (dateTime1.compareTo(dateTime3) == 0) == dateTime1.equals(dateTime3));
    }

    @Test
    public void test0411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0411");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 100, dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.plusDays(50);
        org.joda.time.Chronology chronology5 = localDate4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 100, dateTimeZone8);
        org.joda.time.LocalDate localDate11 = localDate9.plusDays(50);
        int int12 = localDate9.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate14 = localDate9.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        int int17 = dateTimeZone15.getOffset((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateMidnight dateMidnight18 = localDate9.toDateMidnight(dateTimeZone15);
        long long20 = dateTimeZone15.convertUTCToLocal(60000L);
        org.joda.time.chrono.ZonedChronology zonedChronology21 = org.joda.time.chrono.ZonedChronology.getInstance(chronology5, dateTimeZone15);
        org.joda.time.DurationField durationField22 = zonedChronology21.eras();
        org.joda.time.DateTimeField dateTimeField23 = zonedChronology21.minuteOfDay();
        org.joda.time.Chronology chronology24 = zonedChronology21.withUTC();
        org.joda.time.DateTimeField dateTimeField25 = zonedChronology21.minuteOfHour();
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        long long29 = zonedChronology21.add(readablePeriod26, (long) 37, 26161850);
        org.joda.time.DateTimeField dateTimeField30 = zonedChronology21.dayOfYear();
        org.joda.time.DateTimeField dateTimeField31 = zonedChronology21.weekyear();
        org.joda.time.DurationField durationField32 = zonedChronology21.months();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField22, durationField32, and durationField22", !(durationField22.compareTo(durationField32) == 0) || (Math.signum(durationField22.compareTo(durationField22)) == Math.signum(durationField32.compareTo(durationField22))));
    }

    @Test
    public void test0412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0412");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 100, dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.plusDays(50);
        org.joda.time.Chronology chronology5 = localDate4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 100, dateTimeZone8);
        org.joda.time.LocalDate localDate11 = localDate9.plusDays(50);
        int int12 = localDate9.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate14 = localDate9.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        int int17 = dateTimeZone15.getOffset((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateMidnight dateMidnight18 = localDate9.toDateMidnight(dateTimeZone15);
        long long20 = dateTimeZone15.convertUTCToLocal(60000L);
        org.joda.time.chrono.ZonedChronology zonedChronology21 = org.joda.time.chrono.ZonedChronology.getInstance(chronology5, dateTimeZone15);
        org.joda.time.DurationField durationField22 = zonedChronology21.weeks();
        java.lang.String str23 = zonedChronology21.toString();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate((long) 100, dateTimeZone25);
        org.joda.time.LocalDate.Property property27 = localDate26.weekyear();
        org.joda.time.LocalDate localDate29 = property27.setCopy(2022);
        org.joda.time.Instant instant30 = new org.joda.time.Instant();
        org.joda.time.Instant instant32 = instant30.withMillis((long) 11);
        org.joda.time.Instant instant33 = instant32.toInstant();
        org.joda.time.Chronology chronology34 = instant32.getChronology();
        org.joda.time.DateTimeField dateTimeField35 = chronology34.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate38 = new org.joda.time.LocalDate((long) 100, dateTimeZone37);
        int int39 = dateTimeField35.getMaximumValue((org.joda.time.ReadablePartial) localDate38);
        int int41 = localDate38.getValue(2);
        org.joda.time.DateMidnight dateMidnight42 = localDate38.toDateMidnight();
        org.joda.time.LocalDate localDate44 = localDate38.plusMonths(26160535);
        int int45 = localDate44.getYear();
        boolean boolean46 = property27.equals((java.lang.Object) localDate44);
        org.joda.time.DateTime dateTime47 = localDate44.toDateTimeAtStartOfDay();
        boolean boolean48 = zonedChronology21.equals((java.lang.Object) dateTime47);
        org.joda.time.DateTimeField dateTimeField49 = zonedChronology21.halfdayOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime16 and instant30", (dateTime16.compareTo(instant30) == 0) == dateTime16.equals(instant30));
    }

    @Test
    public void test0413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0413");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.Instant instant1 = dateTime0.toInstant();
        org.joda.time.Chronology chronology2 = dateTime0.getChronology();
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime();
        int int5 = dateTimeZone3.getOffset((org.joda.time.ReadableInstant) dateTime4);
        int int7 = dateTimeZone3.getOffsetFromLocal((long) 26187981);
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate((java.lang.Object) dateTime0, dateTimeZone3);
        java.lang.String str9 = localDate8.toString();
        java.util.TimeZone timeZone11 = java.util.TimeZone.getTimeZone("gregory");
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        org.joda.time.DateMidnight dateMidnight13 = localDate8.toDateMidnight(dateTimeZone12);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime0 and instant1", (dateTime0.compareTo(instant1) == 0) == dateTime0.equals(instant1));
    }

    @Test
    public void test0414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0414");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(dateTimeZone0);
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime(dateTimeZone0);
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalTime localTime4 = new org.joda.time.LocalTime(dateTimeZone3);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalTime localTime6 = new org.joda.time.LocalTime(dateTimeZone5);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = localTime6.getFieldType((int) (byte) 1);
        int int9 = localTime4.get(dateTimeFieldType8);
        org.joda.time.LocalTime.Property property10 = localTime2.property(dateTimeFieldType8);
        org.joda.time.LocalTime localTime11 = property10.getLocalTime();
        int int12 = localTime11.getSecondOfMinute();
        int int13 = localTime11.getSecondOfMinute();
        org.joda.time.LocalTime localTime15 = localTime11.minusHours(33226165);
        org.joda.time.LocalTime localTime17 = localTime15.minusHours(11812846);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalTime localTime19 = new org.joda.time.LocalTime(dateTimeZone18);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalTime localTime21 = new org.joda.time.LocalTime(dateTimeZone20);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = localTime21.getFieldType((int) (byte) 1);
        int int24 = localTime19.get(dateTimeFieldType23);
        org.joda.time.DurationFieldType durationFieldType25 = dateTimeFieldType23.getDurationType();
        org.joda.time.LocalTime.Property property26 = localTime15.property(dateTimeFieldType23);
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime();
        org.joda.time.Instant instant28 = dateTime27.toInstant();
        org.joda.time.Chronology chronology29 = dateTime27.getChronology();
        org.joda.time.DateTime dateTime31 = dateTime27.plusDays(2);
        java.util.Date date32 = dateTime27.toDate();
        org.joda.time.DateTime.Property property33 = dateTime27.monthOfYear();
        org.joda.time.DateTime dateTime35 = dateTime27.minusMonths(11764515);
        org.joda.time.DateTime dateTime36 = dateTime27.toDateTimeISO();
        int int37 = property26.compareTo((org.joda.time.ReadableInstant) dateTime27);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant28 and dateTime27", (instant28.compareTo(dateTime27) == 0) == instant28.equals(dateTime27));
    }

    @Test
    public void test0415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0415");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        int int1 = dateTime0.getDayOfYear();
        org.joda.time.DateTime dateTime3 = dateTime0.withYear(11751002);
        org.joda.time.Instant instant4 = dateTime0.toInstant();
        org.joda.time.DateTime dateTime6 = dateTime0.plusYears(26160835);
        boolean boolean8 = dateTime6.equals((java.lang.Object) 0.0f);
        org.joda.time.DateTime dateTime10 = dateTime6.minusMinutes(11775531);
        org.joda.time.DateTime dateTime12 = dateTime10.withWeekyear(26163273);
        org.joda.time.DateTime.Property property13 = dateTime10.yearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime14 = dateTime10.toMutableDateTimeISO();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime0 and instant4", (dateTime0.compareTo(instant4) == 0) == dateTime0.equals(instant4));
    }

    @Test
    public void test0416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0416");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = dateTimeFormatter2.withPivotYear((java.lang.Integer) (-26151846));
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime7 = dateTime5.minusHours((int) (short) 100);
        org.joda.time.DateMidnight dateMidnight8 = dateTime7.toDateMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.dayOfYear();
        int int10 = dateTime7.get(dateTimeFieldType9);
        int int11 = dateTime7.getDayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) 100, dateTimeZone13);
        org.joda.time.LocalDate localDate16 = localDate14.plusDays(50);
        org.joda.time.Chronology chronology17 = localDate16.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField19 = chronology17.dayOfMonth();
        org.joda.time.DateTime dateTime20 = dateTime7.withChronology(chronology17);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = dateTimeFormatter4.withChronology(chronology17);
        boolean boolean22 = dateTimeFormatter21.isPrinter();
        org.joda.time.Chronology chronology23 = dateTimeFormatter21.getChronolgy();
        org.joda.time.Chronology chronology24 = dateTimeFormatter21.getChronolgy();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime7 and dateTime20", (dateTime7.compareTo(dateTime20) == 0) == dateTime7.equals(dateTime20));
    }

    @Test
    public void test0417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0417");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.Instant instant2 = instant0.withMillis((long) 11);
        org.joda.time.Instant instant3 = instant2.toInstant();
        org.joda.time.Chronology chronology4 = instant2.getChronology();
        org.joda.time.DateTimeField dateTimeField5 = chronology4.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate((long) 100, dateTimeZone7);
        int int9 = dateTimeField5.getMaximumValue((org.joda.time.ReadablePartial) localDate8);
        org.joda.time.LocalDate.Property property10 = localDate8.dayOfYear();
        org.joda.time.LocalDate localDate11 = property10.roundHalfFloorCopy();
        org.joda.time.LocalDate localDate12 = property10.roundCeilingCopy();
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime15 = dateTime13.minusHours((int) (short) 100);
        org.joda.time.TimeOfDay timeOfDay16 = dateTime15.toTimeOfDay();
        org.joda.time.DateTime.Property property17 = dateTime15.yearOfEra();
        org.joda.time.DateTime dateTime18 = property17.roundCeilingCopy();
        org.joda.time.Interval interval19 = property17.toInterval();
        org.joda.time.DateTime dateTime21 = property17.setCopy(11762);
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime24 = dateTime22.minusHours((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int26 = dateTime24.get(dateTimeFieldType25);
        org.joda.time.DateTime dateTime28 = dateTime24.minusMillis((int) '#');
        org.joda.time.DateTime dateTime30 = dateTime28.plusDays(11);
        org.joda.time.DateTime dateTime33 = dateTime28.withDurationAdded((long) (byte) 10, 11);
        org.joda.time.DateTime dateTime35 = dateTime28.plusDays(26159400);
        org.joda.time.DateTimeZone dateTimeZone36 = dateTime28.getZone();
        org.joda.time.DateTime dateTime37 = dateTime21.withZoneRetainFields(dateTimeZone36);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone36);
        long long42 = dateTimeZone36.convertLocalToUTC((long) 31, false, (long) 26221127);
        org.joda.time.DateTime dateTime43 = localDate12.toDateTimeAtStartOfDay(dateTimeZone36);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and dateTime13", (instant0.compareTo(dateTime13) == 0) == instant0.equals(dateTime13));
    }

    @Test
    public void test0418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0418");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime2 = dateTime0.withMinuteOfHour(14);
        org.joda.time.DateTime dateTime4 = dateTime0.withCenturyOfEra(50);
        org.joda.time.Instant instant5 = new org.joda.time.Instant();
        org.joda.time.Instant instant7 = instant5.minus((long) 2);
        int int8 = dateTime4.compareTo((org.joda.time.ReadableInstant) instant5);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(59, 50);
        java.util.TimeZone timeZone12 = dateTimeZone11.toTimeZone();
        org.joda.time.Instant instant13 = new org.joda.time.Instant();
        org.joda.time.Instant instant15 = instant13.withMillis((long) 11);
        org.joda.time.Instant instant16 = instant15.toInstant();
        org.joda.time.Instant instant18 = instant16.plus((long) 11757325);
        org.joda.time.Instant instant19 = new org.joda.time.Instant();
        org.joda.time.Instant instant21 = instant19.minus((long) 2);
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.Instant instant23 = instant21.plus(readableDuration22);
        boolean boolean24 = instant16.isBefore((org.joda.time.ReadableInstant) instant21);
        int int25 = dateTimeZone11.getOffset((org.joda.time.ReadableInstant) instant16);
        org.joda.time.DateTime dateTime26 = dateTime4.toDateTime(dateTimeZone11);
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate(dateTimeZone11);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime0 and instant5", (dateTime0.compareTo(instant5) == 0) == dateTime0.equals(instant5));
    }

    @Test
    public void test0419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0419");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 100, dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.plusDays(50);
        int int5 = localDate4.getDayOfMonth();
        int int6 = localDate4.getYear();
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime9 = dateTime7.minusHours((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int11 = dateTime9.get(dateTimeFieldType10);
        org.joda.time.DateTime dateTime13 = dateTime9.minusMillis((int) '#');
        org.joda.time.DateTime dateTime15 = dateTime13.plusDays(11);
        org.joda.time.DateTime dateTime18 = dateTime13.withDurationAdded((long) (byte) 10, 11);
        org.joda.time.DateTime dateTime20 = dateTime13.plusDays(26159400);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate((long) 100, dateTimeZone22);
        org.joda.time.LocalDate localDate25 = localDate23.plusDays(50);
        org.joda.time.Chronology chronology26 = localDate25.getChronology();
        org.joda.time.DateTimeField dateTimeField27 = chronology26.minuteOfHour();
        org.joda.time.MutableDateTime mutableDateTime28 = dateTime13.toMutableDateTime(chronology26);
        org.joda.time.LocalDate localDate29 = org.joda.time.LocalDate.now(chronology26);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.weekyear();
        int int31 = localDate29.get(dateTimeFieldType30);
        org.joda.time.LocalDate.Property property32 = localDate4.property(dateTimeFieldType30);
        java.util.Locale locale33 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet34 = locale33.getUnicodeLocaleAttributes();
        java.lang.String str35 = locale33.toLanguageTag();
        java.util.Locale locale36 = java.util.Locale.ITALY;
        java.lang.String str37 = locale33.getDisplayCountry(locale36);
        java.util.Locale locale38 = locale33.stripExtensions();
        int int39 = property32.getMaximumTextLength(locale33);
        org.joda.time.DurationField durationField40 = property32.getDurationField();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime13 and mutableDateTime28", (dateTime13.compareTo(mutableDateTime28) == 0) == dateTime13.equals(mutableDateTime28));
    }

    @Test
    public void test0420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0420");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Instant instant2 = dateTime1.toInstant();
        org.joda.time.Chronology chronology3 = dateTime1.getChronology();
        boolean boolean4 = dateTime0.isEqual((org.joda.time.ReadableInstant) dateTime1);
        org.joda.time.DateTime.Property property5 = dateTime0.hourOfDay();
        org.joda.time.DateTime dateTime6 = property5.roundCeilingCopy();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime0 and instant2", (dateTime0.compareTo(instant2) == 0) == dateTime0.equals(instant2));
    }

    @Test
    public void test0421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0421");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 100, dateTimeZone2);
        org.joda.time.LocalDate localDate5 = localDate3.plusDays(50);
        org.joda.time.Chronology chronology6 = localDate5.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate((long) 100, dateTimeZone9);
        org.joda.time.LocalDate localDate12 = localDate10.plusDays(50);
        int int13 = localDate10.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate15 = localDate10.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime();
        int int18 = dateTimeZone16.getOffset((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.DateMidnight dateMidnight19 = localDate10.toDateMidnight(dateTimeZone16);
        long long21 = dateTimeZone16.convertUTCToLocal(60000L);
        org.joda.time.chrono.ZonedChronology zonedChronology22 = org.joda.time.chrono.ZonedChronology.getInstance(chronology6, dateTimeZone16);
        org.joda.time.DurationField durationField23 = zonedChronology22.weeks();
        org.joda.time.DateTimeField dateTimeField24 = zonedChronology22.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField25 = zonedChronology22.era();
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate((long) 2000, (org.joda.time.Chronology) zonedChronology22);
        org.joda.time.DateTimeField dateTimeField27 = zonedChronology22.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate30 = new org.joda.time.LocalDate((long) 100, dateTimeZone29);
        org.joda.time.LocalDate localDate32 = localDate30.plusDays(50);
        org.joda.time.Chronology chronology33 = localDate32.getChronology();
        org.joda.time.DateTimeField dateTimeField34 = chronology33.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate37 = new org.joda.time.LocalDate((long) 100, dateTimeZone36);
        org.joda.time.LocalDate localDate39 = localDate37.plusDays(50);
        int int40 = localDate37.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate42 = localDate37.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime();
        int int45 = dateTimeZone43.getOffset((org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.DateMidnight dateMidnight46 = localDate37.toDateMidnight(dateTimeZone43);
        long long48 = dateTimeZone43.convertUTCToLocal(60000L);
        org.joda.time.chrono.ZonedChronology zonedChronology49 = org.joda.time.chrono.ZonedChronology.getInstance(chronology33, dateTimeZone43);
        org.joda.time.DurationField durationField50 = zonedChronology49.eras();
        org.joda.time.DateTimeField dateTimeField51 = zonedChronology49.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField52 = zonedChronology49.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField53 = zonedChronology49.monthOfYear();
        org.joda.time.DateTimeField dateTimeField54 = zonedChronology49.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate57 = new org.joda.time.LocalDate((long) 100, dateTimeZone56);
        org.joda.time.LocalDate localDate59 = localDate57.plusDays(50);
        org.joda.time.Chronology chronology60 = localDate59.getChronology();
        org.joda.time.LocalDate.Property property61 = localDate59.era();
        org.joda.time.LocalDate localDate62 = property61.getLocalDate();
        org.joda.time.ReadablePeriod readablePeriod63 = null;
        org.joda.time.LocalDate localDate64 = localDate62.plus(readablePeriod63);
        java.util.Locale locale68 = new java.util.Locale("2017-02-22T07:17:50.577", "2017-02-22T07:18:37.677", "12");
        java.lang.String str69 = dateTimeField54.getAsText((org.joda.time.ReadablePartial) localDate62, locale68);
        int int70 = dateTimeField27.getMaximumShortTextLength(locale68);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField23 and durationField50", Math.signum(durationField23.compareTo(durationField50)) == -Math.signum(durationField50.compareTo(durationField23)));
    }

    @Test
    public void test0422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0422");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.Instant instant1 = dateTime0.toInstant();
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime();
        int int4 = dateTimeZone2.getOffset((org.joda.time.ReadableInstant) dateTime3);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((java.lang.Object) instant1, dateTimeZone2);
        long long7 = dateTimeZone2.nextTransition((long) 11860797);
        org.joda.time.LocalDateTime localDateTime8 = org.joda.time.LocalDateTime.now(dateTimeZone2);
        int int10 = dateTimeZone2.getOffset(139471960885078L);
        int int12 = dateTimeZone2.getStandardOffset(0L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime0 and instant1", (dateTime0.compareTo(instant1) == 0) == dateTime0.equals(instant1));
    }

    @Test
    public void test0423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0423");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime2 = dateTime0.minusHours((int) (short) 100);
        org.joda.time.DateTime dateTime4 = dateTime0.withHourOfDay(10);
        java.util.GregorianCalendar gregorianCalendar5 = dateTime0.toGregorianCalendar();
        org.joda.time.Instant instant7 = new org.joda.time.Instant();
        org.joda.time.Instant instant9 = instant7.withMillis((long) 11);
        org.joda.time.Instant instant10 = instant9.toInstant();
        org.joda.time.Chronology chronology11 = instant9.getChronology();
        org.joda.time.DateTimeField dateTimeField12 = chronology11.clockhourOfHalfday();
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((long) 11760560, chronology11);
        org.joda.time.DateTime dateTime14 = dateTime0.withChronology(chronology11);
        org.joda.time.DateTime dateTime16 = dateTime14.plusYears(11792895);
        org.joda.time.YearMonthDay yearMonthDay17 = dateTime14.toYearMonthDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime0 and instant7", (dateTime0.compareTo(instant7) == 0) == dateTime0.equals(instant7));
    }

    @Test
    public void test0424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0424");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.Instant instant1 = dateTime0.toInstant();
        org.joda.time.Chronology chronology2 = dateTime0.getChronology();
        org.joda.time.DateTime dateTime4 = dateTime0.plusDays(2);
        java.util.Date date5 = dateTime0.toDate();
        java.lang.String str7 = dateTime0.toString("15");
        java.util.GregorianCalendar gregorianCalendar8 = dateTime0.toGregorianCalendar();
        java.util.Date date10 = new java.util.Date((long) 11927917);
        gregorianCalendar8.setTime(date10);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime0 and instant1", (dateTime0.compareTo(instant1) == 0) == dateTime0.equals(instant1));
    }

    @Test
    public void test0425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0425");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.Instant instant1 = dateTime0.toInstant();
        org.joda.time.Chronology chronology2 = dateTime0.getChronology();
        org.joda.time.DateTime dateTime4 = dateTime0.plusDays(2);
        java.util.Date date5 = dateTime0.toDate();
        org.joda.time.DateTime.Property property6 = dateTime0.monthOfYear();
        org.joda.time.DateTime dateTime8 = dateTime0.minusMonths(11764515);
        org.joda.time.DateTime dateTime9 = dateTime0.toDateTimeISO();
        org.joda.time.DateTime.Property property10 = dateTime0.millisOfDay();
        org.joda.time.DateTime dateTime11 = property10.withMinimumValue();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime0 and instant1", (dateTime0.compareTo(instant1) == 0) == dateTime0.equals(instant1));
    }

    @Test
    public void test0426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0426");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 100, dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.plusDays(50);
        org.joda.time.Chronology chronology5 = localDate4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 100, dateTimeZone8);
        org.joda.time.LocalDate localDate11 = localDate9.plusDays(50);
        int int12 = localDate9.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate14 = localDate9.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        int int17 = dateTimeZone15.getOffset((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateMidnight dateMidnight18 = localDate9.toDateMidnight(dateTimeZone15);
        long long20 = dateTimeZone15.convertUTCToLocal(60000L);
        org.joda.time.chrono.ZonedChronology zonedChronology21 = org.joda.time.chrono.ZonedChronology.getInstance(chronology5, dateTimeZone15);
        org.joda.time.DurationField durationField22 = zonedChronology21.eras();
        org.joda.time.Chronology chronology23 = zonedChronology21.withUTC();
        org.joda.time.DurationField durationField24 = chronology23.hours();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField22, durationField24, and durationField22", !(durationField22.compareTo(durationField24) == 0) || (Math.signum(durationField22.compareTo(durationField22)) == Math.signum(durationField24.compareTo(durationField22))));
    }

    @Test
    public void test0427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0427");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 100, dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.plusDays(50);
        org.joda.time.Chronology chronology5 = localDate4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 100, dateTimeZone8);
        org.joda.time.LocalDate localDate11 = localDate9.plusDays(50);
        int int12 = localDate9.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate14 = localDate9.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        int int17 = dateTimeZone15.getOffset((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateMidnight dateMidnight18 = localDate9.toDateMidnight(dateTimeZone15);
        long long20 = dateTimeZone15.convertUTCToLocal(60000L);
        org.joda.time.chrono.ZonedChronology zonedChronology21 = org.joda.time.chrono.ZonedChronology.getInstance(chronology5, dateTimeZone15);
        org.joda.time.DurationField durationField22 = zonedChronology21.eras();
        org.joda.time.DateTimeField dateTimeField23 = zonedChronology21.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField24 = zonedChronology21.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField25 = zonedChronology21.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField26 = zonedChronology21.hourOfDay();
        org.joda.time.DateTimeField dateTimeField27 = zonedChronology21.dayOfYear();
        org.joda.time.DurationField durationField28 = zonedChronology21.years();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField22, durationField28, and durationField22", !(durationField22.compareTo(durationField28) == 0) || (Math.signum(durationField22.compareTo(durationField22)) == Math.signum(durationField28.compareTo(durationField22))));
    }

    @Test
    public void test0428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0428");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 100, dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.plusDays(50);
        org.joda.time.Chronology chronology5 = localDate4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 100, dateTimeZone8);
        org.joda.time.LocalDate localDate11 = localDate9.plusDays(50);
        int int12 = localDate9.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate14 = localDate9.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        int int17 = dateTimeZone15.getOffset((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateMidnight dateMidnight18 = localDate9.toDateMidnight(dateTimeZone15);
        long long20 = dateTimeZone15.convertUTCToLocal(60000L);
        org.joda.time.chrono.ZonedChronology zonedChronology21 = org.joda.time.chrono.ZonedChronology.getInstance(chronology5, dateTimeZone15);
        org.joda.time.DurationField durationField22 = zonedChronology21.weeks();
        org.joda.time.DateTimeField dateTimeField23 = zonedChronology21.weekyear();
        org.joda.time.DurationField durationField24 = zonedChronology21.weekyears();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate((long) 100, dateTimeZone26);
        org.joda.time.LocalDate localDate29 = localDate27.plusDays(50);
        org.joda.time.Chronology chronology30 = localDate29.getChronology();
        org.joda.time.LocalDate.Property property31 = localDate29.era();
        org.joda.time.DateTimeField dateTimeField32 = property31.getField();
        org.joda.time.LocalDate localDate33 = property31.getLocalDate();
        org.joda.time.LocalDate localDate35 = localDate33.withYear(26160535);
        org.joda.time.LocalDate localDate37 = localDate35.minusYears(11766550);
        int[] intArray39 = zonedChronology21.get((org.joda.time.ReadablePartial) localDate37, (long) 11764640);
        java.lang.String str40 = zonedChronology21.toString();
        org.joda.time.DateTimeField dateTimeField41 = zonedChronology21.monthOfYear();
        org.joda.time.DurationField durationField42 = zonedChronology21.years();
        org.joda.time.DateTimeField dateTimeField43 = zonedChronology21.clockhourOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on durationField24 and durationField42", (durationField24.compareTo(durationField42) == 0) == durationField24.equals(durationField42));
    }

    @Test
    public void test0429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0429");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.dayOfYear();
        int int2 = dateTime0.get(dateTimeFieldType1);
        java.util.Calendar.Builder builder3 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder7 = builder3.setWeekDate((int) (short) 0, (int) '4', (int) '4');
        java.util.Calendar.Builder builder9 = builder7.setLenient(false);
        java.util.TimeZone timeZone11 = java.util.TimeZone.getTimeZone("");
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(59, 50);
        java.util.TimeZone timeZone15 = dateTimeZone14.toTimeZone();
        java.util.TimeZone timeZone16 = dateTimeZone14.toTimeZone();
        boolean boolean17 = timeZone11.hasSameRules(timeZone16);
        java.util.Calendar.Builder builder18 = builder7.setTimeZone(timeZone16);
        boolean boolean19 = dateTime0.equals((java.lang.Object) builder18);
        int int20 = dateTime0.getDayOfMonth();
        org.joda.time.Instant instant21 = dateTime0.toInstant();
        org.joda.time.DateTime dateTime23 = dateTime0.plusHours(11861348);
        int int24 = dateTime0.getSecondOfDay();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate((long) 100, dateTimeZone26);
        org.joda.time.LocalDate localDate29 = localDate27.plusDays(50);
        org.joda.time.Chronology chronology30 = localDate29.getChronology();
        org.joda.time.DateTimeField dateTimeField31 = chronology30.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate34 = new org.joda.time.LocalDate((long) 100, dateTimeZone33);
        org.joda.time.LocalDate localDate36 = localDate34.plusDays(50);
        int int37 = localDate34.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate39 = localDate34.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime();
        int int42 = dateTimeZone40.getOffset((org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.DateMidnight dateMidnight43 = localDate34.toDateMidnight(dateTimeZone40);
        long long45 = dateTimeZone40.convertUTCToLocal(60000L);
        org.joda.time.chrono.ZonedChronology zonedChronology46 = org.joda.time.chrono.ZonedChronology.getInstance(chronology30, dateTimeZone40);
        org.joda.time.DurationField durationField47 = zonedChronology46.weeks();
        org.joda.time.DateTimeField dateTimeField48 = zonedChronology46.centuryOfEra();
        org.joda.time.DurationField durationField49 = zonedChronology46.minutes();
        org.joda.time.DateTimeField dateTimeField50 = zonedChronology46.year();
        org.joda.time.DateTimeField dateTimeField51 = zonedChronology46.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField52 = zonedChronology46.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField53 = zonedChronology46.hourOfHalfday();
        org.joda.time.DateTime dateTime54 = dateTime0.toDateTime((org.joda.time.Chronology) zonedChronology46);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant21 and dateTime41", (instant21.compareTo(dateTime41) == 0) == instant21.equals(dateTime41));
    }

    @Test
    public void test0430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0430");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime2 = dateTime0.minusHours((int) (short) 100);
        org.joda.time.TimeOfDay timeOfDay3 = dateTime2.toTimeOfDay();
        org.joda.time.DateTime.Property property4 = dateTime2.yearOfEra();
        org.joda.time.DateTime dateTime6 = property4.setCopy(26156834);
        org.joda.time.DateTime dateTime8 = property4.addToCopy((long) 1970);
        org.joda.time.DateTime.Property property9 = dateTime8.hourOfDay();
        org.joda.time.DateTimeField dateTimeField10 = property9.getField();
        org.joda.time.DateTime dateTime12 = property9.addWrapFieldToCopy(18);
        int int13 = dateTime12.getCenturyOfEra();
        org.joda.time.Chronology chronology14 = dateTime12.getChronology();
        org.joda.time.Instant instant15 = new org.joda.time.Instant();
        org.joda.time.Instant instant17 = instant15.withMillis((long) 11);
        org.joda.time.Instant instant18 = instant17.toInstant();
        org.joda.time.Chronology chronology19 = instant17.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.minuteOfDay();
        org.joda.time.Chronology chronology21 = chronology19.withUTC();
        org.joda.time.DateTimeField dateTimeField22 = chronology19.hourOfHalfday();
        org.joda.time.LocalTime localTime23 = new org.joda.time.LocalTime((java.lang.Object) dateTime12, chronology19);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime0 and instant15", (dateTime0.compareTo(instant15) == 0) == dateTime0.equals(instant15));
    }

    @Test
    public void test0431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0431");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 100, dateTimeZone1);
        org.joda.time.LocalDate.Property property3 = localDate2.weekyear();
        org.joda.time.LocalDate localDate5 = property3.setCopy(2022);
        org.joda.time.Instant instant6 = new org.joda.time.Instant();
        org.joda.time.Instant instant8 = instant6.withMillis((long) 11);
        org.joda.time.Instant instant9 = instant8.toInstant();
        org.joda.time.Chronology chronology10 = instant8.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) 100, dateTimeZone13);
        int int15 = dateTimeField11.getMaximumValue((org.joda.time.ReadablePartial) localDate14);
        int int17 = localDate14.getValue(2);
        org.joda.time.DateMidnight dateMidnight18 = localDate14.toDateMidnight();
        org.joda.time.LocalDate localDate20 = localDate14.plusMonths(26160535);
        int int21 = localDate20.getYear();
        boolean boolean22 = property3.equals((java.lang.Object) localDate20);
        org.joda.time.DateTime dateTime23 = localDate20.toDateTimeAtStartOfDay();
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.DateTime dateTime26 = dateTime23.withPeriodAdded(readablePeriod24, 11761333);
        org.joda.time.DateTime dateTime28 = dateTime23.minusHours(11735);
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime31 = dateTime29.minusHours((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int33 = dateTime31.get(dateTimeFieldType32);
        org.joda.time.DateTime dateTime35 = dateTime31.minusSeconds((int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(59, 50);
        java.util.TimeZone timeZone41 = dateTimeZone40.toTimeZone();
        java.util.TimeZone timeZone42 = dateTimeZone40.toTimeZone();
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime(72000000L, dateTimeZone40);
        int int45 = dateTimeZone40.getStandardOffset((long) 'u');
        java.lang.String str47 = dateTimeZone40.getName(1645142400000L);
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime((long) 11779950, dateTimeZone40);
        org.joda.time.DateTime dateTime49 = dateTime31.withZoneRetainFields(dateTimeZone40);
        boolean boolean50 = dateTime23.equals((java.lang.Object) dateTimeZone40);
        org.joda.time.DateTime.Property property51 = dateTime23.centuryOfEra();
        org.joda.time.format.DateTimePrinter dateTimePrinter52 = null;
        org.joda.time.format.DateTimeParser dateTimeParser53 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter54 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter52, dateTimeParser53);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter56 = dateTimeFormatter54.withPivotYear((java.lang.Integer) (-26151846));
        java.util.Locale locale57 = java.util.Locale.KOREAN;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter58 = dateTimeFormatter56.withLocale(locale57);
        int int59 = property51.getMaximumShortTextLength(locale57);
        java.util.Locale locale60 = locale57.stripExtensions();
        java.lang.String str61 = locale57.getDisplayName();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant6 and dateTime29", (instant6.compareTo(dateTime29) == 0) == instant6.equals(dateTime29));
    }

    @Test
    public void test0432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0432");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 100, dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.plusDays(50);
        org.joda.time.Chronology chronology5 = localDate4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 100, dateTimeZone8);
        org.joda.time.LocalDate localDate11 = localDate9.plusDays(50);
        int int12 = localDate9.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate14 = localDate9.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        int int17 = dateTimeZone15.getOffset((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateMidnight dateMidnight18 = localDate9.toDateMidnight(dateTimeZone15);
        long long20 = dateTimeZone15.convertUTCToLocal(60000L);
        org.joda.time.chrono.ZonedChronology zonedChronology21 = org.joda.time.chrono.ZonedChronology.getInstance(chronology5, dateTimeZone15);
        org.joda.time.DurationField durationField22 = zonedChronology21.weeks();
        org.joda.time.DurationField durationField23 = zonedChronology21.millis();
        org.joda.time.DurationField durationField24 = zonedChronology21.millis();
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime();
        int int26 = dateTime25.getDayOfYear();
        org.joda.time.DateTime dateTime28 = dateTime25.withYear(11751002);
        org.joda.time.Instant instant29 = dateTime25.toInstant();
        org.joda.time.DateTime.Property property30 = dateTime25.monthOfYear();
        boolean boolean31 = zonedChronology21.equals((java.lang.Object) dateTime25);
        org.joda.time.DateTimeField dateTimeField32 = zonedChronology21.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField33 = zonedChronology21.monthOfYear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime16 and instant29", (dateTime16.compareTo(instant29) == 0) == dateTime16.equals(instant29));
    }

    @Test
    public void test0433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0433");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime2 = dateTime0.withMinuteOfHour(14);
        org.joda.time.DateTime dateTime4 = dateTime0.withCenturyOfEra(50);
        org.joda.time.Instant instant5 = new org.joda.time.Instant();
        org.joda.time.Instant instant7 = instant5.minus((long) 2);
        int int8 = dateTime4.compareTo((org.joda.time.ReadableInstant) instant5);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(59, 50);
        java.util.TimeZone timeZone12 = dateTimeZone11.toTimeZone();
        org.joda.time.Instant instant13 = new org.joda.time.Instant();
        org.joda.time.Instant instant15 = instant13.withMillis((long) 11);
        org.joda.time.Instant instant16 = instant15.toInstant();
        org.joda.time.Instant instant18 = instant16.plus((long) 11757325);
        org.joda.time.Instant instant19 = new org.joda.time.Instant();
        org.joda.time.Instant instant21 = instant19.minus((long) 2);
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.Instant instant23 = instant21.plus(readableDuration22);
        boolean boolean24 = instant16.isBefore((org.joda.time.ReadableInstant) instant21);
        int int25 = dateTimeZone11.getOffset((org.joda.time.ReadableInstant) instant16);
        org.joda.time.DateTime dateTime26 = dateTime4.toDateTime(dateTimeZone11);
        org.joda.time.DateTime dateTime27 = dateTime4.withEarlierOffsetAtOverlap();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime0 and instant5", (dateTime0.compareTo(instant5) == 0) == dateTime0.equals(instant5));
    }

    @Test
    public void test0434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0434");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.Instant instant2 = instant0.withMillis((long) 11);
        org.joda.time.Instant instant3 = instant2.toInstant();
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Instant instant5 = instant2.minus(readableDuration4);
        org.joda.time.Instant instant6 = instant2.toInstant();
        org.joda.time.Instant instant8 = instant6.withMillis((long) 59);
        org.joda.time.Instant instant10 = instant6.plus((long) '4');
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetMillis((int) (short) 0);
        java.lang.String str13 = dateTimeZone12.toString();
        org.joda.time.MutableDateTime mutableDateTime14 = instant6.toMutableDateTime(dateTimeZone12);
        org.joda.time.Instant instant16 = instant6.withMillis((long) 11861177);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalTime localTime18 = new org.joda.time.LocalTime(dateTimeZone17);
        int int20 = dateTimeZone17.getStandardOffset((long) 49);
        org.joda.time.LocalTime localTime21 = new org.joda.time.LocalTime(dateTimeZone17);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.LocalTime localTime23 = localTime21.minus(readablePeriod22);
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime26 = dateTime24.minusHours((int) (short) 100);
        org.joda.time.DateMidnight dateMidnight27 = dateTime26.toDateMidnight();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalTime localTime29 = new org.joda.time.LocalTime(dateTimeZone28);
        org.joda.time.LocalTime localTime30 = new org.joda.time.LocalTime(dateTimeZone28);
        org.joda.time.LocalTime localTime32 = localTime30.plusSeconds(10);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = localTime30.getFieldType(0);
        int int35 = dateMidnight27.get(dateTimeFieldType34);
        org.joda.time.LocalTime.Property property36 = localTime23.property(dateTimeFieldType34);
        org.joda.time.LocalTime localTime37 = property36.roundHalfCeilingCopy();
        org.joda.time.ReadablePeriod readablePeriod38 = null;
        org.joda.time.LocalTime localTime39 = localTime37.plus(readablePeriod38);
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalTime localTime41 = new org.joda.time.LocalTime(dateTimeZone40);
        int int43 = dateTimeZone40.getStandardOffset((long) 49);
        org.joda.time.LocalTime localTime44 = new org.joda.time.LocalTime(dateTimeZone40);
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        org.joda.time.LocalTime localTime46 = localTime44.minus(readablePeriod45);
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime49 = dateTime47.minusHours((int) (short) 100);
        org.joda.time.DateMidnight dateMidnight50 = dateTime49.toDateMidnight();
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalTime localTime52 = new org.joda.time.LocalTime(dateTimeZone51);
        org.joda.time.LocalTime localTime53 = new org.joda.time.LocalTime(dateTimeZone51);
        org.joda.time.LocalTime localTime55 = localTime53.plusSeconds(10);
        org.joda.time.DateTimeFieldType dateTimeFieldType57 = localTime53.getFieldType(0);
        int int58 = dateMidnight50.get(dateTimeFieldType57);
        org.joda.time.LocalTime.Property property59 = localTime46.property(dateTimeFieldType57);
        java.lang.String str60 = dateTimeFieldType57.toString();
        boolean boolean61 = localTime39.isSupported(dateTimeFieldType57);
        int int62 = instant16.get(dateTimeFieldType57);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and dateTime24", (instant0.compareTo(dateTime24) == 0) == instant0.equals(dateTime24));
    }

    @Test
    public void test0435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0435");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime2 = dateTime0.withMinuteOfHour(14);
        org.joda.time.DateTime dateTime4 = dateTime0.withCenturyOfEra(50);
        org.joda.time.Instant instant5 = new org.joda.time.Instant();
        org.joda.time.Instant instant7 = instant5.minus((long) 2);
        int int8 = dateTime4.compareTo((org.joda.time.ReadableInstant) instant5);
        org.joda.time.DateTime.Property property9 = dateTime4.centuryOfEra();
        org.joda.time.DateTime dateTime10 = property9.roundCeilingCopy();
        org.joda.time.DateTime dateTime12 = dateTime10.minusYears(7);
        org.joda.time.Chronology chronology13 = dateTime10.getChronology();
        org.joda.time.DurationField durationField14 = chronology13.weekyears();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime0 and instant5", (dateTime0.compareTo(instant5) == 0) == dateTime0.equals(instant5));
    }

    @Test
    public void test0436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0436");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 100, dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.plusDays(50);
        org.joda.time.Chronology chronology5 = localDate4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 100, dateTimeZone8);
        org.joda.time.LocalDate localDate11 = localDate9.plusDays(50);
        int int12 = localDate9.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate14 = localDate9.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        int int17 = dateTimeZone15.getOffset((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateMidnight dateMidnight18 = localDate9.toDateMidnight(dateTimeZone15);
        long long20 = dateTimeZone15.convertUTCToLocal(60000L);
        org.joda.time.chrono.ZonedChronology zonedChronology21 = org.joda.time.chrono.ZonedChronology.getInstance(chronology5, dateTimeZone15);
        org.joda.time.DateTimeField dateTimeField22 = zonedChronology21.yearOfCentury();
        org.joda.time.DurationField durationField23 = zonedChronology21.millis();
        org.joda.time.DurationField durationField24 = zonedChronology21.seconds();
        org.joda.time.DateTimeField dateTimeField25 = zonedChronology21.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField26 = zonedChronology21.hourOfDay();
        org.joda.time.DateTimeField dateTimeField27 = zonedChronology21.year();
        org.joda.time.DateTimeZone dateTimeZone28 = zonedChronology21.getZone();
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime(dateTimeZone28);
        boolean boolean31 = dateTimeZone28.isStandardOffset(1645154362661L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime16 and dateTime29", (dateTime16.compareTo(dateTime29) == 0) == dateTime16.equals(dateTime29));
    }

    @Test
    public void test0437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0437");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.Instant instant2 = instant0.withMillis((long) 11);
        org.joda.time.Instant instant3 = instant2.toInstant();
        org.joda.time.Chronology chronology4 = instant2.getChronology();
        org.joda.time.DateTimeField dateTimeField5 = chronology4.minuteOfDay();
        org.joda.time.Chronology chronology6 = chronology4.withUTC();
        org.joda.time.DurationField durationField7 = chronology4.eras();
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(chronology4);
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime9.withField(dateTimeFieldType11, (int) (short) 10);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime9.minusYears(5);
        int int16 = localDateTime9.getYearOfCentury();
        org.joda.time.LocalDateTime.Property property17 = localDateTime9.millisOfDay();
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime();
        int int19 = dateTime18.getDayOfYear();
        int int20 = dateTime18.getWeekyear();
        org.joda.time.DateTime dateTime21 = localDateTime9.toDateTime((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime9.plusMonths(2182014);
        int[] intArray24 = localDateTime23.getValues();
        boolean boolean25 = localDateTime8.isEqual((org.joda.time.ReadablePartial) localDateTime23);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and dateTime18", (instant0.compareTo(dateTime18) == 0) == instant0.equals(dateTime18));
    }

    @Test
    public void test0438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0438");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.Instant instant2 = instant0.withMillis((long) 11);
        org.joda.time.Instant instant3 = instant2.toInstant();
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Instant instant5 = instant2.minus(readableDuration4);
        org.joda.time.Instant instant6 = instant2.toInstant();
        org.joda.time.MutableDateTime mutableDateTime7 = instant6.toMutableDateTime();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime10 = dateTime8.minusHours((int) (short) 100);
        org.joda.time.TimeOfDay timeOfDay11 = dateTime10.toTimeOfDay();
        org.joda.time.DateTime.Property property12 = dateTime10.yearOfEra();
        org.joda.time.DateTime dateTime14 = dateTime10.plusMonths(11818465);
        boolean boolean15 = dateTime14.isAfterNow();
        org.joda.time.DateTime.Property property16 = dateTime14.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalTime localTime18 = new org.joda.time.LocalTime(dateTimeZone17);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalTime localTime20 = new org.joda.time.LocalTime(dateTimeZone19);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = localTime20.getFieldType((int) (byte) 1);
        int int23 = localTime18.get(dateTimeFieldType22);
        org.joda.time.DurationFieldType durationFieldType24 = dateTimeFieldType22.getDurationType();
        int int25 = dateTime14.get(dateTimeFieldType22);
        int int26 = mutableDateTime7.get(dateTimeFieldType22);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and dateTime8", (instant0.compareTo(dateTime8) == 0) == instant0.equals(dateTime8));
    }

    @Test
    public void test0439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0439");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime2 = dateTime0.minusHours((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalTime localTime4 = new org.joda.time.LocalTime(dateTimeZone3);
        org.joda.time.DateTime dateTime5 = dateTime0.withZone(dateTimeZone3);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalTime localTime7 = new org.joda.time.LocalTime(dateTimeZone6);
        org.joda.time.LocalTime localTime8 = new org.joda.time.LocalTime(dateTimeZone6);
        org.joda.time.LocalTime localTime10 = localTime8.plusSeconds(10);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = localTime8.getFieldType(0);
        org.joda.time.DateTime dateTime14 = dateTime0.withField(dateTimeFieldType12, 5);
        java.util.GregorianCalendar gregorianCalendar15 = dateTime14.toGregorianCalendar();
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime18 = dateTime16.minusHours((int) (short) 100);
        org.joda.time.DateTime dateTime20 = dateTime18.minus(0L);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate((long) 100, dateTimeZone22);
        org.joda.time.DateTime dateTime24 = dateTime20.withZone(dateTimeZone22);
        org.joda.time.LocalDate localDate25 = dateTime20.toLocalDate();
        org.joda.time.LocalDate localDate27 = localDate25.plusMonths(49);
        org.joda.time.LocalDate.Property property28 = localDate25.weekOfWeekyear();
        org.joda.time.DateTimeField[] dateTimeFieldArray29 = localDate25.getFields();
        boolean boolean30 = gregorianCalendar15.after((java.lang.Object) dateTimeFieldArray29);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime0 and dateTime5", (dateTime0.compareTo(dateTime5) == 0) == dateTime0.equals(dateTime5));
    }

    @Test
    public void test0440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0440");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime2 = dateTime0.withMinuteOfHour(14);
        org.joda.time.DateTime dateTime4 = dateTime0.withCenturyOfEra(50);
        org.joda.time.Instant instant5 = new org.joda.time.Instant();
        org.joda.time.Instant instant7 = instant5.minus((long) 2);
        int int8 = dateTime4.compareTo((org.joda.time.ReadableInstant) instant5);
        org.joda.time.DateTime.Property property9 = dateTime4.centuryOfEra();
        org.joda.time.DateTime dateTime10 = property9.roundHalfEvenCopy();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime0 and instant5", (dateTime0.compareTo(instant5) == 0) == dateTime0.equals(instant5));
    }

    @Test
    public void test0441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0441");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) 58);
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime();
        int int3 = dateTime2.getDayOfYear();
        org.joda.time.DateTime dateTime5 = dateTime2.withYear(11751002);
        org.joda.time.Instant instant6 = dateTime2.toInstant();
        org.joda.time.DateTime dateTime8 = dateTime2.plusYears(26160835);
        boolean boolean10 = dateTime8.equals((java.lang.Object) 0.0f);
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime13 = dateTime11.minusHours((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int15 = dateTime13.get(dateTimeFieldType14);
        org.joda.time.DateTime dateTime17 = dateTime13.minusMillis((int) '#');
        org.joda.time.DateTime dateTime19 = dateTime17.plusDays(11);
        org.joda.time.DateTime dateTime22 = dateTime17.withDurationAdded((long) 11757696, (int) ' ');
        int int23 = dateTime17.getWeekOfWeekyear();
        org.joda.time.DateTime dateTime25 = dateTime17.minusWeeks(215400000);
        boolean boolean26 = dateTime8.isAfter((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.centuryOfEra();
        int int28 = dateTime8.get(dateTimeFieldType27);
        int int29 = dateTime1.get(dateTimeFieldType27);
        org.joda.time.DateTime dateTime31 = dateTime1.minusYears(11854316);
        org.joda.time.DurationFieldType durationFieldType32 = org.joda.time.DurationFieldType.millis();
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate35 = new org.joda.time.LocalDate((long) 100, dateTimeZone34);
        org.joda.time.LocalDate localDate37 = localDate35.plusDays(50);
        org.joda.time.Chronology chronology38 = localDate37.getChronology();
        org.joda.time.DateTimeField dateTimeField39 = chronology38.millisOfDay();
        org.joda.time.LocalDate localDate40 = new org.joda.time.LocalDate(chronology38);
        org.joda.time.DateTimeField dateTimeField41 = chronology38.minuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(59, 50);
        java.util.TimeZone timeZone46 = dateTimeZone45.toTimeZone();
        java.util.TimeZone timeZone47 = dateTimeZone45.toTimeZone();
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime(72000000L, dateTimeZone45);
        int int50 = dateTimeZone45.getStandardOffset((long) 'u');
        org.joda.time.LocalDate localDate51 = new org.joda.time.LocalDate(dateTimeZone45);
        org.joda.time.chrono.ZonedChronology zonedChronology52 = org.joda.time.chrono.ZonedChronology.getInstance(chronology38, dateTimeZone45);
        org.joda.time.DurationField durationField53 = durationFieldType32.getField(chronology38);
        org.joda.time.DateTime dateTime55 = dateTime31.withFieldAdded(durationFieldType32, 11885623);
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime58 = dateTime56.minusHours((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType59 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int60 = dateTime58.get(dateTimeFieldType59);
        org.joda.time.DateTime dateTime62 = dateTime58.minusMillis((int) '#');
        org.joda.time.DateTime dateTime64 = dateTime62.plusDays(11);
        org.joda.time.DateTime dateTime67 = dateTime62.withDurationAdded((long) (byte) 10, 11);
        org.joda.time.DateTime dateTime69 = dateTime62.plusDays(26159400);
        org.joda.time.DateTimeZone dateTimeZone70 = dateTime62.getZone();
        org.joda.time.DateTime dateTime73 = dateTime62.withDurationAdded((long) 2271, 215400000);
        int int74 = dateTime55.compareTo((org.joda.time.ReadableInstant) dateTime73);
        org.joda.time.DateTime.Property property75 = dateTime55.year();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and instant6", (dateTime2.compareTo(instant6) == 0) == dateTime2.equals(instant6));
    }

    @Test
    public void test0442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0442");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 100, dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.plusDays(50);
        org.joda.time.Chronology chronology5 = localDate4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 100, dateTimeZone8);
        org.joda.time.LocalDate localDate11 = localDate9.plusDays(50);
        int int12 = localDate9.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate14 = localDate9.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        int int17 = dateTimeZone15.getOffset((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateMidnight dateMidnight18 = localDate9.toDateMidnight(dateTimeZone15);
        long long20 = dateTimeZone15.convertUTCToLocal(60000L);
        org.joda.time.chrono.ZonedChronology zonedChronology21 = org.joda.time.chrono.ZonedChronology.getInstance(chronology5, dateTimeZone15);
        org.joda.time.DurationField durationField22 = zonedChronology21.weeks();
        org.joda.time.DateTimeField dateTimeField23 = zonedChronology21.weekyear();
        org.joda.time.DurationField durationField24 = zonedChronology21.weekyears();
        org.joda.time.DateTimeField dateTimeField25 = zonedChronology21.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone26 = zonedChronology21.getZone();
        org.joda.time.DurationField durationField27 = zonedChronology21.years();
        org.joda.time.DateTimeField dateTimeField28 = zonedChronology21.yearOfCentury();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on durationField24 and durationField27", (durationField24.compareTo(durationField27) == 0) == durationField24.equals(durationField27));
    }

    @Test
    public void test0443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0443");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.Instant instant2 = instant0.withMillis((long) 11);
        org.joda.time.Instant instant3 = instant2.toInstant();
        org.joda.time.Chronology chronology4 = instant2.getChronology();
        org.joda.time.MutableDateTime mutableDateTime5 = instant2.toMutableDateTimeISO();
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((long) (byte) 10);
        org.joda.time.DateTime dateTime9 = dateTime7.plusMinutes(49);
        org.joda.time.DateTime dateTime11 = dateTime9.plusMinutes(11767480);
        int int12 = mutableDateTime5.compareTo((org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.DateTime dateTime14 = dateTime9.plus((long) 28);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate((long) 100, dateTimeZone16);
        org.joda.time.LocalDate localDate19 = localDate17.plusDays(50);
        org.joda.time.Chronology chronology20 = localDate19.getChronology();
        org.joda.time.DateTimeField dateTimeField21 = chronology20.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate((long) 100, dateTimeZone23);
        org.joda.time.LocalDate localDate26 = localDate24.plusDays(50);
        int int27 = localDate24.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate29 = localDate24.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime();
        int int32 = dateTimeZone30.getOffset((org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.DateMidnight dateMidnight33 = localDate24.toDateMidnight(dateTimeZone30);
        long long35 = dateTimeZone30.convertUTCToLocal(60000L);
        org.joda.time.chrono.ZonedChronology zonedChronology36 = org.joda.time.chrono.ZonedChronology.getInstance(chronology20, dateTimeZone30);
        org.joda.time.DurationField durationField37 = zonedChronology36.eras();
        org.joda.time.DateTimeField dateTimeField38 = zonedChronology36.minuteOfDay();
        org.joda.time.Chronology chronology39 = zonedChronology36.withUTC();
        org.joda.time.DateTimeField dateTimeField40 = zonedChronology36.monthOfYear();
        org.joda.time.DateTimeField dateTimeField41 = zonedChronology36.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField42 = zonedChronology36.secondOfMinute();
        int int43 = dateTime14.get(dateTimeField42);
        int int44 = dateTime14.getMinuteOfHour();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and dateTime31", (instant0.compareTo(dateTime31) == 0) == instant0.equals(dateTime31));
    }

    @Test
    public void test0444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0444");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.Instant instant2 = instant0.withMillis((long) 11);
        org.joda.time.Instant instant3 = instant2.toInstant();
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Instant instant5 = instant2.minus(readableDuration4);
        org.joda.time.Instant instant6 = instant2.toInstant();
        org.joda.time.MutableDateTime mutableDateTime7 = instant6.toMutableDateTime();
        java.util.GregorianCalendar gregorianCalendar8 = mutableDateTime7.toGregorianCalendar();
        org.joda.time.Instant instant9 = mutableDateTime7.toInstant();
        org.joda.time.DateTime dateTime10 = instant9.toDateTime();
        org.joda.time.MutableDateTime mutableDateTime11 = instant9.toMutableDateTime();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant2 and mutableDateTime7", (instant2.compareTo(mutableDateTime7) == 0) == instant2.equals(mutableDateTime7));
    }

    @Test
    public void test0445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0445");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime2 = dateTime0.minusHours((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int4 = dateTime2.get(dateTimeFieldType3);
        org.joda.time.DateTime dateTime6 = dateTime2.minusMillis((int) '#');
        org.joda.time.DateTime dateTime8 = dateTime6.plusDays(11);
        org.joda.time.DateTime dateTime11 = dateTime6.withDurationAdded((long) (byte) 10, 11);
        org.joda.time.DateTime dateTime13 = dateTime6.plusDays(26159400);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate((long) 100, dateTimeZone15);
        org.joda.time.LocalDate localDate18 = localDate16.plusDays(50);
        org.joda.time.Chronology chronology19 = localDate18.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.minuteOfHour();
        org.joda.time.MutableDateTime mutableDateTime21 = dateTime6.toMutableDateTime(chronology19);
        org.joda.time.LocalDate localDate22 = org.joda.time.LocalDate.now(chronology19);
        org.joda.time.LocalDate localDate24 = localDate22.plusWeeks(11862171);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime6 and mutableDateTime21", (dateTime6.compareTo(mutableDateTime21) == 0) == dateTime6.equals(mutableDateTime21));
    }

    @Test
    public void test0446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0446");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime2 = dateTime0.minusHours((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int4 = dateTime2.get(dateTimeFieldType3);
        org.joda.time.DateTime dateTime6 = dateTime2.minusMillis((int) '#');
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime();
        int int9 = dateTimeZone7.getOffset((org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.DateTime dateTime10 = org.joda.time.DateTime.now(dateTimeZone7);
        boolean boolean11 = dateTime6.isEqual((org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.DateTime dateTime13 = dateTime10.minusMinutes(11814974);
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.DateTime dateTime15 = dateTime13.plus(readableDuration14);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime0 and dateTime10", (dateTime0.compareTo(dateTime10) == 0) == dateTime0.equals(dateTime10));
    }

    @Test
    public void test0447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0447");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime2 = dateTime0.minusHours((int) (short) 100);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime5 = dateTime3.minusHours((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int7 = dateTime5.get(dateTimeFieldType6);
        org.joda.time.DurationFieldType durationFieldType8 = dateTimeFieldType6.getRangeDurationType();
        org.joda.time.DateTime dateTime10 = dateTime2.withFieldAdded(durationFieldType8, 11764515);
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.DateTime dateTime13 = dateTime2.withDurationAdded(readableDuration11, 11811003);
        org.joda.time.DateTime dateTime15 = dateTime13.plusDays(11814582);
        org.joda.time.LocalDateTime localDateTime16 = dateTime13.toLocalDateTime();
        org.joda.time.LocalDateTime.Property property17 = localDateTime16.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate((long) 100, dateTimeZone19);
        java.util.Date date21 = localDate20.toDate();
        org.joda.time.DateTime dateTime22 = localDate20.toDateTimeAtMidnight();
        int int23 = localDate20.getYearOfCentury();
        org.joda.time.DateTime dateTime24 = localDate20.toDateTimeAtCurrentTime();
        org.joda.time.LocalDate localDate26 = localDate20.minusDays(615);
        int int27 = localDate20.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate29 = localDate20.withYearOfEra(25);
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime32 = dateTime30.minusHours((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int34 = dateTime32.get(dateTimeFieldType33);
        org.joda.time.DateTime dateTime36 = dateTime32.minusMillis((int) '#');
        boolean boolean37 = dateTime32.isBeforeNow();
        int int38 = dateTime32.getYearOfEra();
        org.joda.time.Instant instant39 = dateTime32.toInstant();
        org.joda.time.DateTime dateTime40 = instant39.toDateTime();
        org.joda.time.ReadableDuration readableDuration41 = null;
        org.joda.time.Instant instant42 = instant39.minus(readableDuration41);
        org.joda.time.ReadableDuration readableDuration43 = null;
        org.joda.time.Instant instant44 = instant39.minus(readableDuration43);
        org.joda.time.DateTime dateTime45 = localDate29.toDateTime((org.joda.time.ReadableInstant) instant39);
        org.joda.time.DateTime.Property property46 = dateTime45.minuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate49 = new org.joda.time.LocalDate((long) 100, dateTimeZone48);
        org.joda.time.LocalDate localDate51 = localDate49.plusDays(50);
        org.joda.time.DateTime dateTime52 = localDate51.toDateTimeAtMidnight();
        org.joda.time.LocalDate.Property property53 = localDate51.yearOfEra();
        org.joda.time.DateTime dateTime54 = localDate51.toDateTimeAtCurrentTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType55 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        boolean boolean56 = localDate51.equals((java.lang.Object) dateTimeFieldType55);
        org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate59 = new org.joda.time.LocalDate((long) 100, dateTimeZone58);
        org.joda.time.LocalDate localDate61 = localDate59.plusDays(50);
        org.joda.time.Chronology chronology62 = localDate61.getChronology();
        org.joda.time.DateTimeField dateTimeField63 = chronology62.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone65 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate66 = new org.joda.time.LocalDate((long) 100, dateTimeZone65);
        org.joda.time.LocalDate localDate68 = localDate66.plusDays(50);
        int int69 = localDate66.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate71 = localDate66.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone72 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime73 = new org.joda.time.DateTime();
        int int74 = dateTimeZone72.getOffset((org.joda.time.ReadableInstant) dateTime73);
        org.joda.time.DateMidnight dateMidnight75 = localDate66.toDateMidnight(dateTimeZone72);
        long long77 = dateTimeZone72.convertUTCToLocal(60000L);
        org.joda.time.chrono.ZonedChronology zonedChronology78 = org.joda.time.chrono.ZonedChronology.getInstance(chronology62, dateTimeZone72);
        org.joda.time.DurationField durationField79 = zonedChronology78.weeks();
        org.joda.time.DateTimeField dateTimeField80 = zonedChronology78.year();
        org.joda.time.DateTimeZone dateTimeZone81 = zonedChronology78.getZone();
        org.joda.time.DateTimeField dateTimeField82 = zonedChronology78.dayOfMonth();
        org.joda.time.DurationField durationField83 = zonedChronology78.weeks();
        org.joda.time.DateTimeField dateTimeField84 = zonedChronology78.year();
        boolean boolean85 = dateTimeFieldType55.isSupported((org.joda.time.Chronology) zonedChronology78);
        boolean boolean86 = dateTime45.isSupported(dateTimeFieldType55);
        boolean boolean87 = localDateTime16.equals((java.lang.Object) dateTimeFieldType55);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and instant39", (dateTime2.compareTo(instant39) == 0) == dateTime2.equals(instant39));
    }

    @Test
    public void test0448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0448");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 10);
        org.joda.time.DateTime dateTime3 = dateTime1.plusMinutes(49);
        org.joda.time.DateTime dateTime5 = dateTime3.plus(10L);
        org.joda.time.Chronology chronology6 = dateTime5.getChronology();
        org.joda.time.DateTime dateTime8 = dateTime5.minusMonths((int) 'a');
        org.joda.time.DateTime dateTime10 = dateTime8.plusSeconds(11781671);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalTime localTime12 = new org.joda.time.LocalTime(dateTimeZone11);
        org.joda.time.LocalTime localTime13 = new org.joda.time.LocalTime(dateTimeZone11);
        int int15 = dateTimeZone11.getStandardOffset(100L);
        org.joda.time.MutableDateTime mutableDateTime16 = dateTime8.toMutableDateTime(dateTimeZone11);
        org.joda.time.DateTime dateTime17 = org.joda.time.DateTime.now(dateTimeZone11);
        int int19 = dateTimeZone11.getOffsetFromLocal((long) 11842771);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime8 and mutableDateTime16", (dateTime8.compareTo(mutableDateTime16) == 0) == dateTime8.equals(mutableDateTime16));
    }

    @Test
    public void test0449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0449");
        org.joda.time.Instant instant1 = new org.joda.time.Instant();
        org.joda.time.Instant instant3 = instant1.withMillis((long) 11);
        org.joda.time.Instant instant4 = instant3.toInstant();
        org.joda.time.Chronology chronology5 = instant3.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.seconds();
        org.joda.time.LocalTime localTime7 = org.joda.time.LocalTime.fromMillisOfDay((long) 26160535, chronology5);
        org.joda.time.DateTimeField dateTimeField8 = chronology5.minuteOfDay();
        boolean boolean9 = dateTimeField8.isLenient();
        long long11 = dateTimeField8.roundHalfEven(11775531L);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) 100, dateTimeZone13);
        org.joda.time.LocalDate localDate16 = localDate14.plusDays(50);
        org.joda.time.LocalDate.Property property17 = localDate16.monthOfYear();
        org.joda.time.LocalDate.Property property18 = localDate16.year();
        org.joda.time.LocalDate localDate19 = property18.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate((long) 100, dateTimeZone21);
        org.joda.time.LocalDate localDate24 = localDate22.plusDays(50);
        org.joda.time.Chronology chronology25 = localDate24.getChronology();
        org.joda.time.DateTimeField dateTimeField26 = chronology25.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate((long) 100, dateTimeZone28);
        org.joda.time.LocalDate localDate31 = localDate29.plusDays(50);
        int int32 = localDate29.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate34 = localDate29.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime();
        int int37 = dateTimeZone35.getOffset((org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.DateMidnight dateMidnight38 = localDate29.toDateMidnight(dateTimeZone35);
        long long40 = dateTimeZone35.convertUTCToLocal(60000L);
        org.joda.time.chrono.ZonedChronology zonedChronology41 = org.joda.time.chrono.ZonedChronology.getInstance(chronology25, dateTimeZone35);
        org.joda.time.DurationField durationField42 = zonedChronology41.eras();
        org.joda.time.DateTimeField dateTimeField43 = zonedChronology41.minuteOfDay();
        org.joda.time.Chronology chronology44 = zonedChronology41.withUTC();
        org.joda.time.DateTimeField dateTimeField45 = zonedChronology41.minuteOfHour();
        org.joda.time.ReadablePeriod readablePeriod46 = null;
        long long49 = zonedChronology41.add(readablePeriod46, (long) 37, 26161850);
        org.joda.time.DateTimeField dateTimeField50 = zonedChronology41.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate53 = new org.joda.time.LocalDate((long) 100, dateTimeZone52);
        org.joda.time.LocalDate localDate55 = localDate53.plusDays(50);
        org.joda.time.DateTime dateTime56 = localDate55.toDateTimeAtMidnight();
        org.joda.time.LocalDate.Property property57 = localDate55.yearOfEra();
        org.joda.time.LocalDate localDate58 = property57.roundHalfCeilingCopy();
        org.joda.time.LocalDate localDate60 = property57.addToCopy((int) (short) 1);
        org.joda.time.LocalDate localDate61 = property57.roundFloorCopy();
        org.joda.time.LocalDate localDate62 = property57.roundHalfFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone65 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate66 = new org.joda.time.LocalDate((long) 100, dateTimeZone65);
        org.joda.time.LocalDate.Property property67 = localDate66.weekyear();
        org.joda.time.LocalDate localDate69 = localDate66.plusDays(51);
        org.joda.time.ReadablePeriod readablePeriod70 = null;
        org.joda.time.LocalDate localDate71 = localDate66.minus(readablePeriod70);
        org.joda.time.LocalDate.Property property72 = localDate66.yearOfEra();
        org.joda.time.LocalDate localDate74 = property72.setCopy(47);
        int int75 = localDate74.getCenturyOfEra();
        java.util.Locale locale78 = java.util.Locale.forLanguageTag("hi!");
        java.util.Locale locale79 = java.util.Locale.TAIWAN;
        java.lang.String str80 = locale78.getDisplayCountry(locale79);
        java.util.Calendar calendar81 = java.util.Calendar.getInstance(locale79);
        java.lang.String str82 = localDate74.toString("32", locale79);
        org.joda.time.LocalDate localDate83 = property57.setCopy("11771566", locale79);
        int[] intArray85 = zonedChronology41.get((org.joda.time.ReadablePartial) localDate83, (long) 70);
        int[] intArray86 = localDate83.getValues();
        int int87 = dateTimeField8.getMaximumValue((org.joda.time.ReadablePartial) localDate19, intArray86);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and dateTime36", (instant1.compareTo(dateTime36) == 0) == instant1.equals(dateTime36));
    }

    @Test
    public void test0450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0450");
        java.util.Calendar.Builder builder0 = new java.util.Calendar.Builder();
        java.util.Locale locale1 = java.util.Locale.JAPAN;
        java.util.Calendar.Builder builder2 = builder0.setLocale(locale1);
        java.util.Calendar.Builder builder6 = builder0.setWeekDate(49, 53, 2022);
        java.util.Locale locale7 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale8 = locale7.stripExtensions();
        java.util.Calendar.Builder builder9 = builder6.setLocale(locale8);
        java.util.Locale locale10 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet11 = locale10.getUnicodeLocaleAttributes();
        java.lang.String str12 = locale10.toLanguageTag();
        boolean boolean13 = locale10.hasExtensions();
        java.util.Locale locale14 = locale10.stripExtensions();
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime17 = dateTime15.withMinuteOfHour(14);
        org.joda.time.DateTime dateTime19 = dateTime15.withCenturyOfEra(50);
        org.joda.time.Instant instant20 = new org.joda.time.Instant();
        org.joda.time.Instant instant22 = instant20.minus((long) 2);
        int int23 = dateTime19.compareTo((org.joda.time.ReadableInstant) instant20);
        org.joda.time.DateTime.Property property24 = dateTime19.centuryOfEra();
        org.joda.time.DateTime dateTime26 = dateTime19.plusDays(58);
        java.util.Locale locale27 = java.util.Locale.JAPAN;
        java.util.Set<java.lang.String> strSet28 = locale27.getUnicodeLocaleAttributes();
        java.lang.String str29 = locale27.getScript();
        java.util.Set<java.lang.String> strSet30 = locale27.getUnicodeLocaleKeys();
        java.util.Set<java.lang.String> strSet31 = locale27.getUnicodeLocaleKeys();
        java.util.Calendar calendar32 = dateTime19.toCalendar(locale27);
        java.lang.String str33 = locale14.getDisplayCountry(locale27);
        java.util.Calendar.Builder builder34 = builder9.setLocale(locale14);
        java.util.Locale locale35 = java.util.Locale.ITALIAN;
        java.lang.String str36 = locale35.getScript();
        java.lang.String str37 = locale14.getDisplayVariant(locale35);
        java.util.Calendar calendar38 = java.util.Calendar.getInstance(locale35);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime15 and instant20", (dateTime15.compareTo(instant20) == 0) == dateTime15.equals(instant20));
    }

    @Test
    public void test0451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0451");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.Instant instant2 = instant0.withMillis((long) 11);
        org.joda.time.Instant instant3 = instant2.toInstant();
        org.joda.time.Chronology chronology4 = instant2.getChronology();
        org.joda.time.MutableDateTime mutableDateTime5 = instant2.toMutableDateTimeISO();
        org.joda.time.Instant instant7 = instant2.plus(0L);
        org.joda.time.DateTime dateTime8 = instant2.toDateTimeISO();
        org.joda.time.DateTimeZone dateTimeZone9 = instant2.getZone();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant2 and mutableDateTime5", (instant2.compareTo(mutableDateTime5) == 0) == instant2.equals(mutableDateTime5));
    }

    @Test
    public void test0452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0452");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(dateTimeZone0);
        org.joda.time.LocalTime localTime3 = localTime1.minusHours(0);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalTime localTime5 = localTime3.plus(readablePeriod4);
        org.joda.time.LocalTime localTime7 = localTime3.plusMinutes(3);
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime10 = dateTime8.minusHours((int) (short) 100);
        org.joda.time.DateMidnight dateMidnight11 = dateTime10.toDateMidnight();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalTime localTime13 = new org.joda.time.LocalTime(dateTimeZone12);
        org.joda.time.LocalTime localTime14 = new org.joda.time.LocalTime(dateTimeZone12);
        org.joda.time.LocalTime localTime16 = localTime14.plusSeconds(10);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = localTime14.getFieldType(0);
        int int19 = dateMidnight11.get(dateTimeFieldType18);
        org.joda.time.LocalTime.Property property20 = localTime3.property(dateTimeFieldType18);
        org.joda.time.DurationFieldType durationFieldType21 = dateTimeFieldType18.getDurationType();
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime24 = dateTime22.minusHours((int) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalTime localTime26 = new org.joda.time.LocalTime(dateTimeZone25);
        org.joda.time.DateTime dateTime27 = dateTime22.withZone(dateTimeZone25);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalTime localTime29 = new org.joda.time.LocalTime(dateTimeZone28);
        org.joda.time.LocalTime localTime30 = new org.joda.time.LocalTime(dateTimeZone28);
        org.joda.time.LocalTime localTime32 = localTime30.plusSeconds(10);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = localTime30.getFieldType(0);
        org.joda.time.DateTime dateTime36 = dateTime22.withField(dateTimeFieldType34, 5);
        org.joda.time.Instant instant38 = new org.joda.time.Instant();
        org.joda.time.Instant instant40 = instant38.withMillis((long) 11);
        org.joda.time.Instant instant41 = instant40.toInstant();
        org.joda.time.Chronology chronology42 = instant40.getChronology();
        org.joda.time.DurationField durationField43 = chronology42.seconds();
        org.joda.time.LocalTime localTime44 = org.joda.time.LocalTime.fromMillisOfDay((long) 26160535, chronology42);
        org.joda.time.DateTimeField dateTimeField45 = chronology42.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField46 = chronology42.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField47 = dateTimeFieldType34.getField(chronology42);
        org.joda.time.DurationField durationField48 = durationFieldType21.getField(chronology42);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime8 and dateTime27", (dateTime8.compareTo(dateTime27) == 0) == dateTime8.equals(dateTime27));
    }

    @Test
    public void test0453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0453");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 100, dateTimeZone1);
        java.util.Date date3 = localDate2.toDate();
        org.joda.time.DateTime dateTime4 = localDate2.toDateTimeAtMidnight();
        int int5 = localDate2.getYearOfCentury();
        org.joda.time.DateTime dateTime6 = localDate2.toDateTimeAtCurrentTime();
        org.joda.time.LocalDate localDate8 = localDate2.minusDays(615);
        int int9 = localDate2.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate11 = localDate2.withYearOfEra(25);
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime14 = dateTime12.minusHours((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int16 = dateTime14.get(dateTimeFieldType15);
        org.joda.time.DateTime dateTime18 = dateTime14.minusMillis((int) '#');
        boolean boolean19 = dateTime14.isBeforeNow();
        int int20 = dateTime14.getYearOfEra();
        org.joda.time.Instant instant21 = dateTime14.toInstant();
        org.joda.time.DateTime dateTime22 = instant21.toDateTime();
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.Instant instant24 = instant21.minus(readableDuration23);
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.Instant instant26 = instant21.minus(readableDuration25);
        org.joda.time.DateTime dateTime27 = localDate11.toDateTime((org.joda.time.ReadableInstant) instant21);
        org.joda.time.DateTime.Property property28 = dateTime27.minuteOfHour();
        org.joda.time.DateTime.Property property29 = dateTime27.millisOfSecond();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime14 and instant21", (dateTime14.compareTo(instant21) == 0) == dateTime14.equals(instant21));
    }

    @Test
    public void test0454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0454");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.Instant instant2 = instant0.minus(readableDuration1);
        org.joda.time.DateTime dateTime3 = instant2.toDateTime();
        org.joda.time.MutableDateTime mutableDateTime4 = instant2.toMutableDateTimeISO();
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime7 = dateTime5.minusHours((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int9 = dateTime7.get(dateTimeFieldType8);
        int int10 = dateTime7.getWeekyear();
        org.joda.time.DateTime dateTime12 = dateTime7.plusDays(9);
        boolean boolean13 = mutableDateTime4.equals((java.lang.Object) dateTime7);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and dateTime3", (instant0.compareTo(dateTime3) == 0) == instant0.equals(dateTime3));
    }

    @Test
    public void test0455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0455");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 100, dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.minusYears(53);
        int int5 = localDate4.getEra();
        int int6 = localDate4.getYearOfCentury();
        org.joda.time.LocalDate.Property property7 = localDate4.centuryOfEra();
        org.joda.time.Instant instant9 = new org.joda.time.Instant();
        org.joda.time.Instant instant11 = instant9.withMillis((long) 11);
        org.joda.time.Instant instant12 = instant11.toInstant();
        org.joda.time.Instant instant14 = instant12.plus((long) 11757325);
        org.joda.time.Instant instant15 = new org.joda.time.Instant();
        org.joda.time.Instant instant17 = instant15.minus((long) 2);
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.Instant instant19 = instant17.plus(readableDuration18);
        boolean boolean20 = instant12.isBefore((org.joda.time.ReadableInstant) instant17);
        org.joda.time.DateTime dateTime21 = instant12.toDateTimeISO();
        int int22 = dateTime21.getSecondOfMinute();
        long long23 = dateTime21.getMillis();
        java.util.Locale locale24 = java.util.Locale.FRENCH;
        java.util.Locale locale26 = new java.util.Locale("it");
        java.lang.String str27 = locale24.getDisplayName(locale26);
        java.util.Calendar calendar28 = dateTime21.toCalendar(locale26);
        java.lang.String str29 = locale26.getDisplayCountry();
        java.lang.String str30 = localDate4.toString("12", locale26);
        org.joda.time.LocalDate localDate32 = localDate4.minusDays(11943866);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant11 and dateTime21", (instant11.compareTo(dateTime21) == 0) == instant11.equals(dateTime21));
    }

    @Test
    public void test0456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0456");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.Instant instant1 = dateTime0.toInstant();
        org.joda.time.Chronology chronology2 = dateTime0.getChronology();
        org.joda.time.DateTime dateTime4 = dateTime0.plusDays(2);
        int int5 = dateTime0.getWeekOfWeekyear();
        org.joda.time.DateTime.Property property6 = dateTime0.weekyear();
        org.joda.time.DateTime dateTime7 = property6.roundCeilingCopy();
        int int8 = dateTime7.getMinuteOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime0 and instant1", (dateTime0.compareTo(instant1) == 0) == dateTime0.equals(instant1));
    }

    @Test
    public void test0457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0457");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 100, dateTimeZone2);
        org.joda.time.LocalDate localDate5 = localDate3.plusDays(50);
        org.joda.time.Chronology chronology6 = localDate5.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate((long) 100, dateTimeZone9);
        org.joda.time.LocalDate localDate12 = localDate10.plusDays(50);
        int int13 = localDate10.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate15 = localDate10.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime();
        int int18 = dateTimeZone16.getOffset((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.DateMidnight dateMidnight19 = localDate10.toDateMidnight(dateTimeZone16);
        long long21 = dateTimeZone16.convertUTCToLocal(60000L);
        org.joda.time.chrono.ZonedChronology zonedChronology22 = org.joda.time.chrono.ZonedChronology.getInstance(chronology6, dateTimeZone16);
        org.joda.time.DurationField durationField23 = zonedChronology22.weeks();
        org.joda.time.DateTimeField dateTimeField24 = zonedChronology22.year();
        org.joda.time.DateTimeZone dateTimeZone25 = zonedChronology22.getZone();
        org.joda.time.DurationField durationField26 = zonedChronology22.months();
        org.joda.time.DateTimeField dateTimeField27 = zonedChronology22.clockhourOfHalfday();
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((org.joda.time.Chronology) zonedChronology22);
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime(1645514212931L, (org.joda.time.Chronology) zonedChronology22);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime17 and dateTime28", (dateTime17.compareTo(dateTime28) == 0) == dateTime17.equals(dateTime28));
    }

    @Test
    public void test0458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0458");
        java.lang.Object obj0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(obj0);
        int int2 = dateTime1.getSecondOfMinute();
        org.joda.time.DateTime.Property property3 = dateTime1.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) 100, dateTimeZone5);
        org.joda.time.LocalDate localDate8 = localDate6.plusDays(50);
        int int9 = localDate6.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate11 = localDate6.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime();
        int int14 = dateTimeZone12.getOffset((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.DateMidnight dateMidnight15 = localDate6.toDateMidnight(dateTimeZone12);
        long long17 = dateTimeZone12.convertUTCToLocal(60000L);
        org.joda.time.DateTime dateTime18 = dateTime1.toDateTime(dateTimeZone12);
        long long19 = dateTime1.getMillis();
        org.joda.time.DateTime.Property property20 = dateTime1.hourOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime13 and dateTime18", (dateTime13.compareTo(dateTime18) == 0) == dateTime13.equals(dateTime18));
    }

    @Test
    public void test0459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0459");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 100, dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.plusDays(50);
        org.joda.time.Chronology chronology5 = localDate4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 100, dateTimeZone8);
        org.joda.time.LocalDate localDate11 = localDate9.plusDays(50);
        int int12 = localDate9.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate14 = localDate9.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        int int17 = dateTimeZone15.getOffset((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateMidnight dateMidnight18 = localDate9.toDateMidnight(dateTimeZone15);
        long long20 = dateTimeZone15.convertUTCToLocal(60000L);
        org.joda.time.chrono.ZonedChronology zonedChronology21 = org.joda.time.chrono.ZonedChronology.getInstance(chronology5, dateTimeZone15);
        org.joda.time.DurationField durationField22 = zonedChronology21.weeks();
        java.lang.String str23 = zonedChronology21.toString();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate((long) 100, dateTimeZone25);
        org.joda.time.LocalDate.Property property27 = localDate26.weekyear();
        org.joda.time.LocalDate localDate29 = property27.setCopy(2022);
        org.joda.time.Instant instant30 = new org.joda.time.Instant();
        org.joda.time.Instant instant32 = instant30.withMillis((long) 11);
        org.joda.time.Instant instant33 = instant32.toInstant();
        org.joda.time.Chronology chronology34 = instant32.getChronology();
        org.joda.time.DateTimeField dateTimeField35 = chronology34.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate38 = new org.joda.time.LocalDate((long) 100, dateTimeZone37);
        int int39 = dateTimeField35.getMaximumValue((org.joda.time.ReadablePartial) localDate38);
        int int41 = localDate38.getValue(2);
        org.joda.time.DateMidnight dateMidnight42 = localDate38.toDateMidnight();
        org.joda.time.LocalDate localDate44 = localDate38.plusMonths(26160535);
        int int45 = localDate44.getYear();
        boolean boolean46 = property27.equals((java.lang.Object) localDate44);
        org.joda.time.DateTime dateTime47 = localDate44.toDateTimeAtStartOfDay();
        boolean boolean48 = zonedChronology21.equals((java.lang.Object) dateTime47);
        org.joda.time.DurationField durationField49 = zonedChronology21.days();
        org.joda.time.DateTimeField dateTimeField50 = zonedChronology21.hourOfDay();
        org.joda.time.DurationField durationField51 = zonedChronology21.weeks();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime16 and instant30", (dateTime16.compareTo(instant30) == 0) == dateTime16.equals(instant30));
    }

    @Test
    public void test0460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0460");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime2 = dateTime0.withMinuteOfHour(14);
        org.joda.time.DateTime dateTime4 = dateTime0.withCenturyOfEra(50);
        org.joda.time.Instant instant5 = new org.joda.time.Instant();
        org.joda.time.Instant instant7 = instant5.minus((long) 2);
        int int8 = dateTime4.compareTo((org.joda.time.ReadableInstant) instant5);
        org.joda.time.DateTime.Property property9 = dateTime4.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate((long) 100, dateTimeZone11);
        org.joda.time.LocalDate localDate14 = localDate12.plusDays(50);
        org.joda.time.Chronology chronology15 = localDate14.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.minuteOfHour();
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(chronology15);
        org.joda.time.DateTime dateTime19 = dateTime17.plusMonths(11767873);
        int int20 = dateTime19.getSecondOfDay();
        org.joda.time.DateTime dateTime22 = dateTime19.withWeekyear(11775531);
        org.joda.time.DateTime dateTime24 = dateTime22.plusMinutes(26180512);
        int int25 = property9.compareTo((org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.DateTime dateTime27 = dateTime24.plusMillis(11771235);
        org.joda.time.DateTime dateTime29 = dateTime24.minusYears(11833667);
        int int30 = dateTime29.getSecondOfMinute();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime0 and instant5", (dateTime0.compareTo(instant5) == 0) == dateTime0.equals(instant5));
    }

    @Test
    public void test0461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0461");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.Instant instant1 = dateTime0.toInstant();
        org.joda.time.Chronology chronology2 = dateTime0.getChronology();
        org.joda.time.DateTime dateTime4 = dateTime0.plusDays(2);
        java.util.Date date5 = dateTime0.toDate();
        org.joda.time.DateTime.Property property6 = dateTime0.monthOfYear();
        org.joda.time.DateTimeField dateTimeField7 = property6.getField();
        int int8 = property6.getLeapAmount();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime0 and instant1", (dateTime0.compareTo(instant1) == 0) == dateTime0.equals(instant1));
    }

    @Test
    public void test0462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0462");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime2 = dateTime0.minusHours((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int4 = dateTime2.get(dateTimeFieldType3);
        org.joda.time.DateTime dateTime6 = dateTime2.minusMillis((int) '#');
        boolean boolean7 = dateTime2.isBeforeNow();
        int int8 = dateTime2.getYearOfEra();
        org.joda.time.Instant instant9 = dateTime2.toInstant();
        org.joda.time.DateTime dateTime10 = instant9.toDateTime();
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.Instant instant13 = instant9.withDurationAdded(readableDuration11, 11768869);
        org.joda.time.Instant instant15 = instant13.plus((long) 11859299);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate((long) 100, dateTimeZone17);
        long long22 = dateTimeZone17.convertLocalToUTC((long) 2017, false, (long) 0);
        java.util.Locale locale25 = java.util.Locale.forLanguageTag("hi!");
        java.util.Locale locale26 = java.util.Locale.TAIWAN;
        java.lang.String str27 = locale25.getDisplayCountry(locale26);
        java.lang.String str28 = dateTimeZone17.getName((long) 26160535, locale25);
        java.lang.String str29 = dateTimeZone17.getID();
        boolean boolean30 = dateTimeZone17.isFixed();
        org.joda.time.MutableDateTime mutableDateTime31 = instant13.toMutableDateTime(dateTimeZone17);
        org.joda.time.Instant instant33 = instant13.plus((long) 11969113);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and instant13", (dateTime2.compareTo(instant13) == 0) == dateTime2.equals(instant13));
    }

    @Test
    public void test0463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0463");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 100, dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.plusDays(50);
        org.joda.time.Chronology chronology5 = localDate4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 100, dateTimeZone8);
        org.joda.time.LocalDate localDate11 = localDate9.plusDays(50);
        int int12 = localDate9.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate14 = localDate9.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        int int17 = dateTimeZone15.getOffset((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateMidnight dateMidnight18 = localDate9.toDateMidnight(dateTimeZone15);
        long long20 = dateTimeZone15.convertUTCToLocal(60000L);
        org.joda.time.chrono.ZonedChronology zonedChronology21 = org.joda.time.chrono.ZonedChronology.getInstance(chronology5, dateTimeZone15);
        org.joda.time.DurationField durationField22 = zonedChronology21.eras();
        org.joda.time.DateTimeField dateTimeField23 = zonedChronology21.minuteOfDay();
        org.joda.time.Chronology chronology24 = zonedChronology21.withUTC();
        org.joda.time.DateTimeField dateTimeField25 = zonedChronology21.monthOfYear();
        org.joda.time.DateTimeField dateTimeField26 = zonedChronology21.dayOfYear();
        org.joda.time.DateTimeField dateTimeField27 = zonedChronology21.halfdayOfDay();
        org.joda.time.DurationField durationField28 = zonedChronology21.eras();
        org.joda.time.DurationField durationField29 = zonedChronology21.minutes();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField22, durationField29, and durationField22", !(durationField22.compareTo(durationField29) == 0) || (Math.signum(durationField22.compareTo(durationField22)) == Math.signum(durationField29.compareTo(durationField22))));
    }

    @Test
    public void test0464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0464");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 100, dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.plusDays(50);
        org.joda.time.Chronology chronology5 = localDate4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 100, dateTimeZone8);
        org.joda.time.LocalDate localDate11 = localDate9.plusDays(50);
        int int12 = localDate9.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate14 = localDate9.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        int int17 = dateTimeZone15.getOffset((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateMidnight dateMidnight18 = localDate9.toDateMidnight(dateTimeZone15);
        long long20 = dateTimeZone15.convertUTCToLocal(60000L);
        org.joda.time.chrono.ZonedChronology zonedChronology21 = org.joda.time.chrono.ZonedChronology.getInstance(chronology5, dateTimeZone15);
        org.joda.time.DurationField durationField22 = zonedChronology21.weeks();
        java.lang.String str23 = zonedChronology21.toString();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate((long) 100, dateTimeZone25);
        org.joda.time.LocalDate.Property property27 = localDate26.weekyear();
        org.joda.time.LocalDate localDate29 = property27.setCopy(2022);
        org.joda.time.Instant instant30 = new org.joda.time.Instant();
        org.joda.time.Instant instant32 = instant30.withMillis((long) 11);
        org.joda.time.Instant instant33 = instant32.toInstant();
        org.joda.time.Chronology chronology34 = instant32.getChronology();
        org.joda.time.DateTimeField dateTimeField35 = chronology34.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate38 = new org.joda.time.LocalDate((long) 100, dateTimeZone37);
        int int39 = dateTimeField35.getMaximumValue((org.joda.time.ReadablePartial) localDate38);
        int int41 = localDate38.getValue(2);
        org.joda.time.DateMidnight dateMidnight42 = localDate38.toDateMidnight();
        org.joda.time.LocalDate localDate44 = localDate38.plusMonths(26160535);
        int int45 = localDate44.getYear();
        boolean boolean46 = property27.equals((java.lang.Object) localDate44);
        org.joda.time.DateTime dateTime47 = localDate44.toDateTimeAtStartOfDay();
        boolean boolean48 = zonedChronology21.equals((java.lang.Object) dateTime47);
        org.joda.time.DurationField durationField49 = zonedChronology21.days();
        org.joda.time.DateTimeField dateTimeField50 = zonedChronology21.hourOfDay();
        org.joda.time.DateTimeField dateTimeField51 = zonedChronology21.hourOfHalfday();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime16 and instant30", (dateTime16.compareTo(instant30) == 0) == dateTime16.equals(instant30));
    }

    @Test
    public void test0465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0465");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        int int1 = dateTime0.getDayOfYear();
        org.joda.time.DateTime dateTime3 = dateTime0.withYear(11751002);
        org.joda.time.Instant instant4 = dateTime0.toInstant();
        org.joda.time.DateTime.Property property5 = dateTime0.monthOfYear();
        org.joda.time.DateTime dateTime6 = property5.roundFloorCopy();
        org.joda.time.DateTime dateTime7 = property5.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property9 = localDateTime8.yearOfEra();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime8.minusSeconds(53);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.dayOfYear();
        boolean boolean13 = localDateTime8.isSupported(dateTimeFieldType12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime8.plusMillis(11811116);
        int int16 = property5.compareTo((org.joda.time.ReadablePartial) localDateTime15);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime0 and instant4", (dateTime0.compareTo(instant4) == 0) == dateTime0.equals(instant4));
    }

    @Test
    public void test0466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0466");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.Instant instant2 = instant0.withMillis((long) 11);
        org.joda.time.Instant instant3 = instant2.toInstant();
        org.joda.time.Chronology chronology4 = instant2.getChronology();
        org.joda.time.DateTimeField dateTimeField5 = chronology4.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate((long) 100, dateTimeZone7);
        int int9 = dateTimeField5.getMaximumValue((org.joda.time.ReadablePartial) localDate8);
        int int11 = localDate8.getValue(2);
        org.joda.time.DateMidnight dateMidnight12 = localDate8.toDateMidnight();
        org.joda.time.LocalDate localDate14 = localDate8.plusMonths(26160535);
        int int15 = localDate8.getEra();
        org.joda.time.DurationFieldType durationFieldType16 = org.joda.time.DurationFieldType.weekyears();
        org.joda.time.LocalDate localDate18 = localDate8.withFieldAdded(durationFieldType16, 11810407);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate((long) 100, dateTimeZone20);
        org.joda.time.LocalDate localDate23 = localDate21.plusDays(50);
        org.joda.time.Chronology chronology24 = localDate23.getChronology();
        org.joda.time.DateTimeField dateTimeField25 = chronology24.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate((long) 100, dateTimeZone27);
        org.joda.time.LocalDate localDate30 = localDate28.plusDays(50);
        int int31 = localDate28.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate33 = localDate28.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime();
        int int36 = dateTimeZone34.getOffset((org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.DateMidnight dateMidnight37 = localDate28.toDateMidnight(dateTimeZone34);
        long long39 = dateTimeZone34.convertUTCToLocal(60000L);
        org.joda.time.chrono.ZonedChronology zonedChronology40 = org.joda.time.chrono.ZonedChronology.getInstance(chronology24, dateTimeZone34);
        org.joda.time.DurationField durationField41 = zonedChronology40.weeks();
        org.joda.time.DateTimeField dateTimeField42 = zonedChronology40.weekyear();
        org.joda.time.DurationField durationField43 = zonedChronology40.weekyears();
        org.joda.time.DateTimeField dateTimeField44 = zonedChronology40.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone45 = zonedChronology40.getZone();
        org.joda.time.Chronology chronology46 = zonedChronology40.withUTC();
        org.joda.time.DurationField durationField47 = durationFieldType16.getField(chronology46);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and dateTime35", (instant0.compareTo(dateTime35) == 0) == instant0.equals(dateTime35));
    }

    @Test
    public void test0467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0467");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(59, 50);
        java.util.TimeZone timeZone4 = dateTimeZone3.toTimeZone();
        java.util.TimeZone timeZone5 = dateTimeZone3.toTimeZone();
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(72000000L, dateTimeZone3);
        org.joda.time.DateTime.Property property7 = dateTime6.dayOfWeek();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime();
        int int9 = dateTime8.getDayOfYear();
        org.joda.time.DateTime dateTime11 = dateTime8.withYear(11751002);
        org.joda.time.Instant instant12 = dateTime8.toInstant();
        org.joda.time.DateTime.Property property13 = dateTime8.monthOfYear();
        long long14 = property7.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.DateTime dateTime15 = property7.roundCeilingCopy();
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        int int17 = dateTime16.getDayOfYear();
        int int18 = dateTime16.getWeekyear();
        org.joda.time.DateTime dateTime19 = dateTime16.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate((long) 100, dateTimeZone21);
        org.joda.time.LocalDate localDate24 = localDate22.minusYears(53);
        org.joda.time.DateMidnight dateMidnight25 = localDate22.toDateMidnight();
        int int26 = localDate22.getWeekOfWeekyear();
        java.util.Calendar.Builder builder27 = new java.util.Calendar.Builder();
        java.util.Locale locale28 = java.util.Locale.JAPAN;
        java.util.Calendar.Builder builder29 = builder27.setLocale(locale28);
        java.util.Calendar.Builder builder30 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder34 = builder30.setWeekDate((int) (short) 0, (int) '4', (int) '4');
        java.util.Calendar.Builder builder36 = builder34.setLenient(false);
        java.util.TimeZone timeZone38 = java.util.TimeZone.getTimeZone("");
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(59, 50);
        java.util.TimeZone timeZone42 = dateTimeZone41.toTimeZone();
        java.util.TimeZone timeZone43 = dateTimeZone41.toTimeZone();
        boolean boolean44 = timeZone38.hasSameRules(timeZone43);
        java.util.Calendar.Builder builder45 = builder34.setTimeZone(timeZone43);
        java.util.Calendar.Builder builder46 = builder27.setTimeZone(timeZone43);
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.forTimeZone(timeZone43);
        org.joda.time.DateTime dateTime48 = localDate22.toDateTimeAtStartOfDay(dateTimeZone47);
        java.util.TimeZone timeZone49 = dateTimeZone47.toTimeZone();
        long long52 = dateTimeZone47.adjustOffset(1645514214684L, false);
        org.joda.time.DateTime dateTime53 = org.joda.time.DateTime.now(dateTimeZone47);
        org.joda.time.DateTime dateTime54 = dateTime16.toDateTime(dateTimeZone47);
        org.joda.time.DateTime.Property property55 = dateTime54.minuteOfDay();
        int int56 = dateTime54.getDayOfMonth();
        int int57 = property7.getDifference((org.joda.time.ReadableInstant) dateTime54);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime8 and instant12", (dateTime8.compareTo(instant12) == 0) == dateTime8.equals(instant12));
    }

    @Test
    public void test0468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0468");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Instant instant2 = dateTime1.toInstant();
        org.joda.time.Chronology chronology3 = dateTime1.getChronology();
        boolean boolean4 = dateTime0.isEqual((org.joda.time.ReadableInstant) dateTime1);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalTime localTime6 = new org.joda.time.LocalTime(dateTimeZone5);
        org.joda.time.LocalTime localTime7 = new org.joda.time.LocalTime(dateTimeZone5);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalTime localTime9 = new org.joda.time.LocalTime(dateTimeZone8);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalTime localTime11 = new org.joda.time.LocalTime(dateTimeZone10);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = localTime11.getFieldType((int) (byte) 1);
        int int14 = localTime9.get(dateTimeFieldType13);
        org.joda.time.LocalTime.Property property15 = localTime7.property(dateTimeFieldType13);
        org.joda.time.LocalTime localTime16 = property15.roundHalfFloorCopy();
        org.joda.time.LocalTime localTime17 = property15.getLocalTime();
        org.joda.time.LocalTime localTime18 = property15.roundFloorCopy();
        org.joda.time.LocalTime localTime20 = property15.addWrapFieldToCopy(26159400);
        org.joda.time.DateTimeField dateTimeField21 = property15.getField();
        org.joda.time.LocalTime localTime22 = property15.roundCeilingCopy();
        org.joda.time.LocalTime localTime24 = localTime22.minusHours(11753441);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.UTC;
        int int27 = dateTimeZone25.getStandardOffset((long) (byte) 1);
        org.joda.time.DateTime dateTime28 = localTime24.toDateTimeToday(dateTimeZone25);
        org.joda.time.DateTime dateTime29 = dateTime0.withZone(dateTimeZone25);
        int int30 = dateTime29.getCenturyOfEra();
        org.joda.time.DateTime dateTime32 = dateTime29.withYearOfEra(32769);
        org.joda.time.DateTime dateTime34 = dateTime32.plusMonths(0);
        org.joda.time.LocalTime localTime35 = new org.joda.time.LocalTime((java.lang.Object) dateTime32);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime0 and instant2", (dateTime0.compareTo(instant2) == 0) == dateTime0.equals(instant2));
    }

    @Test
    public void test0469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0469");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 100, dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.plusDays(50);
        org.joda.time.Chronology chronology5 = localDate4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.millisOfDay();
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(chronology5);
        org.joda.time.DateTimeField dateTimeField8 = chronology5.secondOfDay();
        org.joda.time.DateTimeField dateTimeField9 = chronology5.secondOfMinute();
        org.joda.time.ReadablePartial readablePartial10 = null;
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate((long) 100, dateTimeZone12);
        org.joda.time.LocalDate localDate15 = localDate13.plusDays(50);
        org.joda.time.Chronology chronology16 = localDate15.getChronology();
        org.joda.time.DateTimeField dateTimeField17 = chronology16.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate((long) 100, dateTimeZone19);
        org.joda.time.LocalDate localDate22 = localDate20.plusDays(50);
        int int23 = localDate20.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate25 = localDate20.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime();
        int int28 = dateTimeZone26.getOffset((org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.DateMidnight dateMidnight29 = localDate20.toDateMidnight(dateTimeZone26);
        long long31 = dateTimeZone26.convertUTCToLocal(60000L);
        org.joda.time.chrono.ZonedChronology zonedChronology32 = org.joda.time.chrono.ZonedChronology.getInstance(chronology16, dateTimeZone26);
        org.joda.time.DurationField durationField33 = zonedChronology32.weeks();
        org.joda.time.DateTimeField dateTimeField34 = zonedChronology32.weekyear();
        org.joda.time.DurationField durationField35 = zonedChronology32.weekyears();
        org.joda.time.DateTimeField dateTimeField36 = zonedChronology32.year();
        org.joda.time.ReadablePartial readablePartial37 = null;
        int[] intArray39 = new int[] { 11766550 };
        int int40 = dateTimeField36.getMaximumValue(readablePartial37, intArray39);
        int int41 = dateTimeField9.getMaximumValue(readablePartial10, intArray39);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime7 and dateTime27", (dateTime7.compareTo(dateTime27) == 0) == dateTime7.equals(dateTime27));
    }

    @Test
    public void test0470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0470");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 100, dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.plusDays(50);
        org.joda.time.Chronology chronology5 = localDate4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 100, dateTimeZone8);
        org.joda.time.LocalDate localDate11 = localDate9.plusDays(50);
        int int12 = localDate9.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate14 = localDate9.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        int int17 = dateTimeZone15.getOffset((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateMidnight dateMidnight18 = localDate9.toDateMidnight(dateTimeZone15);
        long long20 = dateTimeZone15.convertUTCToLocal(60000L);
        org.joda.time.chrono.ZonedChronology zonedChronology21 = org.joda.time.chrono.ZonedChronology.getInstance(chronology5, dateTimeZone15);
        org.joda.time.DurationField durationField22 = zonedChronology21.weeks();
        java.lang.String str23 = zonedChronology21.toString();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate((long) 100, dateTimeZone25);
        org.joda.time.LocalDate.Property property27 = localDate26.weekyear();
        org.joda.time.LocalDate localDate29 = property27.setCopy(2022);
        org.joda.time.Instant instant30 = new org.joda.time.Instant();
        org.joda.time.Instant instant32 = instant30.withMillis((long) 11);
        org.joda.time.Instant instant33 = instant32.toInstant();
        org.joda.time.Chronology chronology34 = instant32.getChronology();
        org.joda.time.DateTimeField dateTimeField35 = chronology34.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate38 = new org.joda.time.LocalDate((long) 100, dateTimeZone37);
        int int39 = dateTimeField35.getMaximumValue((org.joda.time.ReadablePartial) localDate38);
        int int41 = localDate38.getValue(2);
        org.joda.time.DateMidnight dateMidnight42 = localDate38.toDateMidnight();
        org.joda.time.LocalDate localDate44 = localDate38.plusMonths(26160535);
        int int45 = localDate44.getYear();
        boolean boolean46 = property27.equals((java.lang.Object) localDate44);
        org.joda.time.DateTime dateTime47 = localDate44.toDateTimeAtStartOfDay();
        boolean boolean48 = zonedChronology21.equals((java.lang.Object) dateTime47);
        org.joda.time.DurationField durationField49 = zonedChronology21.days();
        org.joda.time.DurationField durationField50 = zonedChronology21.minutes();
        org.joda.time.DateTimeField dateTimeField51 = zonedChronology21.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField52 = zonedChronology21.weekOfWeekyear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime16 and instant30", (dateTime16.compareTo(instant30) == 0) == dateTime16.equals(instant30));
    }

    @Test
    public void test0471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0471");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 798);
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime4 = dateTime2.minusHours((int) (short) 100);
        org.joda.time.DateMidnight dateMidnight5 = dateTime4.toDateMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.dayOfYear();
        int int7 = dateTime4.get(dateTimeFieldType6);
        int int8 = dateTime4.getDayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate((long) 100, dateTimeZone10);
        org.joda.time.LocalDate localDate13 = localDate11.plusDays(50);
        org.joda.time.Chronology chronology14 = localDate13.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField16 = chronology14.dayOfMonth();
        org.joda.time.DateTime dateTime17 = dateTime4.withChronology(chronology14);
        org.joda.time.DateTime dateTime19 = dateTime17.plusSeconds(100);
        org.joda.time.DateTime.Property property20 = dateTime17.hourOfDay();
        org.joda.time.DateTime dateTime21 = property20.roundHalfEvenCopy();
        boolean boolean22 = localDateTime1.equals((java.lang.Object) property20);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and dateTime17", (dateTime4.compareTo(dateTime17) == 0) == dateTime4.equals(dateTime17));
    }

    @Test
    public void test0472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0472");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        int int1 = dateTime0.getDayOfYear();
        int int2 = dateTime0.getWeekyear();
        org.joda.time.DateTime dateTime3 = dateTime0.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) 100, dateTimeZone5);
        org.joda.time.LocalDate localDate8 = localDate6.minusYears(53);
        org.joda.time.DateMidnight dateMidnight9 = localDate6.toDateMidnight();
        int int10 = localDate6.getWeekOfWeekyear();
        java.util.Calendar.Builder builder11 = new java.util.Calendar.Builder();
        java.util.Locale locale12 = java.util.Locale.JAPAN;
        java.util.Calendar.Builder builder13 = builder11.setLocale(locale12);
        java.util.Calendar.Builder builder14 = new java.util.Calendar.Builder();
        java.util.Calendar.Builder builder18 = builder14.setWeekDate((int) (short) 0, (int) '4', (int) '4');
        java.util.Calendar.Builder builder20 = builder18.setLenient(false);
        java.util.TimeZone timeZone22 = java.util.TimeZone.getTimeZone("");
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(59, 50);
        java.util.TimeZone timeZone26 = dateTimeZone25.toTimeZone();
        java.util.TimeZone timeZone27 = dateTimeZone25.toTimeZone();
        boolean boolean28 = timeZone22.hasSameRules(timeZone27);
        java.util.Calendar.Builder builder29 = builder18.setTimeZone(timeZone27);
        java.util.Calendar.Builder builder30 = builder11.setTimeZone(timeZone27);
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forTimeZone(timeZone27);
        org.joda.time.DateTime dateTime32 = localDate6.toDateTimeAtStartOfDay(dateTimeZone31);
        java.util.TimeZone timeZone33 = dateTimeZone31.toTimeZone();
        long long36 = dateTimeZone31.adjustOffset(1645514214684L, false);
        org.joda.time.DateTime dateTime37 = org.joda.time.DateTime.now(dateTimeZone31);
        org.joda.time.DateTime dateTime38 = dateTime0.toDateTime(dateTimeZone31);
        org.joda.time.LocalTime localTime39 = org.joda.time.LocalTime.now(dateTimeZone31);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime0 and dateTime37", (dateTime0.compareTo(dateTime37) == 0) == dateTime0.equals(dateTime37));
    }

    @Test
    public void test0473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0473");
        java.util.Locale locale0 = java.util.Locale.TAIWAN;
        java.util.Calendar calendar1 = java.util.Calendar.getInstance(locale0);
        calendar1.setMinimalDaysInFirstWeek(26168469);
        calendar1.set(11757696, 16, (int) (short) 100);
        org.joda.time.Instant instant9 = new org.joda.time.Instant();
        org.joda.time.Instant instant11 = instant9.withMillis((long) 11);
        org.joda.time.Instant instant12 = instant11.toInstant();
        org.joda.time.Chronology chronology13 = instant11.getChronology();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((long) '#', chronology13);
        boolean boolean15 = calendar1.before((java.lang.Object) chronology13);
        java.util.TimeZone timeZone17 = java.util.TimeZone.getTimeZone("");
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(59, 50);
        java.util.TimeZone timeZone21 = dateTimeZone20.toTimeZone();
        java.util.TimeZone timeZone22 = dateTimeZone20.toTimeZone();
        boolean boolean23 = timeZone17.hasSameRules(timeZone22);
        int int25 = timeZone22.getOffset((long) 7);
        calendar1.setTimeZone(timeZone22);
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime();
        org.joda.time.Instant instant28 = dateTime27.toInstant();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime();
        int int31 = dateTimeZone29.getOffset((org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime((java.lang.Object) instant28, dateTimeZone29);
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        boolean boolean34 = localDateTime32.isSupported(dateTimeFieldType33);
        boolean boolean35 = calendar1.before((java.lang.Object) boolean34);
        calendar1.set(11828607, 54604249, 599);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant9 and dateTime27", (instant9.compareTo(dateTime27) == 0) == instant9.equals(dateTime27));
    }

    @Test
    public void test0474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0474");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.Instant instant2 = instant0.withMillis((long) 11);
        org.joda.time.Instant instant3 = instant2.toInstant();
        org.joda.time.Chronology chronology4 = instant2.getChronology();
        org.joda.time.MutableDateTime mutableDateTime5 = instant2.toMutableDateTimeISO();
        org.joda.time.Instant instant7 = instant2.plus(0L);
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.Instant instant10 = instant7.withDurationAdded(readableDuration8, 77);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant10 and mutableDateTime5", (instant10.compareTo(mutableDateTime5) == 0) == instant10.equals(mutableDateTime5));
    }

    @Test
    public void test0475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0475");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime2 = dateTime0.minusHours((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int4 = dateTime2.get(dateTimeFieldType3);
        org.joda.time.DateTime dateTime6 = dateTime2.minusMillis((int) '#');
        org.joda.time.DateTime dateTime8 = dateTime6.plusDays(11);
        org.joda.time.DateTime dateTime11 = dateTime6.withDurationAdded((long) (byte) 10, 11);
        org.joda.time.DateTime dateTime13 = dateTime6.plusDays(26159400);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate((long) 100, dateTimeZone15);
        org.joda.time.LocalDate localDate18 = localDate16.plusDays(50);
        org.joda.time.Chronology chronology19 = localDate18.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.minuteOfHour();
        org.joda.time.DateTime dateTime21 = dateTime13.toDateTime(chronology19);
        int int22 = dateTime13.getWeekyear();
        org.joda.time.DateTime.Property property23 = dateTime13.weekOfWeekyear();
        org.joda.time.DateTime dateTime25 = property23.setCopy("28");
        int int26 = dateTime25.getYearOfEra();
        org.joda.time.MutableDateTime mutableDateTime27 = dateTime25.toMutableDateTimeISO();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime13 and dateTime21", (dateTime13.compareTo(dateTime21) == 0) == dateTime13.equals(dateTime21));
    }

    @Test
    public void test0476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0476");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        org.joda.time.Instant instant2 = dateTime1.toInstant();
        org.joda.time.Chronology chronology3 = dateTime1.getChronology();
        boolean boolean4 = dateTime0.isEqual((org.joda.time.ReadableInstant) dateTime1);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) 100, dateTimeZone6);
        org.joda.time.LocalDate localDate9 = localDate7.plusDays(50);
        org.joda.time.Chronology chronology10 = localDate9.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) 100, dateTimeZone13);
        org.joda.time.LocalDate localDate16 = localDate14.plusDays(50);
        int int17 = localDate14.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate19 = localDate14.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime();
        int int22 = dateTimeZone20.getOffset((org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.DateMidnight dateMidnight23 = localDate14.toDateMidnight(dateTimeZone20);
        long long25 = dateTimeZone20.convertUTCToLocal(60000L);
        org.joda.time.chrono.ZonedChronology zonedChronology26 = org.joda.time.chrono.ZonedChronology.getInstance(chronology10, dateTimeZone20);
        org.joda.time.DurationField durationField27 = zonedChronology26.weeks();
        org.joda.time.DurationField durationField28 = zonedChronology26.millis();
        boolean boolean29 = dateTime0.equals((java.lang.Object) durationField28);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.DateTime dateTime31 = dateTime0.plus(readablePeriod30);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and instant2", (dateTime1.compareTo(instant2) == 0) == dateTime1.equals(instant2));
    }

    @Test
    public void test0477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0477");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(dateTimeZone0);
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime(dateTimeZone0);
        org.joda.time.LocalTime localTime4 = localTime2.plusSeconds(10);
        org.joda.time.LocalTime.Property property5 = localTime4.minuteOfHour();
        org.joda.time.LocalTime localTime7 = property5.addCopy((long) 59);
        org.joda.time.LocalTime localTime8 = property5.roundCeilingCopy();
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime();
        org.joda.time.Instant instant11 = dateTime10.toInstant();
        org.joda.time.Chronology chronology12 = dateTime10.getChronology();
        boolean boolean13 = dateTime9.isEqual((org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime(dateTimeZone14);
        org.joda.time.LocalTime localTime16 = new org.joda.time.LocalTime(dateTimeZone14);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalTime localTime18 = new org.joda.time.LocalTime(dateTimeZone17);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalTime localTime20 = new org.joda.time.LocalTime(dateTimeZone19);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = localTime20.getFieldType((int) (byte) 1);
        int int23 = localTime18.get(dateTimeFieldType22);
        org.joda.time.LocalTime.Property property24 = localTime16.property(dateTimeFieldType22);
        org.joda.time.LocalTime localTime25 = property24.roundHalfFloorCopy();
        org.joda.time.LocalTime localTime26 = property24.getLocalTime();
        org.joda.time.LocalTime localTime27 = property24.roundFloorCopy();
        org.joda.time.LocalTime localTime29 = property24.addWrapFieldToCopy(26159400);
        org.joda.time.DateTimeField dateTimeField30 = property24.getField();
        org.joda.time.LocalTime localTime31 = property24.roundCeilingCopy();
        org.joda.time.LocalTime localTime33 = localTime31.minusHours(11753441);
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.UTC;
        int int36 = dateTimeZone34.getStandardOffset((long) (byte) 1);
        org.joda.time.DateTime dateTime37 = localTime33.toDateTimeToday(dateTimeZone34);
        org.joda.time.DateTime dateTime38 = dateTime9.withZone(dateTimeZone34);
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        org.joda.time.DateTime dateTime41 = dateTime9.withPeriodAdded(readablePeriod39, 54);
        org.joda.time.DateTime dateTime42 = localTime8.toDateTime((org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.DateTimeZone dateTimeZone43 = dateTime42.getZone();
        org.joda.time.DateTime.Property property44 = dateTime42.era();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime9 and instant11", (dateTime9.compareTo(instant11) == 0) == dateTime9.equals(instant11));
    }

    @Test
    public void test0478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0478");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime2 = dateTime0.minusHours((int) (short) 100);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime5 = dateTime3.minusHours((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int7 = dateTime5.get(dateTimeFieldType6);
        org.joda.time.DurationFieldType durationFieldType8 = dateTimeFieldType6.getRangeDurationType();
        org.joda.time.DateTime dateTime10 = dateTime2.withFieldAdded(durationFieldType8, 11764515);
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.DateTime dateTime13 = dateTime2.withDurationAdded(readableDuration11, 11811003);
        int int14 = dateTime2.getYearOfEra();
        org.joda.time.Instant instant15 = dateTime2.toInstant();
        org.joda.time.Instant instant16 = new org.joda.time.Instant();
        org.joda.time.Instant instant18 = instant16.withMillis((long) 11);
        org.joda.time.Instant instant19 = instant18.toInstant();
        org.joda.time.Chronology chronology20 = instant18.getChronology();
        org.joda.time.DateTimeField dateTimeField21 = chronology20.clockhourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate((long) 100, dateTimeZone23);
        int int25 = dateTimeField21.getMaximumValue((org.joda.time.ReadablePartial) localDate24);
        int int27 = localDate24.getValue(2);
        org.joda.time.DateMidnight dateMidnight28 = localDate24.toDateMidnight();
        org.joda.time.LocalDate localDate30 = localDate24.plusMonths(26160535);
        org.joda.time.format.DateTimePrinter dateTimePrinter31 = null;
        org.joda.time.format.DateTimeParser dateTimeParser32 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter33 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter31, dateTimeParser32);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter35 = dateTimeFormatter33.withPivotYear((java.lang.Integer) (-26151846));
        org.joda.time.format.DateTimeFormatter dateTimeFormatter36 = dateTimeFormatter33.withZoneUTC();
        org.joda.time.DateTimeZone dateTimeZone37 = dateTimeFormatter36.getZone();
        org.joda.time.DateTime dateTime38 = localDate30.toDateTimeAtStartOfDay(dateTimeZone37);
        org.joda.time.DateTime dateTime39 = dateTime2.toDateTime(dateTimeZone37);
        long long41 = dateTimeZone37.previousTransition(708651328L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime0 and instant16", (dateTime0.compareTo(instant16) == 0) == dateTime0.equals(instant16));
    }

    @Test
    public void test0479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0479");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 100, dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.plusDays(50);
        org.joda.time.Chronology chronology5 = localDate4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 100, dateTimeZone8);
        org.joda.time.LocalDate localDate11 = localDate9.plusDays(50);
        int int12 = localDate9.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate14 = localDate9.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        int int17 = dateTimeZone15.getOffset((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateMidnight dateMidnight18 = localDate9.toDateMidnight(dateTimeZone15);
        long long20 = dateTimeZone15.convertUTCToLocal(60000L);
        org.joda.time.chrono.ZonedChronology zonedChronology21 = org.joda.time.chrono.ZonedChronology.getInstance(chronology5, dateTimeZone15);
        org.joda.time.DurationField durationField22 = zonedChronology21.weeks();
        org.joda.time.DateTimeField dateTimeField23 = zonedChronology21.year();
        org.joda.time.DateTimeZone dateTimeZone24 = zonedChronology21.getZone();
        org.joda.time.DurationField durationField25 = zonedChronology21.weekyears();
        org.joda.time.DateTimeField dateTimeField26 = zonedChronology21.clockhourOfHalfday();
        org.joda.time.DurationField durationField27 = zonedChronology21.seconds();
        org.joda.time.DurationField durationField28 = zonedChronology21.years();
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology21.monthOfYear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on durationField25 and durationField28", (durationField25.compareTo(durationField28) == 0) == durationField25.equals(durationField28));
    }

    @Test
    public void test0480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0480");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate((long) 100, dateTimeZone2);
        org.joda.time.LocalDate localDate5 = localDate3.plusDays(50);
        org.joda.time.Chronology chronology6 = localDate5.getChronology();
        org.joda.time.LocalDate.Property property7 = localDate5.era();
        org.joda.time.DateTimeField dateTimeField8 = property7.getField();
        org.joda.time.LocalDate localDate9 = property7.getLocalDate();
        org.joda.time.LocalDate localDate10 = property7.getLocalDate();
        int int11 = localDate10.getMonthOfYear();
        int int12 = localDate10.size();
        org.joda.time.LocalDate.Property property13 = localDate10.yearOfCentury();
        org.joda.time.LocalDate.Property property14 = localDate10.year();
        java.lang.Object obj15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(obj15);
        int int17 = dateTime16.getSecondOfMinute();
        org.joda.time.DateTime.Property property18 = dateTime16.weekOfWeekyear();
        boolean boolean19 = localDate10.equals((java.lang.Object) dateTime16);
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime22 = dateTime20.minusHours((int) (short) 100);
        org.joda.time.DateTime dateTime24 = dateTime22.minus(0L);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate((long) 100, dateTimeZone26);
        org.joda.time.DateTime dateTime28 = dateTime24.withZone(dateTimeZone26);
        org.joda.time.LocalDate localDate29 = dateTime24.toLocalDate();
        org.joda.time.LocalDate localDate31 = localDate29.plusMonths(49);
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate34 = new org.joda.time.LocalDate((long) 100, dateTimeZone33);
        org.joda.time.LocalDate localDate36 = localDate34.plusDays(50);
        org.joda.time.LocalDate.Property property37 = localDate36.monthOfYear();
        org.joda.time.LocalDate.Property property38 = localDate36.year();
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate41 = new org.joda.time.LocalDate((long) 100, dateTimeZone40);
        org.joda.time.LocalDate localDate43 = localDate41.plusDays(50);
        org.joda.time.Chronology chronology44 = localDate43.getChronology();
        org.joda.time.DateTimeField dateTimeField45 = chronology44.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate48 = new org.joda.time.LocalDate((long) 100, dateTimeZone47);
        org.joda.time.LocalDate localDate50 = localDate48.plusDays(50);
        int int51 = localDate48.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate53 = localDate48.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime();
        int int56 = dateTimeZone54.getOffset((org.joda.time.ReadableInstant) dateTime55);
        org.joda.time.DateMidnight dateMidnight57 = localDate48.toDateMidnight(dateTimeZone54);
        long long59 = dateTimeZone54.convertUTCToLocal(60000L);
        org.joda.time.chrono.ZonedChronology zonedChronology60 = org.joda.time.chrono.ZonedChronology.getInstance(chronology44, dateTimeZone54);
        org.joda.time.DateTime dateTime61 = localDate36.toDateTimeAtStartOfDay(dateTimeZone54);
        java.lang.String str63 = dateTimeZone54.getName((-3155695200000L));
        org.joda.time.LocalDate localDate64 = new org.joda.time.LocalDate(dateTimeZone54);
        org.joda.time.Interval interval65 = localDate31.toInterval(dateTimeZone54);
        boolean boolean66 = dateTimeZone54.isFixed();
        org.joda.time.DateTime dateTime67 = localDate10.toDateTimeAtStartOfDay(dateTimeZone54);
        org.joda.time.LocalDateTime localDateTime68 = new org.joda.time.LocalDateTime((long) 11898734, dateTimeZone54);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime22 and dateTime28", (dateTime22.compareTo(dateTime28) == 0) == dateTime22.equals(dateTime28));
    }

    @Test
    public void test0481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0481");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        int int1 = dateTime0.getDayOfYear();
        org.joda.time.DateTime dateTime3 = dateTime0.withYear(11751002);
        org.joda.time.Instant instant4 = dateTime0.toInstant();
        org.joda.time.DateTime dateTime6 = dateTime0.plusYears(26160835);
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime9 = dateTime7.minusHours((int) (short) 100);
        org.joda.time.TimeOfDay timeOfDay10 = dateTime9.toTimeOfDay();
        org.joda.time.DateTime.Property property11 = dateTime9.yearOfEra();
        org.joda.time.DateTime dateTime13 = property11.setCopy(26156834);
        int int14 = dateTime13.getDayOfMonth();
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.DateTime dateTime16 = dateTime13.plus(readableDuration15);
        org.joda.time.DateTimeZone dateTimeZone17 = dateTime16.getZone();
        org.joda.time.MutableDateTime mutableDateTime18 = dateTime6.toMutableDateTime(dateTimeZone17);
        org.joda.time.DateTime.Property property19 = dateTime6.millisOfSecond();
        org.joda.time.YearMonthDay yearMonthDay20 = dateTime6.toYearMonthDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime0 and instant4", (dateTime0.compareTo(instant4) == 0) == dateTime0.equals(instant4));
    }

    @Test
    public void test0482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0482");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property1 = localDateTime0.yearOfEra();
        org.joda.time.LocalDateTime localDateTime3 = localDateTime0.minusSeconds(53);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.dayOfYear();
        int int5 = localDateTime0.get(dateTimeFieldType4);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray6 = localDateTime0.getFieldTypes();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.LocalDateTime localDateTime8 = localDateTime0.plus(readablePeriod7);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minusYears(26217);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime8.withYearOfEra(15);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.minusMillis(26309283);
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property16 = localDateTime15.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime15.withField(dateTimeFieldType17, (int) (short) 10);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime15.minusYears(5);
        int int22 = localDateTime15.getYearOfCentury();
        org.joda.time.LocalDateTime.Property property23 = localDateTime15.millisOfDay();
        org.joda.time.LocalDateTime.Property property24 = localDateTime15.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime25 = property24.roundHalfEvenCopy();
        java.lang.String str27 = localDateTime25.toString("1970-01-01");
        java.lang.String str28 = localDateTime25.toString();
        org.joda.time.Instant instant29 = new org.joda.time.Instant();
        org.joda.time.Instant instant31 = instant29.withMillis((long) 11);
        org.joda.time.Instant instant32 = instant31.toInstant();
        org.joda.time.ReadableDuration readableDuration33 = null;
        org.joda.time.Instant instant34 = instant31.minus(readableDuration33);
        org.joda.time.Instant instant35 = instant31.toInstant();
        org.joda.time.ReadableDuration readableDuration36 = null;
        org.joda.time.Instant instant37 = instant31.plus(readableDuration36);
        org.joda.time.Instant instant38 = new org.joda.time.Instant();
        org.joda.time.Instant instant40 = instant38.withMillis((long) 11);
        org.joda.time.Instant instant41 = instant40.toInstant();
        org.joda.time.Chronology chronology42 = instant40.getChronology();
        org.joda.time.MutableDateTime mutableDateTime43 = instant40.toMutableDateTimeISO();
        boolean boolean44 = instant31.isAfter((org.joda.time.ReadableInstant) instant40);
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property46 = localDateTime45.minuteOfHour();
        org.joda.time.LocalDateTime.Property property47 = localDateTime45.minuteOfHour();
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = property47.getFieldType();
        org.joda.time.DurationFieldType durationFieldType49 = dateTimeFieldType48.getDurationType();
        boolean boolean50 = instant31.isSupported(dateTimeFieldType48);
        org.joda.time.LocalDateTime.Property property51 = localDateTime25.property(dateTimeFieldType48);
        int int52 = localDateTime14.get(dateTimeFieldType48);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant31 and mutableDateTime43", (instant31.compareTo(mutableDateTime43) == 0) == instant31.equals(mutableDateTime43));
    }

    @Test
    public void test0483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0483");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        int int1 = dateTime0.getDayOfYear();
        org.joda.time.DateTime dateTime3 = dateTime0.withYear(11751002);
        org.joda.time.Instant instant4 = dateTime0.toInstant();
        org.joda.time.DateTime dateTime6 = dateTime0.plusYears(26160835);
        boolean boolean8 = dateTime6.equals((java.lang.Object) 0.0f);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime11 = dateTime9.minusHours((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int13 = dateTime11.get(dateTimeFieldType12);
        org.joda.time.DateTime dateTime15 = dateTime11.minusMillis((int) '#');
        org.joda.time.DateTime dateTime17 = dateTime15.plusDays(11);
        org.joda.time.DateTime dateTime20 = dateTime15.withDurationAdded((long) 11757696, (int) ' ');
        int int21 = dateTime15.getWeekOfWeekyear();
        org.joda.time.DateTime dateTime23 = dateTime15.minusWeeks(215400000);
        boolean boolean24 = dateTime6.isAfter((org.joda.time.ReadableInstant) dateTime15);
        int int25 = dateTime15.getCenturyOfEra();
        org.joda.time.LocalDateTime localDateTime26 = dateTime15.toLocalDateTime();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime0 and instant4", (dateTime0.compareTo(instant4) == 0) == dateTime0.equals(instant4));
    }

    @Test
    public void test0484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0484");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime2 = dateTime0.withMinuteOfHour(14);
        org.joda.time.DateTime dateTime4 = dateTime0.withCenturyOfEra(50);
        org.joda.time.Instant instant5 = new org.joda.time.Instant();
        org.joda.time.Instant instant7 = instant5.minus((long) 2);
        int int8 = dateTime4.compareTo((org.joda.time.ReadableInstant) instant5);
        org.joda.time.DateTime.Property property9 = dateTime4.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate((long) 100, dateTimeZone11);
        org.joda.time.LocalDate localDate14 = localDate12.plusDays(50);
        org.joda.time.Chronology chronology15 = localDate14.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.minuteOfHour();
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(chronology15);
        org.joda.time.DateTime dateTime19 = dateTime17.plusMonths(11767873);
        int int20 = dateTime19.getSecondOfDay();
        org.joda.time.DateTime dateTime22 = dateTime19.withWeekyear(11775531);
        org.joda.time.DateTime dateTime24 = dateTime22.plusMinutes(26180512);
        int int25 = property9.compareTo((org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.DateTime dateTime27 = dateTime24.plusMillis(11771235);
        org.joda.time.DateTime.Property property28 = dateTime24.hourOfDay();
        org.joda.time.DateTime dateTime30 = property28.addToCopy(0);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime0 and instant5", (dateTime0.compareTo(instant5) == 0) == dateTime0.equals(instant5));
    }

    @Test
    public void test0485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0485");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime.Property property1 = localDateTime0.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime3 = property1.addWrapFieldToCopy(11756302);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime5 = property4.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime();
        int int7 = dateTime6.getDayOfYear();
        org.joda.time.DateTime dateTime9 = dateTime6.withYear(11751002);
        org.joda.time.Instant instant10 = dateTime6.toInstant();
        org.joda.time.DateTime dateTime12 = dateTime6.plusYears(26160835);
        boolean boolean14 = dateTime12.equals((java.lang.Object) 0.0f);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime17 = dateTime15.minusHours((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int19 = dateTime17.get(dateTimeFieldType18);
        org.joda.time.DateTime dateTime21 = dateTime17.minusMillis((int) '#');
        org.joda.time.DateTime dateTime23 = dateTime21.plusDays(11);
        org.joda.time.DateTime dateTime26 = dateTime21.withDurationAdded((long) 11757696, (int) ' ');
        int int27 = dateTime21.getWeekOfWeekyear();
        org.joda.time.DateTime dateTime29 = dateTime21.minusWeeks(215400000);
        boolean boolean30 = dateTime12.isAfter((org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = org.joda.time.DateTimeFieldType.centuryOfEra();
        int int32 = dateTime12.get(dateTimeFieldType31);
        boolean boolean33 = localDateTime5.isSupported(dateTimeFieldType31);
        org.joda.time.Instant instant34 = new org.joda.time.Instant();
        org.joda.time.Instant instant36 = instant34.withMillis((long) 11);
        org.joda.time.Instant instant37 = instant36.toInstant();
        org.joda.time.Chronology chronology38 = instant36.getChronology();
        org.joda.time.DateTimeField dateTimeField39 = chronology38.clockhourOfHalfday();
        org.joda.time.Chronology chronology40 = chronology38.withUTC();
        org.joda.time.DateTimeZone dateTimeZone41 = chronology38.getZone();
        boolean boolean42 = dateTimeFieldType31.isSupported(chronology38);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime6 and instant10", (dateTime6.compareTo(instant10) == 0) == dateTime6.equals(instant10));
    }

    @Test
    public void test0486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0486");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        int int1 = dateTime0.getDayOfYear();
        org.joda.time.DateTime dateTime3 = dateTime0.withYear(11751002);
        org.joda.time.Instant instant4 = dateTime0.toInstant();
        org.joda.time.DateTime.Property property5 = dateTime0.dayOfWeek();
        org.joda.time.DateTime.Property property6 = dateTime0.secondOfMinute();
        org.joda.time.DateTime dateTime8 = dateTime0.plusHours(11763042);
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.DateTime dateTime10 = dateTime8.minus(readableDuration9);
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.DateTime dateTime12 = dateTime10.minus(readableDuration11);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime0 and instant4", (dateTime0.compareTo(instant4) == 0) == dateTime0.equals(instant4));
    }

    @Test
    public void test0487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0487");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.Instant instant1 = dateTime0.toInstant();
        org.joda.time.Chronology chronology2 = dateTime0.getChronology();
        org.joda.time.DateTime dateTime4 = dateTime0.plusDays(2);
        int int5 = dateTime0.getWeekOfWeekyear();
        org.joda.time.DateTime.Property property6 = dateTime0.weekyear();
        org.joda.time.DateTime dateTime7 = property6.roundCeilingCopy();
        org.joda.time.DateTimeField dateTimeField8 = property6.getField();
        java.lang.String str10 = dateTimeField8.getAsShortText((-7110830160000000L));
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = dateTimeField8.getType();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime0 and instant1", (dateTime0.compareTo(instant1) == 0) == dateTime0.equals(instant1));
    }

    @Test
    public void test0488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0488");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime2 = dateTime0.minusHours((int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.millisOfDay();
        int int4 = dateTime2.get(dateTimeFieldType3);
        org.joda.time.DateTime dateTime6 = dateTime2.minusMillis((int) '#');
        org.joda.time.DateTime dateTime8 = dateTime6.plusDays(11);
        org.joda.time.DateTime dateTime11 = dateTime6.withDurationAdded((long) (byte) 10, 11);
        org.joda.time.DateTime dateTime13 = dateTime6.plusDays(26159400);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate((long) 100, dateTimeZone15);
        org.joda.time.LocalDate localDate18 = localDate16.plusDays(50);
        org.joda.time.Chronology chronology19 = localDate18.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.minuteOfHour();
        org.joda.time.MutableDateTime mutableDateTime21 = dateTime6.toMutableDateTime(chronology19);
        org.joda.time.LocalDate localDate22 = org.joda.time.LocalDate.now(chronology19);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.UTC;
        int int25 = dateTimeZone23.getOffsetFromLocal((long) 'a');
        long long28 = dateTimeZone23.adjustOffset(9505L, true);
        int int30 = dateTimeZone23.getOffsetFromLocal((long) 365);
        org.joda.time.DateTime dateTime31 = org.joda.time.DateTime.now(dateTimeZone23);
        org.joda.time.DateTime dateTime32 = localDate22.toDateTimeAtStartOfDay(dateTimeZone23);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime0 and dateTime31", (dateTime0.compareTo(dateTime31) == 0) == dateTime0.equals(dateTime31));
    }

    @Test
    public void test0489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0489");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime2 = dateTime0.minusHours((int) (short) 100);
        org.joda.time.TimeOfDay timeOfDay3 = dateTime2.toTimeOfDay();
        org.joda.time.DateTime.Property property4 = dateTime2.yearOfEra();
        org.joda.time.DateTime dateTime5 = property4.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime();
        org.joda.time.DateTime dateTime8 = dateTime6.minusHours((int) (short) 100);
        org.joda.time.TimeOfDay timeOfDay9 = dateTime8.toTimeOfDay();
        org.joda.time.DateTime.Property property10 = dateTime8.yearOfEra();
        org.joda.time.DateTime dateTime11 = property10.roundCeilingCopy();
        org.joda.time.DateTime dateTime12 = property10.roundHalfCeilingCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = property10.getFieldType();
        org.joda.time.DateTime.Property property14 = dateTime5.property(dateTimeFieldType13);
        int int15 = dateTime5.getMonthOfYear();
        org.joda.time.Instant instant17 = new org.joda.time.Instant();
        org.joda.time.Instant instant19 = instant17.withMillis((long) 11);
        org.joda.time.Instant instant20 = instant19.toInstant();
        org.joda.time.Chronology chronology21 = instant19.getChronology();
        org.joda.time.DurationField durationField22 = chronology21.seconds();
        org.joda.time.LocalTime localTime23 = org.joda.time.LocalTime.fromMillisOfDay((long) 26160535, chronology21);
        org.joda.time.DateTime dateTime24 = org.joda.time.DateTime.now(chronology21);
        org.joda.time.DateTime dateTime26 = dateTime24.minusHours(11885);
        boolean boolean27 = dateTime5.isEqual((org.joda.time.ReadableInstant) dateTime24);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime0 and instant17", (dateTime0.compareTo(instant17) == 0) == dateTime0.equals(instant17));
    }

    @Test
    public void test0490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0490");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 100, dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.plusDays(50);
        org.joda.time.Chronology chronology5 = localDate4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 100, dateTimeZone8);
        org.joda.time.LocalDate localDate11 = localDate9.plusDays(50);
        int int12 = localDate9.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate14 = localDate9.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        int int17 = dateTimeZone15.getOffset((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateMidnight dateMidnight18 = localDate9.toDateMidnight(dateTimeZone15);
        long long20 = dateTimeZone15.convertUTCToLocal(60000L);
        org.joda.time.chrono.ZonedChronology zonedChronology21 = org.joda.time.chrono.ZonedChronology.getInstance(chronology5, dateTimeZone15);
        org.joda.time.DurationField durationField22 = zonedChronology21.weeks();
        org.joda.time.DateTimeField dateTimeField23 = zonedChronology21.year();
        org.joda.time.DateTimeZone dateTimeZone24 = zonedChronology21.getZone();
        org.joda.time.DateTimeField dateTimeField25 = zonedChronology21.weekyear();
        org.joda.time.DateTimeField dateTimeField26 = zonedChronology21.minuteOfHour();
        org.joda.time.DurationField durationField27 = zonedChronology21.hours();
        org.joda.time.Instant instant28 = new org.joda.time.Instant();
        org.joda.time.Instant instant30 = instant28.withMillis((long) 11);
        org.joda.time.Instant instant31 = instant30.toInstant();
        org.joda.time.Chronology chronology32 = instant30.getChronology();
        org.joda.time.DurationField durationField33 = chronology32.seconds();
        int int36 = durationField33.getDifference((long) 11760637, (long) 8);
        long long39 = durationField33.subtract((long) 50, (long) 32772);
        java.lang.String str40 = durationField33.toString();
        long long42 = durationField33.getValueAsLong((long) 11781671);
        long long45 = durationField33.getDifferenceAsLong(2969L, (long) ' ');
        int int46 = durationField27.compareTo(durationField33);
        long long48 = durationField33.getMillis(11826803);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime16 and instant28", (dateTime16.compareTo(instant28) == 0) == dateTime16.equals(instant28));
    }

    @Test
    public void test0491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0491");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.Instant instant1 = dateTime0.toInstant();
        org.joda.time.Chronology chronology2 = dateTime0.getChronology();
        org.joda.time.DateTime dateTime4 = dateTime0.plusDays(2);
        java.util.Date date5 = dateTime0.toDate();
        java.lang.String str7 = dateTime0.toString("15");
        java.util.GregorianCalendar gregorianCalendar8 = dateTime0.toGregorianCalendar();
        gregorianCalendar8.setFirstDayOfWeek(11760949);
        org.joda.time.LocalTime localTime11 = org.joda.time.LocalTime.fromCalendarFields((java.util.Calendar) gregorianCalendar8);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime0 and instant1", (dateTime0.compareTo(instant1) == 0) == dateTime0.equals(instant1));
    }

    @Test
    public void test0492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0492");
        java.lang.String[] strArray3 = new java.lang.String[] { "+00:00", "zh_TW", "centuries" };
        java.util.LinkedHashSet<java.lang.String> strSet4 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet4, strArray3);
        strSet4.clear();
        java.util.Locale locale7 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet8 = locale7.getUnicodeLocaleAttributes();
        boolean boolean9 = strSet8.isEmpty();
        java.util.Locale locale10 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet11 = locale10.getUnicodeLocaleAttributes();
        boolean boolean12 = strSet11.isEmpty();
        boolean boolean13 = strSet8.removeAll((java.util.Collection<java.lang.String>) strSet11);
        boolean boolean14 = strSet4.addAll((java.util.Collection<java.lang.String>) strSet8);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalTime localTime16 = new org.joda.time.LocalTime(dateTimeZone15);
        org.joda.time.LocalTime localTime17 = new org.joda.time.LocalTime(dateTimeZone15);
        org.joda.time.LocalTime localTime19 = localTime17.plusSeconds(10);
        org.joda.time.LocalTime.Property property20 = localTime19.minuteOfHour();
        org.joda.time.LocalTime localTime22 = property20.addCopy((long) 59);
        boolean boolean23 = strSet4.contains((java.lang.Object) localTime22);
        org.joda.time.Instant instant24 = new org.joda.time.Instant();
        org.joda.time.Instant instant26 = instant24.withMillis((long) 11);
        org.joda.time.Instant instant27 = instant26.toInstant();
        org.joda.time.Chronology chronology28 = instant26.getChronology();
        org.joda.time.MutableDateTime mutableDateTime29 = instant26.toMutableDateTimeISO();
        boolean boolean30 = strSet4.equals((java.lang.Object) instant26);
        org.joda.time.Instant instant32 = instant26.withMillis((long) 11765681);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant26 and mutableDateTime29", (instant26.compareTo(mutableDateTime29) == 0) == instant26.equals(mutableDateTime29));
    }

    @Test
    public void test0493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0493");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 100, dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.plusDays(50);
        org.joda.time.Chronology chronology5 = localDate4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 100, dateTimeZone8);
        org.joda.time.LocalDate localDate11 = localDate9.plusDays(50);
        int int12 = localDate9.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate14 = localDate9.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        int int17 = dateTimeZone15.getOffset((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateMidnight dateMidnight18 = localDate9.toDateMidnight(dateTimeZone15);
        long long20 = dateTimeZone15.convertUTCToLocal(60000L);
        org.joda.time.chrono.ZonedChronology zonedChronology21 = org.joda.time.chrono.ZonedChronology.getInstance(chronology5, dateTimeZone15);
        org.joda.time.DurationField durationField22 = zonedChronology21.weeks();
        org.joda.time.DateTimeField dateTimeField23 = zonedChronology21.centuryOfEra();
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        long long27 = zonedChronology21.add(readablePeriod24, (long) 2022, 0);
        org.joda.time.DateTimeField dateTimeField28 = zonedChronology21.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate((long) 100, dateTimeZone30);
        org.joda.time.LocalDate localDate33 = localDate31.plusDays(50);
        int int34 = localDate31.getWeekOfWeekyear();
        org.joda.time.DateMidnight dateMidnight35 = localDate31.toDateMidnight();
        int[] intArray37 = zonedChronology21.get((org.joda.time.ReadablePartial) localDate31, 4518998492L);
        org.joda.time.DateTimeField dateTimeField38 = zonedChronology21.year();
        org.joda.time.DateTime dateTime39 = org.joda.time.DateTime.now((org.joda.time.Chronology) zonedChronology21);
        org.joda.time.DateTimeField dateTimeField40 = zonedChronology21.weekyearOfCentury();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime16 and dateTime39", (dateTime16.compareTo(dateTime39) == 0) == dateTime16.equals(dateTime39));
    }

    @Test
    public void test0494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0494");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 100, dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.plusDays(50);
        org.joda.time.Chronology chronology5 = localDate4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.millisOfDay();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate(chronology5);
        org.joda.time.DateTimeField dateTimeField8 = chronology5.minuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(59, 50);
        java.util.TimeZone timeZone13 = dateTimeZone12.toTimeZone();
        java.util.TimeZone timeZone14 = dateTimeZone12.toTimeZone();
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(72000000L, dateTimeZone12);
        int int17 = dateTimeZone12.getStandardOffset((long) 'u');
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate(dateTimeZone12);
        org.joda.time.chrono.ZonedChronology zonedChronology19 = org.joda.time.chrono.ZonedChronology.getInstance(chronology5, dateTimeZone12);
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime(dateTimeZone12);
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) (byte) 10);
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime();
        org.joda.time.Instant instant24 = dateTime23.toInstant();
        org.joda.time.Chronology chronology25 = dateTime23.getChronology();
        long long26 = dateTime23.getMillis();
        boolean boolean27 = dateTime22.isEqual((org.joda.time.ReadableInstant) dateTime23);
        boolean boolean28 = dateTimeZone12.equals((java.lang.Object) boolean27);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime20 and instant24", (dateTime20.compareTo(instant24) == 0) == dateTime20.equals(instant24));
    }

    @Test
    public void test0495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0495");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        org.joda.time.Instant instant1 = dateTime0.toInstant();
        org.joda.time.Chronology chronology2 = dateTime0.getChronology();
        org.joda.time.DateTime dateTime4 = dateTime0.plusDays(2);
        int int5 = dateTime0.getWeekOfWeekyear();
        org.joda.time.DateTime dateTime7 = dateTime0.withMillisOfDay(11771566);
        int int8 = dateTime7.getSecondOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime0 and instant1", (dateTime0.compareTo(instant1) == 0) == dateTime0.equals(instant1));
    }

    @Test
    public void test0496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0496");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 100, dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.plusDays(50);
        org.joda.time.Chronology chronology5 = localDate4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 100, dateTimeZone8);
        org.joda.time.LocalDate localDate11 = localDate9.plusDays(50);
        int int12 = localDate9.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate14 = localDate9.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        int int17 = dateTimeZone15.getOffset((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateMidnight dateMidnight18 = localDate9.toDateMidnight(dateTimeZone15);
        long long20 = dateTimeZone15.convertUTCToLocal(60000L);
        org.joda.time.chrono.ZonedChronology zonedChronology21 = org.joda.time.chrono.ZonedChronology.getInstance(chronology5, dateTimeZone15);
        org.joda.time.DurationField durationField22 = zonedChronology21.eras();
        org.joda.time.DateTimeField dateTimeField23 = zonedChronology21.minuteOfDay();
        org.joda.time.Chronology chronology24 = zonedChronology21.withUTC();
        org.joda.time.DateTimeField dateTimeField25 = zonedChronology21.monthOfYear();
        org.joda.time.DateTimeField dateTimeField26 = zonedChronology21.dayOfYear();
        org.joda.time.DateTimeField dateTimeField27 = zonedChronology21.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField28 = zonedChronology21.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField29 = zonedChronology21.year();
        org.joda.time.DurationField durationField30 = dateTimeField29.getDurationField();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField22, durationField30, and durationField22", !(durationField22.compareTo(durationField30) == 0) || (Math.signum(durationField22.compareTo(durationField22)) == Math.signum(durationField30.compareTo(durationField22))));
    }

    @Test
    public void test0497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0497");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 100, dateTimeZone1);
        org.joda.time.LocalDate localDate4 = localDate2.plusDays(50);
        org.joda.time.Chronology chronology5 = localDate4.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.hourOfHalfday();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate((long) 100, dateTimeZone8);
        org.joda.time.LocalDate localDate11 = localDate9.plusDays(50);
        int int12 = localDate9.getWeekOfWeekyear();
        org.joda.time.LocalDate localDate14 = localDate9.plusMonths(6);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime();
        int int17 = dateTimeZone15.getOffset((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateMidnight dateMidnight18 = localDate9.toDateMidnight(dateTimeZone15);
        long long20 = dateTimeZone15.convertUTCToLocal(60000L);
        org.joda.time.chrono.ZonedChronology zonedChronology21 = org.joda.time.chrono.ZonedChronology.getInstance(chronology5, dateTimeZone15);
        org.joda.time.DurationField durationField22 = zonedChronology21.weeks();
        org.joda.time.DurationField durationField23 = zonedChronology21.centuries();
        org.joda.time.DurationField durationField24 = zonedChronology21.weekyears();
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate((org.joda.time.Chronology) zonedChronology21);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.forOffsetMillis(14);
        org.joda.time.DateTime dateTime28 = localDate25.toDateTimeAtCurrentTime(dateTimeZone27);
        java.lang.String str30 = dateTimeZone27.getName((long) 11948601);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime16 and dateTime28", (dateTime16.compareTo(dateTime28) == 0) == dateTime16.equals(dateTime28));
    }

    @Test
    public void test0498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0498");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime();
        int int2 = dateTimeZone0.getOffset((org.joda.time.ReadableInstant) dateTime1);
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now(dateTimeZone0);
        java.lang.String str5 = dateTimeZone0.getName((long) 18);
        long long9 = dateTimeZone0.convertLocalToUTC((long) 11897315, false, (long) 11884895);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime3", (dateTime1.compareTo(dateTime3) == 0) == dateTime1.equals(dateTime3));
    }

    @Test
    public void test0499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0499");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.Instant instant2 = instant0.withMillis((long) 11);
        org.joda.time.Instant instant3 = instant2.toInstant();
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.Instant instant5 = instant2.minus(readableDuration4);
        org.joda.time.DateTime dateTime6 = instant2.toDateTimeISO();
        org.joda.time.DurationFieldType durationFieldType7 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.Instant instant8 = new org.joda.time.Instant();
        org.joda.time.Instant instant10 = instant8.withMillis((long) 11);
        org.joda.time.Instant instant11 = instant10.toInstant();
        org.joda.time.Chronology chronology12 = instant10.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.minuteOfDay();
        org.joda.time.Chronology chronology14 = chronology12.withUTC();
        boolean boolean15 = durationFieldType7.isSupported(chronology14);
        boolean boolean16 = instant2.equals((java.lang.Object) boolean15);
        org.joda.time.MutableDateTime mutableDateTime17 = instant2.toMutableDateTime();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant2 and dateTime6", (instant2.compareTo(dateTime6) == 0) == instant2.equals(dateTime6));
    }

    @Test
    public void test0500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test0500");
        org.joda.time.DateTime dateTime0 = new org.joda.time.DateTime();
        int int1 = dateTime0.getDayOfYear();
        int int2 = dateTime0.getWeekyear();
        int int3 = dateTime0.getWeekyear();
        org.joda.time.DateTime.Property property4 = dateTime0.secondOfDay();
        org.joda.time.DateTime dateTime5 = dateTime0.toDateTimeISO();
        org.joda.time.Instant instant6 = new org.joda.time.Instant();
        org.joda.time.Instant instant8 = instant6.minus((long) 2);
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.Instant instant10 = instant8.plus(readableDuration9);
        boolean boolean11 = dateTime5.isAfter((org.joda.time.ReadableInstant) instant8);
        org.joda.time.DateTime dateTime13 = dateTime5.minusSeconds(11914598);
        int int14 = dateTime5.getDayOfMonth();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime5 and instant6", (dateTime5.compareTo(instant6) == 0) == dateTime5.equals(instant6));
    }
}


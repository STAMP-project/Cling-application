import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest2 {

    public static boolean debug = false;

    @Test
    public void test01001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01001");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean1 = continuousOutputModel0.requiresDenseOutput();
        double double2 = continuousOutputModel0.getInitialTime();
        double double3 = continuousOutputModel0.getInitialTime();
        boolean boolean4 = continuousOutputModel0.requiresDenseOutput();
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel0.setInterpolatedTime((double) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
    }

    @Test
    public void test01002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01002");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean1 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean2 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        double double4 = continuousOutputModel0.getInitialTime();
        boolean boolean5 = continuousOutputModel0.requiresDenseOutput();
        java.lang.Class<?> wildcardClass6 = continuousOutputModel0.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test01003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01003");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double1 = continuousOutputModel0.getFinalTime();
        double double2 = continuousOutputModel0.getInitialTime();
        double double3 = continuousOutputModel0.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel4 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double5 = continuousOutputModel4.getFinalTime();
        double double6 = continuousOutputModel4.getInitialTime();
        continuousOutputModel0.append(continuousOutputModel4);
        double double8 = continuousOutputModel0.getFinalTime();
        boolean boolean9 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean10 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean11 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean12 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel14 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean15 = continuousOutputModel14.requiresDenseOutput();
        continuousOutputModel14.reset();
        double double17 = continuousOutputModel14.getInitialTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel18 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean19 = continuousOutputModel18.requiresDenseOutput();
        boolean boolean20 = continuousOutputModel18.requiresDenseOutput();
        double double21 = continuousOutputModel18.getFinalTime();
        double double22 = continuousOutputModel18.getInitialTime();
        boolean boolean23 = continuousOutputModel18.requiresDenseOutput();
        continuousOutputModel14.append(continuousOutputModel18);
        continuousOutputModel0.append(continuousOutputModel18);
        continuousOutputModel0.reset();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel27 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double28 = continuousOutputModel27.getFinalTime();
        double double29 = continuousOutputModel27.getInitialTime();
        boolean boolean30 = continuousOutputModel27.requiresDenseOutput();
        continuousOutputModel27.reset();
        double double32 = continuousOutputModel27.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel33 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double34 = continuousOutputModel33.getFinalTime();
        double double35 = continuousOutputModel33.getInitialTime();
        continuousOutputModel27.append(continuousOutputModel33);
        continuousOutputModel27.reset();
        continuousOutputModel27.reset();
        continuousOutputModel27.reset();
        continuousOutputModel0.append(continuousOutputModel27);
        boolean boolean41 = continuousOutputModel0.requiresDenseOutput();
        double double42 = continuousOutputModel0.getFinalTime();
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel0.setInterpolatedTime((double) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double42));
    }

    @Test
    public void test01004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01004");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double1 = continuousOutputModel0.getFinalTime();
        double double2 = continuousOutputModel0.getInitialTime();
        double double3 = continuousOutputModel0.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel4 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double5 = continuousOutputModel4.getFinalTime();
        double double6 = continuousOutputModel4.getInitialTime();
        continuousOutputModel0.append(continuousOutputModel4);
        double double8 = continuousOutputModel0.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel9 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double10 = continuousOutputModel9.getFinalTime();
        double double11 = continuousOutputModel9.getInitialTime();
        boolean boolean12 = continuousOutputModel9.requiresDenseOutput();
        double double13 = continuousOutputModel9.getInitialTime();
        continuousOutputModel9.reset();
        boolean boolean15 = continuousOutputModel9.requiresDenseOutput();
        continuousOutputModel0.append(continuousOutputModel9);
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel17 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean18 = continuousOutputModel17.requiresDenseOutput();
        double double19 = continuousOutputModel17.getInitialTime();
        boolean boolean20 = continuousOutputModel17.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel21 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double22 = continuousOutputModel21.getFinalTime();
        double double23 = continuousOutputModel21.getInitialTime();
        boolean boolean24 = continuousOutputModel21.requiresDenseOutput();
        continuousOutputModel21.reset();
        boolean boolean26 = continuousOutputModel21.requiresDenseOutput();
        continuousOutputModel17.append(continuousOutputModel21);
        continuousOutputModel17.reset();
        continuousOutputModel9.append(continuousOutputModel17);
        boolean boolean30 = continuousOutputModel9.requiresDenseOutput();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator31 = null;
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel9.handleStep(stepInterpolator31, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
    }

    @Test
    public void test01005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01005");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean1 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean2 = continuousOutputModel0.requiresDenseOutput();
        double double3 = continuousOutputModel0.getFinalTime();
        continuousOutputModel0.reset();
        boolean boolean5 = continuousOutputModel0.requiresDenseOutput();
        double double6 = continuousOutputModel0.getFinalTime();
        continuousOutputModel0.reset();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator8 = null;
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel0.handleStep(stepInterpolator8, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
    }

    @Test
    public void test01006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01006");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean1 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean2 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        boolean boolean4 = continuousOutputModel0.requiresDenseOutput();
        double double5 = continuousOutputModel0.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel6 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double7 = continuousOutputModel6.getFinalTime();
        double double8 = continuousOutputModel6.getInitialTime();
        boolean boolean9 = continuousOutputModel6.requiresDenseOutput();
        continuousOutputModel6.reset();
        double double11 = continuousOutputModel6.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel12 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double13 = continuousOutputModel12.getFinalTime();
        double double14 = continuousOutputModel12.getInitialTime();
        continuousOutputModel6.append(continuousOutputModel12);
        continuousOutputModel0.append(continuousOutputModel12);
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel17 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean18 = continuousOutputModel17.requiresDenseOutput();
        double double19 = continuousOutputModel17.getInitialTime();
        boolean boolean20 = continuousOutputModel17.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel21 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double22 = continuousOutputModel21.getFinalTime();
        double double23 = continuousOutputModel21.getInitialTime();
        boolean boolean24 = continuousOutputModel21.requiresDenseOutput();
        continuousOutputModel21.reset();
        boolean boolean26 = continuousOutputModel21.requiresDenseOutput();
        continuousOutputModel17.append(continuousOutputModel21);
        continuousOutputModel21.reset();
        double double29 = continuousOutputModel21.getInitialTime();
        continuousOutputModel21.reset();
        boolean boolean31 = continuousOutputModel21.requiresDenseOutput();
        continuousOutputModel12.append(continuousOutputModel21);
        // The following exception was thrown during execution in test generation
        try {
            double double33 = continuousOutputModel12.getInterpolatedTime();
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
    }

    @Test
    public void test01007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01007");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean1 = continuousOutputModel0.requiresDenseOutput();
        double double2 = continuousOutputModel0.getInitialTime();
        double double3 = continuousOutputModel0.getFinalTime();
        boolean boolean4 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel6 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean7 = continuousOutputModel6.requiresDenseOutput();
        boolean boolean8 = continuousOutputModel6.requiresDenseOutput();
        double double9 = continuousOutputModel6.getFinalTime();
        double double10 = continuousOutputModel6.getInitialTime();
        double double11 = continuousOutputModel6.getFinalTime();
        boolean boolean12 = continuousOutputModel6.requiresDenseOutput();
        boolean boolean13 = continuousOutputModel6.requiresDenseOutput();
        continuousOutputModel0.append(continuousOutputModel6);
        org.apache.commons.math.ode.StepInterpolator stepInterpolator15 = null;
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel6.handleStep(stepInterpolator15, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test01008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01008");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean1 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel3 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double4 = continuousOutputModel3.getFinalTime();
        double double5 = continuousOutputModel3.getInitialTime();
        boolean boolean6 = continuousOutputModel3.requiresDenseOutput();
        continuousOutputModel3.reset();
        boolean boolean8 = continuousOutputModel3.requiresDenseOutput();
        boolean boolean9 = continuousOutputModel3.requiresDenseOutput();
        double double10 = continuousOutputModel3.getInitialTime();
        continuousOutputModel0.append(continuousOutputModel3);
        double double12 = continuousOutputModel0.getFinalTime();
        double double13 = continuousOutputModel0.getFinalTime();
        boolean boolean14 = continuousOutputModel0.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel15 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean16 = continuousOutputModel15.requiresDenseOutput();
        boolean boolean17 = continuousOutputModel15.requiresDenseOutput();
        double double18 = continuousOutputModel15.getFinalTime();
        continuousOutputModel15.reset();
        boolean boolean20 = continuousOutputModel15.requiresDenseOutput();
        continuousOutputModel15.reset();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel22 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean23 = continuousOutputModel22.requiresDenseOutput();
        boolean boolean24 = continuousOutputModel22.requiresDenseOutput();
        double double25 = continuousOutputModel22.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel26 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean27 = continuousOutputModel26.requiresDenseOutput();
        continuousOutputModel22.append(continuousOutputModel26);
        boolean boolean29 = continuousOutputModel22.requiresDenseOutput();
        continuousOutputModel22.reset();
        continuousOutputModel15.append(continuousOutputModel22);
        boolean boolean32 = continuousOutputModel15.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel33 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double34 = continuousOutputModel33.getFinalTime();
        double double35 = continuousOutputModel33.getInitialTime();
        boolean boolean36 = continuousOutputModel33.requiresDenseOutput();
        continuousOutputModel15.append(continuousOutputModel33);
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel38 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double39 = continuousOutputModel38.getFinalTime();
        double double40 = continuousOutputModel38.getInitialTime();
        boolean boolean41 = continuousOutputModel38.requiresDenseOutput();
        double double42 = continuousOutputModel38.getInitialTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel43 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean44 = continuousOutputModel43.requiresDenseOutput();
        boolean boolean45 = continuousOutputModel43.requiresDenseOutput();
        continuousOutputModel43.reset();
        boolean boolean47 = continuousOutputModel43.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel48 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double49 = continuousOutputModel48.getFinalTime();
        double double50 = continuousOutputModel48.getInitialTime();
        boolean boolean51 = continuousOutputModel48.requiresDenseOutput();
        continuousOutputModel43.append(continuousOutputModel48);
        continuousOutputModel38.append(continuousOutputModel43);
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel54 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean55 = continuousOutputModel54.requiresDenseOutput();
        double double56 = continuousOutputModel54.getInitialTime();
        boolean boolean57 = continuousOutputModel54.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel58 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean59 = continuousOutputModel58.requiresDenseOutput();
        boolean boolean60 = continuousOutputModel58.requiresDenseOutput();
        continuousOutputModel54.append(continuousOutputModel58);
        continuousOutputModel43.append(continuousOutputModel54);
        continuousOutputModel33.append(continuousOutputModel43);
        continuousOutputModel0.append(continuousOutputModel43);
        continuousOutputModel43.reset();
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel43.setInterpolatedTime((double) 100.0f);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertTrue(Double.isNaN(double50));
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double56));
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
    }

    @Test
    public void test01009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01009");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean1 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean2 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        continuousOutputModel0.reset();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel5 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double6 = continuousOutputModel5.getFinalTime();
        double double7 = continuousOutputModel5.getInitialTime();
        boolean boolean8 = continuousOutputModel5.requiresDenseOutput();
        continuousOutputModel5.reset();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel10 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean11 = continuousOutputModel10.requiresDenseOutput();
        double double12 = continuousOutputModel10.getInitialTime();
        continuousOutputModel5.append(continuousOutputModel10);
        continuousOutputModel0.append(continuousOutputModel10);
        boolean boolean15 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean16 = continuousOutputModel0.requiresDenseOutput();
        double double17 = continuousOutputModel0.getFinalTime();
        boolean boolean18 = continuousOutputModel0.requiresDenseOutput();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator19 = null;
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel0.handleStep(stepInterpolator19, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
    }

    @Test
    public void test01010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01010");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double1 = continuousOutputModel0.getFinalTime();
        double double2 = continuousOutputModel0.getInitialTime();
        boolean boolean3 = continuousOutputModel0.requiresDenseOutput();
        double double4 = continuousOutputModel0.getInitialTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel5 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean6 = continuousOutputModel5.requiresDenseOutput();
        boolean boolean7 = continuousOutputModel5.requiresDenseOutput();
        continuousOutputModel5.reset();
        boolean boolean9 = continuousOutputModel5.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel10 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double11 = continuousOutputModel10.getFinalTime();
        double double12 = continuousOutputModel10.getInitialTime();
        boolean boolean13 = continuousOutputModel10.requiresDenseOutput();
        continuousOutputModel5.append(continuousOutputModel10);
        continuousOutputModel0.append(continuousOutputModel5);
        boolean boolean16 = continuousOutputModel0.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel17 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double18 = continuousOutputModel17.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel19 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean20 = continuousOutputModel19.requiresDenseOutput();
        double double21 = continuousOutputModel19.getInitialTime();
        boolean boolean22 = continuousOutputModel19.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel23 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double24 = continuousOutputModel23.getFinalTime();
        double double25 = continuousOutputModel23.getInitialTime();
        boolean boolean26 = continuousOutputModel23.requiresDenseOutput();
        continuousOutputModel23.reset();
        boolean boolean28 = continuousOutputModel23.requiresDenseOutput();
        continuousOutputModel19.append(continuousOutputModel23);
        continuousOutputModel17.append(continuousOutputModel19);
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel31 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean32 = continuousOutputModel31.requiresDenseOutput();
        boolean boolean33 = continuousOutputModel31.requiresDenseOutput();
        continuousOutputModel31.reset();
        boolean boolean35 = continuousOutputModel31.requiresDenseOutput();
        boolean boolean36 = continuousOutputModel31.requiresDenseOutput();
        continuousOutputModel17.append(continuousOutputModel31);
        boolean boolean38 = continuousOutputModel31.requiresDenseOutput();
        continuousOutputModel31.reset();
        double double40 = continuousOutputModel31.getFinalTime();
        continuousOutputModel0.append(continuousOutputModel31);
        double double42 = continuousOutputModel31.getInitialTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel43 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean44 = continuousOutputModel43.requiresDenseOutput();
        boolean boolean45 = continuousOutputModel43.requiresDenseOutput();
        continuousOutputModel43.reset();
        continuousOutputModel43.reset();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel48 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double49 = continuousOutputModel48.getFinalTime();
        double double50 = continuousOutputModel48.getInitialTime();
        boolean boolean51 = continuousOutputModel48.requiresDenseOutput();
        continuousOutputModel48.reset();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel53 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean54 = continuousOutputModel53.requiresDenseOutput();
        double double55 = continuousOutputModel53.getInitialTime();
        continuousOutputModel48.append(continuousOutputModel53);
        continuousOutputModel43.append(continuousOutputModel53);
        boolean boolean58 = continuousOutputModel43.requiresDenseOutput();
        boolean boolean59 = continuousOutputModel43.requiresDenseOutput();
        continuousOutputModel43.reset();
        double double61 = continuousOutputModel43.getInitialTime();
        continuousOutputModel31.append(continuousOutputModel43);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray63 = continuousOutputModel31.getInterpolatedState();
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertTrue(Double.isNaN(double50));
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double55));
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double61));
    }

    @Test
    public void test01011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01011");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean1 = continuousOutputModel0.requiresDenseOutput();
        double double2 = continuousOutputModel0.getInitialTime();
        continuousOutputModel0.reset();
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel0.setInterpolatedTime(0.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
    }

    @Test
    public void test01012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01012");
        java.io.IOException iOException10 = new java.io.IOException("hi!");
        org.apache.commons.math.ode.DerivativeException derivativeException11 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) iOException10);
        org.apache.commons.math.MathException mathException12 = new org.apache.commons.math.MathException("hi!", (java.lang.Throwable) iOException10);
        java.lang.Object[] objArray13 = mathException12.getArguments();
        org.apache.commons.math.MathException mathException14 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: ", objArray13);
        org.apache.commons.math.MathException mathException15 = new org.apache.commons.math.MathException("hi!", objArray13);
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel17 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double18 = continuousOutputModel17.getFinalTime();
        double double19 = continuousOutputModel17.getInitialTime();
        boolean boolean20 = continuousOutputModel17.requiresDenseOutput();
        double double21 = continuousOutputModel17.getInitialTime();
        java.io.IOException iOException24 = new java.io.IOException("hi!");
        org.apache.commons.math.ode.DerivativeException derivativeException25 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) iOException24);
        org.apache.commons.math.MathException mathException26 = new org.apache.commons.math.MathException("hi!", (java.lang.Throwable) iOException24);
        java.io.IOException iOException29 = new java.io.IOException("hi!");
        java.io.IOException iOException30 = new java.io.IOException("", (java.lang.Throwable) iOException29);
        org.apache.commons.math.ode.DerivativeException derivativeException31 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) iOException29);
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel33 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double34 = continuousOutputModel33.getFinalTime();
        double double35 = continuousOutputModel33.getInitialTime();
        java.lang.Object[] objArray36 = new java.lang.Object[] { double21, mathException26, iOException29, false, continuousOutputModel33 };
        java.lang.String[] strArray45 = new java.lang.String[] { "hi!", "org.apache.commons.math.MathException: ", "hi!", "org.apache.commons.math.MathException: ", "", "" };
        org.apache.commons.math.ode.DerivativeException derivativeException46 = new org.apache.commons.math.ode.DerivativeException("", strArray45);
        java.io.IOException iOException50 = new java.io.IOException("hi!");
        org.apache.commons.math.ode.DerivativeException derivativeException51 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) iOException50);
        org.apache.commons.math.MathException mathException52 = new org.apache.commons.math.MathException("hi!", (java.lang.Throwable) iOException50);
        java.lang.Object[] objArray53 = mathException52.getArguments();
        org.apache.commons.math.MathException mathException54 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: ", (java.lang.Throwable) mathException52);
        org.apache.commons.math.MathException mathException55 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: hi!", (java.lang.Object[]) strArray45, (java.lang.Throwable) mathException52);
        org.apache.commons.math.MathException mathException56 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: hi!", objArray36, (java.lang.Throwable) mathException55);
        org.apache.commons.math.MathException mathException57 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: ", objArray13, (java.lang.Throwable) mathException56);
        org.apache.commons.math.MathException mathException58 = new org.apache.commons.math.MathException("", objArray13);
        org.apache.commons.math.MathException mathException59 = new org.apache.commons.math.MathException("", (java.lang.Throwable) mathException58);
        org.apache.commons.math.MathException mathException60 = new org.apache.commons.math.MathException("", (java.lang.Throwable) mathException58);
        java.io.IOException iOException61 = new java.io.IOException("org.apache.commons.math.MathException: org.apache.commons.math.ode.DerivativeException: java.io.IOException: hi!", (java.lang.Throwable) mathException58);
        java.lang.Object[] objArray62 = mathException58.getArguments();
        org.apache.commons.math.MathException mathException63 = new org.apache.commons.math.MathException("org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.MathException: hi!", objArray62);
        org.junit.Assert.assertNotNull(objArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray13), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray13), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray53), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray53), "[]");
        org.junit.Assert.assertNotNull(objArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray62), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray62), "[]");
    }

    @Test
    public void test01013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01013");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double1 = continuousOutputModel0.getFinalTime();
        double double2 = continuousOutputModel0.getInitialTime();
        double double3 = continuousOutputModel0.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel4 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double5 = continuousOutputModel4.getFinalTime();
        double double6 = continuousOutputModel4.getInitialTime();
        continuousOutputModel0.append(continuousOutputModel4);
        double double8 = continuousOutputModel0.getFinalTime();
        continuousOutputModel0.reset();
        continuousOutputModel0.reset();
        boolean boolean11 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        boolean boolean13 = continuousOutputModel0.requiresDenseOutput();
        java.lang.Class<?> wildcardClass14 = continuousOutputModel0.getClass();
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test01014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01014");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double1 = continuousOutputModel0.getFinalTime();
        double double2 = continuousOutputModel0.getInitialTime();
        boolean boolean3 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel5 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean6 = continuousOutputModel5.requiresDenseOutput();
        double double7 = continuousOutputModel5.getInitialTime();
        continuousOutputModel0.append(continuousOutputModel5);
        boolean boolean9 = continuousOutputModel5.requiresDenseOutput();
        boolean boolean10 = continuousOutputModel5.requiresDenseOutput();
        boolean boolean11 = continuousOutputModel5.requiresDenseOutput();
        continuousOutputModel5.reset();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel13 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean14 = continuousOutputModel13.requiresDenseOutput();
        double double15 = continuousOutputModel13.getInitialTime();
        double double16 = continuousOutputModel13.getFinalTime();
        boolean boolean17 = continuousOutputModel13.requiresDenseOutput();
        continuousOutputModel13.reset();
        double double19 = continuousOutputModel13.getFinalTime();
        double double20 = continuousOutputModel13.getFinalTime();
        continuousOutputModel13.reset();
        continuousOutputModel5.append(continuousOutputModel13);
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel13.setInterpolatedTime((double) 10L);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue(Double.isNaN(double20));
    }

    @Test
    public void test01015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01015");
        org.apache.commons.math.MathException mathException1 = new org.apache.commons.math.MathException("hi!");
        java.lang.String str2 = mathException1.getPattern();
        java.lang.String[] strArray10 = new java.lang.String[] { "hi!", "org.apache.commons.math.MathException: ", "hi!", "org.apache.commons.math.MathException: ", "", "" };
        org.apache.commons.math.ode.DerivativeException derivativeException11 = new org.apache.commons.math.ode.DerivativeException("", strArray10);
        java.io.IOException iOException17 = new java.io.IOException("hi!");
        org.apache.commons.math.ode.DerivativeException derivativeException18 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) iOException17);
        org.apache.commons.math.MathException mathException19 = new org.apache.commons.math.MathException("hi!", (java.lang.Throwable) iOException17);
        java.lang.Object[] objArray20 = mathException19.getArguments();
        org.apache.commons.math.MathException mathException21 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: ", objArray20);
        org.apache.commons.math.MathException mathException22 = new org.apache.commons.math.MathException("hi!", objArray20);
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel24 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double25 = continuousOutputModel24.getFinalTime();
        double double26 = continuousOutputModel24.getInitialTime();
        boolean boolean27 = continuousOutputModel24.requiresDenseOutput();
        double double28 = continuousOutputModel24.getInitialTime();
        java.io.IOException iOException31 = new java.io.IOException("hi!");
        org.apache.commons.math.ode.DerivativeException derivativeException32 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) iOException31);
        org.apache.commons.math.MathException mathException33 = new org.apache.commons.math.MathException("hi!", (java.lang.Throwable) iOException31);
        java.io.IOException iOException36 = new java.io.IOException("hi!");
        java.io.IOException iOException37 = new java.io.IOException("", (java.lang.Throwable) iOException36);
        org.apache.commons.math.ode.DerivativeException derivativeException38 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) iOException36);
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel40 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double41 = continuousOutputModel40.getFinalTime();
        double double42 = continuousOutputModel40.getInitialTime();
        java.lang.Object[] objArray43 = new java.lang.Object[] { double28, mathException33, iOException36, false, continuousOutputModel40 };
        java.lang.String[] strArray52 = new java.lang.String[] { "hi!", "org.apache.commons.math.MathException: ", "hi!", "org.apache.commons.math.MathException: ", "", "" };
        org.apache.commons.math.ode.DerivativeException derivativeException53 = new org.apache.commons.math.ode.DerivativeException("", strArray52);
        java.io.IOException iOException57 = new java.io.IOException("hi!");
        org.apache.commons.math.ode.DerivativeException derivativeException58 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) iOException57);
        org.apache.commons.math.MathException mathException59 = new org.apache.commons.math.MathException("hi!", (java.lang.Throwable) iOException57);
        java.lang.Object[] objArray60 = mathException59.getArguments();
        org.apache.commons.math.MathException mathException61 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: ", (java.lang.Throwable) mathException59);
        org.apache.commons.math.MathException mathException62 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: hi!", (java.lang.Object[]) strArray52, (java.lang.Throwable) mathException59);
        org.apache.commons.math.MathException mathException63 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: hi!", objArray43, (java.lang.Throwable) mathException62);
        org.apache.commons.math.MathException mathException64 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: ", objArray20, (java.lang.Throwable) mathException63);
        derivativeException11.addSuppressed((java.lang.Throwable) mathException63);
        org.apache.commons.math.MathException mathException66 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException63);
        java.io.IOException iOException67 = new java.io.IOException((java.lang.Throwable) mathException63);
        java.io.IOException iOException68 = new java.io.IOException((java.lang.Throwable) mathException63);
        mathException1.addSuppressed((java.lang.Throwable) iOException68);
        java.lang.Class<?> wildcardClass70 = mathException1.getClass();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!" + "'", str2, "hi!");
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertNotNull(objArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray60), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray60), "[]");
        org.junit.Assert.assertNotNull(wildcardClass70);
    }

    @Test
    public void test01016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01016");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean1 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean2 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        boolean boolean4 = continuousOutputModel0.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel5 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double6 = continuousOutputModel5.getFinalTime();
        double double7 = continuousOutputModel5.getInitialTime();
        boolean boolean8 = continuousOutputModel5.requiresDenseOutput();
        continuousOutputModel0.append(continuousOutputModel5);
        continuousOutputModel5.reset();
        double double11 = continuousOutputModel5.getInitialTime();
        double double12 = continuousOutputModel5.getFinalTime();
        continuousOutputModel5.reset();
        continuousOutputModel5.reset();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel15 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean16 = continuousOutputModel15.requiresDenseOutput();
        double double17 = continuousOutputModel15.getInitialTime();
        continuousOutputModel15.reset();
        continuousOutputModel15.reset();
        continuousOutputModel5.append(continuousOutputModel15);
        continuousOutputModel5.reset();
        // The following exception was thrown during execution in test generation
        try {
            double double22 = continuousOutputModel5.getInterpolatedTime();
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
    }

    @Test
    public void test01017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01017");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double1 = continuousOutputModel0.getFinalTime();
        double double2 = continuousOutputModel0.getInitialTime();
        double double3 = continuousOutputModel0.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel4 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double5 = continuousOutputModel4.getFinalTime();
        double double6 = continuousOutputModel4.getInitialTime();
        continuousOutputModel0.append(continuousOutputModel4);
        boolean boolean8 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean9 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        java.lang.Class<?> wildcardClass11 = continuousOutputModel0.getClass();
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test01018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01018");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean1 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean2 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        double double4 = continuousOutputModel0.getInitialTime();
        double double5 = continuousOutputModel0.getFinalTime();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator6 = null;
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel0.handleStep(stepInterpolator6, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
    }

    @Test
    public void test01019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01019");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double1 = continuousOutputModel0.getFinalTime();
        double double2 = continuousOutputModel0.getInitialTime();
        double double3 = continuousOutputModel0.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel4 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double5 = continuousOutputModel4.getFinalTime();
        double double6 = continuousOutputModel4.getInitialTime();
        continuousOutputModel0.append(continuousOutputModel4);
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel8 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean9 = continuousOutputModel8.requiresDenseOutput();
        double double10 = continuousOutputModel8.getInitialTime();
        double double11 = continuousOutputModel8.getInitialTime();
        continuousOutputModel0.append(continuousOutputModel8);
        boolean boolean13 = continuousOutputModel0.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel14 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean15 = continuousOutputModel14.requiresDenseOutput();
        boolean boolean16 = continuousOutputModel14.requiresDenseOutput();
        continuousOutputModel14.reset();
        boolean boolean18 = continuousOutputModel14.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel19 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean20 = continuousOutputModel19.requiresDenseOutput();
        double double21 = continuousOutputModel19.getInitialTime();
        boolean boolean22 = continuousOutputModel19.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel23 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean24 = continuousOutputModel23.requiresDenseOutput();
        boolean boolean25 = continuousOutputModel23.requiresDenseOutput();
        continuousOutputModel19.append(continuousOutputModel23);
        continuousOutputModel14.append(continuousOutputModel23);
        continuousOutputModel0.append(continuousOutputModel23);
        // The following exception was thrown during execution in test generation
        try {
            double double29 = continuousOutputModel23.getInterpolatedTime();
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
    }

    @Test
    public void test01020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01020");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean1 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean2 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        continuousOutputModel0.reset();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel5 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double6 = continuousOutputModel5.getFinalTime();
        double double7 = continuousOutputModel5.getInitialTime();
        boolean boolean8 = continuousOutputModel5.requiresDenseOutput();
        continuousOutputModel5.reset();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel10 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean11 = continuousOutputModel10.requiresDenseOutput();
        double double12 = continuousOutputModel10.getInitialTime();
        continuousOutputModel5.append(continuousOutputModel10);
        continuousOutputModel0.append(continuousOutputModel10);
        double double15 = continuousOutputModel0.getInitialTime();
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel0.setInterpolatedTime((double) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
    }

    @Test
    public void test01021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01021");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean1 = continuousOutputModel0.requiresDenseOutput();
        double double2 = continuousOutputModel0.getInitialTime();
        continuousOutputModel0.reset();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator4 = null;
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel0.handleStep(stepInterpolator4, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
    }

    @Test
    public void test01022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01022");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean1 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean2 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        boolean boolean4 = continuousOutputModel0.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel5 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double6 = continuousOutputModel5.getFinalTime();
        double double7 = continuousOutputModel5.getInitialTime();
        boolean boolean8 = continuousOutputModel5.requiresDenseOutput();
        continuousOutputModel0.append(continuousOutputModel5);
        double double10 = continuousOutputModel5.getInitialTime();
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel5.setInterpolatedTime((double) 1.0f);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
    }

    @Test
    public void test01023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01023");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double1 = continuousOutputModel0.getFinalTime();
        double double2 = continuousOutputModel0.getInitialTime();
        boolean boolean3 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        continuousOutputModel0.reset();
        continuousOutputModel0.reset();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel7 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean8 = continuousOutputModel7.requiresDenseOutput();
        double double9 = continuousOutputModel7.getInitialTime();
        boolean boolean10 = continuousOutputModel7.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel11 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean12 = continuousOutputModel11.requiresDenseOutput();
        boolean boolean13 = continuousOutputModel11.requiresDenseOutput();
        continuousOutputModel7.append(continuousOutputModel11);
        continuousOutputModel0.append(continuousOutputModel7);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray16 = continuousOutputModel0.getInterpolatedState();
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test01024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01024");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean1 = continuousOutputModel0.requiresDenseOutput();
        double double2 = continuousOutputModel0.getInitialTime();
        boolean boolean3 = continuousOutputModel0.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel4 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double5 = continuousOutputModel4.getFinalTime();
        double double6 = continuousOutputModel4.getInitialTime();
        boolean boolean7 = continuousOutputModel4.requiresDenseOutput();
        continuousOutputModel4.reset();
        boolean boolean9 = continuousOutputModel4.requiresDenseOutput();
        continuousOutputModel0.append(continuousOutputModel4);
        continuousOutputModel4.reset();
        double double12 = continuousOutputModel4.getInitialTime();
        boolean boolean13 = continuousOutputModel4.requiresDenseOutput();
        java.lang.Class<?> wildcardClass14 = continuousOutputModel4.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test01025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01025");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean1 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean2 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        boolean boolean4 = continuousOutputModel0.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel5 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double6 = continuousOutputModel5.getFinalTime();
        double double7 = continuousOutputModel5.getInitialTime();
        boolean boolean8 = continuousOutputModel5.requiresDenseOutput();
        continuousOutputModel0.append(continuousOutputModel5);
        double double10 = continuousOutputModel5.getInitialTime();
        continuousOutputModel5.reset();
        boolean boolean12 = continuousOutputModel5.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel13 = new org.apache.commons.math.ode.ContinuousOutputModel();
        continuousOutputModel13.reset();
        continuousOutputModel13.reset();
        continuousOutputModel5.append(continuousOutputModel13);
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel5.setInterpolatedTime((double) 100.0f);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test01026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01026");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double1 = continuousOutputModel0.getFinalTime();
        double double2 = continuousOutputModel0.getInitialTime();
        double double3 = continuousOutputModel0.getFinalTime();
        double double4 = continuousOutputModel0.getFinalTime();
        double double5 = continuousOutputModel0.getInitialTime();
        continuousOutputModel0.reset();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel7 = new org.apache.commons.math.ode.ContinuousOutputModel();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel8 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean9 = continuousOutputModel8.requiresDenseOutput();
        boolean boolean10 = continuousOutputModel8.requiresDenseOutput();
        double double11 = continuousOutputModel8.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel12 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean13 = continuousOutputModel12.requiresDenseOutput();
        continuousOutputModel8.append(continuousOutputModel12);
        continuousOutputModel7.append(continuousOutputModel12);
        continuousOutputModel12.reset();
        double double17 = continuousOutputModel12.getFinalTime();
        continuousOutputModel0.append(continuousOutputModel12);
        continuousOutputModel0.reset();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator20 = null;
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel0.handleStep(stepInterpolator20, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
    }

    @Test
    public void test01027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01027");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel1 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean2 = continuousOutputModel1.requiresDenseOutput();
        boolean boolean3 = continuousOutputModel1.requiresDenseOutput();
        double double4 = continuousOutputModel1.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel5 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean6 = continuousOutputModel5.requiresDenseOutput();
        continuousOutputModel1.append(continuousOutputModel5);
        continuousOutputModel0.append(continuousOutputModel5);
        boolean boolean9 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean10 = continuousOutputModel0.requiresDenseOutput();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test01028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01028");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean1 = continuousOutputModel0.requiresDenseOutput();
        double double2 = continuousOutputModel0.getInitialTime();
        boolean boolean3 = continuousOutputModel0.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel4 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double5 = continuousOutputModel4.getFinalTime();
        double double6 = continuousOutputModel4.getInitialTime();
        boolean boolean7 = continuousOutputModel4.requiresDenseOutput();
        continuousOutputModel4.reset();
        boolean boolean9 = continuousOutputModel4.requiresDenseOutput();
        continuousOutputModel0.append(continuousOutputModel4);
        org.apache.commons.math.ode.StepInterpolator stepInterpolator11 = null;
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel0.handleStep(stepInterpolator11, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test01029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01029");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean1 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean2 = continuousOutputModel0.requiresDenseOutput();
        double double3 = continuousOutputModel0.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel4 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean5 = continuousOutputModel4.requiresDenseOutput();
        continuousOutputModel0.append(continuousOutputModel4);
        continuousOutputModel0.reset();
        boolean boolean8 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean9 = continuousOutputModel0.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel10 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean11 = continuousOutputModel10.requiresDenseOutput();
        boolean boolean12 = continuousOutputModel10.requiresDenseOutput();
        continuousOutputModel10.reset();
        boolean boolean14 = continuousOutputModel10.requiresDenseOutput();
        double double15 = continuousOutputModel10.getFinalTime();
        boolean boolean16 = continuousOutputModel10.requiresDenseOutput();
        continuousOutputModel0.append(continuousOutputModel10);
        continuousOutputModel10.reset();
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel10.setInterpolatedTime((double) 100.0f);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test01030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01030");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double1 = continuousOutputModel0.getFinalTime();
        double double2 = continuousOutputModel0.getInitialTime();
        double double3 = continuousOutputModel0.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel4 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double5 = continuousOutputModel4.getFinalTime();
        double double6 = continuousOutputModel4.getInitialTime();
        continuousOutputModel0.append(continuousOutputModel4);
        double double8 = continuousOutputModel0.getFinalTime();
        boolean boolean9 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean10 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator12 = null;
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel0.handleStep(stepInterpolator12, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test01031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01031");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean1 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean2 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        continuousOutputModel0.reset();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel5 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double6 = continuousOutputModel5.getFinalTime();
        double double7 = continuousOutputModel5.getInitialTime();
        boolean boolean8 = continuousOutputModel5.requiresDenseOutput();
        continuousOutputModel5.reset();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel10 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean11 = continuousOutputModel10.requiresDenseOutput();
        double double12 = continuousOutputModel10.getInitialTime();
        continuousOutputModel5.append(continuousOutputModel10);
        continuousOutputModel0.append(continuousOutputModel10);
        boolean boolean15 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean16 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        double double18 = continuousOutputModel0.getInitialTime();
        // The following exception was thrown during execution in test generation
        try {
            double double19 = continuousOutputModel0.getInterpolatedTime();
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
    }

    @Test
    public void test01032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01032");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double1 = continuousOutputModel0.getFinalTime();
        double double2 = continuousOutputModel0.getInitialTime();
        boolean boolean3 = continuousOutputModel0.requiresDenseOutput();
        double double4 = continuousOutputModel0.getInitialTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel5 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean6 = continuousOutputModel5.requiresDenseOutput();
        boolean boolean7 = continuousOutputModel5.requiresDenseOutput();
        continuousOutputModel5.reset();
        boolean boolean9 = continuousOutputModel5.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel10 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double11 = continuousOutputModel10.getFinalTime();
        double double12 = continuousOutputModel10.getInitialTime();
        boolean boolean13 = continuousOutputModel10.requiresDenseOutput();
        continuousOutputModel5.append(continuousOutputModel10);
        continuousOutputModel0.append(continuousOutputModel5);
        boolean boolean16 = continuousOutputModel0.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel17 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean18 = continuousOutputModel17.requiresDenseOutput();
        continuousOutputModel17.reset();
        boolean boolean20 = continuousOutputModel17.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel21 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean22 = continuousOutputModel21.requiresDenseOutput();
        boolean boolean23 = continuousOutputModel21.requiresDenseOutput();
        continuousOutputModel21.reset();
        boolean boolean25 = continuousOutputModel21.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel26 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double27 = continuousOutputModel26.getFinalTime();
        double double28 = continuousOutputModel26.getInitialTime();
        boolean boolean29 = continuousOutputModel26.requiresDenseOutput();
        continuousOutputModel21.append(continuousOutputModel26);
        boolean boolean31 = continuousOutputModel26.requiresDenseOutput();
        double double32 = continuousOutputModel26.getFinalTime();
        continuousOutputModel26.reset();
        double double34 = continuousOutputModel26.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel35 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean36 = continuousOutputModel35.requiresDenseOutput();
        boolean boolean37 = continuousOutputModel35.requiresDenseOutput();
        continuousOutputModel35.reset();
        boolean boolean39 = continuousOutputModel35.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel40 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double41 = continuousOutputModel40.getFinalTime();
        double double42 = continuousOutputModel40.getInitialTime();
        boolean boolean43 = continuousOutputModel40.requiresDenseOutput();
        continuousOutputModel35.append(continuousOutputModel40);
        boolean boolean45 = continuousOutputModel40.requiresDenseOutput();
        double double46 = continuousOutputModel40.getFinalTime();
        continuousOutputModel40.reset();
        double double48 = continuousOutputModel40.getInitialTime();
        boolean boolean49 = continuousOutputModel40.requiresDenseOutput();
        continuousOutputModel26.append(continuousOutputModel40);
        boolean boolean51 = continuousOutputModel26.requiresDenseOutput();
        continuousOutputModel17.append(continuousOutputModel26);
        continuousOutputModel26.reset();
        continuousOutputModel0.append(continuousOutputModel26);
        continuousOutputModel26.reset();
        continuousOutputModel26.reset();
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel26.setInterpolatedTime(1.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
    }

    @Test
    public void test01033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01033");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean1 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean2 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        boolean boolean4 = continuousOutputModel0.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel5 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double6 = continuousOutputModel5.getFinalTime();
        double double7 = continuousOutputModel5.getInitialTime();
        boolean boolean8 = continuousOutputModel5.requiresDenseOutput();
        continuousOutputModel0.append(continuousOutputModel5);
        double double10 = continuousOutputModel5.getInitialTime();
        boolean boolean11 = continuousOutputModel5.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel12 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double13 = continuousOutputModel12.getFinalTime();
        double double14 = continuousOutputModel12.getInitialTime();
        double double15 = continuousOutputModel12.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel16 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double17 = continuousOutputModel16.getFinalTime();
        double double18 = continuousOutputModel16.getInitialTime();
        continuousOutputModel12.append(continuousOutputModel16);
        double double20 = continuousOutputModel12.getFinalTime();
        boolean boolean21 = continuousOutputModel12.requiresDenseOutput();
        boolean boolean22 = continuousOutputModel12.requiresDenseOutput();
        double double23 = continuousOutputModel12.getFinalTime();
        continuousOutputModel5.append(continuousOutputModel12);
        continuousOutputModel12.reset();
        // The following exception was thrown during execution in test generation
        try {
            double double26 = continuousOutputModel12.getInterpolatedTime();
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
    }

    @Test
    public void test01034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01034");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double1 = continuousOutputModel0.getFinalTime();
        double double2 = continuousOutputModel0.getInitialTime();
        boolean boolean3 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        boolean boolean5 = continuousOutputModel0.requiresDenseOutput();
        double double6 = continuousOutputModel0.getInitialTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel7 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double8 = continuousOutputModel7.getFinalTime();
        double double9 = continuousOutputModel7.getInitialTime();
        boolean boolean10 = continuousOutputModel7.requiresDenseOutput();
        double double11 = continuousOutputModel7.getInitialTime();
        continuousOutputModel7.reset();
        boolean boolean13 = continuousOutputModel7.requiresDenseOutput();
        double double14 = continuousOutputModel7.getInitialTime();
        continuousOutputModel0.append(continuousOutputModel7);
        continuousOutputModel0.reset();
        double double17 = continuousOutputModel0.getFinalTime();
        // The following exception was thrown during execution in test generation
        try {
            double double18 = continuousOutputModel0.getInterpolatedTime();
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
    }

    @Test
    public void test01035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01035");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double1 = continuousOutputModel0.getFinalTime();
        double double2 = continuousOutputModel0.getInitialTime();
        double double3 = continuousOutputModel0.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel4 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double5 = continuousOutputModel4.getFinalTime();
        double double6 = continuousOutputModel4.getInitialTime();
        continuousOutputModel0.append(continuousOutputModel4);
        double double8 = continuousOutputModel0.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel9 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double10 = continuousOutputModel9.getFinalTime();
        double double11 = continuousOutputModel9.getInitialTime();
        boolean boolean12 = continuousOutputModel9.requiresDenseOutput();
        double double13 = continuousOutputModel9.getInitialTime();
        continuousOutputModel9.reset();
        boolean boolean15 = continuousOutputModel9.requiresDenseOutput();
        continuousOutputModel0.append(continuousOutputModel9);
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel17 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean18 = continuousOutputModel17.requiresDenseOutput();
        double double19 = continuousOutputModel17.getInitialTime();
        boolean boolean20 = continuousOutputModel17.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel21 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double22 = continuousOutputModel21.getFinalTime();
        double double23 = continuousOutputModel21.getInitialTime();
        boolean boolean24 = continuousOutputModel21.requiresDenseOutput();
        continuousOutputModel21.reset();
        boolean boolean26 = continuousOutputModel21.requiresDenseOutput();
        continuousOutputModel17.append(continuousOutputModel21);
        continuousOutputModel17.reset();
        continuousOutputModel9.append(continuousOutputModel17);
        double double30 = continuousOutputModel17.getInitialTime();
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel17.setInterpolatedTime((double) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
    }

    @Test
    public void test01036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01036");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel1 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean2 = continuousOutputModel1.requiresDenseOutput();
        boolean boolean3 = continuousOutputModel1.requiresDenseOutput();
        double double4 = continuousOutputModel1.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel5 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean6 = continuousOutputModel5.requiresDenseOutput();
        continuousOutputModel1.append(continuousOutputModel5);
        continuousOutputModel0.append(continuousOutputModel5);
        boolean boolean9 = continuousOutputModel5.requiresDenseOutput();
        double double10 = continuousOutputModel5.getInitialTime();
        continuousOutputModel5.reset();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel12 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double13 = continuousOutputModel12.getFinalTime();
        double double14 = continuousOutputModel12.getInitialTime();
        double double15 = continuousOutputModel12.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel16 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double17 = continuousOutputModel16.getFinalTime();
        double double18 = continuousOutputModel16.getInitialTime();
        continuousOutputModel12.append(continuousOutputModel16);
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel20 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean21 = continuousOutputModel20.requiresDenseOutput();
        double double22 = continuousOutputModel20.getInitialTime();
        double double23 = continuousOutputModel20.getInitialTime();
        continuousOutputModel12.append(continuousOutputModel20);
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel25 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean26 = continuousOutputModel25.requiresDenseOutput();
        boolean boolean27 = continuousOutputModel25.requiresDenseOutput();
        double double28 = continuousOutputModel25.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel29 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean30 = continuousOutputModel29.requiresDenseOutput();
        boolean boolean31 = continuousOutputModel29.requiresDenseOutput();
        continuousOutputModel29.reset();
        continuousOutputModel29.reset();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel34 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double35 = continuousOutputModel34.getFinalTime();
        double double36 = continuousOutputModel34.getInitialTime();
        boolean boolean37 = continuousOutputModel34.requiresDenseOutput();
        continuousOutputModel34.reset();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel39 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean40 = continuousOutputModel39.requiresDenseOutput();
        double double41 = continuousOutputModel39.getInitialTime();
        continuousOutputModel34.append(continuousOutputModel39);
        continuousOutputModel29.append(continuousOutputModel39);
        boolean boolean44 = continuousOutputModel29.requiresDenseOutput();
        boolean boolean45 = continuousOutputModel29.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel46 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean47 = continuousOutputModel46.requiresDenseOutput();
        double double48 = continuousOutputModel46.getInitialTime();
        boolean boolean49 = continuousOutputModel46.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel50 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double51 = continuousOutputModel50.getFinalTime();
        double double52 = continuousOutputModel50.getInitialTime();
        boolean boolean53 = continuousOutputModel50.requiresDenseOutput();
        continuousOutputModel50.reset();
        boolean boolean55 = continuousOutputModel50.requiresDenseOutput();
        continuousOutputModel46.append(continuousOutputModel50);
        continuousOutputModel46.reset();
        double double58 = continuousOutputModel46.getInitialTime();
        continuousOutputModel29.append(continuousOutputModel46);
        continuousOutputModel25.append(continuousOutputModel46);
        continuousOutputModel20.append(continuousOutputModel46);
        continuousOutputModel5.append(continuousOutputModel20);
        boolean boolean63 = continuousOutputModel20.requiresDenseOutput();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator64 = null;
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel20.handleStep(stepInterpolator64, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertTrue(Double.isNaN(double52));
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double58));
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
    }

    @Test
    public void test01037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01037");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean1 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean2 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        boolean boolean4 = continuousOutputModel0.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel5 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double6 = continuousOutputModel5.getFinalTime();
        double double7 = continuousOutputModel5.getInitialTime();
        boolean boolean8 = continuousOutputModel5.requiresDenseOutput();
        continuousOutputModel0.append(continuousOutputModel5);
        continuousOutputModel5.reset();
        double double11 = continuousOutputModel5.getInitialTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel12 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean13 = continuousOutputModel12.requiresDenseOutput();
        boolean boolean14 = continuousOutputModel12.requiresDenseOutput();
        continuousOutputModel12.reset();
        boolean boolean16 = continuousOutputModel12.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel17 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double18 = continuousOutputModel17.getFinalTime();
        double double19 = continuousOutputModel17.getInitialTime();
        boolean boolean20 = continuousOutputModel17.requiresDenseOutput();
        continuousOutputModel12.append(continuousOutputModel17);
        boolean boolean22 = continuousOutputModel17.requiresDenseOutput();
        double double23 = continuousOutputModel17.getFinalTime();
        continuousOutputModel17.reset();
        continuousOutputModel5.append(continuousOutputModel17);
        double double26 = continuousOutputModel5.getInitialTime();
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel5.setInterpolatedTime((double) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue(Double.isNaN(double26));
    }

    @Test
    public void test01038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01038");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel1 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean2 = continuousOutputModel1.requiresDenseOutput();
        boolean boolean3 = continuousOutputModel1.requiresDenseOutput();
        double double4 = continuousOutputModel1.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel5 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean6 = continuousOutputModel5.requiresDenseOutput();
        continuousOutputModel1.append(continuousOutputModel5);
        continuousOutputModel0.append(continuousOutputModel5);
        boolean boolean9 = continuousOutputModel5.requiresDenseOutput();
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel5.setInterpolatedTime((double) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test01039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01039");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean1 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean2 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        continuousOutputModel0.reset();
        boolean boolean5 = continuousOutputModel0.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel6 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double7 = continuousOutputModel6.getFinalTime();
        double double8 = continuousOutputModel6.getInitialTime();
        double double9 = continuousOutputModel6.getFinalTime();
        boolean boolean10 = continuousOutputModel6.requiresDenseOutput();
        continuousOutputModel0.append(continuousOutputModel6);
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel12 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean13 = continuousOutputModel12.requiresDenseOutput();
        boolean boolean14 = continuousOutputModel12.requiresDenseOutput();
        continuousOutputModel12.reset();
        continuousOutputModel12.reset();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel17 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double18 = continuousOutputModel17.getFinalTime();
        double double19 = continuousOutputModel17.getInitialTime();
        boolean boolean20 = continuousOutputModel17.requiresDenseOutput();
        continuousOutputModel17.reset();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel22 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean23 = continuousOutputModel22.requiresDenseOutput();
        double double24 = continuousOutputModel22.getInitialTime();
        continuousOutputModel17.append(continuousOutputModel22);
        continuousOutputModel12.append(continuousOutputModel22);
        continuousOutputModel12.reset();
        boolean boolean28 = continuousOutputModel12.requiresDenseOutput();
        double double29 = continuousOutputModel12.getFinalTime();
        continuousOutputModel0.append(continuousOutputModel12);
        org.apache.commons.math.ode.StepInterpolator stepInterpolator31 = null;
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel12.handleStep(stepInterpolator31, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double29));
    }

    @Test
    public void test01040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01040");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double1 = continuousOutputModel0.getFinalTime();
        double double2 = continuousOutputModel0.getInitialTime();
        double double3 = continuousOutputModel0.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel4 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double5 = continuousOutputModel4.getFinalTime();
        double double6 = continuousOutputModel4.getInitialTime();
        continuousOutputModel0.append(continuousOutputModel4);
        boolean boolean8 = continuousOutputModel0.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel9 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double10 = continuousOutputModel9.getFinalTime();
        double double11 = continuousOutputModel9.getInitialTime();
        boolean boolean12 = continuousOutputModel9.requiresDenseOutput();
        continuousOutputModel9.reset();
        boolean boolean14 = continuousOutputModel9.requiresDenseOutput();
        double double15 = continuousOutputModel9.getInitialTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel16 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double17 = continuousOutputModel16.getFinalTime();
        double double18 = continuousOutputModel16.getInitialTime();
        boolean boolean19 = continuousOutputModel16.requiresDenseOutput();
        double double20 = continuousOutputModel16.getInitialTime();
        continuousOutputModel16.reset();
        boolean boolean22 = continuousOutputModel16.requiresDenseOutput();
        double double23 = continuousOutputModel16.getInitialTime();
        continuousOutputModel9.append(continuousOutputModel16);
        continuousOutputModel0.append(continuousOutputModel9);
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel9.setInterpolatedTime((double) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
    }

    @Test
    public void test01041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01041");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double1 = continuousOutputModel0.getFinalTime();
        double double2 = continuousOutputModel0.getInitialTime();
        boolean boolean3 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel5 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean6 = continuousOutputModel5.requiresDenseOutput();
        double double7 = continuousOutputModel5.getInitialTime();
        continuousOutputModel0.append(continuousOutputModel5);
        boolean boolean9 = continuousOutputModel5.requiresDenseOutput();
        boolean boolean10 = continuousOutputModel5.requiresDenseOutput();
        boolean boolean11 = continuousOutputModel5.requiresDenseOutput();
        continuousOutputModel5.reset();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel13 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean14 = continuousOutputModel13.requiresDenseOutput();
        double double15 = continuousOutputModel13.getInitialTime();
        double double16 = continuousOutputModel13.getFinalTime();
        boolean boolean17 = continuousOutputModel13.requiresDenseOutput();
        continuousOutputModel13.reset();
        double double19 = continuousOutputModel13.getFinalTime();
        double double20 = continuousOutputModel13.getFinalTime();
        continuousOutputModel13.reset();
        continuousOutputModel5.append(continuousOutputModel13);
        org.apache.commons.math.ode.StepInterpolator stepInterpolator23 = null;
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel13.handleStep(stepInterpolator23, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue(Double.isNaN(double20));
    }

    @Test
    public void test01042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01042");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double1 = continuousOutputModel0.getFinalTime();
        double double2 = continuousOutputModel0.getInitialTime();
        boolean boolean3 = continuousOutputModel0.requiresDenseOutput();
        double double4 = continuousOutputModel0.getInitialTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel5 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean6 = continuousOutputModel5.requiresDenseOutput();
        boolean boolean7 = continuousOutputModel5.requiresDenseOutput();
        continuousOutputModel5.reset();
        boolean boolean9 = continuousOutputModel5.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel10 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double11 = continuousOutputModel10.getFinalTime();
        double double12 = continuousOutputModel10.getInitialTime();
        boolean boolean13 = continuousOutputModel10.requiresDenseOutput();
        continuousOutputModel5.append(continuousOutputModel10);
        continuousOutputModel0.append(continuousOutputModel5);
        boolean boolean16 = continuousOutputModel0.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel17 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean18 = continuousOutputModel17.requiresDenseOutput();
        continuousOutputModel17.reset();
        boolean boolean20 = continuousOutputModel17.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel21 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean22 = continuousOutputModel21.requiresDenseOutput();
        boolean boolean23 = continuousOutputModel21.requiresDenseOutput();
        continuousOutputModel21.reset();
        boolean boolean25 = continuousOutputModel21.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel26 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double27 = continuousOutputModel26.getFinalTime();
        double double28 = continuousOutputModel26.getInitialTime();
        boolean boolean29 = continuousOutputModel26.requiresDenseOutput();
        continuousOutputModel21.append(continuousOutputModel26);
        boolean boolean31 = continuousOutputModel26.requiresDenseOutput();
        double double32 = continuousOutputModel26.getFinalTime();
        continuousOutputModel26.reset();
        double double34 = continuousOutputModel26.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel35 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean36 = continuousOutputModel35.requiresDenseOutput();
        boolean boolean37 = continuousOutputModel35.requiresDenseOutput();
        continuousOutputModel35.reset();
        boolean boolean39 = continuousOutputModel35.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel40 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double41 = continuousOutputModel40.getFinalTime();
        double double42 = continuousOutputModel40.getInitialTime();
        boolean boolean43 = continuousOutputModel40.requiresDenseOutput();
        continuousOutputModel35.append(continuousOutputModel40);
        boolean boolean45 = continuousOutputModel40.requiresDenseOutput();
        double double46 = continuousOutputModel40.getFinalTime();
        continuousOutputModel40.reset();
        double double48 = continuousOutputModel40.getInitialTime();
        boolean boolean49 = continuousOutputModel40.requiresDenseOutput();
        continuousOutputModel26.append(continuousOutputModel40);
        boolean boolean51 = continuousOutputModel26.requiresDenseOutput();
        continuousOutputModel17.append(continuousOutputModel26);
        continuousOutputModel26.reset();
        continuousOutputModel0.append(continuousOutputModel26);
        boolean boolean55 = continuousOutputModel0.requiresDenseOutput();
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel0.setInterpolatedTime(Double.NaN);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
    }

    @Test
    public void test01043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01043");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double1 = continuousOutputModel0.getFinalTime();
        continuousOutputModel0.reset();
        continuousOutputModel0.reset();
        boolean boolean4 = continuousOutputModel0.requiresDenseOutput();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator5 = null;
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel0.handleStep(stepInterpolator5, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
    }

    @Test
    public void test01044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01044");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean1 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean2 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        boolean boolean4 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel6 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double7 = continuousOutputModel6.getFinalTime();
        continuousOutputModel6.reset();
        continuousOutputModel0.append(continuousOutputModel6);
        continuousOutputModel6.reset();
        boolean boolean11 = continuousOutputModel6.requiresDenseOutput();
        continuousOutputModel6.reset();
        boolean boolean13 = continuousOutputModel6.requiresDenseOutput();
        continuousOutputModel6.reset();
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel6.setInterpolatedTime((double) 100.0f);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test01045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01045");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean1 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean2 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        continuousOutputModel0.reset();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel5 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double6 = continuousOutputModel5.getFinalTime();
        double double7 = continuousOutputModel5.getInitialTime();
        boolean boolean8 = continuousOutputModel5.requiresDenseOutput();
        continuousOutputModel5.reset();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel10 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean11 = continuousOutputModel10.requiresDenseOutput();
        double double12 = continuousOutputModel10.getInitialTime();
        continuousOutputModel5.append(continuousOutputModel10);
        continuousOutputModel0.append(continuousOutputModel10);
        boolean boolean15 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean16 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        double double18 = continuousOutputModel0.getInitialTime();
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel0.setInterpolatedTime((double) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
    }

    @Test
    public void test01046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01046");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean1 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean2 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        boolean boolean4 = continuousOutputModel0.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel5 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double6 = continuousOutputModel5.getFinalTime();
        double double7 = continuousOutputModel5.getInitialTime();
        boolean boolean8 = continuousOutputModel5.requiresDenseOutput();
        continuousOutputModel0.append(continuousOutputModel5);
        continuousOutputModel5.reset();
        double double11 = continuousOutputModel5.getInitialTime();
        double double12 = continuousOutputModel5.getFinalTime();
        continuousOutputModel5.reset();
        double double14 = continuousOutputModel5.getInitialTime();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator15 = null;
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel5.handleStep(stepInterpolator15, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
    }

    @Test
    public void test01047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01047");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double1 = continuousOutputModel0.getFinalTime();
        double double2 = continuousOutputModel0.getInitialTime();
        double double3 = continuousOutputModel0.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel4 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double5 = continuousOutputModel4.getFinalTime();
        double double6 = continuousOutputModel4.getInitialTime();
        continuousOutputModel0.append(continuousOutputModel4);
        continuousOutputModel4.reset();
        boolean boolean9 = continuousOutputModel4.requiresDenseOutput();
        double double10 = continuousOutputModel4.getFinalTime();
        double double11 = continuousOutputModel4.getInitialTime();
        boolean boolean12 = continuousOutputModel4.requiresDenseOutput();
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel4.setInterpolatedTime((double) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test01048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01048");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double1 = continuousOutputModel0.getFinalTime();
        double double2 = continuousOutputModel0.getInitialTime();
        boolean boolean3 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel5 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean6 = continuousOutputModel5.requiresDenseOutput();
        double double7 = continuousOutputModel5.getInitialTime();
        continuousOutputModel0.append(continuousOutputModel5);
        org.apache.commons.math.ode.StepInterpolator stepInterpolator9 = null;
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel5.handleStep(stepInterpolator9, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
    }

    @Test
    public void test01049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01049");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean1 = continuousOutputModel0.requiresDenseOutput();
        double double2 = continuousOutputModel0.getInitialTime();
        boolean boolean3 = continuousOutputModel0.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel4 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double5 = continuousOutputModel4.getFinalTime();
        double double6 = continuousOutputModel4.getInitialTime();
        boolean boolean7 = continuousOutputModel4.requiresDenseOutput();
        continuousOutputModel4.reset();
        boolean boolean9 = continuousOutputModel4.requiresDenseOutput();
        continuousOutputModel0.append(continuousOutputModel4);
        continuousOutputModel4.reset();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator12 = null;
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel4.handleStep(stepInterpolator12, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test01050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01050");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean1 = continuousOutputModel0.requiresDenseOutput();
        double double2 = continuousOutputModel0.getInitialTime();
        boolean boolean3 = continuousOutputModel0.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel4 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double5 = continuousOutputModel4.getFinalTime();
        double double6 = continuousOutputModel4.getInitialTime();
        boolean boolean7 = continuousOutputModel4.requiresDenseOutput();
        continuousOutputModel4.reset();
        boolean boolean9 = continuousOutputModel4.requiresDenseOutput();
        continuousOutputModel0.append(continuousOutputModel4);
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel11 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double12 = continuousOutputModel11.getFinalTime();
        double double13 = continuousOutputModel11.getInitialTime();
        boolean boolean14 = continuousOutputModel11.requiresDenseOutput();
        continuousOutputModel11.reset();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel16 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean17 = continuousOutputModel16.requiresDenseOutput();
        double double18 = continuousOutputModel16.getInitialTime();
        continuousOutputModel11.append(continuousOutputModel16);
        continuousOutputModel0.append(continuousOutputModel11);
        boolean boolean21 = continuousOutputModel0.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel22 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double23 = continuousOutputModel22.getFinalTime();
        double double24 = continuousOutputModel22.getInitialTime();
        double double25 = continuousOutputModel22.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel26 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double27 = continuousOutputModel26.getFinalTime();
        double double28 = continuousOutputModel26.getInitialTime();
        continuousOutputModel22.append(continuousOutputModel26);
        double double30 = continuousOutputModel22.getFinalTime();
        boolean boolean31 = continuousOutputModel22.requiresDenseOutput();
        boolean boolean32 = continuousOutputModel22.requiresDenseOutput();
        double double33 = continuousOutputModel22.getFinalTime();
        continuousOutputModel0.append(continuousOutputModel22);
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel35 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean36 = continuousOutputModel35.requiresDenseOutput();
        boolean boolean37 = continuousOutputModel35.requiresDenseOutput();
        continuousOutputModel35.reset();
        continuousOutputModel35.reset();
        boolean boolean40 = continuousOutputModel35.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel41 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double42 = continuousOutputModel41.getFinalTime();
        double double43 = continuousOutputModel41.getInitialTime();
        double double44 = continuousOutputModel41.getFinalTime();
        boolean boolean45 = continuousOutputModel41.requiresDenseOutput();
        continuousOutputModel35.append(continuousOutputModel41);
        boolean boolean47 = continuousOutputModel41.requiresDenseOutput();
        continuousOutputModel0.append(continuousOutputModel41);
        // The following exception was thrown during execution in test generation
        try {
            double double49 = continuousOutputModel0.getInterpolatedTime();
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
    }

    @Test
    public void test01051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01051");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double1 = continuousOutputModel0.getFinalTime();
        double double2 = continuousOutputModel0.getInitialTime();
        boolean boolean3 = continuousOutputModel0.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel4 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean5 = continuousOutputModel4.requiresDenseOutput();
        double double6 = continuousOutputModel4.getInitialTime();
        boolean boolean7 = continuousOutputModel4.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel8 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double9 = continuousOutputModel8.getFinalTime();
        double double10 = continuousOutputModel8.getInitialTime();
        boolean boolean11 = continuousOutputModel8.requiresDenseOutput();
        continuousOutputModel8.reset();
        boolean boolean13 = continuousOutputModel8.requiresDenseOutput();
        continuousOutputModel4.append(continuousOutputModel8);
        continuousOutputModel0.append(continuousOutputModel4);
        double double16 = continuousOutputModel4.getInitialTime();
        continuousOutputModel4.reset();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel18 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean19 = continuousOutputModel18.requiresDenseOutput();
        double double20 = continuousOutputModel18.getInitialTime();
        double double21 = continuousOutputModel18.getFinalTime();
        boolean boolean22 = continuousOutputModel18.requiresDenseOutput();
        continuousOutputModel18.reset();
        double double24 = continuousOutputModel18.getFinalTime();
        continuousOutputModel4.append(continuousOutputModel18);
        org.apache.commons.math.ode.StepInterpolator stepInterpolator26 = null;
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel18.handleStep(stepInterpolator26, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
    }

    @Test
    public void test01052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01052");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean1 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean2 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        boolean boolean4 = continuousOutputModel0.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel5 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double6 = continuousOutputModel5.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel7 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean8 = continuousOutputModel7.requiresDenseOutput();
        double double9 = continuousOutputModel7.getInitialTime();
        boolean boolean10 = continuousOutputModel7.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel11 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double12 = continuousOutputModel11.getFinalTime();
        double double13 = continuousOutputModel11.getInitialTime();
        boolean boolean14 = continuousOutputModel11.requiresDenseOutput();
        continuousOutputModel11.reset();
        boolean boolean16 = continuousOutputModel11.requiresDenseOutput();
        continuousOutputModel7.append(continuousOutputModel11);
        continuousOutputModel5.append(continuousOutputModel7);
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel19 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean20 = continuousOutputModel19.requiresDenseOutput();
        boolean boolean21 = continuousOutputModel19.requiresDenseOutput();
        continuousOutputModel19.reset();
        boolean boolean23 = continuousOutputModel19.requiresDenseOutput();
        boolean boolean24 = continuousOutputModel19.requiresDenseOutput();
        continuousOutputModel5.append(continuousOutputModel19);
        continuousOutputModel0.append(continuousOutputModel19);
        boolean boolean27 = continuousOutputModel19.requiresDenseOutput();
        continuousOutputModel19.reset();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel29 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean30 = continuousOutputModel29.requiresDenseOutput();
        boolean boolean31 = continuousOutputModel29.requiresDenseOutput();
        continuousOutputModel29.reset();
        boolean boolean33 = continuousOutputModel29.requiresDenseOutput();
        continuousOutputModel29.reset();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel35 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double36 = continuousOutputModel35.getFinalTime();
        continuousOutputModel35.reset();
        continuousOutputModel29.append(continuousOutputModel35);
        double double39 = continuousOutputModel29.getInitialTime();
        boolean boolean40 = continuousOutputModel29.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel41 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double42 = continuousOutputModel41.getFinalTime();
        double double43 = continuousOutputModel41.getInitialTime();
        double double44 = continuousOutputModel41.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel45 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double46 = continuousOutputModel45.getFinalTime();
        double double47 = continuousOutputModel45.getInitialTime();
        continuousOutputModel41.append(continuousOutputModel45);
        double double49 = continuousOutputModel41.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel50 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double51 = continuousOutputModel50.getFinalTime();
        double double52 = continuousOutputModel50.getInitialTime();
        boolean boolean53 = continuousOutputModel50.requiresDenseOutput();
        double double54 = continuousOutputModel50.getInitialTime();
        continuousOutputModel50.reset();
        boolean boolean56 = continuousOutputModel50.requiresDenseOutput();
        continuousOutputModel41.append(continuousOutputModel50);
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel58 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean59 = continuousOutputModel58.requiresDenseOutput();
        double double60 = continuousOutputModel58.getInitialTime();
        boolean boolean61 = continuousOutputModel58.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel62 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double63 = continuousOutputModel62.getFinalTime();
        double double64 = continuousOutputModel62.getInitialTime();
        boolean boolean65 = continuousOutputModel62.requiresDenseOutput();
        continuousOutputModel62.reset();
        boolean boolean67 = continuousOutputModel62.requiresDenseOutput();
        continuousOutputModel58.append(continuousOutputModel62);
        continuousOutputModel58.reset();
        continuousOutputModel50.append(continuousOutputModel58);
        continuousOutputModel29.append(continuousOutputModel50);
        continuousOutputModel19.append(continuousOutputModel29);
        boolean boolean73 = continuousOutputModel19.requiresDenseOutput();
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel19.setInterpolatedTime(100.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertTrue(Double.isNaN(double52));
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double60));
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double63));
        org.junit.Assert.assertTrue(Double.isNaN(double64));
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
    }

    @Test
    public void test01053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01053");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double1 = continuousOutputModel0.getFinalTime();
        double double2 = continuousOutputModel0.getInitialTime();
        double double3 = continuousOutputModel0.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel4 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double5 = continuousOutputModel4.getFinalTime();
        double double6 = continuousOutputModel4.getInitialTime();
        continuousOutputModel0.append(continuousOutputModel4);
        double double8 = continuousOutputModel0.getInitialTime();
        double double9 = continuousOutputModel0.getFinalTime();
        boolean boolean10 = continuousOutputModel0.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel11 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean12 = continuousOutputModel11.requiresDenseOutput();
        double double13 = continuousOutputModel11.getInitialTime();
        boolean boolean14 = continuousOutputModel11.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel15 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double16 = continuousOutputModel15.getFinalTime();
        double double17 = continuousOutputModel15.getInitialTime();
        boolean boolean18 = continuousOutputModel15.requiresDenseOutput();
        continuousOutputModel15.reset();
        boolean boolean20 = continuousOutputModel15.requiresDenseOutput();
        continuousOutputModel11.append(continuousOutputModel15);
        continuousOutputModel15.reset();
        continuousOutputModel15.reset();
        continuousOutputModel15.reset();
        continuousOutputModel15.reset();
        boolean boolean26 = continuousOutputModel15.requiresDenseOutput();
        continuousOutputModel0.append(continuousOutputModel15);
        boolean boolean28 = continuousOutputModel0.requiresDenseOutput();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator29 = null;
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel0.handleStep(stepInterpolator29, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
    }

    @Test
    public void test01054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01054");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean1 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        boolean boolean3 = continuousOutputModel0.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel4 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean5 = continuousOutputModel4.requiresDenseOutput();
        boolean boolean6 = continuousOutputModel4.requiresDenseOutput();
        continuousOutputModel4.reset();
        boolean boolean8 = continuousOutputModel4.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel9 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double10 = continuousOutputModel9.getFinalTime();
        double double11 = continuousOutputModel9.getInitialTime();
        boolean boolean12 = continuousOutputModel9.requiresDenseOutput();
        continuousOutputModel4.append(continuousOutputModel9);
        boolean boolean14 = continuousOutputModel9.requiresDenseOutput();
        double double15 = continuousOutputModel9.getFinalTime();
        continuousOutputModel9.reset();
        double double17 = continuousOutputModel9.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel18 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean19 = continuousOutputModel18.requiresDenseOutput();
        boolean boolean20 = continuousOutputModel18.requiresDenseOutput();
        continuousOutputModel18.reset();
        boolean boolean22 = continuousOutputModel18.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel23 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double24 = continuousOutputModel23.getFinalTime();
        double double25 = continuousOutputModel23.getInitialTime();
        boolean boolean26 = continuousOutputModel23.requiresDenseOutput();
        continuousOutputModel18.append(continuousOutputModel23);
        boolean boolean28 = continuousOutputModel23.requiresDenseOutput();
        double double29 = continuousOutputModel23.getFinalTime();
        continuousOutputModel23.reset();
        double double31 = continuousOutputModel23.getInitialTime();
        boolean boolean32 = continuousOutputModel23.requiresDenseOutput();
        continuousOutputModel9.append(continuousOutputModel23);
        boolean boolean34 = continuousOutputModel9.requiresDenseOutput();
        continuousOutputModel0.append(continuousOutputModel9);
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel36 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double37 = continuousOutputModel36.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel38 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean39 = continuousOutputModel38.requiresDenseOutput();
        double double40 = continuousOutputModel38.getInitialTime();
        boolean boolean41 = continuousOutputModel38.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel42 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double43 = continuousOutputModel42.getFinalTime();
        double double44 = continuousOutputModel42.getInitialTime();
        boolean boolean45 = continuousOutputModel42.requiresDenseOutput();
        continuousOutputModel42.reset();
        boolean boolean47 = continuousOutputModel42.requiresDenseOutput();
        continuousOutputModel38.append(continuousOutputModel42);
        continuousOutputModel36.append(continuousOutputModel38);
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel50 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean51 = continuousOutputModel50.requiresDenseOutput();
        boolean boolean52 = continuousOutputModel50.requiresDenseOutput();
        continuousOutputModel50.reset();
        boolean boolean54 = continuousOutputModel50.requiresDenseOutput();
        boolean boolean55 = continuousOutputModel50.requiresDenseOutput();
        continuousOutputModel36.append(continuousOutputModel50);
        boolean boolean57 = continuousOutputModel50.requiresDenseOutput();
        continuousOutputModel50.reset();
        continuousOutputModel9.append(continuousOutputModel50);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray60 = continuousOutputModel9.getInterpolatedState();
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
    }

    @Test
    public void test01055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01055");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean1 = continuousOutputModel0.requiresDenseOutput();
        double double2 = continuousOutputModel0.getInitialTime();
        double double3 = continuousOutputModel0.getInitialTime();
        double double4 = continuousOutputModel0.getInitialTime();
        continuousOutputModel0.reset();
        continuousOutputModel0.reset();
        boolean boolean7 = continuousOutputModel0.requiresDenseOutput();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator8 = null;
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel0.handleStep(stepInterpolator8, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void test01056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01056");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean1 = continuousOutputModel0.requiresDenseOutput();
        double double2 = continuousOutputModel0.getInitialTime();
        boolean boolean3 = continuousOutputModel0.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel4 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double5 = continuousOutputModel4.getFinalTime();
        double double6 = continuousOutputModel4.getInitialTime();
        boolean boolean7 = continuousOutputModel4.requiresDenseOutput();
        continuousOutputModel4.reset();
        boolean boolean9 = continuousOutputModel4.requiresDenseOutput();
        continuousOutputModel0.append(continuousOutputModel4);
        continuousOutputModel4.reset();
        continuousOutputModel4.reset();
        continuousOutputModel4.reset();
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel4.setInterpolatedTime((double) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test01057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01057");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double1 = continuousOutputModel0.getFinalTime();
        double double2 = continuousOutputModel0.getInitialTime();
        boolean boolean3 = continuousOutputModel0.requiresDenseOutput();
        double double4 = continuousOutputModel0.getInitialTime();
        continuousOutputModel0.reset();
        double double6 = continuousOutputModel0.getInitialTime();
        continuousOutputModel0.reset();
        continuousOutputModel0.reset();
        boolean boolean9 = continuousOutputModel0.requiresDenseOutput();
        double double10 = continuousOutputModel0.getFinalTime();
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray11 = continuousOutputModel0.getInterpolatedState();
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
    }

    @Test
    public void test01058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01058");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean1 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean2 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        boolean boolean4 = continuousOutputModel0.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel5 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double6 = continuousOutputModel5.getFinalTime();
        double double7 = continuousOutputModel5.getInitialTime();
        boolean boolean8 = continuousOutputModel5.requiresDenseOutput();
        continuousOutputModel0.append(continuousOutputModel5);
        boolean boolean10 = continuousOutputModel5.requiresDenseOutput();
        double double11 = continuousOutputModel5.getFinalTime();
        continuousOutputModel5.reset();
        double double13 = continuousOutputModel5.getInitialTime();
        boolean boolean14 = continuousOutputModel5.requiresDenseOutput();
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray15 = continuousOutputModel5.getInterpolatedState();
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    }

    @Test
    public void test01059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01059");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean1 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean2 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        boolean boolean4 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel6 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double7 = continuousOutputModel6.getFinalTime();
        continuousOutputModel6.reset();
        continuousOutputModel0.append(continuousOutputModel6);
        boolean boolean10 = continuousOutputModel0.requiresDenseOutput();
        // The following exception was thrown during execution in test generation
        try {
            double double11 = continuousOutputModel0.getInterpolatedTime();
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test01060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01060");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double1 = continuousOutputModel0.getFinalTime();
        double double2 = continuousOutputModel0.getInitialTime();
        double double3 = continuousOutputModel0.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel4 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double5 = continuousOutputModel4.getFinalTime();
        double double6 = continuousOutputModel4.getInitialTime();
        continuousOutputModel0.append(continuousOutputModel4);
        double double8 = continuousOutputModel0.getFinalTime();
        boolean boolean9 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean10 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean11 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean12 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        boolean boolean14 = continuousOutputModel0.requiresDenseOutput();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator15 = null;
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel0.handleStep(stepInterpolator15, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    }

    @Test
    public void test01061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01061");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean1 = continuousOutputModel0.requiresDenseOutput();
        double double2 = continuousOutputModel0.getInitialTime();
        boolean boolean3 = continuousOutputModel0.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel4 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double5 = continuousOutputModel4.getFinalTime();
        double double6 = continuousOutputModel4.getInitialTime();
        boolean boolean7 = continuousOutputModel4.requiresDenseOutput();
        continuousOutputModel4.reset();
        boolean boolean9 = continuousOutputModel4.requiresDenseOutput();
        continuousOutputModel0.append(continuousOutputModel4);
        continuousOutputModel4.reset();
        continuousOutputModel4.reset();
        continuousOutputModel4.reset();
        continuousOutputModel4.reset();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator15 = null;
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel4.handleStep(stepInterpolator15, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test01062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01062");
        java.lang.String[] strArray12 = new java.lang.String[] { "hi!", "org.apache.commons.math.MathException: ", "hi!", "org.apache.commons.math.MathException: ", "", "" };
        org.apache.commons.math.ode.DerivativeException derivativeException13 = new org.apache.commons.math.ode.DerivativeException("", strArray12);
        org.apache.commons.math.ode.DerivativeException derivativeException14 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray12);
        org.apache.commons.math.ode.DerivativeException derivativeException15 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: ", strArray12);
        org.apache.commons.math.ode.DerivativeException derivativeException16 = new org.apache.commons.math.ode.DerivativeException("java.io.IOException: hi!", strArray12);
        java.io.IOException iOException19 = new java.io.IOException("hi!");
        java.io.IOException iOException20 = new java.io.IOException("", (java.lang.Throwable) iOException19);
        java.io.IOException iOException21 = new java.io.IOException((java.lang.Throwable) iOException20);
        org.apache.commons.math.MathException mathException22 = new org.apache.commons.math.MathException("", (java.lang.Object[]) strArray12, (java.lang.Throwable) iOException21);
        java.io.IOException iOException25 = new java.io.IOException("hi!");
        org.apache.commons.math.ode.DerivativeException derivativeException26 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) iOException25);
        org.apache.commons.math.MathException mathException27 = new org.apache.commons.math.MathException("hi!", (java.lang.Throwable) iOException25);
        org.apache.commons.math.MathException mathException28 = new org.apache.commons.math.MathException("org.apache.commons.math.ode.DerivativeException: ", (java.lang.Object[]) strArray12, (java.lang.Throwable) mathException27);
        org.apache.commons.math.MathException mathException29 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException27);
        java.lang.Object[] objArray30 = mathException27.getArguments();
        java.io.IOException iOException38 = new java.io.IOException("hi!");
        org.apache.commons.math.ode.DerivativeException derivativeException39 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) iOException38);
        org.apache.commons.math.MathException mathException40 = new org.apache.commons.math.MathException("hi!", (java.lang.Throwable) iOException38);
        java.lang.Object[] objArray41 = mathException40.getArguments();
        org.apache.commons.math.MathException mathException42 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: ", objArray41);
        org.apache.commons.math.MathException mathException43 = new org.apache.commons.math.MathException("hi!", objArray41);
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel45 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double46 = continuousOutputModel45.getFinalTime();
        double double47 = continuousOutputModel45.getInitialTime();
        boolean boolean48 = continuousOutputModel45.requiresDenseOutput();
        double double49 = continuousOutputModel45.getInitialTime();
        java.io.IOException iOException52 = new java.io.IOException("hi!");
        org.apache.commons.math.ode.DerivativeException derivativeException53 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) iOException52);
        org.apache.commons.math.MathException mathException54 = new org.apache.commons.math.MathException("hi!", (java.lang.Throwable) iOException52);
        java.io.IOException iOException57 = new java.io.IOException("hi!");
        java.io.IOException iOException58 = new java.io.IOException("", (java.lang.Throwable) iOException57);
        org.apache.commons.math.ode.DerivativeException derivativeException59 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) iOException57);
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel61 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double62 = continuousOutputModel61.getFinalTime();
        double double63 = continuousOutputModel61.getInitialTime();
        java.lang.Object[] objArray64 = new java.lang.Object[] { double49, mathException54, iOException57, false, continuousOutputModel61 };
        java.lang.String[] strArray73 = new java.lang.String[] { "hi!", "org.apache.commons.math.MathException: ", "hi!", "org.apache.commons.math.MathException: ", "", "" };
        org.apache.commons.math.ode.DerivativeException derivativeException74 = new org.apache.commons.math.ode.DerivativeException("", strArray73);
        java.io.IOException iOException78 = new java.io.IOException("hi!");
        org.apache.commons.math.ode.DerivativeException derivativeException79 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) iOException78);
        org.apache.commons.math.MathException mathException80 = new org.apache.commons.math.MathException("hi!", (java.lang.Throwable) iOException78);
        java.lang.Object[] objArray81 = mathException80.getArguments();
        org.apache.commons.math.MathException mathException82 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: ", (java.lang.Throwable) mathException80);
        org.apache.commons.math.MathException mathException83 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: hi!", (java.lang.Object[]) strArray73, (java.lang.Throwable) mathException80);
        org.apache.commons.math.MathException mathException84 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: hi!", objArray64, (java.lang.Throwable) mathException83);
        org.apache.commons.math.MathException mathException85 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: ", objArray41, (java.lang.Throwable) mathException84);
        org.apache.commons.math.MathException mathException86 = new org.apache.commons.math.MathException("", objArray41);
        org.apache.commons.math.MathException mathException87 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.MathException: hi!", objArray41);
        mathException27.addSuppressed((java.lang.Throwable) mathException87);
        java.io.IOException iOException89 = new java.io.IOException((java.lang.Throwable) mathException27);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[]");
        org.junit.Assert.assertNotNull(objArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray41), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray41), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertTrue(Double.isNaN(double62));
        org.junit.Assert.assertTrue(Double.isNaN(double63));
        org.junit.Assert.assertNotNull(objArray64);
        org.junit.Assert.assertNotNull(strArray73);
        org.junit.Assert.assertNotNull(objArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray81), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray81), "[]");
    }

    @Test
    public void test01063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01063");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        continuousOutputModel0.reset();
        boolean boolean2 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        double double4 = continuousOutputModel0.getFinalTime();
        double double5 = continuousOutputModel0.getInitialTime();
        // The following exception was thrown during execution in test generation
        try {
            double double6 = continuousOutputModel0.getInterpolatedTime();
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
    }

    @Test
    public void test01064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01064");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean1 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean2 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        boolean boolean4 = continuousOutputModel0.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel5 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double6 = continuousOutputModel5.getFinalTime();
        double double7 = continuousOutputModel5.getInitialTime();
        boolean boolean8 = continuousOutputModel5.requiresDenseOutput();
        continuousOutputModel0.append(continuousOutputModel5);
        continuousOutputModel5.reset();
        double double11 = continuousOutputModel5.getInitialTime();
        double double12 = continuousOutputModel5.getFinalTime();
        continuousOutputModel5.reset();
        continuousOutputModel5.reset();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel15 = new org.apache.commons.math.ode.ContinuousOutputModel();
        continuousOutputModel15.reset();
        continuousOutputModel15.reset();
        continuousOutputModel5.append(continuousOutputModel15);
        boolean boolean19 = continuousOutputModel5.requiresDenseOutput();
        // The following exception was thrown during execution in test generation
        try {
            double double20 = continuousOutputModel5.getInterpolatedTime();
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
    }

    @Test
    public void test01065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01065");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel1 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean2 = continuousOutputModel1.requiresDenseOutput();
        boolean boolean3 = continuousOutputModel1.requiresDenseOutput();
        double double4 = continuousOutputModel1.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel5 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean6 = continuousOutputModel5.requiresDenseOutput();
        continuousOutputModel1.append(continuousOutputModel5);
        continuousOutputModel0.append(continuousOutputModel5);
        boolean boolean9 = continuousOutputModel5.requiresDenseOutput();
        double double10 = continuousOutputModel5.getInitialTime();
        continuousOutputModel5.reset();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel12 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double13 = continuousOutputModel12.getFinalTime();
        double double14 = continuousOutputModel12.getInitialTime();
        double double15 = continuousOutputModel12.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel16 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double17 = continuousOutputModel16.getFinalTime();
        double double18 = continuousOutputModel16.getInitialTime();
        continuousOutputModel12.append(continuousOutputModel16);
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel20 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean21 = continuousOutputModel20.requiresDenseOutput();
        double double22 = continuousOutputModel20.getInitialTime();
        double double23 = continuousOutputModel20.getInitialTime();
        continuousOutputModel12.append(continuousOutputModel20);
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel25 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean26 = continuousOutputModel25.requiresDenseOutput();
        boolean boolean27 = continuousOutputModel25.requiresDenseOutput();
        double double28 = continuousOutputModel25.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel29 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean30 = continuousOutputModel29.requiresDenseOutput();
        boolean boolean31 = continuousOutputModel29.requiresDenseOutput();
        continuousOutputModel29.reset();
        continuousOutputModel29.reset();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel34 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double35 = continuousOutputModel34.getFinalTime();
        double double36 = continuousOutputModel34.getInitialTime();
        boolean boolean37 = continuousOutputModel34.requiresDenseOutput();
        continuousOutputModel34.reset();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel39 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean40 = continuousOutputModel39.requiresDenseOutput();
        double double41 = continuousOutputModel39.getInitialTime();
        continuousOutputModel34.append(continuousOutputModel39);
        continuousOutputModel29.append(continuousOutputModel39);
        boolean boolean44 = continuousOutputModel29.requiresDenseOutput();
        boolean boolean45 = continuousOutputModel29.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel46 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean47 = continuousOutputModel46.requiresDenseOutput();
        double double48 = continuousOutputModel46.getInitialTime();
        boolean boolean49 = continuousOutputModel46.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel50 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double51 = continuousOutputModel50.getFinalTime();
        double double52 = continuousOutputModel50.getInitialTime();
        boolean boolean53 = continuousOutputModel50.requiresDenseOutput();
        continuousOutputModel50.reset();
        boolean boolean55 = continuousOutputModel50.requiresDenseOutput();
        continuousOutputModel46.append(continuousOutputModel50);
        continuousOutputModel46.reset();
        double double58 = continuousOutputModel46.getInitialTime();
        continuousOutputModel29.append(continuousOutputModel46);
        continuousOutputModel25.append(continuousOutputModel46);
        continuousOutputModel20.append(continuousOutputModel46);
        continuousOutputModel5.append(continuousOutputModel20);
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel63 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean64 = continuousOutputModel63.requiresDenseOutput();
        boolean boolean65 = continuousOutputModel63.requiresDenseOutput();
        continuousOutputModel63.reset();
        boolean boolean67 = continuousOutputModel63.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel68 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double69 = continuousOutputModel68.getFinalTime();
        double double70 = continuousOutputModel68.getInitialTime();
        boolean boolean71 = continuousOutputModel68.requiresDenseOutput();
        continuousOutputModel63.append(continuousOutputModel68);
        double double73 = continuousOutputModel68.getInitialTime();
        double double74 = continuousOutputModel68.getFinalTime();
        continuousOutputModel68.reset();
        double double76 = continuousOutputModel68.getFinalTime();
        continuousOutputModel68.reset();
        boolean boolean78 = continuousOutputModel68.requiresDenseOutput();
        continuousOutputModel5.append(continuousOutputModel68);
        java.lang.Class<?> wildcardClass80 = continuousOutputModel5.getClass();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertTrue(Double.isNaN(double52));
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double58));
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double69));
        org.junit.Assert.assertTrue(Double.isNaN(double70));
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double73));
        org.junit.Assert.assertTrue(Double.isNaN(double74));
        org.junit.Assert.assertTrue(Double.isNaN(double76));
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(wildcardClass80);
    }

    @Test
    public void test01066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01066");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean1 = continuousOutputModel0.requiresDenseOutput();
        double double2 = continuousOutputModel0.getInitialTime();
        boolean boolean3 = continuousOutputModel0.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel4 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double5 = continuousOutputModel4.getFinalTime();
        double double6 = continuousOutputModel4.getInitialTime();
        boolean boolean7 = continuousOutputModel4.requiresDenseOutput();
        continuousOutputModel4.reset();
        boolean boolean9 = continuousOutputModel4.requiresDenseOutput();
        continuousOutputModel0.append(continuousOutputModel4);
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel11 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double12 = continuousOutputModel11.getFinalTime();
        double double13 = continuousOutputModel11.getInitialTime();
        boolean boolean14 = continuousOutputModel11.requiresDenseOutput();
        continuousOutputModel11.reset();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel16 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean17 = continuousOutputModel16.requiresDenseOutput();
        double double18 = continuousOutputModel16.getInitialTime();
        continuousOutputModel11.append(continuousOutputModel16);
        continuousOutputModel0.append(continuousOutputModel11);
        boolean boolean21 = continuousOutputModel0.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel22 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double23 = continuousOutputModel22.getFinalTime();
        double double24 = continuousOutputModel22.getInitialTime();
        double double25 = continuousOutputModel22.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel26 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double27 = continuousOutputModel26.getFinalTime();
        double double28 = continuousOutputModel26.getInitialTime();
        continuousOutputModel22.append(continuousOutputModel26);
        double double30 = continuousOutputModel22.getFinalTime();
        boolean boolean31 = continuousOutputModel22.requiresDenseOutput();
        boolean boolean32 = continuousOutputModel22.requiresDenseOutput();
        double double33 = continuousOutputModel22.getFinalTime();
        continuousOutputModel0.append(continuousOutputModel22);
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel35 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean36 = continuousOutputModel35.requiresDenseOutput();
        boolean boolean37 = continuousOutputModel35.requiresDenseOutput();
        continuousOutputModel35.reset();
        continuousOutputModel35.reset();
        boolean boolean40 = continuousOutputModel35.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel41 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double42 = continuousOutputModel41.getFinalTime();
        double double43 = continuousOutputModel41.getInitialTime();
        double double44 = continuousOutputModel41.getFinalTime();
        boolean boolean45 = continuousOutputModel41.requiresDenseOutput();
        continuousOutputModel35.append(continuousOutputModel41);
        boolean boolean47 = continuousOutputModel41.requiresDenseOutput();
        continuousOutputModel0.append(continuousOutputModel41);
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel0.setInterpolatedTime((double) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
    }

    @Test
    public void test01067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01067");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double1 = continuousOutputModel0.getFinalTime();
        double double2 = continuousOutputModel0.getInitialTime();
        boolean boolean3 = continuousOutputModel0.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel4 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean5 = continuousOutputModel4.requiresDenseOutput();
        double double6 = continuousOutputModel4.getInitialTime();
        boolean boolean7 = continuousOutputModel4.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel8 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double9 = continuousOutputModel8.getFinalTime();
        double double10 = continuousOutputModel8.getInitialTime();
        boolean boolean11 = continuousOutputModel8.requiresDenseOutput();
        continuousOutputModel8.reset();
        boolean boolean13 = continuousOutputModel8.requiresDenseOutput();
        continuousOutputModel4.append(continuousOutputModel8);
        continuousOutputModel0.append(continuousOutputModel4);
        double double16 = continuousOutputModel4.getInitialTime();
        continuousOutputModel4.reset();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel18 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean19 = continuousOutputModel18.requiresDenseOutput();
        double double20 = continuousOutputModel18.getInitialTime();
        double double21 = continuousOutputModel18.getFinalTime();
        boolean boolean22 = continuousOutputModel18.requiresDenseOutput();
        continuousOutputModel18.reset();
        double double24 = continuousOutputModel18.getFinalTime();
        continuousOutputModel4.append(continuousOutputModel18);
        boolean boolean26 = continuousOutputModel18.requiresDenseOutput();
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray27 = continuousOutputModel18.getInterpolatedState();
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
    }

    @Test
    public void test01068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01068");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double1 = continuousOutputModel0.getFinalTime();
        double double2 = continuousOutputModel0.getInitialTime();
        boolean boolean3 = continuousOutputModel0.requiresDenseOutput();
        double double4 = continuousOutputModel0.getInitialTime();
        continuousOutputModel0.reset();
        double double6 = continuousOutputModel0.getInitialTime();
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel0.setInterpolatedTime((double) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
    }

    @Test
    public void test01069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01069");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean1 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        boolean boolean3 = continuousOutputModel0.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel4 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean5 = continuousOutputModel4.requiresDenseOutput();
        boolean boolean6 = continuousOutputModel4.requiresDenseOutput();
        continuousOutputModel4.reset();
        boolean boolean8 = continuousOutputModel4.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel9 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double10 = continuousOutputModel9.getFinalTime();
        double double11 = continuousOutputModel9.getInitialTime();
        boolean boolean12 = continuousOutputModel9.requiresDenseOutput();
        continuousOutputModel4.append(continuousOutputModel9);
        boolean boolean14 = continuousOutputModel9.requiresDenseOutput();
        double double15 = continuousOutputModel9.getFinalTime();
        continuousOutputModel9.reset();
        double double17 = continuousOutputModel9.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel18 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean19 = continuousOutputModel18.requiresDenseOutput();
        boolean boolean20 = continuousOutputModel18.requiresDenseOutput();
        continuousOutputModel18.reset();
        boolean boolean22 = continuousOutputModel18.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel23 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double24 = continuousOutputModel23.getFinalTime();
        double double25 = continuousOutputModel23.getInitialTime();
        boolean boolean26 = continuousOutputModel23.requiresDenseOutput();
        continuousOutputModel18.append(continuousOutputModel23);
        boolean boolean28 = continuousOutputModel23.requiresDenseOutput();
        double double29 = continuousOutputModel23.getFinalTime();
        continuousOutputModel23.reset();
        double double31 = continuousOutputModel23.getInitialTime();
        boolean boolean32 = continuousOutputModel23.requiresDenseOutput();
        continuousOutputModel9.append(continuousOutputModel23);
        boolean boolean34 = continuousOutputModel9.requiresDenseOutput();
        continuousOutputModel0.append(continuousOutputModel9);
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel36 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double37 = continuousOutputModel36.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel38 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean39 = continuousOutputModel38.requiresDenseOutput();
        double double40 = continuousOutputModel38.getInitialTime();
        boolean boolean41 = continuousOutputModel38.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel42 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double43 = continuousOutputModel42.getFinalTime();
        double double44 = continuousOutputModel42.getInitialTime();
        boolean boolean45 = continuousOutputModel42.requiresDenseOutput();
        continuousOutputModel42.reset();
        boolean boolean47 = continuousOutputModel42.requiresDenseOutput();
        continuousOutputModel38.append(continuousOutputModel42);
        continuousOutputModel36.append(continuousOutputModel38);
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel50 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean51 = continuousOutputModel50.requiresDenseOutput();
        boolean boolean52 = continuousOutputModel50.requiresDenseOutput();
        continuousOutputModel50.reset();
        boolean boolean54 = continuousOutputModel50.requiresDenseOutput();
        boolean boolean55 = continuousOutputModel50.requiresDenseOutput();
        continuousOutputModel36.append(continuousOutputModel50);
        boolean boolean57 = continuousOutputModel50.requiresDenseOutput();
        continuousOutputModel50.reset();
        continuousOutputModel9.append(continuousOutputModel50);
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel9.setInterpolatedTime(10.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
    }

    @Test
    public void test01070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01070");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean1 = continuousOutputModel0.requiresDenseOutput();
        double double2 = continuousOutputModel0.getInitialTime();
        boolean boolean3 = continuousOutputModel0.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel4 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double5 = continuousOutputModel4.getFinalTime();
        double double6 = continuousOutputModel4.getInitialTime();
        boolean boolean7 = continuousOutputModel4.requiresDenseOutput();
        continuousOutputModel4.reset();
        boolean boolean9 = continuousOutputModel4.requiresDenseOutput();
        continuousOutputModel0.append(continuousOutputModel4);
        continuousOutputModel4.reset();
        continuousOutputModel4.reset();
        continuousOutputModel4.reset();
        continuousOutputModel4.reset();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator15 = null;
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel4.handleStep(stepInterpolator15, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test01071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01071");
        java.lang.String[] strArray6 = new java.lang.String[] { "org.apache.commons.math.MathException: hi!", "java.io.IOException: ", "java.io.IOException: hi!" };
        org.apache.commons.math.ode.DerivativeException derivativeException7 = new org.apache.commons.math.ode.DerivativeException("", strArray6);
        java.lang.Object[] objArray8 = derivativeException7.getArguments();
        java.io.IOException iOException11 = new java.io.IOException("hi!");
        java.io.IOException iOException12 = new java.io.IOException("", (java.lang.Throwable) iOException11);
        java.io.IOException iOException13 = new java.io.IOException((java.lang.Throwable) iOException12);
        java.lang.String[] strArray22 = new java.lang.String[] { "", "hi!", "hi!" };
        org.apache.commons.math.ode.DerivativeException derivativeException23 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: ", strArray22);
        org.apache.commons.math.ode.DerivativeException derivativeException24 = new org.apache.commons.math.ode.DerivativeException("", strArray22);
        org.apache.commons.math.ode.DerivativeException derivativeException25 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: org.apache.commons.math.MathException: ", strArray22);
        org.apache.commons.math.MathException mathException26 = new org.apache.commons.math.MathException("hi!", (java.lang.Object[]) strArray22);
        org.apache.commons.math.MathException mathException27 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: ", (java.lang.Throwable) mathException26);
        iOException12.addSuppressed((java.lang.Throwable) mathException27);
        java.io.IOException iOException36 = new java.io.IOException("hi!");
        org.apache.commons.math.ode.DerivativeException derivativeException37 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) iOException36);
        org.apache.commons.math.MathException mathException38 = new org.apache.commons.math.MathException("hi!", (java.lang.Throwable) iOException36);
        java.lang.Object[] objArray39 = mathException38.getArguments();
        org.apache.commons.math.MathException mathException40 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: ", objArray39);
        org.apache.commons.math.MathException mathException41 = new org.apache.commons.math.MathException("hi!", objArray39);
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel43 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double44 = continuousOutputModel43.getFinalTime();
        double double45 = continuousOutputModel43.getInitialTime();
        boolean boolean46 = continuousOutputModel43.requiresDenseOutput();
        double double47 = continuousOutputModel43.getInitialTime();
        java.io.IOException iOException50 = new java.io.IOException("hi!");
        org.apache.commons.math.ode.DerivativeException derivativeException51 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) iOException50);
        org.apache.commons.math.MathException mathException52 = new org.apache.commons.math.MathException("hi!", (java.lang.Throwable) iOException50);
        java.io.IOException iOException55 = new java.io.IOException("hi!");
        java.io.IOException iOException56 = new java.io.IOException("", (java.lang.Throwable) iOException55);
        org.apache.commons.math.ode.DerivativeException derivativeException57 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) iOException55);
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel59 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double60 = continuousOutputModel59.getFinalTime();
        double double61 = continuousOutputModel59.getInitialTime();
        java.lang.Object[] objArray62 = new java.lang.Object[] { double47, mathException52, iOException55, false, continuousOutputModel59 };
        java.lang.String[] strArray71 = new java.lang.String[] { "hi!", "org.apache.commons.math.MathException: ", "hi!", "org.apache.commons.math.MathException: ", "", "" };
        org.apache.commons.math.ode.DerivativeException derivativeException72 = new org.apache.commons.math.ode.DerivativeException("", strArray71);
        java.io.IOException iOException76 = new java.io.IOException("hi!");
        org.apache.commons.math.ode.DerivativeException derivativeException77 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) iOException76);
        org.apache.commons.math.MathException mathException78 = new org.apache.commons.math.MathException("hi!", (java.lang.Throwable) iOException76);
        java.lang.Object[] objArray79 = mathException78.getArguments();
        org.apache.commons.math.MathException mathException80 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: ", (java.lang.Throwable) mathException78);
        org.apache.commons.math.MathException mathException81 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: hi!", (java.lang.Object[]) strArray71, (java.lang.Throwable) mathException78);
        org.apache.commons.math.MathException mathException82 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: hi!", objArray62, (java.lang.Throwable) mathException81);
        org.apache.commons.math.MathException mathException83 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: ", objArray39, (java.lang.Throwable) mathException82);
        org.apache.commons.math.MathException mathException84 = new org.apache.commons.math.MathException("", objArray39);
        org.apache.commons.math.MathException mathException86 = new org.apache.commons.math.MathException("hi!");
        java.io.IOException iOException87 = new java.io.IOException((java.lang.Throwable) mathException86);
        org.apache.commons.math.MathException mathException88 = new org.apache.commons.math.MathException((java.lang.Throwable) iOException87);
        java.lang.Throwable[] throwableArray89 = iOException87.getSuppressed();
        org.apache.commons.math.MathException mathException90 = new org.apache.commons.math.MathException("org.apache.commons.math.ode.DerivativeException: hi!", objArray39, (java.lang.Throwable) iOException87);
        java.lang.String str91 = mathException90.getPattern();
        mathException27.addSuppressed((java.lang.Throwable) mathException90);
        org.apache.commons.math.MathException mathException93 = new org.apache.commons.math.MathException("java.io.IOException: org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.MathException: hi!", objArray8, (java.lang.Throwable) mathException27);
        org.apache.commons.math.MathException mathException96 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: ");
        java.lang.Object[] objArray97 = mathException96.getArguments();
        org.apache.commons.math.MathException mathException98 = new org.apache.commons.math.MathException("java.io.IOException: org.apache.commons.math.ode.DerivativeException: ", objArray97);
        org.apache.commons.math.MathException mathException99 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.ode.DerivativeException: java.io.IOException: hi!", objArray8, (java.lang.Throwable) mathException98);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[org.apache.commons.math.MathException: hi!, java.io.IOException: , java.io.IOException: hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[org.apache.commons.math.MathException: hi!, java.io.IOException: , java.io.IOException: hi!]");
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(objArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray39), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray39), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertTrue(Double.isNaN(double60));
        org.junit.Assert.assertTrue(Double.isNaN(double61));
        org.junit.Assert.assertNotNull(objArray62);
        org.junit.Assert.assertNotNull(strArray71);
        org.junit.Assert.assertNotNull(objArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray79), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray79), "[]");
        org.junit.Assert.assertNotNull(throwableArray89);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "org.apache.commons.math.ode.DerivativeException: hi!" + "'", str91, "org.apache.commons.math.ode.DerivativeException: hi!");
        org.junit.Assert.assertNotNull(objArray97);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray97), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray97), "[]");
    }

    @Test
    public void test01072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01072");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean1 = continuousOutputModel0.requiresDenseOutput();
        double double2 = continuousOutputModel0.getInitialTime();
        boolean boolean3 = continuousOutputModel0.requiresDenseOutput();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator4 = null;
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel0.handleStep(stepInterpolator4, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
    }

    @Test
    public void test01073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01073");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean1 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean2 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        boolean boolean4 = continuousOutputModel0.requiresDenseOutput();
        double double5 = continuousOutputModel0.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel6 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double7 = continuousOutputModel6.getFinalTime();
        double double8 = continuousOutputModel6.getInitialTime();
        boolean boolean9 = continuousOutputModel6.requiresDenseOutput();
        continuousOutputModel6.reset();
        double double11 = continuousOutputModel6.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel12 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double13 = continuousOutputModel12.getFinalTime();
        double double14 = continuousOutputModel12.getInitialTime();
        continuousOutputModel6.append(continuousOutputModel12);
        continuousOutputModel0.append(continuousOutputModel12);
        continuousOutputModel0.reset();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel18 = null;
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel0.append(continuousOutputModel18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
    }

    @Test
    public void test01074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01074");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double1 = continuousOutputModel0.getFinalTime();
        double double2 = continuousOutputModel0.getInitialTime();
        double double3 = continuousOutputModel0.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel4 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double5 = continuousOutputModel4.getFinalTime();
        double double6 = continuousOutputModel4.getInitialTime();
        continuousOutputModel0.append(continuousOutputModel4);
        double double8 = continuousOutputModel0.getFinalTime();
        boolean boolean9 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean10 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean11 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean12 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel14 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean15 = continuousOutputModel14.requiresDenseOutput();
        continuousOutputModel14.reset();
        double double17 = continuousOutputModel14.getInitialTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel18 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean19 = continuousOutputModel18.requiresDenseOutput();
        boolean boolean20 = continuousOutputModel18.requiresDenseOutput();
        double double21 = continuousOutputModel18.getFinalTime();
        double double22 = continuousOutputModel18.getInitialTime();
        boolean boolean23 = continuousOutputModel18.requiresDenseOutput();
        continuousOutputModel14.append(continuousOutputModel18);
        continuousOutputModel0.append(continuousOutputModel18);
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel0.setInterpolatedTime((double) 0.0f);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
    }

    @Test
    public void test01075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01075");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double1 = continuousOutputModel0.getFinalTime();
        double double2 = continuousOutputModel0.getInitialTime();
        boolean boolean3 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        boolean boolean5 = continuousOutputModel0.requiresDenseOutput();
        double double6 = continuousOutputModel0.getInitialTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel7 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double8 = continuousOutputModel7.getFinalTime();
        double double9 = continuousOutputModel7.getInitialTime();
        boolean boolean10 = continuousOutputModel7.requiresDenseOutput();
        double double11 = continuousOutputModel7.getInitialTime();
        continuousOutputModel7.reset();
        boolean boolean13 = continuousOutputModel7.requiresDenseOutput();
        double double14 = continuousOutputModel7.getInitialTime();
        continuousOutputModel0.append(continuousOutputModel7);
        // The following exception was thrown during execution in test generation
        try {
            double double16 = continuousOutputModel0.getInterpolatedTime();
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
    }

    @Test
    public void test01076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01076");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean1 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean2 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        boolean boolean4 = continuousOutputModel0.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel5 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double6 = continuousOutputModel5.getFinalTime();
        double double7 = continuousOutputModel5.getInitialTime();
        boolean boolean8 = continuousOutputModel5.requiresDenseOutput();
        continuousOutputModel0.append(continuousOutputModel5);
        double double10 = continuousOutputModel5.getInitialTime();
        double double11 = continuousOutputModel5.getFinalTime();
        continuousOutputModel5.reset();
        double double13 = continuousOutputModel5.getFinalTime();
        continuousOutputModel5.reset();
        boolean boolean15 = continuousOutputModel5.requiresDenseOutput();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator16 = null;
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel5.handleStep(stepInterpolator16, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    }

    @Test
    public void test01077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01077");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean1 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean2 = continuousOutputModel0.requiresDenseOutput();
        double double3 = continuousOutputModel0.getFinalTime();
        continuousOutputModel0.reset();
        boolean boolean5 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel7 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean8 = continuousOutputModel7.requiresDenseOutput();
        boolean boolean9 = continuousOutputModel7.requiresDenseOutput();
        double double10 = continuousOutputModel7.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel11 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean12 = continuousOutputModel11.requiresDenseOutput();
        continuousOutputModel7.append(continuousOutputModel11);
        boolean boolean14 = continuousOutputModel7.requiresDenseOutput();
        continuousOutputModel7.reset();
        continuousOutputModel0.append(continuousOutputModel7);
        continuousOutputModel7.reset();
        continuousOutputModel7.reset();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel19 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double20 = continuousOutputModel19.getFinalTime();
        double double21 = continuousOutputModel19.getInitialTime();
        boolean boolean22 = continuousOutputModel19.requiresDenseOutput();
        double double23 = continuousOutputModel19.getInitialTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel24 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean25 = continuousOutputModel24.requiresDenseOutput();
        boolean boolean26 = continuousOutputModel24.requiresDenseOutput();
        continuousOutputModel24.reset();
        boolean boolean28 = continuousOutputModel24.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel29 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double30 = continuousOutputModel29.getFinalTime();
        double double31 = continuousOutputModel29.getInitialTime();
        boolean boolean32 = continuousOutputModel29.requiresDenseOutput();
        continuousOutputModel24.append(continuousOutputModel29);
        continuousOutputModel19.append(continuousOutputModel24);
        continuousOutputModel24.reset();
        continuousOutputModel24.reset();
        continuousOutputModel24.reset();
        boolean boolean38 = continuousOutputModel24.requiresDenseOutput();
        continuousOutputModel7.append(continuousOutputModel24);
        continuousOutputModel24.reset();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
    }

    @Test
    public void test01078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01078");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean1 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean2 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        boolean boolean4 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        boolean boolean6 = continuousOutputModel0.requiresDenseOutput();
        double double7 = continuousOutputModel0.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel8 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean9 = continuousOutputModel8.requiresDenseOutput();
        boolean boolean10 = continuousOutputModel8.requiresDenseOutput();
        continuousOutputModel8.reset();
        boolean boolean12 = continuousOutputModel8.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel13 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double14 = continuousOutputModel13.getFinalTime();
        double double15 = continuousOutputModel13.getInitialTime();
        boolean boolean16 = continuousOutputModel13.requiresDenseOutput();
        continuousOutputModel8.append(continuousOutputModel13);
        double double18 = continuousOutputModel13.getInitialTime();
        continuousOutputModel13.reset();
        boolean boolean20 = continuousOutputModel13.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel21 = new org.apache.commons.math.ode.ContinuousOutputModel();
        continuousOutputModel21.reset();
        continuousOutputModel21.reset();
        continuousOutputModel13.append(continuousOutputModel21);
        continuousOutputModel0.append(continuousOutputModel13);
        org.apache.commons.math.ode.StepInterpolator stepInterpolator26 = null;
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel0.handleStep(stepInterpolator26, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
    }

    @Test
    public void test01079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01079");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double1 = continuousOutputModel0.getFinalTime();
        double double2 = continuousOutputModel0.getInitialTime();
        boolean boolean3 = continuousOutputModel0.requiresDenseOutput();
        double double4 = continuousOutputModel0.getInitialTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel5 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean6 = continuousOutputModel5.requiresDenseOutput();
        boolean boolean7 = continuousOutputModel5.requiresDenseOutput();
        continuousOutputModel5.reset();
        boolean boolean9 = continuousOutputModel5.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel10 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double11 = continuousOutputModel10.getFinalTime();
        double double12 = continuousOutputModel10.getInitialTime();
        boolean boolean13 = continuousOutputModel10.requiresDenseOutput();
        continuousOutputModel5.append(continuousOutputModel10);
        continuousOutputModel0.append(continuousOutputModel5);
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel16 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean17 = continuousOutputModel16.requiresDenseOutput();
        double double18 = continuousOutputModel16.getInitialTime();
        boolean boolean19 = continuousOutputModel16.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel20 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean21 = continuousOutputModel20.requiresDenseOutput();
        boolean boolean22 = continuousOutputModel20.requiresDenseOutput();
        continuousOutputModel16.append(continuousOutputModel20);
        continuousOutputModel5.append(continuousOutputModel16);
        boolean boolean25 = continuousOutputModel16.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel26 = new org.apache.commons.math.ode.ContinuousOutputModel();
        continuousOutputModel26.reset();
        boolean boolean28 = continuousOutputModel26.requiresDenseOutput();
        double double29 = continuousOutputModel26.getInitialTime();
        continuousOutputModel16.append(continuousOutputModel26);
        org.apache.commons.math.ode.StepInterpolator stepInterpolator31 = null;
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel26.handleStep(stepInterpolator31, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double29));
    }

    @Test
    public void test01080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01080");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean1 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean2 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        boolean boolean4 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel6 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double7 = continuousOutputModel6.getFinalTime();
        continuousOutputModel6.reset();
        continuousOutputModel0.append(continuousOutputModel6);
        continuousOutputModel6.reset();
        boolean boolean11 = continuousOutputModel6.requiresDenseOutput();
        continuousOutputModel6.reset();
        boolean boolean13 = continuousOutputModel6.requiresDenseOutput();
        continuousOutputModel6.reset();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel15 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double16 = continuousOutputModel15.getFinalTime();
        double double17 = continuousOutputModel15.getInitialTime();
        boolean boolean18 = continuousOutputModel15.requiresDenseOutput();
        double double19 = continuousOutputModel15.getInitialTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel20 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean21 = continuousOutputModel20.requiresDenseOutput();
        boolean boolean22 = continuousOutputModel20.requiresDenseOutput();
        continuousOutputModel20.reset();
        boolean boolean24 = continuousOutputModel20.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel25 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double26 = continuousOutputModel25.getFinalTime();
        double double27 = continuousOutputModel25.getInitialTime();
        boolean boolean28 = continuousOutputModel25.requiresDenseOutput();
        continuousOutputModel20.append(continuousOutputModel25);
        continuousOutputModel15.append(continuousOutputModel20);
        continuousOutputModel6.append(continuousOutputModel15);
        org.apache.commons.math.ode.StepInterpolator stepInterpolator32 = null;
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel6.handleStep(stepInterpolator32, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
    }

    @Test
    public void test01081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01081");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double1 = continuousOutputModel0.getFinalTime();
        double double2 = continuousOutputModel0.getInitialTime();
        double double3 = continuousOutputModel0.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel4 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double5 = continuousOutputModel4.getFinalTime();
        double double6 = continuousOutputModel4.getInitialTime();
        continuousOutputModel0.append(continuousOutputModel4);
        double double8 = continuousOutputModel0.getInitialTime();
        double double9 = continuousOutputModel0.getFinalTime();
        boolean boolean10 = continuousOutputModel0.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel11 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean12 = continuousOutputModel11.requiresDenseOutput();
        double double13 = continuousOutputModel11.getInitialTime();
        boolean boolean14 = continuousOutputModel11.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel15 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double16 = continuousOutputModel15.getFinalTime();
        double double17 = continuousOutputModel15.getInitialTime();
        boolean boolean18 = continuousOutputModel15.requiresDenseOutput();
        continuousOutputModel15.reset();
        boolean boolean20 = continuousOutputModel15.requiresDenseOutput();
        continuousOutputModel11.append(continuousOutputModel15);
        continuousOutputModel15.reset();
        continuousOutputModel15.reset();
        continuousOutputModel15.reset();
        continuousOutputModel15.reset();
        boolean boolean26 = continuousOutputModel15.requiresDenseOutput();
        continuousOutputModel0.append(continuousOutputModel15);
        boolean boolean28 = continuousOutputModel0.requiresDenseOutput();
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel0.setInterpolatedTime((double) (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
    }

    @Test
    public void test01082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01082");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double1 = continuousOutputModel0.getFinalTime();
        double double2 = continuousOutputModel0.getInitialTime();
        double double3 = continuousOutputModel0.getFinalTime();
        double double4 = continuousOutputModel0.getFinalTime();
        double double5 = continuousOutputModel0.getInitialTime();
        continuousOutputModel0.reset();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel7 = new org.apache.commons.math.ode.ContinuousOutputModel();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel8 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean9 = continuousOutputModel8.requiresDenseOutput();
        boolean boolean10 = continuousOutputModel8.requiresDenseOutput();
        double double11 = continuousOutputModel8.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel12 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean13 = continuousOutputModel12.requiresDenseOutput();
        continuousOutputModel8.append(continuousOutputModel12);
        continuousOutputModel7.append(continuousOutputModel12);
        continuousOutputModel12.reset();
        double double17 = continuousOutputModel12.getFinalTime();
        continuousOutputModel0.append(continuousOutputModel12);
        continuousOutputModel0.reset();
        boolean boolean20 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        // The following exception was thrown during execution in test generation
        try {
            double double22 = continuousOutputModel0.getInterpolatedTime();
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
    }

    @Test
    public void test01083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01083");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double1 = continuousOutputModel0.getFinalTime();
        double double2 = continuousOutputModel0.getInitialTime();
        double double3 = continuousOutputModel0.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel4 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double5 = continuousOutputModel4.getFinalTime();
        double double6 = continuousOutputModel4.getInitialTime();
        continuousOutputModel0.append(continuousOutputModel4);
        double double8 = continuousOutputModel0.getFinalTime();
        boolean boolean9 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean10 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        boolean boolean12 = continuousOutputModel0.requiresDenseOutput();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator13 = null;
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel0.handleStep(stepInterpolator13, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test01084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01084");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean1 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean2 = continuousOutputModel0.requiresDenseOutput();
        double double3 = continuousOutputModel0.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel4 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean5 = continuousOutputModel4.requiresDenseOutput();
        continuousOutputModel0.append(continuousOutputModel4);
        double double7 = continuousOutputModel0.getInitialTime();
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel0.setInterpolatedTime((double) (-1.0f));
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
    }

    @Test
    public void test01085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01085");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean1 = continuousOutputModel0.requiresDenseOutput();
        double double2 = continuousOutputModel0.getInitialTime();
        boolean boolean3 = continuousOutputModel0.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel4 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean5 = continuousOutputModel4.requiresDenseOutput();
        boolean boolean6 = continuousOutputModel4.requiresDenseOutput();
        continuousOutputModel0.append(continuousOutputModel4);
        continuousOutputModel0.reset();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator9 = null;
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel0.handleStep(stepInterpolator9, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
    }

    @Test
    public void test01086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01086");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean1 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean2 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        boolean boolean4 = continuousOutputModel0.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel5 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double6 = continuousOutputModel5.getFinalTime();
        double double7 = continuousOutputModel5.getInitialTime();
        boolean boolean8 = continuousOutputModel5.requiresDenseOutput();
        continuousOutputModel0.append(continuousOutputModel5);
        continuousOutputModel5.reset();
        double double11 = continuousOutputModel5.getInitialTime();
        double double12 = continuousOutputModel5.getFinalTime();
        continuousOutputModel5.reset();
        continuousOutputModel5.reset();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel15 = new org.apache.commons.math.ode.ContinuousOutputModel();
        continuousOutputModel15.reset();
        continuousOutputModel15.reset();
        continuousOutputModel5.append(continuousOutputModel15);
        continuousOutputModel5.reset();
        java.lang.Class<?> wildcardClass20 = continuousOutputModel5.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test01087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01087");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean1 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel3 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double4 = continuousOutputModel3.getFinalTime();
        double double5 = continuousOutputModel3.getInitialTime();
        boolean boolean6 = continuousOutputModel3.requiresDenseOutput();
        continuousOutputModel3.reset();
        boolean boolean8 = continuousOutputModel3.requiresDenseOutput();
        boolean boolean9 = continuousOutputModel3.requiresDenseOutput();
        double double10 = continuousOutputModel3.getInitialTime();
        continuousOutputModel0.append(continuousOutputModel3);
        boolean boolean12 = continuousOutputModel0.requiresDenseOutput();
        double double13 = continuousOutputModel0.getInitialTime();
        continuousOutputModel0.reset();
        java.lang.Class<?> wildcardClass15 = continuousOutputModel0.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test01088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01088");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean1 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean2 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        boolean boolean4 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel6 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double7 = continuousOutputModel6.getFinalTime();
        continuousOutputModel6.reset();
        continuousOutputModel0.append(continuousOutputModel6);
        continuousOutputModel6.reset();
        boolean boolean11 = continuousOutputModel6.requiresDenseOutput();
        continuousOutputModel6.reset();
        boolean boolean13 = continuousOutputModel6.requiresDenseOutput();
        continuousOutputModel6.reset();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel15 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double16 = continuousOutputModel15.getFinalTime();
        double double17 = continuousOutputModel15.getInitialTime();
        boolean boolean18 = continuousOutputModel15.requiresDenseOutput();
        double double19 = continuousOutputModel15.getInitialTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel20 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean21 = continuousOutputModel20.requiresDenseOutput();
        boolean boolean22 = continuousOutputModel20.requiresDenseOutput();
        continuousOutputModel20.reset();
        boolean boolean24 = continuousOutputModel20.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel25 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double26 = continuousOutputModel25.getFinalTime();
        double double27 = continuousOutputModel25.getInitialTime();
        boolean boolean28 = continuousOutputModel25.requiresDenseOutput();
        continuousOutputModel20.append(continuousOutputModel25);
        continuousOutputModel15.append(continuousOutputModel20);
        continuousOutputModel6.append(continuousOutputModel15);
        continuousOutputModel6.reset();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel33 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean34 = continuousOutputModel33.requiresDenseOutput();
        boolean boolean35 = continuousOutputModel33.requiresDenseOutput();
        continuousOutputModel33.reset();
        boolean boolean37 = continuousOutputModel33.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel38 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double39 = continuousOutputModel38.getFinalTime();
        double double40 = continuousOutputModel38.getInitialTime();
        boolean boolean41 = continuousOutputModel38.requiresDenseOutput();
        continuousOutputModel33.append(continuousOutputModel38);
        boolean boolean43 = continuousOutputModel38.requiresDenseOutput();
        double double44 = continuousOutputModel38.getFinalTime();
        continuousOutputModel38.reset();
        continuousOutputModel38.reset();
        continuousOutputModel6.append(continuousOutputModel38);
        org.apache.commons.math.ode.StepInterpolator stepInterpolator48 = null;
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel38.handleStep(stepInterpolator48, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double44));
    }

    @Test
    public void test01089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01089");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double1 = continuousOutputModel0.getFinalTime();
        double double2 = continuousOutputModel0.getInitialTime();
        boolean boolean3 = continuousOutputModel0.requiresDenseOutput();
        double double4 = continuousOutputModel0.getInitialTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel5 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean6 = continuousOutputModel5.requiresDenseOutput();
        boolean boolean7 = continuousOutputModel5.requiresDenseOutput();
        continuousOutputModel5.reset();
        boolean boolean9 = continuousOutputModel5.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel10 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double11 = continuousOutputModel10.getFinalTime();
        double double12 = continuousOutputModel10.getInitialTime();
        boolean boolean13 = continuousOutputModel10.requiresDenseOutput();
        continuousOutputModel5.append(continuousOutputModel10);
        continuousOutputModel0.append(continuousOutputModel5);
        boolean boolean16 = continuousOutputModel0.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel17 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double18 = continuousOutputModel17.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel19 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean20 = continuousOutputModel19.requiresDenseOutput();
        double double21 = continuousOutputModel19.getInitialTime();
        boolean boolean22 = continuousOutputModel19.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel23 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double24 = continuousOutputModel23.getFinalTime();
        double double25 = continuousOutputModel23.getInitialTime();
        boolean boolean26 = continuousOutputModel23.requiresDenseOutput();
        continuousOutputModel23.reset();
        boolean boolean28 = continuousOutputModel23.requiresDenseOutput();
        continuousOutputModel19.append(continuousOutputModel23);
        continuousOutputModel17.append(continuousOutputModel19);
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel31 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean32 = continuousOutputModel31.requiresDenseOutput();
        boolean boolean33 = continuousOutputModel31.requiresDenseOutput();
        continuousOutputModel31.reset();
        boolean boolean35 = continuousOutputModel31.requiresDenseOutput();
        boolean boolean36 = continuousOutputModel31.requiresDenseOutput();
        continuousOutputModel17.append(continuousOutputModel31);
        boolean boolean38 = continuousOutputModel31.requiresDenseOutput();
        continuousOutputModel31.reset();
        double double40 = continuousOutputModel31.getFinalTime();
        continuousOutputModel0.append(continuousOutputModel31);
        org.apache.commons.math.ode.StepInterpolator stepInterpolator42 = null;
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel0.handleStep(stepInterpolator42, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double40));
    }

    @Test
    public void test01090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01090");
        java.io.IOException iOException7 = new java.io.IOException("hi!");
        org.apache.commons.math.ode.DerivativeException derivativeException8 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) iOException7);
        org.apache.commons.math.MathException mathException9 = new org.apache.commons.math.MathException("hi!", (java.lang.Throwable) iOException7);
        java.lang.Object[] objArray10 = mathException9.getArguments();
        org.apache.commons.math.MathException mathException11 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: ", objArray10);
        org.apache.commons.math.MathException mathException12 = new org.apache.commons.math.MathException("hi!", objArray10);
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel14 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double15 = continuousOutputModel14.getFinalTime();
        double double16 = continuousOutputModel14.getInitialTime();
        boolean boolean17 = continuousOutputModel14.requiresDenseOutput();
        double double18 = continuousOutputModel14.getInitialTime();
        java.io.IOException iOException21 = new java.io.IOException("hi!");
        org.apache.commons.math.ode.DerivativeException derivativeException22 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) iOException21);
        org.apache.commons.math.MathException mathException23 = new org.apache.commons.math.MathException("hi!", (java.lang.Throwable) iOException21);
        java.io.IOException iOException26 = new java.io.IOException("hi!");
        java.io.IOException iOException27 = new java.io.IOException("", (java.lang.Throwable) iOException26);
        org.apache.commons.math.ode.DerivativeException derivativeException28 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) iOException26);
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel30 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double31 = continuousOutputModel30.getFinalTime();
        double double32 = continuousOutputModel30.getInitialTime();
        java.lang.Object[] objArray33 = new java.lang.Object[] { double18, mathException23, iOException26, false, continuousOutputModel30 };
        java.lang.String[] strArray42 = new java.lang.String[] { "hi!", "org.apache.commons.math.MathException: ", "hi!", "org.apache.commons.math.MathException: ", "", "" };
        org.apache.commons.math.ode.DerivativeException derivativeException43 = new org.apache.commons.math.ode.DerivativeException("", strArray42);
        java.io.IOException iOException47 = new java.io.IOException("hi!");
        org.apache.commons.math.ode.DerivativeException derivativeException48 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) iOException47);
        org.apache.commons.math.MathException mathException49 = new org.apache.commons.math.MathException("hi!", (java.lang.Throwable) iOException47);
        java.lang.Object[] objArray50 = mathException49.getArguments();
        org.apache.commons.math.MathException mathException51 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: ", (java.lang.Throwable) mathException49);
        org.apache.commons.math.MathException mathException52 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: hi!", (java.lang.Object[]) strArray42, (java.lang.Throwable) mathException49);
        org.apache.commons.math.MathException mathException53 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: hi!", objArray33, (java.lang.Throwable) mathException52);
        org.apache.commons.math.MathException mathException54 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: ", objArray10, (java.lang.Throwable) mathException53);
        java.lang.Throwable[] throwableArray55 = mathException53.getSuppressed();
        java.lang.String[] strArray61 = new java.lang.String[] { "", "hi!", "hi!" };
        org.apache.commons.math.ode.DerivativeException derivativeException62 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: ", strArray61);
        java.lang.Throwable[] throwableArray63 = derivativeException62.getSuppressed();
        org.apache.commons.math.ode.DerivativeException derivativeException64 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) derivativeException62);
        java.lang.Object[] objArray65 = derivativeException64.getArguments();
        org.apache.commons.math.MathException mathException66 = new org.apache.commons.math.MathException("org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: ", objArray65);
        org.apache.commons.math.MathException mathException67 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.ode.DerivativeException: ", (java.lang.Object[]) throwableArray55, (java.lang.Throwable) mathException66);
        java.lang.Throwable throwable69 = null;
        java.io.IOException iOException70 = new java.io.IOException("java.io.IOException: org.apache.commons.math.MathException: hi!", throwable69);
        org.apache.commons.math.MathException mathException71 = new org.apache.commons.math.MathException("org.apache.commons.math.ode.DerivativeException: ", (java.lang.Object[]) throwableArray55, (java.lang.Throwable) iOException70);
        java.lang.String str72 = mathException71.getPattern();
        java.lang.Class<?> wildcardClass73 = mathException71.getClass();
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[]");
        org.junit.Assert.assertNotNull(throwableArray55);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertNotNull(throwableArray63);
        org.junit.Assert.assertNotNull(objArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray65), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray65), "[]");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "org.apache.commons.math.ode.DerivativeException: " + "'", str72, "org.apache.commons.math.ode.DerivativeException: ");
        org.junit.Assert.assertNotNull(wildcardClass73);
    }

    @Test
    public void test01091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01091");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double1 = continuousOutputModel0.getFinalTime();
        double double2 = continuousOutputModel0.getInitialTime();
        boolean boolean3 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        double double5 = continuousOutputModel0.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel6 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double7 = continuousOutputModel6.getFinalTime();
        double double8 = continuousOutputModel6.getInitialTime();
        continuousOutputModel0.append(continuousOutputModel6);
        continuousOutputModel0.reset();
        continuousOutputModel0.reset();
        continuousOutputModel0.reset();
        boolean boolean13 = continuousOutputModel0.requiresDenseOutput();
        double double14 = continuousOutputModel0.getInitialTime();
        continuousOutputModel0.reset();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator16 = null;
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel0.handleStep(stepInterpolator16, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
    }

    @Test
    public void test01092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01092");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double1 = continuousOutputModel0.getFinalTime();
        double double2 = continuousOutputModel0.getInitialTime();
        boolean boolean3 = continuousOutputModel0.requiresDenseOutput();
        double double4 = continuousOutputModel0.getInitialTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel5 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean6 = continuousOutputModel5.requiresDenseOutput();
        boolean boolean7 = continuousOutputModel5.requiresDenseOutput();
        continuousOutputModel5.reset();
        boolean boolean9 = continuousOutputModel5.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel10 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double11 = continuousOutputModel10.getFinalTime();
        double double12 = continuousOutputModel10.getInitialTime();
        boolean boolean13 = continuousOutputModel10.requiresDenseOutput();
        continuousOutputModel5.append(continuousOutputModel10);
        continuousOutputModel0.append(continuousOutputModel5);
        continuousOutputModel0.reset();
        boolean boolean17 = continuousOutputModel0.requiresDenseOutput();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator18 = null;
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel0.handleStep(stepInterpolator18, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
    }

    @Test
    public void test01093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01093");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean1 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean2 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        continuousOutputModel0.reset();
        boolean boolean5 = continuousOutputModel0.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel6 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double7 = continuousOutputModel6.getFinalTime();
        double double8 = continuousOutputModel6.getInitialTime();
        double double9 = continuousOutputModel6.getFinalTime();
        boolean boolean10 = continuousOutputModel6.requiresDenseOutput();
        continuousOutputModel0.append(continuousOutputModel6);
        boolean boolean12 = continuousOutputModel6.requiresDenseOutput();
        boolean boolean13 = continuousOutputModel6.requiresDenseOutput();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator14 = null;
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel6.handleStep(stepInterpolator14, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test01094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01094");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean1 = continuousOutputModel0.requiresDenseOutput();
        double double2 = continuousOutputModel0.getInitialTime();
        double double3 = continuousOutputModel0.getFinalTime();
        boolean boolean4 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        double double6 = continuousOutputModel0.getFinalTime();
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel0.setInterpolatedTime((double) 0L);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
    }

    @Test
    public void test01095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01095");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean1 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean2 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        continuousOutputModel0.reset();
        double double5 = continuousOutputModel0.getFinalTime();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator6 = null;
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel0.handleStep(stepInterpolator6, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
    }

    @Test
    public void test01096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01096");
        java.lang.Object[] objArray1 = null;
        java.io.IOException iOException9 = new java.io.IOException("hi!");
        org.apache.commons.math.ode.DerivativeException derivativeException10 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) iOException9);
        org.apache.commons.math.MathException mathException11 = new org.apache.commons.math.MathException("hi!", (java.lang.Throwable) iOException9);
        java.lang.Object[] objArray12 = mathException11.getArguments();
        org.apache.commons.math.MathException mathException13 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: ", objArray12);
        org.apache.commons.math.MathException mathException14 = new org.apache.commons.math.MathException("hi!", objArray12);
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel16 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double17 = continuousOutputModel16.getFinalTime();
        double double18 = continuousOutputModel16.getInitialTime();
        boolean boolean19 = continuousOutputModel16.requiresDenseOutput();
        double double20 = continuousOutputModel16.getInitialTime();
        java.io.IOException iOException23 = new java.io.IOException("hi!");
        org.apache.commons.math.ode.DerivativeException derivativeException24 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) iOException23);
        org.apache.commons.math.MathException mathException25 = new org.apache.commons.math.MathException("hi!", (java.lang.Throwable) iOException23);
        java.io.IOException iOException28 = new java.io.IOException("hi!");
        java.io.IOException iOException29 = new java.io.IOException("", (java.lang.Throwable) iOException28);
        org.apache.commons.math.ode.DerivativeException derivativeException30 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) iOException28);
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel32 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double33 = continuousOutputModel32.getFinalTime();
        double double34 = continuousOutputModel32.getInitialTime();
        java.lang.Object[] objArray35 = new java.lang.Object[] { double20, mathException25, iOException28, false, continuousOutputModel32 };
        java.lang.String[] strArray44 = new java.lang.String[] { "hi!", "org.apache.commons.math.MathException: ", "hi!", "org.apache.commons.math.MathException: ", "", "" };
        org.apache.commons.math.ode.DerivativeException derivativeException45 = new org.apache.commons.math.ode.DerivativeException("", strArray44);
        java.io.IOException iOException49 = new java.io.IOException("hi!");
        org.apache.commons.math.ode.DerivativeException derivativeException50 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) iOException49);
        org.apache.commons.math.MathException mathException51 = new org.apache.commons.math.MathException("hi!", (java.lang.Throwable) iOException49);
        java.lang.Object[] objArray52 = mathException51.getArguments();
        org.apache.commons.math.MathException mathException53 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: ", (java.lang.Throwable) mathException51);
        org.apache.commons.math.MathException mathException54 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: hi!", (java.lang.Object[]) strArray44, (java.lang.Throwable) mathException51);
        org.apache.commons.math.MathException mathException55 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: hi!", objArray35, (java.lang.Throwable) mathException54);
        org.apache.commons.math.MathException mathException56 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: ", objArray12, (java.lang.Throwable) mathException55);
        java.io.IOException iOException59 = new java.io.IOException("hi!");
        java.io.IOException iOException60 = new java.io.IOException("", (java.lang.Throwable) iOException59);
        java.io.IOException iOException61 = new java.io.IOException((java.lang.Throwable) iOException60);
        org.apache.commons.math.MathException mathException62 = new org.apache.commons.math.MathException("java.io.IOException: hi!", objArray12, (java.lang.Throwable) iOException61);
        java.lang.Throwable[] throwableArray63 = mathException62.getSuppressed();
        java.lang.String[] strArray73 = new java.lang.String[] { "hi!", "org.apache.commons.math.MathException: ", "hi!", "org.apache.commons.math.MathException: ", "", "" };
        org.apache.commons.math.ode.DerivativeException derivativeException74 = new org.apache.commons.math.ode.DerivativeException("", strArray73);
        org.apache.commons.math.ode.DerivativeException derivativeException75 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray73);
        org.apache.commons.math.ode.DerivativeException derivativeException76 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: ", strArray73);
        org.apache.commons.math.MathException mathException77 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: hi!", (java.lang.Object[]) throwableArray63, (java.lang.Throwable) derivativeException76);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.MathException mathException78 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: java.io.IOException: org.apache.commons.math.MathException: hi!", objArray1, (java.lang.Throwable) derivativeException76);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[]");
        org.junit.Assert.assertNotNull(throwableArray63);
        org.junit.Assert.assertNotNull(strArray73);
    }

    @Test
    public void test01097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01097");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean1 = continuousOutputModel0.requiresDenseOutput();
        double double2 = continuousOutputModel0.getInitialTime();
        boolean boolean3 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean4 = continuousOutputModel0.requiresDenseOutput();
        double double5 = continuousOutputModel0.getFinalTime();
        double double6 = continuousOutputModel0.getFinalTime();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator7 = null;
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel0.handleStep(stepInterpolator7, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
    }

    @Test
    public void test01098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01098");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean1 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean2 = continuousOutputModel0.requiresDenseOutput();
        double double3 = continuousOutputModel0.getFinalTime();
        continuousOutputModel0.reset();
        boolean boolean5 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel7 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean8 = continuousOutputModel7.requiresDenseOutput();
        boolean boolean9 = continuousOutputModel7.requiresDenseOutput();
        double double10 = continuousOutputModel7.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel11 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean12 = continuousOutputModel11.requiresDenseOutput();
        continuousOutputModel7.append(continuousOutputModel11);
        boolean boolean14 = continuousOutputModel7.requiresDenseOutput();
        continuousOutputModel7.reset();
        continuousOutputModel0.append(continuousOutputModel7);
        boolean boolean17 = continuousOutputModel0.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel18 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double19 = continuousOutputModel18.getFinalTime();
        double double20 = continuousOutputModel18.getInitialTime();
        boolean boolean21 = continuousOutputModel18.requiresDenseOutput();
        continuousOutputModel0.append(continuousOutputModel18);
        // The following exception was thrown during execution in test generation
        try {
            double double23 = continuousOutputModel0.getInterpolatedTime();
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
    }

    @Test
    public void test01099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01099");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean1 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        boolean boolean3 = continuousOutputModel0.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel4 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean5 = continuousOutputModel4.requiresDenseOutput();
        boolean boolean6 = continuousOutputModel4.requiresDenseOutput();
        continuousOutputModel4.reset();
        boolean boolean8 = continuousOutputModel4.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel9 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double10 = continuousOutputModel9.getFinalTime();
        double double11 = continuousOutputModel9.getInitialTime();
        boolean boolean12 = continuousOutputModel9.requiresDenseOutput();
        continuousOutputModel4.append(continuousOutputModel9);
        boolean boolean14 = continuousOutputModel9.requiresDenseOutput();
        double double15 = continuousOutputModel9.getFinalTime();
        continuousOutputModel9.reset();
        double double17 = continuousOutputModel9.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel18 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean19 = continuousOutputModel18.requiresDenseOutput();
        boolean boolean20 = continuousOutputModel18.requiresDenseOutput();
        continuousOutputModel18.reset();
        boolean boolean22 = continuousOutputModel18.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel23 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double24 = continuousOutputModel23.getFinalTime();
        double double25 = continuousOutputModel23.getInitialTime();
        boolean boolean26 = continuousOutputModel23.requiresDenseOutput();
        continuousOutputModel18.append(continuousOutputModel23);
        boolean boolean28 = continuousOutputModel23.requiresDenseOutput();
        double double29 = continuousOutputModel23.getFinalTime();
        continuousOutputModel23.reset();
        double double31 = continuousOutputModel23.getInitialTime();
        boolean boolean32 = continuousOutputModel23.requiresDenseOutput();
        continuousOutputModel9.append(continuousOutputModel23);
        boolean boolean34 = continuousOutputModel9.requiresDenseOutput();
        continuousOutputModel0.append(continuousOutputModel9);
        continuousOutputModel0.reset();
        // The following exception was thrown during execution in test generation
        try {
            double double37 = continuousOutputModel0.getInterpolatedTime();
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
    }

    @Test
    public void test01100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01100");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean1 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean2 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        boolean boolean4 = continuousOutputModel0.requiresDenseOutput();
        double double5 = continuousOutputModel0.getFinalTime();
        boolean boolean6 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        continuousOutputModel0.reset();
        // The following exception was thrown during execution in test generation
        try {
            double double9 = continuousOutputModel0.getInterpolatedTime();
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
    }

    @Test
    public void test01101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01101");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double1 = continuousOutputModel0.getFinalTime();
        double double2 = continuousOutputModel0.getInitialTime();
        boolean boolean3 = continuousOutputModel0.requiresDenseOutput();
        double double4 = continuousOutputModel0.getInitialTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel5 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean6 = continuousOutputModel5.requiresDenseOutput();
        boolean boolean7 = continuousOutputModel5.requiresDenseOutput();
        continuousOutputModel5.reset();
        boolean boolean9 = continuousOutputModel5.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel10 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double11 = continuousOutputModel10.getFinalTime();
        double double12 = continuousOutputModel10.getInitialTime();
        boolean boolean13 = continuousOutputModel10.requiresDenseOutput();
        continuousOutputModel5.append(continuousOutputModel10);
        continuousOutputModel0.append(continuousOutputModel5);
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel16 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean17 = continuousOutputModel16.requiresDenseOutput();
        double double18 = continuousOutputModel16.getInitialTime();
        boolean boolean19 = continuousOutputModel16.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel20 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean21 = continuousOutputModel20.requiresDenseOutput();
        boolean boolean22 = continuousOutputModel20.requiresDenseOutput();
        continuousOutputModel16.append(continuousOutputModel20);
        continuousOutputModel5.append(continuousOutputModel16);
        double double25 = continuousOutputModel16.getFinalTime();
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray26 = continuousOutputModel16.getInterpolatedState();
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double25));
    }

    @Test
    public void test01102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01102");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean1 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean2 = continuousOutputModel0.requiresDenseOutput();
        double double3 = continuousOutputModel0.getFinalTime();
        continuousOutputModel0.reset();
        boolean boolean5 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel7 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean8 = continuousOutputModel7.requiresDenseOutput();
        boolean boolean9 = continuousOutputModel7.requiresDenseOutput();
        double double10 = continuousOutputModel7.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel11 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean12 = continuousOutputModel11.requiresDenseOutput();
        continuousOutputModel7.append(continuousOutputModel11);
        boolean boolean14 = continuousOutputModel7.requiresDenseOutput();
        continuousOutputModel7.reset();
        continuousOutputModel0.append(continuousOutputModel7);
        continuousOutputModel7.reset();
        continuousOutputModel7.reset();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel19 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double20 = continuousOutputModel19.getFinalTime();
        double double21 = continuousOutputModel19.getInitialTime();
        boolean boolean22 = continuousOutputModel19.requiresDenseOutput();
        double double23 = continuousOutputModel19.getInitialTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel24 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean25 = continuousOutputModel24.requiresDenseOutput();
        boolean boolean26 = continuousOutputModel24.requiresDenseOutput();
        continuousOutputModel24.reset();
        boolean boolean28 = continuousOutputModel24.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel29 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double30 = continuousOutputModel29.getFinalTime();
        double double31 = continuousOutputModel29.getInitialTime();
        boolean boolean32 = continuousOutputModel29.requiresDenseOutput();
        continuousOutputModel24.append(continuousOutputModel29);
        continuousOutputModel19.append(continuousOutputModel24);
        continuousOutputModel24.reset();
        continuousOutputModel24.reset();
        continuousOutputModel24.reset();
        boolean boolean38 = continuousOutputModel24.requiresDenseOutput();
        continuousOutputModel7.append(continuousOutputModel24);
        double double40 = continuousOutputModel24.getFinalTime();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator41 = null;
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel24.handleStep(stepInterpolator41, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double40));
    }

    @Test
    public void test01103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01103");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double1 = continuousOutputModel0.getFinalTime();
        double double2 = continuousOutputModel0.getInitialTime();
        double double3 = continuousOutputModel0.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel4 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double5 = continuousOutputModel4.getFinalTime();
        double double6 = continuousOutputModel4.getInitialTime();
        continuousOutputModel0.append(continuousOutputModel4);
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel8 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean9 = continuousOutputModel8.requiresDenseOutput();
        double double10 = continuousOutputModel8.getInitialTime();
        double double11 = continuousOutputModel8.getInitialTime();
        continuousOutputModel0.append(continuousOutputModel8);
        double double13 = continuousOutputModel0.getInitialTime();
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray14 = continuousOutputModel0.getInterpolatedState();
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
    }

    @Test
    public void test01104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01104");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean1 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean2 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        boolean boolean4 = continuousOutputModel0.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel5 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double6 = continuousOutputModel5.getFinalTime();
        double double7 = continuousOutputModel5.getInitialTime();
        boolean boolean8 = continuousOutputModel5.requiresDenseOutput();
        continuousOutputModel0.append(continuousOutputModel5);
        boolean boolean10 = continuousOutputModel5.requiresDenseOutput();
        double double11 = continuousOutputModel5.getFinalTime();
        continuousOutputModel5.reset();
        double double13 = continuousOutputModel5.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel14 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean15 = continuousOutputModel14.requiresDenseOutput();
        boolean boolean16 = continuousOutputModel14.requiresDenseOutput();
        continuousOutputModel14.reset();
        boolean boolean18 = continuousOutputModel14.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel19 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double20 = continuousOutputModel19.getFinalTime();
        double double21 = continuousOutputModel19.getInitialTime();
        boolean boolean22 = continuousOutputModel19.requiresDenseOutput();
        continuousOutputModel14.append(continuousOutputModel19);
        boolean boolean24 = continuousOutputModel19.requiresDenseOutput();
        double double25 = continuousOutputModel19.getFinalTime();
        continuousOutputModel19.reset();
        double double27 = continuousOutputModel19.getInitialTime();
        boolean boolean28 = continuousOutputModel19.requiresDenseOutput();
        continuousOutputModel5.append(continuousOutputModel19);
        boolean boolean30 = continuousOutputModel5.requiresDenseOutput();
        boolean boolean31 = continuousOutputModel5.requiresDenseOutput();
        java.lang.Class<?> wildcardClass32 = continuousOutputModel5.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(wildcardClass32);
    }

    @Test
    public void test01105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01105");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean1 = continuousOutputModel0.requiresDenseOutput();
        double double2 = continuousOutputModel0.getInitialTime();
        continuousOutputModel0.reset();
        continuousOutputModel0.reset();
        continuousOutputModel0.reset();
        double double6 = continuousOutputModel0.getFinalTime();
        double double7 = continuousOutputModel0.getFinalTime();
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel0.setInterpolatedTime((double) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
    }

    @Test
    public void test01106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01106");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean1 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean2 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        continuousOutputModel0.reset();
        boolean boolean5 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean6 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator8 = null;
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel0.handleStep(stepInterpolator8, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
    }

    @Test
    public void test01107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01107");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double1 = continuousOutputModel0.getFinalTime();
        double double2 = continuousOutputModel0.getInitialTime();
        boolean boolean3 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        boolean boolean5 = continuousOutputModel0.requiresDenseOutput();
        double double6 = continuousOutputModel0.getInitialTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel7 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double8 = continuousOutputModel7.getFinalTime();
        double double9 = continuousOutputModel7.getInitialTime();
        boolean boolean10 = continuousOutputModel7.requiresDenseOutput();
        double double11 = continuousOutputModel7.getInitialTime();
        continuousOutputModel7.reset();
        boolean boolean13 = continuousOutputModel7.requiresDenseOutput();
        double double14 = continuousOutputModel7.getInitialTime();
        continuousOutputModel0.append(continuousOutputModel7);
        continuousOutputModel0.reset();
        double double17 = continuousOutputModel0.getInitialTime();
        double double18 = continuousOutputModel0.getFinalTime();
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray19 = continuousOutputModel0.getInterpolatedState();
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
    }

    @Test
    public void test01108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01108");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double1 = continuousOutputModel0.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel2 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean3 = continuousOutputModel2.requiresDenseOutput();
        double double4 = continuousOutputModel2.getInitialTime();
        boolean boolean5 = continuousOutputModel2.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel6 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double7 = continuousOutputModel6.getFinalTime();
        double double8 = continuousOutputModel6.getInitialTime();
        boolean boolean9 = continuousOutputModel6.requiresDenseOutput();
        continuousOutputModel6.reset();
        boolean boolean11 = continuousOutputModel6.requiresDenseOutput();
        continuousOutputModel2.append(continuousOutputModel6);
        continuousOutputModel0.append(continuousOutputModel2);
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel14 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean15 = continuousOutputModel14.requiresDenseOutput();
        boolean boolean16 = continuousOutputModel14.requiresDenseOutput();
        continuousOutputModel14.reset();
        boolean boolean18 = continuousOutputModel14.requiresDenseOutput();
        boolean boolean19 = continuousOutputModel14.requiresDenseOutput();
        continuousOutputModel0.append(continuousOutputModel14);
        continuousOutputModel14.reset();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel22 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double23 = continuousOutputModel22.getFinalTime();
        double double24 = continuousOutputModel22.getInitialTime();
        boolean boolean25 = continuousOutputModel22.requiresDenseOutput();
        continuousOutputModel22.reset();
        double double27 = continuousOutputModel22.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel28 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double29 = continuousOutputModel28.getFinalTime();
        double double30 = continuousOutputModel28.getInitialTime();
        continuousOutputModel22.append(continuousOutputModel28);
        continuousOutputModel14.append(continuousOutputModel22);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray33 = continuousOutputModel22.getInterpolatedState();
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue(Double.isNaN(double30));
    }

    @Test
    public void test01109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01109");
        java.io.IOException iOException8 = new java.io.IOException("hi!");
        org.apache.commons.math.ode.DerivativeException derivativeException9 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) iOException8);
        org.apache.commons.math.MathException mathException10 = new org.apache.commons.math.MathException("hi!", (java.lang.Throwable) iOException8);
        java.lang.Object[] objArray11 = mathException10.getArguments();
        org.apache.commons.math.MathException mathException12 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: ", objArray11);
        org.apache.commons.math.MathException mathException13 = new org.apache.commons.math.MathException("hi!", objArray11);
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel15 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double16 = continuousOutputModel15.getFinalTime();
        double double17 = continuousOutputModel15.getInitialTime();
        boolean boolean18 = continuousOutputModel15.requiresDenseOutput();
        double double19 = continuousOutputModel15.getInitialTime();
        java.io.IOException iOException22 = new java.io.IOException("hi!");
        org.apache.commons.math.ode.DerivativeException derivativeException23 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) iOException22);
        org.apache.commons.math.MathException mathException24 = new org.apache.commons.math.MathException("hi!", (java.lang.Throwable) iOException22);
        java.io.IOException iOException27 = new java.io.IOException("hi!");
        java.io.IOException iOException28 = new java.io.IOException("", (java.lang.Throwable) iOException27);
        org.apache.commons.math.ode.DerivativeException derivativeException29 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) iOException27);
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel31 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double32 = continuousOutputModel31.getFinalTime();
        double double33 = continuousOutputModel31.getInitialTime();
        java.lang.Object[] objArray34 = new java.lang.Object[] { double19, mathException24, iOException27, false, continuousOutputModel31 };
        java.lang.String[] strArray43 = new java.lang.String[] { "hi!", "org.apache.commons.math.MathException: ", "hi!", "org.apache.commons.math.MathException: ", "", "" };
        org.apache.commons.math.ode.DerivativeException derivativeException44 = new org.apache.commons.math.ode.DerivativeException("", strArray43);
        java.io.IOException iOException48 = new java.io.IOException("hi!");
        org.apache.commons.math.ode.DerivativeException derivativeException49 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) iOException48);
        org.apache.commons.math.MathException mathException50 = new org.apache.commons.math.MathException("hi!", (java.lang.Throwable) iOException48);
        java.lang.Object[] objArray51 = mathException50.getArguments();
        org.apache.commons.math.MathException mathException52 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: ", (java.lang.Throwable) mathException50);
        org.apache.commons.math.MathException mathException53 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: hi!", (java.lang.Object[]) strArray43, (java.lang.Throwable) mathException50);
        org.apache.commons.math.MathException mathException54 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: hi!", objArray34, (java.lang.Throwable) mathException53);
        org.apache.commons.math.MathException mathException55 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: ", objArray11, (java.lang.Throwable) mathException54);
        org.apache.commons.math.MathException mathException56 = new org.apache.commons.math.MathException("", objArray11);
        org.apache.commons.math.MathException mathException58 = new org.apache.commons.math.MathException("hi!");
        java.io.IOException iOException59 = new java.io.IOException((java.lang.Throwable) mathException58);
        org.apache.commons.math.MathException mathException60 = new org.apache.commons.math.MathException((java.lang.Throwable) iOException59);
        java.lang.Throwable[] throwableArray61 = iOException59.getSuppressed();
        org.apache.commons.math.MathException mathException62 = new org.apache.commons.math.MathException("org.apache.commons.math.ode.DerivativeException: hi!", objArray11, (java.lang.Throwable) iOException59);
        org.apache.commons.math.MathException mathException63 = new org.apache.commons.math.MathException("", objArray11);
        java.lang.Object[] objArray64 = mathException63.getArguments();
        java.lang.Object[] objArray65 = mathException63.getArguments();
        java.io.IOException iOException66 = new java.io.IOException((java.lang.Throwable) mathException63);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray51), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray51), "[]");
        org.junit.Assert.assertNotNull(throwableArray61);
        org.junit.Assert.assertNotNull(objArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray64), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray64), "[]");
        org.junit.Assert.assertNotNull(objArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray65), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray65), "[]");
    }

    @Test
    public void test01110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01110");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        continuousOutputModel0.reset();
        continuousOutputModel0.reset();
        double double3 = continuousOutputModel0.getInitialTime();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator4 = null;
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel0.handleStep(stepInterpolator4, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double3));
    }

    @Test
    public void test01111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01111");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double1 = continuousOutputModel0.getFinalTime();
        double double2 = continuousOutputModel0.getInitialTime();
        double double3 = continuousOutputModel0.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel4 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double5 = continuousOutputModel4.getFinalTime();
        double double6 = continuousOutputModel4.getInitialTime();
        continuousOutputModel0.append(continuousOutputModel4);
        double double8 = continuousOutputModel0.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel9 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double10 = continuousOutputModel9.getFinalTime();
        double double11 = continuousOutputModel9.getInitialTime();
        boolean boolean12 = continuousOutputModel9.requiresDenseOutput();
        double double13 = continuousOutputModel9.getInitialTime();
        continuousOutputModel9.reset();
        boolean boolean15 = continuousOutputModel9.requiresDenseOutput();
        continuousOutputModel0.append(continuousOutputModel9);
        double double17 = continuousOutputModel0.getInitialTime();
        boolean boolean18 = continuousOutputModel0.requiresDenseOutput();
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray19 = continuousOutputModel0.getInterpolatedState();
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
    }

    @Test
    public void test01112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01112");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean1 = continuousOutputModel0.requiresDenseOutput();
        double double2 = continuousOutputModel0.getInitialTime();
        boolean boolean3 = continuousOutputModel0.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel4 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double5 = continuousOutputModel4.getFinalTime();
        double double6 = continuousOutputModel4.getInitialTime();
        boolean boolean7 = continuousOutputModel4.requiresDenseOutput();
        continuousOutputModel4.reset();
        boolean boolean9 = continuousOutputModel4.requiresDenseOutput();
        continuousOutputModel0.append(continuousOutputModel4);
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel11 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double12 = continuousOutputModel11.getFinalTime();
        double double13 = continuousOutputModel11.getInitialTime();
        boolean boolean14 = continuousOutputModel11.requiresDenseOutput();
        continuousOutputModel11.reset();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel16 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean17 = continuousOutputModel16.requiresDenseOutput();
        double double18 = continuousOutputModel16.getInitialTime();
        continuousOutputModel11.append(continuousOutputModel16);
        continuousOutputModel0.append(continuousOutputModel11);
        boolean boolean21 = continuousOutputModel0.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel22 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double23 = continuousOutputModel22.getFinalTime();
        double double24 = continuousOutputModel22.getInitialTime();
        double double25 = continuousOutputModel22.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel26 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double27 = continuousOutputModel26.getFinalTime();
        double double28 = continuousOutputModel26.getInitialTime();
        continuousOutputModel22.append(continuousOutputModel26);
        double double30 = continuousOutputModel22.getFinalTime();
        boolean boolean31 = continuousOutputModel22.requiresDenseOutput();
        boolean boolean32 = continuousOutputModel22.requiresDenseOutput();
        double double33 = continuousOutputModel22.getFinalTime();
        continuousOutputModel0.append(continuousOutputModel22);
        org.apache.commons.math.ode.StepInterpolator stepInterpolator35 = null;
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel22.handleStep(stepInterpolator35, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double33));
    }

    @Test
    public void test01113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01113");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean1 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean2 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        boolean boolean4 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean5 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean6 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean7 = continuousOutputModel0.requiresDenseOutput();
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray8 = continuousOutputModel0.getInterpolatedState();
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void test01114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01114");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double1 = continuousOutputModel0.getFinalTime();
        double double2 = continuousOutputModel0.getInitialTime();
        boolean boolean3 = continuousOutputModel0.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel4 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean5 = continuousOutputModel4.requiresDenseOutput();
        double double6 = continuousOutputModel4.getInitialTime();
        boolean boolean7 = continuousOutputModel4.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel8 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double9 = continuousOutputModel8.getFinalTime();
        double double10 = continuousOutputModel8.getInitialTime();
        boolean boolean11 = continuousOutputModel8.requiresDenseOutput();
        continuousOutputModel8.reset();
        boolean boolean13 = continuousOutputModel8.requiresDenseOutput();
        continuousOutputModel4.append(continuousOutputModel8);
        continuousOutputModel0.append(continuousOutputModel4);
        double double16 = continuousOutputModel4.getInitialTime();
        continuousOutputModel4.reset();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel18 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean19 = continuousOutputModel18.requiresDenseOutput();
        double double20 = continuousOutputModel18.getInitialTime();
        double double21 = continuousOutputModel18.getFinalTime();
        boolean boolean22 = continuousOutputModel18.requiresDenseOutput();
        continuousOutputModel18.reset();
        double double24 = continuousOutputModel18.getFinalTime();
        continuousOutputModel4.append(continuousOutputModel18);
        boolean boolean26 = continuousOutputModel18.requiresDenseOutput();
        boolean boolean27 = continuousOutputModel18.requiresDenseOutput();
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray28 = continuousOutputModel18.getInterpolatedState();
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
    }

    @Test
    public void test01115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01115");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double1 = continuousOutputModel0.getFinalTime();
        double double2 = continuousOutputModel0.getInitialTime();
        boolean boolean3 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        boolean boolean5 = continuousOutputModel0.requiresDenseOutput();
        double double6 = continuousOutputModel0.getInitialTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel7 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double8 = continuousOutputModel7.getFinalTime();
        double double9 = continuousOutputModel7.getInitialTime();
        boolean boolean10 = continuousOutputModel7.requiresDenseOutput();
        double double11 = continuousOutputModel7.getInitialTime();
        continuousOutputModel7.reset();
        boolean boolean13 = continuousOutputModel7.requiresDenseOutput();
        double double14 = continuousOutputModel7.getInitialTime();
        continuousOutputModel0.append(continuousOutputModel7);
        continuousOutputModel0.reset();
        double double17 = continuousOutputModel0.getInitialTime();
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel0.setInterpolatedTime(0.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
    }

    @Test
    public void test01116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01116");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double1 = continuousOutputModel0.getFinalTime();
        double double2 = continuousOutputModel0.getInitialTime();
        double double3 = continuousOutputModel0.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel4 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double5 = continuousOutputModel4.getFinalTime();
        double double6 = continuousOutputModel4.getInitialTime();
        continuousOutputModel0.append(continuousOutputModel4);
        double double8 = continuousOutputModel0.getFinalTime();
        boolean boolean9 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean10 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean11 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean12 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel14 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean15 = continuousOutputModel14.requiresDenseOutput();
        continuousOutputModel14.reset();
        double double17 = continuousOutputModel14.getInitialTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel18 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean19 = continuousOutputModel18.requiresDenseOutput();
        boolean boolean20 = continuousOutputModel18.requiresDenseOutput();
        double double21 = continuousOutputModel18.getFinalTime();
        double double22 = continuousOutputModel18.getInitialTime();
        boolean boolean23 = continuousOutputModel18.requiresDenseOutput();
        continuousOutputModel14.append(continuousOutputModel18);
        continuousOutputModel0.append(continuousOutputModel18);
        continuousOutputModel0.reset();
        boolean boolean27 = continuousOutputModel0.requiresDenseOutput();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator28 = null;
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel0.handleStep(stepInterpolator28, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
    }

    @Test
    public void test01117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01117");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double1 = continuousOutputModel0.getFinalTime();
        double double2 = continuousOutputModel0.getInitialTime();
        boolean boolean3 = continuousOutputModel0.requiresDenseOutput();
        double double4 = continuousOutputModel0.getInitialTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel5 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean6 = continuousOutputModel5.requiresDenseOutput();
        boolean boolean7 = continuousOutputModel5.requiresDenseOutput();
        continuousOutputModel5.reset();
        boolean boolean9 = continuousOutputModel5.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel10 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double11 = continuousOutputModel10.getFinalTime();
        double double12 = continuousOutputModel10.getInitialTime();
        boolean boolean13 = continuousOutputModel10.requiresDenseOutput();
        continuousOutputModel5.append(continuousOutputModel10);
        continuousOutputModel0.append(continuousOutputModel5);
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel16 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean17 = continuousOutputModel16.requiresDenseOutput();
        double double18 = continuousOutputModel16.getInitialTime();
        boolean boolean19 = continuousOutputModel16.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel20 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean21 = continuousOutputModel20.requiresDenseOutput();
        boolean boolean22 = continuousOutputModel20.requiresDenseOutput();
        continuousOutputModel16.append(continuousOutputModel20);
        continuousOutputModel5.append(continuousOutputModel16);
        double double25 = continuousOutputModel5.getFinalTime();
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray26 = continuousOutputModel5.getInterpolatedState();
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double25));
    }

    @Test
    public void test01118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01118");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel1 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean2 = continuousOutputModel1.requiresDenseOutput();
        boolean boolean3 = continuousOutputModel1.requiresDenseOutput();
        double double4 = continuousOutputModel1.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel5 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean6 = continuousOutputModel5.requiresDenseOutput();
        continuousOutputModel1.append(continuousOutputModel5);
        continuousOutputModel0.append(continuousOutputModel5);
        boolean boolean9 = continuousOutputModel5.requiresDenseOutput();
        double double10 = continuousOutputModel5.getInitialTime();
        continuousOutputModel5.reset();
        double double12 = continuousOutputModel5.getInitialTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel13 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean14 = continuousOutputModel13.requiresDenseOutput();
        boolean boolean15 = continuousOutputModel13.requiresDenseOutput();
        continuousOutputModel13.reset();
        boolean boolean17 = continuousOutputModel13.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel18 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double19 = continuousOutputModel18.getFinalTime();
        double double20 = continuousOutputModel18.getInitialTime();
        boolean boolean21 = continuousOutputModel18.requiresDenseOutput();
        continuousOutputModel13.append(continuousOutputModel18);
        continuousOutputModel18.reset();
        double double24 = continuousOutputModel18.getInitialTime();
        double double25 = continuousOutputModel18.getFinalTime();
        continuousOutputModel5.append(continuousOutputModel18);
        org.apache.commons.math.ode.StepInterpolator stepInterpolator27 = null;
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel5.handleStep(stepInterpolator27, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue(Double.isNaN(double25));
    }

    @Test
    public void test01119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01119");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double1 = continuousOutputModel0.getFinalTime();
        double double2 = continuousOutputModel0.getInitialTime();
        double double3 = continuousOutputModel0.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel4 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double5 = continuousOutputModel4.getFinalTime();
        double double6 = continuousOutputModel4.getInitialTime();
        continuousOutputModel0.append(continuousOutputModel4);
        double double8 = continuousOutputModel0.getInitialTime();
        double double9 = continuousOutputModel0.getInitialTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel10 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double11 = continuousOutputModel10.getFinalTime();
        double double12 = continuousOutputModel10.getInitialTime();
        continuousOutputModel10.reset();
        double double14 = continuousOutputModel10.getInitialTime();
        continuousOutputModel0.append(continuousOutputModel10);
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel16 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean17 = continuousOutputModel16.requiresDenseOutput();
        boolean boolean18 = continuousOutputModel16.requiresDenseOutput();
        continuousOutputModel16.reset();
        boolean boolean20 = continuousOutputModel16.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel21 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean22 = continuousOutputModel21.requiresDenseOutput();
        double double23 = continuousOutputModel21.getInitialTime();
        boolean boolean24 = continuousOutputModel21.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel25 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean26 = continuousOutputModel25.requiresDenseOutput();
        boolean boolean27 = continuousOutputModel25.requiresDenseOutput();
        continuousOutputModel21.append(continuousOutputModel25);
        continuousOutputModel16.append(continuousOutputModel25);
        continuousOutputModel10.append(continuousOutputModel25);
        continuousOutputModel25.reset();
        continuousOutputModel25.reset();
        boolean boolean33 = continuousOutputModel25.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel34 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean35 = continuousOutputModel34.requiresDenseOutput();
        boolean boolean36 = continuousOutputModel34.requiresDenseOutput();
        continuousOutputModel34.reset();
        continuousOutputModel34.reset();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel39 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double40 = continuousOutputModel39.getFinalTime();
        double double41 = continuousOutputModel39.getInitialTime();
        boolean boolean42 = continuousOutputModel39.requiresDenseOutput();
        continuousOutputModel39.reset();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel44 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean45 = continuousOutputModel44.requiresDenseOutput();
        double double46 = continuousOutputModel44.getInitialTime();
        continuousOutputModel39.append(continuousOutputModel44);
        continuousOutputModel34.append(continuousOutputModel44);
        continuousOutputModel25.append(continuousOutputModel44);
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel44.setInterpolatedTime((double) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double46));
    }

    @Test
    public void test01120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01120");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean1 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean2 = continuousOutputModel0.requiresDenseOutput();
        double double3 = continuousOutputModel0.getFinalTime();
        continuousOutputModel0.reset();
        boolean boolean5 = continuousOutputModel0.requiresDenseOutput();
        double double6 = continuousOutputModel0.getFinalTime();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator7 = null;
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel0.handleStep(stepInterpolator7, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
    }

    @Test
    public void test01121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01121");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean1 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean2 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        boolean boolean4 = continuousOutputModel0.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel5 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double6 = continuousOutputModel5.getFinalTime();
        double double7 = continuousOutputModel5.getInitialTime();
        boolean boolean8 = continuousOutputModel5.requiresDenseOutput();
        continuousOutputModel0.append(continuousOutputModel5);
        boolean boolean10 = continuousOutputModel5.requiresDenseOutput();
        double double11 = continuousOutputModel5.getFinalTime();
        continuousOutputModel5.reset();
        double double13 = continuousOutputModel5.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel14 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean15 = continuousOutputModel14.requiresDenseOutput();
        boolean boolean16 = continuousOutputModel14.requiresDenseOutput();
        continuousOutputModel14.reset();
        boolean boolean18 = continuousOutputModel14.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel19 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double20 = continuousOutputModel19.getFinalTime();
        double double21 = continuousOutputModel19.getInitialTime();
        boolean boolean22 = continuousOutputModel19.requiresDenseOutput();
        continuousOutputModel14.append(continuousOutputModel19);
        boolean boolean24 = continuousOutputModel19.requiresDenseOutput();
        double double25 = continuousOutputModel19.getFinalTime();
        continuousOutputModel19.reset();
        double double27 = continuousOutputModel19.getInitialTime();
        boolean boolean28 = continuousOutputModel19.requiresDenseOutput();
        continuousOutputModel5.append(continuousOutputModel19);
        boolean boolean30 = continuousOutputModel19.requiresDenseOutput();
        boolean boolean31 = continuousOutputModel19.requiresDenseOutput();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
    }

    @Test
    public void test01122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01122");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double1 = continuousOutputModel0.getFinalTime();
        double double2 = continuousOutputModel0.getInitialTime();
        boolean boolean3 = continuousOutputModel0.requiresDenseOutput();
        double double4 = continuousOutputModel0.getInitialTime();
        continuousOutputModel0.reset();
        double double6 = continuousOutputModel0.getInitialTime();
        continuousOutputModel0.reset();
        continuousOutputModel0.reset();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel9 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean10 = continuousOutputModel9.requiresDenseOutput();
        double double11 = continuousOutputModel9.getInitialTime();
        boolean boolean12 = continuousOutputModel9.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel13 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean14 = continuousOutputModel13.requiresDenseOutput();
        boolean boolean15 = continuousOutputModel13.requiresDenseOutput();
        continuousOutputModel9.append(continuousOutputModel13);
        boolean boolean17 = continuousOutputModel9.requiresDenseOutput();
        double double18 = continuousOutputModel9.getFinalTime();
        continuousOutputModel0.append(continuousOutputModel9);
        org.apache.commons.math.ode.StepInterpolator stepInterpolator20 = null;
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel0.handleStep(stepInterpolator20, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
    }

    @Test
    public void test01123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01123");
        java.lang.String[] strArray10 = new java.lang.String[] { "hi!", "org.apache.commons.math.MathException: ", "hi!", "org.apache.commons.math.MathException: ", "", "" };
        org.apache.commons.math.ode.DerivativeException derivativeException11 = new org.apache.commons.math.ode.DerivativeException("", strArray10);
        org.apache.commons.math.ode.DerivativeException derivativeException12 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray10);
        org.apache.commons.math.ode.DerivativeException derivativeException13 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: hi!", strArray10);
        java.io.IOException iOException14 = new java.io.IOException((java.lang.Throwable) derivativeException13);
        org.apache.commons.math.MathException mathException15 = new org.apache.commons.math.MathException((java.lang.Throwable) iOException14);
        java.lang.Object[] objArray16 = mathException15.getArguments();
        org.apache.commons.math.MathException mathException17 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException15);
        java.lang.Object[] objArray18 = mathException15.getArguments();
        java.lang.String[] strArray27 = new java.lang.String[] { "hi!", "org.apache.commons.math.MathException: ", "hi!", "org.apache.commons.math.MathException: ", "", "" };
        org.apache.commons.math.ode.DerivativeException derivativeException28 = new org.apache.commons.math.ode.DerivativeException("", strArray27);
        java.io.IOException iOException34 = new java.io.IOException("hi!");
        org.apache.commons.math.ode.DerivativeException derivativeException35 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) iOException34);
        org.apache.commons.math.MathException mathException36 = new org.apache.commons.math.MathException("hi!", (java.lang.Throwable) iOException34);
        java.lang.Object[] objArray37 = mathException36.getArguments();
        org.apache.commons.math.MathException mathException38 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: ", objArray37);
        org.apache.commons.math.MathException mathException39 = new org.apache.commons.math.MathException("hi!", objArray37);
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel41 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double42 = continuousOutputModel41.getFinalTime();
        double double43 = continuousOutputModel41.getInitialTime();
        boolean boolean44 = continuousOutputModel41.requiresDenseOutput();
        double double45 = continuousOutputModel41.getInitialTime();
        java.io.IOException iOException48 = new java.io.IOException("hi!");
        org.apache.commons.math.ode.DerivativeException derivativeException49 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) iOException48);
        org.apache.commons.math.MathException mathException50 = new org.apache.commons.math.MathException("hi!", (java.lang.Throwable) iOException48);
        java.io.IOException iOException53 = new java.io.IOException("hi!");
        java.io.IOException iOException54 = new java.io.IOException("", (java.lang.Throwable) iOException53);
        org.apache.commons.math.ode.DerivativeException derivativeException55 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) iOException53);
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel57 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double58 = continuousOutputModel57.getFinalTime();
        double double59 = continuousOutputModel57.getInitialTime();
        java.lang.Object[] objArray60 = new java.lang.Object[] { double45, mathException50, iOException53, false, continuousOutputModel57 };
        java.lang.String[] strArray69 = new java.lang.String[] { "hi!", "org.apache.commons.math.MathException: ", "hi!", "org.apache.commons.math.MathException: ", "", "" };
        org.apache.commons.math.ode.DerivativeException derivativeException70 = new org.apache.commons.math.ode.DerivativeException("", strArray69);
        java.io.IOException iOException74 = new java.io.IOException("hi!");
        org.apache.commons.math.ode.DerivativeException derivativeException75 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) iOException74);
        org.apache.commons.math.MathException mathException76 = new org.apache.commons.math.MathException("hi!", (java.lang.Throwable) iOException74);
        java.lang.Object[] objArray77 = mathException76.getArguments();
        org.apache.commons.math.MathException mathException78 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: ", (java.lang.Throwable) mathException76);
        org.apache.commons.math.MathException mathException79 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: hi!", (java.lang.Object[]) strArray69, (java.lang.Throwable) mathException76);
        org.apache.commons.math.MathException mathException80 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: hi!", objArray60, (java.lang.Throwable) mathException79);
        org.apache.commons.math.MathException mathException81 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: ", objArray37, (java.lang.Throwable) mathException80);
        derivativeException28.addSuppressed((java.lang.Throwable) mathException80);
        org.apache.commons.math.MathException mathException83 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException80);
        java.io.IOException iOException84 = new java.io.IOException((java.lang.Throwable) mathException80);
        java.io.IOException iOException85 = new java.io.IOException("java.io.IOException: java.io.IOException: org.apache.commons.math.MathException: hi!", (java.lang.Throwable) iOException84);
        org.apache.commons.math.MathException mathException86 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: java.io.IOException: org.apache.commons.math.MathException: hi!", objArray18, (java.lang.Throwable) iOException84);
        java.lang.String str87 = iOException84.toString();
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(objArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray16), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray16), "[]");
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[]");
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertTrue(Double.isNaN(double58));
        org.junit.Assert.assertTrue(Double.isNaN(double59));
        org.junit.Assert.assertNotNull(objArray60);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertNotNull(objArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray77), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray77), "[]");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "java.io.IOException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: hi!" + "'", str87, "java.io.IOException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: hi!");
    }

    @Test
    public void test01124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01124");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean1 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean2 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        boolean boolean4 = continuousOutputModel0.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel5 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double6 = continuousOutputModel5.getFinalTime();
        double double7 = continuousOutputModel5.getInitialTime();
        boolean boolean8 = continuousOutputModel5.requiresDenseOutput();
        continuousOutputModel0.append(continuousOutputModel5);
        continuousOutputModel5.reset();
        double double11 = continuousOutputModel5.getInitialTime();
        double double12 = continuousOutputModel5.getFinalTime();
        continuousOutputModel5.reset();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel14 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean15 = continuousOutputModel14.requiresDenseOutput();
        boolean boolean16 = continuousOutputModel14.requiresDenseOutput();
        continuousOutputModel14.reset();
        continuousOutputModel14.reset();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel19 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double20 = continuousOutputModel19.getFinalTime();
        double double21 = continuousOutputModel19.getInitialTime();
        boolean boolean22 = continuousOutputModel19.requiresDenseOutput();
        continuousOutputModel19.reset();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel24 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean25 = continuousOutputModel24.requiresDenseOutput();
        double double26 = continuousOutputModel24.getInitialTime();
        continuousOutputModel19.append(continuousOutputModel24);
        continuousOutputModel14.append(continuousOutputModel24);
        boolean boolean29 = continuousOutputModel14.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel30 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double31 = continuousOutputModel30.getFinalTime();
        double double32 = continuousOutputModel30.getInitialTime();
        double double33 = continuousOutputModel30.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel34 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double35 = continuousOutputModel34.getFinalTime();
        double double36 = continuousOutputModel34.getInitialTime();
        continuousOutputModel30.append(continuousOutputModel34);
        double double38 = continuousOutputModel30.getInitialTime();
        double double39 = continuousOutputModel30.getInitialTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel40 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double41 = continuousOutputModel40.getFinalTime();
        double double42 = continuousOutputModel40.getInitialTime();
        continuousOutputModel40.reset();
        double double44 = continuousOutputModel40.getInitialTime();
        continuousOutputModel30.append(continuousOutputModel40);
        continuousOutputModel14.append(continuousOutputModel30);
        continuousOutputModel5.append(continuousOutputModel14);
        boolean boolean48 = continuousOutputModel14.requiresDenseOutput();
        boolean boolean49 = continuousOutputModel14.requiresDenseOutput();
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel14.setInterpolatedTime((-1.0d));
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
    }

    @Test
    public void test01125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01125");
        java.io.IOException iOException4 = new java.io.IOException("hi!");
        org.apache.commons.math.ode.DerivativeException derivativeException5 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) iOException4);
        java.lang.Object[] objArray6 = derivativeException5.getArguments();
        java.lang.String[] strArray14 = new java.lang.String[] { "hi!", "org.apache.commons.math.MathException: ", "hi!", "org.apache.commons.math.MathException: ", "", "" };
        org.apache.commons.math.ode.DerivativeException derivativeException15 = new org.apache.commons.math.ode.DerivativeException("", strArray14);
        java.io.IOException iOException17 = new java.io.IOException("hi!");
        org.apache.commons.math.ode.DerivativeException derivativeException18 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) iOException17);
        derivativeException15.addSuppressed((java.lang.Throwable) iOException17);
        org.apache.commons.math.MathException mathException20 = new org.apache.commons.math.MathException("hi!", objArray6, (java.lang.Throwable) derivativeException15);
        java.io.IOException iOException25 = new java.io.IOException("hi!");
        java.io.IOException iOException26 = new java.io.IOException("", (java.lang.Throwable) iOException25);
        org.apache.commons.math.MathException mathException27 = new org.apache.commons.math.MathException((java.lang.Throwable) iOException25);
        java.io.IOException iOException28 = new java.io.IOException("java.io.IOException: hi!", (java.lang.Throwable) iOException25);
        java.lang.Throwable[] throwableArray29 = iOException25.getSuppressed();
        org.apache.commons.math.MathException mathException30 = new org.apache.commons.math.MathException("java.io.IOException: org.apache.commons.math.MathException: java.io.IOException: java.io.IOException: org.apache.commons.math.ode.DerivativeException: hi!", (java.lang.Object[]) throwableArray29);
        org.apache.commons.math.MathException mathException31 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.MathException: ", objArray6, (java.lang.Throwable) mathException30);
        java.lang.String[] strArray39 = new java.lang.String[] { "hi!", "org.apache.commons.math.MathException: ", "hi!", "org.apache.commons.math.MathException: ", "", "" };
        org.apache.commons.math.ode.DerivativeException derivativeException40 = new org.apache.commons.math.ode.DerivativeException("", strArray39);
        java.io.IOException iOException46 = new java.io.IOException("hi!");
        org.apache.commons.math.ode.DerivativeException derivativeException47 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) iOException46);
        org.apache.commons.math.MathException mathException48 = new org.apache.commons.math.MathException("hi!", (java.lang.Throwable) iOException46);
        java.lang.Object[] objArray49 = mathException48.getArguments();
        org.apache.commons.math.MathException mathException50 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: ", objArray49);
        org.apache.commons.math.MathException mathException51 = new org.apache.commons.math.MathException("hi!", objArray49);
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel53 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double54 = continuousOutputModel53.getFinalTime();
        double double55 = continuousOutputModel53.getInitialTime();
        boolean boolean56 = continuousOutputModel53.requiresDenseOutput();
        double double57 = continuousOutputModel53.getInitialTime();
        java.io.IOException iOException60 = new java.io.IOException("hi!");
        org.apache.commons.math.ode.DerivativeException derivativeException61 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) iOException60);
        org.apache.commons.math.MathException mathException62 = new org.apache.commons.math.MathException("hi!", (java.lang.Throwable) iOException60);
        java.io.IOException iOException65 = new java.io.IOException("hi!");
        java.io.IOException iOException66 = new java.io.IOException("", (java.lang.Throwable) iOException65);
        org.apache.commons.math.ode.DerivativeException derivativeException67 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) iOException65);
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel69 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double70 = continuousOutputModel69.getFinalTime();
        double double71 = continuousOutputModel69.getInitialTime();
        java.lang.Object[] objArray72 = new java.lang.Object[] { double57, mathException62, iOException65, false, continuousOutputModel69 };
        java.lang.String[] strArray81 = new java.lang.String[] { "hi!", "org.apache.commons.math.MathException: ", "hi!", "org.apache.commons.math.MathException: ", "", "" };
        org.apache.commons.math.ode.DerivativeException derivativeException82 = new org.apache.commons.math.ode.DerivativeException("", strArray81);
        java.io.IOException iOException86 = new java.io.IOException("hi!");
        org.apache.commons.math.ode.DerivativeException derivativeException87 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) iOException86);
        org.apache.commons.math.MathException mathException88 = new org.apache.commons.math.MathException("hi!", (java.lang.Throwable) iOException86);
        java.lang.Object[] objArray89 = mathException88.getArguments();
        org.apache.commons.math.MathException mathException90 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: ", (java.lang.Throwable) mathException88);
        org.apache.commons.math.MathException mathException91 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: hi!", (java.lang.Object[]) strArray81, (java.lang.Throwable) mathException88);
        org.apache.commons.math.MathException mathException92 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: hi!", objArray72, (java.lang.Throwable) mathException91);
        org.apache.commons.math.MathException mathException93 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: ", objArray49, (java.lang.Throwable) mathException92);
        derivativeException40.addSuppressed((java.lang.Throwable) mathException92);
        org.apache.commons.math.MathException mathException95 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException92);
        java.io.IOException iOException96 = new java.io.IOException((java.lang.Throwable) mathException92);
        java.io.IOException iOException97 = new java.io.IOException((java.lang.Throwable) mathException92);
        org.apache.commons.math.MathException mathException98 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException92);
        org.apache.commons.math.MathException mathException99 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: java.io.IOException: org.apache.commons.math.ode.DerivativeException: hi!", objArray6, (java.lang.Throwable) mathException92);
        org.junit.Assert.assertNotNull(objArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray6), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray6), "[]");
        org.junit.Assert.assertNotNull(strArray14);
        org.junit.Assert.assertNotNull(throwableArray29);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertNotNull(objArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray49), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray49), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertTrue(Double.isNaN(double55));
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double57));
        org.junit.Assert.assertTrue(Double.isNaN(double70));
        org.junit.Assert.assertTrue(Double.isNaN(double71));
        org.junit.Assert.assertNotNull(objArray72);
        org.junit.Assert.assertNotNull(strArray81);
        org.junit.Assert.assertNotNull(objArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray89), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray89), "[]");
    }

    @Test
    public void test01126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01126");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double1 = continuousOutputModel0.getFinalTime();
        double double2 = continuousOutputModel0.getInitialTime();
        double double3 = continuousOutputModel0.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel4 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double5 = continuousOutputModel4.getFinalTime();
        double double6 = continuousOutputModel4.getInitialTime();
        continuousOutputModel0.append(continuousOutputModel4);
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel8 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean9 = continuousOutputModel8.requiresDenseOutput();
        double double10 = continuousOutputModel8.getInitialTime();
        double double11 = continuousOutputModel8.getInitialTime();
        continuousOutputModel0.append(continuousOutputModel8);
        boolean boolean13 = continuousOutputModel0.requiresDenseOutput();
        double double14 = continuousOutputModel0.getInitialTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel15 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean16 = continuousOutputModel15.requiresDenseOutput();
        boolean boolean17 = continuousOutputModel15.requiresDenseOutput();
        double double18 = continuousOutputModel15.getFinalTime();
        continuousOutputModel15.reset();
        boolean boolean20 = continuousOutputModel15.requiresDenseOutput();
        continuousOutputModel15.reset();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel22 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean23 = continuousOutputModel22.requiresDenseOutput();
        boolean boolean24 = continuousOutputModel22.requiresDenseOutput();
        double double25 = continuousOutputModel22.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel26 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean27 = continuousOutputModel26.requiresDenseOutput();
        continuousOutputModel22.append(continuousOutputModel26);
        boolean boolean29 = continuousOutputModel22.requiresDenseOutput();
        continuousOutputModel22.reset();
        continuousOutputModel15.append(continuousOutputModel22);
        boolean boolean32 = continuousOutputModel15.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel33 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double34 = continuousOutputModel33.getFinalTime();
        double double35 = continuousOutputModel33.getInitialTime();
        boolean boolean36 = continuousOutputModel33.requiresDenseOutput();
        continuousOutputModel15.append(continuousOutputModel33);
        continuousOutputModel0.append(continuousOutputModel33);
        double double39 = continuousOutputModel33.getInitialTime();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator40 = null;
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel33.handleStep(stepInterpolator40, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double39));
    }

    @Test
    public void test01127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01127");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double1 = continuousOutputModel0.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel2 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean3 = continuousOutputModel2.requiresDenseOutput();
        double double4 = continuousOutputModel2.getInitialTime();
        boolean boolean5 = continuousOutputModel2.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel6 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double7 = continuousOutputModel6.getFinalTime();
        double double8 = continuousOutputModel6.getInitialTime();
        boolean boolean9 = continuousOutputModel6.requiresDenseOutput();
        continuousOutputModel6.reset();
        boolean boolean11 = continuousOutputModel6.requiresDenseOutput();
        continuousOutputModel2.append(continuousOutputModel6);
        continuousOutputModel0.append(continuousOutputModel2);
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel14 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean15 = continuousOutputModel14.requiresDenseOutput();
        boolean boolean16 = continuousOutputModel14.requiresDenseOutput();
        continuousOutputModel14.reset();
        boolean boolean18 = continuousOutputModel14.requiresDenseOutput();
        boolean boolean19 = continuousOutputModel14.requiresDenseOutput();
        continuousOutputModel0.append(continuousOutputModel14);
        boolean boolean21 = continuousOutputModel14.requiresDenseOutput();
        continuousOutputModel14.reset();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel23 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean24 = continuousOutputModel23.requiresDenseOutput();
        boolean boolean25 = continuousOutputModel23.requiresDenseOutput();
        double double26 = continuousOutputModel23.getFinalTime();
        continuousOutputModel23.reset();
        boolean boolean28 = continuousOutputModel23.requiresDenseOutput();
        continuousOutputModel23.reset();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel30 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean31 = continuousOutputModel30.requiresDenseOutput();
        boolean boolean32 = continuousOutputModel30.requiresDenseOutput();
        double double33 = continuousOutputModel30.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel34 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean35 = continuousOutputModel34.requiresDenseOutput();
        continuousOutputModel30.append(continuousOutputModel34);
        boolean boolean37 = continuousOutputModel30.requiresDenseOutput();
        continuousOutputModel30.reset();
        continuousOutputModel23.append(continuousOutputModel30);
        boolean boolean40 = continuousOutputModel23.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel41 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double42 = continuousOutputModel41.getFinalTime();
        double double43 = continuousOutputModel41.getInitialTime();
        boolean boolean44 = continuousOutputModel41.requiresDenseOutput();
        continuousOutputModel23.append(continuousOutputModel41);
        continuousOutputModel14.append(continuousOutputModel41);
        java.lang.Class<?> wildcardClass47 = continuousOutputModel14.getClass();
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(wildcardClass47);
    }

    @Test
    public void test01128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01128");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean1 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean2 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        continuousOutputModel0.reset();
        continuousOutputModel0.reset();
        boolean boolean6 = continuousOutputModel0.requiresDenseOutput();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator7 = null;
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel0.handleStep(stepInterpolator7, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
    }

    @Test
    public void test01129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01129");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double1 = continuousOutputModel0.getFinalTime();
        double double2 = continuousOutputModel0.getInitialTime();
        boolean boolean3 = continuousOutputModel0.requiresDenseOutput();
        double double4 = continuousOutputModel0.getInitialTime();
        continuousOutputModel0.reset();
        boolean boolean6 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean7 = continuousOutputModel0.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel8 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean9 = continuousOutputModel8.requiresDenseOutput();
        double double10 = continuousOutputModel8.getInitialTime();
        double double11 = continuousOutputModel8.getInitialTime();
        continuousOutputModel0.append(continuousOutputModel8);
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel13 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double14 = continuousOutputModel13.getFinalTime();
        double double15 = continuousOutputModel13.getInitialTime();
        boolean boolean16 = continuousOutputModel13.requiresDenseOutput();
        double double17 = continuousOutputModel13.getInitialTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel18 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean19 = continuousOutputModel18.requiresDenseOutput();
        boolean boolean20 = continuousOutputModel18.requiresDenseOutput();
        continuousOutputModel18.reset();
        boolean boolean22 = continuousOutputModel18.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel23 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double24 = continuousOutputModel23.getFinalTime();
        double double25 = continuousOutputModel23.getInitialTime();
        boolean boolean26 = continuousOutputModel23.requiresDenseOutput();
        continuousOutputModel18.append(continuousOutputModel23);
        continuousOutputModel13.append(continuousOutputModel18);
        boolean boolean29 = continuousOutputModel13.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel30 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean31 = continuousOutputModel30.requiresDenseOutput();
        continuousOutputModel30.reset();
        boolean boolean33 = continuousOutputModel30.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel34 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean35 = continuousOutputModel34.requiresDenseOutput();
        boolean boolean36 = continuousOutputModel34.requiresDenseOutput();
        continuousOutputModel34.reset();
        boolean boolean38 = continuousOutputModel34.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel39 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double40 = continuousOutputModel39.getFinalTime();
        double double41 = continuousOutputModel39.getInitialTime();
        boolean boolean42 = continuousOutputModel39.requiresDenseOutput();
        continuousOutputModel34.append(continuousOutputModel39);
        boolean boolean44 = continuousOutputModel39.requiresDenseOutput();
        double double45 = continuousOutputModel39.getFinalTime();
        continuousOutputModel39.reset();
        double double47 = continuousOutputModel39.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel48 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean49 = continuousOutputModel48.requiresDenseOutput();
        boolean boolean50 = continuousOutputModel48.requiresDenseOutput();
        continuousOutputModel48.reset();
        boolean boolean52 = continuousOutputModel48.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel53 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double54 = continuousOutputModel53.getFinalTime();
        double double55 = continuousOutputModel53.getInitialTime();
        boolean boolean56 = continuousOutputModel53.requiresDenseOutput();
        continuousOutputModel48.append(continuousOutputModel53);
        boolean boolean58 = continuousOutputModel53.requiresDenseOutput();
        double double59 = continuousOutputModel53.getFinalTime();
        continuousOutputModel53.reset();
        double double61 = continuousOutputModel53.getInitialTime();
        boolean boolean62 = continuousOutputModel53.requiresDenseOutput();
        continuousOutputModel39.append(continuousOutputModel53);
        boolean boolean64 = continuousOutputModel39.requiresDenseOutput();
        continuousOutputModel30.append(continuousOutputModel39);
        continuousOutputModel39.reset();
        continuousOutputModel13.append(continuousOutputModel39);
        boolean boolean68 = continuousOutputModel13.requiresDenseOutput();
        continuousOutputModel0.append(continuousOutputModel13);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray70 = continuousOutputModel13.getInterpolatedState();
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertTrue(Double.isNaN(double55));
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double59));
        org.junit.Assert.assertTrue(Double.isNaN(double61));
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
    }

    @Test
    public void test01130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01130");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double1 = continuousOutputModel0.getFinalTime();
        double double2 = continuousOutputModel0.getInitialTime();
        continuousOutputModel0.reset();
        boolean boolean4 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        // The following exception was thrown during execution in test generation
        try {
            double double6 = continuousOutputModel0.getInterpolatedTime();
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
    }

    @Test
    public void test01131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01131");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double1 = continuousOutputModel0.getFinalTime();
        double double2 = continuousOutputModel0.getInitialTime();
        boolean boolean3 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        continuousOutputModel0.reset();
        boolean boolean6 = continuousOutputModel0.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel7 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double8 = continuousOutputModel7.getFinalTime();
        double double9 = continuousOutputModel7.getInitialTime();
        continuousOutputModel7.reset();
        boolean boolean11 = continuousOutputModel7.requiresDenseOutput();
        double double12 = continuousOutputModel7.getFinalTime();
        continuousOutputModel0.append(continuousOutputModel7);
        org.apache.commons.math.ode.StepInterpolator stepInterpolator14 = null;
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel7.handleStep(stepInterpolator14, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
    }

    @Test
    public void test01132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01132");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean1 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean2 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        continuousOutputModel0.reset();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel5 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double6 = continuousOutputModel5.getFinalTime();
        double double7 = continuousOutputModel5.getInitialTime();
        boolean boolean8 = continuousOutputModel5.requiresDenseOutput();
        continuousOutputModel5.reset();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel10 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean11 = continuousOutputModel10.requiresDenseOutput();
        double double12 = continuousOutputModel10.getInitialTime();
        continuousOutputModel5.append(continuousOutputModel10);
        continuousOutputModel0.append(continuousOutputModel10);
        boolean boolean15 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean16 = continuousOutputModel0.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel17 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double18 = continuousOutputModel17.getFinalTime();
        double double19 = continuousOutputModel17.getInitialTime();
        boolean boolean20 = continuousOutputModel17.requiresDenseOutput();
        double double21 = continuousOutputModel17.getInitialTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel22 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean23 = continuousOutputModel22.requiresDenseOutput();
        boolean boolean24 = continuousOutputModel22.requiresDenseOutput();
        continuousOutputModel22.reset();
        boolean boolean26 = continuousOutputModel22.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel27 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double28 = continuousOutputModel27.getFinalTime();
        double double29 = continuousOutputModel27.getInitialTime();
        boolean boolean30 = continuousOutputModel27.requiresDenseOutput();
        continuousOutputModel22.append(continuousOutputModel27);
        continuousOutputModel17.append(continuousOutputModel22);
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel33 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean34 = continuousOutputModel33.requiresDenseOutput();
        double double35 = continuousOutputModel33.getInitialTime();
        boolean boolean36 = continuousOutputModel33.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel37 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean38 = continuousOutputModel37.requiresDenseOutput();
        boolean boolean39 = continuousOutputModel37.requiresDenseOutput();
        continuousOutputModel33.append(continuousOutputModel37);
        continuousOutputModel22.append(continuousOutputModel33);
        boolean boolean42 = continuousOutputModel33.requiresDenseOutput();
        continuousOutputModel33.reset();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel44 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double45 = continuousOutputModel44.getFinalTime();
        double double46 = continuousOutputModel44.getInitialTime();
        double double47 = continuousOutputModel44.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel48 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double49 = continuousOutputModel48.getFinalTime();
        double double50 = continuousOutputModel48.getInitialTime();
        continuousOutputModel44.append(continuousOutputModel48);
        double double52 = continuousOutputModel44.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel53 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double54 = continuousOutputModel53.getFinalTime();
        double double55 = continuousOutputModel53.getInitialTime();
        boolean boolean56 = continuousOutputModel53.requiresDenseOutput();
        double double57 = continuousOutputModel53.getInitialTime();
        continuousOutputModel53.reset();
        boolean boolean59 = continuousOutputModel53.requiresDenseOutput();
        continuousOutputModel44.append(continuousOutputModel53);
        continuousOutputModel33.append(continuousOutputModel44);
        continuousOutputModel0.append(continuousOutputModel44);
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel44.setInterpolatedTime((double) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertTrue(Double.isNaN(double50));
        org.junit.Assert.assertTrue(Double.isNaN(double52));
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertTrue(Double.isNaN(double55));
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double57));
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
    }

    @Test
    public void test01133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01133");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean1 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean2 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        continuousOutputModel0.reset();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel5 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double6 = continuousOutputModel5.getFinalTime();
        double double7 = continuousOutputModel5.getInitialTime();
        boolean boolean8 = continuousOutputModel5.requiresDenseOutput();
        continuousOutputModel5.reset();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel10 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean11 = continuousOutputModel10.requiresDenseOutput();
        double double12 = continuousOutputModel10.getInitialTime();
        continuousOutputModel5.append(continuousOutputModel10);
        continuousOutputModel0.append(continuousOutputModel10);
        boolean boolean15 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean16 = continuousOutputModel0.requiresDenseOutput();
        double double17 = continuousOutputModel0.getFinalTime();
        boolean boolean18 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean19 = continuousOutputModel0.requiresDenseOutput();
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray20 = continuousOutputModel0.getInterpolatedState();
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
    }

    @Test
    public void test01134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01134");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean1 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean2 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        boolean boolean4 = continuousOutputModel0.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel5 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double6 = continuousOutputModel5.getFinalTime();
        double double7 = continuousOutputModel5.getInitialTime();
        boolean boolean8 = continuousOutputModel5.requiresDenseOutput();
        continuousOutputModel0.append(continuousOutputModel5);
        continuousOutputModel5.reset();
        double double11 = continuousOutputModel5.getInitialTime();
        double double12 = continuousOutputModel5.getFinalTime();
        continuousOutputModel5.reset();
        continuousOutputModel5.reset();
        double double15 = continuousOutputModel5.getInitialTime();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator16 = null;
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel5.handleStep(stepInterpolator16, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
    }

    @Test
    public void test01135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01135");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double1 = continuousOutputModel0.getFinalTime();
        double double2 = continuousOutputModel0.getInitialTime();
        double double3 = continuousOutputModel0.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel4 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double5 = continuousOutputModel4.getFinalTime();
        double double6 = continuousOutputModel4.getInitialTime();
        continuousOutputModel0.append(continuousOutputModel4);
        double double8 = continuousOutputModel0.getFinalTime();
        boolean boolean9 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean10 = continuousOutputModel0.requiresDenseOutput();
        double double11 = continuousOutputModel0.getInitialTime();
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel0.setInterpolatedTime((double) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
    }

    @Test
    public void test01136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01136");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean1 = continuousOutputModel0.requiresDenseOutput();
        double double2 = continuousOutputModel0.getInitialTime();
        double double3 = continuousOutputModel0.getInitialTime();
        boolean boolean4 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean5 = continuousOutputModel0.requiresDenseOutput();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator6 = null;
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel0.handleStep(stepInterpolator6, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    }

    @Test
    public void test01137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01137");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean1 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel3 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double4 = continuousOutputModel3.getFinalTime();
        double double5 = continuousOutputModel3.getInitialTime();
        boolean boolean6 = continuousOutputModel3.requiresDenseOutput();
        continuousOutputModel3.reset();
        boolean boolean8 = continuousOutputModel3.requiresDenseOutput();
        boolean boolean9 = continuousOutputModel3.requiresDenseOutput();
        double double10 = continuousOutputModel3.getInitialTime();
        continuousOutputModel0.append(continuousOutputModel3);
        double double12 = continuousOutputModel0.getFinalTime();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator13 = null;
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel0.handleStep(stepInterpolator13, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
    }

    @Test
    public void test01138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01138");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean1 = continuousOutputModel0.requiresDenseOutput();
        double double2 = continuousOutputModel0.getInitialTime();
        continuousOutputModel0.reset();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel4 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean5 = continuousOutputModel4.requiresDenseOutput();
        boolean boolean6 = continuousOutputModel4.requiresDenseOutput();
        continuousOutputModel4.reset();
        boolean boolean8 = continuousOutputModel4.requiresDenseOutput();
        double double9 = continuousOutputModel4.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel10 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double11 = continuousOutputModel10.getFinalTime();
        double double12 = continuousOutputModel10.getInitialTime();
        boolean boolean13 = continuousOutputModel10.requiresDenseOutput();
        continuousOutputModel10.reset();
        double double15 = continuousOutputModel10.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel16 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double17 = continuousOutputModel16.getFinalTime();
        double double18 = continuousOutputModel16.getInitialTime();
        continuousOutputModel10.append(continuousOutputModel16);
        continuousOutputModel4.append(continuousOutputModel16);
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel21 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean22 = continuousOutputModel21.requiresDenseOutput();
        double double23 = continuousOutputModel21.getInitialTime();
        boolean boolean24 = continuousOutputModel21.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel25 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double26 = continuousOutputModel25.getFinalTime();
        double double27 = continuousOutputModel25.getInitialTime();
        boolean boolean28 = continuousOutputModel25.requiresDenseOutput();
        continuousOutputModel25.reset();
        boolean boolean30 = continuousOutputModel25.requiresDenseOutput();
        continuousOutputModel21.append(continuousOutputModel25);
        continuousOutputModel25.reset();
        double double33 = continuousOutputModel25.getInitialTime();
        continuousOutputModel25.reset();
        boolean boolean35 = continuousOutputModel25.requiresDenseOutput();
        continuousOutputModel16.append(continuousOutputModel25);
        continuousOutputModel0.append(continuousOutputModel16);
        // The following exception was thrown during execution in test generation
        try {
            double double38 = continuousOutputModel16.getInterpolatedTime();
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
    }

    @Test
    public void test01139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01139");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean1 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean2 = continuousOutputModel0.requiresDenseOutput();
        double double3 = continuousOutputModel0.getFinalTime();
        continuousOutputModel0.reset();
        boolean boolean5 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel7 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean8 = continuousOutputModel7.requiresDenseOutput();
        boolean boolean9 = continuousOutputModel7.requiresDenseOutput();
        double double10 = continuousOutputModel7.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel11 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean12 = continuousOutputModel11.requiresDenseOutput();
        continuousOutputModel7.append(continuousOutputModel11);
        boolean boolean14 = continuousOutputModel7.requiresDenseOutput();
        continuousOutputModel7.reset();
        continuousOutputModel0.append(continuousOutputModel7);
        double double17 = continuousOutputModel0.getInitialTime();
        double double18 = continuousOutputModel0.getInitialTime();
        continuousOutputModel0.reset();
        // The following exception was thrown during execution in test generation
        try {
            double double20 = continuousOutputModel0.getInterpolatedTime();
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
    }

    @Test
    public void test01140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01140");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double1 = continuousOutputModel0.getFinalTime();
        double double2 = continuousOutputModel0.getInitialTime();
        double double3 = continuousOutputModel0.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel4 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double5 = continuousOutputModel4.getFinalTime();
        double double6 = continuousOutputModel4.getInitialTime();
        continuousOutputModel0.append(continuousOutputModel4);
        continuousOutputModel4.reset();
        boolean boolean9 = continuousOutputModel4.requiresDenseOutput();
        double double10 = continuousOutputModel4.getFinalTime();
        double double11 = continuousOutputModel4.getInitialTime();
        continuousOutputModel4.reset();
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray13 = continuousOutputModel4.getInterpolatedState();
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
    }

    @Test
    public void test01141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01141");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel1 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean2 = continuousOutputModel1.requiresDenseOutput();
        boolean boolean3 = continuousOutputModel1.requiresDenseOutput();
        double double4 = continuousOutputModel1.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel5 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean6 = continuousOutputModel5.requiresDenseOutput();
        continuousOutputModel1.append(continuousOutputModel5);
        continuousOutputModel0.append(continuousOutputModel5);
        boolean boolean9 = continuousOutputModel0.requiresDenseOutput();
        double double10 = continuousOutputModel0.getInitialTime();
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray11 = continuousOutputModel0.getInterpolatedState();
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
    }

    @Test
    public void test01142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01142");
        java.io.IOException iOException12 = new java.io.IOException("hi!");
        org.apache.commons.math.ode.DerivativeException derivativeException13 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) iOException12);
        org.apache.commons.math.MathException mathException14 = new org.apache.commons.math.MathException("hi!", (java.lang.Throwable) iOException12);
        java.lang.Object[] objArray15 = mathException14.getArguments();
        org.apache.commons.math.MathException mathException16 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: ", objArray15);
        org.apache.commons.math.MathException mathException17 = new org.apache.commons.math.MathException("hi!", objArray15);
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel19 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double20 = continuousOutputModel19.getFinalTime();
        double double21 = continuousOutputModel19.getInitialTime();
        boolean boolean22 = continuousOutputModel19.requiresDenseOutput();
        double double23 = continuousOutputModel19.getInitialTime();
        java.io.IOException iOException26 = new java.io.IOException("hi!");
        org.apache.commons.math.ode.DerivativeException derivativeException27 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) iOException26);
        org.apache.commons.math.MathException mathException28 = new org.apache.commons.math.MathException("hi!", (java.lang.Throwable) iOException26);
        java.io.IOException iOException31 = new java.io.IOException("hi!");
        java.io.IOException iOException32 = new java.io.IOException("", (java.lang.Throwable) iOException31);
        org.apache.commons.math.ode.DerivativeException derivativeException33 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) iOException31);
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel35 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double36 = continuousOutputModel35.getFinalTime();
        double double37 = continuousOutputModel35.getInitialTime();
        java.lang.Object[] objArray38 = new java.lang.Object[] { double23, mathException28, iOException31, false, continuousOutputModel35 };
        java.lang.String[] strArray47 = new java.lang.String[] { "hi!", "org.apache.commons.math.MathException: ", "hi!", "org.apache.commons.math.MathException: ", "", "" };
        org.apache.commons.math.ode.DerivativeException derivativeException48 = new org.apache.commons.math.ode.DerivativeException("", strArray47);
        java.io.IOException iOException52 = new java.io.IOException("hi!");
        org.apache.commons.math.ode.DerivativeException derivativeException53 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) iOException52);
        org.apache.commons.math.MathException mathException54 = new org.apache.commons.math.MathException("hi!", (java.lang.Throwable) iOException52);
        java.lang.Object[] objArray55 = mathException54.getArguments();
        org.apache.commons.math.MathException mathException56 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: ", (java.lang.Throwable) mathException54);
        org.apache.commons.math.MathException mathException57 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: hi!", (java.lang.Object[]) strArray47, (java.lang.Throwable) mathException54);
        org.apache.commons.math.MathException mathException58 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: hi!", objArray38, (java.lang.Throwable) mathException57);
        org.apache.commons.math.MathException mathException59 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: ", objArray15, (java.lang.Throwable) mathException58);
        org.apache.commons.math.MathException mathException60 = new org.apache.commons.math.MathException("", objArray15);
        org.apache.commons.math.MathException mathException61 = new org.apache.commons.math.MathException("", (java.lang.Throwable) mathException60);
        org.apache.commons.math.MathException mathException62 = new org.apache.commons.math.MathException("", (java.lang.Throwable) mathException60);
        java.lang.Throwable[] throwableArray63 = mathException62.getSuppressed();
        java.lang.String[] strArray77 = new java.lang.String[] { "hi!", "org.apache.commons.math.MathException: ", "hi!", "org.apache.commons.math.MathException: ", "", "" };
        org.apache.commons.math.ode.DerivativeException derivativeException78 = new org.apache.commons.math.ode.DerivativeException("", strArray77);
        org.apache.commons.math.ode.DerivativeException derivativeException79 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray77);
        org.apache.commons.math.ode.DerivativeException derivativeException80 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: ", strArray77);
        org.apache.commons.math.ode.DerivativeException derivativeException81 = new org.apache.commons.math.ode.DerivativeException("", strArray77);
        org.apache.commons.math.MathException mathException82 = new org.apache.commons.math.MathException("", (java.lang.Object[]) strArray77);
        org.apache.commons.math.ode.DerivativeException derivativeException83 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.DerivativeException: ", strArray77);
        org.apache.commons.math.ode.DerivativeException derivativeException84 = new org.apache.commons.math.ode.DerivativeException("java.io.IOException: java.io.IOException: ", strArray77);
        org.apache.commons.math.MathException mathException85 = new org.apache.commons.math.MathException((java.lang.Throwable) derivativeException84);
        org.apache.commons.math.MathException mathException86 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: java.io.IOException: java.io.IOException: org.apache.commons.math.ode.DerivativeException: hi!", (java.lang.Object[]) throwableArray63, (java.lang.Throwable) mathException85);
        org.apache.commons.math.MathException mathException87 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.ode.DerivativeException: java.io.IOException: hi!", (java.lang.Object[]) throwableArray63);
        java.io.IOException iOException90 = new java.io.IOException("hi!");
        org.apache.commons.math.ode.DerivativeException derivativeException91 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) iOException90);
        org.apache.commons.math.MathException mathException92 = new org.apache.commons.math.MathException("hi!", (java.lang.Throwable) iOException90);
        java.io.IOException iOException93 = new java.io.IOException((java.lang.Throwable) mathException92);
        mathException87.addSuppressed((java.lang.Throwable) mathException92);
        java.io.IOException iOException95 = new java.io.IOException("org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: ", (java.lang.Throwable) mathException92);
        java.io.IOException iOException96 = new java.io.IOException("java.io.IOException: java.io.IOException: java.io.IOException: ", (java.lang.Throwable) iOException95);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(objArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray55), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray55), "[]");
        org.junit.Assert.assertNotNull(throwableArray63);
        org.junit.Assert.assertNotNull(strArray77);
    }

    @Test
    public void test01143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01143");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double1 = continuousOutputModel0.getFinalTime();
        double double2 = continuousOutputModel0.getInitialTime();
        boolean boolean3 = continuousOutputModel0.requiresDenseOutput();
        double double4 = continuousOutputModel0.getInitialTime();
        continuousOutputModel0.reset();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel6 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean7 = continuousOutputModel6.requiresDenseOutput();
        double double8 = continuousOutputModel6.getInitialTime();
        boolean boolean9 = continuousOutputModel6.requiresDenseOutput();
        continuousOutputModel0.append(continuousOutputModel6);
        double double11 = continuousOutputModel0.getFinalTime();
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray12 = continuousOutputModel0.getInterpolatedState();
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
    }

    @Test
    public void test01144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01144");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double1 = continuousOutputModel0.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel2 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean3 = continuousOutputModel2.requiresDenseOutput();
        double double4 = continuousOutputModel2.getInitialTime();
        boolean boolean5 = continuousOutputModel2.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel6 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double7 = continuousOutputModel6.getFinalTime();
        double double8 = continuousOutputModel6.getInitialTime();
        boolean boolean9 = continuousOutputModel6.requiresDenseOutput();
        continuousOutputModel6.reset();
        boolean boolean11 = continuousOutputModel6.requiresDenseOutput();
        continuousOutputModel2.append(continuousOutputModel6);
        continuousOutputModel0.append(continuousOutputModel2);
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel14 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double15 = continuousOutputModel14.getFinalTime();
        double double16 = continuousOutputModel14.getInitialTime();
        boolean boolean17 = continuousOutputModel14.requiresDenseOutput();
        continuousOutputModel14.reset();
        continuousOutputModel14.reset();
        boolean boolean20 = continuousOutputModel14.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel21 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double22 = continuousOutputModel21.getFinalTime();
        double double23 = continuousOutputModel21.getInitialTime();
        continuousOutputModel21.reset();
        boolean boolean25 = continuousOutputModel21.requiresDenseOutput();
        double double26 = continuousOutputModel21.getFinalTime();
        continuousOutputModel14.append(continuousOutputModel21);
        continuousOutputModel2.append(continuousOutputModel21);
        org.apache.commons.math.ode.StepInterpolator stepInterpolator29 = null;
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel21.handleStep(stepInterpolator29, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
    }

    @Test
    public void test01145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01145");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean1 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean2 = continuousOutputModel0.requiresDenseOutput();
        double double3 = continuousOutputModel0.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel4 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean5 = continuousOutputModel4.requiresDenseOutput();
        continuousOutputModel0.append(continuousOutputModel4);
        boolean boolean7 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel9 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean10 = continuousOutputModel9.requiresDenseOutput();
        boolean boolean11 = continuousOutputModel9.requiresDenseOutput();
        continuousOutputModel9.reset();
        boolean boolean13 = continuousOutputModel9.requiresDenseOutput();
        double double14 = continuousOutputModel9.getFinalTime();
        boolean boolean15 = continuousOutputModel9.requiresDenseOutput();
        boolean boolean16 = continuousOutputModel9.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel17 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean18 = continuousOutputModel17.requiresDenseOutput();
        double double19 = continuousOutputModel17.getInitialTime();
        boolean boolean20 = continuousOutputModel17.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel21 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double22 = continuousOutputModel21.getFinalTime();
        double double23 = continuousOutputModel21.getInitialTime();
        boolean boolean24 = continuousOutputModel21.requiresDenseOutput();
        continuousOutputModel21.reset();
        boolean boolean26 = continuousOutputModel21.requiresDenseOutput();
        continuousOutputModel17.append(continuousOutputModel21);
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel28 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double29 = continuousOutputModel28.getFinalTime();
        double double30 = continuousOutputModel28.getInitialTime();
        boolean boolean31 = continuousOutputModel28.requiresDenseOutput();
        continuousOutputModel28.reset();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel33 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean34 = continuousOutputModel33.requiresDenseOutput();
        double double35 = continuousOutputModel33.getInitialTime();
        continuousOutputModel28.append(continuousOutputModel33);
        continuousOutputModel17.append(continuousOutputModel28);
        double double38 = continuousOutputModel28.getFinalTime();
        continuousOutputModel9.append(continuousOutputModel28);
        continuousOutputModel0.append(continuousOutputModel28);
        // The following exception was thrown during execution in test generation
        try {
            double double41 = continuousOutputModel28.getInterpolatedTime();
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue(Double.isNaN(double38));
    }

    @Test
    public void test01146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01146");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean1 = continuousOutputModel0.requiresDenseOutput();
        double double2 = continuousOutputModel0.getInitialTime();
        boolean boolean3 = continuousOutputModel0.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel4 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double5 = continuousOutputModel4.getFinalTime();
        double double6 = continuousOutputModel4.getInitialTime();
        boolean boolean7 = continuousOutputModel4.requiresDenseOutput();
        continuousOutputModel4.reset();
        boolean boolean9 = continuousOutputModel4.requiresDenseOutput();
        continuousOutputModel0.append(continuousOutputModel4);
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel11 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double12 = continuousOutputModel11.getFinalTime();
        double double13 = continuousOutputModel11.getInitialTime();
        double double14 = continuousOutputModel11.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel15 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double16 = continuousOutputModel15.getFinalTime();
        double double17 = continuousOutputModel15.getInitialTime();
        continuousOutputModel11.append(continuousOutputModel15);
        double double19 = continuousOutputModel11.getFinalTime();
        boolean boolean20 = continuousOutputModel11.requiresDenseOutput();
        boolean boolean21 = continuousOutputModel11.requiresDenseOutput();
        boolean boolean22 = continuousOutputModel11.requiresDenseOutput();
        boolean boolean23 = continuousOutputModel11.requiresDenseOutput();
        continuousOutputModel0.append(continuousOutputModel11);
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel25 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean26 = continuousOutputModel25.requiresDenseOutput();
        double double27 = continuousOutputModel25.getInitialTime();
        double double28 = continuousOutputModel25.getFinalTime();
        double double29 = continuousOutputModel25.getInitialTime();
        continuousOutputModel25.reset();
        continuousOutputModel11.append(continuousOutputModel25);
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel32 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean33 = continuousOutputModel32.requiresDenseOutput();
        boolean boolean34 = continuousOutputModel32.requiresDenseOutput();
        continuousOutputModel32.reset();
        boolean boolean36 = continuousOutputModel32.requiresDenseOutput();
        double double37 = continuousOutputModel32.getFinalTime();
        continuousOutputModel32.reset();
        continuousOutputModel32.reset();
        continuousOutputModel25.append(continuousOutputModel32);
        boolean boolean41 = continuousOutputModel25.requiresDenseOutput();
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray42 = continuousOutputModel25.getInterpolatedState();
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
    }

    @Test
    public void test01147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01147");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double1 = continuousOutputModel0.getFinalTime();
        continuousOutputModel0.reset();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel3 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean4 = continuousOutputModel3.requiresDenseOutput();
        boolean boolean5 = continuousOutputModel3.requiresDenseOutput();
        continuousOutputModel0.append(continuousOutputModel3);
        org.apache.commons.math.ode.StepInterpolator stepInterpolator7 = null;
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel3.handleStep(stepInterpolator7, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    }

    @Test
    public void test01148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01148");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean1 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean2 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        boolean boolean4 = continuousOutputModel0.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel5 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double6 = continuousOutputModel5.getFinalTime();
        double double7 = continuousOutputModel5.getInitialTime();
        boolean boolean8 = continuousOutputModel5.requiresDenseOutput();
        continuousOutputModel0.append(continuousOutputModel5);
        double double10 = continuousOutputModel5.getInitialTime();
        double double11 = continuousOutputModel5.getFinalTime();
        continuousOutputModel5.reset();
        continuousOutputModel5.reset();
        continuousOutputModel5.reset();
        boolean boolean15 = continuousOutputModel5.requiresDenseOutput();
        boolean boolean16 = continuousOutputModel5.requiresDenseOutput();
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray17 = continuousOutputModel5.getInterpolatedState();
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test01149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01149");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double1 = continuousOutputModel0.getFinalTime();
        double double2 = continuousOutputModel0.getInitialTime();
        boolean boolean3 = continuousOutputModel0.requiresDenseOutput();
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel0.setInterpolatedTime(10.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
    }

    @Test
    public void test01150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01150");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean1 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean2 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        boolean boolean4 = continuousOutputModel0.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel5 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double6 = continuousOutputModel5.getFinalTime();
        double double7 = continuousOutputModel5.getInitialTime();
        boolean boolean8 = continuousOutputModel5.requiresDenseOutput();
        continuousOutputModel0.append(continuousOutputModel5);
        boolean boolean10 = continuousOutputModel5.requiresDenseOutput();
        double double11 = continuousOutputModel5.getFinalTime();
        continuousOutputModel5.reset();
        double double13 = continuousOutputModel5.getFinalTime();
        continuousOutputModel5.reset();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator15 = null;
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel5.handleStep(stepInterpolator15, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
    }

    @Test
    public void test01151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01151");
        java.io.IOException iOException7 = new java.io.IOException("hi!");
        org.apache.commons.math.ode.DerivativeException derivativeException8 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) iOException7);
        org.apache.commons.math.MathException mathException9 = new org.apache.commons.math.MathException("hi!", (java.lang.Throwable) iOException7);
        java.lang.Object[] objArray10 = mathException9.getArguments();
        org.apache.commons.math.MathException mathException11 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: ", objArray10);
        org.apache.commons.math.MathException mathException12 = new org.apache.commons.math.MathException("hi!", objArray10);
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel14 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double15 = continuousOutputModel14.getFinalTime();
        double double16 = continuousOutputModel14.getInitialTime();
        boolean boolean17 = continuousOutputModel14.requiresDenseOutput();
        double double18 = continuousOutputModel14.getInitialTime();
        java.io.IOException iOException21 = new java.io.IOException("hi!");
        org.apache.commons.math.ode.DerivativeException derivativeException22 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) iOException21);
        org.apache.commons.math.MathException mathException23 = new org.apache.commons.math.MathException("hi!", (java.lang.Throwable) iOException21);
        java.io.IOException iOException26 = new java.io.IOException("hi!");
        java.io.IOException iOException27 = new java.io.IOException("", (java.lang.Throwable) iOException26);
        org.apache.commons.math.ode.DerivativeException derivativeException28 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) iOException26);
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel30 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double31 = continuousOutputModel30.getFinalTime();
        double double32 = continuousOutputModel30.getInitialTime();
        java.lang.Object[] objArray33 = new java.lang.Object[] { double18, mathException23, iOException26, false, continuousOutputModel30 };
        java.lang.String[] strArray42 = new java.lang.String[] { "hi!", "org.apache.commons.math.MathException: ", "hi!", "org.apache.commons.math.MathException: ", "", "" };
        org.apache.commons.math.ode.DerivativeException derivativeException43 = new org.apache.commons.math.ode.DerivativeException("", strArray42);
        java.io.IOException iOException47 = new java.io.IOException("hi!");
        org.apache.commons.math.ode.DerivativeException derivativeException48 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) iOException47);
        org.apache.commons.math.MathException mathException49 = new org.apache.commons.math.MathException("hi!", (java.lang.Throwable) iOException47);
        java.lang.Object[] objArray50 = mathException49.getArguments();
        org.apache.commons.math.MathException mathException51 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: ", (java.lang.Throwable) mathException49);
        org.apache.commons.math.MathException mathException52 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: hi!", (java.lang.Object[]) strArray42, (java.lang.Throwable) mathException49);
        org.apache.commons.math.MathException mathException53 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: hi!", objArray33, (java.lang.Throwable) mathException52);
        org.apache.commons.math.MathException mathException54 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: ", objArray10, (java.lang.Throwable) mathException53);
        java.io.IOException iOException55 = new java.io.IOException((java.lang.Throwable) mathException53);
        org.apache.commons.math.MathException mathException56 = new org.apache.commons.math.MathException((java.lang.Throwable) iOException55);
        org.apache.commons.math.MathException mathException57 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException56);
        java.lang.Object[] objArray58 = mathException57.getArguments();
        java.lang.Object[] objArray59 = mathException57.getArguments();
        java.io.IOException iOException62 = new java.io.IOException("hi!");
        org.apache.commons.math.MathException mathException63 = new org.apache.commons.math.MathException("", (java.lang.Throwable) iOException62);
        org.apache.commons.math.MathException mathException64 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: java.io.IOException: org.apache.commons.math.MathException: hi!", objArray59, (java.lang.Throwable) iOException62);
        org.apache.commons.math.MathException mathException65 = new org.apache.commons.math.MathException("org.apache.commons.math.ode.DerivativeException: java.io.IOException: hi!", (java.lang.Throwable) iOException62);
        org.apache.commons.math.MathException mathException66 = new org.apache.commons.math.MathException((java.lang.Throwable) iOException62);
        java.lang.Class<?> wildcardClass67 = iOException62.getClass();
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[]");
        org.junit.Assert.assertNotNull(objArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray58), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray58), "[]");
        org.junit.Assert.assertNotNull(objArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray59), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray59), "[]");
        org.junit.Assert.assertNotNull(wildcardClass67);
    }

    @Test
    public void test01152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01152");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean1 = continuousOutputModel0.requiresDenseOutput();
        double double2 = continuousOutputModel0.getInitialTime();
        boolean boolean3 = continuousOutputModel0.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel4 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double5 = continuousOutputModel4.getFinalTime();
        double double6 = continuousOutputModel4.getInitialTime();
        boolean boolean7 = continuousOutputModel4.requiresDenseOutput();
        continuousOutputModel4.reset();
        boolean boolean9 = continuousOutputModel4.requiresDenseOutput();
        continuousOutputModel0.append(continuousOutputModel4);
        continuousOutputModel4.reset();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator12 = null;
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel4.handleStep(stepInterpolator12, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test01153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01153");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double1 = continuousOutputModel0.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel2 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean3 = continuousOutputModel2.requiresDenseOutput();
        double double4 = continuousOutputModel2.getInitialTime();
        boolean boolean5 = continuousOutputModel2.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel6 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double7 = continuousOutputModel6.getFinalTime();
        double double8 = continuousOutputModel6.getInitialTime();
        boolean boolean9 = continuousOutputModel6.requiresDenseOutput();
        continuousOutputModel6.reset();
        boolean boolean11 = continuousOutputModel6.requiresDenseOutput();
        continuousOutputModel2.append(continuousOutputModel6);
        continuousOutputModel0.append(continuousOutputModel2);
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel14 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean15 = continuousOutputModel14.requiresDenseOutput();
        boolean boolean16 = continuousOutputModel14.requiresDenseOutput();
        continuousOutputModel14.reset();
        boolean boolean18 = continuousOutputModel14.requiresDenseOutput();
        boolean boolean19 = continuousOutputModel14.requiresDenseOutput();
        continuousOutputModel0.append(continuousOutputModel14);
        boolean boolean21 = continuousOutputModel14.requiresDenseOutput();
        double double22 = continuousOutputModel14.getInitialTime();
        // The following exception was thrown during execution in test generation
        try {
            double double23 = continuousOutputModel14.getInterpolatedTime();
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
    }

    @Test
    public void test01154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01154");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double1 = continuousOutputModel0.getFinalTime();
        double double2 = continuousOutputModel0.getInitialTime();
        double double3 = continuousOutputModel0.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel4 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double5 = continuousOutputModel4.getFinalTime();
        double double6 = continuousOutputModel4.getInitialTime();
        continuousOutputModel0.append(continuousOutputModel4);
        double double8 = continuousOutputModel0.getFinalTime();
        boolean boolean9 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean10 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean11 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean12 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean13 = continuousOutputModel0.requiresDenseOutput();
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray14 = continuousOutputModel0.getInterpolatedState();
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test01155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01155");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean1 = continuousOutputModel0.requiresDenseOutput();
        double double2 = continuousOutputModel0.getInitialTime();
        boolean boolean3 = continuousOutputModel0.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel4 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double5 = continuousOutputModel4.getFinalTime();
        double double6 = continuousOutputModel4.getInitialTime();
        boolean boolean7 = continuousOutputModel4.requiresDenseOutput();
        continuousOutputModel4.reset();
        boolean boolean9 = continuousOutputModel4.requiresDenseOutput();
        continuousOutputModel0.append(continuousOutputModel4);
        continuousOutputModel4.reset();
        continuousOutputModel4.reset();
        continuousOutputModel4.reset();
        continuousOutputModel4.reset();
        boolean boolean15 = continuousOutputModel4.requiresDenseOutput();
        boolean boolean16 = continuousOutputModel4.requiresDenseOutput();
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel4.setInterpolatedTime(0.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test01156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01156");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean1 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean2 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        boolean boolean4 = continuousOutputModel0.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel5 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double6 = continuousOutputModel5.getFinalTime();
        double double7 = continuousOutputModel5.getInitialTime();
        boolean boolean8 = continuousOutputModel5.requiresDenseOutput();
        continuousOutputModel0.append(continuousOutputModel5);
        continuousOutputModel5.reset();
        boolean boolean11 = continuousOutputModel5.requiresDenseOutput();
        boolean boolean12 = continuousOutputModel5.requiresDenseOutput();
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel5.setInterpolatedTime((double) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test01157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01157");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double1 = continuousOutputModel0.getFinalTime();
        double double2 = continuousOutputModel0.getInitialTime();
        boolean boolean3 = continuousOutputModel0.requiresDenseOutput();
        double double4 = continuousOutputModel0.getInitialTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel5 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean6 = continuousOutputModel5.requiresDenseOutput();
        boolean boolean7 = continuousOutputModel5.requiresDenseOutput();
        continuousOutputModel5.reset();
        boolean boolean9 = continuousOutputModel5.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel10 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double11 = continuousOutputModel10.getFinalTime();
        double double12 = continuousOutputModel10.getInitialTime();
        boolean boolean13 = continuousOutputModel10.requiresDenseOutput();
        continuousOutputModel5.append(continuousOutputModel10);
        continuousOutputModel0.append(continuousOutputModel5);
        continuousOutputModel0.reset();
        double double17 = continuousOutputModel0.getFinalTime();
        // The following exception was thrown during execution in test generation
        try {
            double double18 = continuousOutputModel0.getInterpolatedTime();
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
    }

    @Test
    public void test01158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01158");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean1 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean2 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        boolean boolean4 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel6 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double7 = continuousOutputModel6.getFinalTime();
        continuousOutputModel6.reset();
        continuousOutputModel0.append(continuousOutputModel6);
        continuousOutputModel6.reset();
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel6.setInterpolatedTime((double) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
    }

    @Test
    public void test01159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01159");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double1 = continuousOutputModel0.getFinalTime();
        double double2 = continuousOutputModel0.getInitialTime();
        double double3 = continuousOutputModel0.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel4 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double5 = continuousOutputModel4.getFinalTime();
        double double6 = continuousOutputModel4.getInitialTime();
        continuousOutputModel0.append(continuousOutputModel4);
        boolean boolean8 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean9 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        boolean boolean11 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean12 = continuousOutputModel0.requiresDenseOutput();
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel0.setInterpolatedTime((double) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test01160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01160");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double1 = continuousOutputModel0.getFinalTime();
        double double2 = continuousOutputModel0.getInitialTime();
        double double3 = continuousOutputModel0.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel4 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double5 = continuousOutputModel4.getFinalTime();
        double double6 = continuousOutputModel4.getInitialTime();
        continuousOutputModel0.append(continuousOutputModel4);
        double double8 = continuousOutputModel0.getInitialTime();
        double double9 = continuousOutputModel0.getFinalTime();
        boolean boolean10 = continuousOutputModel0.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel11 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean12 = continuousOutputModel11.requiresDenseOutput();
        double double13 = continuousOutputModel11.getInitialTime();
        boolean boolean14 = continuousOutputModel11.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel15 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double16 = continuousOutputModel15.getFinalTime();
        double double17 = continuousOutputModel15.getInitialTime();
        boolean boolean18 = continuousOutputModel15.requiresDenseOutput();
        continuousOutputModel15.reset();
        boolean boolean20 = continuousOutputModel15.requiresDenseOutput();
        continuousOutputModel11.append(continuousOutputModel15);
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel22 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double23 = continuousOutputModel22.getFinalTime();
        double double24 = continuousOutputModel22.getInitialTime();
        boolean boolean25 = continuousOutputModel22.requiresDenseOutput();
        continuousOutputModel22.reset();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel27 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean28 = continuousOutputModel27.requiresDenseOutput();
        double double29 = continuousOutputModel27.getInitialTime();
        continuousOutputModel22.append(continuousOutputModel27);
        continuousOutputModel11.append(continuousOutputModel22);
        boolean boolean32 = continuousOutputModel11.requiresDenseOutput();
        continuousOutputModel0.append(continuousOutputModel11);
        continuousOutputModel0.reset();
        // The following exception was thrown during execution in test generation
        try {
            double double35 = continuousOutputModel0.getInterpolatedTime();
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
    }

    @Test
    public void test01161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01161");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean1 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel3 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double4 = continuousOutputModel3.getFinalTime();
        double double5 = continuousOutputModel3.getInitialTime();
        boolean boolean6 = continuousOutputModel3.requiresDenseOutput();
        continuousOutputModel3.reset();
        boolean boolean8 = continuousOutputModel3.requiresDenseOutput();
        boolean boolean9 = continuousOutputModel3.requiresDenseOutput();
        double double10 = continuousOutputModel3.getInitialTime();
        continuousOutputModel0.append(continuousOutputModel3);
        double double12 = continuousOutputModel0.getFinalTime();
        double double13 = continuousOutputModel0.getFinalTime();
        boolean boolean14 = continuousOutputModel0.requiresDenseOutput();
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel0.setInterpolatedTime((double) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    }

    @Test
    public void test01162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01162");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double1 = continuousOutputModel0.getFinalTime();
        double double2 = continuousOutputModel0.getInitialTime();
        boolean boolean3 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        double double5 = continuousOutputModel0.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel6 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double7 = continuousOutputModel6.getFinalTime();
        double double8 = continuousOutputModel6.getInitialTime();
        continuousOutputModel0.append(continuousOutputModel6);
        continuousOutputModel0.reset();
        continuousOutputModel0.reset();
        continuousOutputModel0.reset();
        boolean boolean13 = continuousOutputModel0.requiresDenseOutput();
        double double14 = continuousOutputModel0.getInitialTime();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator15 = null;
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel0.handleStep(stepInterpolator15, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
    }

    @Test
    public void test01163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01163");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double1 = continuousOutputModel0.getFinalTime();
        double double2 = continuousOutputModel0.getInitialTime();
        double double3 = continuousOutputModel0.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel4 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double5 = continuousOutputModel4.getFinalTime();
        double double6 = continuousOutputModel4.getInitialTime();
        continuousOutputModel0.append(continuousOutputModel4);
        double double8 = continuousOutputModel0.getFinalTime();
        boolean boolean9 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean10 = continuousOutputModel0.requiresDenseOutput();
        double double11 = continuousOutputModel0.getInitialTime();
        continuousOutputModel0.reset();
        // The following exception was thrown during execution in test generation
        try {
            double double13 = continuousOutputModel0.getInterpolatedTime();
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
    }

    @Test
    public void test01164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01164");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double1 = continuousOutputModel0.getFinalTime();
        double double2 = continuousOutputModel0.getInitialTime();
        double double3 = continuousOutputModel0.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel4 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double5 = continuousOutputModel4.getFinalTime();
        double double6 = continuousOutputModel4.getInitialTime();
        continuousOutputModel0.append(continuousOutputModel4);
        double double8 = continuousOutputModel0.getFinalTime();
        boolean boolean9 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean10 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean11 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean12 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        boolean boolean14 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator16 = null;
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel0.handleStep(stepInterpolator16, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    }

    @Test
    public void test01165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01165");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean1 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean2 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        continuousOutputModel0.reset();
        boolean boolean5 = continuousOutputModel0.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel6 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double7 = continuousOutputModel6.getFinalTime();
        double double8 = continuousOutputModel6.getInitialTime();
        double double9 = continuousOutputModel6.getFinalTime();
        boolean boolean10 = continuousOutputModel6.requiresDenseOutput();
        continuousOutputModel0.append(continuousOutputModel6);
        continuousOutputModel0.reset();
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel0.setInterpolatedTime((double) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test01166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01166");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double1 = continuousOutputModel0.getFinalTime();
        double double2 = continuousOutputModel0.getInitialTime();
        double double3 = continuousOutputModel0.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel4 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double5 = continuousOutputModel4.getFinalTime();
        double double6 = continuousOutputModel4.getInitialTime();
        continuousOutputModel0.append(continuousOutputModel4);
        double double8 = continuousOutputModel0.getInitialTime();
        double double9 = continuousOutputModel0.getInitialTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel10 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double11 = continuousOutputModel10.getFinalTime();
        double double12 = continuousOutputModel10.getInitialTime();
        continuousOutputModel10.reset();
        double double14 = continuousOutputModel10.getInitialTime();
        continuousOutputModel0.append(continuousOutputModel10);
        double double16 = continuousOutputModel10.getInitialTime();
        double double17 = continuousOutputModel10.getFinalTime();
        continuousOutputModel10.reset();
        // The following exception was thrown during execution in test generation
        try {
            double double19 = continuousOutputModel10.getInterpolatedTime();
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
    }

    @Test
    public void test01167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01167");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean1 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean2 = continuousOutputModel0.requiresDenseOutput();
        double double3 = continuousOutputModel0.getFinalTime();
        continuousOutputModel0.reset();
        boolean boolean5 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel7 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double8 = continuousOutputModel7.getFinalTime();
        continuousOutputModel0.append(continuousOutputModel7);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray10 = continuousOutputModel7.getInterpolatedState();
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
    }

    @Test
    public void test01168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01168");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean1 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean2 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        continuousOutputModel0.reset();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel5 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double6 = continuousOutputModel5.getFinalTime();
        double double7 = continuousOutputModel5.getInitialTime();
        boolean boolean8 = continuousOutputModel5.requiresDenseOutput();
        continuousOutputModel5.reset();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel10 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean11 = continuousOutputModel10.requiresDenseOutput();
        double double12 = continuousOutputModel10.getInitialTime();
        continuousOutputModel5.append(continuousOutputModel10);
        continuousOutputModel0.append(continuousOutputModel10);
        boolean boolean15 = continuousOutputModel10.requiresDenseOutput();
        continuousOutputModel10.reset();
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray17 = continuousOutputModel10.getInterpolatedState();
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    }

    @Test
    public void test01169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01169");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double1 = continuousOutputModel0.getFinalTime();
        double double2 = continuousOutputModel0.getInitialTime();
        boolean boolean3 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel5 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean6 = continuousOutputModel5.requiresDenseOutput();
        double double7 = continuousOutputModel5.getInitialTime();
        continuousOutputModel0.append(continuousOutputModel5);
        boolean boolean9 = continuousOutputModel5.requiresDenseOutput();
        boolean boolean10 = continuousOutputModel5.requiresDenseOutput();
        boolean boolean11 = continuousOutputModel5.requiresDenseOutput();
        continuousOutputModel5.reset();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel13 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean14 = continuousOutputModel13.requiresDenseOutput();
        double double15 = continuousOutputModel13.getInitialTime();
        double double16 = continuousOutputModel13.getFinalTime();
        boolean boolean17 = continuousOutputModel13.requiresDenseOutput();
        continuousOutputModel13.reset();
        double double19 = continuousOutputModel13.getFinalTime();
        double double20 = continuousOutputModel13.getFinalTime();
        continuousOutputModel13.reset();
        continuousOutputModel5.append(continuousOutputModel13);
        org.apache.commons.math.ode.StepInterpolator stepInterpolator23 = null;
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel13.handleStep(stepInterpolator23, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue(Double.isNaN(double20));
    }

    @Test
    public void test01170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01170");
        java.io.IOException iOException2 = new java.io.IOException("hi!");
        java.io.IOException iOException3 = new java.io.IOException("", (java.lang.Throwable) iOException2);
        java.io.IOException iOException4 = new java.io.IOException((java.lang.Throwable) iOException3);
        java.lang.String[] strArray13 = new java.lang.String[] { "", "hi!", "hi!" };
        org.apache.commons.math.ode.DerivativeException derivativeException14 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: ", strArray13);
        org.apache.commons.math.ode.DerivativeException derivativeException15 = new org.apache.commons.math.ode.DerivativeException("", strArray13);
        org.apache.commons.math.ode.DerivativeException derivativeException16 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: org.apache.commons.math.MathException: ", strArray13);
        org.apache.commons.math.MathException mathException17 = new org.apache.commons.math.MathException("hi!", (java.lang.Object[]) strArray13);
        org.apache.commons.math.MathException mathException18 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: ", (java.lang.Throwable) mathException17);
        iOException3.addSuppressed((java.lang.Throwable) mathException18);
        java.io.IOException iOException27 = new java.io.IOException("hi!");
        org.apache.commons.math.ode.DerivativeException derivativeException28 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) iOException27);
        org.apache.commons.math.MathException mathException29 = new org.apache.commons.math.MathException("hi!", (java.lang.Throwable) iOException27);
        java.lang.Object[] objArray30 = mathException29.getArguments();
        org.apache.commons.math.MathException mathException31 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: ", objArray30);
        org.apache.commons.math.MathException mathException32 = new org.apache.commons.math.MathException("hi!", objArray30);
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel34 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double35 = continuousOutputModel34.getFinalTime();
        double double36 = continuousOutputModel34.getInitialTime();
        boolean boolean37 = continuousOutputModel34.requiresDenseOutput();
        double double38 = continuousOutputModel34.getInitialTime();
        java.io.IOException iOException41 = new java.io.IOException("hi!");
        org.apache.commons.math.ode.DerivativeException derivativeException42 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) iOException41);
        org.apache.commons.math.MathException mathException43 = new org.apache.commons.math.MathException("hi!", (java.lang.Throwable) iOException41);
        java.io.IOException iOException46 = new java.io.IOException("hi!");
        java.io.IOException iOException47 = new java.io.IOException("", (java.lang.Throwable) iOException46);
        org.apache.commons.math.ode.DerivativeException derivativeException48 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) iOException46);
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel50 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double51 = continuousOutputModel50.getFinalTime();
        double double52 = continuousOutputModel50.getInitialTime();
        java.lang.Object[] objArray53 = new java.lang.Object[] { double38, mathException43, iOException46, false, continuousOutputModel50 };
        java.lang.String[] strArray62 = new java.lang.String[] { "hi!", "org.apache.commons.math.MathException: ", "hi!", "org.apache.commons.math.MathException: ", "", "" };
        org.apache.commons.math.ode.DerivativeException derivativeException63 = new org.apache.commons.math.ode.DerivativeException("", strArray62);
        java.io.IOException iOException67 = new java.io.IOException("hi!");
        org.apache.commons.math.ode.DerivativeException derivativeException68 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) iOException67);
        org.apache.commons.math.MathException mathException69 = new org.apache.commons.math.MathException("hi!", (java.lang.Throwable) iOException67);
        java.lang.Object[] objArray70 = mathException69.getArguments();
        org.apache.commons.math.MathException mathException71 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: ", (java.lang.Throwable) mathException69);
        org.apache.commons.math.MathException mathException72 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: hi!", (java.lang.Object[]) strArray62, (java.lang.Throwable) mathException69);
        org.apache.commons.math.MathException mathException73 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: hi!", objArray53, (java.lang.Throwable) mathException72);
        org.apache.commons.math.MathException mathException74 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: ", objArray30, (java.lang.Throwable) mathException73);
        org.apache.commons.math.MathException mathException75 = new org.apache.commons.math.MathException("", objArray30);
        org.apache.commons.math.MathException mathException77 = new org.apache.commons.math.MathException("hi!");
        java.io.IOException iOException78 = new java.io.IOException((java.lang.Throwable) mathException77);
        org.apache.commons.math.MathException mathException79 = new org.apache.commons.math.MathException((java.lang.Throwable) iOException78);
        java.lang.Throwable[] throwableArray80 = iOException78.getSuppressed();
        org.apache.commons.math.MathException mathException81 = new org.apache.commons.math.MathException("org.apache.commons.math.ode.DerivativeException: hi!", objArray30, (java.lang.Throwable) iOException78);
        java.lang.String str82 = mathException81.getPattern();
        mathException18.addSuppressed((java.lang.Throwable) mathException81);
        java.lang.Object[] objArray84 = mathException81.getArguments();
        java.io.IOException iOException85 = new java.io.IOException((java.lang.Throwable) mathException81);
        org.junit.Assert.assertNotNull(strArray13);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertTrue(Double.isNaN(double52));
        org.junit.Assert.assertNotNull(objArray53);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertNotNull(objArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray70), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray70), "[]");
        org.junit.Assert.assertNotNull(throwableArray80);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "org.apache.commons.math.ode.DerivativeException: hi!" + "'", str82, "org.apache.commons.math.ode.DerivativeException: hi!");
        org.junit.Assert.assertNotNull(objArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray84), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray84), "[]");
    }

    @Test
    public void test01171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01171");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double1 = continuousOutputModel0.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel2 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean3 = continuousOutputModel2.requiresDenseOutput();
        double double4 = continuousOutputModel2.getInitialTime();
        boolean boolean5 = continuousOutputModel2.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel6 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double7 = continuousOutputModel6.getFinalTime();
        double double8 = continuousOutputModel6.getInitialTime();
        boolean boolean9 = continuousOutputModel6.requiresDenseOutput();
        continuousOutputModel6.reset();
        boolean boolean11 = continuousOutputModel6.requiresDenseOutput();
        continuousOutputModel2.append(continuousOutputModel6);
        continuousOutputModel0.append(continuousOutputModel2);
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel14 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean15 = continuousOutputModel14.requiresDenseOutput();
        boolean boolean16 = continuousOutputModel14.requiresDenseOutput();
        continuousOutputModel14.reset();
        boolean boolean18 = continuousOutputModel14.requiresDenseOutput();
        boolean boolean19 = continuousOutputModel14.requiresDenseOutput();
        continuousOutputModel0.append(continuousOutputModel14);
        boolean boolean21 = continuousOutputModel14.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel22 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double23 = continuousOutputModel22.getFinalTime();
        double double24 = continuousOutputModel22.getInitialTime();
        boolean boolean25 = continuousOutputModel22.requiresDenseOutput();
        continuousOutputModel22.reset();
        boolean boolean27 = continuousOutputModel22.requiresDenseOutput();
        double double28 = continuousOutputModel22.getInitialTime();
        continuousOutputModel14.append(continuousOutputModel22);
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel22.setInterpolatedTime((double) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
    }

    @Test
    public void test01172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01172");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean1 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean2 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        boolean boolean4 = continuousOutputModel0.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel5 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double6 = continuousOutputModel5.getFinalTime();
        double double7 = continuousOutputModel5.getInitialTime();
        boolean boolean8 = continuousOutputModel5.requiresDenseOutput();
        continuousOutputModel0.append(continuousOutputModel5);
        double double10 = continuousOutputModel5.getInitialTime();
        double double11 = continuousOutputModel5.getFinalTime();
        continuousOutputModel5.reset();
        double double13 = continuousOutputModel5.getFinalTime();
        continuousOutputModel5.reset();
        boolean boolean15 = continuousOutputModel5.requiresDenseOutput();
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel5.setInterpolatedTime((double) 0.0f);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    }

    @Test
    public void test01173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01173");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean1 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        boolean boolean3 = continuousOutputModel0.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel4 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean5 = continuousOutputModel4.requiresDenseOutput();
        boolean boolean6 = continuousOutputModel4.requiresDenseOutput();
        continuousOutputModel4.reset();
        boolean boolean8 = continuousOutputModel4.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel9 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double10 = continuousOutputModel9.getFinalTime();
        double double11 = continuousOutputModel9.getInitialTime();
        boolean boolean12 = continuousOutputModel9.requiresDenseOutput();
        continuousOutputModel4.append(continuousOutputModel9);
        boolean boolean14 = continuousOutputModel9.requiresDenseOutput();
        double double15 = continuousOutputModel9.getFinalTime();
        continuousOutputModel9.reset();
        double double17 = continuousOutputModel9.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel18 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean19 = continuousOutputModel18.requiresDenseOutput();
        boolean boolean20 = continuousOutputModel18.requiresDenseOutput();
        continuousOutputModel18.reset();
        boolean boolean22 = continuousOutputModel18.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel23 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double24 = continuousOutputModel23.getFinalTime();
        double double25 = continuousOutputModel23.getInitialTime();
        boolean boolean26 = continuousOutputModel23.requiresDenseOutput();
        continuousOutputModel18.append(continuousOutputModel23);
        boolean boolean28 = continuousOutputModel23.requiresDenseOutput();
        double double29 = continuousOutputModel23.getFinalTime();
        continuousOutputModel23.reset();
        double double31 = continuousOutputModel23.getInitialTime();
        boolean boolean32 = continuousOutputModel23.requiresDenseOutput();
        continuousOutputModel9.append(continuousOutputModel23);
        boolean boolean34 = continuousOutputModel9.requiresDenseOutput();
        continuousOutputModel0.append(continuousOutputModel9);
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel36 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double37 = continuousOutputModel36.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel38 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean39 = continuousOutputModel38.requiresDenseOutput();
        double double40 = continuousOutputModel38.getInitialTime();
        boolean boolean41 = continuousOutputModel38.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel42 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double43 = continuousOutputModel42.getFinalTime();
        double double44 = continuousOutputModel42.getInitialTime();
        boolean boolean45 = continuousOutputModel42.requiresDenseOutput();
        continuousOutputModel42.reset();
        boolean boolean47 = continuousOutputModel42.requiresDenseOutput();
        continuousOutputModel38.append(continuousOutputModel42);
        continuousOutputModel36.append(continuousOutputModel38);
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel50 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean51 = continuousOutputModel50.requiresDenseOutput();
        boolean boolean52 = continuousOutputModel50.requiresDenseOutput();
        continuousOutputModel50.reset();
        boolean boolean54 = continuousOutputModel50.requiresDenseOutput();
        boolean boolean55 = continuousOutputModel50.requiresDenseOutput();
        continuousOutputModel36.append(continuousOutputModel50);
        boolean boolean57 = continuousOutputModel50.requiresDenseOutput();
        continuousOutputModel50.reset();
        continuousOutputModel9.append(continuousOutputModel50);
        continuousOutputModel50.reset();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator61 = null;
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel50.handleStep(stepInterpolator61, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
    }

    @Test
    public void test01174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01174");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double1 = continuousOutputModel0.getFinalTime();
        double double2 = continuousOutputModel0.getInitialTime();
        boolean boolean3 = continuousOutputModel0.requiresDenseOutput();
        double double4 = continuousOutputModel0.getInitialTime();
        continuousOutputModel0.reset();
        boolean boolean6 = continuousOutputModel0.requiresDenseOutput();
        double double7 = continuousOutputModel0.getInitialTime();
        boolean boolean8 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean9 = continuousOutputModel0.requiresDenseOutput();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator10 = null;
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel0.handleStep(stepInterpolator10, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test01175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01175");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean1 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean2 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        boolean boolean4 = continuousOutputModel0.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel5 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double6 = continuousOutputModel5.getFinalTime();
        double double7 = continuousOutputModel5.getInitialTime();
        boolean boolean8 = continuousOutputModel5.requiresDenseOutput();
        continuousOutputModel0.append(continuousOutputModel5);
        double double10 = continuousOutputModel5.getInitialTime();
        continuousOutputModel5.reset();
        boolean boolean12 = continuousOutputModel5.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel13 = new org.apache.commons.math.ode.ContinuousOutputModel();
        continuousOutputModel13.reset();
        continuousOutputModel13.reset();
        continuousOutputModel5.append(continuousOutputModel13);
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel17 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double18 = continuousOutputModel17.getFinalTime();
        double double19 = continuousOutputModel17.getInitialTime();
        boolean boolean20 = continuousOutputModel17.requiresDenseOutput();
        double double21 = continuousOutputModel17.getInitialTime();
        continuousOutputModel17.reset();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel23 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean24 = continuousOutputModel23.requiresDenseOutput();
        double double25 = continuousOutputModel23.getInitialTime();
        boolean boolean26 = continuousOutputModel23.requiresDenseOutput();
        continuousOutputModel17.append(continuousOutputModel23);
        boolean boolean28 = continuousOutputModel23.requiresDenseOutput();
        continuousOutputModel5.append(continuousOutputModel23);
        org.apache.commons.math.ode.StepInterpolator stepInterpolator30 = null;
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel5.handleStep(stepInterpolator30, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
    }

    @Test
    public void test01176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01176");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double1 = continuousOutputModel0.getFinalTime();
        double double2 = continuousOutputModel0.getInitialTime();
        double double3 = continuousOutputModel0.getFinalTime();
        boolean boolean4 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean5 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean6 = continuousOutputModel0.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel7 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double8 = continuousOutputModel7.getFinalTime();
        double double9 = continuousOutputModel7.getInitialTime();
        double double10 = continuousOutputModel7.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel11 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double12 = continuousOutputModel11.getFinalTime();
        double double13 = continuousOutputModel11.getInitialTime();
        continuousOutputModel7.append(continuousOutputModel11);
        boolean boolean15 = continuousOutputModel7.requiresDenseOutput();
        continuousOutputModel0.append(continuousOutputModel7);
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel17 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double18 = continuousOutputModel17.getFinalTime();
        double double19 = continuousOutputModel17.getInitialTime();
        double double20 = continuousOutputModel17.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel21 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double22 = continuousOutputModel21.getFinalTime();
        double double23 = continuousOutputModel21.getInitialTime();
        continuousOutputModel17.append(continuousOutputModel21);
        double double25 = continuousOutputModel17.getFinalTime();
        boolean boolean26 = continuousOutputModel17.requiresDenseOutput();
        boolean boolean27 = continuousOutputModel17.requiresDenseOutput();
        boolean boolean28 = continuousOutputModel17.requiresDenseOutput();
        boolean boolean29 = continuousOutputModel17.requiresDenseOutput();
        continuousOutputModel17.reset();
        boolean boolean31 = continuousOutputModel17.requiresDenseOutput();
        continuousOutputModel7.append(continuousOutputModel17);
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel17.setInterpolatedTime((double) 1L);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
    }

    @Test
    public void test01177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01177");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean1 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean2 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        boolean boolean4 = continuousOutputModel0.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel5 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double6 = continuousOutputModel5.getFinalTime();
        double double7 = continuousOutputModel5.getInitialTime();
        boolean boolean8 = continuousOutputModel5.requiresDenseOutput();
        continuousOutputModel0.append(continuousOutputModel5);
        double double10 = continuousOutputModel5.getInitialTime();
        double double11 = continuousOutputModel5.getFinalTime();
        continuousOutputModel5.reset();
        continuousOutputModel5.reset();
        continuousOutputModel5.reset();
        boolean boolean15 = continuousOutputModel5.requiresDenseOutput();
        // The following exception was thrown during execution in test generation
        try {
            double double16 = continuousOutputModel5.getInterpolatedTime();
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    }

    @Test
    public void test01178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01178");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double1 = continuousOutputModel0.getFinalTime();
        double double2 = continuousOutputModel0.getInitialTime();
        boolean boolean3 = continuousOutputModel0.requiresDenseOutput();
        double double4 = continuousOutputModel0.getInitialTime();
        continuousOutputModel0.reset();
        boolean boolean6 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean7 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator9 = null;
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel0.handleStep(stepInterpolator9, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void test01179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01179");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double1 = continuousOutputModel0.getFinalTime();
        double double2 = continuousOutputModel0.getInitialTime();
        boolean boolean3 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel5 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean6 = continuousOutputModel5.requiresDenseOutput();
        double double7 = continuousOutputModel5.getInitialTime();
        continuousOutputModel0.append(continuousOutputModel5);
        boolean boolean9 = continuousOutputModel5.requiresDenseOutput();
        boolean boolean10 = continuousOutputModel5.requiresDenseOutput();
        boolean boolean11 = continuousOutputModel5.requiresDenseOutput();
        continuousOutputModel5.reset();
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray13 = continuousOutputModel5.getInterpolatedState();
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test01180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01180");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean1 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean2 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        boolean boolean4 = continuousOutputModel0.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel5 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double6 = continuousOutputModel5.getFinalTime();
        double double7 = continuousOutputModel5.getInitialTime();
        boolean boolean8 = continuousOutputModel5.requiresDenseOutput();
        continuousOutputModel0.append(continuousOutputModel5);
        double double10 = continuousOutputModel5.getInitialTime();
        boolean boolean11 = continuousOutputModel5.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel12 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double13 = continuousOutputModel12.getFinalTime();
        double double14 = continuousOutputModel12.getInitialTime();
        double double15 = continuousOutputModel12.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel16 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double17 = continuousOutputModel16.getFinalTime();
        double double18 = continuousOutputModel16.getInitialTime();
        continuousOutputModel12.append(continuousOutputModel16);
        double double20 = continuousOutputModel12.getFinalTime();
        boolean boolean21 = continuousOutputModel12.requiresDenseOutput();
        boolean boolean22 = continuousOutputModel12.requiresDenseOutput();
        double double23 = continuousOutputModel12.getFinalTime();
        continuousOutputModel5.append(continuousOutputModel12);
        continuousOutputModel12.reset();
        java.lang.Class<?> wildcardClass26 = continuousOutputModel12.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertNotNull(wildcardClass26);
    }

    @Test
    public void test01181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01181");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean1 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean2 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        boolean boolean4 = continuousOutputModel0.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel5 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double6 = continuousOutputModel5.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel7 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean8 = continuousOutputModel7.requiresDenseOutput();
        double double9 = continuousOutputModel7.getInitialTime();
        boolean boolean10 = continuousOutputModel7.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel11 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double12 = continuousOutputModel11.getFinalTime();
        double double13 = continuousOutputModel11.getInitialTime();
        boolean boolean14 = continuousOutputModel11.requiresDenseOutput();
        continuousOutputModel11.reset();
        boolean boolean16 = continuousOutputModel11.requiresDenseOutput();
        continuousOutputModel7.append(continuousOutputModel11);
        continuousOutputModel5.append(continuousOutputModel7);
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel19 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean20 = continuousOutputModel19.requiresDenseOutput();
        boolean boolean21 = continuousOutputModel19.requiresDenseOutput();
        continuousOutputModel19.reset();
        boolean boolean23 = continuousOutputModel19.requiresDenseOutput();
        boolean boolean24 = continuousOutputModel19.requiresDenseOutput();
        continuousOutputModel5.append(continuousOutputModel19);
        continuousOutputModel0.append(continuousOutputModel19);
        boolean boolean27 = continuousOutputModel19.requiresDenseOutput();
        continuousOutputModel19.reset();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel29 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean30 = continuousOutputModel29.requiresDenseOutput();
        boolean boolean31 = continuousOutputModel29.requiresDenseOutput();
        continuousOutputModel29.reset();
        boolean boolean33 = continuousOutputModel29.requiresDenseOutput();
        continuousOutputModel29.reset();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel35 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double36 = continuousOutputModel35.getFinalTime();
        continuousOutputModel35.reset();
        continuousOutputModel29.append(continuousOutputModel35);
        double double39 = continuousOutputModel29.getInitialTime();
        boolean boolean40 = continuousOutputModel29.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel41 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double42 = continuousOutputModel41.getFinalTime();
        double double43 = continuousOutputModel41.getInitialTime();
        double double44 = continuousOutputModel41.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel45 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double46 = continuousOutputModel45.getFinalTime();
        double double47 = continuousOutputModel45.getInitialTime();
        continuousOutputModel41.append(continuousOutputModel45);
        double double49 = continuousOutputModel41.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel50 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double51 = continuousOutputModel50.getFinalTime();
        double double52 = continuousOutputModel50.getInitialTime();
        boolean boolean53 = continuousOutputModel50.requiresDenseOutput();
        double double54 = continuousOutputModel50.getInitialTime();
        continuousOutputModel50.reset();
        boolean boolean56 = continuousOutputModel50.requiresDenseOutput();
        continuousOutputModel41.append(continuousOutputModel50);
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel58 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean59 = continuousOutputModel58.requiresDenseOutput();
        double double60 = continuousOutputModel58.getInitialTime();
        boolean boolean61 = continuousOutputModel58.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel62 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double63 = continuousOutputModel62.getFinalTime();
        double double64 = continuousOutputModel62.getInitialTime();
        boolean boolean65 = continuousOutputModel62.requiresDenseOutput();
        continuousOutputModel62.reset();
        boolean boolean67 = continuousOutputModel62.requiresDenseOutput();
        continuousOutputModel58.append(continuousOutputModel62);
        continuousOutputModel58.reset();
        continuousOutputModel50.append(continuousOutputModel58);
        continuousOutputModel29.append(continuousOutputModel50);
        continuousOutputModel19.append(continuousOutputModel29);
        double double73 = continuousOutputModel19.getInitialTime();
        boolean boolean74 = continuousOutputModel19.requiresDenseOutput();
        // The following exception was thrown during execution in test generation
        try {
            double double75 = continuousOutputModel19.getInterpolatedTime();
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertTrue(Double.isNaN(double52));
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double60));
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double63));
        org.junit.Assert.assertTrue(Double.isNaN(double64));
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double73));
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
    }

    @Test
    public void test01182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01182");
        java.lang.String[] strArray11 = new java.lang.String[] { "hi!", "org.apache.commons.math.MathException: ", "hi!", "org.apache.commons.math.MathException: ", "", "" };
        org.apache.commons.math.ode.DerivativeException derivativeException12 = new org.apache.commons.math.ode.DerivativeException("", strArray11);
        java.io.IOException iOException18 = new java.io.IOException("hi!");
        org.apache.commons.math.ode.DerivativeException derivativeException19 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) iOException18);
        org.apache.commons.math.MathException mathException20 = new org.apache.commons.math.MathException("hi!", (java.lang.Throwable) iOException18);
        java.lang.Object[] objArray21 = mathException20.getArguments();
        org.apache.commons.math.MathException mathException22 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: ", objArray21);
        org.apache.commons.math.MathException mathException23 = new org.apache.commons.math.MathException("hi!", objArray21);
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel25 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double26 = continuousOutputModel25.getFinalTime();
        double double27 = continuousOutputModel25.getInitialTime();
        boolean boolean28 = continuousOutputModel25.requiresDenseOutput();
        double double29 = continuousOutputModel25.getInitialTime();
        java.io.IOException iOException32 = new java.io.IOException("hi!");
        org.apache.commons.math.ode.DerivativeException derivativeException33 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) iOException32);
        org.apache.commons.math.MathException mathException34 = new org.apache.commons.math.MathException("hi!", (java.lang.Throwable) iOException32);
        java.io.IOException iOException37 = new java.io.IOException("hi!");
        java.io.IOException iOException38 = new java.io.IOException("", (java.lang.Throwable) iOException37);
        org.apache.commons.math.ode.DerivativeException derivativeException39 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) iOException37);
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel41 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double42 = continuousOutputModel41.getFinalTime();
        double double43 = continuousOutputModel41.getInitialTime();
        java.lang.Object[] objArray44 = new java.lang.Object[] { double29, mathException34, iOException37, false, continuousOutputModel41 };
        java.lang.String[] strArray53 = new java.lang.String[] { "hi!", "org.apache.commons.math.MathException: ", "hi!", "org.apache.commons.math.MathException: ", "", "" };
        org.apache.commons.math.ode.DerivativeException derivativeException54 = new org.apache.commons.math.ode.DerivativeException("", strArray53);
        java.io.IOException iOException58 = new java.io.IOException("hi!");
        org.apache.commons.math.ode.DerivativeException derivativeException59 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) iOException58);
        org.apache.commons.math.MathException mathException60 = new org.apache.commons.math.MathException("hi!", (java.lang.Throwable) iOException58);
        java.lang.Object[] objArray61 = mathException60.getArguments();
        org.apache.commons.math.MathException mathException62 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: ", (java.lang.Throwable) mathException60);
        org.apache.commons.math.MathException mathException63 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: hi!", (java.lang.Object[]) strArray53, (java.lang.Throwable) mathException60);
        org.apache.commons.math.MathException mathException64 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: hi!", objArray44, (java.lang.Throwable) mathException63);
        org.apache.commons.math.MathException mathException65 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: ", objArray21, (java.lang.Throwable) mathException64);
        derivativeException12.addSuppressed((java.lang.Throwable) mathException64);
        org.apache.commons.math.MathException mathException67 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: hi!", (java.lang.Throwable) derivativeException12);
        java.lang.String[] strArray80 = new java.lang.String[] { "hi!", "org.apache.commons.math.MathException: ", "hi!", "org.apache.commons.math.MathException: ", "", "" };
        org.apache.commons.math.ode.DerivativeException derivativeException81 = new org.apache.commons.math.ode.DerivativeException("", strArray80);
        org.apache.commons.math.ode.DerivativeException derivativeException82 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray80);
        org.apache.commons.math.ode.DerivativeException derivativeException83 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: ", strArray80);
        org.apache.commons.math.ode.DerivativeException derivativeException84 = new org.apache.commons.math.ode.DerivativeException("", strArray80);
        org.apache.commons.math.MathException mathException85 = new org.apache.commons.math.MathException("", (java.lang.Object[]) strArray80);
        org.apache.commons.math.ode.DerivativeException derivativeException86 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.DerivativeException: ", strArray80);
        derivativeException12.addSuppressed((java.lang.Throwable) derivativeException86);
        java.io.IOException iOException88 = new java.io.IOException("org.apache.commons.math.MathException: ", (java.lang.Throwable) derivativeException86);
        org.apache.commons.math.MathException mathException89 = new org.apache.commons.math.MathException("org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: ", (java.lang.Throwable) iOException88);
        org.apache.commons.math.MathException mathException90 = new org.apache.commons.math.MathException("org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.DerivativeException: ", (java.lang.Throwable) mathException89);
        java.lang.String str91 = mathException90.getPattern();
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertNotNull(objArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray61), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray61), "[]");
        org.junit.Assert.assertNotNull(strArray80);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.DerivativeException: " + "'", str91, "org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.DerivativeException: ");
    }

    @Test
    public void test01183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01183");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean1 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean2 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        boolean boolean4 = continuousOutputModel0.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel5 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double6 = continuousOutputModel5.getFinalTime();
        double double7 = continuousOutputModel5.getInitialTime();
        boolean boolean8 = continuousOutputModel5.requiresDenseOutput();
        continuousOutputModel0.append(continuousOutputModel5);
        continuousOutputModel5.reset();
        boolean boolean11 = continuousOutputModel5.requiresDenseOutput();
        boolean boolean12 = continuousOutputModel5.requiresDenseOutput();
        double double13 = continuousOutputModel5.getFinalTime();
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray14 = continuousOutputModel5.getInterpolatedState();
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
    }

    @Test
    public void test01184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01184");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean1 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean2 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        boolean boolean4 = continuousOutputModel0.requiresDenseOutput();
        double double5 = continuousOutputModel0.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel6 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double7 = continuousOutputModel6.getFinalTime();
        double double8 = continuousOutputModel6.getInitialTime();
        boolean boolean9 = continuousOutputModel6.requiresDenseOutput();
        continuousOutputModel6.reset();
        double double11 = continuousOutputModel6.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel12 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double13 = continuousOutputModel12.getFinalTime();
        double double14 = continuousOutputModel12.getInitialTime();
        continuousOutputModel6.append(continuousOutputModel12);
        continuousOutputModel0.append(continuousOutputModel12);
        boolean boolean17 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean18 = continuousOutputModel0.requiresDenseOutput();
        // The following exception was thrown during execution in test generation
        try {
            double double19 = continuousOutputModel0.getInterpolatedTime();
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
    }

    @Test
    public void test01185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01185");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean1 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean2 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        boolean boolean4 = continuousOutputModel0.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel5 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double6 = continuousOutputModel5.getFinalTime();
        double double7 = continuousOutputModel5.getInitialTime();
        boolean boolean8 = continuousOutputModel5.requiresDenseOutput();
        continuousOutputModel0.append(continuousOutputModel5);
        continuousOutputModel5.reset();
        continuousOutputModel5.reset();
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel5.setInterpolatedTime((double) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void test01186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01186");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean1 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean2 = continuousOutputModel0.requiresDenseOutput();
        double double3 = continuousOutputModel0.getFinalTime();
        continuousOutputModel0.reset();
        boolean boolean5 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel7 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean8 = continuousOutputModel7.requiresDenseOutput();
        boolean boolean9 = continuousOutputModel7.requiresDenseOutput();
        double double10 = continuousOutputModel7.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel11 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean12 = continuousOutputModel11.requiresDenseOutput();
        continuousOutputModel7.append(continuousOutputModel11);
        boolean boolean14 = continuousOutputModel7.requiresDenseOutput();
        continuousOutputModel7.reset();
        continuousOutputModel0.append(continuousOutputModel7);
        double double17 = continuousOutputModel0.getInitialTime();
        double double18 = continuousOutputModel0.getFinalTime();
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray19 = continuousOutputModel0.getInterpolatedState();
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
    }

    @Test
    public void test01187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01187");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double1 = continuousOutputModel0.getFinalTime();
        double double2 = continuousOutputModel0.getInitialTime();
        boolean boolean3 = continuousOutputModel0.requiresDenseOutput();
        double double4 = continuousOutputModel0.getInitialTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel5 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean6 = continuousOutputModel5.requiresDenseOutput();
        boolean boolean7 = continuousOutputModel5.requiresDenseOutput();
        continuousOutputModel5.reset();
        boolean boolean9 = continuousOutputModel5.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel10 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double11 = continuousOutputModel10.getFinalTime();
        double double12 = continuousOutputModel10.getInitialTime();
        boolean boolean13 = continuousOutputModel10.requiresDenseOutput();
        continuousOutputModel5.append(continuousOutputModel10);
        continuousOutputModel0.append(continuousOutputModel5);
        continuousOutputModel0.reset();
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray17 = continuousOutputModel0.getInterpolatedState();
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test01188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01188");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double1 = continuousOutputModel0.getFinalTime();
        double double2 = continuousOutputModel0.getInitialTime();
        boolean boolean3 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        double double5 = continuousOutputModel0.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel6 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double7 = continuousOutputModel6.getFinalTime();
        double double8 = continuousOutputModel6.getInitialTime();
        continuousOutputModel0.append(continuousOutputModel6);
        continuousOutputModel0.reset();
        continuousOutputModel0.reset();
        continuousOutputModel0.reset();
        boolean boolean13 = continuousOutputModel0.requiresDenseOutput();
        // The following exception was thrown during execution in test generation
        try {
            double double14 = continuousOutputModel0.getInterpolatedTime();
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test01189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01189");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean1 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean2 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        boolean boolean4 = continuousOutputModel0.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel5 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double6 = continuousOutputModel5.getFinalTime();
        double double7 = continuousOutputModel5.getInitialTime();
        boolean boolean8 = continuousOutputModel5.requiresDenseOutput();
        continuousOutputModel0.append(continuousOutputModel5);
        continuousOutputModel5.reset();
        double double11 = continuousOutputModel5.getInitialTime();
        double double12 = continuousOutputModel5.getFinalTime();
        continuousOutputModel5.reset();
        continuousOutputModel5.reset();
        double double15 = continuousOutputModel5.getInitialTime();
        // The following exception was thrown during execution in test generation
        try {
            double double16 = continuousOutputModel5.getInterpolatedTime();
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
    }

    @Test
    public void test01190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01190");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean1 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean2 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        boolean boolean4 = continuousOutputModel0.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel5 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double6 = continuousOutputModel5.getFinalTime();
        double double7 = continuousOutputModel5.getInitialTime();
        boolean boolean8 = continuousOutputModel5.requiresDenseOutput();
        continuousOutputModel0.append(continuousOutputModel5);
        double double10 = continuousOutputModel5.getInitialTime();
        boolean boolean11 = continuousOutputModel5.requiresDenseOutput();
        boolean boolean12 = continuousOutputModel5.requiresDenseOutput();
        continuousOutputModel5.reset();
        continuousOutputModel5.reset();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel15 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean16 = continuousOutputModel15.requiresDenseOutput();
        boolean boolean17 = continuousOutputModel15.requiresDenseOutput();
        continuousOutputModel15.reset();
        continuousOutputModel15.reset();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel20 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double21 = continuousOutputModel20.getFinalTime();
        double double22 = continuousOutputModel20.getInitialTime();
        boolean boolean23 = continuousOutputModel20.requiresDenseOutput();
        continuousOutputModel20.reset();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel25 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean26 = continuousOutputModel25.requiresDenseOutput();
        double double27 = continuousOutputModel25.getInitialTime();
        continuousOutputModel20.append(continuousOutputModel25);
        continuousOutputModel15.append(continuousOutputModel25);
        boolean boolean30 = continuousOutputModel15.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel31 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double32 = continuousOutputModel31.getFinalTime();
        double double33 = continuousOutputModel31.getInitialTime();
        double double34 = continuousOutputModel31.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel35 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double36 = continuousOutputModel35.getFinalTime();
        double double37 = continuousOutputModel35.getInitialTime();
        continuousOutputModel31.append(continuousOutputModel35);
        double double39 = continuousOutputModel31.getInitialTime();
        double double40 = continuousOutputModel31.getInitialTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel41 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double42 = continuousOutputModel41.getFinalTime();
        double double43 = continuousOutputModel41.getInitialTime();
        continuousOutputModel41.reset();
        double double45 = continuousOutputModel41.getInitialTime();
        continuousOutputModel31.append(continuousOutputModel41);
        continuousOutputModel15.append(continuousOutputModel31);
        continuousOutputModel5.append(continuousOutputModel15);
        org.apache.commons.math.ode.StepInterpolator stepInterpolator49 = null;
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel15.handleStep(stepInterpolator49, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertTrue(Double.isNaN(double45));
    }

    @Test
    public void test01191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01191");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double1 = continuousOutputModel0.getFinalTime();
        double double2 = continuousOutputModel0.getInitialTime();
        boolean boolean3 = continuousOutputModel0.requiresDenseOutput();
        double double4 = continuousOutputModel0.getInitialTime();
        double double5 = continuousOutputModel0.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel6 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean7 = continuousOutputModel6.requiresDenseOutput();
        boolean boolean8 = continuousOutputModel6.requiresDenseOutput();
        double double9 = continuousOutputModel6.getFinalTime();
        continuousOutputModel6.reset();
        boolean boolean11 = continuousOutputModel6.requiresDenseOutput();
        continuousOutputModel6.reset();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel13 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean14 = continuousOutputModel13.requiresDenseOutput();
        boolean boolean15 = continuousOutputModel13.requiresDenseOutput();
        double double16 = continuousOutputModel13.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel17 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean18 = continuousOutputModel17.requiresDenseOutput();
        continuousOutputModel13.append(continuousOutputModel17);
        boolean boolean20 = continuousOutputModel13.requiresDenseOutput();
        continuousOutputModel13.reset();
        continuousOutputModel6.append(continuousOutputModel13);
        boolean boolean23 = continuousOutputModel6.requiresDenseOutput();
        continuousOutputModel0.append(continuousOutputModel6);
        double double25 = continuousOutputModel6.getFinalTime();
        double double26 = continuousOutputModel6.getFinalTime();
        // The following exception was thrown during execution in test generation
        try {
            double double27 = continuousOutputModel6.getInterpolatedTime();
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue(Double.isNaN(double26));
    }

    @Test
    public void test01192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01192");
        java.io.IOException iOException6 = new java.io.IOException("hi!");
        org.apache.commons.math.ode.DerivativeException derivativeException7 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) iOException6);
        org.apache.commons.math.MathException mathException8 = new org.apache.commons.math.MathException("hi!", (java.lang.Throwable) iOException6);
        java.lang.Object[] objArray9 = mathException8.getArguments();
        org.apache.commons.math.MathException mathException10 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: ", objArray9);
        org.apache.commons.math.MathException mathException11 = new org.apache.commons.math.MathException("hi!", objArray9);
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel13 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double14 = continuousOutputModel13.getFinalTime();
        double double15 = continuousOutputModel13.getInitialTime();
        boolean boolean16 = continuousOutputModel13.requiresDenseOutput();
        double double17 = continuousOutputModel13.getInitialTime();
        java.io.IOException iOException20 = new java.io.IOException("hi!");
        org.apache.commons.math.ode.DerivativeException derivativeException21 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) iOException20);
        org.apache.commons.math.MathException mathException22 = new org.apache.commons.math.MathException("hi!", (java.lang.Throwable) iOException20);
        java.io.IOException iOException25 = new java.io.IOException("hi!");
        java.io.IOException iOException26 = new java.io.IOException("", (java.lang.Throwable) iOException25);
        org.apache.commons.math.ode.DerivativeException derivativeException27 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) iOException25);
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel29 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double30 = continuousOutputModel29.getFinalTime();
        double double31 = continuousOutputModel29.getInitialTime();
        java.lang.Object[] objArray32 = new java.lang.Object[] { double17, mathException22, iOException25, false, continuousOutputModel29 };
        java.lang.String[] strArray41 = new java.lang.String[] { "hi!", "org.apache.commons.math.MathException: ", "hi!", "org.apache.commons.math.MathException: ", "", "" };
        org.apache.commons.math.ode.DerivativeException derivativeException42 = new org.apache.commons.math.ode.DerivativeException("", strArray41);
        java.io.IOException iOException46 = new java.io.IOException("hi!");
        org.apache.commons.math.ode.DerivativeException derivativeException47 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) iOException46);
        org.apache.commons.math.MathException mathException48 = new org.apache.commons.math.MathException("hi!", (java.lang.Throwable) iOException46);
        java.lang.Object[] objArray49 = mathException48.getArguments();
        org.apache.commons.math.MathException mathException50 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: ", (java.lang.Throwable) mathException48);
        org.apache.commons.math.MathException mathException51 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: hi!", (java.lang.Object[]) strArray41, (java.lang.Throwable) mathException48);
        org.apache.commons.math.MathException mathException52 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: hi!", objArray32, (java.lang.Throwable) mathException51);
        org.apache.commons.math.MathException mathException53 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: ", objArray9, (java.lang.Throwable) mathException52);
        org.apache.commons.math.MathException mathException54 = new org.apache.commons.math.MathException("hi!", objArray9);
        java.lang.String[] strArray63 = new java.lang.String[] { "hi!", "org.apache.commons.math.MathException: ", "hi!", "org.apache.commons.math.MathException: ", "", "" };
        org.apache.commons.math.ode.DerivativeException derivativeException64 = new org.apache.commons.math.ode.DerivativeException("", strArray63);
        java.io.IOException iOException68 = new java.io.IOException("hi!");
        org.apache.commons.math.ode.DerivativeException derivativeException69 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) iOException68);
        org.apache.commons.math.MathException mathException70 = new org.apache.commons.math.MathException("hi!", (java.lang.Throwable) iOException68);
        java.lang.Object[] objArray71 = mathException70.getArguments();
        org.apache.commons.math.MathException mathException72 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: ", (java.lang.Throwable) mathException70);
        org.apache.commons.math.MathException mathException73 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: hi!", (java.lang.Object[]) strArray63, (java.lang.Throwable) mathException70);
        java.lang.String str74 = mathException73.getPattern();
        org.apache.commons.math.ode.DerivativeException derivativeException75 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) mathException73);
        mathException54.addSuppressed((java.lang.Throwable) derivativeException75);
        java.lang.Object[] objArray77 = mathException54.getArguments();
        java.lang.Class<?> wildcardClass78 = mathException54.getClass();
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(objArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray49), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray49), "[]");
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertNotNull(objArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray71), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray71), "[]");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "org.apache.commons.math.MathException: hi!" + "'", str74, "org.apache.commons.math.MathException: hi!");
        org.junit.Assert.assertNotNull(objArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray77), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray77), "[]");
        org.junit.Assert.assertNotNull(wildcardClass78);
    }

    @Test
    public void test01193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01193");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean1 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean2 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        boolean boolean4 = continuousOutputModel0.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel5 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double6 = continuousOutputModel5.getFinalTime();
        double double7 = continuousOutputModel5.getInitialTime();
        boolean boolean8 = continuousOutputModel5.requiresDenseOutput();
        continuousOutputModel0.append(continuousOutputModel5);
        continuousOutputModel5.reset();
        boolean boolean11 = continuousOutputModel5.requiresDenseOutput();
        boolean boolean12 = continuousOutputModel5.requiresDenseOutput();
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel5.setInterpolatedTime((double) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test01194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01194");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean1 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean2 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        boolean boolean4 = continuousOutputModel0.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel5 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double6 = continuousOutputModel5.getFinalTime();
        double double7 = continuousOutputModel5.getInitialTime();
        boolean boolean8 = continuousOutputModel5.requiresDenseOutput();
        continuousOutputModel0.append(continuousOutputModel5);
        boolean boolean10 = continuousOutputModel5.requiresDenseOutput();
        double double11 = continuousOutputModel5.getFinalTime();
        continuousOutputModel5.reset();
        double double13 = continuousOutputModel5.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel14 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean15 = continuousOutputModel14.requiresDenseOutput();
        boolean boolean16 = continuousOutputModel14.requiresDenseOutput();
        continuousOutputModel14.reset();
        boolean boolean18 = continuousOutputModel14.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel19 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double20 = continuousOutputModel19.getFinalTime();
        double double21 = continuousOutputModel19.getInitialTime();
        boolean boolean22 = continuousOutputModel19.requiresDenseOutput();
        continuousOutputModel14.append(continuousOutputModel19);
        boolean boolean24 = continuousOutputModel19.requiresDenseOutput();
        double double25 = continuousOutputModel19.getFinalTime();
        continuousOutputModel19.reset();
        double double27 = continuousOutputModel19.getInitialTime();
        boolean boolean28 = continuousOutputModel19.requiresDenseOutput();
        continuousOutputModel5.append(continuousOutputModel19);
        boolean boolean30 = continuousOutputModel19.requiresDenseOutput();
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray31 = continuousOutputModel19.getInterpolatedState();
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
    }

    @Test
    public void test01195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01195");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double1 = continuousOutputModel0.getFinalTime();
        continuousOutputModel0.reset();
        continuousOutputModel0.reset();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel4 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double5 = continuousOutputModel4.getFinalTime();
        double double6 = continuousOutputModel4.getInitialTime();
        double double7 = continuousOutputModel4.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel8 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double9 = continuousOutputModel8.getFinalTime();
        double double10 = continuousOutputModel8.getInitialTime();
        continuousOutputModel4.append(continuousOutputModel8);
        double double12 = continuousOutputModel4.getInitialTime();
        double double13 = continuousOutputModel4.getFinalTime();
        continuousOutputModel0.append(continuousOutputModel4);
        double double15 = continuousOutputModel4.getFinalTime();
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray16 = continuousOutputModel4.getInterpolatedState();
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
    }

    @Test
    public void test01196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01196");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean1 = continuousOutputModel0.requiresDenseOutput();
        double double2 = continuousOutputModel0.getInitialTime();
        boolean boolean3 = continuousOutputModel0.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel4 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double5 = continuousOutputModel4.getFinalTime();
        double double6 = continuousOutputModel4.getInitialTime();
        boolean boolean7 = continuousOutputModel4.requiresDenseOutput();
        continuousOutputModel4.reset();
        boolean boolean9 = continuousOutputModel4.requiresDenseOutput();
        continuousOutputModel0.append(continuousOutputModel4);
        continuousOutputModel4.reset();
        continuousOutputModel4.reset();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel13 = new org.apache.commons.math.ode.ContinuousOutputModel();
        continuousOutputModel13.reset();
        boolean boolean15 = continuousOutputModel13.requiresDenseOutput();
        continuousOutputModel4.append(continuousOutputModel13);
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel17 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double18 = continuousOutputModel17.getFinalTime();
        double double19 = continuousOutputModel17.getInitialTime();
        boolean boolean20 = continuousOutputModel17.requiresDenseOutput();
        continuousOutputModel17.reset();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel22 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean23 = continuousOutputModel22.requiresDenseOutput();
        double double24 = continuousOutputModel22.getInitialTime();
        continuousOutputModel17.append(continuousOutputModel22);
        continuousOutputModel4.append(continuousOutputModel22);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray27 = continuousOutputModel4.getInterpolatedState();
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
    }

    @Test
    public void test01197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01197");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean1 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean2 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        continuousOutputModel0.reset();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel5 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double6 = continuousOutputModel5.getFinalTime();
        double double7 = continuousOutputModel5.getInitialTime();
        boolean boolean8 = continuousOutputModel5.requiresDenseOutput();
        continuousOutputModel5.reset();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel10 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean11 = continuousOutputModel10.requiresDenseOutput();
        double double12 = continuousOutputModel10.getInitialTime();
        continuousOutputModel5.append(continuousOutputModel10);
        continuousOutputModel0.append(continuousOutputModel10);
        org.apache.commons.math.ode.StepInterpolator stepInterpolator15 = null;
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel10.handleStep(stepInterpolator15, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
    }

    @Test
    public void test01198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01198");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double1 = continuousOutputModel0.getFinalTime();
        double double2 = continuousOutputModel0.getInitialTime();
        double double3 = continuousOutputModel0.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel4 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double5 = continuousOutputModel4.getFinalTime();
        double double6 = continuousOutputModel4.getInitialTime();
        continuousOutputModel0.append(continuousOutputModel4);
        double double8 = continuousOutputModel0.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel9 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double10 = continuousOutputModel9.getFinalTime();
        double double11 = continuousOutputModel9.getInitialTime();
        boolean boolean12 = continuousOutputModel9.requiresDenseOutput();
        double double13 = continuousOutputModel9.getInitialTime();
        continuousOutputModel9.reset();
        boolean boolean15 = continuousOutputModel9.requiresDenseOutput();
        continuousOutputModel0.append(continuousOutputModel9);
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel17 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean18 = continuousOutputModel17.requiresDenseOutput();
        double double19 = continuousOutputModel17.getInitialTime();
        boolean boolean20 = continuousOutputModel17.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel21 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double22 = continuousOutputModel21.getFinalTime();
        double double23 = continuousOutputModel21.getInitialTime();
        boolean boolean24 = continuousOutputModel21.requiresDenseOutput();
        continuousOutputModel21.reset();
        boolean boolean26 = continuousOutputModel21.requiresDenseOutput();
        continuousOutputModel17.append(continuousOutputModel21);
        continuousOutputModel17.reset();
        continuousOutputModel9.append(continuousOutputModel17);
        boolean boolean30 = continuousOutputModel17.requiresDenseOutput();
        double double31 = continuousOutputModel17.getInitialTime();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator32 = null;
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel17.handleStep(stepInterpolator32, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double31));
    }

    @Test
    public void test01199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01199");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean1 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean2 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        boolean boolean4 = continuousOutputModel0.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel5 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double6 = continuousOutputModel5.getFinalTime();
        double double7 = continuousOutputModel5.getInitialTime();
        boolean boolean8 = continuousOutputModel5.requiresDenseOutput();
        continuousOutputModel0.append(continuousOutputModel5);
        double double10 = continuousOutputModel5.getInitialTime();
        boolean boolean11 = continuousOutputModel5.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel12 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double13 = continuousOutputModel12.getFinalTime();
        double double14 = continuousOutputModel12.getInitialTime();
        double double15 = continuousOutputModel12.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel16 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double17 = continuousOutputModel16.getFinalTime();
        double double18 = continuousOutputModel16.getInitialTime();
        continuousOutputModel12.append(continuousOutputModel16);
        double double20 = continuousOutputModel12.getFinalTime();
        boolean boolean21 = continuousOutputModel12.requiresDenseOutput();
        boolean boolean22 = continuousOutputModel12.requiresDenseOutput();
        double double23 = continuousOutputModel12.getFinalTime();
        continuousOutputModel5.append(continuousOutputModel12);
        double double25 = continuousOutputModel12.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel26 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean27 = continuousOutputModel26.requiresDenseOutput();
        boolean boolean28 = continuousOutputModel26.requiresDenseOutput();
        continuousOutputModel26.reset();
        continuousOutputModel26.reset();
        boolean boolean31 = continuousOutputModel26.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel32 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double33 = continuousOutputModel32.getFinalTime();
        double double34 = continuousOutputModel32.getInitialTime();
        double double35 = continuousOutputModel32.getFinalTime();
        boolean boolean36 = continuousOutputModel32.requiresDenseOutput();
        continuousOutputModel26.append(continuousOutputModel32);
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel38 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean39 = continuousOutputModel38.requiresDenseOutput();
        boolean boolean40 = continuousOutputModel38.requiresDenseOutput();
        continuousOutputModel38.reset();
        continuousOutputModel38.reset();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel43 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double44 = continuousOutputModel43.getFinalTime();
        double double45 = continuousOutputModel43.getInitialTime();
        boolean boolean46 = continuousOutputModel43.requiresDenseOutput();
        continuousOutputModel43.reset();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel48 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean49 = continuousOutputModel48.requiresDenseOutput();
        double double50 = continuousOutputModel48.getInitialTime();
        continuousOutputModel43.append(continuousOutputModel48);
        continuousOutputModel38.append(continuousOutputModel48);
        continuousOutputModel38.reset();
        boolean boolean54 = continuousOutputModel38.requiresDenseOutput();
        double double55 = continuousOutputModel38.getFinalTime();
        continuousOutputModel26.append(continuousOutputModel38);
        continuousOutputModel12.append(continuousOutputModel26);
        continuousOutputModel26.reset();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator59 = null;
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel26.handleStep(stepInterpolator59, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double50));
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double55));
    }

    @Test
    public void test01200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01200");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean1 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean2 = continuousOutputModel0.requiresDenseOutput();
        double double3 = continuousOutputModel0.getFinalTime();
        continuousOutputModel0.reset();
        boolean boolean5 = continuousOutputModel0.requiresDenseOutput();
        double double6 = continuousOutputModel0.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel7 = new org.apache.commons.math.ode.ContinuousOutputModel();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel8 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean9 = continuousOutputModel8.requiresDenseOutput();
        boolean boolean10 = continuousOutputModel8.requiresDenseOutput();
        double double11 = continuousOutputModel8.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel12 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean13 = continuousOutputModel12.requiresDenseOutput();
        continuousOutputModel8.append(continuousOutputModel12);
        continuousOutputModel7.append(continuousOutputModel12);
        double double16 = continuousOutputModel7.getFinalTime();
        continuousOutputModel0.append(continuousOutputModel7);
        org.apache.commons.math.ode.StepInterpolator stepInterpolator18 = null;
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel0.handleStep(stepInterpolator18, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
    }

    @Test
    public void test01201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01201");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double1 = continuousOutputModel0.getFinalTime();
        double double2 = continuousOutputModel0.getInitialTime();
        boolean boolean3 = continuousOutputModel0.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel4 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean5 = continuousOutputModel4.requiresDenseOutput();
        double double6 = continuousOutputModel4.getInitialTime();
        boolean boolean7 = continuousOutputModel4.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel8 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double9 = continuousOutputModel8.getFinalTime();
        double double10 = continuousOutputModel8.getInitialTime();
        boolean boolean11 = continuousOutputModel8.requiresDenseOutput();
        continuousOutputModel8.reset();
        boolean boolean13 = continuousOutputModel8.requiresDenseOutput();
        continuousOutputModel4.append(continuousOutputModel8);
        continuousOutputModel0.append(continuousOutputModel4);
        double double16 = continuousOutputModel0.getFinalTime();
        boolean boolean17 = continuousOutputModel0.requiresDenseOutput();
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel0.setInterpolatedTime((double) (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
    }

    @Test
    public void test01202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01202");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double1 = continuousOutputModel0.getFinalTime();
        double double2 = continuousOutputModel0.getInitialTime();
        continuousOutputModel0.reset();
        boolean boolean4 = continuousOutputModel0.requiresDenseOutput();
        double double5 = continuousOutputModel0.getFinalTime();
        double double6 = continuousOutputModel0.getFinalTime();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator7 = null;
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel0.handleStep(stepInterpolator7, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
    }

    @Test
    public void test01203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01203");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel1 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean2 = continuousOutputModel1.requiresDenseOutput();
        boolean boolean3 = continuousOutputModel1.requiresDenseOutput();
        double double4 = continuousOutputModel1.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel5 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean6 = continuousOutputModel5.requiresDenseOutput();
        continuousOutputModel1.append(continuousOutputModel5);
        continuousOutputModel0.append(continuousOutputModel5);
        boolean boolean9 = continuousOutputModel5.requiresDenseOutput();
        double double10 = continuousOutputModel5.getInitialTime();
        continuousOutputModel5.reset();
        continuousOutputModel5.reset();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel13 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean14 = continuousOutputModel13.requiresDenseOutput();
        double double15 = continuousOutputModel13.getInitialTime();
        double double16 = continuousOutputModel13.getFinalTime();
        boolean boolean17 = continuousOutputModel13.requiresDenseOutput();
        continuousOutputModel13.reset();
        double double19 = continuousOutputModel13.getFinalTime();
        double double20 = continuousOutputModel13.getFinalTime();
        continuousOutputModel5.append(continuousOutputModel13);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray22 = continuousOutputModel13.getInterpolatedState();
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue(Double.isNaN(double20));
    }

    @Test
    public void test01204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01204");
        java.io.IOException iOException6 = new java.io.IOException("hi!");
        org.apache.commons.math.ode.DerivativeException derivativeException7 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) iOException6);
        org.apache.commons.math.MathException mathException8 = new org.apache.commons.math.MathException("hi!", (java.lang.Throwable) iOException6);
        java.lang.Object[] objArray9 = mathException8.getArguments();
        org.apache.commons.math.MathException mathException10 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: ", objArray9);
        org.apache.commons.math.MathException mathException11 = new org.apache.commons.math.MathException("hi!", objArray9);
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel13 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double14 = continuousOutputModel13.getFinalTime();
        double double15 = continuousOutputModel13.getInitialTime();
        boolean boolean16 = continuousOutputModel13.requiresDenseOutput();
        double double17 = continuousOutputModel13.getInitialTime();
        java.io.IOException iOException20 = new java.io.IOException("hi!");
        org.apache.commons.math.ode.DerivativeException derivativeException21 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) iOException20);
        org.apache.commons.math.MathException mathException22 = new org.apache.commons.math.MathException("hi!", (java.lang.Throwable) iOException20);
        java.io.IOException iOException25 = new java.io.IOException("hi!");
        java.io.IOException iOException26 = new java.io.IOException("", (java.lang.Throwable) iOException25);
        org.apache.commons.math.ode.DerivativeException derivativeException27 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) iOException25);
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel29 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double30 = continuousOutputModel29.getFinalTime();
        double double31 = continuousOutputModel29.getInitialTime();
        java.lang.Object[] objArray32 = new java.lang.Object[] { double17, mathException22, iOException25, false, continuousOutputModel29 };
        java.lang.String[] strArray41 = new java.lang.String[] { "hi!", "org.apache.commons.math.MathException: ", "hi!", "org.apache.commons.math.MathException: ", "", "" };
        org.apache.commons.math.ode.DerivativeException derivativeException42 = new org.apache.commons.math.ode.DerivativeException("", strArray41);
        java.io.IOException iOException46 = new java.io.IOException("hi!");
        org.apache.commons.math.ode.DerivativeException derivativeException47 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) iOException46);
        org.apache.commons.math.MathException mathException48 = new org.apache.commons.math.MathException("hi!", (java.lang.Throwable) iOException46);
        java.lang.Object[] objArray49 = mathException48.getArguments();
        org.apache.commons.math.MathException mathException50 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: ", (java.lang.Throwable) mathException48);
        org.apache.commons.math.MathException mathException51 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: hi!", (java.lang.Object[]) strArray41, (java.lang.Throwable) mathException48);
        org.apache.commons.math.MathException mathException52 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: hi!", objArray32, (java.lang.Throwable) mathException51);
        org.apache.commons.math.MathException mathException53 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: ", objArray9, (java.lang.Throwable) mathException52);
        java.io.IOException iOException54 = new java.io.IOException((java.lang.Throwable) mathException52);
        java.lang.Object[] objArray55 = mathException52.getArguments();
        org.apache.commons.math.MathException mathException56 = new org.apache.commons.math.MathException("org.apache.commons.math.ode.DerivativeException: ", objArray55);
        org.apache.commons.math.ode.DerivativeException derivativeException57 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) mathException56);
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(objArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray49), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray49), "[]");
        org.junit.Assert.assertNotNull(objArray55);
    }

    @Test
    public void test01205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01205");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double1 = continuousOutputModel0.getFinalTime();
        double double2 = continuousOutputModel0.getInitialTime();
        boolean boolean3 = continuousOutputModel0.requiresDenseOutput();
        double double4 = continuousOutputModel0.getInitialTime();
        continuousOutputModel0.reset();
        boolean boolean6 = continuousOutputModel0.requiresDenseOutput();
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray7 = continuousOutputModel0.getInterpolatedState();
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
    }

    @Test
    public void test01206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01206");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double1 = continuousOutputModel0.getFinalTime();
        double double2 = continuousOutputModel0.getInitialTime();
        double double3 = continuousOutputModel0.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel4 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double5 = continuousOutputModel4.getFinalTime();
        double double6 = continuousOutputModel4.getInitialTime();
        continuousOutputModel0.append(continuousOutputModel4);
        double double8 = continuousOutputModel0.getInitialTime();
        double double9 = continuousOutputModel0.getInitialTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel10 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double11 = continuousOutputModel10.getFinalTime();
        double double12 = continuousOutputModel10.getInitialTime();
        continuousOutputModel10.reset();
        double double14 = continuousOutputModel10.getInitialTime();
        continuousOutputModel0.append(continuousOutputModel10);
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel16 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double17 = continuousOutputModel16.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel18 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean19 = continuousOutputModel18.requiresDenseOutput();
        double double20 = continuousOutputModel18.getInitialTime();
        boolean boolean21 = continuousOutputModel18.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel22 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double23 = continuousOutputModel22.getFinalTime();
        double double24 = continuousOutputModel22.getInitialTime();
        boolean boolean25 = continuousOutputModel22.requiresDenseOutput();
        continuousOutputModel22.reset();
        boolean boolean27 = continuousOutputModel22.requiresDenseOutput();
        continuousOutputModel18.append(continuousOutputModel22);
        continuousOutputModel16.append(continuousOutputModel18);
        continuousOutputModel0.append(continuousOutputModel18);
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel31 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double32 = continuousOutputModel31.getFinalTime();
        double double33 = continuousOutputModel31.getInitialTime();
        boolean boolean34 = continuousOutputModel31.requiresDenseOutput();
        double double35 = continuousOutputModel31.getInitialTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel36 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean37 = continuousOutputModel36.requiresDenseOutput();
        boolean boolean38 = continuousOutputModel36.requiresDenseOutput();
        continuousOutputModel36.reset();
        boolean boolean40 = continuousOutputModel36.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel41 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double42 = continuousOutputModel41.getFinalTime();
        double double43 = continuousOutputModel41.getInitialTime();
        boolean boolean44 = continuousOutputModel41.requiresDenseOutput();
        continuousOutputModel36.append(continuousOutputModel41);
        continuousOutputModel31.append(continuousOutputModel36);
        boolean boolean47 = continuousOutputModel31.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel48 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean49 = continuousOutputModel48.requiresDenseOutput();
        continuousOutputModel48.reset();
        boolean boolean51 = continuousOutputModel48.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel52 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean53 = continuousOutputModel52.requiresDenseOutput();
        boolean boolean54 = continuousOutputModel52.requiresDenseOutput();
        continuousOutputModel52.reset();
        boolean boolean56 = continuousOutputModel52.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel57 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double58 = continuousOutputModel57.getFinalTime();
        double double59 = continuousOutputModel57.getInitialTime();
        boolean boolean60 = continuousOutputModel57.requiresDenseOutput();
        continuousOutputModel52.append(continuousOutputModel57);
        boolean boolean62 = continuousOutputModel57.requiresDenseOutput();
        double double63 = continuousOutputModel57.getFinalTime();
        continuousOutputModel57.reset();
        double double65 = continuousOutputModel57.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel66 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean67 = continuousOutputModel66.requiresDenseOutput();
        boolean boolean68 = continuousOutputModel66.requiresDenseOutput();
        continuousOutputModel66.reset();
        boolean boolean70 = continuousOutputModel66.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel71 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double72 = continuousOutputModel71.getFinalTime();
        double double73 = continuousOutputModel71.getInitialTime();
        boolean boolean74 = continuousOutputModel71.requiresDenseOutput();
        continuousOutputModel66.append(continuousOutputModel71);
        boolean boolean76 = continuousOutputModel71.requiresDenseOutput();
        double double77 = continuousOutputModel71.getFinalTime();
        continuousOutputModel71.reset();
        double double79 = continuousOutputModel71.getInitialTime();
        boolean boolean80 = continuousOutputModel71.requiresDenseOutput();
        continuousOutputModel57.append(continuousOutputModel71);
        boolean boolean82 = continuousOutputModel57.requiresDenseOutput();
        continuousOutputModel48.append(continuousOutputModel57);
        continuousOutputModel57.reset();
        continuousOutputModel31.append(continuousOutputModel57);
        continuousOutputModel18.append(continuousOutputModel31);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray87 = continuousOutputModel18.getInterpolatedState();
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double58));
        org.junit.Assert.assertTrue(Double.isNaN(double59));
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double63));
        org.junit.Assert.assertTrue(Double.isNaN(double65));
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double72));
        org.junit.Assert.assertTrue(Double.isNaN(double73));
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double77));
        org.junit.Assert.assertTrue(Double.isNaN(double79));
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
    }

    @Test
    public void test01207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01207");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean1 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel3 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double4 = continuousOutputModel3.getFinalTime();
        double double5 = continuousOutputModel3.getInitialTime();
        boolean boolean6 = continuousOutputModel3.requiresDenseOutput();
        continuousOutputModel3.reset();
        boolean boolean8 = continuousOutputModel3.requiresDenseOutput();
        boolean boolean9 = continuousOutputModel3.requiresDenseOutput();
        double double10 = continuousOutputModel3.getInitialTime();
        continuousOutputModel0.append(continuousOutputModel3);
        boolean boolean12 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel0.setInterpolatedTime((double) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test01208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01208");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "org.apache.commons.math.MathException: ", "hi!", "org.apache.commons.math.MathException: ", "", "" };
        org.apache.commons.math.ode.DerivativeException derivativeException8 = new org.apache.commons.math.ode.DerivativeException("", strArray7);
        java.io.IOException iOException14 = new java.io.IOException("hi!");
        org.apache.commons.math.ode.DerivativeException derivativeException15 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) iOException14);
        org.apache.commons.math.MathException mathException16 = new org.apache.commons.math.MathException("hi!", (java.lang.Throwable) iOException14);
        java.lang.Object[] objArray17 = mathException16.getArguments();
        org.apache.commons.math.MathException mathException18 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: ", objArray17);
        org.apache.commons.math.MathException mathException19 = new org.apache.commons.math.MathException("hi!", objArray17);
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel21 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double22 = continuousOutputModel21.getFinalTime();
        double double23 = continuousOutputModel21.getInitialTime();
        boolean boolean24 = continuousOutputModel21.requiresDenseOutput();
        double double25 = continuousOutputModel21.getInitialTime();
        java.io.IOException iOException28 = new java.io.IOException("hi!");
        org.apache.commons.math.ode.DerivativeException derivativeException29 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) iOException28);
        org.apache.commons.math.MathException mathException30 = new org.apache.commons.math.MathException("hi!", (java.lang.Throwable) iOException28);
        java.io.IOException iOException33 = new java.io.IOException("hi!");
        java.io.IOException iOException34 = new java.io.IOException("", (java.lang.Throwable) iOException33);
        org.apache.commons.math.ode.DerivativeException derivativeException35 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) iOException33);
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel37 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double38 = continuousOutputModel37.getFinalTime();
        double double39 = continuousOutputModel37.getInitialTime();
        java.lang.Object[] objArray40 = new java.lang.Object[] { double25, mathException30, iOException33, false, continuousOutputModel37 };
        java.lang.String[] strArray49 = new java.lang.String[] { "hi!", "org.apache.commons.math.MathException: ", "hi!", "org.apache.commons.math.MathException: ", "", "" };
        org.apache.commons.math.ode.DerivativeException derivativeException50 = new org.apache.commons.math.ode.DerivativeException("", strArray49);
        java.io.IOException iOException54 = new java.io.IOException("hi!");
        org.apache.commons.math.ode.DerivativeException derivativeException55 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) iOException54);
        org.apache.commons.math.MathException mathException56 = new org.apache.commons.math.MathException("hi!", (java.lang.Throwable) iOException54);
        java.lang.Object[] objArray57 = mathException56.getArguments();
        org.apache.commons.math.MathException mathException58 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: ", (java.lang.Throwable) mathException56);
        org.apache.commons.math.MathException mathException59 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: hi!", (java.lang.Object[]) strArray49, (java.lang.Throwable) mathException56);
        org.apache.commons.math.MathException mathException60 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: hi!", objArray40, (java.lang.Throwable) mathException59);
        org.apache.commons.math.MathException mathException61 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: ", objArray17, (java.lang.Throwable) mathException60);
        derivativeException8.addSuppressed((java.lang.Throwable) mathException60);
        org.apache.commons.math.MathException mathException63 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException60);
        java.io.IOException iOException64 = new java.io.IOException((java.lang.Throwable) mathException60);
        java.lang.String str65 = mathException60.getPattern();
        java.lang.String[] strArray77 = new java.lang.String[] { "org.apache.commons.math.MathException: ", "org.apache.commons.math.ode.DerivativeException: ", "org.apache.commons.math.MathException: org.apache.commons.math.MathException: ", "org.apache.commons.math.ode.DerivativeException: ", "org.apache.commons.math.MathException: hi!", "org.apache.commons.math.MathException: " };
        org.apache.commons.math.ode.DerivativeException derivativeException78 = new org.apache.commons.math.ode.DerivativeException("java.io.IOException: ", strArray77);
        java.io.IOException iOException83 = new java.io.IOException("hi!");
        java.io.IOException iOException84 = new java.io.IOException("", (java.lang.Throwable) iOException83);
        org.apache.commons.math.ode.DerivativeException derivativeException85 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) iOException83);
        java.io.IOException iOException86 = new java.io.IOException("hi!", (java.lang.Throwable) iOException83);
        org.apache.commons.math.MathException mathException87 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: hi!", (java.lang.Throwable) iOException86);
        org.apache.commons.math.ode.DerivativeException derivativeException88 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) iOException86);
        org.apache.commons.math.MathException mathException89 = new org.apache.commons.math.MathException("java.io.IOException: java.io.IOException: ", (java.lang.Object[]) strArray77, (java.lang.Throwable) iOException86);
        org.apache.commons.math.ode.DerivativeException derivativeException90 = new org.apache.commons.math.ode.DerivativeException("java.io.IOException: hi!", strArray77);
        org.apache.commons.math.ode.DerivativeException derivativeException91 = new org.apache.commons.math.ode.DerivativeException("", strArray77);
        org.apache.commons.math.ode.DerivativeException derivativeException92 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: hi!", strArray77);
        mathException60.addSuppressed((java.lang.Throwable) derivativeException92);
        java.lang.Class<?> wildcardClass94 = derivativeException92.getClass();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(objArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray57), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray57), "[]");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "org.apache.commons.math.MathException: hi!" + "'", str65, "org.apache.commons.math.MathException: hi!");
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertNotNull(wildcardClass94);
    }

    @Test
    public void test01209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01209");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean1 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean2 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        boolean boolean4 = continuousOutputModel0.requiresDenseOutput();
        double double5 = continuousOutputModel0.getFinalTime();
        boolean boolean6 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean7 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator9 = null;
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel0.handleStep(stepInterpolator9, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void test01210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01210");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double1 = continuousOutputModel0.getFinalTime();
        double double2 = continuousOutputModel0.getInitialTime();
        double double3 = continuousOutputModel0.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel4 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double5 = continuousOutputModel4.getFinalTime();
        double double6 = continuousOutputModel4.getInitialTime();
        continuousOutputModel0.append(continuousOutputModel4);
        double double8 = continuousOutputModel0.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel9 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double10 = continuousOutputModel9.getFinalTime();
        double double11 = continuousOutputModel9.getInitialTime();
        boolean boolean12 = continuousOutputModel9.requiresDenseOutput();
        double double13 = continuousOutputModel9.getInitialTime();
        continuousOutputModel9.reset();
        boolean boolean15 = continuousOutputModel9.requiresDenseOutput();
        continuousOutputModel0.append(continuousOutputModel9);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray17 = continuousOutputModel0.getInterpolatedState();
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    }

    @Test
    public void test01211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01211");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double1 = continuousOutputModel0.getFinalTime();
        double double2 = continuousOutputModel0.getInitialTime();
        boolean boolean3 = continuousOutputModel0.requiresDenseOutput();
        double double4 = continuousOutputModel0.getInitialTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel5 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean6 = continuousOutputModel5.requiresDenseOutput();
        boolean boolean7 = continuousOutputModel5.requiresDenseOutput();
        continuousOutputModel5.reset();
        boolean boolean9 = continuousOutputModel5.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel10 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double11 = continuousOutputModel10.getFinalTime();
        double double12 = continuousOutputModel10.getInitialTime();
        boolean boolean13 = continuousOutputModel10.requiresDenseOutput();
        continuousOutputModel5.append(continuousOutputModel10);
        continuousOutputModel0.append(continuousOutputModel5);
        continuousOutputModel5.reset();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator17 = null;
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel5.handleStep(stepInterpolator17, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test01212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01212");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean1 = continuousOutputModel0.requiresDenseOutput();
        double double2 = continuousOutputModel0.getInitialTime();
        continuousOutputModel0.reset();
        boolean boolean4 = continuousOutputModel0.requiresDenseOutput();
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel0.setInterpolatedTime(100.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
    }

    @Test
    public void test01213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01213");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean1 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean2 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        boolean boolean4 = continuousOutputModel0.requiresDenseOutput();
        double double5 = continuousOutputModel0.getFinalTime();
        boolean boolean6 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean7 = continuousOutputModel0.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel8 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean9 = continuousOutputModel8.requiresDenseOutput();
        double double10 = continuousOutputModel8.getInitialTime();
        boolean boolean11 = continuousOutputModel8.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel12 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double13 = continuousOutputModel12.getFinalTime();
        double double14 = continuousOutputModel12.getInitialTime();
        boolean boolean15 = continuousOutputModel12.requiresDenseOutput();
        continuousOutputModel12.reset();
        boolean boolean17 = continuousOutputModel12.requiresDenseOutput();
        continuousOutputModel8.append(continuousOutputModel12);
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel19 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double20 = continuousOutputModel19.getFinalTime();
        double double21 = continuousOutputModel19.getInitialTime();
        boolean boolean22 = continuousOutputModel19.requiresDenseOutput();
        continuousOutputModel19.reset();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel24 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean25 = continuousOutputModel24.requiresDenseOutput();
        double double26 = continuousOutputModel24.getInitialTime();
        continuousOutputModel19.append(continuousOutputModel24);
        continuousOutputModel8.append(continuousOutputModel19);
        double double29 = continuousOutputModel19.getFinalTime();
        continuousOutputModel0.append(continuousOutputModel19);
        // The following exception was thrown during execution in test generation
        try {
            double double31 = continuousOutputModel0.getInterpolatedTime();
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue(Double.isNaN(double29));
    }

    @Test
    public void test01214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01214");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean1 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean2 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        boolean boolean4 = continuousOutputModel0.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel5 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double6 = continuousOutputModel5.getFinalTime();
        double double7 = continuousOutputModel5.getInitialTime();
        boolean boolean8 = continuousOutputModel5.requiresDenseOutput();
        continuousOutputModel0.append(continuousOutputModel5);
        double double10 = continuousOutputModel5.getInitialTime();
        boolean boolean11 = continuousOutputModel5.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel12 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double13 = continuousOutputModel12.getFinalTime();
        double double14 = continuousOutputModel12.getInitialTime();
        double double15 = continuousOutputModel12.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel16 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double17 = continuousOutputModel16.getFinalTime();
        double double18 = continuousOutputModel16.getInitialTime();
        continuousOutputModel12.append(continuousOutputModel16);
        double double20 = continuousOutputModel12.getFinalTime();
        boolean boolean21 = continuousOutputModel12.requiresDenseOutput();
        boolean boolean22 = continuousOutputModel12.requiresDenseOutput();
        double double23 = continuousOutputModel12.getFinalTime();
        continuousOutputModel5.append(continuousOutputModel12);
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel25 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean26 = continuousOutputModel25.requiresDenseOutput();
        boolean boolean27 = continuousOutputModel25.requiresDenseOutput();
        continuousOutputModel25.reset();
        boolean boolean29 = continuousOutputModel25.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel30 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double31 = continuousOutputModel30.getFinalTime();
        double double32 = continuousOutputModel30.getInitialTime();
        boolean boolean33 = continuousOutputModel30.requiresDenseOutput();
        continuousOutputModel25.append(continuousOutputModel30);
        double double35 = continuousOutputModel30.getInitialTime();
        double double36 = continuousOutputModel30.getFinalTime();
        continuousOutputModel30.reset();
        continuousOutputModel30.reset();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel39 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean40 = continuousOutputModel39.requiresDenseOutput();
        boolean boolean41 = continuousOutputModel39.requiresDenseOutput();
        double double42 = continuousOutputModel39.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel43 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean44 = continuousOutputModel43.requiresDenseOutput();
        continuousOutputModel39.append(continuousOutputModel43);
        continuousOutputModel30.append(continuousOutputModel39);
        continuousOutputModel5.append(continuousOutputModel30);
        boolean boolean48 = continuousOutputModel5.requiresDenseOutput();
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray49 = continuousOutputModel5.getInterpolatedState();
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
    }

    @Test
    public void test01215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01215");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean1 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel3 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double4 = continuousOutputModel3.getFinalTime();
        double double5 = continuousOutputModel3.getInitialTime();
        boolean boolean6 = continuousOutputModel3.requiresDenseOutput();
        continuousOutputModel3.reset();
        boolean boolean8 = continuousOutputModel3.requiresDenseOutput();
        boolean boolean9 = continuousOutputModel3.requiresDenseOutput();
        double double10 = continuousOutputModel3.getInitialTime();
        continuousOutputModel0.append(continuousOutputModel3);
        boolean boolean12 = continuousOutputModel0.requiresDenseOutput();
        double double13 = continuousOutputModel0.getInitialTime();
        // The following exception was thrown during execution in test generation
        try {
            double double14 = continuousOutputModel0.getInterpolatedTime();
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
    }

    @Test
    public void test01216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01216");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean1 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean2 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        continuousOutputModel0.reset();
        boolean boolean5 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean6 = continuousOutputModel0.requiresDenseOutput();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator7 = null;
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel0.handleStep(stepInterpolator7, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
    }

    @Test
    public void test01217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01217");
        java.io.IOException iOException6 = new java.io.IOException("hi!");
        org.apache.commons.math.ode.DerivativeException derivativeException7 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) iOException6);
        org.apache.commons.math.MathException mathException8 = new org.apache.commons.math.MathException("hi!", (java.lang.Throwable) iOException6);
        java.lang.Object[] objArray9 = mathException8.getArguments();
        org.apache.commons.math.MathException mathException10 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: ", objArray9);
        org.apache.commons.math.MathException mathException11 = new org.apache.commons.math.MathException("hi!", objArray9);
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel13 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double14 = continuousOutputModel13.getFinalTime();
        double double15 = continuousOutputModel13.getInitialTime();
        boolean boolean16 = continuousOutputModel13.requiresDenseOutput();
        double double17 = continuousOutputModel13.getInitialTime();
        java.io.IOException iOException20 = new java.io.IOException("hi!");
        org.apache.commons.math.ode.DerivativeException derivativeException21 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) iOException20);
        org.apache.commons.math.MathException mathException22 = new org.apache.commons.math.MathException("hi!", (java.lang.Throwable) iOException20);
        java.io.IOException iOException25 = new java.io.IOException("hi!");
        java.io.IOException iOException26 = new java.io.IOException("", (java.lang.Throwable) iOException25);
        org.apache.commons.math.ode.DerivativeException derivativeException27 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) iOException25);
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel29 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double30 = continuousOutputModel29.getFinalTime();
        double double31 = continuousOutputModel29.getInitialTime();
        java.lang.Object[] objArray32 = new java.lang.Object[] { double17, mathException22, iOException25, false, continuousOutputModel29 };
        java.lang.String[] strArray41 = new java.lang.String[] { "hi!", "org.apache.commons.math.MathException: ", "hi!", "org.apache.commons.math.MathException: ", "", "" };
        org.apache.commons.math.ode.DerivativeException derivativeException42 = new org.apache.commons.math.ode.DerivativeException("", strArray41);
        java.io.IOException iOException46 = new java.io.IOException("hi!");
        org.apache.commons.math.ode.DerivativeException derivativeException47 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) iOException46);
        org.apache.commons.math.MathException mathException48 = new org.apache.commons.math.MathException("hi!", (java.lang.Throwable) iOException46);
        java.lang.Object[] objArray49 = mathException48.getArguments();
        org.apache.commons.math.MathException mathException50 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: ", (java.lang.Throwable) mathException48);
        org.apache.commons.math.MathException mathException51 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: hi!", (java.lang.Object[]) strArray41, (java.lang.Throwable) mathException48);
        org.apache.commons.math.MathException mathException52 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: hi!", objArray32, (java.lang.Throwable) mathException51);
        org.apache.commons.math.MathException mathException53 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: ", objArray9, (java.lang.Throwable) mathException52);
        java.io.IOException iOException54 = new java.io.IOException((java.lang.Throwable) mathException52);
        org.apache.commons.math.MathException mathException55 = new org.apache.commons.math.MathException((java.lang.Throwable) iOException54);
        java.io.IOException iOException57 = new java.io.IOException("hi!");
        mathException55.addSuppressed((java.lang.Throwable) iOException57);
        org.apache.commons.math.MathException mathException59 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.MathException: ", (java.lang.Throwable) mathException55);
        org.apache.commons.math.ode.DerivativeException derivativeException60 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) mathException59);
        java.lang.Class<?> wildcardClass61 = derivativeException60.getClass();
        org.junit.Assert.assertNotNull(objArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray9), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray9), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertNotNull(objArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray49), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray49), "[]");
        org.junit.Assert.assertNotNull(wildcardClass61);
    }

    @Test
    public void test01218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01218");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean1 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean2 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        boolean boolean4 = continuousOutputModel0.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel5 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double6 = continuousOutputModel5.getFinalTime();
        double double7 = continuousOutputModel5.getInitialTime();
        boolean boolean8 = continuousOutputModel5.requiresDenseOutput();
        continuousOutputModel0.append(continuousOutputModel5);
        double double10 = continuousOutputModel5.getInitialTime();
        double double11 = continuousOutputModel5.getFinalTime();
        continuousOutputModel5.reset();
        continuousOutputModel5.reset();
        continuousOutputModel5.reset();
        boolean boolean15 = continuousOutputModel5.requiresDenseOutput();
        boolean boolean16 = continuousOutputModel5.requiresDenseOutput();
        // The following exception was thrown during execution in test generation
        try {
            double double17 = continuousOutputModel5.getInterpolatedTime();
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test01219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01219");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double1 = continuousOutputModel0.getFinalTime();
        double double2 = continuousOutputModel0.getInitialTime();
        double double3 = continuousOutputModel0.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel4 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double5 = continuousOutputModel4.getFinalTime();
        double double6 = continuousOutputModel4.getInitialTime();
        continuousOutputModel0.append(continuousOutputModel4);
        boolean boolean8 = continuousOutputModel0.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel9 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double10 = continuousOutputModel9.getFinalTime();
        double double11 = continuousOutputModel9.getInitialTime();
        boolean boolean12 = continuousOutputModel9.requiresDenseOutput();
        continuousOutputModel9.reset();
        boolean boolean14 = continuousOutputModel9.requiresDenseOutput();
        double double15 = continuousOutputModel9.getInitialTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel16 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double17 = continuousOutputModel16.getFinalTime();
        double double18 = continuousOutputModel16.getInitialTime();
        boolean boolean19 = continuousOutputModel16.requiresDenseOutput();
        double double20 = continuousOutputModel16.getInitialTime();
        continuousOutputModel16.reset();
        boolean boolean22 = continuousOutputModel16.requiresDenseOutput();
        double double23 = continuousOutputModel16.getInitialTime();
        continuousOutputModel9.append(continuousOutputModel16);
        continuousOutputModel0.append(continuousOutputModel9);
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel0.setInterpolatedTime((double) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
    }

    @Test
    public void test01220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01220");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean1 = continuousOutputModel0.requiresDenseOutput();
        double double2 = continuousOutputModel0.getInitialTime();
        boolean boolean3 = continuousOutputModel0.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel4 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double5 = continuousOutputModel4.getFinalTime();
        double double6 = continuousOutputModel4.getInitialTime();
        boolean boolean7 = continuousOutputModel4.requiresDenseOutput();
        continuousOutputModel4.reset();
        boolean boolean9 = continuousOutputModel4.requiresDenseOutput();
        continuousOutputModel0.append(continuousOutputModel4);
        continuousOutputModel4.reset();
        double double12 = continuousOutputModel4.getInitialTime();
        continuousOutputModel4.reset();
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel4.setInterpolatedTime((double) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
    }

    @Test
    public void test01221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01221");
        java.io.IOException iOException12 = new java.io.IOException("hi!");
        org.apache.commons.math.ode.DerivativeException derivativeException13 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) iOException12);
        org.apache.commons.math.MathException mathException14 = new org.apache.commons.math.MathException("hi!", (java.lang.Throwable) iOException12);
        java.lang.Object[] objArray15 = mathException14.getArguments();
        org.apache.commons.math.MathException mathException16 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: ", objArray15);
        org.apache.commons.math.MathException mathException17 = new org.apache.commons.math.MathException("hi!", objArray15);
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel19 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double20 = continuousOutputModel19.getFinalTime();
        double double21 = continuousOutputModel19.getInitialTime();
        boolean boolean22 = continuousOutputModel19.requiresDenseOutput();
        double double23 = continuousOutputModel19.getInitialTime();
        java.io.IOException iOException26 = new java.io.IOException("hi!");
        org.apache.commons.math.ode.DerivativeException derivativeException27 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) iOException26);
        org.apache.commons.math.MathException mathException28 = new org.apache.commons.math.MathException("hi!", (java.lang.Throwable) iOException26);
        java.io.IOException iOException31 = new java.io.IOException("hi!");
        java.io.IOException iOException32 = new java.io.IOException("", (java.lang.Throwable) iOException31);
        org.apache.commons.math.ode.DerivativeException derivativeException33 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) iOException31);
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel35 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double36 = continuousOutputModel35.getFinalTime();
        double double37 = continuousOutputModel35.getInitialTime();
        java.lang.Object[] objArray38 = new java.lang.Object[] { double23, mathException28, iOException31, false, continuousOutputModel35 };
        java.lang.String[] strArray47 = new java.lang.String[] { "hi!", "org.apache.commons.math.MathException: ", "hi!", "org.apache.commons.math.MathException: ", "", "" };
        org.apache.commons.math.ode.DerivativeException derivativeException48 = new org.apache.commons.math.ode.DerivativeException("", strArray47);
        java.io.IOException iOException52 = new java.io.IOException("hi!");
        org.apache.commons.math.ode.DerivativeException derivativeException53 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) iOException52);
        org.apache.commons.math.MathException mathException54 = new org.apache.commons.math.MathException("hi!", (java.lang.Throwable) iOException52);
        java.lang.Object[] objArray55 = mathException54.getArguments();
        org.apache.commons.math.MathException mathException56 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: ", (java.lang.Throwable) mathException54);
        org.apache.commons.math.MathException mathException57 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: hi!", (java.lang.Object[]) strArray47, (java.lang.Throwable) mathException54);
        org.apache.commons.math.MathException mathException58 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: hi!", objArray38, (java.lang.Throwable) mathException57);
        org.apache.commons.math.MathException mathException59 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: ", objArray15, (java.lang.Throwable) mathException58);
        org.apache.commons.math.MathException mathException60 = new org.apache.commons.math.MathException("", objArray15);
        org.apache.commons.math.MathException mathException61 = new org.apache.commons.math.MathException("", (java.lang.Throwable) mathException60);
        org.apache.commons.math.MathException mathException62 = new org.apache.commons.math.MathException("", (java.lang.Throwable) mathException60);
        java.lang.Throwable[] throwableArray63 = mathException62.getSuppressed();
        java.lang.String[] strArray77 = new java.lang.String[] { "hi!", "org.apache.commons.math.MathException: ", "hi!", "org.apache.commons.math.MathException: ", "", "" };
        org.apache.commons.math.ode.DerivativeException derivativeException78 = new org.apache.commons.math.ode.DerivativeException("", strArray77);
        org.apache.commons.math.ode.DerivativeException derivativeException79 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray77);
        org.apache.commons.math.ode.DerivativeException derivativeException80 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: ", strArray77);
        org.apache.commons.math.ode.DerivativeException derivativeException81 = new org.apache.commons.math.ode.DerivativeException("", strArray77);
        org.apache.commons.math.MathException mathException82 = new org.apache.commons.math.MathException("", (java.lang.Object[]) strArray77);
        org.apache.commons.math.ode.DerivativeException derivativeException83 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.ode.DerivativeException: ", strArray77);
        org.apache.commons.math.ode.DerivativeException derivativeException84 = new org.apache.commons.math.ode.DerivativeException("java.io.IOException: java.io.IOException: ", strArray77);
        org.apache.commons.math.MathException mathException85 = new org.apache.commons.math.MathException((java.lang.Throwable) derivativeException84);
        org.apache.commons.math.MathException mathException86 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: java.io.IOException: java.io.IOException: org.apache.commons.math.ode.DerivativeException: hi!", (java.lang.Object[]) throwableArray63, (java.lang.Throwable) mathException85);
        org.apache.commons.math.MathException mathException87 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.ode.DerivativeException: java.io.IOException: hi!", (java.lang.Object[]) throwableArray63);
        java.io.IOException iOException90 = new java.io.IOException("hi!");
        org.apache.commons.math.ode.DerivativeException derivativeException91 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) iOException90);
        org.apache.commons.math.MathException mathException92 = new org.apache.commons.math.MathException("hi!", (java.lang.Throwable) iOException90);
        java.io.IOException iOException93 = new java.io.IOException((java.lang.Throwable) mathException92);
        mathException87.addSuppressed((java.lang.Throwable) mathException92);
        java.io.IOException iOException95 = new java.io.IOException("org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: ", (java.lang.Throwable) mathException92);
        java.io.IOException iOException96 = new java.io.IOException("org.apache.commons.math.MathException: hi!", (java.lang.Throwable) iOException95);
        java.lang.Throwable[] throwableArray97 = iOException96.getSuppressed();
        java.lang.String str98 = iOException96.toString();
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(objArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray55), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray55), "[]");
        org.junit.Assert.assertNotNull(throwableArray63);
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertNotNull(throwableArray97);
        org.junit.Assert.assertEquals("'" + str98 + "' != '" + "java.io.IOException: org.apache.commons.math.MathException: hi!" + "'", str98, "java.io.IOException: org.apache.commons.math.MathException: hi!");
    }

    @Test
    public void test01222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01222");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean1 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean2 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        boolean boolean4 = continuousOutputModel0.requiresDenseOutput();
        double double5 = continuousOutputModel0.getFinalTime();
        boolean boolean6 = continuousOutputModel0.requiresDenseOutput();
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel0.setInterpolatedTime((double) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
    }

    @Test
    public void test01223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01223");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double1 = continuousOutputModel0.getFinalTime();
        double double2 = continuousOutputModel0.getInitialTime();
        boolean boolean3 = continuousOutputModel0.requiresDenseOutput();
        double double4 = continuousOutputModel0.getInitialTime();
        continuousOutputModel0.reset();
        boolean boolean6 = continuousOutputModel0.requiresDenseOutput();
        double double7 = continuousOutputModel0.getInitialTime();
        continuousOutputModel0.reset();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator9 = null;
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel0.handleStep(stepInterpolator9, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
    }

    @Test
    public void test01224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01224");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double1 = continuousOutputModel0.getFinalTime();
        double double2 = continuousOutputModel0.getInitialTime();
        boolean boolean3 = continuousOutputModel0.requiresDenseOutput();
        double double4 = continuousOutputModel0.getInitialTime();
        continuousOutputModel0.reset();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel6 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean7 = continuousOutputModel6.requiresDenseOutput();
        double double8 = continuousOutputModel6.getInitialTime();
        boolean boolean9 = continuousOutputModel6.requiresDenseOutput();
        continuousOutputModel0.append(continuousOutputModel6);
        boolean boolean11 = continuousOutputModel6.requiresDenseOutput();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator12 = null;
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel6.handleStep(stepInterpolator12, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test01225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01225");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean1 = continuousOutputModel0.requiresDenseOutput();
        double double2 = continuousOutputModel0.getInitialTime();
        boolean boolean3 = continuousOutputModel0.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel4 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double5 = continuousOutputModel4.getFinalTime();
        double double6 = continuousOutputModel4.getInitialTime();
        boolean boolean7 = continuousOutputModel4.requiresDenseOutput();
        continuousOutputModel4.reset();
        boolean boolean9 = continuousOutputModel4.requiresDenseOutput();
        continuousOutputModel0.append(continuousOutputModel4);
        continuousOutputModel4.reset();
        double double12 = continuousOutputModel4.getInitialTime();
        continuousOutputModel4.reset();
        boolean boolean14 = continuousOutputModel4.requiresDenseOutput();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator15 = null;
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel4.handleStep(stepInterpolator15, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    }

    @Test
    public void test01226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01226");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double1 = continuousOutputModel0.getFinalTime();
        continuousOutputModel0.reset();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel3 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean4 = continuousOutputModel3.requiresDenseOutput();
        boolean boolean5 = continuousOutputModel3.requiresDenseOutput();
        continuousOutputModel0.append(continuousOutputModel3);
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel3.setInterpolatedTime((double) 1.0f);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    }

    @Test
    public void test01227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01227");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double1 = continuousOutputModel0.getFinalTime();
        double double2 = continuousOutputModel0.getInitialTime();
        boolean boolean3 = continuousOutputModel0.requiresDenseOutput();
        double double4 = continuousOutputModel0.getInitialTime();
        boolean boolean5 = continuousOutputModel0.requiresDenseOutput();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator6 = null;
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel0.handleStep(stepInterpolator6, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    }

    @Test
    public void test01228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01228");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean1 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean2 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        continuousOutputModel0.reset();
        boolean boolean5 = continuousOutputModel0.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel6 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double7 = continuousOutputModel6.getFinalTime();
        double double8 = continuousOutputModel6.getInitialTime();
        double double9 = continuousOutputModel6.getFinalTime();
        boolean boolean10 = continuousOutputModel6.requiresDenseOutput();
        continuousOutputModel0.append(continuousOutputModel6);
        boolean boolean12 = continuousOutputModel6.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel13 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean14 = continuousOutputModel13.requiresDenseOutput();
        boolean boolean15 = continuousOutputModel13.requiresDenseOutput();
        continuousOutputModel13.reset();
        boolean boolean17 = continuousOutputModel13.requiresDenseOutput();
        double double18 = continuousOutputModel13.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel19 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double20 = continuousOutputModel19.getFinalTime();
        double double21 = continuousOutputModel19.getInitialTime();
        boolean boolean22 = continuousOutputModel19.requiresDenseOutput();
        continuousOutputModel19.reset();
        double double24 = continuousOutputModel19.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel25 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double26 = continuousOutputModel25.getFinalTime();
        double double27 = continuousOutputModel25.getInitialTime();
        continuousOutputModel19.append(continuousOutputModel25);
        continuousOutputModel13.append(continuousOutputModel25);
        continuousOutputModel13.reset();
        continuousOutputModel6.append(continuousOutputModel13);
        org.apache.commons.math.ode.StepInterpolator stepInterpolator32 = null;
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel13.handleStep(stepInterpolator32, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue(Double.isNaN(double27));
    }

    @Test
    public void test01229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01229");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean1 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean2 = continuousOutputModel0.requiresDenseOutput();
        double double3 = continuousOutputModel0.getFinalTime();
        double double4 = continuousOutputModel0.getInitialTime();
        boolean boolean5 = continuousOutputModel0.requiresDenseOutput();
        double double6 = continuousOutputModel0.getFinalTime();
        continuousOutputModel0.reset();
        // The following exception was thrown during execution in test generation
        try {
            double double8 = continuousOutputModel0.getInterpolatedTime();
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
    }

    @Test
    public void test01230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01230");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean1 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean2 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        boolean boolean4 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel6 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double7 = continuousOutputModel6.getFinalTime();
        continuousOutputModel6.reset();
        continuousOutputModel0.append(continuousOutputModel6);
        continuousOutputModel6.reset();
        boolean boolean11 = continuousOutputModel6.requiresDenseOutput();
        continuousOutputModel6.reset();
        boolean boolean13 = continuousOutputModel6.requiresDenseOutput();
        continuousOutputModel6.reset();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel15 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double16 = continuousOutputModel15.getFinalTime();
        double double17 = continuousOutputModel15.getInitialTime();
        boolean boolean18 = continuousOutputModel15.requiresDenseOutput();
        double double19 = continuousOutputModel15.getInitialTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel20 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean21 = continuousOutputModel20.requiresDenseOutput();
        boolean boolean22 = continuousOutputModel20.requiresDenseOutput();
        continuousOutputModel20.reset();
        boolean boolean24 = continuousOutputModel20.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel25 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double26 = continuousOutputModel25.getFinalTime();
        double double27 = continuousOutputModel25.getInitialTime();
        boolean boolean28 = continuousOutputModel25.requiresDenseOutput();
        continuousOutputModel20.append(continuousOutputModel25);
        continuousOutputModel15.append(continuousOutputModel20);
        continuousOutputModel6.append(continuousOutputModel15);
        double double32 = continuousOutputModel15.getFinalTime();
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray33 = continuousOutputModel15.getInterpolatedState();
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double32));
    }

    @Test
    public void test01231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01231");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel1 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean2 = continuousOutputModel1.requiresDenseOutput();
        boolean boolean3 = continuousOutputModel1.requiresDenseOutput();
        double double4 = continuousOutputModel1.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel5 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean6 = continuousOutputModel5.requiresDenseOutput();
        continuousOutputModel1.append(continuousOutputModel5);
        continuousOutputModel0.append(continuousOutputModel5);
        boolean boolean9 = continuousOutputModel5.requiresDenseOutput();
        boolean boolean10 = continuousOutputModel5.requiresDenseOutput();
        double double11 = continuousOutputModel5.getFinalTime();
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel5.setInterpolatedTime((double) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
    }

    @Test
    public void test01232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01232");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean1 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean2 = continuousOutputModel0.requiresDenseOutput();
        double double3 = continuousOutputModel0.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel4 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean5 = continuousOutputModel4.requiresDenseOutput();
        continuousOutputModel0.append(continuousOutputModel4);
        continuousOutputModel4.reset();
        boolean boolean8 = continuousOutputModel4.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel9 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean10 = continuousOutputModel9.requiresDenseOutput();
        boolean boolean11 = continuousOutputModel9.requiresDenseOutput();
        double double12 = continuousOutputModel9.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel13 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean14 = continuousOutputModel13.requiresDenseOutput();
        continuousOutputModel9.append(continuousOutputModel13);
        continuousOutputModel9.reset();
        boolean boolean17 = continuousOutputModel9.requiresDenseOutput();
        boolean boolean18 = continuousOutputModel9.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel19 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean20 = continuousOutputModel19.requiresDenseOutput();
        boolean boolean21 = continuousOutputModel19.requiresDenseOutput();
        continuousOutputModel19.reset();
        boolean boolean23 = continuousOutputModel19.requiresDenseOutput();
        double double24 = continuousOutputModel19.getFinalTime();
        boolean boolean25 = continuousOutputModel19.requiresDenseOutput();
        continuousOutputModel9.append(continuousOutputModel19);
        continuousOutputModel4.append(continuousOutputModel19);
        // The following exception was thrown during execution in test generation
        try {
            double double28 = continuousOutputModel19.getInterpolatedTime();
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
    }

    @Test
    public void test01233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01233");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean1 = continuousOutputModel0.requiresDenseOutput();
        double double2 = continuousOutputModel0.getInitialTime();
        boolean boolean3 = continuousOutputModel0.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel4 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double5 = continuousOutputModel4.getFinalTime();
        double double6 = continuousOutputModel4.getInitialTime();
        boolean boolean7 = continuousOutputModel4.requiresDenseOutput();
        continuousOutputModel4.reset();
        boolean boolean9 = continuousOutputModel4.requiresDenseOutput();
        continuousOutputModel0.append(continuousOutputModel4);
        continuousOutputModel4.reset();
        continuousOutputModel4.reset();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel13 = new org.apache.commons.math.ode.ContinuousOutputModel();
        continuousOutputModel13.reset();
        boolean boolean15 = continuousOutputModel13.requiresDenseOutput();
        continuousOutputModel4.append(continuousOutputModel13);
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel17 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double18 = continuousOutputModel17.getFinalTime();
        double double19 = continuousOutputModel17.getInitialTime();
        boolean boolean20 = continuousOutputModel17.requiresDenseOutput();
        continuousOutputModel17.reset();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel22 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean23 = continuousOutputModel22.requiresDenseOutput();
        double double24 = continuousOutputModel22.getInitialTime();
        continuousOutputModel17.append(continuousOutputModel22);
        continuousOutputModel4.append(continuousOutputModel22);
        double double27 = continuousOutputModel4.getInitialTime();
        continuousOutputModel4.reset();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator29 = null;
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel4.handleStep(stepInterpolator29, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue(Double.isNaN(double27));
    }

    @Test
    public void test01234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01234");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean1 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean2 = continuousOutputModel0.requiresDenseOutput();
        double double3 = continuousOutputModel0.getFinalTime();
        continuousOutputModel0.reset();
        boolean boolean5 = continuousOutputModel0.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel6 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean7 = continuousOutputModel6.requiresDenseOutput();
        boolean boolean8 = continuousOutputModel6.requiresDenseOutput();
        continuousOutputModel6.reset();
        boolean boolean10 = continuousOutputModel6.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel11 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double12 = continuousOutputModel11.getFinalTime();
        double double13 = continuousOutputModel11.getInitialTime();
        boolean boolean14 = continuousOutputModel11.requiresDenseOutput();
        continuousOutputModel6.append(continuousOutputModel11);
        boolean boolean16 = continuousOutputModel6.requiresDenseOutput();
        boolean boolean17 = continuousOutputModel6.requiresDenseOutput();
        continuousOutputModel0.append(continuousOutputModel6);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray19 = continuousOutputModel0.getInterpolatedState();
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
    }

    @Test
    public void test01235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01235");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double1 = continuousOutputModel0.getFinalTime();
        double double2 = continuousOutputModel0.getInitialTime();
        double double3 = continuousOutputModel0.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel4 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double5 = continuousOutputModel4.getFinalTime();
        double double6 = continuousOutputModel4.getInitialTime();
        continuousOutputModel0.append(continuousOutputModel4);
        double double8 = continuousOutputModel0.getInitialTime();
        double double9 = continuousOutputModel0.getInitialTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel10 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double11 = continuousOutputModel10.getFinalTime();
        double double12 = continuousOutputModel10.getInitialTime();
        continuousOutputModel10.reset();
        double double14 = continuousOutputModel10.getInitialTime();
        continuousOutputModel0.append(continuousOutputModel10);
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel0.setInterpolatedTime((double) (-1.0f));
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
    }

    @Test
    public void test01236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01236");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean1 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean2 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        boolean boolean4 = continuousOutputModel0.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel5 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double6 = continuousOutputModel5.getFinalTime();
        double double7 = continuousOutputModel5.getInitialTime();
        boolean boolean8 = continuousOutputModel5.requiresDenseOutput();
        continuousOutputModel0.append(continuousOutputModel5);
        boolean boolean10 = continuousOutputModel5.requiresDenseOutput();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator11 = null;
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel5.handleStep(stepInterpolator11, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test01237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01237");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double1 = continuousOutputModel0.getFinalTime();
        double double2 = continuousOutputModel0.getInitialTime();
        double double3 = continuousOutputModel0.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel4 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double5 = continuousOutputModel4.getFinalTime();
        double double6 = continuousOutputModel4.getInitialTime();
        continuousOutputModel0.append(continuousOutputModel4);
        double double8 = continuousOutputModel0.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel9 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double10 = continuousOutputModel9.getFinalTime();
        double double11 = continuousOutputModel9.getInitialTime();
        boolean boolean12 = continuousOutputModel9.requiresDenseOutput();
        double double13 = continuousOutputModel9.getInitialTime();
        continuousOutputModel9.reset();
        boolean boolean15 = continuousOutputModel9.requiresDenseOutput();
        continuousOutputModel0.append(continuousOutputModel9);
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel17 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean18 = continuousOutputModel17.requiresDenseOutput();
        double double19 = continuousOutputModel17.getInitialTime();
        boolean boolean20 = continuousOutputModel17.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel21 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double22 = continuousOutputModel21.getFinalTime();
        double double23 = continuousOutputModel21.getInitialTime();
        boolean boolean24 = continuousOutputModel21.requiresDenseOutput();
        continuousOutputModel21.reset();
        boolean boolean26 = continuousOutputModel21.requiresDenseOutput();
        continuousOutputModel17.append(continuousOutputModel21);
        continuousOutputModel17.reset();
        continuousOutputModel9.append(continuousOutputModel17);
        double double30 = continuousOutputModel17.getInitialTime();
        double double31 = continuousOutputModel17.getInitialTime();
        // The following exception was thrown during execution in test generation
        try {
            double double32 = continuousOutputModel17.getInterpolatedTime();
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue(Double.isNaN(double31));
    }

    @Test
    public void test01238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01238");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean1 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean2 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        boolean boolean4 = continuousOutputModel0.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel5 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double6 = continuousOutputModel5.getFinalTime();
        double double7 = continuousOutputModel5.getInitialTime();
        boolean boolean8 = continuousOutputModel5.requiresDenseOutput();
        continuousOutputModel0.append(continuousOutputModel5);
        double double10 = continuousOutputModel5.getInitialTime();
        double double11 = continuousOutputModel5.getFinalTime();
        continuousOutputModel5.reset();
        double double13 = continuousOutputModel5.getFinalTime();
        continuousOutputModel5.reset();
        boolean boolean15 = continuousOutputModel5.requiresDenseOutput();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator16 = null;
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel5.handleStep(stepInterpolator16, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    }

    @Test
    public void test01239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01239");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double1 = continuousOutputModel0.getFinalTime();
        double double2 = continuousOutputModel0.getInitialTime();
        double double3 = continuousOutputModel0.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel4 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double5 = continuousOutputModel4.getFinalTime();
        double double6 = continuousOutputModel4.getInitialTime();
        continuousOutputModel0.append(continuousOutputModel4);
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel8 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean9 = continuousOutputModel8.requiresDenseOutput();
        double double10 = continuousOutputModel8.getInitialTime();
        double double11 = continuousOutputModel8.getInitialTime();
        continuousOutputModel0.append(continuousOutputModel8);
        boolean boolean13 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator15 = null;
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel0.handleStep(stepInterpolator15, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test01240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01240");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean1 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean2 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        boolean boolean4 = continuousOutputModel0.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel5 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double6 = continuousOutputModel5.getFinalTime();
        double double7 = continuousOutputModel5.getInitialTime();
        boolean boolean8 = continuousOutputModel5.requiresDenseOutput();
        continuousOutputModel0.append(continuousOutputModel5);
        boolean boolean10 = continuousOutputModel5.requiresDenseOutput();
        boolean boolean11 = continuousOutputModel5.requiresDenseOutput();
        continuousOutputModel5.reset();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel13 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean14 = continuousOutputModel13.requiresDenseOutput();
        boolean boolean15 = continuousOutputModel13.requiresDenseOutput();
        continuousOutputModel13.reset();
        boolean boolean17 = continuousOutputModel13.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel18 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double19 = continuousOutputModel18.getFinalTime();
        double double20 = continuousOutputModel18.getInitialTime();
        boolean boolean21 = continuousOutputModel18.requiresDenseOutput();
        continuousOutputModel13.append(continuousOutputModel18);
        continuousOutputModel18.reset();
        double double24 = continuousOutputModel18.getInitialTime();
        double double25 = continuousOutputModel18.getFinalTime();
        continuousOutputModel18.reset();
        continuousOutputModel18.reset();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel28 = new org.apache.commons.math.ode.ContinuousOutputModel();
        continuousOutputModel28.reset();
        continuousOutputModel28.reset();
        continuousOutputModel18.append(continuousOutputModel28);
        continuousOutputModel5.append(continuousOutputModel28);
        org.apache.commons.math.ode.StepInterpolator stepInterpolator33 = null;
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel5.handleStep(stepInterpolator33, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue(Double.isNaN(double25));
    }

    @Test
    public void test01241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01241");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean1 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean2 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        continuousOutputModel0.reset();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel5 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double6 = continuousOutputModel5.getFinalTime();
        double double7 = continuousOutputModel5.getInitialTime();
        boolean boolean8 = continuousOutputModel5.requiresDenseOutput();
        continuousOutputModel5.reset();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel10 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean11 = continuousOutputModel10.requiresDenseOutput();
        double double12 = continuousOutputModel10.getInitialTime();
        continuousOutputModel5.append(continuousOutputModel10);
        continuousOutputModel0.append(continuousOutputModel10);
        continuousOutputModel0.reset();
        boolean boolean16 = continuousOutputModel0.requiresDenseOutput();
        double double17 = continuousOutputModel0.getFinalTime();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator18 = null;
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel0.handleStep(stepInterpolator18, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
    }

    @Test
    public void test01242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01242");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double1 = continuousOutputModel0.getFinalTime();
        double double2 = continuousOutputModel0.getInitialTime();
        boolean boolean3 = continuousOutputModel0.requiresDenseOutput();
        double double4 = continuousOutputModel0.getInitialTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel5 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean6 = continuousOutputModel5.requiresDenseOutput();
        boolean boolean7 = continuousOutputModel5.requiresDenseOutput();
        continuousOutputModel5.reset();
        boolean boolean9 = continuousOutputModel5.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel10 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double11 = continuousOutputModel10.getFinalTime();
        double double12 = continuousOutputModel10.getInitialTime();
        boolean boolean13 = continuousOutputModel10.requiresDenseOutput();
        continuousOutputModel5.append(continuousOutputModel10);
        continuousOutputModel0.append(continuousOutputModel5);
        continuousOutputModel5.reset();
        continuousOutputModel5.reset();
        continuousOutputModel5.reset();
        double double19 = continuousOutputModel5.getInitialTime();
        continuousOutputModel5.reset();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator21 = null;
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel5.handleStep(stepInterpolator21, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
    }

    @Test
    public void test01243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01243");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double1 = continuousOutputModel0.getFinalTime();
        double double2 = continuousOutputModel0.getInitialTime();
        double double3 = continuousOutputModel0.getFinalTime();
        boolean boolean4 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean5 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean6 = continuousOutputModel0.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel7 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double8 = continuousOutputModel7.getFinalTime();
        double double9 = continuousOutputModel7.getInitialTime();
        double double10 = continuousOutputModel7.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel11 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double12 = continuousOutputModel11.getFinalTime();
        double double13 = continuousOutputModel11.getInitialTime();
        continuousOutputModel7.append(continuousOutputModel11);
        double double15 = continuousOutputModel7.getInitialTime();
        double double16 = continuousOutputModel7.getInitialTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel17 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double18 = continuousOutputModel17.getFinalTime();
        double double19 = continuousOutputModel17.getInitialTime();
        continuousOutputModel17.reset();
        double double21 = continuousOutputModel17.getInitialTime();
        continuousOutputModel7.append(continuousOutputModel17);
        double double23 = continuousOutputModel17.getInitialTime();
        double double24 = continuousOutputModel17.getFinalTime();
        boolean boolean25 = continuousOutputModel17.requiresDenseOutput();
        continuousOutputModel0.append(continuousOutputModel17);
        // The following exception was thrown during execution in test generation
        try {
            double double27 = continuousOutputModel0.getInterpolatedTime();
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
    }

    @Test
    public void test01244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01244");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean1 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean2 = continuousOutputModel0.requiresDenseOutput();
        double double3 = continuousOutputModel0.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel4 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean5 = continuousOutputModel4.requiresDenseOutput();
        continuousOutputModel0.append(continuousOutputModel4);
        continuousOutputModel0.reset();
        boolean boolean8 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean9 = continuousOutputModel0.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel10 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean11 = continuousOutputModel10.requiresDenseOutput();
        boolean boolean12 = continuousOutputModel10.requiresDenseOutput();
        continuousOutputModel10.reset();
        boolean boolean14 = continuousOutputModel10.requiresDenseOutput();
        double double15 = continuousOutputModel10.getFinalTime();
        boolean boolean16 = continuousOutputModel10.requiresDenseOutput();
        continuousOutputModel0.append(continuousOutputModel10);
        continuousOutputModel10.reset();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator19 = null;
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel10.handleStep(stepInterpolator19, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test01245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01245");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double1 = continuousOutputModel0.getFinalTime();
        double double2 = continuousOutputModel0.getInitialTime();
        boolean boolean3 = continuousOutputModel0.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel4 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean5 = continuousOutputModel4.requiresDenseOutput();
        double double6 = continuousOutputModel4.getInitialTime();
        boolean boolean7 = continuousOutputModel4.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel8 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double9 = continuousOutputModel8.getFinalTime();
        double double10 = continuousOutputModel8.getInitialTime();
        boolean boolean11 = continuousOutputModel8.requiresDenseOutput();
        continuousOutputModel8.reset();
        boolean boolean13 = continuousOutputModel8.requiresDenseOutput();
        continuousOutputModel4.append(continuousOutputModel8);
        continuousOutputModel0.append(continuousOutputModel4);
        boolean boolean16 = continuousOutputModel0.requiresDenseOutput();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator17 = null;
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel0.handleStep(stepInterpolator17, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test01246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01246");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean1 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean2 = continuousOutputModel0.requiresDenseOutput();
        double double3 = continuousOutputModel0.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel4 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean5 = continuousOutputModel4.requiresDenseOutput();
        continuousOutputModel0.append(continuousOutputModel4);
        boolean boolean7 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        double double9 = continuousOutputModel0.getInitialTime();
        // The following exception was thrown during execution in test generation
        try {
            double double10 = continuousOutputModel0.getInterpolatedTime();
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
    }

    @Test
    public void test01247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01247");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean1 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean2 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        boolean boolean4 = continuousOutputModel0.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel5 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double6 = continuousOutputModel5.getFinalTime();
        double double7 = continuousOutputModel5.getInitialTime();
        boolean boolean8 = continuousOutputModel5.requiresDenseOutput();
        continuousOutputModel0.append(continuousOutputModel5);
        boolean boolean10 = continuousOutputModel5.requiresDenseOutput();
        double double11 = continuousOutputModel5.getFinalTime();
        continuousOutputModel5.reset();
        double double13 = continuousOutputModel5.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel14 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean15 = continuousOutputModel14.requiresDenseOutput();
        boolean boolean16 = continuousOutputModel14.requiresDenseOutput();
        continuousOutputModel14.reset();
        boolean boolean18 = continuousOutputModel14.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel19 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double20 = continuousOutputModel19.getFinalTime();
        double double21 = continuousOutputModel19.getInitialTime();
        boolean boolean22 = continuousOutputModel19.requiresDenseOutput();
        continuousOutputModel14.append(continuousOutputModel19);
        boolean boolean24 = continuousOutputModel19.requiresDenseOutput();
        double double25 = continuousOutputModel19.getFinalTime();
        continuousOutputModel19.reset();
        double double27 = continuousOutputModel19.getInitialTime();
        boolean boolean28 = continuousOutputModel19.requiresDenseOutput();
        continuousOutputModel5.append(continuousOutputModel19);
        boolean boolean30 = continuousOutputModel5.requiresDenseOutput();
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray31 = continuousOutputModel5.getInterpolatedState();
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
    }

    @Test
    public void test01248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01248");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean1 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean2 = continuousOutputModel0.requiresDenseOutput();
        double double3 = continuousOutputModel0.getFinalTime();
        continuousOutputModel0.reset();
        boolean boolean5 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel7 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double8 = continuousOutputModel7.getFinalTime();
        continuousOutputModel0.append(continuousOutputModel7);
        boolean boolean10 = continuousOutputModel0.requiresDenseOutput();
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray11 = continuousOutputModel0.getInterpolatedState();
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test01249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01249");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double1 = continuousOutputModel0.getFinalTime();
        double double2 = continuousOutputModel0.getInitialTime();
        double double3 = continuousOutputModel0.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel4 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double5 = continuousOutputModel4.getFinalTime();
        double double6 = continuousOutputModel4.getInitialTime();
        continuousOutputModel0.append(continuousOutputModel4);
        boolean boolean8 = continuousOutputModel0.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel9 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double10 = continuousOutputModel9.getFinalTime();
        double double11 = continuousOutputModel9.getInitialTime();
        boolean boolean12 = continuousOutputModel9.requiresDenseOutput();
        continuousOutputModel9.reset();
        boolean boolean14 = continuousOutputModel9.requiresDenseOutput();
        double double15 = continuousOutputModel9.getInitialTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel16 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double17 = continuousOutputModel16.getFinalTime();
        double double18 = continuousOutputModel16.getInitialTime();
        boolean boolean19 = continuousOutputModel16.requiresDenseOutput();
        double double20 = continuousOutputModel16.getInitialTime();
        continuousOutputModel16.reset();
        boolean boolean22 = continuousOutputModel16.requiresDenseOutput();
        double double23 = continuousOutputModel16.getInitialTime();
        continuousOutputModel9.append(continuousOutputModel16);
        continuousOutputModel0.append(continuousOutputModel9);
        // The following exception was thrown during execution in test generation
        try {
            double double26 = continuousOutputModel9.getInterpolatedTime();
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
    }

    @Test
    public void test01250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01250");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean1 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean2 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        boolean boolean4 = continuousOutputModel0.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel5 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double6 = continuousOutputModel5.getFinalTime();
        double double7 = continuousOutputModel5.getInitialTime();
        boolean boolean8 = continuousOutputModel5.requiresDenseOutput();
        continuousOutputModel0.append(continuousOutputModel5);
        continuousOutputModel5.reset();
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel5.setInterpolatedTime((double) 0.0f);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void test01251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01251");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean1 = continuousOutputModel0.requiresDenseOutput();
        double double2 = continuousOutputModel0.getInitialTime();
        boolean boolean3 = continuousOutputModel0.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel4 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double5 = continuousOutputModel4.getFinalTime();
        double double6 = continuousOutputModel4.getInitialTime();
        boolean boolean7 = continuousOutputModel4.requiresDenseOutput();
        continuousOutputModel4.reset();
        boolean boolean9 = continuousOutputModel4.requiresDenseOutput();
        continuousOutputModel0.append(continuousOutputModel4);
        continuousOutputModel0.reset();
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel0.setInterpolatedTime(10.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test01252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01252");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean1 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean2 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        boolean boolean4 = continuousOutputModel0.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel5 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double6 = continuousOutputModel5.getFinalTime();
        double double7 = continuousOutputModel5.getInitialTime();
        boolean boolean8 = continuousOutputModel5.requiresDenseOutput();
        continuousOutputModel0.append(continuousOutputModel5);
        boolean boolean10 = continuousOutputModel5.requiresDenseOutput();
        double double11 = continuousOutputModel5.getFinalTime();
        continuousOutputModel5.reset();
        double double13 = continuousOutputModel5.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel14 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean15 = continuousOutputModel14.requiresDenseOutput();
        boolean boolean16 = continuousOutputModel14.requiresDenseOutput();
        continuousOutputModel14.reset();
        boolean boolean18 = continuousOutputModel14.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel19 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double20 = continuousOutputModel19.getFinalTime();
        double double21 = continuousOutputModel19.getInitialTime();
        boolean boolean22 = continuousOutputModel19.requiresDenseOutput();
        continuousOutputModel14.append(continuousOutputModel19);
        boolean boolean24 = continuousOutputModel19.requiresDenseOutput();
        double double25 = continuousOutputModel19.getFinalTime();
        continuousOutputModel19.reset();
        double double27 = continuousOutputModel19.getInitialTime();
        boolean boolean28 = continuousOutputModel19.requiresDenseOutput();
        continuousOutputModel5.append(continuousOutputModel19);
        double double30 = continuousOutputModel19.getInitialTime();
        // The following exception was thrown during execution in test generation
        try {
            double double31 = continuousOutputModel19.getInterpolatedTime();
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
    }

    @Test
    public void test01253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01253");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double1 = continuousOutputModel0.getFinalTime();
        double double2 = continuousOutputModel0.getInitialTime();
        boolean boolean3 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        boolean boolean5 = continuousOutputModel0.requiresDenseOutput();
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray6 = continuousOutputModel0.getInterpolatedState();
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    }

    @Test
    public void test01254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01254");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean1 = continuousOutputModel0.requiresDenseOutput();
        double double2 = continuousOutputModel0.getInitialTime();
        boolean boolean3 = continuousOutputModel0.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel4 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double5 = continuousOutputModel4.getFinalTime();
        double double6 = continuousOutputModel4.getInitialTime();
        boolean boolean7 = continuousOutputModel4.requiresDenseOutput();
        continuousOutputModel4.reset();
        boolean boolean9 = continuousOutputModel4.requiresDenseOutput();
        continuousOutputModel0.append(continuousOutputModel4);
        continuousOutputModel4.reset();
        continuousOutputModel4.reset();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel13 = new org.apache.commons.math.ode.ContinuousOutputModel();
        continuousOutputModel13.reset();
        boolean boolean15 = continuousOutputModel13.requiresDenseOutput();
        continuousOutputModel4.append(continuousOutputModel13);
        continuousOutputModel13.reset();
        continuousOutputModel13.reset();
        boolean boolean19 = continuousOutputModel13.requiresDenseOutput();
        double double20 = continuousOutputModel13.getFinalTime();
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray21 = continuousOutputModel13.getInterpolatedState();
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
    }

    @Test
    public void test01255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01255");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double1 = continuousOutputModel0.getFinalTime();
        double double2 = continuousOutputModel0.getInitialTime();
        double double3 = continuousOutputModel0.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel4 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double5 = continuousOutputModel4.getFinalTime();
        double double6 = continuousOutputModel4.getInitialTime();
        continuousOutputModel0.append(continuousOutputModel4);
        continuousOutputModel4.reset();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel9 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double10 = continuousOutputModel9.getFinalTime();
        double double11 = continuousOutputModel9.getInitialTime();
        boolean boolean12 = continuousOutputModel9.requiresDenseOutput();
        double double13 = continuousOutputModel9.getInitialTime();
        continuousOutputModel9.reset();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel15 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean16 = continuousOutputModel15.requiresDenseOutput();
        double double17 = continuousOutputModel15.getInitialTime();
        boolean boolean18 = continuousOutputModel15.requiresDenseOutput();
        continuousOutputModel9.append(continuousOutputModel15);
        double double20 = continuousOutputModel9.getFinalTime();
        continuousOutputModel4.append(continuousOutputModel9);
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel22 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean23 = continuousOutputModel22.requiresDenseOutput();
        double double24 = continuousOutputModel22.getInitialTime();
        boolean boolean25 = continuousOutputModel22.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel26 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double27 = continuousOutputModel26.getFinalTime();
        double double28 = continuousOutputModel26.getInitialTime();
        boolean boolean29 = continuousOutputModel26.requiresDenseOutput();
        continuousOutputModel26.reset();
        boolean boolean31 = continuousOutputModel26.requiresDenseOutput();
        continuousOutputModel22.append(continuousOutputModel26);
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel33 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double34 = continuousOutputModel33.getFinalTime();
        double double35 = continuousOutputModel33.getInitialTime();
        boolean boolean36 = continuousOutputModel33.requiresDenseOutput();
        continuousOutputModel33.reset();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel38 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean39 = continuousOutputModel38.requiresDenseOutput();
        double double40 = continuousOutputModel38.getInitialTime();
        continuousOutputModel33.append(continuousOutputModel38);
        continuousOutputModel22.append(continuousOutputModel33);
        boolean boolean43 = continuousOutputModel22.requiresDenseOutput();
        continuousOutputModel4.append(continuousOutputModel22);
        org.apache.commons.math.ode.StepInterpolator stepInterpolator45 = null;
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel4.handleStep(stepInterpolator45, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
    }

    @Test
    public void test01256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01256");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean1 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean2 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        continuousOutputModel0.reset();
        boolean boolean5 = continuousOutputModel0.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel6 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double7 = continuousOutputModel6.getFinalTime();
        double double8 = continuousOutputModel6.getInitialTime();
        double double9 = continuousOutputModel6.getFinalTime();
        boolean boolean10 = continuousOutputModel6.requiresDenseOutput();
        continuousOutputModel0.append(continuousOutputModel6);
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel12 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean13 = continuousOutputModel12.requiresDenseOutput();
        boolean boolean14 = continuousOutputModel12.requiresDenseOutput();
        continuousOutputModel12.reset();
        continuousOutputModel12.reset();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel17 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double18 = continuousOutputModel17.getFinalTime();
        double double19 = continuousOutputModel17.getInitialTime();
        boolean boolean20 = continuousOutputModel17.requiresDenseOutput();
        continuousOutputModel17.reset();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel22 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean23 = continuousOutputModel22.requiresDenseOutput();
        double double24 = continuousOutputModel22.getInitialTime();
        continuousOutputModel17.append(continuousOutputModel22);
        continuousOutputModel12.append(continuousOutputModel22);
        continuousOutputModel12.reset();
        boolean boolean28 = continuousOutputModel12.requiresDenseOutput();
        double double29 = continuousOutputModel12.getFinalTime();
        continuousOutputModel0.append(continuousOutputModel12);
        continuousOutputModel12.reset();
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel12.setInterpolatedTime((double) 10.0f);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double29));
    }

    @Test
    public void test01257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01257");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double1 = continuousOutputModel0.getFinalTime();
        double double2 = continuousOutputModel0.getInitialTime();
        boolean boolean3 = continuousOutputModel0.requiresDenseOutput();
        double double4 = continuousOutputModel0.getInitialTime();
        double double5 = continuousOutputModel0.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel6 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean7 = continuousOutputModel6.requiresDenseOutput();
        boolean boolean8 = continuousOutputModel6.requiresDenseOutput();
        double double9 = continuousOutputModel6.getFinalTime();
        continuousOutputModel6.reset();
        boolean boolean11 = continuousOutputModel6.requiresDenseOutput();
        continuousOutputModel6.reset();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel13 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean14 = continuousOutputModel13.requiresDenseOutput();
        boolean boolean15 = continuousOutputModel13.requiresDenseOutput();
        double double16 = continuousOutputModel13.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel17 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean18 = continuousOutputModel17.requiresDenseOutput();
        continuousOutputModel13.append(continuousOutputModel17);
        boolean boolean20 = continuousOutputModel13.requiresDenseOutput();
        continuousOutputModel13.reset();
        continuousOutputModel6.append(continuousOutputModel13);
        boolean boolean23 = continuousOutputModel6.requiresDenseOutput();
        continuousOutputModel0.append(continuousOutputModel6);
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel0.setInterpolatedTime((double) 1L);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
    }

    @Test
    public void test01258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01258");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel1 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean2 = continuousOutputModel1.requiresDenseOutput();
        boolean boolean3 = continuousOutputModel1.requiresDenseOutput();
        double double4 = continuousOutputModel1.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel5 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean6 = continuousOutputModel5.requiresDenseOutput();
        continuousOutputModel1.append(continuousOutputModel5);
        continuousOutputModel0.append(continuousOutputModel5);
        boolean boolean9 = continuousOutputModel5.requiresDenseOutput();
        // The following exception was thrown during execution in test generation
        try {
            double double10 = continuousOutputModel5.getInterpolatedTime();
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test01259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01259");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean1 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean2 = continuousOutputModel0.requiresDenseOutput();
        double double3 = continuousOutputModel0.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel4 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean5 = continuousOutputModel4.requiresDenseOutput();
        continuousOutputModel0.append(continuousOutputModel4);
        boolean boolean7 = continuousOutputModel0.requiresDenseOutput();
        double double8 = continuousOutputModel0.getInitialTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel9 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean10 = continuousOutputModel9.requiresDenseOutput();
        boolean boolean11 = continuousOutputModel9.requiresDenseOutput();
        double double12 = continuousOutputModel9.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel13 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean14 = continuousOutputModel13.requiresDenseOutput();
        continuousOutputModel9.append(continuousOutputModel13);
        boolean boolean16 = continuousOutputModel9.requiresDenseOutput();
        continuousOutputModel9.reset();
        double double18 = continuousOutputModel9.getInitialTime();
        continuousOutputModel0.append(continuousOutputModel9);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray20 = continuousOutputModel0.getInterpolatedState();
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
    }

    @Test
    public void test01260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01260");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean1 = continuousOutputModel0.requiresDenseOutput();
        double double2 = continuousOutputModel0.getInitialTime();
        double double3 = continuousOutputModel0.getFinalTime();
        boolean boolean4 = continuousOutputModel0.requiresDenseOutput();
        double double5 = continuousOutputModel0.getFinalTime();
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel0.setInterpolatedTime((double) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
    }

    @Test
    public void test01261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01261");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean1 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean2 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        boolean boolean4 = continuousOutputModel0.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel5 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double6 = continuousOutputModel5.getFinalTime();
        double double7 = continuousOutputModel5.getInitialTime();
        boolean boolean8 = continuousOutputModel5.requiresDenseOutput();
        continuousOutputModel0.append(continuousOutputModel5);
        continuousOutputModel5.reset();
        double double11 = continuousOutputModel5.getInitialTime();
        double double12 = continuousOutputModel5.getFinalTime();
        continuousOutputModel5.reset();
        continuousOutputModel5.reset();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel15 = new org.apache.commons.math.ode.ContinuousOutputModel();
        continuousOutputModel15.reset();
        continuousOutputModel15.reset();
        continuousOutputModel5.append(continuousOutputModel15);
        continuousOutputModel5.reset();
        continuousOutputModel5.reset();
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel5.setInterpolatedTime((double) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
    }

    @Test
    public void test01262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01262");
        java.lang.String[] strArray9 = new java.lang.String[] { "org.apache.commons.math.MathException: ", "org.apache.commons.math.ode.DerivativeException: ", "org.apache.commons.math.MathException: org.apache.commons.math.MathException: ", "org.apache.commons.math.ode.DerivativeException: ", "org.apache.commons.math.MathException: hi!", "org.apache.commons.math.MathException: " };
        org.apache.commons.math.ode.DerivativeException derivativeException10 = new org.apache.commons.math.ode.DerivativeException("java.io.IOException: ", strArray9);
        java.io.IOException iOException15 = new java.io.IOException("hi!");
        java.io.IOException iOException16 = new java.io.IOException("", (java.lang.Throwable) iOException15);
        org.apache.commons.math.ode.DerivativeException derivativeException17 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) iOException15);
        java.io.IOException iOException18 = new java.io.IOException("hi!", (java.lang.Throwable) iOException15);
        org.apache.commons.math.MathException mathException19 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: hi!", (java.lang.Throwable) iOException18);
        org.apache.commons.math.ode.DerivativeException derivativeException20 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) iOException18);
        org.apache.commons.math.MathException mathException21 = new org.apache.commons.math.MathException("java.io.IOException: java.io.IOException: ", (java.lang.Object[]) strArray9, (java.lang.Throwable) iOException18);
        java.io.IOException iOException28 = new java.io.IOException("hi!");
        org.apache.commons.math.ode.DerivativeException derivativeException29 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) iOException28);
        org.apache.commons.math.MathException mathException30 = new org.apache.commons.math.MathException("hi!", (java.lang.Throwable) iOException28);
        java.lang.Object[] objArray31 = mathException30.getArguments();
        org.apache.commons.math.MathException mathException32 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: ", objArray31);
        org.apache.commons.math.MathException mathException33 = new org.apache.commons.math.MathException("hi!", objArray31);
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel35 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double36 = continuousOutputModel35.getFinalTime();
        double double37 = continuousOutputModel35.getInitialTime();
        boolean boolean38 = continuousOutputModel35.requiresDenseOutput();
        double double39 = continuousOutputModel35.getInitialTime();
        java.io.IOException iOException42 = new java.io.IOException("hi!");
        org.apache.commons.math.ode.DerivativeException derivativeException43 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) iOException42);
        org.apache.commons.math.MathException mathException44 = new org.apache.commons.math.MathException("hi!", (java.lang.Throwable) iOException42);
        java.io.IOException iOException47 = new java.io.IOException("hi!");
        java.io.IOException iOException48 = new java.io.IOException("", (java.lang.Throwable) iOException47);
        org.apache.commons.math.ode.DerivativeException derivativeException49 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) iOException47);
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel51 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double52 = continuousOutputModel51.getFinalTime();
        double double53 = continuousOutputModel51.getInitialTime();
        java.lang.Object[] objArray54 = new java.lang.Object[] { double39, mathException44, iOException47, false, continuousOutputModel51 };
        java.lang.String[] strArray63 = new java.lang.String[] { "hi!", "org.apache.commons.math.MathException: ", "hi!", "org.apache.commons.math.MathException: ", "", "" };
        org.apache.commons.math.ode.DerivativeException derivativeException64 = new org.apache.commons.math.ode.DerivativeException("", strArray63);
        java.io.IOException iOException68 = new java.io.IOException("hi!");
        org.apache.commons.math.ode.DerivativeException derivativeException69 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) iOException68);
        org.apache.commons.math.MathException mathException70 = new org.apache.commons.math.MathException("hi!", (java.lang.Throwable) iOException68);
        java.lang.Object[] objArray71 = mathException70.getArguments();
        org.apache.commons.math.MathException mathException72 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: ", (java.lang.Throwable) mathException70);
        org.apache.commons.math.MathException mathException73 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: hi!", (java.lang.Object[]) strArray63, (java.lang.Throwable) mathException70);
        org.apache.commons.math.MathException mathException74 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: hi!", objArray54, (java.lang.Throwable) mathException73);
        org.apache.commons.math.MathException mathException75 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: ", objArray31, (java.lang.Throwable) mathException74);
        java.io.IOException iOException78 = new java.io.IOException("hi!");
        java.io.IOException iOException79 = new java.io.IOException("", (java.lang.Throwable) iOException78);
        java.io.IOException iOException80 = new java.io.IOException((java.lang.Throwable) iOException79);
        org.apache.commons.math.MathException mathException81 = new org.apache.commons.math.MathException("java.io.IOException: hi!", objArray31, (java.lang.Throwable) iOException80);
        mathException21.addSuppressed((java.lang.Throwable) iOException80);
        java.lang.Object[] objArray83 = mathException21.getArguments();
        org.apache.commons.math.MathException mathException84 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException21);
        java.io.IOException iOException85 = new java.io.IOException("org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.MathException: org.apache.commons.math.ode.DerivativeException: java.io.IOException: hi!", (java.lang.Throwable) mathException21);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertTrue(Double.isNaN(double52));
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertNotNull(objArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray71), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray71), "[]");
        org.junit.Assert.assertNotNull(objArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray83), "[org.apache.commons.math.MathException: , org.apache.commons.math.ode.DerivativeException: , org.apache.commons.math.MathException: org.apache.commons.math.MathException: , org.apache.commons.math.ode.DerivativeException: , org.apache.commons.math.MathException: hi!, org.apache.commons.math.MathException: ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray83), "[org.apache.commons.math.MathException: , org.apache.commons.math.ode.DerivativeException: , org.apache.commons.math.MathException: org.apache.commons.math.MathException: , org.apache.commons.math.ode.DerivativeException: , org.apache.commons.math.MathException: hi!, org.apache.commons.math.MathException: ]");
    }

    @Test
    public void test01263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01263");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double1 = continuousOutputModel0.getFinalTime();
        double double2 = continuousOutputModel0.getInitialTime();
        double double3 = continuousOutputModel0.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel4 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double5 = continuousOutputModel4.getFinalTime();
        double double6 = continuousOutputModel4.getInitialTime();
        continuousOutputModel0.append(continuousOutputModel4);
        double double8 = continuousOutputModel0.getFinalTime();
        continuousOutputModel0.reset();
        continuousOutputModel0.reset();
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray11 = continuousOutputModel0.getInterpolatedState();
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
    }

    @Test
    public void test01264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01264");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double1 = continuousOutputModel0.getFinalTime();
        double double2 = continuousOutputModel0.getInitialTime();
        double double3 = continuousOutputModel0.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel4 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double5 = continuousOutputModel4.getFinalTime();
        double double6 = continuousOutputModel4.getInitialTime();
        continuousOutputModel0.append(continuousOutputModel4);
        double double8 = continuousOutputModel0.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel9 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double10 = continuousOutputModel9.getFinalTime();
        double double11 = continuousOutputModel9.getInitialTime();
        boolean boolean12 = continuousOutputModel9.requiresDenseOutput();
        double double13 = continuousOutputModel9.getInitialTime();
        continuousOutputModel9.reset();
        boolean boolean15 = continuousOutputModel9.requiresDenseOutput();
        continuousOutputModel0.append(continuousOutputModel9);
        double double17 = continuousOutputModel0.getInitialTime();
        boolean boolean18 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean19 = continuousOutputModel0.requiresDenseOutput();
        // The following exception was thrown during execution in test generation
        try {
            double double20 = continuousOutputModel0.getInterpolatedTime();
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
    }

    @Test
    public void test01265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01265");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean1 = continuousOutputModel0.requiresDenseOutput();
        double double2 = continuousOutputModel0.getInitialTime();
        boolean boolean3 = continuousOutputModel0.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel4 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double5 = continuousOutputModel4.getFinalTime();
        double double6 = continuousOutputModel4.getInitialTime();
        boolean boolean7 = continuousOutputModel4.requiresDenseOutput();
        continuousOutputModel4.reset();
        boolean boolean9 = continuousOutputModel4.requiresDenseOutput();
        continuousOutputModel0.append(continuousOutputModel4);
        continuousOutputModel4.reset();
        continuousOutputModel4.reset();
        continuousOutputModel4.reset();
        continuousOutputModel4.reset();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel15 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean16 = continuousOutputModel15.requiresDenseOutput();
        boolean boolean17 = continuousOutputModel15.requiresDenseOutput();
        double double18 = continuousOutputModel15.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel19 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean20 = continuousOutputModel19.requiresDenseOutput();
        continuousOutputModel15.append(continuousOutputModel19);
        continuousOutputModel15.reset();
        boolean boolean23 = continuousOutputModel15.requiresDenseOutput();
        boolean boolean24 = continuousOutputModel15.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel25 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean26 = continuousOutputModel25.requiresDenseOutput();
        boolean boolean27 = continuousOutputModel25.requiresDenseOutput();
        continuousOutputModel25.reset();
        boolean boolean29 = continuousOutputModel25.requiresDenseOutput();
        double double30 = continuousOutputModel25.getFinalTime();
        boolean boolean31 = continuousOutputModel25.requiresDenseOutput();
        continuousOutputModel15.append(continuousOutputModel25);
        double double33 = continuousOutputModel25.getFinalTime();
        continuousOutputModel25.reset();
        continuousOutputModel4.append(continuousOutputModel25);
        double double36 = continuousOutputModel25.getInitialTime();
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel25.setInterpolatedTime((double) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertTrue(Double.isNaN(double36));
    }

    @Test
    public void test01266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01266");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double1 = continuousOutputModel0.getFinalTime();
        double double2 = continuousOutputModel0.getInitialTime();
        double double3 = continuousOutputModel0.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel4 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double5 = continuousOutputModel4.getFinalTime();
        double double6 = continuousOutputModel4.getInitialTime();
        continuousOutputModel0.append(continuousOutputModel4);
        boolean boolean8 = continuousOutputModel0.requiresDenseOutput();
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel0.setInterpolatedTime((double) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void test01267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01267");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean1 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean2 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        boolean boolean4 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel6 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double7 = continuousOutputModel6.getFinalTime();
        continuousOutputModel6.reset();
        continuousOutputModel0.append(continuousOutputModel6);
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel10 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double11 = continuousOutputModel10.getFinalTime();
        double double12 = continuousOutputModel10.getInitialTime();
        double double13 = continuousOutputModel10.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel14 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double15 = continuousOutputModel14.getFinalTime();
        double double16 = continuousOutputModel14.getInitialTime();
        continuousOutputModel10.append(continuousOutputModel14);
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel18 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean19 = continuousOutputModel18.requiresDenseOutput();
        double double20 = continuousOutputModel18.getInitialTime();
        double double21 = continuousOutputModel18.getInitialTime();
        continuousOutputModel10.append(continuousOutputModel18);
        continuousOutputModel10.reset();
        double double24 = continuousOutputModel10.getFinalTime();
        continuousOutputModel6.append(continuousOutputModel10);
        // The following exception was thrown during execution in test generation
        try {
            double double26 = continuousOutputModel10.getInterpolatedTime();
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue(Double.isNaN(double24));
    }

    @Test
    public void test01268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01268");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean1 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean2 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        boolean boolean4 = continuousOutputModel0.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel5 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double6 = continuousOutputModel5.getFinalTime();
        double double7 = continuousOutputModel5.getInitialTime();
        boolean boolean8 = continuousOutputModel5.requiresDenseOutput();
        continuousOutputModel0.append(continuousOutputModel5);
        double double10 = continuousOutputModel5.getInitialTime();
        double double11 = continuousOutputModel5.getFinalTime();
        continuousOutputModel5.reset();
        continuousOutputModel5.reset();
        double double14 = continuousOutputModel5.getInitialTime();
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray15 = continuousOutputModel5.getInterpolatedState();
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
    }

    @Test
    public void test01269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01269");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean1 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean2 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        boolean boolean4 = continuousOutputModel0.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel5 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double6 = continuousOutputModel5.getFinalTime();
        double double7 = continuousOutputModel5.getInitialTime();
        boolean boolean8 = continuousOutputModel5.requiresDenseOutput();
        continuousOutputModel0.append(continuousOutputModel5);
        double double10 = continuousOutputModel5.getInitialTime();
        double double11 = continuousOutputModel5.getFinalTime();
        continuousOutputModel5.reset();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel13 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double14 = continuousOutputModel13.getFinalTime();
        double double15 = continuousOutputModel13.getInitialTime();
        boolean boolean16 = continuousOutputModel13.requiresDenseOutput();
        double double17 = continuousOutputModel13.getInitialTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel18 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean19 = continuousOutputModel18.requiresDenseOutput();
        boolean boolean20 = continuousOutputModel18.requiresDenseOutput();
        continuousOutputModel18.reset();
        boolean boolean22 = continuousOutputModel18.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel23 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double24 = continuousOutputModel23.getFinalTime();
        double double25 = continuousOutputModel23.getInitialTime();
        boolean boolean26 = continuousOutputModel23.requiresDenseOutput();
        continuousOutputModel18.append(continuousOutputModel23);
        continuousOutputModel13.append(continuousOutputModel18);
        continuousOutputModel13.reset();
        boolean boolean30 = continuousOutputModel13.requiresDenseOutput();
        continuousOutputModel5.append(continuousOutputModel13);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray32 = continuousOutputModel13.getInterpolatedState();
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
    }

    @Test
    public void test01270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01270");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean1 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean2 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        boolean boolean4 = continuousOutputModel0.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel5 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double6 = continuousOutputModel5.getFinalTime();
        double double7 = continuousOutputModel5.getInitialTime();
        boolean boolean8 = continuousOutputModel5.requiresDenseOutput();
        continuousOutputModel0.append(continuousOutputModel5);
        boolean boolean10 = continuousOutputModel5.requiresDenseOutput();
        double double11 = continuousOutputModel5.getFinalTime();
        continuousOutputModel5.reset();
        double double13 = continuousOutputModel5.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel14 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean15 = continuousOutputModel14.requiresDenseOutput();
        boolean boolean16 = continuousOutputModel14.requiresDenseOutput();
        continuousOutputModel14.reset();
        boolean boolean18 = continuousOutputModel14.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel19 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double20 = continuousOutputModel19.getFinalTime();
        double double21 = continuousOutputModel19.getInitialTime();
        boolean boolean22 = continuousOutputModel19.requiresDenseOutput();
        continuousOutputModel14.append(continuousOutputModel19);
        boolean boolean24 = continuousOutputModel19.requiresDenseOutput();
        double double25 = continuousOutputModel19.getFinalTime();
        continuousOutputModel19.reset();
        double double27 = continuousOutputModel19.getInitialTime();
        boolean boolean28 = continuousOutputModel19.requiresDenseOutput();
        continuousOutputModel5.append(continuousOutputModel19);
        boolean boolean30 = continuousOutputModel5.requiresDenseOutput();
        java.lang.Class<?> wildcardClass31 = continuousOutputModel5.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(wildcardClass31);
    }

    @Test
    public void test01271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01271");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double1 = continuousOutputModel0.getFinalTime();
        double double2 = continuousOutputModel0.getInitialTime();
        boolean boolean3 = continuousOutputModel0.requiresDenseOutput();
        double double4 = continuousOutputModel0.getInitialTime();
        continuousOutputModel0.reset();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel6 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean7 = continuousOutputModel6.requiresDenseOutput();
        double double8 = continuousOutputModel6.getInitialTime();
        boolean boolean9 = continuousOutputModel6.requiresDenseOutput();
        continuousOutputModel0.append(continuousOutputModel6);
        double double11 = continuousOutputModel6.getFinalTime();
        double double12 = continuousOutputModel6.getInitialTime();
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray13 = continuousOutputModel6.getInterpolatedState();
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
    }

    @Test
    public void test01272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01272");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean1 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean2 = continuousOutputModel0.requiresDenseOutput();
        double double3 = continuousOutputModel0.getFinalTime();
        continuousOutputModel0.reset();
        boolean boolean5 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel7 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean8 = continuousOutputModel7.requiresDenseOutput();
        boolean boolean9 = continuousOutputModel7.requiresDenseOutput();
        double double10 = continuousOutputModel7.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel11 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean12 = continuousOutputModel11.requiresDenseOutput();
        continuousOutputModel7.append(continuousOutputModel11);
        boolean boolean14 = continuousOutputModel7.requiresDenseOutput();
        continuousOutputModel7.reset();
        continuousOutputModel0.append(continuousOutputModel7);
        boolean boolean17 = continuousOutputModel0.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel18 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double19 = continuousOutputModel18.getFinalTime();
        double double20 = continuousOutputModel18.getInitialTime();
        boolean boolean21 = continuousOutputModel18.requiresDenseOutput();
        continuousOutputModel0.append(continuousOutputModel18);
        double double23 = continuousOutputModel0.getInitialTime();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator24 = null;
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel0.handleStep(stepInterpolator24, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
    }

    @Test
    public void test01273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01273");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double1 = continuousOutputModel0.getFinalTime();
        double double2 = continuousOutputModel0.getInitialTime();
        double double3 = continuousOutputModel0.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel4 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double5 = continuousOutputModel4.getFinalTime();
        double double6 = continuousOutputModel4.getInitialTime();
        continuousOutputModel0.append(continuousOutputModel4);
        double double8 = continuousOutputModel0.getFinalTime();
        boolean boolean9 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean10 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean11 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean12 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        boolean boolean14 = continuousOutputModel0.requiresDenseOutput();
        // The following exception was thrown during execution in test generation
        try {
            double double15 = continuousOutputModel0.getInterpolatedTime();
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    }

    @Test
    public void test01274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01274");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double1 = continuousOutputModel0.getFinalTime();
        double double2 = continuousOutputModel0.getInitialTime();
        boolean boolean3 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        boolean boolean5 = continuousOutputModel0.requiresDenseOutput();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator6 = null;
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel0.handleStep(stepInterpolator6, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    }

    @Test
    public void test01275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01275");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double1 = continuousOutputModel0.getFinalTime();
        double double2 = continuousOutputModel0.getInitialTime();
        boolean boolean3 = continuousOutputModel0.requiresDenseOutput();
        double double4 = continuousOutputModel0.getInitialTime();
        continuousOutputModel0.reset();
        boolean boolean6 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean7 = continuousOutputModel0.requiresDenseOutput();
        double double8 = continuousOutputModel0.getFinalTime();
        continuousOutputModel0.reset();
        // The following exception was thrown during execution in test generation
        try {
            double double10 = continuousOutputModel0.getInterpolatedTime();
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
    }

    @Test
    public void test01276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01276");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double1 = continuousOutputModel0.getFinalTime();
        double double2 = continuousOutputModel0.getInitialTime();
        double double3 = continuousOutputModel0.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel4 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double5 = continuousOutputModel4.getFinalTime();
        double double6 = continuousOutputModel4.getInitialTime();
        continuousOutputModel0.append(continuousOutputModel4);
        double double8 = continuousOutputModel0.getInitialTime();
        double double9 = continuousOutputModel0.getInitialTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel10 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double11 = continuousOutputModel10.getFinalTime();
        double double12 = continuousOutputModel10.getInitialTime();
        continuousOutputModel10.reset();
        double double14 = continuousOutputModel10.getInitialTime();
        continuousOutputModel0.append(continuousOutputModel10);
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel16 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double17 = continuousOutputModel16.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel18 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean19 = continuousOutputModel18.requiresDenseOutput();
        double double20 = continuousOutputModel18.getInitialTime();
        boolean boolean21 = continuousOutputModel18.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel22 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double23 = continuousOutputModel22.getFinalTime();
        double double24 = continuousOutputModel22.getInitialTime();
        boolean boolean25 = continuousOutputModel22.requiresDenseOutput();
        continuousOutputModel22.reset();
        boolean boolean27 = continuousOutputModel22.requiresDenseOutput();
        continuousOutputModel18.append(continuousOutputModel22);
        continuousOutputModel16.append(continuousOutputModel18);
        continuousOutputModel0.append(continuousOutputModel18);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray31 = continuousOutputModel18.getInterpolatedState();
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
    }

    @Test
    public void test01277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01277");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean1 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean2 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        boolean boolean4 = continuousOutputModel0.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel5 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double6 = continuousOutputModel5.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel7 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean8 = continuousOutputModel7.requiresDenseOutput();
        double double9 = continuousOutputModel7.getInitialTime();
        boolean boolean10 = continuousOutputModel7.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel11 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double12 = continuousOutputModel11.getFinalTime();
        double double13 = continuousOutputModel11.getInitialTime();
        boolean boolean14 = continuousOutputModel11.requiresDenseOutput();
        continuousOutputModel11.reset();
        boolean boolean16 = continuousOutputModel11.requiresDenseOutput();
        continuousOutputModel7.append(continuousOutputModel11);
        continuousOutputModel5.append(continuousOutputModel7);
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel19 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean20 = continuousOutputModel19.requiresDenseOutput();
        boolean boolean21 = continuousOutputModel19.requiresDenseOutput();
        continuousOutputModel19.reset();
        boolean boolean23 = continuousOutputModel19.requiresDenseOutput();
        boolean boolean24 = continuousOutputModel19.requiresDenseOutput();
        continuousOutputModel5.append(continuousOutputModel19);
        continuousOutputModel0.append(continuousOutputModel19);
        double double27 = continuousOutputModel19.getInitialTime();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator28 = null;
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel19.handleStep(stepInterpolator28, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
    }

    @Test
    public void test01278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01278");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean1 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean2 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        boolean boolean4 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel6 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double7 = continuousOutputModel6.getFinalTime();
        continuousOutputModel6.reset();
        continuousOutputModel0.append(continuousOutputModel6);
        double double10 = continuousOutputModel6.getInitialTime();
        boolean boolean11 = continuousOutputModel6.requiresDenseOutput();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator12 = null;
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel6.handleStep(stepInterpolator12, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test01279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01279");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean1 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean2 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        boolean boolean4 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel6 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double7 = continuousOutputModel6.getFinalTime();
        continuousOutputModel6.reset();
        continuousOutputModel0.append(continuousOutputModel6);
        continuousOutputModel6.reset();
        boolean boolean11 = continuousOutputModel6.requiresDenseOutput();
        double double12 = continuousOutputModel6.getInitialTime();
        boolean boolean13 = continuousOutputModel6.requiresDenseOutput();
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray14 = continuousOutputModel6.getInterpolatedState();
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test01280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01280");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double1 = continuousOutputModel0.getFinalTime();
        double double2 = continuousOutputModel0.getInitialTime();
        boolean boolean3 = continuousOutputModel0.requiresDenseOutput();
        double double4 = continuousOutputModel0.getInitialTime();
        continuousOutputModel0.reset();
        boolean boolean6 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator8 = null;
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel0.handleStep(stepInterpolator8, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
    }

    @Test
    public void test01281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01281");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean1 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean2 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        continuousOutputModel0.reset();
        boolean boolean5 = continuousOutputModel0.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel6 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double7 = continuousOutputModel6.getFinalTime();
        double double8 = continuousOutputModel6.getInitialTime();
        double double9 = continuousOutputModel6.getFinalTime();
        boolean boolean10 = continuousOutputModel6.requiresDenseOutput();
        continuousOutputModel0.append(continuousOutputModel6);
        continuousOutputModel0.reset();
        double double13 = continuousOutputModel0.getInitialTime();
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray14 = continuousOutputModel0.getInterpolatedState();
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
    }

    @Test
    public void test01282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01282");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean1 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean2 = continuousOutputModel0.requiresDenseOutput();
        double double3 = continuousOutputModel0.getFinalTime();
        boolean boolean4 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator6 = null;
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel0.handleStep(stepInterpolator6, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
    }

    @Test
    public void test01283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01283");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double1 = continuousOutputModel0.getFinalTime();
        double double2 = continuousOutputModel0.getInitialTime();
        double double3 = continuousOutputModel0.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel4 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double5 = continuousOutputModel4.getFinalTime();
        double double6 = continuousOutputModel4.getInitialTime();
        continuousOutputModel0.append(continuousOutputModel4);
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel8 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean9 = continuousOutputModel8.requiresDenseOutput();
        double double10 = continuousOutputModel8.getInitialTime();
        double double11 = continuousOutputModel8.getInitialTime();
        continuousOutputModel0.append(continuousOutputModel8);
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel8.setInterpolatedTime(0.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
    }

    @Test
    public void test01284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01284");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean1 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean2 = continuousOutputModel0.requiresDenseOutput();
        double double3 = continuousOutputModel0.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel4 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean5 = continuousOutputModel4.requiresDenseOutput();
        boolean boolean6 = continuousOutputModel4.requiresDenseOutput();
        continuousOutputModel4.reset();
        continuousOutputModel4.reset();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel9 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double10 = continuousOutputModel9.getFinalTime();
        double double11 = continuousOutputModel9.getInitialTime();
        boolean boolean12 = continuousOutputModel9.requiresDenseOutput();
        continuousOutputModel9.reset();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel14 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean15 = continuousOutputModel14.requiresDenseOutput();
        double double16 = continuousOutputModel14.getInitialTime();
        continuousOutputModel9.append(continuousOutputModel14);
        continuousOutputModel4.append(continuousOutputModel14);
        boolean boolean19 = continuousOutputModel4.requiresDenseOutput();
        boolean boolean20 = continuousOutputModel4.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel21 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean22 = continuousOutputModel21.requiresDenseOutput();
        double double23 = continuousOutputModel21.getInitialTime();
        boolean boolean24 = continuousOutputModel21.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel25 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double26 = continuousOutputModel25.getFinalTime();
        double double27 = continuousOutputModel25.getInitialTime();
        boolean boolean28 = continuousOutputModel25.requiresDenseOutput();
        continuousOutputModel25.reset();
        boolean boolean30 = continuousOutputModel25.requiresDenseOutput();
        continuousOutputModel21.append(continuousOutputModel25);
        continuousOutputModel21.reset();
        double double33 = continuousOutputModel21.getInitialTime();
        continuousOutputModel4.append(continuousOutputModel21);
        continuousOutputModel0.append(continuousOutputModel21);
        double double36 = continuousOutputModel21.getFinalTime();
        // The following exception was thrown during execution in test generation
        try {
            double double37 = continuousOutputModel21.getInterpolatedTime();
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertTrue(Double.isNaN(double36));
    }

    @Test
    public void test01285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01285");
        java.lang.String[] strArray10 = new java.lang.String[] { "org.apache.commons.math.MathException: ", "org.apache.commons.math.ode.DerivativeException: ", "org.apache.commons.math.MathException: org.apache.commons.math.MathException: ", "org.apache.commons.math.ode.DerivativeException: ", "org.apache.commons.math.MathException: hi!", "org.apache.commons.math.MathException: " };
        org.apache.commons.math.ode.DerivativeException derivativeException11 = new org.apache.commons.math.ode.DerivativeException("java.io.IOException: ", strArray10);
        java.io.IOException iOException16 = new java.io.IOException("hi!");
        java.io.IOException iOException17 = new java.io.IOException("", (java.lang.Throwable) iOException16);
        org.apache.commons.math.ode.DerivativeException derivativeException18 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) iOException16);
        java.io.IOException iOException19 = new java.io.IOException("hi!", (java.lang.Throwable) iOException16);
        org.apache.commons.math.MathException mathException20 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: hi!", (java.lang.Throwable) iOException19);
        org.apache.commons.math.ode.DerivativeException derivativeException21 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) iOException19);
        org.apache.commons.math.MathException mathException22 = new org.apache.commons.math.MathException("java.io.IOException: java.io.IOException: ", (java.lang.Object[]) strArray10, (java.lang.Throwable) iOException19);
        java.io.IOException iOException29 = new java.io.IOException("hi!");
        org.apache.commons.math.ode.DerivativeException derivativeException30 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) iOException29);
        org.apache.commons.math.MathException mathException31 = new org.apache.commons.math.MathException("hi!", (java.lang.Throwable) iOException29);
        java.lang.Object[] objArray32 = mathException31.getArguments();
        org.apache.commons.math.MathException mathException33 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: ", objArray32);
        org.apache.commons.math.MathException mathException34 = new org.apache.commons.math.MathException("hi!", objArray32);
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel36 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double37 = continuousOutputModel36.getFinalTime();
        double double38 = continuousOutputModel36.getInitialTime();
        boolean boolean39 = continuousOutputModel36.requiresDenseOutput();
        double double40 = continuousOutputModel36.getInitialTime();
        java.io.IOException iOException43 = new java.io.IOException("hi!");
        org.apache.commons.math.ode.DerivativeException derivativeException44 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) iOException43);
        org.apache.commons.math.MathException mathException45 = new org.apache.commons.math.MathException("hi!", (java.lang.Throwable) iOException43);
        java.io.IOException iOException48 = new java.io.IOException("hi!");
        java.io.IOException iOException49 = new java.io.IOException("", (java.lang.Throwable) iOException48);
        org.apache.commons.math.ode.DerivativeException derivativeException50 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) iOException48);
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel52 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double53 = continuousOutputModel52.getFinalTime();
        double double54 = continuousOutputModel52.getInitialTime();
        java.lang.Object[] objArray55 = new java.lang.Object[] { double40, mathException45, iOException48, false, continuousOutputModel52 };
        java.lang.String[] strArray64 = new java.lang.String[] { "hi!", "org.apache.commons.math.MathException: ", "hi!", "org.apache.commons.math.MathException: ", "", "" };
        org.apache.commons.math.ode.DerivativeException derivativeException65 = new org.apache.commons.math.ode.DerivativeException("", strArray64);
        java.io.IOException iOException69 = new java.io.IOException("hi!");
        org.apache.commons.math.ode.DerivativeException derivativeException70 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) iOException69);
        org.apache.commons.math.MathException mathException71 = new org.apache.commons.math.MathException("hi!", (java.lang.Throwable) iOException69);
        java.lang.Object[] objArray72 = mathException71.getArguments();
        org.apache.commons.math.MathException mathException73 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: ", (java.lang.Throwable) mathException71);
        org.apache.commons.math.MathException mathException74 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: hi!", (java.lang.Object[]) strArray64, (java.lang.Throwable) mathException71);
        org.apache.commons.math.MathException mathException75 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: hi!", objArray55, (java.lang.Throwable) mathException74);
        org.apache.commons.math.MathException mathException76 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: ", objArray32, (java.lang.Throwable) mathException75);
        java.io.IOException iOException79 = new java.io.IOException("hi!");
        java.io.IOException iOException80 = new java.io.IOException("", (java.lang.Throwable) iOException79);
        java.io.IOException iOException81 = new java.io.IOException((java.lang.Throwable) iOException80);
        org.apache.commons.math.MathException mathException82 = new org.apache.commons.math.MathException("java.io.IOException: hi!", objArray32, (java.lang.Throwable) iOException81);
        mathException22.addSuppressed((java.lang.Throwable) iOException81);
        java.lang.Object[] objArray84 = mathException22.getArguments();
        java.io.IOException iOException85 = new java.io.IOException("org.apache.commons.math.MathException: java.io.IOException: org.apache.commons.math.MathException: hi!", (java.lang.Throwable) mathException22);
        java.io.IOException iOException86 = new java.io.IOException((java.lang.Throwable) iOException85);
        org.apache.commons.math.MathException mathException87 = new org.apache.commons.math.MathException("java.io.IOException: ", (java.lang.Throwable) iOException85);
        org.apache.commons.math.ode.DerivativeException derivativeException88 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) iOException85);
        java.lang.String str89 = derivativeException88.toString();
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertNotNull(objArray55);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNotNull(objArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray72), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray72), "[]");
        org.junit.Assert.assertNotNull(objArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray84), "[org.apache.commons.math.MathException: , org.apache.commons.math.ode.DerivativeException: , org.apache.commons.math.MathException: org.apache.commons.math.MathException: , org.apache.commons.math.ode.DerivativeException: , org.apache.commons.math.MathException: hi!, org.apache.commons.math.MathException: ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray84), "[org.apache.commons.math.MathException: , org.apache.commons.math.ode.DerivativeException: , org.apache.commons.math.MathException: org.apache.commons.math.MathException: , org.apache.commons.math.ode.DerivativeException: , org.apache.commons.math.MathException: hi!, org.apache.commons.math.MathException: ]");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.MathException: java.io.IOException: org.apache.commons.math.MathException: hi!" + "'", str89, "org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.MathException: java.io.IOException: org.apache.commons.math.MathException: hi!");
    }

    @Test
    public void test01286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01286");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean1 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean2 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        boolean boolean4 = continuousOutputModel0.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel5 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double6 = continuousOutputModel5.getFinalTime();
        double double7 = continuousOutputModel5.getInitialTime();
        boolean boolean8 = continuousOutputModel5.requiresDenseOutput();
        continuousOutputModel0.append(continuousOutputModel5);
        double double10 = continuousOutputModel5.getInitialTime();
        double double11 = continuousOutputModel5.getFinalTime();
        continuousOutputModel5.reset();
        double double13 = continuousOutputModel5.getFinalTime();
        continuousOutputModel5.reset();
        continuousOutputModel5.reset();
        continuousOutputModel5.reset();
        double double17 = continuousOutputModel5.getFinalTime();
        double double18 = continuousOutputModel5.getFinalTime();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
    }

    @Test
    public void test01287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01287");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean1 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean2 = continuousOutputModel0.requiresDenseOutput();
        double double3 = continuousOutputModel0.getFinalTime();
        continuousOutputModel0.reset();
        boolean boolean5 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel7 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean8 = continuousOutputModel7.requiresDenseOutput();
        boolean boolean9 = continuousOutputModel7.requiresDenseOutput();
        double double10 = continuousOutputModel7.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel11 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean12 = continuousOutputModel11.requiresDenseOutput();
        continuousOutputModel7.append(continuousOutputModel11);
        boolean boolean14 = continuousOutputModel7.requiresDenseOutput();
        continuousOutputModel7.reset();
        continuousOutputModel0.append(continuousOutputModel7);
        double double17 = continuousOutputModel0.getInitialTime();
        double double18 = continuousOutputModel0.getInitialTime();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator19 = null;
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel0.handleStep(stepInterpolator19, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
    }

    @Test
    public void test01288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01288");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double1 = continuousOutputModel0.getFinalTime();
        double double2 = continuousOutputModel0.getInitialTime();
        boolean boolean3 = continuousOutputModel0.requiresDenseOutput();
        double double4 = continuousOutputModel0.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel5 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double6 = continuousOutputModel5.getFinalTime();
        double double7 = continuousOutputModel5.getInitialTime();
        boolean boolean8 = continuousOutputModel5.requiresDenseOutput();
        continuousOutputModel5.reset();
        boolean boolean10 = continuousOutputModel5.requiresDenseOutput();
        boolean boolean11 = continuousOutputModel5.requiresDenseOutput();
        double double12 = continuousOutputModel5.getInitialTime();
        continuousOutputModel0.append(continuousOutputModel5);
        org.apache.commons.math.ode.StepInterpolator stepInterpolator14 = null;
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel5.handleStep(stepInterpolator14, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
    }

    @Test
    public void test01289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01289");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean1 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean2 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        double double4 = continuousOutputModel0.getInitialTime();
        boolean boolean5 = continuousOutputModel0.requiresDenseOutput();
        double double6 = continuousOutputModel0.getInitialTime();
        continuousOutputModel0.reset();
        boolean boolean8 = continuousOutputModel0.requiresDenseOutput();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void test01290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01290");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean1 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean2 = continuousOutputModel0.requiresDenseOutput();
        double double3 = continuousOutputModel0.getFinalTime();
        double double4 = continuousOutputModel0.getInitialTime();
        double double5 = continuousOutputModel0.getFinalTime();
        boolean boolean6 = continuousOutputModel0.requiresDenseOutput();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator7 = null;
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel0.handleStep(stepInterpolator7, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
    }

    @Test
    public void test01291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01291");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean1 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean2 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        boolean boolean4 = continuousOutputModel0.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel5 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double6 = continuousOutputModel5.getFinalTime();
        double double7 = continuousOutputModel5.getInitialTime();
        boolean boolean8 = continuousOutputModel5.requiresDenseOutput();
        continuousOutputModel0.append(continuousOutputModel5);
        double double10 = continuousOutputModel5.getInitialTime();
        double double11 = continuousOutputModel5.getFinalTime();
        continuousOutputModel5.reset();
        double double13 = continuousOutputModel5.getFinalTime();
        continuousOutputModel5.reset();
        continuousOutputModel5.reset();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel16 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean17 = continuousOutputModel16.requiresDenseOutput();
        boolean boolean18 = continuousOutputModel16.requiresDenseOutput();
        continuousOutputModel16.reset();
        boolean boolean20 = continuousOutputModel16.requiresDenseOutput();
        continuousOutputModel16.reset();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel22 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double23 = continuousOutputModel22.getFinalTime();
        continuousOutputModel22.reset();
        continuousOutputModel16.append(continuousOutputModel22);
        boolean boolean26 = continuousOutputModel16.requiresDenseOutput();
        double double27 = continuousOutputModel16.getInitialTime();
        boolean boolean28 = continuousOutputModel16.requiresDenseOutput();
        continuousOutputModel5.append(continuousOutputModel16);
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel5.setInterpolatedTime((double) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
    }

    @Test
    public void test01292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01292");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean1 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean2 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        boolean boolean4 = continuousOutputModel0.requiresDenseOutput();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator5 = null;
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel0.handleStep(stepInterpolator5, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
    }

    @Test
    public void test01293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01293");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean1 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean2 = continuousOutputModel0.requiresDenseOutput();
        double double3 = continuousOutputModel0.getFinalTime();
        double double4 = continuousOutputModel0.getInitialTime();
        boolean boolean5 = continuousOutputModel0.requiresDenseOutput();
        double double6 = continuousOutputModel0.getFinalTime();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator7 = null;
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel0.handleStep(stepInterpolator7, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
    }

    @Test
    public void test01294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01294");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean1 = continuousOutputModel0.requiresDenseOutput();
        double double2 = continuousOutputModel0.getInitialTime();
        double double3 = continuousOutputModel0.getFinalTime();
        boolean boolean4 = continuousOutputModel0.requiresDenseOutput();
        double double5 = continuousOutputModel0.getFinalTime();
        continuousOutputModel0.reset();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator7 = null;
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel0.handleStep(stepInterpolator7, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
    }

    @Test
    public void test01295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01295");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double1 = continuousOutputModel0.getFinalTime();
        double double2 = continuousOutputModel0.getInitialTime();
        boolean boolean3 = continuousOutputModel0.requiresDenseOutput();
        double double4 = continuousOutputModel0.getInitialTime();
        continuousOutputModel0.reset();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel6 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean7 = continuousOutputModel6.requiresDenseOutput();
        double double8 = continuousOutputModel6.getInitialTime();
        boolean boolean9 = continuousOutputModel6.requiresDenseOutput();
        continuousOutputModel0.append(continuousOutputModel6);
        double double11 = continuousOutputModel6.getFinalTime();
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel6.setInterpolatedTime((double) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
    }

    @Test
    public void test01296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01296");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double1 = continuousOutputModel0.getFinalTime();
        double double2 = continuousOutputModel0.getInitialTime();
        boolean boolean3 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel5 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean6 = continuousOutputModel5.requiresDenseOutput();
        double double7 = continuousOutputModel5.getInitialTime();
        continuousOutputModel0.append(continuousOutputModel5);
        boolean boolean9 = continuousOutputModel5.requiresDenseOutput();
        boolean boolean10 = continuousOutputModel5.requiresDenseOutput();
        boolean boolean11 = continuousOutputModel5.requiresDenseOutput();
        continuousOutputModel5.reset();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel13 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean14 = continuousOutputModel13.requiresDenseOutput();
        boolean boolean15 = continuousOutputModel13.requiresDenseOutput();
        double double16 = continuousOutputModel13.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel17 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean18 = continuousOutputModel17.requiresDenseOutput();
        continuousOutputModel13.append(continuousOutputModel17);
        continuousOutputModel13.reset();
        boolean boolean21 = continuousOutputModel13.requiresDenseOutput();
        continuousOutputModel13.reset();
        boolean boolean23 = continuousOutputModel13.requiresDenseOutput();
        continuousOutputModel13.reset();
        continuousOutputModel5.append(continuousOutputModel13);
        org.apache.commons.math.ode.StepInterpolator stepInterpolator26 = null;
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel5.handleStep(stepInterpolator26, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
    }

    @Test
    public void test01297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01297");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double1 = continuousOutputModel0.getFinalTime();
        double double2 = continuousOutputModel0.getInitialTime();
        double double3 = continuousOutputModel0.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel4 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double5 = continuousOutputModel4.getFinalTime();
        double double6 = continuousOutputModel4.getInitialTime();
        continuousOutputModel0.append(continuousOutputModel4);
        continuousOutputModel4.reset();
        boolean boolean9 = continuousOutputModel4.requiresDenseOutput();
        double double10 = continuousOutputModel4.getFinalTime();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator11 = null;
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel4.handleStep(stepInterpolator11, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
    }

    @Test
    public void test01298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01298");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel1 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean2 = continuousOutputModel1.requiresDenseOutput();
        boolean boolean3 = continuousOutputModel1.requiresDenseOutput();
        double double4 = continuousOutputModel1.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel5 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean6 = continuousOutputModel5.requiresDenseOutput();
        continuousOutputModel1.append(continuousOutputModel5);
        continuousOutputModel0.append(continuousOutputModel5);
        boolean boolean9 = continuousOutputModel5.requiresDenseOutput();
        double double10 = continuousOutputModel5.getInitialTime();
        continuousOutputModel5.reset();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel12 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double13 = continuousOutputModel12.getFinalTime();
        double double14 = continuousOutputModel12.getInitialTime();
        double double15 = continuousOutputModel12.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel16 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double17 = continuousOutputModel16.getFinalTime();
        double double18 = continuousOutputModel16.getInitialTime();
        continuousOutputModel12.append(continuousOutputModel16);
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel20 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean21 = continuousOutputModel20.requiresDenseOutput();
        double double22 = continuousOutputModel20.getInitialTime();
        double double23 = continuousOutputModel20.getInitialTime();
        continuousOutputModel12.append(continuousOutputModel20);
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel25 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean26 = continuousOutputModel25.requiresDenseOutput();
        boolean boolean27 = continuousOutputModel25.requiresDenseOutput();
        double double28 = continuousOutputModel25.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel29 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean30 = continuousOutputModel29.requiresDenseOutput();
        boolean boolean31 = continuousOutputModel29.requiresDenseOutput();
        continuousOutputModel29.reset();
        continuousOutputModel29.reset();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel34 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double35 = continuousOutputModel34.getFinalTime();
        double double36 = continuousOutputModel34.getInitialTime();
        boolean boolean37 = continuousOutputModel34.requiresDenseOutput();
        continuousOutputModel34.reset();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel39 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean40 = continuousOutputModel39.requiresDenseOutput();
        double double41 = continuousOutputModel39.getInitialTime();
        continuousOutputModel34.append(continuousOutputModel39);
        continuousOutputModel29.append(continuousOutputModel39);
        boolean boolean44 = continuousOutputModel29.requiresDenseOutput();
        boolean boolean45 = continuousOutputModel29.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel46 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean47 = continuousOutputModel46.requiresDenseOutput();
        double double48 = continuousOutputModel46.getInitialTime();
        boolean boolean49 = continuousOutputModel46.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel50 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double51 = continuousOutputModel50.getFinalTime();
        double double52 = continuousOutputModel50.getInitialTime();
        boolean boolean53 = continuousOutputModel50.requiresDenseOutput();
        continuousOutputModel50.reset();
        boolean boolean55 = continuousOutputModel50.requiresDenseOutput();
        continuousOutputModel46.append(continuousOutputModel50);
        continuousOutputModel46.reset();
        double double58 = continuousOutputModel46.getInitialTime();
        continuousOutputModel29.append(continuousOutputModel46);
        continuousOutputModel25.append(continuousOutputModel46);
        continuousOutputModel20.append(continuousOutputModel46);
        continuousOutputModel5.append(continuousOutputModel20);
        double double63 = continuousOutputModel5.getInitialTime();
        double double64 = continuousOutputModel5.getInitialTime();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator65 = null;
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel5.handleStep(stepInterpolator65, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertTrue(Double.isNaN(double52));
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double58));
        org.junit.Assert.assertTrue(Double.isNaN(double63));
        org.junit.Assert.assertTrue(Double.isNaN(double64));
    }

    @Test
    public void test01299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01299");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel1 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean2 = continuousOutputModel1.requiresDenseOutput();
        boolean boolean3 = continuousOutputModel1.requiresDenseOutput();
        double double4 = continuousOutputModel1.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel5 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean6 = continuousOutputModel5.requiresDenseOutput();
        continuousOutputModel1.append(continuousOutputModel5);
        continuousOutputModel0.append(continuousOutputModel5);
        boolean boolean9 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean10 = continuousOutputModel0.requiresDenseOutput();
        double double11 = continuousOutputModel0.getFinalTime();
        double double12 = continuousOutputModel0.getFinalTime();
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray13 = continuousOutputModel0.getInterpolatedState();
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
    }

    @Test
    public void test01300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01300");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean1 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean2 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        boolean boolean4 = continuousOutputModel0.requiresDenseOutput();
        double double5 = continuousOutputModel0.getFinalTime();
        boolean boolean6 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean7 = continuousOutputModel0.requiresDenseOutput();
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel0.setInterpolatedTime((double) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void test01301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01301");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double1 = continuousOutputModel0.getFinalTime();
        double double2 = continuousOutputModel0.getInitialTime();
        boolean boolean3 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel5 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean6 = continuousOutputModel5.requiresDenseOutput();
        double double7 = continuousOutputModel5.getInitialTime();
        continuousOutputModel0.append(continuousOutputModel5);
        boolean boolean9 = continuousOutputModel5.requiresDenseOutput();
        boolean boolean10 = continuousOutputModel5.requiresDenseOutput();
        boolean boolean11 = continuousOutputModel5.requiresDenseOutput();
        continuousOutputModel5.reset();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel13 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean14 = continuousOutputModel13.requiresDenseOutput();
        boolean boolean15 = continuousOutputModel13.requiresDenseOutput();
        double double16 = continuousOutputModel13.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel17 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean18 = continuousOutputModel17.requiresDenseOutput();
        continuousOutputModel13.append(continuousOutputModel17);
        continuousOutputModel13.reset();
        boolean boolean21 = continuousOutputModel13.requiresDenseOutput();
        continuousOutputModel13.reset();
        boolean boolean23 = continuousOutputModel13.requiresDenseOutput();
        continuousOutputModel13.reset();
        continuousOutputModel5.append(continuousOutputModel13);
        // The following exception was thrown during execution in test generation
        try {
            double double26 = continuousOutputModel13.getInterpolatedTime();
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
    }

    @Test
    public void test01302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01302");
        java.io.IOException iOException7 = new java.io.IOException("hi!");
        org.apache.commons.math.ode.DerivativeException derivativeException8 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) iOException7);
        org.apache.commons.math.MathException mathException9 = new org.apache.commons.math.MathException("hi!", (java.lang.Throwable) iOException7);
        java.lang.Object[] objArray10 = mathException9.getArguments();
        org.apache.commons.math.MathException mathException11 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: ", objArray10);
        org.apache.commons.math.MathException mathException12 = new org.apache.commons.math.MathException("hi!", objArray10);
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel14 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double15 = continuousOutputModel14.getFinalTime();
        double double16 = continuousOutputModel14.getInitialTime();
        boolean boolean17 = continuousOutputModel14.requiresDenseOutput();
        double double18 = continuousOutputModel14.getInitialTime();
        java.io.IOException iOException21 = new java.io.IOException("hi!");
        org.apache.commons.math.ode.DerivativeException derivativeException22 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) iOException21);
        org.apache.commons.math.MathException mathException23 = new org.apache.commons.math.MathException("hi!", (java.lang.Throwable) iOException21);
        java.io.IOException iOException26 = new java.io.IOException("hi!");
        java.io.IOException iOException27 = new java.io.IOException("", (java.lang.Throwable) iOException26);
        org.apache.commons.math.ode.DerivativeException derivativeException28 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) iOException26);
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel30 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double31 = continuousOutputModel30.getFinalTime();
        double double32 = continuousOutputModel30.getInitialTime();
        java.lang.Object[] objArray33 = new java.lang.Object[] { double18, mathException23, iOException26, false, continuousOutputModel30 };
        java.lang.String[] strArray42 = new java.lang.String[] { "hi!", "org.apache.commons.math.MathException: ", "hi!", "org.apache.commons.math.MathException: ", "", "" };
        org.apache.commons.math.ode.DerivativeException derivativeException43 = new org.apache.commons.math.ode.DerivativeException("", strArray42);
        java.io.IOException iOException47 = new java.io.IOException("hi!");
        org.apache.commons.math.ode.DerivativeException derivativeException48 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) iOException47);
        org.apache.commons.math.MathException mathException49 = new org.apache.commons.math.MathException("hi!", (java.lang.Throwable) iOException47);
        java.lang.Object[] objArray50 = mathException49.getArguments();
        org.apache.commons.math.MathException mathException51 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: ", (java.lang.Throwable) mathException49);
        org.apache.commons.math.MathException mathException52 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: hi!", (java.lang.Object[]) strArray42, (java.lang.Throwable) mathException49);
        org.apache.commons.math.MathException mathException53 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: hi!", objArray33, (java.lang.Throwable) mathException52);
        org.apache.commons.math.MathException mathException54 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: ", objArray10, (java.lang.Throwable) mathException53);
        org.apache.commons.math.MathException mathException55 = new org.apache.commons.math.MathException("", objArray10);
        org.apache.commons.math.MathException mathException56 = new org.apache.commons.math.MathException("", (java.lang.Throwable) mathException55);
        java.lang.String str57 = mathException56.toString();
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[]");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "org.apache.commons.math.MathException: " + "'", str57, "org.apache.commons.math.MathException: ");
    }

    @Test
    public void test01303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01303");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double1 = continuousOutputModel0.getFinalTime();
        double double2 = continuousOutputModel0.getInitialTime();
        double double3 = continuousOutputModel0.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel4 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double5 = continuousOutputModel4.getFinalTime();
        double double6 = continuousOutputModel4.getInitialTime();
        continuousOutputModel0.append(continuousOutputModel4);
        double double8 = continuousOutputModel0.getFinalTime();
        continuousOutputModel0.reset();
        continuousOutputModel0.reset();
        boolean boolean11 = continuousOutputModel0.requiresDenseOutput();
        double double12 = continuousOutputModel0.getInitialTime();
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
    }

    @Test
    public void test01304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01304");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean1 = continuousOutputModel0.requiresDenseOutput();
        double double2 = continuousOutputModel0.getInitialTime();
        double double3 = continuousOutputModel0.getFinalTime();
        boolean boolean4 = continuousOutputModel0.requiresDenseOutput();
        double double5 = continuousOutputModel0.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel6 = new org.apache.commons.math.ode.ContinuousOutputModel();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel7 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean8 = continuousOutputModel7.requiresDenseOutput();
        boolean boolean9 = continuousOutputModel7.requiresDenseOutput();
        double double10 = continuousOutputModel7.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel11 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean12 = continuousOutputModel11.requiresDenseOutput();
        continuousOutputModel7.append(continuousOutputModel11);
        continuousOutputModel6.append(continuousOutputModel11);
        boolean boolean15 = continuousOutputModel11.requiresDenseOutput();
        continuousOutputModel0.append(continuousOutputModel11);
        org.apache.commons.math.ode.StepInterpolator stepInterpolator17 = null;
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel11.handleStep(stepInterpolator17, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    }

    @Test
    public void test01305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01305");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean1 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean2 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        boolean boolean4 = continuousOutputModel0.requiresDenseOutput();
        double double5 = continuousOutputModel0.getFinalTime();
        boolean boolean6 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean7 = continuousOutputModel0.requiresDenseOutput();
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel0.setInterpolatedTime((double) 100.0f);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void test01306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01306");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean1 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean2 = continuousOutputModel0.requiresDenseOutput();
        double double3 = continuousOutputModel0.getFinalTime();
        boolean boolean4 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        java.lang.Class<?> wildcardClass6 = continuousOutputModel0.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test01307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01307");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel1 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean2 = continuousOutputModel1.requiresDenseOutput();
        boolean boolean3 = continuousOutputModel1.requiresDenseOutput();
        double double4 = continuousOutputModel1.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel5 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean6 = continuousOutputModel5.requiresDenseOutput();
        continuousOutputModel1.append(continuousOutputModel5);
        continuousOutputModel0.append(continuousOutputModel5);
        boolean boolean9 = continuousOutputModel5.requiresDenseOutput();
        double double10 = continuousOutputModel5.getInitialTime();
        continuousOutputModel5.reset();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel12 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double13 = continuousOutputModel12.getFinalTime();
        double double14 = continuousOutputModel12.getInitialTime();
        double double15 = continuousOutputModel12.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel16 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double17 = continuousOutputModel16.getFinalTime();
        double double18 = continuousOutputModel16.getInitialTime();
        continuousOutputModel12.append(continuousOutputModel16);
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel20 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean21 = continuousOutputModel20.requiresDenseOutput();
        double double22 = continuousOutputModel20.getInitialTime();
        double double23 = continuousOutputModel20.getInitialTime();
        continuousOutputModel12.append(continuousOutputModel20);
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel25 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean26 = continuousOutputModel25.requiresDenseOutput();
        boolean boolean27 = continuousOutputModel25.requiresDenseOutput();
        double double28 = continuousOutputModel25.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel29 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean30 = continuousOutputModel29.requiresDenseOutput();
        boolean boolean31 = continuousOutputModel29.requiresDenseOutput();
        continuousOutputModel29.reset();
        continuousOutputModel29.reset();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel34 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double35 = continuousOutputModel34.getFinalTime();
        double double36 = continuousOutputModel34.getInitialTime();
        boolean boolean37 = continuousOutputModel34.requiresDenseOutput();
        continuousOutputModel34.reset();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel39 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean40 = continuousOutputModel39.requiresDenseOutput();
        double double41 = continuousOutputModel39.getInitialTime();
        continuousOutputModel34.append(continuousOutputModel39);
        continuousOutputModel29.append(continuousOutputModel39);
        boolean boolean44 = continuousOutputModel29.requiresDenseOutput();
        boolean boolean45 = continuousOutputModel29.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel46 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean47 = continuousOutputModel46.requiresDenseOutput();
        double double48 = continuousOutputModel46.getInitialTime();
        boolean boolean49 = continuousOutputModel46.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel50 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double51 = continuousOutputModel50.getFinalTime();
        double double52 = continuousOutputModel50.getInitialTime();
        boolean boolean53 = continuousOutputModel50.requiresDenseOutput();
        continuousOutputModel50.reset();
        boolean boolean55 = continuousOutputModel50.requiresDenseOutput();
        continuousOutputModel46.append(continuousOutputModel50);
        continuousOutputModel46.reset();
        double double58 = continuousOutputModel46.getInitialTime();
        continuousOutputModel29.append(continuousOutputModel46);
        continuousOutputModel25.append(continuousOutputModel46);
        continuousOutputModel20.append(continuousOutputModel46);
        continuousOutputModel5.append(continuousOutputModel20);
        boolean boolean63 = continuousOutputModel20.requiresDenseOutput();
        double double64 = continuousOutputModel20.getFinalTime();
        // The following exception was thrown during execution in test generation
        try {
            double double65 = continuousOutputModel20.getInterpolatedTime();
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertTrue(Double.isNaN(double52));
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double58));
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double64));
    }

    @Test
    public void test01308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01308");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean1 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean2 = continuousOutputModel0.requiresDenseOutput();
        double double3 = continuousOutputModel0.getFinalTime();
        double double4 = continuousOutputModel0.getInitialTime();
        boolean boolean5 = continuousOutputModel0.requiresDenseOutput();
        double double6 = continuousOutputModel0.getFinalTime();
        continuousOutputModel0.reset();
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel0.setInterpolatedTime((double) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
    }

    @Test
    public void test01309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01309");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean1 = continuousOutputModel0.requiresDenseOutput();
        double double2 = continuousOutputModel0.getInitialTime();
        double double3 = continuousOutputModel0.getFinalTime();
        double double4 = continuousOutputModel0.getFinalTime();
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray5 = continuousOutputModel0.getInterpolatedState();
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
    }

    @Test
    public void test01310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01310");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean1 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean2 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        continuousOutputModel0.reset();
        boolean boolean5 = continuousOutputModel0.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel6 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double7 = continuousOutputModel6.getFinalTime();
        double double8 = continuousOutputModel6.getInitialTime();
        double double9 = continuousOutputModel6.getFinalTime();
        boolean boolean10 = continuousOutputModel6.requiresDenseOutput();
        continuousOutputModel0.append(continuousOutputModel6);
        boolean boolean12 = continuousOutputModel6.requiresDenseOutput();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator13 = null;
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel6.handleStep(stepInterpolator13, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test01311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01311");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean1 = continuousOutputModel0.requiresDenseOutput();
        double double2 = continuousOutputModel0.getInitialTime();
        boolean boolean3 = continuousOutputModel0.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel4 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double5 = continuousOutputModel4.getFinalTime();
        double double6 = continuousOutputModel4.getInitialTime();
        boolean boolean7 = continuousOutputModel4.requiresDenseOutput();
        continuousOutputModel4.reset();
        boolean boolean9 = continuousOutputModel4.requiresDenseOutput();
        continuousOutputModel0.append(continuousOutputModel4);
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel11 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double12 = continuousOutputModel11.getFinalTime();
        double double13 = continuousOutputModel11.getInitialTime();
        double double14 = continuousOutputModel11.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel15 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double16 = continuousOutputModel15.getFinalTime();
        double double17 = continuousOutputModel15.getInitialTime();
        continuousOutputModel11.append(continuousOutputModel15);
        double double19 = continuousOutputModel11.getFinalTime();
        boolean boolean20 = continuousOutputModel11.requiresDenseOutput();
        boolean boolean21 = continuousOutputModel11.requiresDenseOutput();
        boolean boolean22 = continuousOutputModel11.requiresDenseOutput();
        boolean boolean23 = continuousOutputModel11.requiresDenseOutput();
        continuousOutputModel0.append(continuousOutputModel11);
        boolean boolean25 = continuousOutputModel11.requiresDenseOutput();
        double double26 = continuousOutputModel11.getInitialTime();
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray27 = continuousOutputModel11.getInterpolatedState();
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
    }

    @Test
    public void test01312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01312");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean1 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean2 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        boolean boolean4 = continuousOutputModel0.requiresDenseOutput();
        double double5 = continuousOutputModel0.getFinalTime();
        boolean boolean6 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        continuousOutputModel0.reset();
        boolean boolean9 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean10 = continuousOutputModel0.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel11 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double12 = continuousOutputModel11.getFinalTime();
        double double13 = continuousOutputModel11.getInitialTime();
        boolean boolean14 = continuousOutputModel11.requiresDenseOutput();
        double double15 = continuousOutputModel11.getInitialTime();
        continuousOutputModel0.append(continuousOutputModel11);
        continuousOutputModel0.reset();
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray18 = continuousOutputModel0.getInterpolatedState();
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
    }

    @Test
    public void test01313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01313");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean1 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean2 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        boolean boolean4 = continuousOutputModel0.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel5 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double6 = continuousOutputModel5.getFinalTime();
        double double7 = continuousOutputModel5.getInitialTime();
        boolean boolean8 = continuousOutputModel5.requiresDenseOutput();
        continuousOutputModel0.append(continuousOutputModel5);
        double double10 = continuousOutputModel5.getInitialTime();
        double double11 = continuousOutputModel5.getFinalTime();
        continuousOutputModel5.reset();
        continuousOutputModel5.reset();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel14 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean15 = continuousOutputModel14.requiresDenseOutput();
        boolean boolean16 = continuousOutputModel14.requiresDenseOutput();
        double double17 = continuousOutputModel14.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel18 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean19 = continuousOutputModel18.requiresDenseOutput();
        continuousOutputModel14.append(continuousOutputModel18);
        continuousOutputModel5.append(continuousOutputModel14);
        double double22 = continuousOutputModel14.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel23 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean24 = continuousOutputModel23.requiresDenseOutput();
        boolean boolean25 = continuousOutputModel23.requiresDenseOutput();
        double double26 = continuousOutputModel23.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel27 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean28 = continuousOutputModel27.requiresDenseOutput();
        continuousOutputModel23.append(continuousOutputModel27);
        continuousOutputModel23.reset();
        boolean boolean31 = continuousOutputModel23.requiresDenseOutput();
        boolean boolean32 = continuousOutputModel23.requiresDenseOutput();
        boolean boolean33 = continuousOutputModel23.requiresDenseOutput();
        continuousOutputModel14.append(continuousOutputModel23);
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel23.setInterpolatedTime((double) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
    }

    @Test
    public void test01314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01314");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean1 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean2 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        double double4 = continuousOutputModel0.getInitialTime();
        boolean boolean5 = continuousOutputModel0.requiresDenseOutput();
        double double6 = continuousOutputModel0.getFinalTime();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator7 = null;
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel0.handleStep(stepInterpolator7, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
    }

    @Test
    public void test01315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01315");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double1 = continuousOutputModel0.getFinalTime();
        double double2 = continuousOutputModel0.getInitialTime();
        boolean boolean3 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        boolean boolean5 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean6 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        boolean boolean8 = continuousOutputModel0.requiresDenseOutput();
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray9 = continuousOutputModel0.getInterpolatedState();
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void test01316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01316");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double1 = continuousOutputModel0.getFinalTime();
        double double2 = continuousOutputModel0.getInitialTime();
        double double3 = continuousOutputModel0.getFinalTime();
        boolean boolean4 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean5 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean6 = continuousOutputModel0.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel7 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double8 = continuousOutputModel7.getFinalTime();
        double double9 = continuousOutputModel7.getInitialTime();
        double double10 = continuousOutputModel7.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel11 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double12 = continuousOutputModel11.getFinalTime();
        double double13 = continuousOutputModel11.getInitialTime();
        continuousOutputModel7.append(continuousOutputModel11);
        boolean boolean15 = continuousOutputModel7.requiresDenseOutput();
        continuousOutputModel0.append(continuousOutputModel7);
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel17 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double18 = continuousOutputModel17.getFinalTime();
        double double19 = continuousOutputModel17.getInitialTime();
        double double20 = continuousOutputModel17.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel21 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double22 = continuousOutputModel21.getFinalTime();
        double double23 = continuousOutputModel21.getInitialTime();
        continuousOutputModel17.append(continuousOutputModel21);
        double double25 = continuousOutputModel17.getFinalTime();
        boolean boolean26 = continuousOutputModel17.requiresDenseOutput();
        boolean boolean27 = continuousOutputModel17.requiresDenseOutput();
        boolean boolean28 = continuousOutputModel17.requiresDenseOutput();
        boolean boolean29 = continuousOutputModel17.requiresDenseOutput();
        continuousOutputModel17.reset();
        boolean boolean31 = continuousOutputModel17.requiresDenseOutput();
        continuousOutputModel7.append(continuousOutputModel17);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray33 = continuousOutputModel17.getInterpolatedState();
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
    }

    @Test
    public void test01317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01317");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double1 = continuousOutputModel0.getFinalTime();
        double double2 = continuousOutputModel0.getInitialTime();
        boolean boolean3 = continuousOutputModel0.requiresDenseOutput();
        double double4 = continuousOutputModel0.getInitialTime();
        continuousOutputModel0.reset();
        continuousOutputModel0.reset();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator7 = null;
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel0.handleStep(stepInterpolator7, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
    }

    @Test
    public void test01318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01318");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean1 = continuousOutputModel0.requiresDenseOutput();
        double double2 = continuousOutputModel0.getInitialTime();
        boolean boolean3 = continuousOutputModel0.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel4 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double5 = continuousOutputModel4.getFinalTime();
        double double6 = continuousOutputModel4.getInitialTime();
        boolean boolean7 = continuousOutputModel4.requiresDenseOutput();
        continuousOutputModel4.reset();
        boolean boolean9 = continuousOutputModel4.requiresDenseOutput();
        continuousOutputModel0.append(continuousOutputModel4);
        continuousOutputModel4.reset();
        double double12 = continuousOutputModel4.getInitialTime();
        boolean boolean13 = continuousOutputModel4.requiresDenseOutput();
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel4.setInterpolatedTime((double) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test01319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01319");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double1 = continuousOutputModel0.getFinalTime();
        double double2 = continuousOutputModel0.getInitialTime();
        double double3 = continuousOutputModel0.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel4 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double5 = continuousOutputModel4.getFinalTime();
        double double6 = continuousOutputModel4.getInitialTime();
        continuousOutputModel0.append(continuousOutputModel4);
        double double8 = continuousOutputModel0.getFinalTime();
        continuousOutputModel0.reset();
        continuousOutputModel0.reset();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator11 = null;
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel0.handleStep(stepInterpolator11, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
    }

    @Test
    public void test01320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01320");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double1 = continuousOutputModel0.getFinalTime();
        double double2 = continuousOutputModel0.getInitialTime();
        boolean boolean3 = continuousOutputModel0.requiresDenseOutput();
        double double4 = continuousOutputModel0.getInitialTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel5 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean6 = continuousOutputModel5.requiresDenseOutput();
        boolean boolean7 = continuousOutputModel5.requiresDenseOutput();
        continuousOutputModel5.reset();
        boolean boolean9 = continuousOutputModel5.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel10 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double11 = continuousOutputModel10.getFinalTime();
        double double12 = continuousOutputModel10.getInitialTime();
        boolean boolean13 = continuousOutputModel10.requiresDenseOutput();
        continuousOutputModel5.append(continuousOutputModel10);
        continuousOutputModel0.append(continuousOutputModel5);
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel16 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean17 = continuousOutputModel16.requiresDenseOutput();
        double double18 = continuousOutputModel16.getInitialTime();
        boolean boolean19 = continuousOutputModel16.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel20 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean21 = continuousOutputModel20.requiresDenseOutput();
        boolean boolean22 = continuousOutputModel20.requiresDenseOutput();
        continuousOutputModel16.append(continuousOutputModel20);
        continuousOutputModel5.append(continuousOutputModel16);
        double double25 = continuousOutputModel16.getFinalTime();
        continuousOutputModel16.reset();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator27 = null;
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel16.handleStep(stepInterpolator27, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double25));
    }

    @Test
    public void test01321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01321");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double1 = continuousOutputModel0.getFinalTime();
        double double2 = continuousOutputModel0.getInitialTime();
        double double3 = continuousOutputModel0.getFinalTime();
        double double4 = continuousOutputModel0.getFinalTime();
        double double5 = continuousOutputModel0.getInitialTime();
        continuousOutputModel0.reset();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel7 = new org.apache.commons.math.ode.ContinuousOutputModel();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel8 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean9 = continuousOutputModel8.requiresDenseOutput();
        boolean boolean10 = continuousOutputModel8.requiresDenseOutput();
        double double11 = continuousOutputModel8.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel12 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean13 = continuousOutputModel12.requiresDenseOutput();
        continuousOutputModel8.append(continuousOutputModel12);
        continuousOutputModel7.append(continuousOutputModel12);
        continuousOutputModel12.reset();
        double double17 = continuousOutputModel12.getFinalTime();
        continuousOutputModel0.append(continuousOutputModel12);
        continuousOutputModel0.reset();
        boolean boolean20 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        double double22 = continuousOutputModel0.getInitialTime();
        // The following exception was thrown during execution in test generation
        try {
            double double23 = continuousOutputModel0.getInterpolatedTime();
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
    }

    @Test
    public void test01322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01322");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean1 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean2 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        boolean boolean4 = continuousOutputModel0.requiresDenseOutput();
        double double5 = continuousOutputModel0.getFinalTime();
        boolean boolean6 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel0.setInterpolatedTime(0.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
    }

    @Test
    public void test01323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01323");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double1 = continuousOutputModel0.getFinalTime();
        continuousOutputModel0.reset();
        continuousOutputModel0.reset();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel4 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double5 = continuousOutputModel4.getFinalTime();
        double double6 = continuousOutputModel4.getInitialTime();
        double double7 = continuousOutputModel4.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel8 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double9 = continuousOutputModel8.getFinalTime();
        double double10 = continuousOutputModel8.getInitialTime();
        continuousOutputModel4.append(continuousOutputModel8);
        double double12 = continuousOutputModel4.getInitialTime();
        double double13 = continuousOutputModel4.getFinalTime();
        continuousOutputModel0.append(continuousOutputModel4);
        continuousOutputModel4.reset();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator16 = null;
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel4.handleStep(stepInterpolator16, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
    }

    @Test
    public void test01324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01324");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        continuousOutputModel0.reset();
        boolean boolean2 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        continuousOutputModel0.reset();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel5 = null;
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel0.append(continuousOutputModel5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
    }

    @Test
    public void test01325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01325");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double1 = continuousOutputModel0.getFinalTime();
        double double2 = continuousOutputModel0.getInitialTime();
        boolean boolean3 = continuousOutputModel0.requiresDenseOutput();
        double double4 = continuousOutputModel0.getInitialTime();
        double double5 = continuousOutputModel0.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel6 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean7 = continuousOutputModel6.requiresDenseOutput();
        boolean boolean8 = continuousOutputModel6.requiresDenseOutput();
        double double9 = continuousOutputModel6.getFinalTime();
        continuousOutputModel6.reset();
        boolean boolean11 = continuousOutputModel6.requiresDenseOutput();
        continuousOutputModel6.reset();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel13 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean14 = continuousOutputModel13.requiresDenseOutput();
        boolean boolean15 = continuousOutputModel13.requiresDenseOutput();
        double double16 = continuousOutputModel13.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel17 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean18 = continuousOutputModel17.requiresDenseOutput();
        continuousOutputModel13.append(continuousOutputModel17);
        boolean boolean20 = continuousOutputModel13.requiresDenseOutput();
        continuousOutputModel13.reset();
        continuousOutputModel6.append(continuousOutputModel13);
        boolean boolean23 = continuousOutputModel6.requiresDenseOutput();
        continuousOutputModel0.append(continuousOutputModel6);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray25 = continuousOutputModel6.getInterpolatedState();
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
    }

    @Test
    public void test01326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01326");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean1 = continuousOutputModel0.requiresDenseOutput();
        double double2 = continuousOutputModel0.getInitialTime();
        boolean boolean3 = continuousOutputModel0.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel4 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double5 = continuousOutputModel4.getFinalTime();
        double double6 = continuousOutputModel4.getInitialTime();
        boolean boolean7 = continuousOutputModel4.requiresDenseOutput();
        continuousOutputModel4.reset();
        boolean boolean9 = continuousOutputModel4.requiresDenseOutput();
        continuousOutputModel0.append(continuousOutputModel4);
        continuousOutputModel4.reset();
        continuousOutputModel4.reset();
        continuousOutputModel4.reset();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator14 = null;
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel4.handleStep(stepInterpolator14, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test01327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01327");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double1 = continuousOutputModel0.getFinalTime();
        double double2 = continuousOutputModel0.getInitialTime();
        double double3 = continuousOutputModel0.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel4 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double5 = continuousOutputModel4.getFinalTime();
        double double6 = continuousOutputModel4.getInitialTime();
        continuousOutputModel0.append(continuousOutputModel4);
        double double8 = continuousOutputModel0.getInitialTime();
        double double9 = continuousOutputModel0.getInitialTime();
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel0.setInterpolatedTime((double) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
    }

    @Test
    public void test01328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01328");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean1 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean2 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        boolean boolean4 = continuousOutputModel0.requiresDenseOutput();
        double double5 = continuousOutputModel0.getFinalTime();
        boolean boolean6 = continuousOutputModel0.requiresDenseOutput();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator7 = null;
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel0.handleStep(stepInterpolator7, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
    }

    @Test
    public void test01329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01329");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean1 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean2 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        continuousOutputModel0.reset();
        boolean boolean5 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean6 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel0.setInterpolatedTime((double) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
    }

    @Test
    public void test01330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01330");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double1 = continuousOutputModel0.getFinalTime();
        double double2 = continuousOutputModel0.getInitialTime();
        boolean boolean3 = continuousOutputModel0.requiresDenseOutput();
        double double4 = continuousOutputModel0.getInitialTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel5 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean6 = continuousOutputModel5.requiresDenseOutput();
        boolean boolean7 = continuousOutputModel5.requiresDenseOutput();
        continuousOutputModel5.reset();
        boolean boolean9 = continuousOutputModel5.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel10 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double11 = continuousOutputModel10.getFinalTime();
        double double12 = continuousOutputModel10.getInitialTime();
        boolean boolean13 = continuousOutputModel10.requiresDenseOutput();
        continuousOutputModel5.append(continuousOutputModel10);
        continuousOutputModel0.append(continuousOutputModel5);
        double double16 = continuousOutputModel5.getInitialTime();
        double double17 = continuousOutputModel5.getInitialTime();
        double double18 = continuousOutputModel5.getInitialTime();
        boolean boolean19 = continuousOutputModel5.requiresDenseOutput();
        // The following exception was thrown during execution in test generation
        try {
            double double20 = continuousOutputModel5.getInterpolatedTime();
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
    }

    @Test
    public void test01331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01331");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean1 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean2 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        boolean boolean4 = continuousOutputModel0.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel5 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double6 = continuousOutputModel5.getFinalTime();
        double double7 = continuousOutputModel5.getInitialTime();
        boolean boolean8 = continuousOutputModel5.requiresDenseOutput();
        continuousOutputModel0.append(continuousOutputModel5);
        boolean boolean10 = continuousOutputModel5.requiresDenseOutput();
        double double11 = continuousOutputModel5.getFinalTime();
        continuousOutputModel5.reset();
        double double13 = continuousOutputModel5.getInitialTime();
        double double14 = continuousOutputModel5.getFinalTime();
        continuousOutputModel5.reset();
        boolean boolean16 = continuousOutputModel5.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel17 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean18 = continuousOutputModel17.requiresDenseOutput();
        boolean boolean19 = continuousOutputModel17.requiresDenseOutput();
        continuousOutputModel17.reset();
        boolean boolean21 = continuousOutputModel17.requiresDenseOutput();
        continuousOutputModel17.reset();
        double double23 = continuousOutputModel17.getInitialTime();
        continuousOutputModel5.append(continuousOutputModel17);
        continuousOutputModel5.reset();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator26 = null;
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel5.handleStep(stepInterpolator26, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
    }

    @Test
    public void test01332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01332");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean1 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean2 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        boolean boolean4 = continuousOutputModel0.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel5 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double6 = continuousOutputModel5.getFinalTime();
        double double7 = continuousOutputModel5.getInitialTime();
        boolean boolean8 = continuousOutputModel5.requiresDenseOutput();
        continuousOutputModel0.append(continuousOutputModel5);
        continuousOutputModel5.reset();
        double double11 = continuousOutputModel5.getInitialTime();
        double double12 = continuousOutputModel5.getFinalTime();
        continuousOutputModel5.reset();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel14 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean15 = continuousOutputModel14.requiresDenseOutput();
        boolean boolean16 = continuousOutputModel14.requiresDenseOutput();
        continuousOutputModel14.reset();
        continuousOutputModel14.reset();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel19 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double20 = continuousOutputModel19.getFinalTime();
        double double21 = continuousOutputModel19.getInitialTime();
        boolean boolean22 = continuousOutputModel19.requiresDenseOutput();
        continuousOutputModel19.reset();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel24 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean25 = continuousOutputModel24.requiresDenseOutput();
        double double26 = continuousOutputModel24.getInitialTime();
        continuousOutputModel19.append(continuousOutputModel24);
        continuousOutputModel14.append(continuousOutputModel24);
        boolean boolean29 = continuousOutputModel14.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel30 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double31 = continuousOutputModel30.getFinalTime();
        double double32 = continuousOutputModel30.getInitialTime();
        double double33 = continuousOutputModel30.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel34 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double35 = continuousOutputModel34.getFinalTime();
        double double36 = continuousOutputModel34.getInitialTime();
        continuousOutputModel30.append(continuousOutputModel34);
        double double38 = continuousOutputModel30.getInitialTime();
        double double39 = continuousOutputModel30.getInitialTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel40 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double41 = continuousOutputModel40.getFinalTime();
        double double42 = continuousOutputModel40.getInitialTime();
        continuousOutputModel40.reset();
        double double44 = continuousOutputModel40.getInitialTime();
        continuousOutputModel30.append(continuousOutputModel40);
        continuousOutputModel14.append(continuousOutputModel30);
        continuousOutputModel5.append(continuousOutputModel14);
        boolean boolean48 = continuousOutputModel14.requiresDenseOutput();
        // The following exception was thrown during execution in test generation
        try {
            double double49 = continuousOutputModel14.getInterpolatedTime();
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
    }

    @Test
    public void test01333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01333");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean1 = continuousOutputModel0.requiresDenseOutput();
        double double2 = continuousOutputModel0.getInitialTime();
        double double3 = continuousOutputModel0.getFinalTime();
        boolean boolean4 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        double double6 = continuousOutputModel0.getFinalTime();
        continuousOutputModel0.reset();
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray8 = continuousOutputModel0.getInterpolatedState();
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
    }

    @Test
    public void test01334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01334");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean1 = continuousOutputModel0.requiresDenseOutput();
        double double2 = continuousOutputModel0.getInitialTime();
        boolean boolean3 = continuousOutputModel0.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel4 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean5 = continuousOutputModel4.requiresDenseOutput();
        boolean boolean6 = continuousOutputModel4.requiresDenseOutput();
        continuousOutputModel0.append(continuousOutputModel4);
        boolean boolean8 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray10 = continuousOutputModel0.getInterpolatedState();
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void test01335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01335");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel1 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean2 = continuousOutputModel1.requiresDenseOutput();
        boolean boolean3 = continuousOutputModel1.requiresDenseOutput();
        double double4 = continuousOutputModel1.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel5 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean6 = continuousOutputModel5.requiresDenseOutput();
        continuousOutputModel1.append(continuousOutputModel5);
        continuousOutputModel0.append(continuousOutputModel5);
        boolean boolean9 = continuousOutputModel5.requiresDenseOutput();
        double double10 = continuousOutputModel5.getInitialTime();
        continuousOutputModel5.reset();
        continuousOutputModel5.reset();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel13 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean14 = continuousOutputModel13.requiresDenseOutput();
        double double15 = continuousOutputModel13.getInitialTime();
        double double16 = continuousOutputModel13.getFinalTime();
        boolean boolean17 = continuousOutputModel13.requiresDenseOutput();
        continuousOutputModel13.reset();
        double double19 = continuousOutputModel13.getFinalTime();
        double double20 = continuousOutputModel13.getFinalTime();
        continuousOutputModel5.append(continuousOutputModel13);
        continuousOutputModel13.reset();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator23 = null;
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel13.handleStep(stepInterpolator23, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue(Double.isNaN(double20));
    }

    @Test
    public void test01336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01336");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean1 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean2 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        continuousOutputModel0.reset();
        boolean boolean5 = continuousOutputModel0.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel6 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double7 = continuousOutputModel6.getFinalTime();
        double double8 = continuousOutputModel6.getInitialTime();
        double double9 = continuousOutputModel6.getFinalTime();
        boolean boolean10 = continuousOutputModel6.requiresDenseOutput();
        continuousOutputModel0.append(continuousOutputModel6);
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel12 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean13 = continuousOutputModel12.requiresDenseOutput();
        boolean boolean14 = continuousOutputModel12.requiresDenseOutput();
        continuousOutputModel12.reset();
        continuousOutputModel12.reset();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel17 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double18 = continuousOutputModel17.getFinalTime();
        double double19 = continuousOutputModel17.getInitialTime();
        boolean boolean20 = continuousOutputModel17.requiresDenseOutput();
        continuousOutputModel17.reset();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel22 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean23 = continuousOutputModel22.requiresDenseOutput();
        double double24 = continuousOutputModel22.getInitialTime();
        continuousOutputModel17.append(continuousOutputModel22);
        continuousOutputModel12.append(continuousOutputModel22);
        continuousOutputModel12.reset();
        boolean boolean28 = continuousOutputModel12.requiresDenseOutput();
        double double29 = continuousOutputModel12.getFinalTime();
        continuousOutputModel0.append(continuousOutputModel12);
        continuousOutputModel0.reset();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel32 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean33 = continuousOutputModel32.requiresDenseOutput();
        boolean boolean34 = continuousOutputModel32.requiresDenseOutput();
        continuousOutputModel32.reset();
        boolean boolean36 = continuousOutputModel32.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel37 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double38 = continuousOutputModel37.getFinalTime();
        double double39 = continuousOutputModel37.getInitialTime();
        boolean boolean40 = continuousOutputModel37.requiresDenseOutput();
        continuousOutputModel32.append(continuousOutputModel37);
        continuousOutputModel37.reset();
        double double43 = continuousOutputModel37.getInitialTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel44 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean45 = continuousOutputModel44.requiresDenseOutput();
        boolean boolean46 = continuousOutputModel44.requiresDenseOutput();
        continuousOutputModel44.reset();
        boolean boolean48 = continuousOutputModel44.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel49 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double50 = continuousOutputModel49.getFinalTime();
        double double51 = continuousOutputModel49.getInitialTime();
        boolean boolean52 = continuousOutputModel49.requiresDenseOutput();
        continuousOutputModel44.append(continuousOutputModel49);
        boolean boolean54 = continuousOutputModel49.requiresDenseOutput();
        double double55 = continuousOutputModel49.getFinalTime();
        continuousOutputModel49.reset();
        continuousOutputModel37.append(continuousOutputModel49);
        continuousOutputModel0.append(continuousOutputModel37);
        org.apache.commons.math.ode.StepInterpolator stepInterpolator59 = null;
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel37.handleStep(stepInterpolator59, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double50));
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double55));
    }

    @Test
    public void test01337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01337");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean1 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean2 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        boolean boolean4 = continuousOutputModel0.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel5 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double6 = continuousOutputModel5.getFinalTime();
        double double7 = continuousOutputModel5.getInitialTime();
        boolean boolean8 = continuousOutputModel5.requiresDenseOutput();
        continuousOutputModel0.append(continuousOutputModel5);
        double double10 = continuousOutputModel5.getInitialTime();
        boolean boolean11 = continuousOutputModel5.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel12 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double13 = continuousOutputModel12.getFinalTime();
        double double14 = continuousOutputModel12.getInitialTime();
        double double15 = continuousOutputModel12.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel16 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double17 = continuousOutputModel16.getFinalTime();
        double double18 = continuousOutputModel16.getInitialTime();
        continuousOutputModel12.append(continuousOutputModel16);
        double double20 = continuousOutputModel12.getFinalTime();
        boolean boolean21 = continuousOutputModel12.requiresDenseOutput();
        boolean boolean22 = continuousOutputModel12.requiresDenseOutput();
        double double23 = continuousOutputModel12.getFinalTime();
        continuousOutputModel5.append(continuousOutputModel12);
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel5.setInterpolatedTime((-1.0d));
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
    }

    @Test
    public void test01338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01338");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double1 = continuousOutputModel0.getFinalTime();
        double double2 = continuousOutputModel0.getInitialTime();
        double double3 = continuousOutputModel0.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel4 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double5 = continuousOutputModel4.getFinalTime();
        double double6 = continuousOutputModel4.getInitialTime();
        continuousOutputModel0.append(continuousOutputModel4);
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel8 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean9 = continuousOutputModel8.requiresDenseOutput();
        double double10 = continuousOutputModel8.getInitialTime();
        double double11 = continuousOutputModel8.getInitialTime();
        continuousOutputModel0.append(continuousOutputModel8);
        boolean boolean13 = continuousOutputModel0.requiresDenseOutput();
        // The following exception was thrown during execution in test generation
        try {
            double double14 = continuousOutputModel0.getInterpolatedTime();
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test01339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01339");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean1 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean2 = continuousOutputModel0.requiresDenseOutput();
        double double3 = continuousOutputModel0.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel4 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean5 = continuousOutputModel4.requiresDenseOutput();
        continuousOutputModel0.append(continuousOutputModel4);
        continuousOutputModel0.reset();
        boolean boolean8 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        boolean boolean10 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel0.setInterpolatedTime(0.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test01340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01340");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double1 = continuousOutputModel0.getFinalTime();
        double double2 = continuousOutputModel0.getInitialTime();
        boolean boolean3 = continuousOutputModel0.requiresDenseOutput();
        double double4 = continuousOutputModel0.getInitialTime();
        double double5 = continuousOutputModel0.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel6 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean7 = continuousOutputModel6.requiresDenseOutput();
        boolean boolean8 = continuousOutputModel6.requiresDenseOutput();
        double double9 = continuousOutputModel6.getFinalTime();
        continuousOutputModel6.reset();
        boolean boolean11 = continuousOutputModel6.requiresDenseOutput();
        continuousOutputModel6.reset();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel13 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean14 = continuousOutputModel13.requiresDenseOutput();
        boolean boolean15 = continuousOutputModel13.requiresDenseOutput();
        double double16 = continuousOutputModel13.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel17 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean18 = continuousOutputModel17.requiresDenseOutput();
        continuousOutputModel13.append(continuousOutputModel17);
        boolean boolean20 = continuousOutputModel13.requiresDenseOutput();
        continuousOutputModel13.reset();
        continuousOutputModel6.append(continuousOutputModel13);
        boolean boolean23 = continuousOutputModel6.requiresDenseOutput();
        continuousOutputModel0.append(continuousOutputModel6);
        double double25 = continuousOutputModel6.getFinalTime();
        double double26 = continuousOutputModel6.getFinalTime();
        continuousOutputModel6.reset();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator28 = null;
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel6.handleStep(stepInterpolator28, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue(Double.isNaN(double26));
    }

    @Test
    public void test01341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01341");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean1 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean2 = continuousOutputModel0.requiresDenseOutput();
        double double3 = continuousOutputModel0.getFinalTime();
        continuousOutputModel0.reset();
        boolean boolean5 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel7 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean8 = continuousOutputModel7.requiresDenseOutput();
        boolean boolean9 = continuousOutputModel7.requiresDenseOutput();
        double double10 = continuousOutputModel7.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel11 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean12 = continuousOutputModel11.requiresDenseOutput();
        continuousOutputModel7.append(continuousOutputModel11);
        boolean boolean14 = continuousOutputModel7.requiresDenseOutput();
        continuousOutputModel7.reset();
        continuousOutputModel0.append(continuousOutputModel7);
        continuousOutputModel7.reset();
        continuousOutputModel7.reset();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel19 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double20 = continuousOutputModel19.getFinalTime();
        double double21 = continuousOutputModel19.getInitialTime();
        boolean boolean22 = continuousOutputModel19.requiresDenseOutput();
        double double23 = continuousOutputModel19.getInitialTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel24 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean25 = continuousOutputModel24.requiresDenseOutput();
        boolean boolean26 = continuousOutputModel24.requiresDenseOutput();
        continuousOutputModel24.reset();
        boolean boolean28 = continuousOutputModel24.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel29 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double30 = continuousOutputModel29.getFinalTime();
        double double31 = continuousOutputModel29.getInitialTime();
        boolean boolean32 = continuousOutputModel29.requiresDenseOutput();
        continuousOutputModel24.append(continuousOutputModel29);
        continuousOutputModel19.append(continuousOutputModel24);
        continuousOutputModel24.reset();
        continuousOutputModel24.reset();
        continuousOutputModel24.reset();
        boolean boolean38 = continuousOutputModel24.requiresDenseOutput();
        continuousOutputModel7.append(continuousOutputModel24);
        double double40 = continuousOutputModel24.getFinalTime();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator41 = null;
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel24.handleStep(stepInterpolator41, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double40));
    }

    @Test
    public void test01342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01342");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean1 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean2 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        boolean boolean4 = continuousOutputModel0.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel5 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double6 = continuousOutputModel5.getFinalTime();
        double double7 = continuousOutputModel5.getInitialTime();
        boolean boolean8 = continuousOutputModel5.requiresDenseOutput();
        continuousOutputModel0.append(continuousOutputModel5);
        double double10 = continuousOutputModel5.getInitialTime();
        continuousOutputModel5.reset();
        double double12 = continuousOutputModel5.getInitialTime();
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel5.setInterpolatedTime((double) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
    }

    @Test
    public void test01343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01343");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double1 = continuousOutputModel0.getFinalTime();
        continuousOutputModel0.reset();
        continuousOutputModel0.reset();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel4 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double5 = continuousOutputModel4.getFinalTime();
        double double6 = continuousOutputModel4.getInitialTime();
        double double7 = continuousOutputModel4.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel8 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double9 = continuousOutputModel8.getFinalTime();
        double double10 = continuousOutputModel8.getInitialTime();
        continuousOutputModel4.append(continuousOutputModel8);
        double double12 = continuousOutputModel4.getInitialTime();
        double double13 = continuousOutputModel4.getFinalTime();
        continuousOutputModel0.append(continuousOutputModel4);
        // The following exception was thrown during execution in test generation
        try {
            double double15 = continuousOutputModel4.getInterpolatedTime();
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
    }

    @Test
    public void test01344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01344");
        java.io.IOException iOException5 = new java.io.IOException("hi!");
        org.apache.commons.math.ode.DerivativeException derivativeException6 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) iOException5);
        org.apache.commons.math.MathException mathException7 = new org.apache.commons.math.MathException("hi!", (java.lang.Throwable) iOException5);
        java.lang.Object[] objArray8 = mathException7.getArguments();
        org.apache.commons.math.MathException mathException9 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: ", objArray8);
        org.apache.commons.math.MathException mathException10 = new org.apache.commons.math.MathException("hi!", objArray8);
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel12 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double13 = continuousOutputModel12.getFinalTime();
        double double14 = continuousOutputModel12.getInitialTime();
        boolean boolean15 = continuousOutputModel12.requiresDenseOutput();
        double double16 = continuousOutputModel12.getInitialTime();
        java.io.IOException iOException19 = new java.io.IOException("hi!");
        org.apache.commons.math.ode.DerivativeException derivativeException20 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) iOException19);
        org.apache.commons.math.MathException mathException21 = new org.apache.commons.math.MathException("hi!", (java.lang.Throwable) iOException19);
        java.io.IOException iOException24 = new java.io.IOException("hi!");
        java.io.IOException iOException25 = new java.io.IOException("", (java.lang.Throwable) iOException24);
        org.apache.commons.math.ode.DerivativeException derivativeException26 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) iOException24);
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel28 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double29 = continuousOutputModel28.getFinalTime();
        double double30 = continuousOutputModel28.getInitialTime();
        java.lang.Object[] objArray31 = new java.lang.Object[] { double16, mathException21, iOException24, false, continuousOutputModel28 };
        java.lang.String[] strArray40 = new java.lang.String[] { "hi!", "org.apache.commons.math.MathException: ", "hi!", "org.apache.commons.math.MathException: ", "", "" };
        org.apache.commons.math.ode.DerivativeException derivativeException41 = new org.apache.commons.math.ode.DerivativeException("", strArray40);
        java.io.IOException iOException45 = new java.io.IOException("hi!");
        org.apache.commons.math.ode.DerivativeException derivativeException46 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) iOException45);
        org.apache.commons.math.MathException mathException47 = new org.apache.commons.math.MathException("hi!", (java.lang.Throwable) iOException45);
        java.lang.Object[] objArray48 = mathException47.getArguments();
        org.apache.commons.math.MathException mathException49 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: ", (java.lang.Throwable) mathException47);
        org.apache.commons.math.MathException mathException50 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: hi!", (java.lang.Object[]) strArray40, (java.lang.Throwable) mathException47);
        org.apache.commons.math.MathException mathException51 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: hi!", objArray31, (java.lang.Throwable) mathException50);
        org.apache.commons.math.MathException mathException52 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: ", objArray8, (java.lang.Throwable) mathException51);
        java.io.IOException iOException53 = new java.io.IOException((java.lang.Throwable) mathException51);
        org.apache.commons.math.MathException mathException54 = new org.apache.commons.math.MathException((java.lang.Throwable) iOException53);
        org.apache.commons.math.MathException mathException55 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException54);
        java.lang.Object[] objArray56 = mathException55.getArguments();
        java.io.IOException iOException57 = new java.io.IOException((java.lang.Throwable) mathException55);
        org.apache.commons.math.MathException mathException58 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException55);
        java.lang.String str59 = mathException55.toString();
        org.junit.Assert.assertNotNull(objArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray8), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray8), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray48), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray48), "[]");
        org.junit.Assert.assertNotNull(objArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray56), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray56), "[]");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: hi!" + "'", str59, "org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: hi!");
    }

    @Test
    public void test01345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01345");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double1 = continuousOutputModel0.getFinalTime();
        double double2 = continuousOutputModel0.getInitialTime();
        boolean boolean3 = continuousOutputModel0.requiresDenseOutput();
        double double4 = continuousOutputModel0.getInitialTime();
        continuousOutputModel0.reset();
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel0.setInterpolatedTime((double) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
    }

    @Test
    public void test01346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01346");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean1 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean2 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        boolean boolean4 = continuousOutputModel0.requiresDenseOutput();
        double double5 = continuousOutputModel0.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel6 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double7 = continuousOutputModel6.getFinalTime();
        double double8 = continuousOutputModel6.getInitialTime();
        boolean boolean9 = continuousOutputModel6.requiresDenseOutput();
        continuousOutputModel6.reset();
        double double11 = continuousOutputModel6.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel12 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double13 = continuousOutputModel12.getFinalTime();
        double double14 = continuousOutputModel12.getInitialTime();
        continuousOutputModel6.append(continuousOutputModel12);
        continuousOutputModel0.append(continuousOutputModel12);
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel17 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean18 = continuousOutputModel17.requiresDenseOutput();
        double double19 = continuousOutputModel17.getInitialTime();
        boolean boolean20 = continuousOutputModel17.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel21 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double22 = continuousOutputModel21.getFinalTime();
        double double23 = continuousOutputModel21.getInitialTime();
        boolean boolean24 = continuousOutputModel21.requiresDenseOutput();
        continuousOutputModel21.reset();
        boolean boolean26 = continuousOutputModel21.requiresDenseOutput();
        continuousOutputModel17.append(continuousOutputModel21);
        continuousOutputModel21.reset();
        double double29 = continuousOutputModel21.getInitialTime();
        continuousOutputModel21.reset();
        boolean boolean31 = continuousOutputModel21.requiresDenseOutput();
        continuousOutputModel12.append(continuousOutputModel21);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray33 = continuousOutputModel12.getInterpolatedState();
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
    }

    @Test
    public void test01347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01347");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean1 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        continuousOutputModel0.reset();
        continuousOutputModel0.reset();
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray5 = continuousOutputModel0.getInterpolatedState();
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
    }

    @Test
    public void test01348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01348");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean1 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean2 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        boolean boolean4 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel6 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double7 = continuousOutputModel6.getFinalTime();
        continuousOutputModel6.reset();
        continuousOutputModel0.append(continuousOutputModel6);
        double double10 = continuousOutputModel0.getInitialTime();
        boolean boolean11 = continuousOutputModel0.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel12 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double13 = continuousOutputModel12.getFinalTime();
        double double14 = continuousOutputModel12.getInitialTime();
        double double15 = continuousOutputModel12.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel16 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double17 = continuousOutputModel16.getFinalTime();
        double double18 = continuousOutputModel16.getInitialTime();
        continuousOutputModel12.append(continuousOutputModel16);
        double double20 = continuousOutputModel12.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel21 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double22 = continuousOutputModel21.getFinalTime();
        double double23 = continuousOutputModel21.getInitialTime();
        boolean boolean24 = continuousOutputModel21.requiresDenseOutput();
        double double25 = continuousOutputModel21.getInitialTime();
        continuousOutputModel21.reset();
        boolean boolean27 = continuousOutputModel21.requiresDenseOutput();
        continuousOutputModel12.append(continuousOutputModel21);
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel29 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean30 = continuousOutputModel29.requiresDenseOutput();
        double double31 = continuousOutputModel29.getInitialTime();
        boolean boolean32 = continuousOutputModel29.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel33 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double34 = continuousOutputModel33.getFinalTime();
        double double35 = continuousOutputModel33.getInitialTime();
        boolean boolean36 = continuousOutputModel33.requiresDenseOutput();
        continuousOutputModel33.reset();
        boolean boolean38 = continuousOutputModel33.requiresDenseOutput();
        continuousOutputModel29.append(continuousOutputModel33);
        continuousOutputModel29.reset();
        continuousOutputModel21.append(continuousOutputModel29);
        continuousOutputModel0.append(continuousOutputModel21);
        boolean boolean43 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator45 = null;
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel0.handleStep(stepInterpolator45, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
    }

    @Test
    public void test01349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01349");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean1 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean2 = continuousOutputModel0.requiresDenseOutput();
        double double3 = continuousOutputModel0.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel4 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean5 = continuousOutputModel4.requiresDenseOutput();
        continuousOutputModel0.append(continuousOutputModel4);
        continuousOutputModel0.reset();
        boolean boolean8 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean9 = continuousOutputModel0.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel10 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean11 = continuousOutputModel10.requiresDenseOutput();
        boolean boolean12 = continuousOutputModel10.requiresDenseOutput();
        continuousOutputModel10.reset();
        boolean boolean14 = continuousOutputModel10.requiresDenseOutput();
        double double15 = continuousOutputModel10.getFinalTime();
        boolean boolean16 = continuousOutputModel10.requiresDenseOutput();
        continuousOutputModel0.append(continuousOutputModel10);
        double double18 = continuousOutputModel10.getFinalTime();
        // The following exception was thrown during execution in test generation
        try {
            double double19 = continuousOutputModel10.getInterpolatedTime();
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
    }

    @Test
    public void test01350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01350");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean1 = continuousOutputModel0.requiresDenseOutput();
        double double2 = continuousOutputModel0.getInitialTime();
        double double3 = continuousOutputModel0.getInitialTime();
        boolean boolean4 = continuousOutputModel0.requiresDenseOutput();
        // The following exception was thrown during execution in test generation
        try {
            double double5 = continuousOutputModel0.getInterpolatedTime();
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
    }

    @Test
    public void test01351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01351");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double1 = continuousOutputModel0.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel2 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean3 = continuousOutputModel2.requiresDenseOutput();
        double double4 = continuousOutputModel2.getInitialTime();
        boolean boolean5 = continuousOutputModel2.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel6 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double7 = continuousOutputModel6.getFinalTime();
        double double8 = continuousOutputModel6.getInitialTime();
        boolean boolean9 = continuousOutputModel6.requiresDenseOutput();
        continuousOutputModel6.reset();
        boolean boolean11 = continuousOutputModel6.requiresDenseOutput();
        continuousOutputModel2.append(continuousOutputModel6);
        continuousOutputModel0.append(continuousOutputModel2);
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel14 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean15 = continuousOutputModel14.requiresDenseOutput();
        boolean boolean16 = continuousOutputModel14.requiresDenseOutput();
        continuousOutputModel14.reset();
        boolean boolean18 = continuousOutputModel14.requiresDenseOutput();
        boolean boolean19 = continuousOutputModel14.requiresDenseOutput();
        continuousOutputModel0.append(continuousOutputModel14);
        continuousOutputModel14.reset();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel22 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double23 = continuousOutputModel22.getFinalTime();
        double double24 = continuousOutputModel22.getInitialTime();
        boolean boolean25 = continuousOutputModel22.requiresDenseOutput();
        continuousOutputModel22.reset();
        double double27 = continuousOutputModel22.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel28 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double29 = continuousOutputModel28.getFinalTime();
        double double30 = continuousOutputModel28.getInitialTime();
        continuousOutputModel22.append(continuousOutputModel28);
        continuousOutputModel14.append(continuousOutputModel22);
        continuousOutputModel14.reset();
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel14.setInterpolatedTime((-1.0d));
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue(Double.isNaN(double30));
    }

    @Test
    public void test01352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01352");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double1 = continuousOutputModel0.getFinalTime();
        double double2 = continuousOutputModel0.getInitialTime();
        double double3 = continuousOutputModel0.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel4 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double5 = continuousOutputModel4.getFinalTime();
        double double6 = continuousOutputModel4.getInitialTime();
        continuousOutputModel0.append(continuousOutputModel4);
        double double8 = continuousOutputModel0.getInitialTime();
        double double9 = continuousOutputModel0.getInitialTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel10 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double11 = continuousOutputModel10.getFinalTime();
        double double12 = continuousOutputModel10.getInitialTime();
        continuousOutputModel10.reset();
        double double14 = continuousOutputModel10.getInitialTime();
        continuousOutputModel0.append(continuousOutputModel10);
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel16 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean17 = continuousOutputModel16.requiresDenseOutput();
        boolean boolean18 = continuousOutputModel16.requiresDenseOutput();
        continuousOutputModel16.reset();
        boolean boolean20 = continuousOutputModel16.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel21 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean22 = continuousOutputModel21.requiresDenseOutput();
        double double23 = continuousOutputModel21.getInitialTime();
        boolean boolean24 = continuousOutputModel21.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel25 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean26 = continuousOutputModel25.requiresDenseOutput();
        boolean boolean27 = continuousOutputModel25.requiresDenseOutput();
        continuousOutputModel21.append(continuousOutputModel25);
        continuousOutputModel16.append(continuousOutputModel25);
        continuousOutputModel10.append(continuousOutputModel25);
        continuousOutputModel25.reset();
        continuousOutputModel25.reset();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator33 = null;
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel25.handleStep(stepInterpolator33, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
    }

    @Test
    public void test01353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01353");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double1 = continuousOutputModel0.getFinalTime();
        double double2 = continuousOutputModel0.getInitialTime();
        boolean boolean3 = continuousOutputModel0.requiresDenseOutput();
        double double4 = continuousOutputModel0.getInitialTime();
        continuousOutputModel0.reset();
        boolean boolean6 = continuousOutputModel0.requiresDenseOutput();
        double double7 = continuousOutputModel0.getInitialTime();
        boolean boolean8 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean9 = continuousOutputModel0.requiresDenseOutput();
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray10 = continuousOutputModel0.getInterpolatedState();
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test01354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01354");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean1 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean2 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        continuousOutputModel0.reset();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel5 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double6 = continuousOutputModel5.getFinalTime();
        double double7 = continuousOutputModel5.getInitialTime();
        boolean boolean8 = continuousOutputModel5.requiresDenseOutput();
        continuousOutputModel5.reset();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel10 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean11 = continuousOutputModel10.requiresDenseOutput();
        double double12 = continuousOutputModel10.getInitialTime();
        continuousOutputModel5.append(continuousOutputModel10);
        continuousOutputModel0.append(continuousOutputModel10);
        continuousOutputModel0.reset();
        double double16 = continuousOutputModel0.getFinalTime();
        continuousOutputModel0.reset();
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel0.setInterpolatedTime((double) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
    }

    @Test
    public void test01355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01355");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double1 = continuousOutputModel0.getFinalTime();
        double double2 = continuousOutputModel0.getInitialTime();
        double double3 = continuousOutputModel0.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel4 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double5 = continuousOutputModel4.getFinalTime();
        double double6 = continuousOutputModel4.getInitialTime();
        continuousOutputModel0.append(continuousOutputModel4);
        double double8 = continuousOutputModel0.getInitialTime();
        double double9 = continuousOutputModel0.getInitialTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel10 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double11 = continuousOutputModel10.getFinalTime();
        double double12 = continuousOutputModel10.getInitialTime();
        continuousOutputModel10.reset();
        double double14 = continuousOutputModel10.getInitialTime();
        continuousOutputModel0.append(continuousOutputModel10);
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel16 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean17 = continuousOutputModel16.requiresDenseOutput();
        boolean boolean18 = continuousOutputModel16.requiresDenseOutput();
        continuousOutputModel16.reset();
        boolean boolean20 = continuousOutputModel16.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel21 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean22 = continuousOutputModel21.requiresDenseOutput();
        double double23 = continuousOutputModel21.getInitialTime();
        boolean boolean24 = continuousOutputModel21.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel25 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean26 = continuousOutputModel25.requiresDenseOutput();
        boolean boolean27 = continuousOutputModel25.requiresDenseOutput();
        continuousOutputModel21.append(continuousOutputModel25);
        continuousOutputModel16.append(continuousOutputModel25);
        continuousOutputModel10.append(continuousOutputModel25);
        continuousOutputModel25.reset();
        continuousOutputModel25.reset();
        boolean boolean33 = continuousOutputModel25.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel34 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean35 = continuousOutputModel34.requiresDenseOutput();
        boolean boolean36 = continuousOutputModel34.requiresDenseOutput();
        continuousOutputModel34.reset();
        continuousOutputModel34.reset();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel39 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double40 = continuousOutputModel39.getFinalTime();
        double double41 = continuousOutputModel39.getInitialTime();
        boolean boolean42 = continuousOutputModel39.requiresDenseOutput();
        continuousOutputModel39.reset();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel44 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean45 = continuousOutputModel44.requiresDenseOutput();
        double double46 = continuousOutputModel44.getInitialTime();
        continuousOutputModel39.append(continuousOutputModel44);
        continuousOutputModel34.append(continuousOutputModel44);
        continuousOutputModel25.append(continuousOutputModel44);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray50 = continuousOutputModel44.getInterpolatedState();
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double46));
    }

    @Test
    public void test01356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01356");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean1 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean2 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        boolean boolean4 = continuousOutputModel0.requiresDenseOutput();
        double double5 = continuousOutputModel0.getFinalTime();
        boolean boolean6 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        double double8 = continuousOutputModel0.getFinalTime();
        double double9 = continuousOutputModel0.getFinalTime();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator10 = null;
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel0.handleStep(stepInterpolator10, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
    }

    @Test
    public void test01357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01357");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double1 = continuousOutputModel0.getFinalTime();
        double double2 = continuousOutputModel0.getInitialTime();
        boolean boolean3 = continuousOutputModel0.requiresDenseOutput();
        double double4 = continuousOutputModel0.getInitialTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel5 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean6 = continuousOutputModel5.requiresDenseOutput();
        boolean boolean7 = continuousOutputModel5.requiresDenseOutput();
        continuousOutputModel5.reset();
        boolean boolean9 = continuousOutputModel5.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel10 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double11 = continuousOutputModel10.getFinalTime();
        double double12 = continuousOutputModel10.getInitialTime();
        boolean boolean13 = continuousOutputModel10.requiresDenseOutput();
        continuousOutputModel5.append(continuousOutputModel10);
        continuousOutputModel0.append(continuousOutputModel5);
        boolean boolean16 = continuousOutputModel5.requiresDenseOutput();
        java.lang.Class<?> wildcardClass17 = continuousOutputModel5.getClass();
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test01358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01358");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean1 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean2 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        boolean boolean4 = continuousOutputModel0.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel5 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double6 = continuousOutputModel5.getFinalTime();
        double double7 = continuousOutputModel5.getInitialTime();
        boolean boolean8 = continuousOutputModel5.requiresDenseOutput();
        continuousOutputModel0.append(continuousOutputModel5);
        double double10 = continuousOutputModel5.getFinalTime();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator11 = null;
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel5.handleStep(stepInterpolator11, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
    }

    @Test
    public void test01359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01359");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double1 = continuousOutputModel0.getFinalTime();
        double double2 = continuousOutputModel0.getInitialTime();
        boolean boolean3 = continuousOutputModel0.requiresDenseOutput();
        double double4 = continuousOutputModel0.getInitialTime();
        double double5 = continuousOutputModel0.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel6 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean7 = continuousOutputModel6.requiresDenseOutput();
        boolean boolean8 = continuousOutputModel6.requiresDenseOutput();
        double double9 = continuousOutputModel6.getFinalTime();
        continuousOutputModel6.reset();
        boolean boolean11 = continuousOutputModel6.requiresDenseOutput();
        continuousOutputModel6.reset();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel13 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean14 = continuousOutputModel13.requiresDenseOutput();
        boolean boolean15 = continuousOutputModel13.requiresDenseOutput();
        double double16 = continuousOutputModel13.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel17 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean18 = continuousOutputModel17.requiresDenseOutput();
        continuousOutputModel13.append(continuousOutputModel17);
        boolean boolean20 = continuousOutputModel13.requiresDenseOutput();
        continuousOutputModel13.reset();
        continuousOutputModel6.append(continuousOutputModel13);
        boolean boolean23 = continuousOutputModel6.requiresDenseOutput();
        continuousOutputModel0.append(continuousOutputModel6);
        boolean boolean25 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator27 = null;
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel0.handleStep(stepInterpolator27, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
    }

    @Test
    public void test01360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01360");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double1 = continuousOutputModel0.getFinalTime();
        double double2 = continuousOutputModel0.getInitialTime();
        double double3 = continuousOutputModel0.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel4 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double5 = continuousOutputModel4.getFinalTime();
        double double6 = continuousOutputModel4.getInitialTime();
        continuousOutputModel0.append(continuousOutputModel4);
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel8 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean9 = continuousOutputModel8.requiresDenseOutput();
        double double10 = continuousOutputModel8.getInitialTime();
        double double11 = continuousOutputModel8.getInitialTime();
        continuousOutputModel0.append(continuousOutputModel8);
        boolean boolean13 = continuousOutputModel0.requiresDenseOutput();
        double double14 = continuousOutputModel0.getInitialTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel15 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean16 = continuousOutputModel15.requiresDenseOutput();
        boolean boolean17 = continuousOutputModel15.requiresDenseOutput();
        double double18 = continuousOutputModel15.getFinalTime();
        continuousOutputModel15.reset();
        boolean boolean20 = continuousOutputModel15.requiresDenseOutput();
        continuousOutputModel15.reset();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel22 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean23 = continuousOutputModel22.requiresDenseOutput();
        boolean boolean24 = continuousOutputModel22.requiresDenseOutput();
        double double25 = continuousOutputModel22.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel26 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean27 = continuousOutputModel26.requiresDenseOutput();
        continuousOutputModel22.append(continuousOutputModel26);
        boolean boolean29 = continuousOutputModel22.requiresDenseOutput();
        continuousOutputModel22.reset();
        continuousOutputModel15.append(continuousOutputModel22);
        boolean boolean32 = continuousOutputModel15.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel33 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double34 = continuousOutputModel33.getFinalTime();
        double double35 = continuousOutputModel33.getInitialTime();
        boolean boolean36 = continuousOutputModel33.requiresDenseOutput();
        continuousOutputModel15.append(continuousOutputModel33);
        continuousOutputModel0.append(continuousOutputModel33);
        double double39 = continuousOutputModel33.getInitialTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel40 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean41 = continuousOutputModel40.requiresDenseOutput();
        double double42 = continuousOutputModel40.getInitialTime();
        double double43 = continuousOutputModel40.getFinalTime();
        continuousOutputModel33.append(continuousOutputModel40);
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel40.setInterpolatedTime((double) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertTrue(Double.isNaN(double43));
    }

    @Test
    public void test01361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01361");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double1 = continuousOutputModel0.getFinalTime();
        double double2 = continuousOutputModel0.getInitialTime();
        double double3 = continuousOutputModel0.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel4 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double5 = continuousOutputModel4.getFinalTime();
        double double6 = continuousOutputModel4.getInitialTime();
        continuousOutputModel0.append(continuousOutputModel4);
        continuousOutputModel4.reset();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel9 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double10 = continuousOutputModel9.getFinalTime();
        double double11 = continuousOutputModel9.getInitialTime();
        boolean boolean12 = continuousOutputModel9.requiresDenseOutput();
        double double13 = continuousOutputModel9.getInitialTime();
        continuousOutputModel9.reset();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel15 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean16 = continuousOutputModel15.requiresDenseOutput();
        double double17 = continuousOutputModel15.getInitialTime();
        boolean boolean18 = continuousOutputModel15.requiresDenseOutput();
        continuousOutputModel9.append(continuousOutputModel15);
        double double20 = continuousOutputModel9.getFinalTime();
        continuousOutputModel4.append(continuousOutputModel9);
        org.apache.commons.math.ode.StepInterpolator stepInterpolator22 = null;
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel4.handleStep(stepInterpolator22, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
    }

    @Test
    public void test01362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01362");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double1 = continuousOutputModel0.getFinalTime();
        double double2 = continuousOutputModel0.getInitialTime();
        double double3 = continuousOutputModel0.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel4 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double5 = continuousOutputModel4.getFinalTime();
        double double6 = continuousOutputModel4.getInitialTime();
        continuousOutputModel0.append(continuousOutputModel4);
        double double8 = continuousOutputModel0.getInitialTime();
        double double9 = continuousOutputModel0.getInitialTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel10 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double11 = continuousOutputModel10.getFinalTime();
        double double12 = continuousOutputModel10.getInitialTime();
        continuousOutputModel10.reset();
        double double14 = continuousOutputModel10.getInitialTime();
        continuousOutputModel0.append(continuousOutputModel10);
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel16 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double17 = continuousOutputModel16.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel18 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean19 = continuousOutputModel18.requiresDenseOutput();
        double double20 = continuousOutputModel18.getInitialTime();
        boolean boolean21 = continuousOutputModel18.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel22 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double23 = continuousOutputModel22.getFinalTime();
        double double24 = continuousOutputModel22.getInitialTime();
        boolean boolean25 = continuousOutputModel22.requiresDenseOutput();
        continuousOutputModel22.reset();
        boolean boolean27 = continuousOutputModel22.requiresDenseOutput();
        continuousOutputModel18.append(continuousOutputModel22);
        continuousOutputModel16.append(continuousOutputModel18);
        continuousOutputModel0.append(continuousOutputModel18);
        org.apache.commons.math.ode.StepInterpolator stepInterpolator31 = null;
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel18.handleStep(stepInterpolator31, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
    }

    @Test
    public void test01363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01363");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean1 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean2 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        continuousOutputModel0.reset();
        boolean boolean5 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean6 = continuousOutputModel0.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel7 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean8 = continuousOutputModel7.requiresDenseOutput();
        boolean boolean9 = continuousOutputModel7.requiresDenseOutput();
        continuousOutputModel7.reset();
        boolean boolean11 = continuousOutputModel7.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel12 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double13 = continuousOutputModel12.getFinalTime();
        double double14 = continuousOutputModel12.getInitialTime();
        boolean boolean15 = continuousOutputModel12.requiresDenseOutput();
        continuousOutputModel7.append(continuousOutputModel12);
        boolean boolean17 = continuousOutputModel12.requiresDenseOutput();
        boolean boolean18 = continuousOutputModel12.requiresDenseOutput();
        continuousOutputModel0.append(continuousOutputModel12);
        // The following exception was thrown during execution in test generation
        try {
            double double20 = continuousOutputModel12.getInterpolatedTime();
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
    }

    @Test
    public void test01364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01364");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double1 = continuousOutputModel0.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel2 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean3 = continuousOutputModel2.requiresDenseOutput();
        double double4 = continuousOutputModel2.getInitialTime();
        boolean boolean5 = continuousOutputModel2.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel6 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double7 = continuousOutputModel6.getFinalTime();
        double double8 = continuousOutputModel6.getInitialTime();
        boolean boolean9 = continuousOutputModel6.requiresDenseOutput();
        continuousOutputModel6.reset();
        boolean boolean11 = continuousOutputModel6.requiresDenseOutput();
        continuousOutputModel2.append(continuousOutputModel6);
        continuousOutputModel0.append(continuousOutputModel2);
        org.apache.commons.math.ode.StepInterpolator stepInterpolator14 = null;
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel2.handleStep(stepInterpolator14, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test01365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01365");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean1 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean2 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        boolean boolean4 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean5 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel7 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double8 = continuousOutputModel7.getFinalTime();
        double double9 = continuousOutputModel7.getInitialTime();
        double double10 = continuousOutputModel7.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel11 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double12 = continuousOutputModel11.getFinalTime();
        double double13 = continuousOutputModel11.getInitialTime();
        continuousOutputModel7.append(continuousOutputModel11);
        double double15 = continuousOutputModel7.getFinalTime();
        boolean boolean16 = continuousOutputModel7.requiresDenseOutput();
        boolean boolean17 = continuousOutputModel7.requiresDenseOutput();
        boolean boolean18 = continuousOutputModel7.requiresDenseOutput();
        boolean boolean19 = continuousOutputModel7.requiresDenseOutput();
        continuousOutputModel7.reset();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel21 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean22 = continuousOutputModel21.requiresDenseOutput();
        continuousOutputModel21.reset();
        double double24 = continuousOutputModel21.getInitialTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel25 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean26 = continuousOutputModel25.requiresDenseOutput();
        boolean boolean27 = continuousOutputModel25.requiresDenseOutput();
        double double28 = continuousOutputModel25.getFinalTime();
        double double29 = continuousOutputModel25.getInitialTime();
        boolean boolean30 = continuousOutputModel25.requiresDenseOutput();
        continuousOutputModel21.append(continuousOutputModel25);
        continuousOutputModel7.append(continuousOutputModel25);
        continuousOutputModel7.reset();
        double double34 = continuousOutputModel7.getInitialTime();
        continuousOutputModel0.append(continuousOutputModel7);
        org.apache.commons.math.ode.StepInterpolator stepInterpolator36 = null;
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel0.handleStep(stepInterpolator36, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double34));
    }

    @Test
    public void test01366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01366");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean1 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean2 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        boolean boolean4 = continuousOutputModel0.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel5 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double6 = continuousOutputModel5.getFinalTime();
        double double7 = continuousOutputModel5.getInitialTime();
        boolean boolean8 = continuousOutputModel5.requiresDenseOutput();
        continuousOutputModel0.append(continuousOutputModel5);
        double double10 = continuousOutputModel5.getInitialTime();
        boolean boolean11 = continuousOutputModel5.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel12 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double13 = continuousOutputModel12.getFinalTime();
        double double14 = continuousOutputModel12.getInitialTime();
        double double15 = continuousOutputModel12.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel16 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double17 = continuousOutputModel16.getFinalTime();
        double double18 = continuousOutputModel16.getInitialTime();
        continuousOutputModel12.append(continuousOutputModel16);
        double double20 = continuousOutputModel12.getFinalTime();
        boolean boolean21 = continuousOutputModel12.requiresDenseOutput();
        boolean boolean22 = continuousOutputModel12.requiresDenseOutput();
        double double23 = continuousOutputModel12.getFinalTime();
        continuousOutputModel5.append(continuousOutputModel12);
        double double25 = continuousOutputModel12.getFinalTime();
        double double26 = continuousOutputModel12.getInitialTime();
        boolean boolean27 = continuousOutputModel12.requiresDenseOutput();
        // The following exception was thrown during execution in test generation
        try {
            double double28 = continuousOutputModel12.getInterpolatedTime();
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
    }

    @Test
    public void test01367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01367");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double1 = continuousOutputModel0.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel2 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean3 = continuousOutputModel2.requiresDenseOutput();
        double double4 = continuousOutputModel2.getInitialTime();
        boolean boolean5 = continuousOutputModel2.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel6 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double7 = continuousOutputModel6.getFinalTime();
        double double8 = continuousOutputModel6.getInitialTime();
        boolean boolean9 = continuousOutputModel6.requiresDenseOutput();
        continuousOutputModel6.reset();
        boolean boolean11 = continuousOutputModel6.requiresDenseOutput();
        continuousOutputModel2.append(continuousOutputModel6);
        continuousOutputModel0.append(continuousOutputModel2);
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel14 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean15 = continuousOutputModel14.requiresDenseOutput();
        boolean boolean16 = continuousOutputModel14.requiresDenseOutput();
        continuousOutputModel14.reset();
        boolean boolean18 = continuousOutputModel14.requiresDenseOutput();
        boolean boolean19 = continuousOutputModel14.requiresDenseOutput();
        continuousOutputModel0.append(continuousOutputModel14);
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel21 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean22 = continuousOutputModel21.requiresDenseOutput();
        continuousOutputModel21.reset();
        continuousOutputModel14.append(continuousOutputModel21);
        // The following exception was thrown during execution in test generation
        try {
            double double25 = continuousOutputModel21.getInterpolatedTime();
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
    }

    @Test
    public void test01368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01368");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean1 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean2 = continuousOutputModel0.requiresDenseOutput();
        double double3 = continuousOutputModel0.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel4 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean5 = continuousOutputModel4.requiresDenseOutput();
        continuousOutputModel0.append(continuousOutputModel4);
        continuousOutputModel4.reset();
        boolean boolean8 = continuousOutputModel4.requiresDenseOutput();
        double double9 = continuousOutputModel4.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel10 = null;
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel4.append(continuousOutputModel10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
    }

    @Test
    public void test01369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01369");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean1 = continuousOutputModel0.requiresDenseOutput();
        double double2 = continuousOutputModel0.getInitialTime();
        continuousOutputModel0.reset();
        continuousOutputModel0.reset();
        continuousOutputModel0.reset();
        boolean boolean6 = continuousOutputModel0.requiresDenseOutput();
        double double7 = continuousOutputModel0.getFinalTime();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator8 = null;
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel0.handleStep(stepInterpolator8, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
    }

    @Test
    public void test01370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01370");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double1 = continuousOutputModel0.getFinalTime();
        double double2 = continuousOutputModel0.getInitialTime();
        boolean boolean3 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel5 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean6 = continuousOutputModel5.requiresDenseOutput();
        double double7 = continuousOutputModel5.getInitialTime();
        continuousOutputModel0.append(continuousOutputModel5);
        boolean boolean9 = continuousOutputModel5.requiresDenseOutput();
        boolean boolean10 = continuousOutputModel5.requiresDenseOutput();
        boolean boolean11 = continuousOutputModel5.requiresDenseOutput();
        continuousOutputModel5.reset();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel13 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean14 = continuousOutputModel13.requiresDenseOutput();
        double double15 = continuousOutputModel13.getInitialTime();
        double double16 = continuousOutputModel13.getFinalTime();
        boolean boolean17 = continuousOutputModel13.requiresDenseOutput();
        continuousOutputModel13.reset();
        double double19 = continuousOutputModel13.getFinalTime();
        double double20 = continuousOutputModel13.getFinalTime();
        continuousOutputModel13.reset();
        continuousOutputModel5.append(continuousOutputModel13);
        java.lang.Class<?> wildcardClass23 = continuousOutputModel13.getClass();
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test01371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01371");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean1 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean2 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        boolean boolean4 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel6 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double7 = continuousOutputModel6.getFinalTime();
        continuousOutputModel6.reset();
        continuousOutputModel0.append(continuousOutputModel6);
        double double10 = continuousOutputModel6.getInitialTime();
        boolean boolean11 = continuousOutputModel6.requiresDenseOutput();
        // The following exception was thrown during execution in test generation
        try {
            double double12 = continuousOutputModel6.getInterpolatedTime();
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test01372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01372");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel1 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean2 = continuousOutputModel1.requiresDenseOutput();
        boolean boolean3 = continuousOutputModel1.requiresDenseOutput();
        double double4 = continuousOutputModel1.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel5 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean6 = continuousOutputModel5.requiresDenseOutput();
        continuousOutputModel1.append(continuousOutputModel5);
        continuousOutputModel0.append(continuousOutputModel5);
        boolean boolean9 = continuousOutputModel0.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel10 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double11 = continuousOutputModel10.getFinalTime();
        double double12 = continuousOutputModel10.getInitialTime();
        double double13 = continuousOutputModel10.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel14 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double15 = continuousOutputModel14.getFinalTime();
        double double16 = continuousOutputModel14.getInitialTime();
        continuousOutputModel10.append(continuousOutputModel14);
        double double18 = continuousOutputModel10.getInitialTime();
        double double19 = continuousOutputModel10.getInitialTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel20 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double21 = continuousOutputModel20.getFinalTime();
        double double22 = continuousOutputModel20.getInitialTime();
        continuousOutputModel20.reset();
        double double24 = continuousOutputModel20.getInitialTime();
        continuousOutputModel10.append(continuousOutputModel20);
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel26 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double27 = continuousOutputModel26.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel28 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean29 = continuousOutputModel28.requiresDenseOutput();
        double double30 = continuousOutputModel28.getInitialTime();
        boolean boolean31 = continuousOutputModel28.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel32 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double33 = continuousOutputModel32.getFinalTime();
        double double34 = continuousOutputModel32.getInitialTime();
        boolean boolean35 = continuousOutputModel32.requiresDenseOutput();
        continuousOutputModel32.reset();
        boolean boolean37 = continuousOutputModel32.requiresDenseOutput();
        continuousOutputModel28.append(continuousOutputModel32);
        continuousOutputModel26.append(continuousOutputModel28);
        continuousOutputModel10.append(continuousOutputModel28);
        double double41 = continuousOutputModel10.getInitialTime();
        continuousOutputModel0.append(continuousOutputModel10);
        // The following exception was thrown during execution in test generation
        try {
            double double43 = continuousOutputModel10.getInterpolatedTime();
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double41));
    }

    @Test
    public void test01373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01373");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean1 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean2 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        boolean boolean4 = continuousOutputModel0.requiresDenseOutput();
        double double5 = continuousOutputModel0.getFinalTime();
        continuousOutputModel0.reset();
        continuousOutputModel0.reset();
        double double8 = continuousOutputModel0.getFinalTime();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
    }

    @Test
    public void test01374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01374");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean1 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean2 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        continuousOutputModel0.reset();
        boolean boolean5 = continuousOutputModel0.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel6 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double7 = continuousOutputModel6.getFinalTime();
        double double8 = continuousOutputModel6.getInitialTime();
        double double9 = continuousOutputModel6.getFinalTime();
        boolean boolean10 = continuousOutputModel6.requiresDenseOutput();
        continuousOutputModel0.append(continuousOutputModel6);
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel12 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean13 = continuousOutputModel12.requiresDenseOutput();
        boolean boolean14 = continuousOutputModel12.requiresDenseOutput();
        continuousOutputModel12.reset();
        continuousOutputModel12.reset();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel17 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double18 = continuousOutputModel17.getFinalTime();
        double double19 = continuousOutputModel17.getInitialTime();
        boolean boolean20 = continuousOutputModel17.requiresDenseOutput();
        continuousOutputModel17.reset();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel22 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean23 = continuousOutputModel22.requiresDenseOutput();
        double double24 = continuousOutputModel22.getInitialTime();
        continuousOutputModel17.append(continuousOutputModel22);
        continuousOutputModel12.append(continuousOutputModel22);
        continuousOutputModel12.reset();
        boolean boolean28 = continuousOutputModel12.requiresDenseOutput();
        double double29 = continuousOutputModel12.getFinalTime();
        continuousOutputModel0.append(continuousOutputModel12);
        boolean boolean31 = continuousOutputModel12.requiresDenseOutput();
        boolean boolean32 = continuousOutputModel12.requiresDenseOutput();
        // The following exception was thrown during execution in test generation
        try {
            double double33 = continuousOutputModel12.getInterpolatedTime();
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
    }

    @Test
    public void test01375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01375");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double1 = continuousOutputModel0.getFinalTime();
        double double2 = continuousOutputModel0.getInitialTime();
        double double3 = continuousOutputModel0.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel4 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double5 = continuousOutputModel4.getFinalTime();
        double double6 = continuousOutputModel4.getInitialTime();
        continuousOutputModel0.append(continuousOutputModel4);
        double double8 = continuousOutputModel0.getFinalTime();
        boolean boolean9 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean10 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean11 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean12 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        boolean boolean14 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel16 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double17 = continuousOutputModel16.getFinalTime();
        continuousOutputModel16.reset();
        continuousOutputModel16.reset();
        continuousOutputModel0.append(continuousOutputModel16);
        boolean boolean21 = continuousOutputModel16.requiresDenseOutput();
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
    }

    @Test
    public void test01376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01376");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double1 = continuousOutputModel0.getFinalTime();
        double double2 = continuousOutputModel0.getInitialTime();
        double double3 = continuousOutputModel0.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel4 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double5 = continuousOutputModel4.getFinalTime();
        double double6 = continuousOutputModel4.getInitialTime();
        continuousOutputModel0.append(continuousOutputModel4);
        continuousOutputModel4.reset();
        boolean boolean9 = continuousOutputModel4.requiresDenseOutput();
        double double10 = continuousOutputModel4.getFinalTime();
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray11 = continuousOutputModel4.getInterpolatedState();
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
    }

    @Test
    public void test01377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01377");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean1 = continuousOutputModel0.requiresDenseOutput();
        double double2 = continuousOutputModel0.getInitialTime();
        boolean boolean3 = continuousOutputModel0.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel4 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double5 = continuousOutputModel4.getFinalTime();
        double double6 = continuousOutputModel4.getInitialTime();
        boolean boolean7 = continuousOutputModel4.requiresDenseOutput();
        continuousOutputModel4.reset();
        boolean boolean9 = continuousOutputModel4.requiresDenseOutput();
        continuousOutputModel0.append(continuousOutputModel4);
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel11 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double12 = continuousOutputModel11.getFinalTime();
        double double13 = continuousOutputModel11.getInitialTime();
        double double14 = continuousOutputModel11.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel15 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double16 = continuousOutputModel15.getFinalTime();
        double double17 = continuousOutputModel15.getInitialTime();
        continuousOutputModel11.append(continuousOutputModel15);
        double double19 = continuousOutputModel11.getFinalTime();
        boolean boolean20 = continuousOutputModel11.requiresDenseOutput();
        boolean boolean21 = continuousOutputModel11.requiresDenseOutput();
        boolean boolean22 = continuousOutputModel11.requiresDenseOutput();
        boolean boolean23 = continuousOutputModel11.requiresDenseOutput();
        continuousOutputModel0.append(continuousOutputModel11);
        boolean boolean25 = continuousOutputModel11.requiresDenseOutput();
        continuousOutputModel11.reset();
        double double27 = continuousOutputModel11.getFinalTime();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator28 = null;
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel11.handleStep(stepInterpolator28, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
    }

    @Test
    public void test01378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01378");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double1 = continuousOutputModel0.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel2 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean3 = continuousOutputModel2.requiresDenseOutput();
        double double4 = continuousOutputModel2.getInitialTime();
        boolean boolean5 = continuousOutputModel2.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel6 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double7 = continuousOutputModel6.getFinalTime();
        double double8 = continuousOutputModel6.getInitialTime();
        boolean boolean9 = continuousOutputModel6.requiresDenseOutput();
        continuousOutputModel6.reset();
        boolean boolean11 = continuousOutputModel6.requiresDenseOutput();
        continuousOutputModel2.append(continuousOutputModel6);
        continuousOutputModel0.append(continuousOutputModel2);
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel14 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean15 = continuousOutputModel14.requiresDenseOutput();
        boolean boolean16 = continuousOutputModel14.requiresDenseOutput();
        continuousOutputModel14.reset();
        boolean boolean18 = continuousOutputModel14.requiresDenseOutput();
        boolean boolean19 = continuousOutputModel14.requiresDenseOutput();
        continuousOutputModel0.append(continuousOutputModel14);
        boolean boolean21 = continuousOutputModel0.requiresDenseOutput();
        double double22 = continuousOutputModel0.getInitialTime();
        double double23 = continuousOutputModel0.getInitialTime();
        continuousOutputModel0.reset();
        boolean boolean25 = continuousOutputModel0.requiresDenseOutput();
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
    }

    @Test
    public void test01379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01379");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean1 = continuousOutputModel0.requiresDenseOutput();
        double double2 = continuousOutputModel0.getInitialTime();
        boolean boolean3 = continuousOutputModel0.requiresDenseOutput();
        java.lang.Class<?> wildcardClass4 = continuousOutputModel0.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test01380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01380");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double1 = continuousOutputModel0.getFinalTime();
        double double2 = continuousOutputModel0.getInitialTime();
        double double3 = continuousOutputModel0.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel4 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double5 = continuousOutputModel4.getFinalTime();
        double double6 = continuousOutputModel4.getInitialTime();
        continuousOutputModel0.append(continuousOutputModel4);
        double double8 = continuousOutputModel0.getInitialTime();
        double double9 = continuousOutputModel0.getFinalTime();
        boolean boolean10 = continuousOutputModel0.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel11 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean12 = continuousOutputModel11.requiresDenseOutput();
        double double13 = continuousOutputModel11.getInitialTime();
        boolean boolean14 = continuousOutputModel11.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel15 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double16 = continuousOutputModel15.getFinalTime();
        double double17 = continuousOutputModel15.getInitialTime();
        boolean boolean18 = continuousOutputModel15.requiresDenseOutput();
        continuousOutputModel15.reset();
        boolean boolean20 = continuousOutputModel15.requiresDenseOutput();
        continuousOutputModel11.append(continuousOutputModel15);
        continuousOutputModel15.reset();
        continuousOutputModel15.reset();
        continuousOutputModel15.reset();
        continuousOutputModel15.reset();
        boolean boolean26 = continuousOutputModel15.requiresDenseOutput();
        continuousOutputModel0.append(continuousOutputModel15);
        boolean boolean28 = continuousOutputModel0.requiresDenseOutput();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator29 = null;
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel0.handleStep(stepInterpolator29, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
    }

    @Test
    public void test01381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01381");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double1 = continuousOutputModel0.getFinalTime();
        double double2 = continuousOutputModel0.getInitialTime();
        boolean boolean3 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel5 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean6 = continuousOutputModel5.requiresDenseOutput();
        double double7 = continuousOutputModel5.getInitialTime();
        continuousOutputModel0.append(continuousOutputModel5);
        boolean boolean9 = continuousOutputModel5.requiresDenseOutput();
        boolean boolean10 = continuousOutputModel5.requiresDenseOutput();
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel5.setInterpolatedTime((double) 10L);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test01382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01382");
        java.io.IOException iOException7 = new java.io.IOException("hi!");
        org.apache.commons.math.ode.DerivativeException derivativeException8 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) iOException7);
        org.apache.commons.math.MathException mathException9 = new org.apache.commons.math.MathException("hi!", (java.lang.Throwable) iOException7);
        java.lang.Object[] objArray10 = mathException9.getArguments();
        org.apache.commons.math.MathException mathException11 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: ", objArray10);
        org.apache.commons.math.MathException mathException12 = new org.apache.commons.math.MathException("hi!", objArray10);
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel14 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double15 = continuousOutputModel14.getFinalTime();
        double double16 = continuousOutputModel14.getInitialTime();
        boolean boolean17 = continuousOutputModel14.requiresDenseOutput();
        double double18 = continuousOutputModel14.getInitialTime();
        java.io.IOException iOException21 = new java.io.IOException("hi!");
        org.apache.commons.math.ode.DerivativeException derivativeException22 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) iOException21);
        org.apache.commons.math.MathException mathException23 = new org.apache.commons.math.MathException("hi!", (java.lang.Throwable) iOException21);
        java.io.IOException iOException26 = new java.io.IOException("hi!");
        java.io.IOException iOException27 = new java.io.IOException("", (java.lang.Throwable) iOException26);
        org.apache.commons.math.ode.DerivativeException derivativeException28 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) iOException26);
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel30 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double31 = continuousOutputModel30.getFinalTime();
        double double32 = continuousOutputModel30.getInitialTime();
        java.lang.Object[] objArray33 = new java.lang.Object[] { double18, mathException23, iOException26, false, continuousOutputModel30 };
        java.lang.String[] strArray42 = new java.lang.String[] { "hi!", "org.apache.commons.math.MathException: ", "hi!", "org.apache.commons.math.MathException: ", "", "" };
        org.apache.commons.math.ode.DerivativeException derivativeException43 = new org.apache.commons.math.ode.DerivativeException("", strArray42);
        java.io.IOException iOException47 = new java.io.IOException("hi!");
        org.apache.commons.math.ode.DerivativeException derivativeException48 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) iOException47);
        org.apache.commons.math.MathException mathException49 = new org.apache.commons.math.MathException("hi!", (java.lang.Throwable) iOException47);
        java.lang.Object[] objArray50 = mathException49.getArguments();
        org.apache.commons.math.MathException mathException51 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: ", (java.lang.Throwable) mathException49);
        org.apache.commons.math.MathException mathException52 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: hi!", (java.lang.Object[]) strArray42, (java.lang.Throwable) mathException49);
        org.apache.commons.math.MathException mathException53 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: hi!", objArray33, (java.lang.Throwable) mathException52);
        org.apache.commons.math.MathException mathException54 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: ", objArray10, (java.lang.Throwable) mathException53);
        org.apache.commons.math.MathException mathException55 = new org.apache.commons.math.MathException("hi!", objArray10);
        java.lang.String[] strArray64 = new java.lang.String[] { "hi!", "org.apache.commons.math.MathException: ", "hi!", "org.apache.commons.math.MathException: ", "", "" };
        org.apache.commons.math.ode.DerivativeException derivativeException65 = new org.apache.commons.math.ode.DerivativeException("", strArray64);
        java.io.IOException iOException69 = new java.io.IOException("hi!");
        org.apache.commons.math.ode.DerivativeException derivativeException70 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) iOException69);
        org.apache.commons.math.MathException mathException71 = new org.apache.commons.math.MathException("hi!", (java.lang.Throwable) iOException69);
        java.lang.Object[] objArray72 = mathException71.getArguments();
        org.apache.commons.math.MathException mathException73 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: ", (java.lang.Throwable) mathException71);
        org.apache.commons.math.MathException mathException74 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: hi!", (java.lang.Object[]) strArray64, (java.lang.Throwable) mathException71);
        java.lang.String str75 = mathException74.getPattern();
        org.apache.commons.math.ode.DerivativeException derivativeException76 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) mathException74);
        mathException55.addSuppressed((java.lang.Throwable) derivativeException76);
        java.io.IOException iOException78 = new java.io.IOException("org.apache.commons.math.ode.DerivativeException: ", (java.lang.Throwable) derivativeException76);
        java.io.IOException iOException79 = new java.io.IOException((java.lang.Throwable) derivativeException76);
        java.io.IOException iOException80 = new java.io.IOException((java.lang.Throwable) iOException79);
        org.apache.commons.math.ode.DerivativeException derivativeException81 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) iOException80);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertNotNull(strArray42);
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[]");
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNotNull(objArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray72), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray72), "[]");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "org.apache.commons.math.MathException: hi!" + "'", str75, "org.apache.commons.math.MathException: hi!");
    }

    @Test
    public void test01383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01383");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean1 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean2 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        boolean boolean4 = continuousOutputModel0.requiresDenseOutput();
        double double5 = continuousOutputModel0.getFinalTime();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator6 = null;
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel0.handleStep(stepInterpolator6, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
    }

    @Test
    public void test01384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01384");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean1 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean2 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        continuousOutputModel0.reset();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel5 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double6 = continuousOutputModel5.getFinalTime();
        double double7 = continuousOutputModel5.getInitialTime();
        boolean boolean8 = continuousOutputModel5.requiresDenseOutput();
        continuousOutputModel5.reset();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel10 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean11 = continuousOutputModel10.requiresDenseOutput();
        double double12 = continuousOutputModel10.getInitialTime();
        continuousOutputModel5.append(continuousOutputModel10);
        continuousOutputModel0.append(continuousOutputModel10);
        boolean boolean15 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean16 = continuousOutputModel0.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel17 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double18 = continuousOutputModel17.getFinalTime();
        double double19 = continuousOutputModel17.getInitialTime();
        boolean boolean20 = continuousOutputModel17.requiresDenseOutput();
        double double21 = continuousOutputModel17.getInitialTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel22 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean23 = continuousOutputModel22.requiresDenseOutput();
        boolean boolean24 = continuousOutputModel22.requiresDenseOutput();
        continuousOutputModel22.reset();
        boolean boolean26 = continuousOutputModel22.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel27 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double28 = continuousOutputModel27.getFinalTime();
        double double29 = continuousOutputModel27.getInitialTime();
        boolean boolean30 = continuousOutputModel27.requiresDenseOutput();
        continuousOutputModel22.append(continuousOutputModel27);
        continuousOutputModel17.append(continuousOutputModel22);
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel33 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean34 = continuousOutputModel33.requiresDenseOutput();
        double double35 = continuousOutputModel33.getInitialTime();
        boolean boolean36 = continuousOutputModel33.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel37 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean38 = continuousOutputModel37.requiresDenseOutput();
        boolean boolean39 = continuousOutputModel37.requiresDenseOutput();
        continuousOutputModel33.append(continuousOutputModel37);
        continuousOutputModel22.append(continuousOutputModel33);
        boolean boolean42 = continuousOutputModel33.requiresDenseOutput();
        continuousOutputModel33.reset();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel44 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double45 = continuousOutputModel44.getFinalTime();
        double double46 = continuousOutputModel44.getInitialTime();
        double double47 = continuousOutputModel44.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel48 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double49 = continuousOutputModel48.getFinalTime();
        double double50 = continuousOutputModel48.getInitialTime();
        continuousOutputModel44.append(continuousOutputModel48);
        double double52 = continuousOutputModel44.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel53 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double54 = continuousOutputModel53.getFinalTime();
        double double55 = continuousOutputModel53.getInitialTime();
        boolean boolean56 = continuousOutputModel53.requiresDenseOutput();
        double double57 = continuousOutputModel53.getInitialTime();
        continuousOutputModel53.reset();
        boolean boolean59 = continuousOutputModel53.requiresDenseOutput();
        continuousOutputModel44.append(continuousOutputModel53);
        continuousOutputModel33.append(continuousOutputModel44);
        continuousOutputModel0.append(continuousOutputModel44);
        boolean boolean63 = continuousOutputModel44.requiresDenseOutput();
        continuousOutputModel44.reset();
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel44.setInterpolatedTime((double) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertTrue(Double.isNaN(double50));
        org.junit.Assert.assertTrue(Double.isNaN(double52));
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertTrue(Double.isNaN(double55));
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double57));
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
    }

    @Test
    public void test01385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01385");
        java.lang.String[] strArray10 = new java.lang.String[] { "org.apache.commons.math.MathException: ", "org.apache.commons.math.ode.DerivativeException: ", "org.apache.commons.math.MathException: org.apache.commons.math.MathException: ", "org.apache.commons.math.ode.DerivativeException: ", "org.apache.commons.math.MathException: hi!", "org.apache.commons.math.MathException: " };
        org.apache.commons.math.ode.DerivativeException derivativeException11 = new org.apache.commons.math.ode.DerivativeException("java.io.IOException: ", strArray10);
        java.io.IOException iOException16 = new java.io.IOException("hi!");
        java.io.IOException iOException17 = new java.io.IOException("", (java.lang.Throwable) iOException16);
        org.apache.commons.math.ode.DerivativeException derivativeException18 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) iOException16);
        java.io.IOException iOException19 = new java.io.IOException("hi!", (java.lang.Throwable) iOException16);
        org.apache.commons.math.MathException mathException20 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: hi!", (java.lang.Throwable) iOException19);
        org.apache.commons.math.ode.DerivativeException derivativeException21 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) iOException19);
        org.apache.commons.math.MathException mathException22 = new org.apache.commons.math.MathException("java.io.IOException: java.io.IOException: ", (java.lang.Object[]) strArray10, (java.lang.Throwable) iOException19);
        java.io.IOException iOException29 = new java.io.IOException("hi!");
        org.apache.commons.math.ode.DerivativeException derivativeException30 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) iOException29);
        org.apache.commons.math.MathException mathException31 = new org.apache.commons.math.MathException("hi!", (java.lang.Throwable) iOException29);
        java.lang.Object[] objArray32 = mathException31.getArguments();
        org.apache.commons.math.MathException mathException33 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: ", objArray32);
        org.apache.commons.math.MathException mathException34 = new org.apache.commons.math.MathException("hi!", objArray32);
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel36 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double37 = continuousOutputModel36.getFinalTime();
        double double38 = continuousOutputModel36.getInitialTime();
        boolean boolean39 = continuousOutputModel36.requiresDenseOutput();
        double double40 = continuousOutputModel36.getInitialTime();
        java.io.IOException iOException43 = new java.io.IOException("hi!");
        org.apache.commons.math.ode.DerivativeException derivativeException44 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) iOException43);
        org.apache.commons.math.MathException mathException45 = new org.apache.commons.math.MathException("hi!", (java.lang.Throwable) iOException43);
        java.io.IOException iOException48 = new java.io.IOException("hi!");
        java.io.IOException iOException49 = new java.io.IOException("", (java.lang.Throwable) iOException48);
        org.apache.commons.math.ode.DerivativeException derivativeException50 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) iOException48);
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel52 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double53 = continuousOutputModel52.getFinalTime();
        double double54 = continuousOutputModel52.getInitialTime();
        java.lang.Object[] objArray55 = new java.lang.Object[] { double40, mathException45, iOException48, false, continuousOutputModel52 };
        java.lang.String[] strArray64 = new java.lang.String[] { "hi!", "org.apache.commons.math.MathException: ", "hi!", "org.apache.commons.math.MathException: ", "", "" };
        org.apache.commons.math.ode.DerivativeException derivativeException65 = new org.apache.commons.math.ode.DerivativeException("", strArray64);
        java.io.IOException iOException69 = new java.io.IOException("hi!");
        org.apache.commons.math.ode.DerivativeException derivativeException70 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) iOException69);
        org.apache.commons.math.MathException mathException71 = new org.apache.commons.math.MathException("hi!", (java.lang.Throwable) iOException69);
        java.lang.Object[] objArray72 = mathException71.getArguments();
        org.apache.commons.math.MathException mathException73 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: ", (java.lang.Throwable) mathException71);
        org.apache.commons.math.MathException mathException74 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: hi!", (java.lang.Object[]) strArray64, (java.lang.Throwable) mathException71);
        org.apache.commons.math.MathException mathException75 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: hi!", objArray55, (java.lang.Throwable) mathException74);
        org.apache.commons.math.MathException mathException76 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: ", objArray32, (java.lang.Throwable) mathException75);
        java.io.IOException iOException79 = new java.io.IOException("hi!");
        java.io.IOException iOException80 = new java.io.IOException("", (java.lang.Throwable) iOException79);
        java.io.IOException iOException81 = new java.io.IOException((java.lang.Throwable) iOException80);
        org.apache.commons.math.MathException mathException82 = new org.apache.commons.math.MathException("java.io.IOException: hi!", objArray32, (java.lang.Throwable) iOException81);
        mathException22.addSuppressed((java.lang.Throwable) iOException81);
        java.lang.Object[] objArray84 = mathException22.getArguments();
        java.io.IOException iOException85 = new java.io.IOException("org.apache.commons.math.MathException: java.io.IOException: org.apache.commons.math.MathException: hi!", (java.lang.Throwable) mathException22);
        org.apache.commons.math.MathException mathException86 = new org.apache.commons.math.MathException("org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.MathException: hi!", (java.lang.Throwable) iOException85);
        java.io.IOException iOException87 = new java.io.IOException((java.lang.Throwable) mathException86);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertNotNull(objArray55);
        org.junit.Assert.assertNotNull(strArray64);
        org.junit.Assert.assertNotNull(objArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray72), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray72), "[]");
        org.junit.Assert.assertNotNull(objArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray84), "[org.apache.commons.math.MathException: , org.apache.commons.math.ode.DerivativeException: , org.apache.commons.math.MathException: org.apache.commons.math.MathException: , org.apache.commons.math.ode.DerivativeException: , org.apache.commons.math.MathException: hi!, org.apache.commons.math.MathException: ]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray84), "[org.apache.commons.math.MathException: , org.apache.commons.math.ode.DerivativeException: , org.apache.commons.math.MathException: org.apache.commons.math.MathException: , org.apache.commons.math.ode.DerivativeException: , org.apache.commons.math.MathException: hi!, org.apache.commons.math.MathException: ]");
    }

    @Test
    public void test01386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01386");
        java.io.IOException iOException5 = new java.io.IOException("hi!");
        org.apache.commons.math.ode.DerivativeException derivativeException6 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) iOException5);
        java.lang.Object[] objArray7 = derivativeException6.getArguments();
        java.lang.String[] strArray15 = new java.lang.String[] { "hi!", "org.apache.commons.math.MathException: ", "hi!", "org.apache.commons.math.MathException: ", "", "" };
        org.apache.commons.math.ode.DerivativeException derivativeException16 = new org.apache.commons.math.ode.DerivativeException("", strArray15);
        java.io.IOException iOException18 = new java.io.IOException("hi!");
        org.apache.commons.math.ode.DerivativeException derivativeException19 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) iOException18);
        derivativeException16.addSuppressed((java.lang.Throwable) iOException18);
        org.apache.commons.math.MathException mathException21 = new org.apache.commons.math.MathException("hi!", objArray7, (java.lang.Throwable) derivativeException16);
        java.io.IOException iOException24 = new java.io.IOException("hi!");
        java.io.IOException iOException25 = new java.io.IOException("", (java.lang.Throwable) iOException24);
        org.apache.commons.math.MathException mathException26 = new org.apache.commons.math.MathException((java.lang.Throwable) iOException25);
        org.apache.commons.math.ode.DerivativeException derivativeException27 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) iOException25);
        org.apache.commons.math.MathException mathException28 = new org.apache.commons.math.MathException("java.io.IOException: hi!", objArray7, (java.lang.Throwable) iOException25);
        java.io.IOException iOException34 = new java.io.IOException("hi!");
        org.apache.commons.math.ode.DerivativeException derivativeException35 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) iOException34);
        org.apache.commons.math.MathException mathException36 = new org.apache.commons.math.MathException("hi!", (java.lang.Throwable) iOException34);
        java.lang.Object[] objArray37 = mathException36.getArguments();
        org.apache.commons.math.MathException mathException38 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: ", objArray37);
        org.apache.commons.math.MathException mathException39 = new org.apache.commons.math.MathException("hi!", objArray37);
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel41 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double42 = continuousOutputModel41.getFinalTime();
        double double43 = continuousOutputModel41.getInitialTime();
        boolean boolean44 = continuousOutputModel41.requiresDenseOutput();
        double double45 = continuousOutputModel41.getInitialTime();
        java.io.IOException iOException48 = new java.io.IOException("hi!");
        org.apache.commons.math.ode.DerivativeException derivativeException49 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) iOException48);
        org.apache.commons.math.MathException mathException50 = new org.apache.commons.math.MathException("hi!", (java.lang.Throwable) iOException48);
        java.io.IOException iOException53 = new java.io.IOException("hi!");
        java.io.IOException iOException54 = new java.io.IOException("", (java.lang.Throwable) iOException53);
        org.apache.commons.math.ode.DerivativeException derivativeException55 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) iOException53);
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel57 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double58 = continuousOutputModel57.getFinalTime();
        double double59 = continuousOutputModel57.getInitialTime();
        java.lang.Object[] objArray60 = new java.lang.Object[] { double45, mathException50, iOException53, false, continuousOutputModel57 };
        java.lang.String[] strArray69 = new java.lang.String[] { "hi!", "org.apache.commons.math.MathException: ", "hi!", "org.apache.commons.math.MathException: ", "", "" };
        org.apache.commons.math.ode.DerivativeException derivativeException70 = new org.apache.commons.math.ode.DerivativeException("", strArray69);
        java.io.IOException iOException74 = new java.io.IOException("hi!");
        org.apache.commons.math.ode.DerivativeException derivativeException75 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) iOException74);
        org.apache.commons.math.MathException mathException76 = new org.apache.commons.math.MathException("hi!", (java.lang.Throwable) iOException74);
        java.lang.Object[] objArray77 = mathException76.getArguments();
        org.apache.commons.math.MathException mathException78 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: ", (java.lang.Throwable) mathException76);
        org.apache.commons.math.MathException mathException79 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: hi!", (java.lang.Object[]) strArray69, (java.lang.Throwable) mathException76);
        org.apache.commons.math.MathException mathException80 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: hi!", objArray60, (java.lang.Throwable) mathException79);
        org.apache.commons.math.MathException mathException81 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: ", objArray37, (java.lang.Throwable) mathException80);
        org.apache.commons.math.MathException mathException82 = new org.apache.commons.math.MathException("java.io.IOException: hi!", objArray7, (java.lang.Throwable) mathException81);
        java.lang.Object[] objArray84 = new java.lang.Object[] {};
        org.apache.commons.math.MathException mathException85 = new org.apache.commons.math.MathException("", objArray84);
        java.io.IOException iOException86 = new java.io.IOException((java.lang.Throwable) mathException85);
        org.apache.commons.math.ode.DerivativeException derivativeException87 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) iOException86);
        java.lang.Object[] objArray88 = derivativeException87.getArguments();
        mathException81.addSuppressed((java.lang.Throwable) derivativeException87);
        java.io.IOException iOException90 = new java.io.IOException("org.apache.commons.math.MathException: org.apache.commons.math.MathException: ", (java.lang.Throwable) derivativeException87);
        java.lang.String str91 = derivativeException87.getPattern();
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[]");
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertTrue(Double.isNaN(double58));
        org.junit.Assert.assertTrue(Double.isNaN(double59));
        org.junit.Assert.assertNotNull(objArray60);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertNotNull(objArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray77), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray77), "[]");
        org.junit.Assert.assertNotNull(objArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray84), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray84), "[]");
        org.junit.Assert.assertNotNull(objArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray88), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray88), "[]");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "org.apache.commons.math.MathException: " + "'", str91, "org.apache.commons.math.MathException: ");
    }

    @Test
    public void test01387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01387");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double1 = continuousOutputModel0.getFinalTime();
        double double2 = continuousOutputModel0.getInitialTime();
        double double3 = continuousOutputModel0.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel4 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double5 = continuousOutputModel4.getFinalTime();
        double double6 = continuousOutputModel4.getInitialTime();
        continuousOutputModel0.append(continuousOutputModel4);
        boolean boolean8 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean9 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        boolean boolean11 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean12 = continuousOutputModel0.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel13 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean14 = continuousOutputModel13.requiresDenseOutput();
        boolean boolean15 = continuousOutputModel13.requiresDenseOutput();
        continuousOutputModel13.reset();
        boolean boolean17 = continuousOutputModel13.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel18 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double19 = continuousOutputModel18.getFinalTime();
        double double20 = continuousOutputModel18.getInitialTime();
        boolean boolean21 = continuousOutputModel18.requiresDenseOutput();
        continuousOutputModel13.append(continuousOutputModel18);
        continuousOutputModel18.reset();
        boolean boolean24 = continuousOutputModel18.requiresDenseOutput();
        boolean boolean25 = continuousOutputModel18.requiresDenseOutput();
        double double26 = continuousOutputModel18.getInitialTime();
        boolean boolean27 = continuousOutputModel18.requiresDenseOutput();
        continuousOutputModel18.reset();
        continuousOutputModel0.append(continuousOutputModel18);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray30 = continuousOutputModel0.getInterpolatedState();
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
    }

    @Test
    public void test01388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01388");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double1 = continuousOutputModel0.getFinalTime();
        double double2 = continuousOutputModel0.getInitialTime();
        double double3 = continuousOutputModel0.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel4 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double5 = continuousOutputModel4.getFinalTime();
        double double6 = continuousOutputModel4.getInitialTime();
        continuousOutputModel0.append(continuousOutputModel4);
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel8 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean9 = continuousOutputModel8.requiresDenseOutput();
        double double10 = continuousOutputModel8.getInitialTime();
        double double11 = continuousOutputModel8.getInitialTime();
        continuousOutputModel0.append(continuousOutputModel8);
        boolean boolean13 = continuousOutputModel0.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel14 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean15 = continuousOutputModel14.requiresDenseOutput();
        boolean boolean16 = continuousOutputModel14.requiresDenseOutput();
        continuousOutputModel14.reset();
        boolean boolean18 = continuousOutputModel14.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel19 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean20 = continuousOutputModel19.requiresDenseOutput();
        double double21 = continuousOutputModel19.getInitialTime();
        boolean boolean22 = continuousOutputModel19.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel23 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean24 = continuousOutputModel23.requiresDenseOutput();
        boolean boolean25 = continuousOutputModel23.requiresDenseOutput();
        continuousOutputModel19.append(continuousOutputModel23);
        continuousOutputModel14.append(continuousOutputModel23);
        continuousOutputModel0.append(continuousOutputModel23);
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel29 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean30 = continuousOutputModel29.requiresDenseOutput();
        boolean boolean31 = continuousOutputModel29.requiresDenseOutput();
        continuousOutputModel29.reset();
        boolean boolean33 = continuousOutputModel29.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel34 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double35 = continuousOutputModel34.getFinalTime();
        double double36 = continuousOutputModel34.getInitialTime();
        boolean boolean37 = continuousOutputModel34.requiresDenseOutput();
        continuousOutputModel29.append(continuousOutputModel34);
        boolean boolean39 = continuousOutputModel34.requiresDenseOutput();
        double double40 = continuousOutputModel34.getFinalTime();
        continuousOutputModel34.reset();
        double double42 = continuousOutputModel34.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel43 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean44 = continuousOutputModel43.requiresDenseOutput();
        boolean boolean45 = continuousOutputModel43.requiresDenseOutput();
        continuousOutputModel43.reset();
        boolean boolean47 = continuousOutputModel43.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel48 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double49 = continuousOutputModel48.getFinalTime();
        double double50 = continuousOutputModel48.getInitialTime();
        boolean boolean51 = continuousOutputModel48.requiresDenseOutput();
        continuousOutputModel43.append(continuousOutputModel48);
        boolean boolean53 = continuousOutputModel48.requiresDenseOutput();
        double double54 = continuousOutputModel48.getFinalTime();
        continuousOutputModel48.reset();
        double double56 = continuousOutputModel48.getInitialTime();
        boolean boolean57 = continuousOutputModel48.requiresDenseOutput();
        continuousOutputModel34.append(continuousOutputModel48);
        continuousOutputModel0.append(continuousOutputModel34);
        // The following exception was thrown during execution in test generation
        try {
            double double60 = continuousOutputModel34.getInterpolatedTime();
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertTrue(Double.isNaN(double50));
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertTrue(Double.isNaN(double56));
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
    }

    @Test
    public void test01389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01389");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        continuousOutputModel0.reset();
        boolean boolean2 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator4 = null;
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel0.handleStep(stepInterpolator4, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
    }

    @Test
    public void test01390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01390");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel1 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean2 = continuousOutputModel1.requiresDenseOutput();
        boolean boolean3 = continuousOutputModel1.requiresDenseOutput();
        double double4 = continuousOutputModel1.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel5 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean6 = continuousOutputModel5.requiresDenseOutput();
        continuousOutputModel1.append(continuousOutputModel5);
        continuousOutputModel0.append(continuousOutputModel5);
        boolean boolean9 = continuousOutputModel5.requiresDenseOutput();
        boolean boolean10 = continuousOutputModel5.requiresDenseOutput();
        double double11 = continuousOutputModel5.getFinalTime();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator12 = null;
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel5.handleStep(stepInterpolator12, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
    }

    @Test
    public void test01391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01391");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel1 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean2 = continuousOutputModel1.requiresDenseOutput();
        boolean boolean3 = continuousOutputModel1.requiresDenseOutput();
        double double4 = continuousOutputModel1.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel5 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean6 = continuousOutputModel5.requiresDenseOutput();
        continuousOutputModel1.append(continuousOutputModel5);
        continuousOutputModel0.append(continuousOutputModel5);
        boolean boolean9 = continuousOutputModel5.requiresDenseOutput();
        double double10 = continuousOutputModel5.getInitialTime();
        continuousOutputModel5.reset();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel12 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double13 = continuousOutputModel12.getFinalTime();
        double double14 = continuousOutputModel12.getInitialTime();
        double double15 = continuousOutputModel12.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel16 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double17 = continuousOutputModel16.getFinalTime();
        double double18 = continuousOutputModel16.getInitialTime();
        continuousOutputModel12.append(continuousOutputModel16);
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel20 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean21 = continuousOutputModel20.requiresDenseOutput();
        double double22 = continuousOutputModel20.getInitialTime();
        double double23 = continuousOutputModel20.getInitialTime();
        continuousOutputModel12.append(continuousOutputModel20);
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel25 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean26 = continuousOutputModel25.requiresDenseOutput();
        boolean boolean27 = continuousOutputModel25.requiresDenseOutput();
        double double28 = continuousOutputModel25.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel29 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean30 = continuousOutputModel29.requiresDenseOutput();
        boolean boolean31 = continuousOutputModel29.requiresDenseOutput();
        continuousOutputModel29.reset();
        continuousOutputModel29.reset();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel34 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double35 = continuousOutputModel34.getFinalTime();
        double double36 = continuousOutputModel34.getInitialTime();
        boolean boolean37 = continuousOutputModel34.requiresDenseOutput();
        continuousOutputModel34.reset();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel39 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean40 = continuousOutputModel39.requiresDenseOutput();
        double double41 = continuousOutputModel39.getInitialTime();
        continuousOutputModel34.append(continuousOutputModel39);
        continuousOutputModel29.append(continuousOutputModel39);
        boolean boolean44 = continuousOutputModel29.requiresDenseOutput();
        boolean boolean45 = continuousOutputModel29.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel46 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean47 = continuousOutputModel46.requiresDenseOutput();
        double double48 = continuousOutputModel46.getInitialTime();
        boolean boolean49 = continuousOutputModel46.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel50 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double51 = continuousOutputModel50.getFinalTime();
        double double52 = continuousOutputModel50.getInitialTime();
        boolean boolean53 = continuousOutputModel50.requiresDenseOutput();
        continuousOutputModel50.reset();
        boolean boolean55 = continuousOutputModel50.requiresDenseOutput();
        continuousOutputModel46.append(continuousOutputModel50);
        continuousOutputModel46.reset();
        double double58 = continuousOutputModel46.getInitialTime();
        continuousOutputModel29.append(continuousOutputModel46);
        continuousOutputModel25.append(continuousOutputModel46);
        continuousOutputModel20.append(continuousOutputModel46);
        continuousOutputModel5.append(continuousOutputModel20);
        boolean boolean63 = continuousOutputModel5.requiresDenseOutput();
        boolean boolean64 = continuousOutputModel5.requiresDenseOutput();
        boolean boolean65 = continuousOutputModel5.requiresDenseOutput();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator66 = null;
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel5.handleStep(stepInterpolator66, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertTrue(Double.isNaN(double52));
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double58));
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
    }

    @Test
    public void test01392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01392");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean1 = continuousOutputModel0.requiresDenseOutput();
        double double2 = continuousOutputModel0.getInitialTime();
        boolean boolean3 = continuousOutputModel0.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel4 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean5 = continuousOutputModel4.requiresDenseOutput();
        boolean boolean6 = continuousOutputModel4.requiresDenseOutput();
        continuousOutputModel0.append(continuousOutputModel4);
        boolean boolean8 = continuousOutputModel0.requiresDenseOutput();
        double double9 = continuousOutputModel0.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel10 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean11 = continuousOutputModel10.requiresDenseOutput();
        boolean boolean12 = continuousOutputModel10.requiresDenseOutput();
        continuousOutputModel10.reset();
        continuousOutputModel10.reset();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel15 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double16 = continuousOutputModel15.getFinalTime();
        double double17 = continuousOutputModel15.getInitialTime();
        boolean boolean18 = continuousOutputModel15.requiresDenseOutput();
        continuousOutputModel15.reset();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel20 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean21 = continuousOutputModel20.requiresDenseOutput();
        double double22 = continuousOutputModel20.getInitialTime();
        continuousOutputModel15.append(continuousOutputModel20);
        continuousOutputModel10.append(continuousOutputModel20);
        continuousOutputModel0.append(continuousOutputModel20);
        // The following exception was thrown during execution in test generation
        try {
            double double26 = continuousOutputModel0.getInterpolatedTime();
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
    }

    @Test
    public void test01393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01393");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double1 = continuousOutputModel0.getFinalTime();
        double double2 = continuousOutputModel0.getInitialTime();
        double double3 = continuousOutputModel0.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel4 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double5 = continuousOutputModel4.getFinalTime();
        double double6 = continuousOutputModel4.getInitialTime();
        continuousOutputModel0.append(continuousOutputModel4);
        double double8 = continuousOutputModel0.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel9 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double10 = continuousOutputModel9.getFinalTime();
        double double11 = continuousOutputModel9.getInitialTime();
        boolean boolean12 = continuousOutputModel9.requiresDenseOutput();
        double double13 = continuousOutputModel9.getInitialTime();
        continuousOutputModel9.reset();
        boolean boolean15 = continuousOutputModel9.requiresDenseOutput();
        continuousOutputModel0.append(continuousOutputModel9);
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel17 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean18 = continuousOutputModel17.requiresDenseOutput();
        double double19 = continuousOutputModel17.getInitialTime();
        boolean boolean20 = continuousOutputModel17.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel21 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double22 = continuousOutputModel21.getFinalTime();
        double double23 = continuousOutputModel21.getInitialTime();
        boolean boolean24 = continuousOutputModel21.requiresDenseOutput();
        continuousOutputModel21.reset();
        boolean boolean26 = continuousOutputModel21.requiresDenseOutput();
        continuousOutputModel17.append(continuousOutputModel21);
        continuousOutputModel17.reset();
        continuousOutputModel9.append(continuousOutputModel17);
        boolean boolean30 = continuousOutputModel9.requiresDenseOutput();
        boolean boolean31 = continuousOutputModel9.requiresDenseOutput();
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel9.setInterpolatedTime((double) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
    }

    @Test
    public void test01394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01394");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double1 = continuousOutputModel0.getFinalTime();
        double double2 = continuousOutputModel0.getInitialTime();
        boolean boolean3 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        boolean boolean5 = continuousOutputModel0.requiresDenseOutput();
        double double6 = continuousOutputModel0.getInitialTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel7 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double8 = continuousOutputModel7.getFinalTime();
        double double9 = continuousOutputModel7.getInitialTime();
        boolean boolean10 = continuousOutputModel7.requiresDenseOutput();
        double double11 = continuousOutputModel7.getInitialTime();
        continuousOutputModel7.reset();
        boolean boolean13 = continuousOutputModel7.requiresDenseOutput();
        double double14 = continuousOutputModel7.getInitialTime();
        continuousOutputModel0.append(continuousOutputModel7);
        boolean boolean16 = continuousOutputModel7.requiresDenseOutput();
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray17 = continuousOutputModel7.getInterpolatedState();
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
    }

    @Test
    public void test01395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01395");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel1 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean2 = continuousOutputModel1.requiresDenseOutput();
        boolean boolean3 = continuousOutputModel1.requiresDenseOutput();
        double double4 = continuousOutputModel1.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel5 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean6 = continuousOutputModel5.requiresDenseOutput();
        continuousOutputModel1.append(continuousOutputModel5);
        continuousOutputModel0.append(continuousOutputModel5);
        boolean boolean9 = continuousOutputModel0.requiresDenseOutput();
        double double10 = continuousOutputModel0.getInitialTime();
        boolean boolean11 = continuousOutputModel0.requiresDenseOutput();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator12 = null;
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel0.handleStep(stepInterpolator12, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test01396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01396");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean1 = continuousOutputModel0.requiresDenseOutput();
        double double2 = continuousOutputModel0.getInitialTime();
        boolean boolean3 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean4 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean5 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray7 = continuousOutputModel0.getInterpolatedState();
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    }

    @Test
    public void test01397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01397");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double1 = continuousOutputModel0.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel2 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean3 = continuousOutputModel2.requiresDenseOutput();
        double double4 = continuousOutputModel2.getInitialTime();
        boolean boolean5 = continuousOutputModel2.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel6 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double7 = continuousOutputModel6.getFinalTime();
        double double8 = continuousOutputModel6.getInitialTime();
        boolean boolean9 = continuousOutputModel6.requiresDenseOutput();
        continuousOutputModel6.reset();
        boolean boolean11 = continuousOutputModel6.requiresDenseOutput();
        continuousOutputModel2.append(continuousOutputModel6);
        continuousOutputModel0.append(continuousOutputModel2);
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel14 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean15 = continuousOutputModel14.requiresDenseOutput();
        boolean boolean16 = continuousOutputModel14.requiresDenseOutput();
        continuousOutputModel14.reset();
        boolean boolean18 = continuousOutputModel14.requiresDenseOutput();
        boolean boolean19 = continuousOutputModel14.requiresDenseOutput();
        continuousOutputModel0.append(continuousOutputModel14);
        continuousOutputModel14.reset();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel22 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double23 = continuousOutputModel22.getFinalTime();
        double double24 = continuousOutputModel22.getInitialTime();
        boolean boolean25 = continuousOutputModel22.requiresDenseOutput();
        continuousOutputModel22.reset();
        double double27 = continuousOutputModel22.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel28 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double29 = continuousOutputModel28.getFinalTime();
        double double30 = continuousOutputModel28.getInitialTime();
        continuousOutputModel22.append(continuousOutputModel28);
        continuousOutputModel14.append(continuousOutputModel22);
        continuousOutputModel14.reset();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator34 = null;
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel14.handleStep(stepInterpolator34, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue(Double.isNaN(double30));
    }

    @Test
    public void test01398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01398");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double1 = continuousOutputModel0.getFinalTime();
        double double2 = continuousOutputModel0.getInitialTime();
        boolean boolean3 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel5 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean6 = continuousOutputModel5.requiresDenseOutput();
        double double7 = continuousOutputModel5.getInitialTime();
        continuousOutputModel0.append(continuousOutputModel5);
        boolean boolean9 = continuousOutputModel5.requiresDenseOutput();
        boolean boolean10 = continuousOutputModel5.requiresDenseOutput();
        boolean boolean11 = continuousOutputModel5.requiresDenseOutput();
        continuousOutputModel5.reset();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel13 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean14 = continuousOutputModel13.requiresDenseOutput();
        double double15 = continuousOutputModel13.getInitialTime();
        double double16 = continuousOutputModel13.getFinalTime();
        boolean boolean17 = continuousOutputModel13.requiresDenseOutput();
        continuousOutputModel13.reset();
        double double19 = continuousOutputModel13.getFinalTime();
        double double20 = continuousOutputModel13.getFinalTime();
        continuousOutputModel13.reset();
        continuousOutputModel5.append(continuousOutputModel13);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray23 = continuousOutputModel5.getInterpolatedState();
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue(Double.isNaN(double20));
    }

    @Test
    public void test01399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01399");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean1 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean2 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        boolean boolean4 = continuousOutputModel0.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel5 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double6 = continuousOutputModel5.getFinalTime();
        double double7 = continuousOutputModel5.getInitialTime();
        boolean boolean8 = continuousOutputModel5.requiresDenseOutput();
        continuousOutputModel0.append(continuousOutputModel5);
        continuousOutputModel5.reset();
        double double11 = continuousOutputModel5.getInitialTime();
        double double12 = continuousOutputModel5.getFinalTime();
        continuousOutputModel5.reset();
        continuousOutputModel5.reset();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel15 = new org.apache.commons.math.ode.ContinuousOutputModel();
        continuousOutputModel15.reset();
        continuousOutputModel15.reset();
        continuousOutputModel5.append(continuousOutputModel15);
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel19 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean20 = continuousOutputModel19.requiresDenseOutput();
        boolean boolean21 = continuousOutputModel19.requiresDenseOutput();
        continuousOutputModel19.reset();
        continuousOutputModel19.reset();
        continuousOutputModel5.append(continuousOutputModel19);
        // The following exception was thrown during execution in test generation
        try {
            double double25 = continuousOutputModel5.getInterpolatedTime();
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
    }

    @Test
    public void test01400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01400");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double1 = continuousOutputModel0.getFinalTime();
        double double2 = continuousOutputModel0.getInitialTime();
        boolean boolean3 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel5 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean6 = continuousOutputModel5.requiresDenseOutput();
        double double7 = continuousOutputModel5.getInitialTime();
        continuousOutputModel0.append(continuousOutputModel5);
        boolean boolean9 = continuousOutputModel5.requiresDenseOutput();
        boolean boolean10 = continuousOutputModel5.requiresDenseOutput();
        boolean boolean11 = continuousOutputModel5.requiresDenseOutput();
        // The following exception was thrown during execution in test generation
        try {
            double double12 = continuousOutputModel5.getInterpolatedTime();
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test01401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01401");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel1 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean2 = continuousOutputModel1.requiresDenseOutput();
        boolean boolean3 = continuousOutputModel1.requiresDenseOutput();
        double double4 = continuousOutputModel1.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel5 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean6 = continuousOutputModel5.requiresDenseOutput();
        continuousOutputModel1.append(continuousOutputModel5);
        continuousOutputModel0.append(continuousOutputModel5);
        boolean boolean9 = continuousOutputModel0.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel10 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double11 = continuousOutputModel10.getFinalTime();
        double double12 = continuousOutputModel10.getInitialTime();
        double double13 = continuousOutputModel10.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel14 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double15 = continuousOutputModel14.getFinalTime();
        double double16 = continuousOutputModel14.getInitialTime();
        continuousOutputModel10.append(continuousOutputModel14);
        double double18 = continuousOutputModel10.getInitialTime();
        double double19 = continuousOutputModel10.getInitialTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel20 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double21 = continuousOutputModel20.getFinalTime();
        double double22 = continuousOutputModel20.getInitialTime();
        continuousOutputModel20.reset();
        double double24 = continuousOutputModel20.getInitialTime();
        continuousOutputModel10.append(continuousOutputModel20);
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel26 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double27 = continuousOutputModel26.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel28 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean29 = continuousOutputModel28.requiresDenseOutput();
        double double30 = continuousOutputModel28.getInitialTime();
        boolean boolean31 = continuousOutputModel28.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel32 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double33 = continuousOutputModel32.getFinalTime();
        double double34 = continuousOutputModel32.getInitialTime();
        boolean boolean35 = continuousOutputModel32.requiresDenseOutput();
        continuousOutputModel32.reset();
        boolean boolean37 = continuousOutputModel32.requiresDenseOutput();
        continuousOutputModel28.append(continuousOutputModel32);
        continuousOutputModel26.append(continuousOutputModel28);
        continuousOutputModel10.append(continuousOutputModel28);
        double double41 = continuousOutputModel10.getInitialTime();
        continuousOutputModel0.append(continuousOutputModel10);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray43 = continuousOutputModel0.getInterpolatedState();
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double41));
    }

    @Test
    public void test01402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01402");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double1 = continuousOutputModel0.getFinalTime();
        double double2 = continuousOutputModel0.getInitialTime();
        boolean boolean3 = continuousOutputModel0.requiresDenseOutput();
        double double4 = continuousOutputModel0.getInitialTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel5 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean6 = continuousOutputModel5.requiresDenseOutput();
        boolean boolean7 = continuousOutputModel5.requiresDenseOutput();
        continuousOutputModel5.reset();
        boolean boolean9 = continuousOutputModel5.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel10 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double11 = continuousOutputModel10.getFinalTime();
        double double12 = continuousOutputModel10.getInitialTime();
        boolean boolean13 = continuousOutputModel10.requiresDenseOutput();
        continuousOutputModel5.append(continuousOutputModel10);
        continuousOutputModel0.append(continuousOutputModel5);
        boolean boolean16 = continuousOutputModel5.requiresDenseOutput();
        double double17 = continuousOutputModel5.getInitialTime();
        continuousOutputModel5.reset();
        boolean boolean19 = continuousOutputModel5.requiresDenseOutput();
        continuousOutputModel5.reset();
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
    }

    @Test
    public void test01403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01403");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean1 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean2 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        boolean boolean4 = continuousOutputModel0.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel5 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double6 = continuousOutputModel5.getFinalTime();
        double double7 = continuousOutputModel5.getInitialTime();
        boolean boolean8 = continuousOutputModel5.requiresDenseOutput();
        continuousOutputModel0.append(continuousOutputModel5);
        double double10 = continuousOutputModel5.getInitialTime();
        continuousOutputModel5.reset();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel12 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double13 = continuousOutputModel12.getFinalTime();
        double double14 = continuousOutputModel12.getInitialTime();
        double double15 = continuousOutputModel12.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel16 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double17 = continuousOutputModel16.getFinalTime();
        double double18 = continuousOutputModel16.getInitialTime();
        continuousOutputModel12.append(continuousOutputModel16);
        double double20 = continuousOutputModel12.getFinalTime();
        boolean boolean21 = continuousOutputModel12.requiresDenseOutput();
        boolean boolean22 = continuousOutputModel12.requiresDenseOutput();
        boolean boolean23 = continuousOutputModel12.requiresDenseOutput();
        boolean boolean24 = continuousOutputModel12.requiresDenseOutput();
        boolean boolean25 = continuousOutputModel12.requiresDenseOutput();
        continuousOutputModel5.append(continuousOutputModel12);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray27 = continuousOutputModel5.getInterpolatedState();
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
    }

    @Test
    public void test01404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01404");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean1 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean2 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        boolean boolean4 = continuousOutputModel0.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel5 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double6 = continuousOutputModel5.getFinalTime();
        double double7 = continuousOutputModel5.getInitialTime();
        boolean boolean8 = continuousOutputModel5.requiresDenseOutput();
        continuousOutputModel0.append(continuousOutputModel5);
        double double10 = continuousOutputModel5.getInitialTime();
        continuousOutputModel5.reset();
        boolean boolean12 = continuousOutputModel5.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel13 = new org.apache.commons.math.ode.ContinuousOutputModel();
        continuousOutputModel13.reset();
        continuousOutputModel13.reset();
        continuousOutputModel5.append(continuousOutputModel13);
        continuousOutputModel5.reset();
        double double18 = continuousOutputModel5.getInitialTime();
        // The following exception was thrown during execution in test generation
        try {
            double double19 = continuousOutputModel5.getInterpolatedTime();
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
    }

    @Test
    public void test01405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01405");
        java.io.IOException iOException9 = new java.io.IOException("hi!");
        org.apache.commons.math.ode.DerivativeException derivativeException10 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) iOException9);
        org.apache.commons.math.MathException mathException11 = new org.apache.commons.math.MathException("hi!", (java.lang.Throwable) iOException9);
        java.lang.Object[] objArray12 = mathException11.getArguments();
        org.apache.commons.math.MathException mathException13 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: ", objArray12);
        org.apache.commons.math.MathException mathException14 = new org.apache.commons.math.MathException("hi!", objArray12);
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel16 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double17 = continuousOutputModel16.getFinalTime();
        double double18 = continuousOutputModel16.getInitialTime();
        boolean boolean19 = continuousOutputModel16.requiresDenseOutput();
        double double20 = continuousOutputModel16.getInitialTime();
        java.io.IOException iOException23 = new java.io.IOException("hi!");
        org.apache.commons.math.ode.DerivativeException derivativeException24 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) iOException23);
        org.apache.commons.math.MathException mathException25 = new org.apache.commons.math.MathException("hi!", (java.lang.Throwable) iOException23);
        java.io.IOException iOException28 = new java.io.IOException("hi!");
        java.io.IOException iOException29 = new java.io.IOException("", (java.lang.Throwable) iOException28);
        org.apache.commons.math.ode.DerivativeException derivativeException30 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) iOException28);
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel32 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double33 = continuousOutputModel32.getFinalTime();
        double double34 = continuousOutputModel32.getInitialTime();
        java.lang.Object[] objArray35 = new java.lang.Object[] { double20, mathException25, iOException28, false, continuousOutputModel32 };
        java.lang.String[] strArray44 = new java.lang.String[] { "hi!", "org.apache.commons.math.MathException: ", "hi!", "org.apache.commons.math.MathException: ", "", "" };
        org.apache.commons.math.ode.DerivativeException derivativeException45 = new org.apache.commons.math.ode.DerivativeException("", strArray44);
        java.io.IOException iOException49 = new java.io.IOException("hi!");
        org.apache.commons.math.ode.DerivativeException derivativeException50 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) iOException49);
        org.apache.commons.math.MathException mathException51 = new org.apache.commons.math.MathException("hi!", (java.lang.Throwable) iOException49);
        java.lang.Object[] objArray52 = mathException51.getArguments();
        org.apache.commons.math.MathException mathException53 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: ", (java.lang.Throwable) mathException51);
        org.apache.commons.math.MathException mathException54 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: hi!", (java.lang.Object[]) strArray44, (java.lang.Throwable) mathException51);
        org.apache.commons.math.MathException mathException55 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: hi!", objArray35, (java.lang.Throwable) mathException54);
        org.apache.commons.math.MathException mathException56 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: ", objArray12, (java.lang.Throwable) mathException55);
        java.io.IOException iOException59 = new java.io.IOException("hi!");
        java.io.IOException iOException60 = new java.io.IOException("", (java.lang.Throwable) iOException59);
        java.io.IOException iOException61 = new java.io.IOException((java.lang.Throwable) iOException60);
        org.apache.commons.math.MathException mathException62 = new org.apache.commons.math.MathException("java.io.IOException: hi!", objArray12, (java.lang.Throwable) iOException61);
        java.lang.Throwable[] throwableArray63 = mathException62.getSuppressed();
        java.lang.String[] strArray73 = new java.lang.String[] { "hi!", "org.apache.commons.math.MathException: ", "hi!", "org.apache.commons.math.MathException: ", "", "" };
        org.apache.commons.math.ode.DerivativeException derivativeException74 = new org.apache.commons.math.ode.DerivativeException("", strArray73);
        org.apache.commons.math.ode.DerivativeException derivativeException75 = new org.apache.commons.math.ode.DerivativeException("hi!", strArray73);
        org.apache.commons.math.ode.DerivativeException derivativeException76 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: ", strArray73);
        org.apache.commons.math.MathException mathException77 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: hi!", (java.lang.Object[]) throwableArray63, (java.lang.Throwable) derivativeException76);
        org.apache.commons.math.MathException mathException78 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: hi!", (java.lang.Throwable) derivativeException76);
        org.apache.commons.math.MathException mathException79 = new org.apache.commons.math.MathException("", (java.lang.Throwable) mathException78);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray52), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray52), "[]");
        org.junit.Assert.assertNotNull(throwableArray63);
        org.junit.Assert.assertNotNull(strArray73);
    }

    @Test
    public void test01406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01406");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double1 = continuousOutputModel0.getFinalTime();
        double double2 = continuousOutputModel0.getInitialTime();
        double double3 = continuousOutputModel0.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel4 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double5 = continuousOutputModel4.getFinalTime();
        double double6 = continuousOutputModel4.getInitialTime();
        continuousOutputModel0.append(continuousOutputModel4);
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel8 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean9 = continuousOutputModel8.requiresDenseOutput();
        double double10 = continuousOutputModel8.getInitialTime();
        double double11 = continuousOutputModel8.getInitialTime();
        continuousOutputModel0.append(continuousOutputModel8);
        boolean boolean13 = continuousOutputModel8.requiresDenseOutput();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator14 = null;
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel8.handleStep(stepInterpolator14, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test01407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01407");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean1 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean2 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        boolean boolean4 = continuousOutputModel0.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel5 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double6 = continuousOutputModel5.getFinalTime();
        double double7 = continuousOutputModel5.getInitialTime();
        boolean boolean8 = continuousOutputModel5.requiresDenseOutput();
        continuousOutputModel0.append(continuousOutputModel5);
        double double10 = continuousOutputModel5.getInitialTime();
        double double11 = continuousOutputModel5.getFinalTime();
        continuousOutputModel5.reset();
        boolean boolean13 = continuousOutputModel5.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel14 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double15 = continuousOutputModel14.getFinalTime();
        double double16 = continuousOutputModel14.getInitialTime();
        boolean boolean17 = continuousOutputModel14.requiresDenseOutput();
        continuousOutputModel14.reset();
        double double19 = continuousOutputModel14.getFinalTime();
        boolean boolean20 = continuousOutputModel14.requiresDenseOutput();
        continuousOutputModel5.append(continuousOutputModel14);
        org.apache.commons.math.ode.StepInterpolator stepInterpolator22 = null;
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel14.handleStep(stepInterpolator22, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
    }

    @Test
    public void test01408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01408");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double1 = continuousOutputModel0.getFinalTime();
        double double2 = continuousOutputModel0.getInitialTime();
        double double3 = continuousOutputModel0.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel4 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double5 = continuousOutputModel4.getFinalTime();
        double double6 = continuousOutputModel4.getInitialTime();
        continuousOutputModel0.append(continuousOutputModel4);
        double double8 = continuousOutputModel0.getFinalTime();
        boolean boolean9 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean10 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean11 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean12 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel14 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean15 = continuousOutputModel14.requiresDenseOutput();
        continuousOutputModel14.reset();
        double double17 = continuousOutputModel14.getInitialTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel18 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean19 = continuousOutputModel18.requiresDenseOutput();
        boolean boolean20 = continuousOutputModel18.requiresDenseOutput();
        double double21 = continuousOutputModel18.getFinalTime();
        double double22 = continuousOutputModel18.getInitialTime();
        boolean boolean23 = continuousOutputModel18.requiresDenseOutput();
        continuousOutputModel14.append(continuousOutputModel18);
        continuousOutputModel0.append(continuousOutputModel18);
        continuousOutputModel0.reset();
        boolean boolean27 = continuousOutputModel0.requiresDenseOutput();
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray28 = continuousOutputModel0.getInterpolatedState();
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
    }

    @Test
    public void test01409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01409");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean1 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean2 = continuousOutputModel0.requiresDenseOutput();
        double double3 = continuousOutputModel0.getFinalTime();
        continuousOutputModel0.reset();
        boolean boolean5 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel7 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean8 = continuousOutputModel7.requiresDenseOutput();
        boolean boolean9 = continuousOutputModel7.requiresDenseOutput();
        double double10 = continuousOutputModel7.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel11 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean12 = continuousOutputModel11.requiresDenseOutput();
        continuousOutputModel7.append(continuousOutputModel11);
        boolean boolean14 = continuousOutputModel7.requiresDenseOutput();
        continuousOutputModel7.reset();
        continuousOutputModel0.append(continuousOutputModel7);
        continuousOutputModel7.reset();
        continuousOutputModel7.reset();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel19 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double20 = continuousOutputModel19.getFinalTime();
        double double21 = continuousOutputModel19.getInitialTime();
        boolean boolean22 = continuousOutputModel19.requiresDenseOutput();
        double double23 = continuousOutputModel19.getInitialTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel24 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean25 = continuousOutputModel24.requiresDenseOutput();
        boolean boolean26 = continuousOutputModel24.requiresDenseOutput();
        continuousOutputModel24.reset();
        boolean boolean28 = continuousOutputModel24.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel29 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double30 = continuousOutputModel29.getFinalTime();
        double double31 = continuousOutputModel29.getInitialTime();
        boolean boolean32 = continuousOutputModel29.requiresDenseOutput();
        continuousOutputModel24.append(continuousOutputModel29);
        continuousOutputModel19.append(continuousOutputModel24);
        continuousOutputModel24.reset();
        continuousOutputModel24.reset();
        continuousOutputModel24.reset();
        boolean boolean38 = continuousOutputModel24.requiresDenseOutput();
        continuousOutputModel7.append(continuousOutputModel24);
        // The following exception was thrown during execution in test generation
        try {
            double double40 = continuousOutputModel24.getInterpolatedTime();
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
    }

    @Test
    public void test01410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01410");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double1 = continuousOutputModel0.getFinalTime();
        double double2 = continuousOutputModel0.getInitialTime();
        boolean boolean3 = continuousOutputModel0.requiresDenseOutput();
        double double4 = continuousOutputModel0.getInitialTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel5 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean6 = continuousOutputModel5.requiresDenseOutput();
        boolean boolean7 = continuousOutputModel5.requiresDenseOutput();
        continuousOutputModel5.reset();
        boolean boolean9 = continuousOutputModel5.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel10 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double11 = continuousOutputModel10.getFinalTime();
        double double12 = continuousOutputModel10.getInitialTime();
        boolean boolean13 = continuousOutputModel10.requiresDenseOutput();
        continuousOutputModel5.append(continuousOutputModel10);
        continuousOutputModel0.append(continuousOutputModel5);
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel16 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean17 = continuousOutputModel16.requiresDenseOutput();
        double double18 = continuousOutputModel16.getInitialTime();
        boolean boolean19 = continuousOutputModel16.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel20 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean21 = continuousOutputModel20.requiresDenseOutput();
        boolean boolean22 = continuousOutputModel20.requiresDenseOutput();
        continuousOutputModel16.append(continuousOutputModel20);
        continuousOutputModel5.append(continuousOutputModel16);
        boolean boolean25 = continuousOutputModel16.requiresDenseOutput();
        continuousOutputModel16.reset();
        // The following exception was thrown during execution in test generation
        try {
            double double27 = continuousOutputModel16.getInterpolatedTime();
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
    }

    @Test
    public void test01411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01411");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double1 = continuousOutputModel0.getFinalTime();
        double double2 = continuousOutputModel0.getInitialTime();
        double double3 = continuousOutputModel0.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel4 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double5 = continuousOutputModel4.getFinalTime();
        double double6 = continuousOutputModel4.getInitialTime();
        continuousOutputModel0.append(continuousOutputModel4);
        boolean boolean8 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean9 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator11 = null;
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel0.handleStep(stepInterpolator11, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test01412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01412");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double1 = continuousOutputModel0.getFinalTime();
        double double2 = continuousOutputModel0.getInitialTime();
        boolean boolean3 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        continuousOutputModel0.reset();
        java.lang.Class<?> wildcardClass6 = continuousOutputModel0.getClass();
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test01413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01413");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel1 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean2 = continuousOutputModel1.requiresDenseOutput();
        boolean boolean3 = continuousOutputModel1.requiresDenseOutput();
        double double4 = continuousOutputModel1.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel5 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean6 = continuousOutputModel5.requiresDenseOutput();
        continuousOutputModel1.append(continuousOutputModel5);
        continuousOutputModel0.append(continuousOutputModel5);
        boolean boolean9 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel0.setInterpolatedTime(100.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test01414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01414");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double1 = continuousOutputModel0.getFinalTime();
        double double2 = continuousOutputModel0.getInitialTime();
        double double3 = continuousOutputModel0.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel4 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double5 = continuousOutputModel4.getFinalTime();
        double double6 = continuousOutputModel4.getInitialTime();
        continuousOutputModel0.append(continuousOutputModel4);
        continuousOutputModel4.reset();
        boolean boolean9 = continuousOutputModel4.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel10 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double11 = continuousOutputModel10.getFinalTime();
        double double12 = continuousOutputModel10.getInitialTime();
        boolean boolean13 = continuousOutputModel10.requiresDenseOutput();
        double double14 = continuousOutputModel10.getInitialTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel15 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean16 = continuousOutputModel15.requiresDenseOutput();
        boolean boolean17 = continuousOutputModel15.requiresDenseOutput();
        continuousOutputModel15.reset();
        boolean boolean19 = continuousOutputModel15.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel20 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double21 = continuousOutputModel20.getFinalTime();
        double double22 = continuousOutputModel20.getInitialTime();
        boolean boolean23 = continuousOutputModel20.requiresDenseOutput();
        continuousOutputModel15.append(continuousOutputModel20);
        continuousOutputModel10.append(continuousOutputModel15);
        continuousOutputModel10.reset();
        continuousOutputModel4.append(continuousOutputModel10);
        // The following exception was thrown during execution in test generation
        try {
            double double28 = continuousOutputModel4.getInterpolatedTime();
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
    }

    @Test
    public void test01415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01415");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double1 = continuousOutputModel0.getFinalTime();
        double double2 = continuousOutputModel0.getInitialTime();
        double double3 = continuousOutputModel0.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel4 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double5 = continuousOutputModel4.getFinalTime();
        double double6 = continuousOutputModel4.getInitialTime();
        continuousOutputModel0.append(continuousOutputModel4);
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel8 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean9 = continuousOutputModel8.requiresDenseOutput();
        double double10 = continuousOutputModel8.getInitialTime();
        double double11 = continuousOutputModel8.getInitialTime();
        continuousOutputModel0.append(continuousOutputModel8);
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel13 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean14 = continuousOutputModel13.requiresDenseOutput();
        boolean boolean15 = continuousOutputModel13.requiresDenseOutput();
        double double16 = continuousOutputModel13.getFinalTime();
        continuousOutputModel13.reset();
        boolean boolean18 = continuousOutputModel13.requiresDenseOutput();
        continuousOutputModel13.reset();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel20 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean21 = continuousOutputModel20.requiresDenseOutput();
        boolean boolean22 = continuousOutputModel20.requiresDenseOutput();
        double double23 = continuousOutputModel20.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel24 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean25 = continuousOutputModel24.requiresDenseOutput();
        continuousOutputModel20.append(continuousOutputModel24);
        boolean boolean27 = continuousOutputModel20.requiresDenseOutput();
        continuousOutputModel20.reset();
        continuousOutputModel13.append(continuousOutputModel20);
        boolean boolean30 = continuousOutputModel13.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel31 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double32 = continuousOutputModel31.getFinalTime();
        double double33 = continuousOutputModel31.getInitialTime();
        boolean boolean34 = continuousOutputModel31.requiresDenseOutput();
        continuousOutputModel13.append(continuousOutputModel31);
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel36 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double37 = continuousOutputModel36.getFinalTime();
        double double38 = continuousOutputModel36.getInitialTime();
        boolean boolean39 = continuousOutputModel36.requiresDenseOutput();
        double double40 = continuousOutputModel36.getInitialTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel41 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean42 = continuousOutputModel41.requiresDenseOutput();
        boolean boolean43 = continuousOutputModel41.requiresDenseOutput();
        continuousOutputModel41.reset();
        boolean boolean45 = continuousOutputModel41.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel46 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double47 = continuousOutputModel46.getFinalTime();
        double double48 = continuousOutputModel46.getInitialTime();
        boolean boolean49 = continuousOutputModel46.requiresDenseOutput();
        continuousOutputModel41.append(continuousOutputModel46);
        continuousOutputModel36.append(continuousOutputModel41);
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel52 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean53 = continuousOutputModel52.requiresDenseOutput();
        double double54 = continuousOutputModel52.getInitialTime();
        boolean boolean55 = continuousOutputModel52.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel56 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean57 = continuousOutputModel56.requiresDenseOutput();
        boolean boolean58 = continuousOutputModel56.requiresDenseOutput();
        continuousOutputModel52.append(continuousOutputModel56);
        continuousOutputModel41.append(continuousOutputModel52);
        continuousOutputModel31.append(continuousOutputModel41);
        continuousOutputModel8.append(continuousOutputModel41);
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel8.setInterpolatedTime((double) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
    }

    @Test
    public void test01416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01416");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double1 = continuousOutputModel0.getFinalTime();
        continuousOutputModel0.reset();
        continuousOutputModel0.reset();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel4 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double5 = continuousOutputModel4.getFinalTime();
        double double6 = continuousOutputModel4.getInitialTime();
        double double7 = continuousOutputModel4.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel8 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double9 = continuousOutputModel8.getFinalTime();
        double double10 = continuousOutputModel8.getInitialTime();
        continuousOutputModel4.append(continuousOutputModel8);
        double double12 = continuousOutputModel4.getInitialTime();
        double double13 = continuousOutputModel4.getFinalTime();
        continuousOutputModel0.append(continuousOutputModel4);
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel4.setInterpolatedTime(Double.NaN);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
    }

    @Test
    public void test01417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01417");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean1 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean2 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        boolean boolean4 = continuousOutputModel0.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel5 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double6 = continuousOutputModel5.getFinalTime();
        double double7 = continuousOutputModel5.getInitialTime();
        boolean boolean8 = continuousOutputModel5.requiresDenseOutput();
        continuousOutputModel0.append(continuousOutputModel5);
        continuousOutputModel5.reset();
        double double11 = continuousOutputModel5.getInitialTime();
        double double12 = continuousOutputModel5.getFinalTime();
        continuousOutputModel5.reset();
        boolean boolean14 = continuousOutputModel5.requiresDenseOutput();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator15 = null;
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel5.handleStep(stepInterpolator15, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    }

    @Test
    public void test01418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01418");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean1 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean2 = continuousOutputModel0.requiresDenseOutput();
        double double3 = continuousOutputModel0.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel4 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean5 = continuousOutputModel4.requiresDenseOutput();
        continuousOutputModel0.append(continuousOutputModel4);
        continuousOutputModel0.reset();
        boolean boolean8 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        boolean boolean10 = continuousOutputModel0.requiresDenseOutput();
        double double11 = continuousOutputModel0.getFinalTime();
        continuousOutputModel0.reset();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator13 = null;
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel0.handleStep(stepInterpolator13, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
    }

    @Test
    public void test01419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01419");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean1 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean2 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        boolean boolean4 = continuousOutputModel0.requiresDenseOutput();
        double double5 = continuousOutputModel0.getFinalTime();
        boolean boolean6 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        continuousOutputModel0.reset();
        boolean boolean9 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean10 = continuousOutputModel0.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel11 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double12 = continuousOutputModel11.getFinalTime();
        double double13 = continuousOutputModel11.getInitialTime();
        boolean boolean14 = continuousOutputModel11.requiresDenseOutput();
        double double15 = continuousOutputModel11.getInitialTime();
        continuousOutputModel0.append(continuousOutputModel11);
        org.apache.commons.math.ode.StepInterpolator stepInterpolator17 = null;
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel11.handleStep(stepInterpolator17, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
    }

    @Test
    public void test01420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01420");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double1 = continuousOutputModel0.getFinalTime();
        continuousOutputModel0.reset();
        continuousOutputModel0.reset();
        boolean boolean4 = continuousOutputModel0.requiresDenseOutput();
        double double5 = continuousOutputModel0.getFinalTime();
        double double6 = continuousOutputModel0.getFinalTime();
        // The following exception was thrown during execution in test generation
        try {
            double double7 = continuousOutputModel0.getInterpolatedTime();
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
    }

    @Test
    public void test01421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01421");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean1 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean2 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        boolean boolean4 = continuousOutputModel0.requiresDenseOutput();
        double double5 = continuousOutputModel0.getFinalTime();
        continuousOutputModel0.reset();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel7 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double8 = continuousOutputModel7.getFinalTime();
        double double9 = continuousOutputModel7.getInitialTime();
        boolean boolean10 = continuousOutputModel7.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel11 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean12 = continuousOutputModel11.requiresDenseOutput();
        double double13 = continuousOutputModel11.getInitialTime();
        boolean boolean14 = continuousOutputModel11.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel15 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double16 = continuousOutputModel15.getFinalTime();
        double double17 = continuousOutputModel15.getInitialTime();
        boolean boolean18 = continuousOutputModel15.requiresDenseOutput();
        continuousOutputModel15.reset();
        boolean boolean20 = continuousOutputModel15.requiresDenseOutput();
        continuousOutputModel11.append(continuousOutputModel15);
        continuousOutputModel7.append(continuousOutputModel11);
        double double23 = continuousOutputModel11.getInitialTime();
        continuousOutputModel0.append(continuousOutputModel11);
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel25 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double26 = continuousOutputModel25.getFinalTime();
        double double27 = continuousOutputModel25.getInitialTime();
        boolean boolean28 = continuousOutputModel25.requiresDenseOutput();
        boolean boolean29 = continuousOutputModel25.requiresDenseOutput();
        continuousOutputModel0.append(continuousOutputModel25);
        continuousOutputModel0.reset();
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray32 = continuousOutputModel0.getInterpolatedState();
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
    }

    @Test
    public void test01422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01422");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean1 = continuousOutputModel0.requiresDenseOutput();
        double double2 = continuousOutputModel0.getInitialTime();
        continuousOutputModel0.reset();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel4 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean5 = continuousOutputModel4.requiresDenseOutput();
        boolean boolean6 = continuousOutputModel4.requiresDenseOutput();
        continuousOutputModel4.reset();
        boolean boolean8 = continuousOutputModel4.requiresDenseOutput();
        double double9 = continuousOutputModel4.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel10 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double11 = continuousOutputModel10.getFinalTime();
        double double12 = continuousOutputModel10.getInitialTime();
        boolean boolean13 = continuousOutputModel10.requiresDenseOutput();
        continuousOutputModel10.reset();
        double double15 = continuousOutputModel10.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel16 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double17 = continuousOutputModel16.getFinalTime();
        double double18 = continuousOutputModel16.getInitialTime();
        continuousOutputModel10.append(continuousOutputModel16);
        continuousOutputModel4.append(continuousOutputModel16);
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel21 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean22 = continuousOutputModel21.requiresDenseOutput();
        double double23 = continuousOutputModel21.getInitialTime();
        boolean boolean24 = continuousOutputModel21.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel25 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double26 = continuousOutputModel25.getFinalTime();
        double double27 = continuousOutputModel25.getInitialTime();
        boolean boolean28 = continuousOutputModel25.requiresDenseOutput();
        continuousOutputModel25.reset();
        boolean boolean30 = continuousOutputModel25.requiresDenseOutput();
        continuousOutputModel21.append(continuousOutputModel25);
        continuousOutputModel25.reset();
        double double33 = continuousOutputModel25.getInitialTime();
        continuousOutputModel25.reset();
        boolean boolean35 = continuousOutputModel25.requiresDenseOutput();
        continuousOutputModel16.append(continuousOutputModel25);
        continuousOutputModel0.append(continuousOutputModel16);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray38 = continuousOutputModel16.getInterpolatedState();
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
    }

    @Test
    public void test01423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01423");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean1 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean2 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        boolean boolean4 = continuousOutputModel0.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel5 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double6 = continuousOutputModel5.getFinalTime();
        double double7 = continuousOutputModel5.getInitialTime();
        boolean boolean8 = continuousOutputModel5.requiresDenseOutput();
        continuousOutputModel0.append(continuousOutputModel5);
        continuousOutputModel5.reset();
        double double11 = continuousOutputModel5.getInitialTime();
        double double12 = continuousOutputModel5.getFinalTime();
        continuousOutputModel5.reset();
        boolean boolean14 = continuousOutputModel5.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel15 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean16 = continuousOutputModel15.requiresDenseOutput();
        double double17 = continuousOutputModel15.getInitialTime();
        boolean boolean18 = continuousOutputModel15.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel19 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double20 = continuousOutputModel19.getFinalTime();
        double double21 = continuousOutputModel19.getInitialTime();
        boolean boolean22 = continuousOutputModel19.requiresDenseOutput();
        continuousOutputModel19.reset();
        boolean boolean24 = continuousOutputModel19.requiresDenseOutput();
        continuousOutputModel15.append(continuousOutputModel19);
        continuousOutputModel19.reset();
        continuousOutputModel19.reset();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel28 = new org.apache.commons.math.ode.ContinuousOutputModel();
        continuousOutputModel28.reset();
        boolean boolean30 = continuousOutputModel28.requiresDenseOutput();
        continuousOutputModel19.append(continuousOutputModel28);
        continuousOutputModel5.append(continuousOutputModel19);
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel19.setInterpolatedTime((-1.0d));
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
    }

    @Test
    public void test01424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01424");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean1 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean2 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        boolean boolean4 = continuousOutputModel0.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel5 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double6 = continuousOutputModel5.getFinalTime();
        double double7 = continuousOutputModel5.getInitialTime();
        boolean boolean8 = continuousOutputModel5.requiresDenseOutput();
        continuousOutputModel0.append(continuousOutputModel5);
        boolean boolean10 = continuousOutputModel5.requiresDenseOutput();
        boolean boolean11 = continuousOutputModel5.requiresDenseOutput();
        continuousOutputModel5.reset();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel13 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean14 = continuousOutputModel13.requiresDenseOutput();
        boolean boolean15 = continuousOutputModel13.requiresDenseOutput();
        continuousOutputModel13.reset();
        boolean boolean17 = continuousOutputModel13.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel18 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double19 = continuousOutputModel18.getFinalTime();
        double double20 = continuousOutputModel18.getInitialTime();
        boolean boolean21 = continuousOutputModel18.requiresDenseOutput();
        continuousOutputModel13.append(continuousOutputModel18);
        continuousOutputModel18.reset();
        double double24 = continuousOutputModel18.getInitialTime();
        double double25 = continuousOutputModel18.getFinalTime();
        continuousOutputModel18.reset();
        continuousOutputModel18.reset();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel28 = new org.apache.commons.math.ode.ContinuousOutputModel();
        continuousOutputModel28.reset();
        continuousOutputModel28.reset();
        continuousOutputModel18.append(continuousOutputModel28);
        continuousOutputModel5.append(continuousOutputModel28);
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel5.setInterpolatedTime((double) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue(Double.isNaN(double25));
    }

    @Test
    public void test01425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01425");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double1 = continuousOutputModel0.getFinalTime();
        double double2 = continuousOutputModel0.getInitialTime();
        double double3 = continuousOutputModel0.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel4 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double5 = continuousOutputModel4.getFinalTime();
        double double6 = continuousOutputModel4.getInitialTime();
        continuousOutputModel0.append(continuousOutputModel4);
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel8 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean9 = continuousOutputModel8.requiresDenseOutput();
        double double10 = continuousOutputModel8.getInitialTime();
        double double11 = continuousOutputModel8.getInitialTime();
        continuousOutputModel0.append(continuousOutputModel8);
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel13 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean14 = continuousOutputModel13.requiresDenseOutput();
        boolean boolean15 = continuousOutputModel13.requiresDenseOutput();
        double double16 = continuousOutputModel13.getFinalTime();
        continuousOutputModel13.reset();
        boolean boolean18 = continuousOutputModel13.requiresDenseOutput();
        continuousOutputModel13.reset();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel20 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean21 = continuousOutputModel20.requiresDenseOutput();
        boolean boolean22 = continuousOutputModel20.requiresDenseOutput();
        double double23 = continuousOutputModel20.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel24 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean25 = continuousOutputModel24.requiresDenseOutput();
        continuousOutputModel20.append(continuousOutputModel24);
        boolean boolean27 = continuousOutputModel20.requiresDenseOutput();
        continuousOutputModel20.reset();
        continuousOutputModel13.append(continuousOutputModel20);
        boolean boolean30 = continuousOutputModel13.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel31 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double32 = continuousOutputModel31.getFinalTime();
        double double33 = continuousOutputModel31.getInitialTime();
        boolean boolean34 = continuousOutputModel31.requiresDenseOutput();
        continuousOutputModel13.append(continuousOutputModel31);
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel36 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double37 = continuousOutputModel36.getFinalTime();
        double double38 = continuousOutputModel36.getInitialTime();
        boolean boolean39 = continuousOutputModel36.requiresDenseOutput();
        double double40 = continuousOutputModel36.getInitialTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel41 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean42 = continuousOutputModel41.requiresDenseOutput();
        boolean boolean43 = continuousOutputModel41.requiresDenseOutput();
        continuousOutputModel41.reset();
        boolean boolean45 = continuousOutputModel41.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel46 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double47 = continuousOutputModel46.getFinalTime();
        double double48 = continuousOutputModel46.getInitialTime();
        boolean boolean49 = continuousOutputModel46.requiresDenseOutput();
        continuousOutputModel41.append(continuousOutputModel46);
        continuousOutputModel36.append(continuousOutputModel41);
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel52 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean53 = continuousOutputModel52.requiresDenseOutput();
        double double54 = continuousOutputModel52.getInitialTime();
        boolean boolean55 = continuousOutputModel52.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel56 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean57 = continuousOutputModel56.requiresDenseOutput();
        boolean boolean58 = continuousOutputModel56.requiresDenseOutput();
        continuousOutputModel52.append(continuousOutputModel56);
        continuousOutputModel41.append(continuousOutputModel52);
        continuousOutputModel31.append(continuousOutputModel41);
        continuousOutputModel8.append(continuousOutputModel41);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray63 = continuousOutputModel41.getInterpolatedState();
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double54));
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
    }

    @Test
    public void test01426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01426");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean1 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean2 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        boolean boolean4 = continuousOutputModel0.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel5 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double6 = continuousOutputModel5.getFinalTime();
        double double7 = continuousOutputModel5.getInitialTime();
        boolean boolean8 = continuousOutputModel5.requiresDenseOutput();
        continuousOutputModel0.append(continuousOutputModel5);
        continuousOutputModel5.reset();
        double double11 = continuousOutputModel5.getInitialTime();
        double double12 = continuousOutputModel5.getFinalTime();
        continuousOutputModel5.reset();
        continuousOutputModel5.reset();
        // The following exception was thrown during execution in test generation
        try {
            double double15 = continuousOutputModel5.getInterpolatedTime();
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
    }

    @Test
    public void test01427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01427");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double1 = continuousOutputModel0.getFinalTime();
        double double2 = continuousOutputModel0.getInitialTime();
        boolean boolean3 = continuousOutputModel0.requiresDenseOutput();
        double double4 = continuousOutputModel0.getInitialTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel5 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean6 = continuousOutputModel5.requiresDenseOutput();
        boolean boolean7 = continuousOutputModel5.requiresDenseOutput();
        continuousOutputModel5.reset();
        boolean boolean9 = continuousOutputModel5.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel10 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double11 = continuousOutputModel10.getFinalTime();
        double double12 = continuousOutputModel10.getInitialTime();
        boolean boolean13 = continuousOutputModel10.requiresDenseOutput();
        continuousOutputModel5.append(continuousOutputModel10);
        continuousOutputModel0.append(continuousOutputModel5);
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel16 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean17 = continuousOutputModel16.requiresDenseOutput();
        double double18 = continuousOutputModel16.getInitialTime();
        boolean boolean19 = continuousOutputModel16.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel20 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean21 = continuousOutputModel20.requiresDenseOutput();
        boolean boolean22 = continuousOutputModel20.requiresDenseOutput();
        continuousOutputModel16.append(continuousOutputModel20);
        continuousOutputModel5.append(continuousOutputModel16);
        double double25 = continuousOutputModel16.getInitialTime();
        continuousOutputModel16.reset();
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray27 = continuousOutputModel16.getInterpolatedState();
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double25));
    }

    @Test
    public void test01428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01428");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean1 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean2 = continuousOutputModel0.requiresDenseOutput();
        double double3 = continuousOutputModel0.getFinalTime();
        continuousOutputModel0.reset();
        boolean boolean5 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel7 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean8 = continuousOutputModel7.requiresDenseOutput();
        boolean boolean9 = continuousOutputModel7.requiresDenseOutput();
        double double10 = continuousOutputModel7.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel11 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean12 = continuousOutputModel11.requiresDenseOutput();
        continuousOutputModel7.append(continuousOutputModel11);
        boolean boolean14 = continuousOutputModel7.requiresDenseOutput();
        continuousOutputModel7.reset();
        continuousOutputModel0.append(continuousOutputModel7);
        boolean boolean17 = continuousOutputModel0.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel18 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double19 = continuousOutputModel18.getFinalTime();
        double double20 = continuousOutputModel18.getInitialTime();
        boolean boolean21 = continuousOutputModel18.requiresDenseOutput();
        continuousOutputModel0.append(continuousOutputModel18);
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel0.setInterpolatedTime((double) 100.0f);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
    }

    @Test
    public void test01429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01429");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double1 = continuousOutputModel0.getFinalTime();
        double double2 = continuousOutputModel0.getInitialTime();
        boolean boolean3 = continuousOutputModel0.requiresDenseOutput();
        double double4 = continuousOutputModel0.getInitialTime();
        continuousOutputModel0.reset();
        boolean boolean6 = continuousOutputModel0.requiresDenseOutput();
        double double7 = continuousOutputModel0.getInitialTime();
        continuousOutputModel0.reset();
        boolean boolean9 = continuousOutputModel0.requiresDenseOutput();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator10 = null;
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel0.handleStep(stepInterpolator10, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test01430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01430");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel1 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean2 = continuousOutputModel1.requiresDenseOutput();
        boolean boolean3 = continuousOutputModel1.requiresDenseOutput();
        double double4 = continuousOutputModel1.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel5 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean6 = continuousOutputModel5.requiresDenseOutput();
        continuousOutputModel1.append(continuousOutputModel5);
        continuousOutputModel0.append(continuousOutputModel5);
        continuousOutputModel5.reset();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator10 = null;
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel5.handleStep(stepInterpolator10, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
    }

    @Test
    public void test01431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01431");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean1 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean2 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        boolean boolean4 = continuousOutputModel0.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel5 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double6 = continuousOutputModel5.getFinalTime();
        double double7 = continuousOutputModel5.getInitialTime();
        boolean boolean8 = continuousOutputModel5.requiresDenseOutput();
        continuousOutputModel0.append(continuousOutputModel5);
        boolean boolean10 = continuousOutputModel5.requiresDenseOutput();
        double double11 = continuousOutputModel5.getFinalTime();
        continuousOutputModel5.reset();
        double double13 = continuousOutputModel5.getInitialTime();
        double double14 = continuousOutputModel5.getFinalTime();
        continuousOutputModel5.reset();
        boolean boolean16 = continuousOutputModel5.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel17 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean18 = continuousOutputModel17.requiresDenseOutput();
        boolean boolean19 = continuousOutputModel17.requiresDenseOutput();
        continuousOutputModel17.reset();
        boolean boolean21 = continuousOutputModel17.requiresDenseOutput();
        continuousOutputModel17.reset();
        double double23 = continuousOutputModel17.getInitialTime();
        continuousOutputModel5.append(continuousOutputModel17);
        // The following exception was thrown during execution in test generation
        try {
            double double25 = continuousOutputModel5.getInterpolatedTime();
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
    }

    @Test
    public void test01432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01432");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean1 = continuousOutputModel0.requiresDenseOutput();
        double double2 = continuousOutputModel0.getInitialTime();
        continuousOutputModel0.reset();
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel0.setInterpolatedTime((double) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
    }

    @Test
    public void test01433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01433");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean1 = continuousOutputModel0.requiresDenseOutput();
        double double2 = continuousOutputModel0.getInitialTime();
        boolean boolean3 = continuousOutputModel0.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel4 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean5 = continuousOutputModel4.requiresDenseOutput();
        boolean boolean6 = continuousOutputModel4.requiresDenseOutput();
        continuousOutputModel0.append(continuousOutputModel4);
        boolean boolean8 = continuousOutputModel0.requiresDenseOutput();
        double double9 = continuousOutputModel0.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel10 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean11 = continuousOutputModel10.requiresDenseOutput();
        boolean boolean12 = continuousOutputModel10.requiresDenseOutput();
        continuousOutputModel10.reset();
        boolean boolean14 = continuousOutputModel10.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel15 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double16 = continuousOutputModel15.getFinalTime();
        double double17 = continuousOutputModel15.getInitialTime();
        boolean boolean18 = continuousOutputModel15.requiresDenseOutput();
        continuousOutputModel10.append(continuousOutputModel15);
        continuousOutputModel15.reset();
        continuousOutputModel15.reset();
        continuousOutputModel15.reset();
        continuousOutputModel0.append(continuousOutputModel15);
        boolean boolean24 = continuousOutputModel0.requiresDenseOutput();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator25 = null;
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel0.handleStep(stepInterpolator25, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
    }

    @Test
    public void test01434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01434");
        org.apache.commons.math.MathException mathException4 = new org.apache.commons.math.MathException("hi!");
        java.lang.Throwable[] throwableArray5 = mathException4.getSuppressed();
        java.io.IOException iOException12 = new java.io.IOException("hi!");
        org.apache.commons.math.ode.DerivativeException derivativeException13 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) iOException12);
        org.apache.commons.math.MathException mathException14 = new org.apache.commons.math.MathException("hi!", (java.lang.Throwable) iOException12);
        java.lang.Object[] objArray15 = mathException14.getArguments();
        org.apache.commons.math.MathException mathException16 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: ", objArray15);
        org.apache.commons.math.MathException mathException17 = new org.apache.commons.math.MathException("hi!", objArray15);
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel19 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double20 = continuousOutputModel19.getFinalTime();
        double double21 = continuousOutputModel19.getInitialTime();
        boolean boolean22 = continuousOutputModel19.requiresDenseOutput();
        double double23 = continuousOutputModel19.getInitialTime();
        java.io.IOException iOException26 = new java.io.IOException("hi!");
        org.apache.commons.math.ode.DerivativeException derivativeException27 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) iOException26);
        org.apache.commons.math.MathException mathException28 = new org.apache.commons.math.MathException("hi!", (java.lang.Throwable) iOException26);
        java.io.IOException iOException31 = new java.io.IOException("hi!");
        java.io.IOException iOException32 = new java.io.IOException("", (java.lang.Throwable) iOException31);
        org.apache.commons.math.ode.DerivativeException derivativeException33 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) iOException31);
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel35 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double36 = continuousOutputModel35.getFinalTime();
        double double37 = continuousOutputModel35.getInitialTime();
        java.lang.Object[] objArray38 = new java.lang.Object[] { double23, mathException28, iOException31, false, continuousOutputModel35 };
        java.lang.String[] strArray47 = new java.lang.String[] { "hi!", "org.apache.commons.math.MathException: ", "hi!", "org.apache.commons.math.MathException: ", "", "" };
        org.apache.commons.math.ode.DerivativeException derivativeException48 = new org.apache.commons.math.ode.DerivativeException("", strArray47);
        java.io.IOException iOException52 = new java.io.IOException("hi!");
        org.apache.commons.math.ode.DerivativeException derivativeException53 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) iOException52);
        org.apache.commons.math.MathException mathException54 = new org.apache.commons.math.MathException("hi!", (java.lang.Throwable) iOException52);
        java.lang.Object[] objArray55 = mathException54.getArguments();
        org.apache.commons.math.MathException mathException56 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: ", (java.lang.Throwable) mathException54);
        org.apache.commons.math.MathException mathException57 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: hi!", (java.lang.Object[]) strArray47, (java.lang.Throwable) mathException54);
        org.apache.commons.math.MathException mathException58 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: hi!", objArray38, (java.lang.Throwable) mathException57);
        org.apache.commons.math.MathException mathException59 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: ", objArray15, (java.lang.Throwable) mathException58);
        java.lang.Throwable[] throwableArray60 = mathException58.getSuppressed();
        java.io.IOException iOException66 = new java.io.IOException("hi!");
        org.apache.commons.math.ode.DerivativeException derivativeException67 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) iOException66);
        org.apache.commons.math.MathException mathException68 = new org.apache.commons.math.MathException("hi!", (java.lang.Throwable) iOException66);
        java.lang.Object[] objArray69 = mathException68.getArguments();
        org.apache.commons.math.MathException mathException70 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: ", objArray69);
        org.apache.commons.math.MathException mathException71 = new org.apache.commons.math.MathException("hi!", objArray69);
        org.apache.commons.math.MathException mathException72 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: ", objArray69);
        java.io.IOException iOException73 = new java.io.IOException((java.lang.Throwable) mathException72);
        org.apache.commons.math.MathException mathException74 = new org.apache.commons.math.MathException("java.io.IOException: java.io.IOException: hi!", (java.lang.Object[]) throwableArray60, (java.lang.Throwable) iOException73);
        org.apache.commons.math.MathException mathException75 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.MathException: ", (java.lang.Object[]) throwableArray5, (java.lang.Throwable) mathException74);
        org.apache.commons.math.MathException mathException76 = new org.apache.commons.math.MathException("", (java.lang.Throwable) mathException75);
        org.apache.commons.math.MathException mathException77 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: org.apache.commons.math.MathException: ", (java.lang.Throwable) mathException75);
        java.lang.Throwable[] throwableArray78 = mathException77.getSuppressed();
        org.junit.Assert.assertNotNull(throwableArray5);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertNotNull(objArray38);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertNotNull(objArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray55), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray55), "[]");
        org.junit.Assert.assertNotNull(throwableArray60);
        org.junit.Assert.assertNotNull(objArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray69), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray69), "[]");
        org.junit.Assert.assertNotNull(throwableArray78);
    }

    @Test
    public void test01435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01435");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double1 = continuousOutputModel0.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel2 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean3 = continuousOutputModel2.requiresDenseOutput();
        double double4 = continuousOutputModel2.getInitialTime();
        boolean boolean5 = continuousOutputModel2.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel6 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double7 = continuousOutputModel6.getFinalTime();
        double double8 = continuousOutputModel6.getInitialTime();
        boolean boolean9 = continuousOutputModel6.requiresDenseOutput();
        continuousOutputModel6.reset();
        boolean boolean11 = continuousOutputModel6.requiresDenseOutput();
        continuousOutputModel2.append(continuousOutputModel6);
        continuousOutputModel0.append(continuousOutputModel2);
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel14 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean15 = continuousOutputModel14.requiresDenseOutput();
        boolean boolean16 = continuousOutputModel14.requiresDenseOutput();
        continuousOutputModel14.reset();
        boolean boolean18 = continuousOutputModel14.requiresDenseOutput();
        boolean boolean19 = continuousOutputModel14.requiresDenseOutput();
        continuousOutputModel0.append(continuousOutputModel14);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray21 = continuousOutputModel14.getInterpolatedState();
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
    }

    @Test
    public void test01436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01436");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double1 = continuousOutputModel0.getFinalTime();
        double double2 = continuousOutputModel0.getInitialTime();
        boolean boolean3 = continuousOutputModel0.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel4 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean5 = continuousOutputModel4.requiresDenseOutput();
        double double6 = continuousOutputModel4.getInitialTime();
        boolean boolean7 = continuousOutputModel4.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel8 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double9 = continuousOutputModel8.getFinalTime();
        double double10 = continuousOutputModel8.getInitialTime();
        boolean boolean11 = continuousOutputModel8.requiresDenseOutput();
        continuousOutputModel8.reset();
        boolean boolean13 = continuousOutputModel8.requiresDenseOutput();
        continuousOutputModel4.append(continuousOutputModel8);
        continuousOutputModel0.append(continuousOutputModel4);
        double double16 = continuousOutputModel4.getInitialTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel17 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean18 = continuousOutputModel17.requiresDenseOutput();
        boolean boolean19 = continuousOutputModel17.requiresDenseOutput();
        continuousOutputModel17.reset();
        continuousOutputModel4.append(continuousOutputModel17);
        continuousOutputModel4.reset();
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray23 = continuousOutputModel4.getInterpolatedState();
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
    }

    @Test
    public void test01437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01437");
        java.lang.String[] strArray7 = new java.lang.String[] { "hi!", "org.apache.commons.math.MathException: ", "hi!", "org.apache.commons.math.MathException: ", "", "" };
        org.apache.commons.math.ode.DerivativeException derivativeException8 = new org.apache.commons.math.ode.DerivativeException("", strArray7);
        java.io.IOException iOException14 = new java.io.IOException("hi!");
        org.apache.commons.math.ode.DerivativeException derivativeException15 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) iOException14);
        org.apache.commons.math.MathException mathException16 = new org.apache.commons.math.MathException("hi!", (java.lang.Throwable) iOException14);
        java.lang.Object[] objArray17 = mathException16.getArguments();
        org.apache.commons.math.MathException mathException18 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: ", objArray17);
        org.apache.commons.math.MathException mathException19 = new org.apache.commons.math.MathException("hi!", objArray17);
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel21 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double22 = continuousOutputModel21.getFinalTime();
        double double23 = continuousOutputModel21.getInitialTime();
        boolean boolean24 = continuousOutputModel21.requiresDenseOutput();
        double double25 = continuousOutputModel21.getInitialTime();
        java.io.IOException iOException28 = new java.io.IOException("hi!");
        org.apache.commons.math.ode.DerivativeException derivativeException29 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) iOException28);
        org.apache.commons.math.MathException mathException30 = new org.apache.commons.math.MathException("hi!", (java.lang.Throwable) iOException28);
        java.io.IOException iOException33 = new java.io.IOException("hi!");
        java.io.IOException iOException34 = new java.io.IOException("", (java.lang.Throwable) iOException33);
        org.apache.commons.math.ode.DerivativeException derivativeException35 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) iOException33);
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel37 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double38 = continuousOutputModel37.getFinalTime();
        double double39 = continuousOutputModel37.getInitialTime();
        java.lang.Object[] objArray40 = new java.lang.Object[] { double25, mathException30, iOException33, false, continuousOutputModel37 };
        java.lang.String[] strArray49 = new java.lang.String[] { "hi!", "org.apache.commons.math.MathException: ", "hi!", "org.apache.commons.math.MathException: ", "", "" };
        org.apache.commons.math.ode.DerivativeException derivativeException50 = new org.apache.commons.math.ode.DerivativeException("", strArray49);
        java.io.IOException iOException54 = new java.io.IOException("hi!");
        org.apache.commons.math.ode.DerivativeException derivativeException55 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) iOException54);
        org.apache.commons.math.MathException mathException56 = new org.apache.commons.math.MathException("hi!", (java.lang.Throwable) iOException54);
        java.lang.Object[] objArray57 = mathException56.getArguments();
        org.apache.commons.math.MathException mathException58 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: ", (java.lang.Throwable) mathException56);
        org.apache.commons.math.MathException mathException59 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: hi!", (java.lang.Object[]) strArray49, (java.lang.Throwable) mathException56);
        org.apache.commons.math.MathException mathException60 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: hi!", objArray40, (java.lang.Throwable) mathException59);
        org.apache.commons.math.MathException mathException61 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: ", objArray17, (java.lang.Throwable) mathException60);
        derivativeException8.addSuppressed((java.lang.Throwable) mathException60);
        org.apache.commons.math.MathException mathException63 = new org.apache.commons.math.MathException((java.lang.Throwable) mathException60);
        java.io.IOException iOException64 = new java.io.IOException((java.lang.Throwable) mathException60);
        java.lang.String str65 = mathException60.getPattern();
        java.lang.String[] strArray77 = new java.lang.String[] { "org.apache.commons.math.MathException: ", "org.apache.commons.math.ode.DerivativeException: ", "org.apache.commons.math.MathException: org.apache.commons.math.MathException: ", "org.apache.commons.math.ode.DerivativeException: ", "org.apache.commons.math.MathException: hi!", "org.apache.commons.math.MathException: " };
        org.apache.commons.math.ode.DerivativeException derivativeException78 = new org.apache.commons.math.ode.DerivativeException("java.io.IOException: ", strArray77);
        java.io.IOException iOException83 = new java.io.IOException("hi!");
        java.io.IOException iOException84 = new java.io.IOException("", (java.lang.Throwable) iOException83);
        org.apache.commons.math.ode.DerivativeException derivativeException85 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) iOException83);
        java.io.IOException iOException86 = new java.io.IOException("hi!", (java.lang.Throwable) iOException83);
        org.apache.commons.math.MathException mathException87 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: hi!", (java.lang.Throwable) iOException86);
        org.apache.commons.math.ode.DerivativeException derivativeException88 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) iOException86);
        org.apache.commons.math.MathException mathException89 = new org.apache.commons.math.MathException("java.io.IOException: java.io.IOException: ", (java.lang.Object[]) strArray77, (java.lang.Throwable) iOException86);
        org.apache.commons.math.ode.DerivativeException derivativeException90 = new org.apache.commons.math.ode.DerivativeException("java.io.IOException: hi!", strArray77);
        org.apache.commons.math.ode.DerivativeException derivativeException91 = new org.apache.commons.math.ode.DerivativeException("", strArray77);
        org.apache.commons.math.ode.DerivativeException derivativeException92 = new org.apache.commons.math.ode.DerivativeException("org.apache.commons.math.MathException: hi!", strArray77);
        mathException60.addSuppressed((java.lang.Throwable) derivativeException92);
        java.lang.String str94 = derivativeException92.toString();
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(objArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray17), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray17), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertNotNull(objArray40);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertNotNull(objArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray57), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray57), "[]");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "org.apache.commons.math.MathException: hi!" + "'", str65, "org.apache.commons.math.MathException: hi!");
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.MathException: hi!" + "'", str94, "org.apache.commons.math.ode.DerivativeException: org.apache.commons.math.MathException: hi!");
    }

    @Test
    public void test01438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01438");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean1 = continuousOutputModel0.requiresDenseOutput();
        double double2 = continuousOutputModel0.getInitialTime();
        boolean boolean3 = continuousOutputModel0.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel4 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double5 = continuousOutputModel4.getFinalTime();
        double double6 = continuousOutputModel4.getInitialTime();
        boolean boolean7 = continuousOutputModel4.requiresDenseOutput();
        continuousOutputModel4.reset();
        boolean boolean9 = continuousOutputModel4.requiresDenseOutput();
        continuousOutputModel0.append(continuousOutputModel4);
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel11 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double12 = continuousOutputModel11.getFinalTime();
        double double13 = continuousOutputModel11.getInitialTime();
        boolean boolean14 = continuousOutputModel11.requiresDenseOutput();
        continuousOutputModel11.reset();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel16 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean17 = continuousOutputModel16.requiresDenseOutput();
        double double18 = continuousOutputModel16.getInitialTime();
        continuousOutputModel11.append(continuousOutputModel16);
        continuousOutputModel0.append(continuousOutputModel11);
        boolean boolean21 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        continuousOutputModel0.reset();
        boolean boolean24 = continuousOutputModel0.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel25 = null;
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel0.append(continuousOutputModel25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
    }

    @Test
    public void test01439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01439");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double1 = continuousOutputModel0.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel2 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean3 = continuousOutputModel2.requiresDenseOutput();
        double double4 = continuousOutputModel2.getInitialTime();
        boolean boolean5 = continuousOutputModel2.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel6 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double7 = continuousOutputModel6.getFinalTime();
        double double8 = continuousOutputModel6.getInitialTime();
        boolean boolean9 = continuousOutputModel6.requiresDenseOutput();
        continuousOutputModel6.reset();
        boolean boolean11 = continuousOutputModel6.requiresDenseOutput();
        continuousOutputModel2.append(continuousOutputModel6);
        continuousOutputModel0.append(continuousOutputModel2);
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel14 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean15 = continuousOutputModel14.requiresDenseOutput();
        boolean boolean16 = continuousOutputModel14.requiresDenseOutput();
        continuousOutputModel14.reset();
        boolean boolean18 = continuousOutputModel14.requiresDenseOutput();
        boolean boolean19 = continuousOutputModel14.requiresDenseOutput();
        continuousOutputModel0.append(continuousOutputModel14);
        continuousOutputModel14.reset();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel22 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double23 = continuousOutputModel22.getFinalTime();
        double double24 = continuousOutputModel22.getInitialTime();
        boolean boolean25 = continuousOutputModel22.requiresDenseOutput();
        continuousOutputModel22.reset();
        double double27 = continuousOutputModel22.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel28 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double29 = continuousOutputModel28.getFinalTime();
        double double30 = continuousOutputModel28.getInitialTime();
        continuousOutputModel22.append(continuousOutputModel28);
        continuousOutputModel14.append(continuousOutputModel22);
        double double33 = continuousOutputModel14.getInitialTime();
        boolean boolean34 = continuousOutputModel14.requiresDenseOutput();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator35 = null;
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel14.handleStep(stepInterpolator35, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
    }

    @Test
    public void test01440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01440");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double1 = continuousOutputModel0.getFinalTime();
        double double2 = continuousOutputModel0.getInitialTime();
        double double3 = continuousOutputModel0.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel4 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double5 = continuousOutputModel4.getFinalTime();
        double double6 = continuousOutputModel4.getInitialTime();
        continuousOutputModel0.append(continuousOutputModel4);
        double double8 = continuousOutputModel0.getFinalTime();
        boolean boolean9 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean10 = continuousOutputModel0.requiresDenseOutput();
        double double11 = continuousOutputModel0.getInitialTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel12 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double13 = continuousOutputModel12.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel14 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean15 = continuousOutputModel14.requiresDenseOutput();
        double double16 = continuousOutputModel14.getInitialTime();
        boolean boolean17 = continuousOutputModel14.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel18 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double19 = continuousOutputModel18.getFinalTime();
        double double20 = continuousOutputModel18.getInitialTime();
        boolean boolean21 = continuousOutputModel18.requiresDenseOutput();
        continuousOutputModel18.reset();
        boolean boolean23 = continuousOutputModel18.requiresDenseOutput();
        continuousOutputModel14.append(continuousOutputModel18);
        continuousOutputModel12.append(continuousOutputModel14);
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel26 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean27 = continuousOutputModel26.requiresDenseOutput();
        boolean boolean28 = continuousOutputModel26.requiresDenseOutput();
        continuousOutputModel26.reset();
        boolean boolean30 = continuousOutputModel26.requiresDenseOutput();
        boolean boolean31 = continuousOutputModel26.requiresDenseOutput();
        continuousOutputModel12.append(continuousOutputModel26);
        boolean boolean33 = continuousOutputModel26.requiresDenseOutput();
        double double34 = continuousOutputModel26.getInitialTime();
        continuousOutputModel0.append(continuousOutputModel26);
        continuousOutputModel0.reset();
        // The following exception was thrown during execution in test generation
        try {
            double double37 = continuousOutputModel0.getInterpolatedTime();
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double34));
    }

    @Test
    public void test01441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01441");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean1 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean2 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        double double4 = continuousOutputModel0.getInitialTime();
        boolean boolean5 = continuousOutputModel0.requiresDenseOutput();
        double double6 = continuousOutputModel0.getFinalTime();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator7 = null;
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel0.handleStep(stepInterpolator7, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
    }

    @Test
    public void test01442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01442");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean1 = continuousOutputModel0.requiresDenseOutput();
        double double2 = continuousOutputModel0.getInitialTime();
        boolean boolean3 = continuousOutputModel0.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel4 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double5 = continuousOutputModel4.getFinalTime();
        double double6 = continuousOutputModel4.getInitialTime();
        boolean boolean7 = continuousOutputModel4.requiresDenseOutput();
        continuousOutputModel4.reset();
        boolean boolean9 = continuousOutputModel4.requiresDenseOutput();
        continuousOutputModel0.append(continuousOutputModel4);
        continuousOutputModel0.reset();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel12 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean13 = continuousOutputModel12.requiresDenseOutput();
        continuousOutputModel12.reset();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel15 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double16 = continuousOutputModel15.getFinalTime();
        double double17 = continuousOutputModel15.getInitialTime();
        boolean boolean18 = continuousOutputModel15.requiresDenseOutput();
        continuousOutputModel15.reset();
        boolean boolean20 = continuousOutputModel15.requiresDenseOutput();
        boolean boolean21 = continuousOutputModel15.requiresDenseOutput();
        double double22 = continuousOutputModel15.getInitialTime();
        continuousOutputModel12.append(continuousOutputModel15);
        double double24 = continuousOutputModel12.getFinalTime();
        double double25 = continuousOutputModel12.getFinalTime();
        continuousOutputModel0.append(continuousOutputModel12);
        org.apache.commons.math.ode.StepInterpolator stepInterpolator27 = null;
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel12.handleStep(stepInterpolator27, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue(Double.isNaN(double25));
    }

    @Test
    public void test01443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01443");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double1 = continuousOutputModel0.getFinalTime();
        double double2 = continuousOutputModel0.getInitialTime();
        boolean boolean3 = continuousOutputModel0.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel4 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean5 = continuousOutputModel4.requiresDenseOutput();
        double double6 = continuousOutputModel4.getInitialTime();
        boolean boolean7 = continuousOutputModel4.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel8 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double9 = continuousOutputModel8.getFinalTime();
        double double10 = continuousOutputModel8.getInitialTime();
        boolean boolean11 = continuousOutputModel8.requiresDenseOutput();
        continuousOutputModel8.reset();
        boolean boolean13 = continuousOutputModel8.requiresDenseOutput();
        continuousOutputModel4.append(continuousOutputModel8);
        continuousOutputModel0.append(continuousOutputModel4);
        double double16 = continuousOutputModel4.getInitialTime();
        continuousOutputModel4.reset();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel18 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean19 = continuousOutputModel18.requiresDenseOutput();
        double double20 = continuousOutputModel18.getInitialTime();
        double double21 = continuousOutputModel18.getFinalTime();
        boolean boolean22 = continuousOutputModel18.requiresDenseOutput();
        continuousOutputModel18.reset();
        double double24 = continuousOutputModel18.getFinalTime();
        continuousOutputModel4.append(continuousOutputModel18);
        boolean boolean26 = continuousOutputModel18.requiresDenseOutput();
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel18.setInterpolatedTime((double) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
    }

    @Test
    public void test01444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01444");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean1 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        double double3 = continuousOutputModel0.getInitialTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel4 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean5 = continuousOutputModel4.requiresDenseOutput();
        boolean boolean6 = continuousOutputModel4.requiresDenseOutput();
        double double7 = continuousOutputModel4.getFinalTime();
        double double8 = continuousOutputModel4.getInitialTime();
        boolean boolean9 = continuousOutputModel4.requiresDenseOutput();
        continuousOutputModel0.append(continuousOutputModel4);
        boolean boolean11 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator13 = null;
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel0.handleStep(stepInterpolator13, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test01445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01445");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double1 = continuousOutputModel0.getFinalTime();
        double double2 = continuousOutputModel0.getInitialTime();
        double double3 = continuousOutputModel0.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel4 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double5 = continuousOutputModel4.getFinalTime();
        double double6 = continuousOutputModel4.getInitialTime();
        continuousOutputModel0.append(continuousOutputModel4);
        double double8 = continuousOutputModel0.getInitialTime();
        double double9 = continuousOutputModel0.getFinalTime();
        boolean boolean10 = continuousOutputModel0.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel11 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean12 = continuousOutputModel11.requiresDenseOutput();
        double double13 = continuousOutputModel11.getInitialTime();
        boolean boolean14 = continuousOutputModel11.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel15 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double16 = continuousOutputModel15.getFinalTime();
        double double17 = continuousOutputModel15.getInitialTime();
        boolean boolean18 = continuousOutputModel15.requiresDenseOutput();
        continuousOutputModel15.reset();
        boolean boolean20 = continuousOutputModel15.requiresDenseOutput();
        continuousOutputModel11.append(continuousOutputModel15);
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel22 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double23 = continuousOutputModel22.getFinalTime();
        double double24 = continuousOutputModel22.getInitialTime();
        boolean boolean25 = continuousOutputModel22.requiresDenseOutput();
        continuousOutputModel22.reset();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel27 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean28 = continuousOutputModel27.requiresDenseOutput();
        double double29 = continuousOutputModel27.getInitialTime();
        continuousOutputModel22.append(continuousOutputModel27);
        continuousOutputModel11.append(continuousOutputModel22);
        boolean boolean32 = continuousOutputModel11.requiresDenseOutput();
        continuousOutputModel0.append(continuousOutputModel11);
        org.apache.commons.math.ode.StepInterpolator stepInterpolator34 = null;
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel0.handleStep(stepInterpolator34, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
    }

    @Test
    public void test01446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01446");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double1 = continuousOutputModel0.getFinalTime();
        double double2 = continuousOutputModel0.getInitialTime();
        boolean boolean3 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        double double5 = continuousOutputModel0.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel6 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double7 = continuousOutputModel6.getFinalTime();
        double double8 = continuousOutputModel6.getInitialTime();
        continuousOutputModel0.append(continuousOutputModel6);
        continuousOutputModel0.reset();
        continuousOutputModel0.reset();
        continuousOutputModel0.reset();
        boolean boolean13 = continuousOutputModel0.requiresDenseOutput();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator14 = null;
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel0.handleStep(stepInterpolator14, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test01447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01447");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double1 = continuousOutputModel0.getFinalTime();
        double double2 = continuousOutputModel0.getInitialTime();
        double double3 = continuousOutputModel0.getFinalTime();
        boolean boolean4 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean5 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean6 = continuousOutputModel0.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel7 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double8 = continuousOutputModel7.getFinalTime();
        double double9 = continuousOutputModel7.getInitialTime();
        double double10 = continuousOutputModel7.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel11 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double12 = continuousOutputModel11.getFinalTime();
        double double13 = continuousOutputModel11.getInitialTime();
        continuousOutputModel7.append(continuousOutputModel11);
        double double15 = continuousOutputModel7.getInitialTime();
        double double16 = continuousOutputModel7.getInitialTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel17 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double18 = continuousOutputModel17.getFinalTime();
        double double19 = continuousOutputModel17.getInitialTime();
        continuousOutputModel17.reset();
        double double21 = continuousOutputModel17.getInitialTime();
        continuousOutputModel7.append(continuousOutputModel17);
        double double23 = continuousOutputModel17.getInitialTime();
        double double24 = continuousOutputModel17.getFinalTime();
        boolean boolean25 = continuousOutputModel17.requiresDenseOutput();
        continuousOutputModel0.append(continuousOutputModel17);
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel27 = null;
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel0.append(continuousOutputModel27);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
    }

    @Test
    public void test01448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01448");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double1 = continuousOutputModel0.getFinalTime();
        double double2 = continuousOutputModel0.getInitialTime();
        boolean boolean3 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel5 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean6 = continuousOutputModel5.requiresDenseOutput();
        double double7 = continuousOutputModel5.getInitialTime();
        continuousOutputModel0.append(continuousOutputModel5);
        boolean boolean9 = continuousOutputModel5.requiresDenseOutput();
        continuousOutputModel5.reset();
        continuousOutputModel5.reset();
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel5.setInterpolatedTime((-1.0d));
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test01449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01449");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double1 = continuousOutputModel0.getFinalTime();
        double double2 = continuousOutputModel0.getInitialTime();
        boolean boolean3 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        continuousOutputModel0.reset();
        boolean boolean6 = continuousOutputModel0.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel7 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double8 = continuousOutputModel7.getFinalTime();
        double double9 = continuousOutputModel7.getInitialTime();
        continuousOutputModel7.reset();
        boolean boolean11 = continuousOutputModel7.requiresDenseOutput();
        double double12 = continuousOutputModel7.getFinalTime();
        continuousOutputModel0.append(continuousOutputModel7);
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel14 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double15 = continuousOutputModel14.getFinalTime();
        double double16 = continuousOutputModel14.getInitialTime();
        double double17 = continuousOutputModel14.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel18 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double19 = continuousOutputModel18.getFinalTime();
        double double20 = continuousOutputModel18.getInitialTime();
        continuousOutputModel14.append(continuousOutputModel18);
        double double22 = continuousOutputModel14.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel23 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double24 = continuousOutputModel23.getFinalTime();
        double double25 = continuousOutputModel23.getInitialTime();
        boolean boolean26 = continuousOutputModel23.requiresDenseOutput();
        double double27 = continuousOutputModel23.getInitialTime();
        continuousOutputModel23.reset();
        boolean boolean29 = continuousOutputModel23.requiresDenseOutput();
        continuousOutputModel14.append(continuousOutputModel23);
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel31 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean32 = continuousOutputModel31.requiresDenseOutput();
        boolean boolean33 = continuousOutputModel31.requiresDenseOutput();
        continuousOutputModel31.reset();
        boolean boolean35 = continuousOutputModel31.requiresDenseOutput();
        continuousOutputModel23.append(continuousOutputModel31);
        boolean boolean37 = continuousOutputModel23.requiresDenseOutput();
        continuousOutputModel7.append(continuousOutputModel23);
        org.apache.commons.math.ode.StepInterpolator stepInterpolator39 = null;
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel23.handleStep(stepInterpolator39, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
    }

    @Test
    public void test01450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01450");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean1 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean2 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        boolean boolean4 = continuousOutputModel0.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel5 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double6 = continuousOutputModel5.getFinalTime();
        double double7 = continuousOutputModel5.getInitialTime();
        boolean boolean8 = continuousOutputModel5.requiresDenseOutput();
        continuousOutputModel0.append(continuousOutputModel5);
        boolean boolean10 = continuousOutputModel5.requiresDenseOutput();
        double double11 = continuousOutputModel5.getFinalTime();
        continuousOutputModel5.reset();
        double double13 = continuousOutputModel5.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel14 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean15 = continuousOutputModel14.requiresDenseOutput();
        boolean boolean16 = continuousOutputModel14.requiresDenseOutput();
        continuousOutputModel14.reset();
        boolean boolean18 = continuousOutputModel14.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel19 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double20 = continuousOutputModel19.getFinalTime();
        double double21 = continuousOutputModel19.getInitialTime();
        boolean boolean22 = continuousOutputModel19.requiresDenseOutput();
        continuousOutputModel14.append(continuousOutputModel19);
        boolean boolean24 = continuousOutputModel19.requiresDenseOutput();
        double double25 = continuousOutputModel19.getFinalTime();
        continuousOutputModel19.reset();
        double double27 = continuousOutputModel19.getInitialTime();
        boolean boolean28 = continuousOutputModel19.requiresDenseOutput();
        continuousOutputModel5.append(continuousOutputModel19);
        double double30 = continuousOutputModel19.getInitialTime();
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel19.setInterpolatedTime((double) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
    }

    @Test
    public void test01451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01451");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean1 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean2 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        boolean boolean4 = continuousOutputModel0.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel5 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double6 = continuousOutputModel5.getFinalTime();
        double double7 = continuousOutputModel5.getInitialTime();
        boolean boolean8 = continuousOutputModel5.requiresDenseOutput();
        continuousOutputModel0.append(continuousOutputModel5);
        double double10 = continuousOutputModel5.getInitialTime();
        double double11 = continuousOutputModel5.getFinalTime();
        continuousOutputModel5.reset();
        boolean boolean13 = continuousOutputModel5.requiresDenseOutput();
        double double14 = continuousOutputModel5.getInitialTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel15 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double16 = continuousOutputModel15.getFinalTime();
        double double17 = continuousOutputModel15.getInitialTime();
        boolean boolean18 = continuousOutputModel15.requiresDenseOutput();
        double double19 = continuousOutputModel15.getInitialTime();
        boolean boolean20 = continuousOutputModel15.requiresDenseOutput();
        continuousOutputModel5.append(continuousOutputModel15);
        java.lang.Class<?> wildcardClass22 = continuousOutputModel15.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(wildcardClass22);
    }

    @Test
    public void test01452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01452");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean1 = continuousOutputModel0.requiresDenseOutput();
        double double2 = continuousOutputModel0.getInitialTime();
        boolean boolean3 = continuousOutputModel0.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel4 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double5 = continuousOutputModel4.getFinalTime();
        double double6 = continuousOutputModel4.getInitialTime();
        boolean boolean7 = continuousOutputModel4.requiresDenseOutput();
        continuousOutputModel4.reset();
        boolean boolean9 = continuousOutputModel4.requiresDenseOutput();
        continuousOutputModel0.append(continuousOutputModel4);
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel11 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double12 = continuousOutputModel11.getFinalTime();
        double double13 = continuousOutputModel11.getInitialTime();
        boolean boolean14 = continuousOutputModel11.requiresDenseOutput();
        continuousOutputModel11.reset();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel16 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean17 = continuousOutputModel16.requiresDenseOutput();
        double double18 = continuousOutputModel16.getInitialTime();
        continuousOutputModel11.append(continuousOutputModel16);
        continuousOutputModel0.append(continuousOutputModel11);
        double double21 = continuousOutputModel11.getFinalTime();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator22 = null;
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel11.handleStep(stepInterpolator22, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue(Double.isNaN(double21));
    }

    @Test
    public void test01453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01453");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double1 = continuousOutputModel0.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel2 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean3 = continuousOutputModel2.requiresDenseOutput();
        double double4 = continuousOutputModel2.getInitialTime();
        boolean boolean5 = continuousOutputModel2.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel6 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double7 = continuousOutputModel6.getFinalTime();
        double double8 = continuousOutputModel6.getInitialTime();
        boolean boolean9 = continuousOutputModel6.requiresDenseOutput();
        continuousOutputModel6.reset();
        boolean boolean11 = continuousOutputModel6.requiresDenseOutput();
        continuousOutputModel2.append(continuousOutputModel6);
        continuousOutputModel0.append(continuousOutputModel2);
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel14 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean15 = continuousOutputModel14.requiresDenseOutput();
        boolean boolean16 = continuousOutputModel14.requiresDenseOutput();
        continuousOutputModel14.reset();
        boolean boolean18 = continuousOutputModel14.requiresDenseOutput();
        boolean boolean19 = continuousOutputModel14.requiresDenseOutput();
        continuousOutputModel0.append(continuousOutputModel14);
        boolean boolean21 = continuousOutputModel14.requiresDenseOutput();
        continuousOutputModel14.reset();
        boolean boolean23 = continuousOutputModel14.requiresDenseOutput();
        boolean boolean24 = continuousOutputModel14.requiresDenseOutput();
        // The following exception was thrown during execution in test generation
        try {
            double double25 = continuousOutputModel14.getInterpolatedTime();
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
    }

    @Test
    public void test01454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01454");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean1 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        continuousOutputModel0.reset();
        double double4 = continuousOutputModel0.getFinalTime();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator5 = null;
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel0.handleStep(stepInterpolator5, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
    }

    @Test
    public void test01455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01455");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double1 = continuousOutputModel0.getFinalTime();
        double double2 = continuousOutputModel0.getInitialTime();
        boolean boolean3 = continuousOutputModel0.requiresDenseOutput();
        double double4 = continuousOutputModel0.getInitialTime();
        continuousOutputModel0.reset();
        double double6 = continuousOutputModel0.getInitialTime();
        continuousOutputModel0.reset();
        continuousOutputModel0.reset();
        continuousOutputModel0.reset();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator10 = null;
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel0.handleStep(stepInterpolator10, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
    }

    @Test
    public void test01456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01456");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double1 = continuousOutputModel0.getFinalTime();
        double double2 = continuousOutputModel0.getInitialTime();
        double double3 = continuousOutputModel0.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel4 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double5 = continuousOutputModel4.getFinalTime();
        double double6 = continuousOutputModel4.getInitialTime();
        continuousOutputModel0.append(continuousOutputModel4);
        double double8 = continuousOutputModel0.getFinalTime();
        boolean boolean9 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        double double11 = continuousOutputModel0.getFinalTime();
        double double12 = continuousOutputModel0.getInitialTime();
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel0.setInterpolatedTime((-1.0d));
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
    }

    @Test
    public void test01457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01457");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double1 = continuousOutputModel0.getFinalTime();
        double double2 = continuousOutputModel0.getInitialTime();
        boolean boolean3 = continuousOutputModel0.requiresDenseOutput();
        double double4 = continuousOutputModel0.getInitialTime();
        continuousOutputModel0.reset();
        boolean boolean6 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        java.lang.Class<?> wildcardClass8 = continuousOutputModel0.getClass();
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(wildcardClass8);
    }

    @Test
    public void test01458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01458");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean1 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean2 = continuousOutputModel0.requiresDenseOutput();
        double double3 = continuousOutputModel0.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel4 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean5 = continuousOutputModel4.requiresDenseOutput();
        continuousOutputModel0.append(continuousOutputModel4);
        continuousOutputModel0.reset();
        boolean boolean8 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean9 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean10 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        continuousOutputModel0.reset();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator13 = null;
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel0.handleStep(stepInterpolator13, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test01459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01459");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean1 = continuousOutputModel0.requiresDenseOutput();
        double double2 = continuousOutputModel0.getInitialTime();
        boolean boolean3 = continuousOutputModel0.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel4 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double5 = continuousOutputModel4.getFinalTime();
        double double6 = continuousOutputModel4.getInitialTime();
        boolean boolean7 = continuousOutputModel4.requiresDenseOutput();
        continuousOutputModel4.reset();
        boolean boolean9 = continuousOutputModel4.requiresDenseOutput();
        continuousOutputModel0.append(continuousOutputModel4);
        continuousOutputModel4.reset();
        continuousOutputModel4.reset();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel13 = new org.apache.commons.math.ode.ContinuousOutputModel();
        continuousOutputModel13.reset();
        boolean boolean15 = continuousOutputModel13.requiresDenseOutput();
        continuousOutputModel4.append(continuousOutputModel13);
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel17 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean18 = continuousOutputModel17.requiresDenseOutput();
        boolean boolean19 = continuousOutputModel17.requiresDenseOutput();
        double double20 = continuousOutputModel17.getFinalTime();
        continuousOutputModel4.append(continuousOutputModel17);
        double double22 = continuousOutputModel4.getInitialTime();
        // The following exception was thrown during execution in test generation
        try {
            double double23 = continuousOutputModel4.getInterpolatedTime();
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue(Double.isNaN(double22));
    }

    @Test
    public void test01460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01460");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean1 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean2 = continuousOutputModel0.requiresDenseOutput();
        double double3 = continuousOutputModel0.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel4 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean5 = continuousOutputModel4.requiresDenseOutput();
        continuousOutputModel0.append(continuousOutputModel4);
        boolean boolean7 = continuousOutputModel0.requiresDenseOutput();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator8 = null;
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel0.handleStep(stepInterpolator8, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void test01461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01461");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean1 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean2 = continuousOutputModel0.requiresDenseOutput();
        double double3 = continuousOutputModel0.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel4 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean5 = continuousOutputModel4.requiresDenseOutput();
        continuousOutputModel0.append(continuousOutputModel4);
        boolean boolean7 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel9 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean10 = continuousOutputModel9.requiresDenseOutput();
        boolean boolean11 = continuousOutputModel9.requiresDenseOutput();
        continuousOutputModel9.reset();
        boolean boolean13 = continuousOutputModel9.requiresDenseOutput();
        double double14 = continuousOutputModel9.getFinalTime();
        boolean boolean15 = continuousOutputModel9.requiresDenseOutput();
        boolean boolean16 = continuousOutputModel9.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel17 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean18 = continuousOutputModel17.requiresDenseOutput();
        double double19 = continuousOutputModel17.getInitialTime();
        boolean boolean20 = continuousOutputModel17.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel21 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double22 = continuousOutputModel21.getFinalTime();
        double double23 = continuousOutputModel21.getInitialTime();
        boolean boolean24 = continuousOutputModel21.requiresDenseOutput();
        continuousOutputModel21.reset();
        boolean boolean26 = continuousOutputModel21.requiresDenseOutput();
        continuousOutputModel17.append(continuousOutputModel21);
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel28 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double29 = continuousOutputModel28.getFinalTime();
        double double30 = continuousOutputModel28.getInitialTime();
        boolean boolean31 = continuousOutputModel28.requiresDenseOutput();
        continuousOutputModel28.reset();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel33 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean34 = continuousOutputModel33.requiresDenseOutput();
        double double35 = continuousOutputModel33.getInitialTime();
        continuousOutputModel28.append(continuousOutputModel33);
        continuousOutputModel17.append(continuousOutputModel28);
        double double38 = continuousOutputModel28.getFinalTime();
        continuousOutputModel9.append(continuousOutputModel28);
        continuousOutputModel0.append(continuousOutputModel28);
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel41 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double42 = continuousOutputModel41.getFinalTime();
        double double43 = continuousOutputModel41.getInitialTime();
        continuousOutputModel0.append(continuousOutputModel41);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray45 = continuousOutputModel41.getInterpolatedState();
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertTrue(Double.isNaN(double43));
    }

    @Test
    public void test01462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01462");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean1 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean2 = continuousOutputModel0.requiresDenseOutput();
        double double3 = continuousOutputModel0.getFinalTime();
        double double4 = continuousOutputModel0.getInitialTime();
        boolean boolean5 = continuousOutputModel0.requiresDenseOutput();
        double double6 = continuousOutputModel0.getFinalTime();
        boolean boolean7 = continuousOutputModel0.requiresDenseOutput();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator8 = null;
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel0.handleStep(stepInterpolator8, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void test01463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01463");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double1 = continuousOutputModel0.getFinalTime();
        double double2 = continuousOutputModel0.getInitialTime();
        boolean boolean3 = continuousOutputModel0.requiresDenseOutput();
        double double4 = continuousOutputModel0.getInitialTime();
        continuousOutputModel0.reset();
        boolean boolean6 = continuousOutputModel0.requiresDenseOutput();
        double double7 = continuousOutputModel0.getInitialTime();
        boolean boolean8 = continuousOutputModel0.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel9 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double10 = continuousOutputModel9.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel11 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean12 = continuousOutputModel11.requiresDenseOutput();
        double double13 = continuousOutputModel11.getInitialTime();
        boolean boolean14 = continuousOutputModel11.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel15 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double16 = continuousOutputModel15.getFinalTime();
        double double17 = continuousOutputModel15.getInitialTime();
        boolean boolean18 = continuousOutputModel15.requiresDenseOutput();
        continuousOutputModel15.reset();
        boolean boolean20 = continuousOutputModel15.requiresDenseOutput();
        continuousOutputModel11.append(continuousOutputModel15);
        continuousOutputModel9.append(continuousOutputModel11);
        continuousOutputModel11.reset();
        continuousOutputModel0.append(continuousOutputModel11);
        continuousOutputModel0.reset();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator26 = null;
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel0.handleStep(stepInterpolator26, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
    }

    @Test
    public void test01464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01464");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean1 = continuousOutputModel0.requiresDenseOutput();
        double double2 = continuousOutputModel0.getInitialTime();
        continuousOutputModel0.reset();
        continuousOutputModel0.reset();
        boolean boolean5 = continuousOutputModel0.requiresDenseOutput();
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray6 = continuousOutputModel0.getInterpolatedState();
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    }

    @Test
    public void test01465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01465");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double1 = continuousOutputModel0.getFinalTime();
        double double2 = continuousOutputModel0.getInitialTime();
        boolean boolean3 = continuousOutputModel0.requiresDenseOutput();
        double double4 = continuousOutputModel0.getInitialTime();
        continuousOutputModel0.reset();
        continuousOutputModel0.reset();
        double double7 = continuousOutputModel0.getInitialTime();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator8 = null;
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel0.handleStep(stepInterpolator8, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
    }

    @Test
    public void test01466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01466");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double1 = continuousOutputModel0.getFinalTime();
        double double2 = continuousOutputModel0.getInitialTime();
        double double3 = continuousOutputModel0.getFinalTime();
        boolean boolean4 = continuousOutputModel0.requiresDenseOutput();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator5 = null;
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel0.handleStep(stepInterpolator5, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
    }

    @Test
    public void test01467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01467");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double1 = continuousOutputModel0.getFinalTime();
        double double2 = continuousOutputModel0.getInitialTime();
        double double3 = continuousOutputModel0.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel4 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double5 = continuousOutputModel4.getFinalTime();
        double double6 = continuousOutputModel4.getInitialTime();
        continuousOutputModel0.append(continuousOutputModel4);
        double double8 = continuousOutputModel0.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel9 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double10 = continuousOutputModel9.getFinalTime();
        double double11 = continuousOutputModel9.getInitialTime();
        boolean boolean12 = continuousOutputModel9.requiresDenseOutput();
        double double13 = continuousOutputModel9.getInitialTime();
        continuousOutputModel9.reset();
        boolean boolean15 = continuousOutputModel9.requiresDenseOutput();
        continuousOutputModel0.append(continuousOutputModel9);
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel17 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean18 = continuousOutputModel17.requiresDenseOutput();
        double double19 = continuousOutputModel17.getInitialTime();
        boolean boolean20 = continuousOutputModel17.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel21 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double22 = continuousOutputModel21.getFinalTime();
        double double23 = continuousOutputModel21.getInitialTime();
        boolean boolean24 = continuousOutputModel21.requiresDenseOutput();
        continuousOutputModel21.reset();
        boolean boolean26 = continuousOutputModel21.requiresDenseOutput();
        continuousOutputModel17.append(continuousOutputModel21);
        continuousOutputModel17.reset();
        continuousOutputModel9.append(continuousOutputModel17);
        boolean boolean30 = continuousOutputModel17.requiresDenseOutput();
        double double31 = continuousOutputModel17.getInitialTime();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator32 = null;
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel17.handleStep(stepInterpolator32, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double31));
    }

    @Test
    public void test01468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01468");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double1 = continuousOutputModel0.getFinalTime();
        double double2 = continuousOutputModel0.getInitialTime();
        double double3 = continuousOutputModel0.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel4 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double5 = continuousOutputModel4.getFinalTime();
        double double6 = continuousOutputModel4.getInitialTime();
        continuousOutputModel0.append(continuousOutputModel4);
        double double8 = continuousOutputModel0.getFinalTime();
        boolean boolean9 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean10 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean11 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean12 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel14 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean15 = continuousOutputModel14.requiresDenseOutput();
        continuousOutputModel14.reset();
        double double17 = continuousOutputModel14.getInitialTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel18 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean19 = continuousOutputModel18.requiresDenseOutput();
        boolean boolean20 = continuousOutputModel18.requiresDenseOutput();
        double double21 = continuousOutputModel18.getFinalTime();
        double double22 = continuousOutputModel18.getInitialTime();
        boolean boolean23 = continuousOutputModel18.requiresDenseOutput();
        continuousOutputModel14.append(continuousOutputModel18);
        continuousOutputModel0.append(continuousOutputModel18);
        continuousOutputModel0.reset();
        double double27 = continuousOutputModel0.getInitialTime();
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray28 = continuousOutputModel0.getInterpolatedState();
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
    }

    @Test
    public void test01469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01469");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean1 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean2 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        continuousOutputModel0.reset();
        boolean boolean5 = continuousOutputModel0.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel6 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double7 = continuousOutputModel6.getFinalTime();
        double double8 = continuousOutputModel6.getInitialTime();
        double double9 = continuousOutputModel6.getFinalTime();
        boolean boolean10 = continuousOutputModel6.requiresDenseOutput();
        continuousOutputModel0.append(continuousOutputModel6);
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel12 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean13 = continuousOutputModel12.requiresDenseOutput();
        boolean boolean14 = continuousOutputModel12.requiresDenseOutput();
        continuousOutputModel12.reset();
        continuousOutputModel12.reset();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel17 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double18 = continuousOutputModel17.getFinalTime();
        double double19 = continuousOutputModel17.getInitialTime();
        boolean boolean20 = continuousOutputModel17.requiresDenseOutput();
        continuousOutputModel17.reset();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel22 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean23 = continuousOutputModel22.requiresDenseOutput();
        double double24 = continuousOutputModel22.getInitialTime();
        continuousOutputModel17.append(continuousOutputModel22);
        continuousOutputModel12.append(continuousOutputModel22);
        continuousOutputModel12.reset();
        boolean boolean28 = continuousOutputModel12.requiresDenseOutput();
        double double29 = continuousOutputModel12.getFinalTime();
        continuousOutputModel0.append(continuousOutputModel12);
        continuousOutputModel0.reset();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel32 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean33 = continuousOutputModel32.requiresDenseOutput();
        boolean boolean34 = continuousOutputModel32.requiresDenseOutput();
        continuousOutputModel32.reset();
        boolean boolean36 = continuousOutputModel32.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel37 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double38 = continuousOutputModel37.getFinalTime();
        double double39 = continuousOutputModel37.getInitialTime();
        boolean boolean40 = continuousOutputModel37.requiresDenseOutput();
        continuousOutputModel32.append(continuousOutputModel37);
        continuousOutputModel37.reset();
        double double43 = continuousOutputModel37.getInitialTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel44 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean45 = continuousOutputModel44.requiresDenseOutput();
        boolean boolean46 = continuousOutputModel44.requiresDenseOutput();
        continuousOutputModel44.reset();
        boolean boolean48 = continuousOutputModel44.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel49 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double50 = continuousOutputModel49.getFinalTime();
        double double51 = continuousOutputModel49.getInitialTime();
        boolean boolean52 = continuousOutputModel49.requiresDenseOutput();
        continuousOutputModel44.append(continuousOutputModel49);
        boolean boolean54 = continuousOutputModel49.requiresDenseOutput();
        double double55 = continuousOutputModel49.getFinalTime();
        continuousOutputModel49.reset();
        continuousOutputModel37.append(continuousOutputModel49);
        continuousOutputModel0.append(continuousOutputModel37);
        boolean boolean59 = continuousOutputModel37.requiresDenseOutput();
        // The following exception was thrown during execution in test generation
        try {
            double double60 = continuousOutputModel37.getInterpolatedTime();
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double43));
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double50));
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double55));
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
    }

    @Test
    public void test01470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01470");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        continuousOutputModel0.reset();
        continuousOutputModel0.reset();
        java.lang.Class<?> wildcardClass3 = continuousOutputModel0.getClass();
        org.junit.Assert.assertNotNull(wildcardClass3);
    }

    @Test
    public void test01471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01471");
        java.io.IOException iOException8 = new java.io.IOException("hi!");
        org.apache.commons.math.ode.DerivativeException derivativeException9 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) iOException8);
        org.apache.commons.math.MathException mathException10 = new org.apache.commons.math.MathException("hi!", (java.lang.Throwable) iOException8);
        java.lang.Object[] objArray11 = mathException10.getArguments();
        org.apache.commons.math.MathException mathException12 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: ", objArray11);
        org.apache.commons.math.MathException mathException13 = new org.apache.commons.math.MathException("hi!", objArray11);
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel15 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double16 = continuousOutputModel15.getFinalTime();
        double double17 = continuousOutputModel15.getInitialTime();
        boolean boolean18 = continuousOutputModel15.requiresDenseOutput();
        double double19 = continuousOutputModel15.getInitialTime();
        java.io.IOException iOException22 = new java.io.IOException("hi!");
        org.apache.commons.math.ode.DerivativeException derivativeException23 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) iOException22);
        org.apache.commons.math.MathException mathException24 = new org.apache.commons.math.MathException("hi!", (java.lang.Throwable) iOException22);
        java.io.IOException iOException27 = new java.io.IOException("hi!");
        java.io.IOException iOException28 = new java.io.IOException("", (java.lang.Throwable) iOException27);
        org.apache.commons.math.ode.DerivativeException derivativeException29 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) iOException27);
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel31 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double32 = continuousOutputModel31.getFinalTime();
        double double33 = continuousOutputModel31.getInitialTime();
        java.lang.Object[] objArray34 = new java.lang.Object[] { double19, mathException24, iOException27, false, continuousOutputModel31 };
        java.lang.String[] strArray43 = new java.lang.String[] { "hi!", "org.apache.commons.math.MathException: ", "hi!", "org.apache.commons.math.MathException: ", "", "" };
        org.apache.commons.math.ode.DerivativeException derivativeException44 = new org.apache.commons.math.ode.DerivativeException("", strArray43);
        java.io.IOException iOException48 = new java.io.IOException("hi!");
        org.apache.commons.math.ode.DerivativeException derivativeException49 = new org.apache.commons.math.ode.DerivativeException((java.lang.Throwable) iOException48);
        org.apache.commons.math.MathException mathException50 = new org.apache.commons.math.MathException("hi!", (java.lang.Throwable) iOException48);
        java.lang.Object[] objArray51 = mathException50.getArguments();
        org.apache.commons.math.MathException mathException52 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: ", (java.lang.Throwable) mathException50);
        org.apache.commons.math.MathException mathException53 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: hi!", (java.lang.Object[]) strArray43, (java.lang.Throwable) mathException50);
        org.apache.commons.math.MathException mathException54 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: hi!", objArray34, (java.lang.Throwable) mathException53);
        org.apache.commons.math.MathException mathException55 = new org.apache.commons.math.MathException("org.apache.commons.math.MathException: ", objArray11, (java.lang.Throwable) mathException54);
        org.apache.commons.math.MathException mathException56 = new org.apache.commons.math.MathException("", objArray11);
        org.apache.commons.math.MathException mathException57 = new org.apache.commons.math.MathException("", (java.lang.Throwable) mathException56);
        org.apache.commons.math.MathException mathException58 = new org.apache.commons.math.MathException("", (java.lang.Throwable) mathException56);
        java.io.IOException iOException63 = new java.io.IOException("hi!");
        java.io.IOException iOException64 = new java.io.IOException("", (java.lang.Throwable) iOException63);
        org.apache.commons.math.MathException mathException65 = new org.apache.commons.math.MathException((java.lang.Throwable) iOException64);
        java.io.IOException iOException66 = new java.io.IOException((java.lang.Throwable) iOException64);
        org.apache.commons.math.MathException mathException67 = new org.apache.commons.math.MathException("java.io.IOException: hi!", (java.lang.Throwable) iOException66);
        java.io.IOException iOException68 = new java.io.IOException((java.lang.Throwable) iOException66);
        org.apache.commons.math.MathException mathException69 = new org.apache.commons.math.MathException("org.apache.commons.math.ode.DerivativeException: hi!", (java.lang.Throwable) iOException68);
        mathException58.addSuppressed((java.lang.Throwable) iOException68);
        java.lang.Class<?> wildcardClass71 = iOException68.getClass();
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray51), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray51), "[]");
        org.junit.Assert.assertNotNull(wildcardClass71);
    }

    @Test
    public void test01472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01472");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean1 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean2 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        boolean boolean4 = continuousOutputModel0.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel5 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double6 = continuousOutputModel5.getFinalTime();
        double double7 = continuousOutputModel5.getInitialTime();
        boolean boolean8 = continuousOutputModel5.requiresDenseOutput();
        continuousOutputModel0.append(continuousOutputModel5);
        continuousOutputModel5.reset();
        double double11 = continuousOutputModel5.getInitialTime();
        double double12 = continuousOutputModel5.getFinalTime();
        continuousOutputModel5.reset();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel14 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean15 = continuousOutputModel14.requiresDenseOutput();
        boolean boolean16 = continuousOutputModel14.requiresDenseOutput();
        continuousOutputModel14.reset();
        continuousOutputModel14.reset();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel19 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double20 = continuousOutputModel19.getFinalTime();
        double double21 = continuousOutputModel19.getInitialTime();
        boolean boolean22 = continuousOutputModel19.requiresDenseOutput();
        continuousOutputModel19.reset();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel24 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean25 = continuousOutputModel24.requiresDenseOutput();
        double double26 = continuousOutputModel24.getInitialTime();
        continuousOutputModel19.append(continuousOutputModel24);
        continuousOutputModel14.append(continuousOutputModel24);
        boolean boolean29 = continuousOutputModel14.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel30 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double31 = continuousOutputModel30.getFinalTime();
        double double32 = continuousOutputModel30.getInitialTime();
        double double33 = continuousOutputModel30.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel34 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double35 = continuousOutputModel34.getFinalTime();
        double double36 = continuousOutputModel34.getInitialTime();
        continuousOutputModel30.append(continuousOutputModel34);
        double double38 = continuousOutputModel30.getInitialTime();
        double double39 = continuousOutputModel30.getInitialTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel40 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double41 = continuousOutputModel40.getFinalTime();
        double double42 = continuousOutputModel40.getInitialTime();
        continuousOutputModel40.reset();
        double double44 = continuousOutputModel40.getInitialTime();
        continuousOutputModel30.append(continuousOutputModel40);
        continuousOutputModel14.append(continuousOutputModel30);
        continuousOutputModel5.append(continuousOutputModel14);
        boolean boolean48 = continuousOutputModel14.requiresDenseOutput();
        boolean boolean49 = continuousOutputModel14.requiresDenseOutput();
        double double50 = continuousOutputModel14.getFinalTime();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator51 = null;
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel14.handleStep(stepInterpolator51, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double50));
    }

    @Test
    public void test01473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01473");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double1 = continuousOutputModel0.getFinalTime();
        double double2 = continuousOutputModel0.getInitialTime();
        continuousOutputModel0.reset();
        double double4 = continuousOutputModel0.getInitialTime();
        // The following exception was thrown during execution in test generation
        try {
            double double5 = continuousOutputModel0.getInterpolatedTime();
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
    }

    @Test
    public void test01474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01474");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean1 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean2 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        boolean boolean4 = continuousOutputModel0.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel5 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double6 = continuousOutputModel5.getFinalTime();
        double double7 = continuousOutputModel5.getInitialTime();
        boolean boolean8 = continuousOutputModel5.requiresDenseOutput();
        continuousOutputModel0.append(continuousOutputModel5);
        double double10 = continuousOutputModel5.getInitialTime();
        continuousOutputModel5.reset();
        boolean boolean12 = continuousOutputModel5.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel13 = new org.apache.commons.math.ode.ContinuousOutputModel();
        continuousOutputModel13.reset();
        continuousOutputModel13.reset();
        continuousOutputModel5.append(continuousOutputModel13);
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel17 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double18 = continuousOutputModel17.getFinalTime();
        double double19 = continuousOutputModel17.getInitialTime();
        boolean boolean20 = continuousOutputModel17.requiresDenseOutput();
        double double21 = continuousOutputModel17.getInitialTime();
        continuousOutputModel17.reset();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel23 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean24 = continuousOutputModel23.requiresDenseOutput();
        double double25 = continuousOutputModel23.getInitialTime();
        boolean boolean26 = continuousOutputModel23.requiresDenseOutput();
        continuousOutputModel17.append(continuousOutputModel23);
        boolean boolean28 = continuousOutputModel23.requiresDenseOutput();
        continuousOutputModel5.append(continuousOutputModel23);
        continuousOutputModel5.reset();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator31 = null;
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel5.handleStep(stepInterpolator31, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
    }

    @Test
    public void test01475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01475");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean1 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean2 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        boolean boolean4 = continuousOutputModel0.requiresDenseOutput();
        double double5 = continuousOutputModel0.getFinalTime();
        boolean boolean6 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        continuousOutputModel0.reset();
        boolean boolean9 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean10 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        java.lang.Class<?> wildcardClass12 = continuousOutputModel0.getClass();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(wildcardClass12);
    }

    @Test
    public void test01476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01476");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean1 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean2 = continuousOutputModel0.requiresDenseOutput();
        double double3 = continuousOutputModel0.getFinalTime();
        continuousOutputModel0.reset();
        continuousOutputModel0.reset();
        boolean boolean6 = continuousOutputModel0.requiresDenseOutput();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator7 = null;
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel0.handleStep(stepInterpolator7, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
    }

    @Test
    public void test01477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01477");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean1 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean2 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        boolean boolean4 = continuousOutputModel0.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel5 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double6 = continuousOutputModel5.getFinalTime();
        double double7 = continuousOutputModel5.getInitialTime();
        boolean boolean8 = continuousOutputModel5.requiresDenseOutput();
        continuousOutputModel0.append(continuousOutputModel5);
        boolean boolean10 = continuousOutputModel5.requiresDenseOutput();
        boolean boolean11 = continuousOutputModel5.requiresDenseOutput();
        // The following exception was thrown during execution in test generation
        try {
            double double12 = continuousOutputModel5.getInterpolatedTime();
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test01478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01478");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double1 = continuousOutputModel0.getFinalTime();
        double double2 = continuousOutputModel0.getInitialTime();
        double double3 = continuousOutputModel0.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel4 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double5 = continuousOutputModel4.getFinalTime();
        double double6 = continuousOutputModel4.getInitialTime();
        continuousOutputModel0.append(continuousOutputModel4);
        double double8 = continuousOutputModel0.getFinalTime();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator9 = null;
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel0.handleStep(stepInterpolator9, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
    }

    @Test
    public void test01479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01479");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean1 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        boolean boolean3 = continuousOutputModel0.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel4 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean5 = continuousOutputModel4.requiresDenseOutput();
        boolean boolean6 = continuousOutputModel4.requiresDenseOutput();
        continuousOutputModel4.reset();
        boolean boolean8 = continuousOutputModel4.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel9 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double10 = continuousOutputModel9.getFinalTime();
        double double11 = continuousOutputModel9.getInitialTime();
        boolean boolean12 = continuousOutputModel9.requiresDenseOutput();
        continuousOutputModel4.append(continuousOutputModel9);
        boolean boolean14 = continuousOutputModel9.requiresDenseOutput();
        double double15 = continuousOutputModel9.getFinalTime();
        continuousOutputModel9.reset();
        double double17 = continuousOutputModel9.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel18 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean19 = continuousOutputModel18.requiresDenseOutput();
        boolean boolean20 = continuousOutputModel18.requiresDenseOutput();
        continuousOutputModel18.reset();
        boolean boolean22 = continuousOutputModel18.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel23 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double24 = continuousOutputModel23.getFinalTime();
        double double25 = continuousOutputModel23.getInitialTime();
        boolean boolean26 = continuousOutputModel23.requiresDenseOutput();
        continuousOutputModel18.append(continuousOutputModel23);
        boolean boolean28 = continuousOutputModel23.requiresDenseOutput();
        double double29 = continuousOutputModel23.getFinalTime();
        continuousOutputModel23.reset();
        double double31 = continuousOutputModel23.getInitialTime();
        boolean boolean32 = continuousOutputModel23.requiresDenseOutput();
        continuousOutputModel9.append(continuousOutputModel23);
        boolean boolean34 = continuousOutputModel9.requiresDenseOutput();
        continuousOutputModel0.append(continuousOutputModel9);
        continuousOutputModel0.reset();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator37 = null;
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel0.handleStep(stepInterpolator37, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
    }

    @Test
    public void test01480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01480");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean1 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel3 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double4 = continuousOutputModel3.getFinalTime();
        double double5 = continuousOutputModel3.getInitialTime();
        boolean boolean6 = continuousOutputModel3.requiresDenseOutput();
        continuousOutputModel3.reset();
        boolean boolean8 = continuousOutputModel3.requiresDenseOutput();
        boolean boolean9 = continuousOutputModel3.requiresDenseOutput();
        double double10 = continuousOutputModel3.getInitialTime();
        continuousOutputModel0.append(continuousOutputModel3);
        boolean boolean12 = continuousOutputModel0.requiresDenseOutput();
        double double13 = continuousOutputModel0.getInitialTime();
        continuousOutputModel0.reset();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator15 = null;
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel0.handleStep(stepInterpolator15, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
    }

    @Test
    public void test01481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01481");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean1 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean2 = continuousOutputModel0.requiresDenseOutput();
        double double3 = continuousOutputModel0.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel4 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean5 = continuousOutputModel4.requiresDenseOutput();
        continuousOutputModel0.append(continuousOutputModel4);
        continuousOutputModel0.reset();
        boolean boolean8 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        boolean boolean10 = continuousOutputModel0.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel11 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean12 = continuousOutputModel11.requiresDenseOutput();
        boolean boolean13 = continuousOutputModel11.requiresDenseOutput();
        continuousOutputModel11.reset();
        boolean boolean15 = continuousOutputModel11.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel16 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double17 = continuousOutputModel16.getFinalTime();
        double double18 = continuousOutputModel16.getInitialTime();
        boolean boolean19 = continuousOutputModel16.requiresDenseOutput();
        continuousOutputModel11.append(continuousOutputModel16);
        boolean boolean21 = continuousOutputModel11.requiresDenseOutput();
        double double22 = continuousOutputModel11.getFinalTime();
        continuousOutputModel11.reset();
        continuousOutputModel0.append(continuousOutputModel11);
        // The following exception was thrown during execution in test generation
        try {
            double double25 = continuousOutputModel11.getInterpolatedTime();
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
    }

    @Test
    public void test01482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01482");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel1 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean2 = continuousOutputModel1.requiresDenseOutput();
        boolean boolean3 = continuousOutputModel1.requiresDenseOutput();
        double double4 = continuousOutputModel1.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel5 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean6 = continuousOutputModel5.requiresDenseOutput();
        continuousOutputModel1.append(continuousOutputModel5);
        continuousOutputModel0.append(continuousOutputModel5);
        boolean boolean9 = continuousOutputModel5.requiresDenseOutput();
        double double10 = continuousOutputModel5.getInitialTime();
        continuousOutputModel5.reset();
        double double12 = continuousOutputModel5.getInitialTime();
        boolean boolean13 = continuousOutputModel5.requiresDenseOutput();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator14 = null;
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel5.handleStep(stepInterpolator14, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test01483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01483");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean1 = continuousOutputModel0.requiresDenseOutput();
        double double2 = continuousOutputModel0.getInitialTime();
        boolean boolean3 = continuousOutputModel0.requiresDenseOutput();
        // The following exception was thrown during execution in test generation
        try {
            double double4 = continuousOutputModel0.getInterpolatedTime();
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
    }

    @Test
    public void test01484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01484");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double1 = continuousOutputModel0.getFinalTime();
        double double2 = continuousOutputModel0.getInitialTime();
        double double3 = continuousOutputModel0.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel4 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double5 = continuousOutputModel4.getFinalTime();
        double double6 = continuousOutputModel4.getInitialTime();
        continuousOutputModel0.append(continuousOutputModel4);
        double double8 = continuousOutputModel0.getInitialTime();
        double double9 = continuousOutputModel0.getInitialTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel10 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double11 = continuousOutputModel10.getFinalTime();
        double double12 = continuousOutputModel10.getInitialTime();
        continuousOutputModel10.reset();
        double double14 = continuousOutputModel10.getInitialTime();
        continuousOutputModel0.append(continuousOutputModel10);
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel16 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double17 = continuousOutputModel16.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel18 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean19 = continuousOutputModel18.requiresDenseOutput();
        double double20 = continuousOutputModel18.getInitialTime();
        boolean boolean21 = continuousOutputModel18.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel22 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double23 = continuousOutputModel22.getFinalTime();
        double double24 = continuousOutputModel22.getInitialTime();
        boolean boolean25 = continuousOutputModel22.requiresDenseOutput();
        continuousOutputModel22.reset();
        boolean boolean27 = continuousOutputModel22.requiresDenseOutput();
        continuousOutputModel18.append(continuousOutputModel22);
        continuousOutputModel16.append(continuousOutputModel18);
        continuousOutputModel0.append(continuousOutputModel18);
        double double31 = continuousOutputModel0.getInitialTime();
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel0.setInterpolatedTime((-1.0d));
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double31));
    }

    @Test
    public void test01485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01485");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double1 = continuousOutputModel0.getFinalTime();
        double double2 = continuousOutputModel0.getInitialTime();
        double double3 = continuousOutputModel0.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel4 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double5 = continuousOutputModel4.getFinalTime();
        double double6 = continuousOutputModel4.getInitialTime();
        continuousOutputModel0.append(continuousOutputModel4);
        double double8 = continuousOutputModel0.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel9 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double10 = continuousOutputModel9.getFinalTime();
        double double11 = continuousOutputModel9.getInitialTime();
        boolean boolean12 = continuousOutputModel9.requiresDenseOutput();
        double double13 = continuousOutputModel9.getInitialTime();
        continuousOutputModel9.reset();
        boolean boolean15 = continuousOutputModel9.requiresDenseOutput();
        continuousOutputModel0.append(continuousOutputModel9);
        continuousOutputModel9.reset();
        double double18 = continuousOutputModel9.getFinalTime();
        java.lang.Class<?> wildcardClass19 = continuousOutputModel9.getClass();
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test01486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01486");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean1 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean2 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        boolean boolean4 = continuousOutputModel0.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel5 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double6 = continuousOutputModel5.getFinalTime();
        double double7 = continuousOutputModel5.getInitialTime();
        boolean boolean8 = continuousOutputModel5.requiresDenseOutput();
        continuousOutputModel0.append(continuousOutputModel5);
        double double10 = continuousOutputModel5.getInitialTime();
        boolean boolean11 = continuousOutputModel5.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel12 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double13 = continuousOutputModel12.getFinalTime();
        double double14 = continuousOutputModel12.getInitialTime();
        double double15 = continuousOutputModel12.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel16 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double17 = continuousOutputModel16.getFinalTime();
        double double18 = continuousOutputModel16.getInitialTime();
        continuousOutputModel12.append(continuousOutputModel16);
        double double20 = continuousOutputModel12.getFinalTime();
        boolean boolean21 = continuousOutputModel12.requiresDenseOutput();
        boolean boolean22 = continuousOutputModel12.requiresDenseOutput();
        double double23 = continuousOutputModel12.getFinalTime();
        continuousOutputModel5.append(continuousOutputModel12);
        double double25 = continuousOutputModel12.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel26 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean27 = continuousOutputModel26.requiresDenseOutput();
        boolean boolean28 = continuousOutputModel26.requiresDenseOutput();
        continuousOutputModel26.reset();
        continuousOutputModel26.reset();
        boolean boolean31 = continuousOutputModel26.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel32 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double33 = continuousOutputModel32.getFinalTime();
        double double34 = continuousOutputModel32.getInitialTime();
        double double35 = continuousOutputModel32.getFinalTime();
        boolean boolean36 = continuousOutputModel32.requiresDenseOutput();
        continuousOutputModel26.append(continuousOutputModel32);
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel38 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean39 = continuousOutputModel38.requiresDenseOutput();
        boolean boolean40 = continuousOutputModel38.requiresDenseOutput();
        continuousOutputModel38.reset();
        continuousOutputModel38.reset();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel43 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double44 = continuousOutputModel43.getFinalTime();
        double double45 = continuousOutputModel43.getInitialTime();
        boolean boolean46 = continuousOutputModel43.requiresDenseOutput();
        continuousOutputModel43.reset();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel48 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean49 = continuousOutputModel48.requiresDenseOutput();
        double double50 = continuousOutputModel48.getInitialTime();
        continuousOutputModel43.append(continuousOutputModel48);
        continuousOutputModel38.append(continuousOutputModel48);
        continuousOutputModel38.reset();
        boolean boolean54 = continuousOutputModel38.requiresDenseOutput();
        double double55 = continuousOutputModel38.getFinalTime();
        continuousOutputModel26.append(continuousOutputModel38);
        continuousOutputModel12.append(continuousOutputModel26);
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel12.setInterpolatedTime((double) 100.0f);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double15));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double50));
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double55));
    }

    @Test
    public void test01487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01487");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean1 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean2 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        boolean boolean4 = continuousOutputModel0.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel5 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double6 = continuousOutputModel5.getFinalTime();
        double double7 = continuousOutputModel5.getInitialTime();
        boolean boolean8 = continuousOutputModel5.requiresDenseOutput();
        continuousOutputModel0.append(continuousOutputModel5);
        double double10 = continuousOutputModel5.getInitialTime();
        continuousOutputModel5.reset();
        boolean boolean12 = continuousOutputModel5.requiresDenseOutput();
        continuousOutputModel5.reset();
        continuousOutputModel5.reset();
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test01488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01488");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean1 = continuousOutputModel0.requiresDenseOutput();
        double double2 = continuousOutputModel0.getInitialTime();
        boolean boolean3 = continuousOutputModel0.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel4 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean5 = continuousOutputModel4.requiresDenseOutput();
        boolean boolean6 = continuousOutputModel4.requiresDenseOutput();
        continuousOutputModel0.append(continuousOutputModel4);
        double double8 = continuousOutputModel0.getInitialTime();
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray9 = continuousOutputModel0.getInterpolatedState();
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
    }

    @Test
    public void test01489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01489");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double1 = continuousOutputModel0.getFinalTime();
        double double2 = continuousOutputModel0.getInitialTime();
        double double3 = continuousOutputModel0.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel4 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double5 = continuousOutputModel4.getFinalTime();
        double double6 = continuousOutputModel4.getInitialTime();
        continuousOutputModel0.append(continuousOutputModel4);
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel8 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean9 = continuousOutputModel8.requiresDenseOutput();
        double double10 = continuousOutputModel8.getInitialTime();
        double double11 = continuousOutputModel8.getInitialTime();
        continuousOutputModel0.append(continuousOutputModel8);
        continuousOutputModel0.reset();
        double double14 = continuousOutputModel0.getFinalTime();
        boolean boolean15 = continuousOutputModel0.requiresDenseOutput();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator16 = null;
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel0.handleStep(stepInterpolator16, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    }

    @Test
    public void test01490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01490");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double1 = continuousOutputModel0.getFinalTime();
        double double2 = continuousOutputModel0.getInitialTime();
        double double3 = continuousOutputModel0.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel4 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double5 = continuousOutputModel4.getFinalTime();
        double double6 = continuousOutputModel4.getInitialTime();
        continuousOutputModel0.append(continuousOutputModel4);
        double double8 = continuousOutputModel0.getFinalTime();
        boolean boolean9 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean10 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean11 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean12 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel14 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean15 = continuousOutputModel14.requiresDenseOutput();
        continuousOutputModel14.reset();
        double double17 = continuousOutputModel14.getInitialTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel18 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean19 = continuousOutputModel18.requiresDenseOutput();
        boolean boolean20 = continuousOutputModel18.requiresDenseOutput();
        double double21 = continuousOutputModel18.getFinalTime();
        double double22 = continuousOutputModel18.getInitialTime();
        boolean boolean23 = continuousOutputModel18.requiresDenseOutput();
        continuousOutputModel14.append(continuousOutputModel18);
        continuousOutputModel0.append(continuousOutputModel18);
        continuousOutputModel18.reset();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator27 = null;
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel18.handleStep(stepInterpolator27, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue(Double.isNaN(double22));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
    }

    @Test
    public void test01491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01491");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean1 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean2 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        boolean boolean4 = continuousOutputModel0.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel5 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean6 = continuousOutputModel5.requiresDenseOutput();
        double double7 = continuousOutputModel5.getInitialTime();
        boolean boolean8 = continuousOutputModel5.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel9 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean10 = continuousOutputModel9.requiresDenseOutput();
        boolean boolean11 = continuousOutputModel9.requiresDenseOutput();
        continuousOutputModel5.append(continuousOutputModel9);
        continuousOutputModel0.append(continuousOutputModel9);
        boolean boolean14 = continuousOutputModel9.requiresDenseOutput();
        continuousOutputModel9.reset();
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel9.setInterpolatedTime((double) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    }

    @Test
    public void test01492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01492");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean1 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean2 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        continuousOutputModel0.reset();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel5 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double6 = continuousOutputModel5.getFinalTime();
        double double7 = continuousOutputModel5.getInitialTime();
        boolean boolean8 = continuousOutputModel5.requiresDenseOutput();
        continuousOutputModel5.reset();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel10 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean11 = continuousOutputModel10.requiresDenseOutput();
        double double12 = continuousOutputModel10.getInitialTime();
        continuousOutputModel5.append(continuousOutputModel10);
        continuousOutputModel0.append(continuousOutputModel10);
        boolean boolean15 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean16 = continuousOutputModel0.requiresDenseOutput();
        double double17 = continuousOutputModel0.getFinalTime();
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray18 = continuousOutputModel0.getInterpolatedState();
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
    }

    @Test
    public void test01493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01493");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double1 = continuousOutputModel0.getFinalTime();
        double double2 = continuousOutputModel0.getInitialTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel3 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean4 = continuousOutputModel3.requiresDenseOutput();
        boolean boolean5 = continuousOutputModel3.requiresDenseOutput();
        double double6 = continuousOutputModel3.getFinalTime();
        continuousOutputModel3.reset();
        boolean boolean8 = continuousOutputModel3.requiresDenseOutput();
        continuousOutputModel3.reset();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel10 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean11 = continuousOutputModel10.requiresDenseOutput();
        boolean boolean12 = continuousOutputModel10.requiresDenseOutput();
        double double13 = continuousOutputModel10.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel14 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean15 = continuousOutputModel14.requiresDenseOutput();
        continuousOutputModel10.append(continuousOutputModel14);
        boolean boolean17 = continuousOutputModel10.requiresDenseOutput();
        continuousOutputModel10.reset();
        continuousOutputModel3.append(continuousOutputModel10);
        continuousOutputModel3.reset();
        continuousOutputModel0.append(continuousOutputModel3);
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel22 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean23 = continuousOutputModel22.requiresDenseOutput();
        boolean boolean24 = continuousOutputModel22.requiresDenseOutput();
        continuousOutputModel22.reset();
        boolean boolean26 = continuousOutputModel22.requiresDenseOutput();
        double double27 = continuousOutputModel22.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel28 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double29 = continuousOutputModel28.getFinalTime();
        double double30 = continuousOutputModel28.getInitialTime();
        boolean boolean31 = continuousOutputModel28.requiresDenseOutput();
        continuousOutputModel28.reset();
        double double33 = continuousOutputModel28.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel34 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double35 = continuousOutputModel34.getFinalTime();
        double double36 = continuousOutputModel34.getInitialTime();
        continuousOutputModel28.append(continuousOutputModel34);
        continuousOutputModel22.append(continuousOutputModel34);
        continuousOutputModel22.reset();
        continuousOutputModel0.append(continuousOutputModel22);
        boolean boolean41 = continuousOutputModel22.requiresDenseOutput();
        boolean boolean42 = continuousOutputModel22.requiresDenseOutput();
        // The following exception was thrown during execution in test generation
        try {
            double double43 = continuousOutputModel22.getInterpolatedTime();
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double1));
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertTrue(Double.isNaN(double29));
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
    }

    @Test
    public void test01494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01494");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean1 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean2 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        boolean boolean4 = continuousOutputModel0.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel5 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double6 = continuousOutputModel5.getFinalTime();
        double double7 = continuousOutputModel5.getInitialTime();
        boolean boolean8 = continuousOutputModel5.requiresDenseOutput();
        continuousOutputModel0.append(continuousOutputModel5);
        continuousOutputModel5.reset();
        double double11 = continuousOutputModel5.getInitialTime();
        double double12 = continuousOutputModel5.getFinalTime();
        continuousOutputModel5.reset();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel14 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean15 = continuousOutputModel14.requiresDenseOutput();
        boolean boolean16 = continuousOutputModel14.requiresDenseOutput();
        continuousOutputModel14.reset();
        continuousOutputModel14.reset();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel19 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double20 = continuousOutputModel19.getFinalTime();
        double double21 = continuousOutputModel19.getInitialTime();
        boolean boolean22 = continuousOutputModel19.requiresDenseOutput();
        continuousOutputModel19.reset();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel24 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean25 = continuousOutputModel24.requiresDenseOutput();
        double double26 = continuousOutputModel24.getInitialTime();
        continuousOutputModel19.append(continuousOutputModel24);
        continuousOutputModel14.append(continuousOutputModel24);
        boolean boolean29 = continuousOutputModel14.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel30 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double31 = continuousOutputModel30.getFinalTime();
        double double32 = continuousOutputModel30.getInitialTime();
        double double33 = continuousOutputModel30.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel34 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double35 = continuousOutputModel34.getFinalTime();
        double double36 = continuousOutputModel34.getInitialTime();
        continuousOutputModel30.append(continuousOutputModel34);
        double double38 = continuousOutputModel30.getInitialTime();
        double double39 = continuousOutputModel30.getInitialTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel40 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double41 = continuousOutputModel40.getFinalTime();
        double double42 = continuousOutputModel40.getInitialTime();
        continuousOutputModel40.reset();
        double double44 = continuousOutputModel40.getInitialTime();
        continuousOutputModel30.append(continuousOutputModel40);
        continuousOutputModel14.append(continuousOutputModel30);
        continuousOutputModel5.append(continuousOutputModel14);
        boolean boolean48 = continuousOutputModel14.requiresDenseOutput();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator49 = null;
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel14.handleStep(stepInterpolator49, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue(Double.isNaN(double21));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertTrue(Double.isNaN(double41));
        org.junit.Assert.assertTrue(Double.isNaN(double42));
        org.junit.Assert.assertTrue(Double.isNaN(double44));
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
    }

    @Test
    public void test01495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01495");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean1 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean2 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        boolean boolean4 = continuousOutputModel0.requiresDenseOutput();
        double double5 = continuousOutputModel0.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel6 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double7 = continuousOutputModel6.getFinalTime();
        double double8 = continuousOutputModel6.getInitialTime();
        boolean boolean9 = continuousOutputModel6.requiresDenseOutput();
        continuousOutputModel6.reset();
        double double11 = continuousOutputModel6.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel12 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double13 = continuousOutputModel12.getFinalTime();
        double double14 = continuousOutputModel12.getInitialTime();
        continuousOutputModel6.append(continuousOutputModel12);
        continuousOutputModel0.append(continuousOutputModel12);
        boolean boolean17 = continuousOutputModel12.requiresDenseOutput();
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel12.setInterpolatedTime((double) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
    }

    @Test
    public void test01496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01496");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean1 = continuousOutputModel0.requiresDenseOutput();
        double double2 = continuousOutputModel0.getInitialTime();
        boolean boolean3 = continuousOutputModel0.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel4 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double5 = continuousOutputModel4.getFinalTime();
        double double6 = continuousOutputModel4.getInitialTime();
        boolean boolean7 = continuousOutputModel4.requiresDenseOutput();
        continuousOutputModel4.reset();
        boolean boolean9 = continuousOutputModel4.requiresDenseOutput();
        continuousOutputModel0.append(continuousOutputModel4);
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel11 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double12 = continuousOutputModel11.getFinalTime();
        double double13 = continuousOutputModel11.getInitialTime();
        double double14 = continuousOutputModel11.getFinalTime();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel15 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double16 = continuousOutputModel15.getFinalTime();
        double double17 = continuousOutputModel15.getInitialTime();
        continuousOutputModel11.append(continuousOutputModel15);
        double double19 = continuousOutputModel11.getFinalTime();
        boolean boolean20 = continuousOutputModel11.requiresDenseOutput();
        boolean boolean21 = continuousOutputModel11.requiresDenseOutput();
        boolean boolean22 = continuousOutputModel11.requiresDenseOutput();
        boolean boolean23 = continuousOutputModel11.requiresDenseOutput();
        continuousOutputModel0.append(continuousOutputModel11);
        boolean boolean25 = continuousOutputModel11.requiresDenseOutput();
        continuousOutputModel11.reset();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator27 = null;
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel11.handleStep(stepInterpolator27, false);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double5));
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double12));
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertTrue(Double.isNaN(double14));
        org.junit.Assert.assertTrue(Double.isNaN(double16));
        org.junit.Assert.assertTrue(Double.isNaN(double17));
        org.junit.Assert.assertTrue(Double.isNaN(double19));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
    }

    @Test
    public void test01497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01497");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean1 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean2 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        boolean boolean4 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel6 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double7 = continuousOutputModel6.getFinalTime();
        continuousOutputModel6.reset();
        continuousOutputModel0.append(continuousOutputModel6);
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel0.setInterpolatedTime((double) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double7));
    }

    @Test
    public void test01498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01498");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean1 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean2 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        boolean boolean4 = continuousOutputModel0.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel5 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double6 = continuousOutputModel5.getFinalTime();
        double double7 = continuousOutputModel5.getInitialTime();
        boolean boolean8 = continuousOutputModel5.requiresDenseOutput();
        continuousOutputModel0.append(continuousOutputModel5);
        double double10 = continuousOutputModel5.getInitialTime();
        double double11 = continuousOutputModel5.getFinalTime();
        continuousOutputModel5.reset();
        boolean boolean13 = continuousOutputModel5.requiresDenseOutput();
        org.apache.commons.math.ode.StepInterpolator stepInterpolator14 = null;
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel5.handleStep(stepInterpolator14, true);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue(Double.isNaN(double11));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test01499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01499");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean1 = continuousOutputModel0.requiresDenseOutput();
        double double2 = continuousOutputModel0.getInitialTime();
        boolean boolean3 = continuousOutputModel0.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel4 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean5 = continuousOutputModel4.requiresDenseOutput();
        boolean boolean6 = continuousOutputModel4.requiresDenseOutput();
        continuousOutputModel0.append(continuousOutputModel4);
        double double8 = continuousOutputModel0.getInitialTime();
        double double9 = continuousOutputModel0.getFinalTime();
        boolean boolean10 = continuousOutputModel0.requiresDenseOutput();
        double double11 = continuousOutputModel0.getInitialTime();
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel0.setInterpolatedTime(1.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double2));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double8));
        org.junit.Assert.assertTrue(Double.isNaN(double9));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double11));
    }

    @Test
    public void test01500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01500");
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel0 = new org.apache.commons.math.ode.ContinuousOutputModel();
        boolean boolean1 = continuousOutputModel0.requiresDenseOutput();
        boolean boolean2 = continuousOutputModel0.requiresDenseOutput();
        continuousOutputModel0.reset();
        boolean boolean4 = continuousOutputModel0.requiresDenseOutput();
        org.apache.commons.math.ode.ContinuousOutputModel continuousOutputModel5 = new org.apache.commons.math.ode.ContinuousOutputModel();
        double double6 = continuousOutputModel5.getFinalTime();
        double double7 = continuousOutputModel5.getInitialTime();
        boolean boolean8 = continuousOutputModel5.requiresDenseOutput();
        continuousOutputModel0.append(continuousOutputModel5);
        double double10 = continuousOutputModel5.getInitialTime();
        continuousOutputModel5.reset();
        boolean boolean12 = continuousOutputModel5.requiresDenseOutput();
        // The following exception was thrown during execution in test generation
        try {
            continuousOutputModel5.setInterpolatedTime((double) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 0, Size: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double6));
        org.junit.Assert.assertTrue(Double.isNaN(double7));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }
}


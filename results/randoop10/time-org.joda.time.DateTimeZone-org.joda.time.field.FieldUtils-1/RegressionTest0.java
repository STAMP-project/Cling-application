import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest0 {

    public static boolean debug = false;

    @Test
    public void test00001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00001");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((java.lang.Object) 100.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: java.lang.Double");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00002");
        java.time.ZoneId zoneId0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone(zoneId0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00003");
        org.joda.time.Chronology chronology1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((java.lang.Object) (byte) 10, chronology1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: java.lang.Byte");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00004");
        java.util.List<java.util.Locale.LanguageRange> languageRangeList0 = null;
        java.util.Locale.LanguageRange[] languageRangeArray1 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList2 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList2, languageRangeArray1);
        java.util.Locale[] localeArray4 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList5 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList5, localeArray4);
        java.util.Locale locale7 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList2, (java.util.Collection<java.util.Locale>) localeList5);
        java.util.Locale.FilteringMode filteringMode8 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale> localeList9 = java.util.Locale.filter(languageRangeList0, (java.util.Collection<java.util.Locale>) localeList5, filteringMode8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(languageRangeArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(localeArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(locale7);
    }

    @Test
    public void test00005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00005");
        long long2 = org.joda.time.field.FieldUtils.safeMultiply(0L, 100L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
    }

    @Test
    public void test00006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00006");
        int int2 = org.joda.time.field.FieldUtils.safeMultiply(10, 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
    }

    @Test
    public void test00007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00007");
        java.util.TimeZone timeZone0 = null;
        java.util.TimeZone.setDefault(timeZone0);
    }

    @Test
    public void test00008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00008");
        int int1 = org.joda.time.field.FieldUtils.safeNegate((int) (byte) 100);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + (-100) + "'", int1 == (-100));
    }

    @Test
    public void test00009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00009");
        double double0 = java.util.Locale.LanguageRange.MIN_WEIGHT;
        org.junit.Assert.assertTrue("'" + double0 + "' != '" + 0.0d + "'", double0 == 0.0d);
    }

    @Test
    public void test00010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00010");
        java.util.Locale locale0 = java.util.Locale.FRENCH;
        java.util.Set<java.lang.String> strSet1 = locale0.getUnicodeLocaleAttributes();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str3 = locale0.getUnicodeLocaleType("2022-02-11T09:47:48.172");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed Unicode locale key: 2022-02-11T09:47:48.172");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet1);
    }

    @Test
    public void test00011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00011");
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("11");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=11");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00012");
        long long2 = org.joda.time.field.FieldUtils.safeSubtract(874L, (long) '4');
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 822L + "'", long2 == 822L);
    }

    @Test
    public void test00013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00013");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property5 = localDateTime1.dayOfMonth();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime7 = property5.setCopy("hi!");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"hi!\" for dayOfMonth is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
    }

    @Test
    public void test00014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00014");
        int int2 = org.joda.time.field.FieldUtils.safeMultiplyToInt(0L, (long) 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
    }

    @Test
    public void test00015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00015");
        org.joda.time.Chronology chronology7 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(100, (int) (byte) 10, (int) (byte) 1, (int) (short) 0, 100, (-1), (int) (short) 10, chronology7);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 100 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00016");
        org.joda.time.Chronology chronology1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((java.lang.Object) (short) 0, chronology1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: java.lang.Short");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00017");
        org.joda.time.Chronology chronology1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((java.lang.Object) "weekyear", chronology1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"weekyear\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00018");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder3 = builder0.setUnicodeLocaleKeyword("hi!", "weekyear");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale keyword key: hi! [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00019");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        java.util.Locale locale3 = null;
        java.lang.String str4 = dateTimeZone1.getName((long) (short) 10, locale3);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((java.lang.Object) (short) 100, dateTimeZone1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: java.lang.Short");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00" + "'", str4, "+00:00");
    }

    @Test
    public void test00020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00020");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.minusMillis((int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime4 = localDateTime0.withDayOfWeek(874);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 874 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime2);
    }

    @Test
    public void test00021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00021");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime1.plusMinutes((int) '#');
        org.joda.time.LocalDateTime localDateTime8 = localDateTime1.minusMinutes((int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime10 = localDateTime8.withDayOfYear(0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for dayOfYear must be in the range [1,365]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
    }

    @Test
    public void test00022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00022");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfYear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.field.FieldUtils.verifyValueBounds(dateTimeFieldType0, (int) (short) -1, (int) ' ', 0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1 for dayOfYear must be in the range [32,0]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
    }

    @Test
    public void test00023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00023");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime1.plusMinutes((int) '#');
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType8 = localDateTime6.getFieldType(100);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 100");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
    }

    @Test
    public void test00024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00024");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder2 = builder0.setRegion("fra");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed region: fra [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00025");
        java.lang.String[] strArray0 = java.util.TimeZone.getAvailableIDs();
        org.junit.Assert.assertNotNull(strArray0);
    }

    @Test
    public void test00026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00026");
        int int0 = java.util.TimeZone.LONG;
        org.junit.Assert.assertTrue("'" + int0 + "' != '" + 1 + "'", int0 == 1);
    }

    @Test
    public void test00027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00027");
        // The following exception was thrown during execution in test generation
        try {
            int int4 = org.joda.time.field.FieldUtils.getWrappedValue((int) (short) 0, 100, 0, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: MIN > MAX");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00028");
        java.util.Locale locale2 = new java.util.Locale("", "weekyear");
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime();
        boolean boolean5 = localDateTime3.isBefore((org.joda.time.ReadablePartial) localDateTime4);
        boolean boolean6 = locale2.equals((java.lang.Object) localDateTime3);
        org.junit.Assert.assertEquals(locale2.toString(), "_WEEKYEAR");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test00029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00029");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder3 = builder1.setVariant("monthOfYear");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed variant: monthOfYear [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
    }

    @Test
    public void test00030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00030");
        int int2 = org.joda.time.field.FieldUtils.safeMultiply(100, (-1));
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-100) + "'", int2 == (-100));
    }

    @Test
    public void test00031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00031");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        int int2 = dateTimeZone0.getStandardOffset((long) (-100));
        java.util.TimeZone timeZone3 = dateTimeZone0.toTimeZone();
        // The following exception was thrown during execution in test generation
        try {
            int int10 = timeZone3.getOffset((int) (short) 100, 10, (-100), 10, (int) (byte) 100, 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal era 100");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Coordinated Universal Time");
    }

    @Test
    public void test00032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00032");
        java.lang.String[] strArray0 = java.util.Locale.getISOCountries();
        org.junit.Assert.assertNotNull(strArray0);
    }

    @Test
    public void test00033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00033");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.minusMillis((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.plusDays(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.withField(dateTimeFieldType5, 0);
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime();
        boolean boolean10 = localDateTime8.isBefore((org.joda.time.ReadablePartial) localDateTime9);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime9.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime9.plusMinutes((int) '#');
        org.joda.time.LocalDateTime localDateTime16 = localDateTime9.minusMinutes((int) (short) 1);
        boolean boolean17 = localDateTime7.isAfter((org.joda.time.ReadablePartial) localDateTime16);
        org.joda.time.LocalDateTime.Property property18 = localDateTime7.secondOfMinute();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType20 = localDateTime7.getFieldType((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: -1");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(property18);
    }

    @Test
    public void test00034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00034");
        int int0 = java.util.TimeZone.SHORT;
        org.junit.Assert.assertTrue("'" + int0 + "' != '" + 0 + "'", int0 == 0);
    }

    @Test
    public void test00035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00035");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        int int2 = dateTimeZone0.getStandardOffset((long) (-100));
        java.util.TimeZone timeZone3 = dateTimeZone0.toTimeZone();
        java.lang.String str6 = timeZone3.getDisplayName(true, (int) (byte) 1);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Coordinated Universal Time" + "'", str6, "Coordinated Universal Time");
    }

    @Test
    public void test00036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00036");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        int int2 = dateTimeZone0.getStandardOffset((long) (-100));
        java.util.TimeZone timeZone3 = dateTimeZone0.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        // The following exception was thrown during execution in test generation
        try {
            int int11 = timeZone3.getOffset((int) 'a', 22, (int) (short) 1, (int) (short) -1, (int) (byte) 100, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal era 97");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone4);
    }

    @Test
    public void test00037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00037");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property5 = localDateTime1.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime6 = property5.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField7 = property5.getField();
        org.joda.time.DurationField durationField8 = dateTimeField7.getLeapDurationField();
        org.joda.time.ReadablePartial readablePartial9 = null;
        int[] intArray12 = new int[] { (byte) -1, (short) 0 };
        // The following exception was thrown during execution in test generation
        try {
            int int13 = dateTimeField7.getMaximumValue(readablePartial9, intArray12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNull(durationField8);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[-1, 0]");
    }

    @Test
    public void test00038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00038");
        char char0 = java.util.Locale.UNICODE_LOCALE_EXTENSION;
        org.junit.Assert.assertTrue("'" + char0 + "' != '" + 'u' + "'", char0 == 'u');
    }

    @Test
    public void test00039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00039");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        int int2 = dateTimeZone0.getStandardOffset((long) (-100));
        java.util.TimeZone timeZone3 = dateTimeZone0.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        java.util.Date date5 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean6 = timeZone3.inDaylightTime(date5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone4);
    }

    @Test
    public void test00040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00040");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        int int2 = dateTimeZone0.getStandardOffset((long) (-100));
        java.util.TimeZone timeZone3 = dateTimeZone0.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        int int7 = dateTimeZone5.getStandardOffset((long) (-100));
        java.util.TimeZone timeZone8 = dateTimeZone5.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        boolean boolean10 = timeZone3.hasSameRules(timeZone8);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str13 = timeZone8.getDisplayName(false, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal style: 10");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(timeZone8);
        org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test00041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00041");
        int int1 = org.joda.time.field.FieldUtils.safeToInt((long) (byte) 0);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
    }

    @Test
    public void test00042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00042");
        org.joda.time.Chronology chronology7 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime((int) (short) 0, 1, (int) (byte) 0, (int) (short) 100, (int) 'a', (int) (short) 1, (int) (short) 10, chronology7);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 100 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00043");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder4 = builder0.setExtension('a', "2022-02-11T09:47:50.218");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed extension value: 11T09:47:50.218 [at index 8]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
    }

    @Test
    public void test00044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00044");
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("monthOfYear");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=monthofyear");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00045");
        java.util.Locale locale2 = new java.util.Locale("fra", "");
        java.util.Set<java.lang.String> strSet3 = locale2.getUnicodeLocaleAttributes();
        java.lang.String str4 = locale2.getScript();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str6 = locale2.getUnicodeLocaleType("2022-02-11T09:47:50.218");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed Unicode locale key: 2022-02-11T09:47:50.218");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(locale2.toString(), "fra");
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
    }

    @Test
    public void test00046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00046");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property5 = localDateTime1.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime6 = property5.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField7 = property5.getField();
        long long9 = dateTimeField7.remainder((-1L));
        int int10 = dateTimeField7.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minusMillis((int) (byte) 1);
        java.lang.String str14 = localDateTime13.toString();
        org.joda.time.DateTime dateTime15 = localDateTime13.toDateTime();
        int[] intArray17 = null;
        java.util.Locale locale19 = java.util.Locale.FRENCH;
        java.util.Set<java.lang.String> strSet20 = locale19.getUnicodeLocaleAttributes();
        java.lang.String str21 = locale19.getVariant();
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray22 = dateTimeField7.set((org.joda.time.ReadablePartial) localDateTime13, 10, intArray17, "2022-02-11T09:47:50.173", locale19);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2022-02-11T09:47:50.173\" for dayOfMonth is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 86399999L + "'", long9 == 86399999L);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 31 + "'", int10 == 31);
        org.junit.Assert.assertNotNull(localDateTime13);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "2022-02-11T09:47:50.890" + "'", str14, "2022-02-11T09:47:50.890");
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
    }

    @Test
    public void test00047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00047");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        int int3 = localDateTime1.getYearOfCentury();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withMonthOfYear((-100));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -100 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 22 + "'", int3 == 22);
    }

    @Test
    public void test00048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00048");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder3 = builder0.setUnicodeLocaleKeyword("2022-02-11T09:47:50.219", "2022-02-11T09:47:50.202");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale keyword key: 2022-02-11T09:47:50.219 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00049");
        int int2 = org.joda.time.field.FieldUtils.safeMultiplyToInt(52L, (long) (short) 100);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 5200 + "'", int2 == 5200);
    }

    @Test
    public void test00050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00050");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        int int1 = localDateTime0.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime3 = localDateTime0.minusMonths((int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField5 = localDateTime3.getField((int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 100");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 22 + "'", int1 == 22);
        org.junit.Assert.assertNotNull(localDateTime3);
    }

    @Test
    public void test00051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00051");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property5 = localDateTime1.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime6 = property5.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField7 = property5.getField();
        long long9 = dateTimeField7.remainder((-1L));
        int int10 = dateTimeField7.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime();
        int int12 = localDateTime11.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime11.minusMonths((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minusMonths((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.plusWeeks(22);
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime();
        boolean boolean22 = localDateTime20.isBefore((org.joda.time.ReadablePartial) localDateTime21);
        int[] intArray23 = localDateTime21.getValues();
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray25 = dateTimeField7.addWrapPartial((org.joda.time.ReadablePartial) localDateTime16, 5200, intArray23, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5200");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 86399999L + "'", long9 == 86399999L);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 31 + "'", int10 == 31);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 22 + "'", int12 == 22);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(intArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[2022, 2, 11, 35271134]");
    }

    @Test
    public void test00052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00052");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.minusMillis((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.plusDays(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.withField(dateTimeFieldType5, 0);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime9 = localDateTime2.withDayOfMonth((int) 'a');
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 97 for dayOfMonth must be in the range [1,28]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(localDateTime7);
    }

    @Test
    public void test00053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00053");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((java.lang.Object) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: java.lang.Short");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00054");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(6, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minutes out of range: 100");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00055");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property5 = localDateTime1.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime6 = property5.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField7 = property5.getField();
        long long9 = dateTimeField7.remainder((-1L));
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime();
        int int11 = localDateTime10.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime10.plusHours((-1));
        int[] intArray14 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int15 = dateTimeField7.getMaximumValue((org.joda.time.ReadablePartial) localDateTime10, intArray14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 86399999L + "'", long9 == 86399999L);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 314 + "'", int11 == 314);
        org.junit.Assert.assertNotNull(localDateTime13);
    }

    @Test
    public void test00056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00056");
        double double0 = java.util.Locale.LanguageRange.MAX_WEIGHT;
        org.junit.Assert.assertTrue("'" + double0 + "' != '" + 1.0d + "'", double0 == 1.0d);
    }

    @Test
    public void test00057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00057");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds((int) (byte) 100);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = null;
        java.lang.String str6 = localDateTime1.toString(dateTimeFormatter5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        org.joda.time.LocalDateTime.Property property8 = localDateTime1.property(dateTimeFieldType7);
        java.util.Locale locale10 = java.util.Locale.ITALIAN;
        java.lang.String str11 = locale10.getDisplayCountry();
        java.util.Set<java.lang.String> strSet12 = locale10.getUnicodeLocaleAttributes();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime13 = property8.setCopy("2022-02-11T09:47:50.173", locale10);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2022-02-11T09:47:50.173\" for clockhourOfHalfday is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "2022-02-11T09:47:51.421" + "'", str6, "2022-02-11T09:47:51.421");
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(strSet12);
    }

    @Test
    public void test00058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00058");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.minusMillis((int) (byte) 1);
        java.lang.String str3 = localDateTime2.toString();
        org.joda.time.DateTime dateTime4 = localDateTime2.toDateTime();
        int int5 = localDateTime2.getDayOfWeek();
        org.junit.Assert.assertNotNull(localDateTime2);
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "2022-02-11T09:47:51.454" + "'", str3, "2022-02-11T09:47:51.454");
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 5 + "'", int5 == 5);
    }

    @Test
    public void test00059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00059");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withYearOfEra((-1));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1 for yearOfEra must be in the range [1,292278993]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00060");
        int int4 = org.joda.time.field.FieldUtils.getWrappedValue(10, (-100), (-1), (int) (byte) 1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
    }

    @Test
    public void test00061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00061");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale.Builder builder3 = builder0.setLanguage("");
        java.util.Locale.Builder builder4 = builder3.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder6 = builder4.setRegion("yearOfCentury");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed region: yearOfCentury [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
    }

    @Test
    public void test00062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00062");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("2022-02-11T09:47:50.219", 1.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=2022-02-11t09:47:50.219");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00063");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("2022-02-11T09:47:51.796", strMap1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=2022-02-11t09:47:51.796");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00064");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime1.plusMinutes((int) '#');
        org.joda.time.LocalDateTime localDateTime8 = localDateTime1.minusMinutes((int) (short) 1);
        org.joda.time.LocalDateTime.Property property9 = localDateTime8.weekOfWeekyear();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime8, chronology10);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime13 = localDateTime8.withEra(11);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 11 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
    }

    @Test
    public void test00065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00065");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime4 = localDateTime1.withYearOfEra((int) (short) 0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for yearOfEra must be in the range [1,292278993]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test00066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00066");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        int int1 = localDateTime0.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime3 = localDateTime0.minusMonths((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.minusMonths((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property6 = localDateTime3.minuteOfHour();
        // The following exception was thrown during execution in test generation
        try {
            int int8 = localDateTime3.getValue((int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 97");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 22 + "'", int1 == 22);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
    }

    @Test
    public void test00067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00067");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds((int) (byte) 100);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray5 = localDateTime4.getFieldTypes();
        java.util.Locale locale7 = java.util.Locale.CHINESE;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str8 = localDateTime4.toString("2022-02-11T09:47:51.876", locale7);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray5);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "zh");
    }

    @Test
    public void test00068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00068");
        java.util.Locale locale2 = new java.util.Locale("", "weekyear");
        java.util.Set<java.lang.String> strSet3 = locale2.getUnicodeLocaleAttributes();
        int int4 = strSet3.size();
        java.util.Collection<java.util.Locale.LanguageRange> languageRangeCollection5 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean6 = strSet3.removeAll(languageRangeCollection5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(locale2.toString(), "_WEEKYEAR");
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
    }

    @Test
    public void test00069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00069");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.getDefault();
        java.util.Locale locale4 = null;
        java.lang.String str5 = dateTimeZone2.getName((long) (short) 10, locale4);
        long long7 = dateTimeZone1.getMillisKeepLocal(dateTimeZone2, (long) 874);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        long long10 = dateTimeZone2.getMillisKeepLocal(dateTimeZone8, (long) '4');
        int int12 = dateTimeZone2.getStandardOffset((long) ' ');
        long long14 = dateTimeZone2.convertUTCToLocal(1L);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime((java.lang.Object) dateTimeFieldType0, dateTimeZone2);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.DateTimeFieldType$StandardDateTimeFieldType");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00" + "'", str5, "+00:00");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 874L + "'", long7 == 874L);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 52L + "'", long10 == 52L);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1L + "'", long14 == 1L);
    }

    @Test
    public void test00070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00070");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.weekyear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.field.FieldUtils.verifyValueBounds(dateTimeFieldType0, (int) (short) 10, 42, (int) 'u');
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 10 for weekyear must be in the range [42,117]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
    }

    @Test
    public void test00071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00071");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds((int) (byte) 100);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = null;
        java.lang.String str6 = localDateTime1.toString(dateTimeFormatter5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        org.joda.time.LocalDateTime.Property property8 = localDateTime1.property(dateTimeFieldType7);
        org.joda.time.LocalDateTime localDateTime9 = property8.roundHalfFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        int int12 = dateTimeZone10.getStandardOffset((long) (-100));
        java.util.TimeZone timeZone13 = dateTimeZone10.toTimeZone();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((java.lang.Object) property8, dateTimeZone10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.LocalDateTime$Property");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "2022-02-11T09:47:52.343" + "'", str6, "2022-02-11T09:47:52.343");
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(timeZone13);
        org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "Coordinated Universal Time");
    }

    @Test
    public void test00072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00072");
        java.util.Calendar calendar0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.fromCalendarFields(calendar0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The calendar must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00073");
        char char0 = java.util.Locale.PRIVATE_USE_EXTENSION;
        org.junit.Assert.assertTrue("'" + char0 + "' != '" + 'x' + "'", char0 == 'x');
    }

    @Test
    public void test00074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00074");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("2022-02-11T09:47:50.219", 100.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: weight=100.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00075");
        int int2 = org.joda.time.field.FieldUtils.safeAdd((-1), 1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
    }

    @Test
    public void test00076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00076");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        int int2 = dateTimeZone0.getStandardOffset((long) (-100));
        java.util.TimeZone timeZone3 = dateTimeZone0.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        int int7 = dateTimeZone5.getStandardOffset((long) (-100));
        java.util.TimeZone timeZone8 = dateTimeZone5.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        int int12 = dateTimeZone10.getStandardOffset((long) (-100));
        java.util.TimeZone timeZone13 = dateTimeZone10.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone13);
        boolean boolean15 = timeZone8.hasSameRules(timeZone13);
        boolean boolean16 = timeZone3.hasSameRules(timeZone8);
        int int18 = timeZone8.getOffset((long) 6);
        java.lang.String str19 = timeZone8.getDisplayName();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(timeZone8);
        org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(timeZone13);
        org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Coordinated Universal Time" + "'", str19, "Coordinated Universal Time");
    }

    @Test
    public void test00077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00077");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        int int2 = dateTimeZone0.getStandardOffset((long) (-100));
        java.util.TimeZone timeZone3 = dateTimeZone0.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        int int7 = dateTimeZone5.getStandardOffset((long) (-100));
        java.util.TimeZone timeZone8 = dateTimeZone5.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        int int12 = dateTimeZone10.getStandardOffset((long) (-100));
        java.util.TimeZone timeZone13 = dateTimeZone10.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone13);
        boolean boolean15 = timeZone8.hasSameRules(timeZone13);
        boolean boolean16 = timeZone3.hasSameRules(timeZone8);
        int int17 = timeZone8.getDSTSavings();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(timeZone8);
        org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(timeZone13);
        org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
    }

    @Test
    public void test00078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00078");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property5 = localDateTime1.dayOfMonth();
        java.util.Locale locale6 = java.util.Locale.FRENCH;
        java.util.Set<java.lang.String> strSet7 = locale6.getUnicodeLocaleAttributes();
        java.lang.String str8 = locale6.getVariant();
        java.lang.String str9 = property5.getAsText(locale6);
        java.util.Locale locale10 = locale6.stripExtensions();
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minusMillis((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.plusDays(0);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime13.withYearOfEra(874);
        org.joda.time.Chronology chronology18 = localDateTime17.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime((java.lang.Object) locale10, chronology18);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: java.util.Locale");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "11" + "'", str9, "11");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "fr");
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(chronology18);
    }

    @Test
    public void test00079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00079");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale.Builder builder3 = builder0.setLanguage("");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder5 = builder0.setRegion("2022-02-11T09:47:50.173");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed region: 2022-02-11T09:47:50.173 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
    }

    @Test
    public void test00080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00080");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        int[] intArray3 = localDateTime1.getValues();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.plusYears((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        boolean boolean8 = localDateTime6.isBefore((org.joda.time.ReadablePartial) localDateTime7);
        int[] intArray9 = localDateTime7.getValues();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime1.withFields((org.joda.time.ReadablePartial) localDateTime7);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusMillis((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.minusSeconds((int) '#');
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.withWeekOfWeekyear(50);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime18 = localDateTime16.withCenturyOfEra((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1 for centuryOfEra must be in the range [0,2922789]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(intArray3);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[2022, 2, 11, 35272947]");
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(intArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[2022, 2, 11, 35272947]");
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
    }

    @Test
    public void test00081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00081");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.minusMillis((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.plusDays(0);
        // The following exception was thrown during execution in test generation
        try {
            int int6 = localDateTime2.getValue(50);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 50");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
    }

    @Test
    public void test00082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00082");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale.Builder builder3 = builder0.setLanguage("");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder6 = builder3.setUnicodeLocaleKeyword("French", "CA");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale keyword key: French [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
    }

    @Test
    public void test00083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00083");
        java.util.Locale locale0 = java.util.Locale.FRENCH;
        java.util.Set<java.lang.String> strSet1 = locale0.getUnicodeLocaleAttributes();
        java.lang.String str2 = locale0.getISO3Language();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str4 = locale0.getUnicodeLocaleType("zho");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed Unicode locale key: zho");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "fra" + "'", str2, "fra");
    }

    @Test
    public void test00084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00084");
        long long2 = org.joda.time.field.FieldUtils.safeSubtract(52L, (long) 874);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + (-822L) + "'", long2 == (-822L));
    }

    @Test
    public void test00085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00085");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property5 = localDateTime1.dayOfMonth();
        java.util.Locale locale6 = java.util.Locale.FRENCH;
        java.util.Set<java.lang.String> strSet7 = locale6.getUnicodeLocaleAttributes();
        java.lang.String str8 = locale6.getVariant();
        java.lang.String str9 = property5.getAsText(locale6);
        org.joda.time.ReadableInstant readableInstant10 = null;
        int int11 = property5.getDifference(readableInstant10);
        int int12 = property5.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime14 = property5.addToCopy(50);
        int int15 = property5.getMaximumValue();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "11" + "'", str9, "11");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 28 + "'", int15 == 28);
    }

    @Test
    public void test00086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00086");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        int int2 = dateTimeZone0.getStandardOffset((long) (-100));
        java.util.TimeZone timeZone3 = dateTimeZone0.toTimeZone();
        int int4 = timeZone3.getRawOffset();
        java.util.Locale locale7 = new java.util.Locale("fra", "");
        java.util.Set<java.lang.String> strSet8 = locale7.getUnicodeLocaleAttributes();
        java.lang.String str9 = locale7.getScript();
        java.util.Set<java.lang.Character> charSet10 = locale7.getExtensionKeys();
        java.util.Set<java.lang.String> strSet11 = locale7.getUnicodeLocaleKeys();
        java.lang.String str12 = timeZone3.getDisplayName(locale7);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertEquals(locale7.toString(), "fra");
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(charSet10);
        org.junit.Assert.assertNotNull(strSet11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Coordinated Universal Time" + "'", str12, "Coordinated Universal Time");
    }

    @Test
    public void test00087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00087");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property5 = localDateTime1.dayOfMonth();
        java.util.Locale locale6 = java.util.Locale.FRENCH;
        java.util.Set<java.lang.String> strSet7 = locale6.getUnicodeLocaleAttributes();
        java.lang.String str8 = locale6.getVariant();
        java.lang.String str9 = property5.getAsText(locale6);
        org.joda.time.ReadableInstant readableInstant10 = null;
        int int11 = property5.getDifference(readableInstant10);
        int int12 = property5.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime14 = property5.addToCopy(50);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str16 = localDateTime14.toString("11 (WEEKYEAR,fra)");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: W");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "11" + "'", str9, "11");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(localDateTime14);
    }

    @Test
    public void test00088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00088");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.field.FieldUtils.verifyValueBounds("2022-02-11T09:47:50.188", (int) (byte) 10, (int) (short) 100, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 10 for 2022-02-11T09:47:50.188 must be in the range [100,0]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00089");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property5 = localDateTime1.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime6 = property5.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField7 = property5.getField();
        int int8 = property5.getMaximumValueOverall();
        org.joda.time.LocalDateTime localDateTime10 = property5.addToCopy(0);
        org.joda.time.DurationField durationField11 = property5.getDurationField();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 31 + "'", int8 == 31);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(durationField11);
    }

    @Test
    public void test00090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00090");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        int int2 = dateTimeZone0.getStandardOffset((long) (-100));
        java.util.TimeZone timeZone3 = dateTimeZone0.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        int int7 = dateTimeZone5.getStandardOffset((long) (-100));
        java.util.TimeZone timeZone8 = dateTimeZone5.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        boolean boolean10 = timeZone3.hasSameRules(timeZone8);
        // The following exception was thrown during execution in test generation
        try {
            int int17 = timeZone8.getOffset((int) 'a', 5, 5200, 28, 49, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal era 97");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(timeZone8);
        org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test00091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00091");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property5 = localDateTime1.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime6 = property5.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField7 = property5.getField();
        long long10 = dateTimeField7.addWrapField((long) (short) 1, (int) (byte) 100);
        int int12 = dateTimeField7.getLeapAmount(0L);
        long long14 = dateTimeField7.roundHalfFloor((long) (-1));
        long long16 = dateTimeField7.roundFloor((long) 222);
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime();
        boolean boolean19 = localDateTime17.isBefore((org.joda.time.ReadablePartial) localDateTime18);
        int[] intArray20 = localDateTime18.getValues();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime18.plusYears((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime();
        boolean boolean25 = localDateTime23.isBefore((org.joda.time.ReadablePartial) localDateTime24);
        int[] intArray26 = localDateTime24.getValues();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime18.withFields((org.joda.time.ReadablePartial) localDateTime24);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.minusMillis((int) (short) 100);
        int int30 = localDateTime27.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime();
        boolean boolean34 = localDateTime32.isBefore((org.joda.time.ReadablePartial) localDateTime33);
        int[] intArray35 = localDateTime33.getValues();
        org.joda.time.LocalDateTime localDateTime37 = localDateTime33.plusYears((int) (byte) -1);
        int[] intArray38 = localDateTime33.getValues();
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray40 = dateTimeField7.addWrapField((org.joda.time.ReadablePartial) localDateTime27, 5200, intArray38, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 5200");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 604800001L + "'", long10 == 604800001L);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(intArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[2022, 2, 11, 35274241]");
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(intArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[2022, 2, 11, 35274241]");
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
// flaky:         org.junit.Assert.assertTrue("'" + int30 + "' != '" + 241 + "'", int30 == 241);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(intArray35);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[2022, 2, 11, 35274241]");
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(intArray38);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[2022, 2, 11, 35274241]");
    }

    @Test
    public void test00092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00092");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime(5, (int) 'x', (int) (byte) 10, (int) 'x', (int) (short) -1, 83, 52);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 120 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00093");
        int int1 = org.joda.time.field.FieldUtils.safeNegate((int) 'x');
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + (-120) + "'", int1 == (-120));
    }

    @Test
    public void test00094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00094");
        long long2 = org.joda.time.field.FieldUtils.safeAdd(6L, (long) '4');
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 58L + "'", long2 == 58L);
    }

    @Test
    public void test00095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00095");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property5 = localDateTime1.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime6 = property5.withMinimumValue();
        java.util.Locale locale7 = java.util.Locale.UK;
        java.lang.String str8 = property5.getAsShortText(locale7);
        int int9 = property5.getMaximumValue();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "11" + "'", str8, "11");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 28 + "'", int9 == 28);
    }

    @Test
    public void test00096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00096");
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minusMillis((int) (byte) 1);
        java.lang.String str11 = localDateTime10.toString();
        org.joda.time.DateTime dateTime12 = localDateTime10.toDateTime();
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.minusMillis((int) (byte) 1);
        java.lang.String str16 = localDateTime15.toString();
        org.joda.time.DateTime dateTime17 = localDateTime15.toDateTime();
        boolean boolean18 = dateTime12.isEqual((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.Chronology chronology19 = dateTime17.getChronology();
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime((java.lang.Object) 35271574L, chronology19);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime((int) (byte) -1, (int) (short) 10, 5, 100, (int) (byte) 1, (int) (short) 1, (int) (byte) 0, chronology19);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 100 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime10);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "2022-02-11T09:47:54.504" + "'", str11, "2022-02-11T09:47:54.504");
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(localDateTime15);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "2022-02-11T09:47:54.504" + "'", str16, "2022-02-11T09:47:54.504");
        org.junit.Assert.assertNotNull(dateTime17);
// flaky:         org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(chronology19);
    }

    @Test
    public void test00097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00097");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone2);
        java.util.Locale locale5 = java.util.Locale.CHINESE;
        java.lang.String str6 = dateTimeZone2.getName((long) (short) 0, locale5);
        java.util.Locale.Builder builder7 = builder0.setLocale(locale5);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder9 = builder0.setScript("22");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed script: 22 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00" + "'", str6, "+00:00");
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test00098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00098");
        int int1 = org.joda.time.field.FieldUtils.safeNegate(222);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + (-222) + "'", int1 == (-222));
    }

    @Test
    public void test00099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00099");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("+00:00", (double) 59);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: weight=59.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00100");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("2022-02-11T09:47:49.888");
        timeZone1.setID("2022-02-11T09:47:52.558");
        // The following exception was thrown during execution in test generation
        try {
            java.time.ZoneId zoneId4 = timeZone1.toZoneId();
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid ID for region-based ZoneId, invalid format: 2022-02-11T09:47:52.558");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "GMT+00:00");
    }

    @Test
    public void test00101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00101");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property5 = localDateTime1.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime6 = property5.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField7 = property5.getField();
        long long9 = dateTimeField7.remainder((-1L));
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime();
        boolean boolean12 = localDateTime10.isBefore((org.joda.time.ReadablePartial) localDateTime11);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime11.plusSeconds((int) (byte) 100);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray15 = localDateTime14.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime();
        boolean boolean19 = localDateTime17.isBefore((org.joda.time.ReadablePartial) localDateTime18);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime18.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property22 = localDateTime18.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime23 = property22.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField24 = property22.getField();
        long long27 = dateTimeField24.addWrapField((long) (short) 1, (int) (byte) 100);
        int int29 = dateTimeField24.getMinimumValue((-1L));
        org.joda.time.ReadablePartial readablePartial30 = null;
        int[] intArray33 = new int[] { 11 };
        int[] intArray35 = dateTimeField24.addWrapPartial(readablePartial30, 100, intArray33, 0);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray37 = dateTimeField7.addWrapPartial((org.joda.time.ReadablePartial) localDateTime14, 0, intArray35, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 86399999L + "'", long9 == 86399999L);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray15);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 604800001L + "'", long27 == 604800001L);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[11]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[11]");
    }

    @Test
    public void test00102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00102");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("", (double) (-222));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: weight=-222.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00103");
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.minusMillis((int) (byte) 1);
        java.lang.String str12 = localDateTime11.toString();
        org.joda.time.DateTime dateTime13 = localDateTime11.toDateTime();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minusMillis((int) (byte) 1);
        java.lang.String str17 = localDateTime16.toString();
        org.joda.time.DateTime dateTime18 = localDateTime16.toDateTime();
        boolean boolean19 = dateTime13.isEqual((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.Chronology chronology20 = dateTime18.getChronology();
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime((java.lang.Object) 35271574L, chronology20);
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime((long) 'u', chronology20);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime((-120), 42, (int) 'x', 0, (int) (short) 1, 874, 31, chronology20);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 874 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime11);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "2022-02-11T09:47:55.056" + "'", str12, "2022-02-11T09:47:55.056");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(localDateTime16);
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "2022-02-11T09:47:55.057" + "'", str17, "2022-02-11T09:47:55.057");
        org.junit.Assert.assertNotNull(dateTime18);
// flaky:         org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(chronology20);
    }

    @Test
    public void test00104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00104");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property5 = localDateTime1.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime6 = property5.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField7 = property5.getField();
        int int8 = dateTimeField7.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime();
        int int10 = localDateTime9.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime9.minusMonths((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.minusMonths((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.plusWeeks(22);
        java.util.Locale locale18 = java.util.Locale.JAPANESE;
        java.lang.String str19 = dateTimeField7.getAsShortText((org.joda.time.ReadablePartial) localDateTime16, 22, locale18);
        org.joda.time.tz.NameProvider nameProvider20 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime();
        boolean boolean23 = localDateTime21.isBefore((org.joda.time.ReadablePartial) localDateTime22);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime22.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property26 = localDateTime22.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime27 = property26.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField28 = property26.getField();
        int int29 = dateTimeField28.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime();
        int int31 = localDateTime30.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime33 = localDateTime30.minusMonths((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime33.minusMonths((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime35.plusWeeks(22);
        java.util.Locale locale39 = java.util.Locale.JAPANESE;
        java.lang.String str40 = dateTimeField28.getAsShortText((org.joda.time.ReadablePartial) localDateTime37, 22, locale39);
        java.lang.String str43 = nameProvider20.getName(locale39, "11", "Etc/UTC");
        boolean boolean44 = locale18.equals((java.lang.Object) str43);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 31 + "'", int8 == 31);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 22 + "'", int10 == 22);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "22" + "'", str19, "22");
        org.junit.Assert.assertNotNull(nameProvider20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 31 + "'", int29 == 31);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 22 + "'", int31 == 22);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "22" + "'", str40, "22");
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test00105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00105");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property5 = localDateTime1.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime6 = property5.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField7 = property5.getField();
        int int8 = dateTimeField7.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime();
        int int10 = localDateTime9.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime9.minusMonths((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.minusMonths((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.plusWeeks(22);
        java.util.Locale locale18 = java.util.Locale.JAPANESE;
        java.lang.String str19 = dateTimeField7.getAsShortText((org.joda.time.ReadablePartial) localDateTime16, 22, locale18);
        int int21 = dateTimeField7.getLeapAmount((long) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.field.FieldUtils.verifyValueBounds(dateTimeField7, 2, (int) (short) 100, (int) 'a');
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2 for dayOfMonth must be in the range [100,97]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 31 + "'", int8 == 31);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 22 + "'", int10 == 22);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "22" + "'", str19, "22");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
    }

    @Test
    public void test00106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00106");
        long long2 = org.joda.time.field.FieldUtils.safeSubtract((long) (short) 1, (long) 'x');
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + (-119L) + "'", long2 == (-119L));
    }

    @Test
    public void test00107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00107");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime();
        boolean boolean4 = localDateTime2.isBefore((org.joda.time.ReadablePartial) localDateTime3);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property7 = localDateTime3.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime8 = property7.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField9 = property7.getField();
        int int10 = dateTimeField9.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime();
        int int12 = localDateTime11.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime11.minusMonths((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minusMonths((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.plusWeeks(22);
        java.util.Locale locale20 = java.util.Locale.JAPANESE;
        java.lang.String str21 = dateTimeField9.getAsShortText((org.joda.time.ReadablePartial) localDateTime18, 22, locale20);
        java.util.Locale.Builder builder22 = builder1.setLocale(locale20);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder24 = builder1.setScript("2022-02-11T09:47:53.641");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed script: 2022-02-11T09:47:53.641 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 31 + "'", int10 == 31);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 22 + "'", int12 == 22);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "22" + "'", str21, "22");
        org.junit.Assert.assertNotNull(builder22);
    }

    @Test
    public void test00108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00108");
        java.util.Locale locale2 = new java.util.Locale("fra", "");
        java.util.Set<java.lang.String> strSet3 = locale2.getUnicodeLocaleAttributes();
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        boolean boolean6 = localDateTime4.isBefore((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property9 = localDateTime5.dayOfMonth();
        org.joda.time.DurationField durationField10 = property9.getRangeDurationField();
        boolean boolean11 = strSet3.contains((java.lang.Object) durationField10);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime();
        boolean boolean14 = localDateTime12.isBefore((org.joda.time.ReadablePartial) localDateTime13);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime13.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property17 = localDateTime13.dayOfMonth();
        boolean boolean18 = property17.isLeap();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone19);
        java.util.Locale locale22 = java.util.Locale.CHINESE;
        java.lang.String str23 = dateTimeZone19.getName((long) (short) 0, locale22);
        java.lang.String str24 = property17.getAsShortText(locale22);
        boolean boolean25 = strSet3.equals((java.lang.Object) locale22);
        java.lang.String str26 = locale22.getDisplayCountry();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str28 = locale22.getExtension('#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed extension key: #");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(locale2.toString(), "fra");
        org.junit.Assert.assertNotNull(strSet3);
// flaky:         org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
// flaky:         org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+00:00" + "'", str23, "+00:00");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "11" + "'", str24, "11");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
    }

    @Test
    public void test00109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00109");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.parse("2022-02-11T09:47:54.576", dateTimeFormatter1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00110");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.minusMillis((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.plusDays(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.withField(dateTimeFieldType5, 0);
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime();
        boolean boolean10 = localDateTime8.isBefore((org.joda.time.ReadablePartial) localDateTime9);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime9.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime9.plusMinutes((int) '#');
        org.joda.time.LocalDateTime localDateTime16 = localDateTime9.minusMinutes((int) (short) 1);
        boolean boolean17 = localDateTime7.isAfter((org.joda.time.ReadablePartial) localDateTime16);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime16.plusSeconds(42);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime21 = localDateTime19.withMinuteOfHour((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(localDateTime19);
    }

    @Test
    public void test00111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00111");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale.Builder builder3 = builder0.setLanguage("");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder6 = builder3.setExtension('a', "yearOfCentury");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed extension value: yearOfCentury [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
    }

    @Test
    public void test00112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00112");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.minusMillis((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.plusDays(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.withField(dateTimeFieldType5, 0);
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime();
        boolean boolean10 = localDateTime8.isBefore((org.joda.time.ReadablePartial) localDateTime9);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime9.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime9.plusMinutes((int) '#');
        org.joda.time.LocalDateTime localDateTime16 = localDateTime9.minusMinutes((int) (short) 1);
        boolean boolean17 = localDateTime7.isAfter((org.joda.time.ReadablePartial) localDateTime16);
        org.joda.time.LocalDateTime.Property property18 = localDateTime7.secondOfMinute();
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = property18.getFieldType();
        org.joda.time.LocalDateTime localDateTime20 = property18.roundHalfFloorCopy();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime22 = localDateTime20.withMinuteOfHour(5200);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 5200 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(localDateTime20);
    }

    @Test
    public void test00113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00113");
        java.util.Locale locale2 = new java.util.Locale("", "weekyear");
        java.util.Set<java.lang.String> strSet3 = locale2.getUnicodeLocaleAttributes();
        java.util.Set<java.lang.String> strSet4 = locale2.getUnicodeLocaleAttributes();
        boolean boolean6 = locale2.equals((java.lang.Object) (-1));
        org.junit.Assert.assertEquals(locale2.toString(), "_WEEKYEAR");
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test00114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00114");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusMillis((int) (byte) 1);
        java.lang.String str4 = localDateTime3.toString();
        org.joda.time.DateTime dateTime5 = localDateTime3.toDateTime();
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.minusMillis((int) (byte) 1);
        java.lang.String str9 = localDateTime8.toString();
        org.joda.time.DateTime dateTime10 = localDateTime8.toDateTime();
        boolean boolean11 = dateTime5.isEqual((org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.Chronology chronology12 = dateTime10.getChronology();
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((java.lang.Object) 35271574L, chronology12);
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.now(chronology12);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime16 = localDateTime14.withDayOfWeek((-120));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -120 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022-02-11T09:47:55.783" + "'", str4, "2022-02-11T09:47:55.783");
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(localDateTime8);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "2022-02-11T09:47:55.783" + "'", str9, "2022-02-11T09:47:55.783");
        org.junit.Assert.assertNotNull(dateTime10);
// flaky:         org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(localDateTime14);
    }

    @Test
    public void test00115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00115");
        java.util.Date date0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.fromDateFields(date0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The date must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00116");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property5 = localDateTime1.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime6 = property5.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField7 = property5.getField();
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime();
        boolean boolean10 = localDateTime8.isBefore((org.joda.time.ReadablePartial) localDateTime9);
        int[] intArray11 = localDateTime9.getValues();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime9.plusYears((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime();
        boolean boolean16 = localDateTime14.isBefore((org.joda.time.ReadablePartial) localDateTime15);
        int[] intArray17 = localDateTime15.getValues();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime9.withFields((org.joda.time.ReadablePartial) localDateTime15);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.minusMillis((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.minusSeconds((int) '#');
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.withWeekOfWeekyear(50);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime22.withMinuteOfHour((int) (byte) 0);
        int int27 = dateTimeField7.getMinimumValue((org.joda.time.ReadablePartial) localDateTime22);
        java.lang.String str28 = dateTimeField7.toString();
        org.joda.time.ReadablePartial readablePartial29 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int30 = dateTimeField7.getMaximumValue(readablePartial29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[2022, 2, 11, 35275870]");
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(intArray17);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[2022, 2, 11, 35275870]");
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "DateTimeField[dayOfMonth]" + "'", str28, "DateTimeField[dayOfMonth]");
    }

    @Test
    public void test00117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00117");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00118");
        java.util.Locale locale2 = new java.util.Locale("", "weekyear");
        java.util.Set<java.lang.String> strSet3 = locale2.getUnicodeLocaleKeys();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean5 = strSet3.add("");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(locale2.toString(), "_WEEKYEAR");
        org.junit.Assert.assertNotNull(strSet3);
    }

    @Test
    public void test00119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00119");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime();
        boolean boolean4 = localDateTime2.isBefore((org.joda.time.ReadablePartial) localDateTime3);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property7 = localDateTime3.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime8 = property7.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField9 = property7.getField();
        int int10 = dateTimeField9.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime();
        int int12 = localDateTime11.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime11.minusMonths((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minusMonths((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.plusWeeks(22);
        java.util.Locale locale20 = java.util.Locale.JAPANESE;
        java.lang.String str21 = dateTimeField9.getAsShortText((org.joda.time.ReadablePartial) localDateTime18, 22, locale20);
        java.util.Locale.Builder builder22 = builder1.setLocale(locale20);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder25 = builder1.setUnicodeLocaleKeyword("2022-02-11T09:47:49.888", "zho");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale keyword key: 2022-02-11T09:47:49.888 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 31 + "'", int10 == 31);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 22 + "'", int12 == 22);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "22" + "'", str21, "22");
        org.junit.Assert.assertNotNull(builder22);
    }

    @Test
    public void test00120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00120");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder3 = builder1.setScript("2022-02-11T09:47:50.202");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed script: 2022-02-11T09:47:50.202 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
    }

    @Test
    public void test00121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00121");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property5 = localDateTime1.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime6 = property5.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField7 = property5.getField();
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime();
        boolean boolean10 = localDateTime8.isBefore((org.joda.time.ReadablePartial) localDateTime9);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime9.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property13 = localDateTime9.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime();
        boolean boolean16 = localDateTime14.isBefore((org.joda.time.ReadablePartial) localDateTime15);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime15.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property19 = localDateTime15.dayOfMonth();
        java.util.Locale locale20 = java.util.Locale.FRENCH;
        java.util.Set<java.lang.String> strSet21 = locale20.getUnicodeLocaleAttributes();
        java.lang.String str22 = locale20.getVariant();
        java.lang.String str23 = property19.getAsText(locale20);
        java.lang.String str24 = property13.getAsShortText(locale20);
        org.joda.time.LocalDateTime localDateTime25 = property13.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime localDateTime26 = property13.roundFloorCopy();
        int[] intArray32 = new int[] { (byte) 1, 49, (byte) -1, 1 };
        java.util.Locale locale34 = java.util.Locale.JAPAN;
        java.util.Locale locale35 = java.util.Locale.FRENCH;
        java.lang.String str36 = locale34.getDisplayCountry(locale35);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray37 = dateTimeField7.set((org.joda.time.ReadablePartial) localDateTime26, (-222), intArray32, "French", locale34);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"French\" for dayOfMonth is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "11" + "'", str23, "11");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "11" + "'", str24, "11");
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[1, 49, -1, 1]");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Japon" + "'", str36, "Japon");
    }

    @Test
    public void test00122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00122");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("2022");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=2022");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00123");
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("2022-02-11T09:47:52.833");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=2022-02-11t09:47:52.833");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00124");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        int int2 = dateTimeZone0.getStandardOffset((long) (-100));
        java.util.TimeZone timeZone3 = dateTimeZone0.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        int int7 = dateTimeZone5.getStandardOffset((long) (-100));
        java.util.TimeZone timeZone8 = dateTimeZone5.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        boolean boolean10 = timeZone3.hasSameRules(timeZone8);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str13 = timeZone8.getDisplayName(true, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal style: -1");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(timeZone8);
        org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test00125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00125");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property5 = localDateTime1.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime6 = property5.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField7 = property5.getField();
        int int8 = property5.getMaximumValueOverall();
        org.joda.time.LocalDateTime localDateTime10 = property5.addToCopy(0);
        org.joda.time.LocalDateTime localDateTime12 = property5.addToCopy(1);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime14 = localDateTime12.withEra(11);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 11 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 31 + "'", int8 == 31);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
    }

    @Test
    public void test00126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00126");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        int int2 = dateTimeZone0.getStandardOffset((long) (-100));
        java.util.TimeZone timeZone3 = dateTimeZone0.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        int int7 = dateTimeZone5.getStandardOffset((long) (-100));
        java.util.TimeZone timeZone8 = dateTimeZone5.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        int int12 = dateTimeZone10.getStandardOffset((long) (-100));
        java.util.TimeZone timeZone13 = dateTimeZone10.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone13);
        boolean boolean15 = timeZone8.hasSameRules(timeZone13);
        boolean boolean16 = timeZone3.hasSameRules(timeZone8);
        timeZone3.setRawOffset(5200);
        int int19 = timeZone3.getRawOffset();
        java.lang.Object obj20 = timeZone3.clone();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(timeZone8);
        org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(timeZone13);
        org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 5200 + "'", int19 == 5200);
        org.junit.Assert.assertNotNull(obj20);
        org.junit.Assert.assertEquals(obj20.toString(), "java.util.SimpleTimeZone[id=Etc/UTC,offset=5200,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj20), "java.util.SimpleTimeZone[id=Etc/UTC,offset=5200,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj20), "java.util.SimpleTimeZone[id=Etc/UTC,offset=5200,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]");
    }

    @Test
    public void test00127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00127");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime1.plusMinutes((int) '#');
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.weekOfWeekyear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime11 = localDateTime6.withDate(50, 379, (-100));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 379 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
    }

    @Test
    public void test00128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00128");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.minusMillis((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.plusDays(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.withField(dateTimeFieldType5, 0);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.field.FieldUtils.verifyValueBounds(dateTimeFieldType5, 47, (int) '#', (-120));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 47 for era must be in the range [35,-120]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(localDateTime7);
    }

    @Test
    public void test00129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00129");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forID("2022-02-11T09:47:53.868");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The datetime zone id '2022-02-11T09:47:53.868' is not recognised");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00130");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property5 = localDateTime1.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime6 = property5.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField7 = property5.getField();
        int int8 = dateTimeField7.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime();
        int int10 = localDateTime9.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime9.minusMonths((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.minusMonths((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.plusWeeks(22);
        java.util.Locale locale18 = java.util.Locale.JAPANESE;
        java.lang.String str19 = dateTimeField7.getAsShortText((org.joda.time.ReadablePartial) localDateTime16, 22, locale18);
        long long22 = dateTimeField7.add((long) 2022, 47);
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime();
        boolean boolean25 = localDateTime23.isBefore((org.joda.time.ReadablePartial) localDateTime24);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime24.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property28 = localDateTime24.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime();
        boolean boolean31 = localDateTime29.isBefore((org.joda.time.ReadablePartial) localDateTime30);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime30.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property34 = localDateTime30.dayOfMonth();
        java.util.Locale locale35 = java.util.Locale.FRENCH;
        java.util.Set<java.lang.String> strSet36 = locale35.getUnicodeLocaleAttributes();
        java.lang.String str37 = locale35.getVariant();
        java.lang.String str38 = property34.getAsText(locale35);
        java.lang.String str39 = property28.getAsShortText(locale35);
        org.joda.time.LocalDateTime localDateTime40 = property28.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime localDateTime41 = property28.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime42 = property28.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime();
        boolean boolean46 = localDateTime44.isBefore((org.joda.time.ReadablePartial) localDateTime45);
        org.joda.time.LocalDateTime localDateTime48 = localDateTime45.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property49 = localDateTime45.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime50 = property49.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField51 = property49.getField();
        long long54 = dateTimeField51.addWrapField((long) (short) 1, (int) (byte) 100);
        int int56 = dateTimeField51.getMinimumValue((-1L));
        org.joda.time.ReadablePartial readablePartial57 = null;
        int[] intArray60 = new int[] { 11 };
        int[] intArray62 = dateTimeField51.addWrapPartial(readablePartial57, 100, intArray60, 0);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray64 = dateTimeField7.add((org.joda.time.ReadablePartial) localDateTime42, 0, intArray60, 42);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 31 + "'", int8 == 31);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 22 + "'", int10 == 22);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "22" + "'", str19, "22");
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 4060802022L + "'", long22 == 4060802022L);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(property28);
// flaky:         org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "11" + "'", str38, "11");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "11" + "'", str39, "11");
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 604800001L + "'", long54 == 604800001L);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[11]");
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[11]");
    }

    @Test
    public void test00131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00131");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        int int2 = dateTimeZone0.getStandardOffset((long) (-100));
        java.util.TimeZone timeZone3 = dateTimeZone0.toTimeZone();
        int int4 = timeZone3.getRawOffset();
        timeZone3.setRawOffset(50);
        java.lang.String str7 = timeZone3.getID();
        java.util.Locale locale8 = java.util.Locale.ITALIAN;
        java.lang.String str9 = locale8.getDisplayCountry();
        java.lang.String str10 = timeZone3.getDisplayName(locale8);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Etc/UTC" + "'", str7, "Etc/UTC");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "it");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Tempo universale coordinato" + "'", str10, "Tempo universale coordinato");
    }

    @Test
    public void test00132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00132");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        int int1 = localDateTime0.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime3 = localDateTime0.minusMonths((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.minusMonths((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property6 = localDateTime3.minuteOfHour();
        org.joda.time.LocalDateTime.Property property7 = localDateTime3.millisOfSecond();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime9 = localDateTime3.withHourOfDay(222);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 222 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 22 + "'", int1 == 22);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(property7);
    }

    @Test
    public void test00133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00133");
        int int2 = org.joda.time.field.FieldUtils.safeMultiplyToInt((long) 10, 0L);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
    }

    @Test
    public void test00134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00134");
        org.joda.time.tz.Provider provider0 = org.joda.time.DateTimeZone.getProvider();
        org.joda.time.DateTimeZone.setProvider(provider0);
        java.util.Set<java.lang.String> strSet2 = provider0.getAvailableIDs();
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.minusMillis((int) (byte) 1);
        java.lang.String str6 = localDateTime5.toString();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.minusMonths((int) 'a');
        org.joda.time.LocalDateTime.Property property9 = localDateTime5.yearOfEra();
        java.util.Locale locale13 = new java.util.Locale("11", "weekyear", "fra");
        java.lang.String str14 = property9.getAsShortText(locale13);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean15 = strSet2.remove((java.lang.Object) locale13);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: java.util.Locale cannot be cast to java.lang.Comparable");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(provider0);
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(localDateTime5);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "2022-02-11T09:47:56.777" + "'", str6, "2022-02-11T09:47:56.777");
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals(locale13.toString(), "11_WEEKYEAR_fra");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "2022" + "'", str14, "2022");
    }

    @Test
    public void test00135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00135");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        java.util.Locale locale4 = java.util.Locale.CHINESE;
        java.lang.String str5 = dateTimeZone1.getName((long) (short) 0, locale4);
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime(0L, dateTimeZone1);
        java.util.Locale locale8 = java.util.Locale.FRENCH;
        java.util.Set<java.lang.String> strSet9 = locale8.getUnicodeLocaleAttributes();
        java.lang.String str10 = locale8.getISO3Language();
        java.lang.String str11 = dateTimeZone1.getName(35271574L, locale8);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str13 = locale8.getUnicodeLocaleType("monthOfYear");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed Unicode locale key: monthOfYear");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00" + "'", str5, "+00:00");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "fra" + "'", str10, "fra");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+00:00" + "'", str11, "+00:00");
    }

    @Test
    public void test00136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00136");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.minusMillis((int) (byte) 1);
        java.lang.String str3 = localDateTime2.toString();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.minusMinutes((int) (byte) 10);
        int int6 = localDateTime2.getYearOfCentury();
        // The following exception was thrown during execution in test generation
        try {
            int int8 = localDateTime2.getValue((int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 97");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime2);
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "2022-02-11T09:47:56.935" + "'", str3, "2022-02-11T09:47:56.935");
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 22 + "'", int6 == 22);
    }

    @Test
    public void test00137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00137");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        int int1 = localDateTime0.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime3 = localDateTime0.plusHours((-1));
        org.joda.time.DateTimeField[] dateTimeFieldArray4 = localDateTime3.getFields();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType6 = localDateTime3.getFieldType((int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 97");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(dateTimeFieldArray4);
    }

    @Test
    public void test00138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00138");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.minusMillis((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.plusDays(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.withField(dateTimeFieldType5, 0);
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime();
        boolean boolean10 = localDateTime8.isBefore((org.joda.time.ReadablePartial) localDateTime9);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime9.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime9.plusMinutes((int) '#');
        org.joda.time.LocalDateTime localDateTime16 = localDateTime9.minusMinutes((int) (short) 1);
        boolean boolean17 = localDateTime7.isAfter((org.joda.time.ReadablePartial) localDateTime16);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime16.plusSeconds(42);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime24 = localDateTime19.withTime(715, (int) (short) 0, (int) (byte) -1, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 715 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(localDateTime19);
    }

    @Test
    public void test00139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00139");
        // The following exception was thrown during execution in test generation
        try {
            int int3 = org.joda.time.field.FieldUtils.getWrappedValue(2, (int) 'u', 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: MIN > MAX");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00140");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.Date date1 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean2 = timeZone0.inDaylightTime(date1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone0);
        org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "Coordinated Universal Time");
    }

    @Test
    public void test00141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00141");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((int) (byte) 10, 42, (-120), 47, 22, 0, 10);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 47 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00142");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        int int1 = localDateTime0.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime3 = localDateTime0.minusMonths((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.minusMonths((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.plusWeeks(22);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.dayOfYear();
        org.joda.time.LocalDateTime.Property property9 = localDateTime7.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusMillis((int) (byte) 1);
        java.lang.String str13 = localDateTime12.toString();
        org.joda.time.DateTime dateTime14 = localDateTime12.toDateTime();
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.minusMillis((int) (byte) 1);
        java.lang.String str18 = localDateTime17.toString();
        org.joda.time.DateTime dateTime19 = localDateTime17.toDateTime();
        boolean boolean20 = dateTime14.isEqual((org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.Chronology chronology21 = dateTime19.getChronology();
        org.joda.time.ReadableInstant readableInstant22 = null;
        boolean boolean23 = dateTime19.isEqual(readableInstant22);
        // The following exception was thrown during execution in test generation
        try {
            int int24 = property9.compareTo(readableInstant22);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The instant must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 22 + "'", int1 == 22);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDateTime12);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "2022-02-11T09:47:57.462" + "'", str13, "2022-02-11T09:47:57.462");
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(localDateTime17);
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "2022-02-11T09:47:57.462" + "'", str18, "2022-02-11T09:47:57.462");
        org.junit.Assert.assertNotNull(dateTime19);
// flaky:         org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test00143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00143");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 83);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withSecondOfMinute(35274908);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35274908 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00144");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("2022-02-11T09:47:49.888");
        int int3 = timeZone1.getOffset(822L);
        int int4 = timeZone1.getDSTSavings();
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
    }

    @Test
    public void test00145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00145");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        java.util.Locale locale3 = null;
        java.lang.String str4 = dateTimeZone1.getName((long) (short) 10, locale3);
        long long6 = dateTimeZone0.getMillisKeepLocal(dateTimeZone1, (long) 874);
        int int8 = dateTimeZone1.getOffsetFromLocal((long) 22);
        int int10 = dateTimeZone1.getOffset((long) 83);
        long long13 = dateTimeZone1.adjustOffset((long) (byte) -1, true);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00" + "'", str4, "+00:00");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 874L + "'", long6 == 874L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
    }

    @Test
    public void test00146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00146");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("2022-02-11T09:47:51.013");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=2022-02-11t09:47:51.013");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00147");
        int int2 = org.joda.time.field.FieldUtils.safeMultiplyToInt((long) (short) 1, (long) (short) 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
    }

    @Test
    public void test00148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00148");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forID("2022-02-11T09:47:54.179");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The datetime zone id '2022-02-11T09:47:54.179' is not recognised");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00149");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder3 = builder0.setVariant("2022-02-11T09:47:54.002");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed variant: 2022-02-11T09:47:54.002 [at index 5]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
    }

    @Test
    public void test00150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00150");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        int int2 = dateTimeZone0.getStandardOffset((long) (-100));
        java.util.TimeZone timeZone3 = dateTimeZone0.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        // The following exception was thrown during execution in test generation
        try {
            int int11 = timeZone3.getOffset(53, 0, 11, 1, 35274908, 379);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal era 53");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone4);
    }

    @Test
    public void test00151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00151");
        java.util.Locale locale3 = new java.util.Locale("dayOfYear", "2022-02-11T09:47:51.796", "Korean");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str4 = locale3.getISO3Language();
            org.junit.Assert.fail("Expected exception of type java.util.MissingResourceException; message: Couldn't find 3-letter language code for dayofyear");
        } catch (java.util.MissingResourceException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(locale3.toString(), "dayofyear_2022-02-11T09:47:51.796_Korean");
    }

    @Test
    public void test00152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00152");
        // The following exception was thrown during execution in test generation
        try {
            int int4 = org.joda.time.field.FieldUtils.getWrappedValue(5200, (int) (short) -1, 5, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: MIN > MAX");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00153");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime();
        boolean boolean4 = localDateTime2.isBefore((org.joda.time.ReadablePartial) localDateTime3);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property7 = localDateTime3.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime8 = property7.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField9 = property7.getField();
        int int10 = dateTimeField9.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime();
        int int12 = localDateTime11.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime11.minusMonths((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minusMonths((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.plusWeeks(22);
        java.util.Locale locale20 = java.util.Locale.JAPANESE;
        java.lang.String str21 = dateTimeField9.getAsShortText((org.joda.time.ReadablePartial) localDateTime18, 22, locale20);
        java.util.Locale.Builder builder22 = builder1.setLocale(locale20);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder24 = builder22.setLanguage("2022-02-11T09:47:51.877");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed language: 2022-02-11T09:47:51.877 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 31 + "'", int10 == 31);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 22 + "'", int12 == 22);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "22" + "'", str21, "22");
        org.junit.Assert.assertNotNull(builder22);
    }

    @Test
    public void test00154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00154");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("2022-02-11T09:47:55.589");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=2022-02-11t09:47:55.589");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00155");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property5 = localDateTime1.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime6 = property5.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField7 = property5.getField();
        java.lang.String str8 = property5.getAsString();
        java.lang.String str9 = property5.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime11 = property5.setCopy("Tempo universale coordinato");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"Tempo universale coordinato\" for dayOfMonth is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "11" + "'", str8, "11");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Property[dayOfMonth]" + "'", str9, "Property[dayOfMonth]");
    }

    @Test
    public void test00156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00156");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime();
        boolean boolean4 = localDateTime2.isBefore((org.joda.time.ReadablePartial) localDateTime3);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property7 = localDateTime3.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime8 = property7.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField9 = property7.getField();
        int int10 = dateTimeField9.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime();
        int int12 = localDateTime11.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime11.minusMonths((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minusMonths((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.plusWeeks(22);
        java.util.Locale locale20 = java.util.Locale.JAPANESE;
        java.lang.String str21 = dateTimeField9.getAsShortText((org.joda.time.ReadablePartial) localDateTime18, 22, locale20);
        java.util.Locale.Builder builder22 = builder1.setLocale(locale20);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder24 = builder22.setScript("dayOfYear");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed script: dayOfYear [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 31 + "'", int10 == 31);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 22 + "'", int12 == 22);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "22" + "'", str21, "22");
        org.junit.Assert.assertNotNull(builder22);
    }

    @Test
    public void test00157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00157");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        int int2 = dateTimeZone0.getStandardOffset((long) (-100));
        java.util.TimeZone timeZone3 = dateTimeZone0.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        int int7 = dateTimeZone5.getStandardOffset((long) (-100));
        java.util.TimeZone timeZone8 = dateTimeZone5.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        boolean boolean10 = timeZone3.hasSameRules(timeZone8);
        timeZone3.setRawOffset(5);
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime();
        boolean boolean17 = localDateTime15.isBefore((org.joda.time.ReadablePartial) localDateTime16);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime16.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property20 = localDateTime16.dayOfMonth();
        boolean boolean21 = property20.isLeap();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone22);
        java.util.Locale locale25 = java.util.Locale.CHINESE;
        java.lang.String str26 = dateTimeZone22.getName((long) (short) 0, locale25);
        java.lang.String str27 = property20.getAsShortText(locale25);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str28 = timeZone3.getDisplayName(true, 50, locale25);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal style: 50");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(timeZone8);
        org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "+00:00" + "'", str26, "+00:00");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "11" + "'", str27, "11");
    }

    @Test
    public void test00158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00158");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 83);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusSeconds(83);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withMinuteOfHour((-1));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
    }

    @Test
    public void test00159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00159");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder3 = builder1.setLanguageTag("2022-02-11T09:47:56.606");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Invalid subtag: 2022 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
    }

    @Test
    public void test00160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00160");
        java.util.Locale locale0 = java.util.Locale.TAIWAN;
        java.lang.Class<?> wildcardClass1 = locale0.getClass();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(wildcardClass1);
    }

    @Test
    public void test00161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00161");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds((int) (byte) 100);
        java.util.Locale locale6 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str7 = localDateTime1.toString("2022-02-11T09:47:51.496", locale6);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
    }

    @Test
    public void test00162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00162");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property5 = localDateTime1.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime6 = property5.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField7 = property5.getField();
        int int10 = dateTimeField7.getDifference(1L, 86399999L);
        java.lang.String str11 = dateTimeField7.toString();
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime();
        boolean boolean14 = localDateTime12.isBefore((org.joda.time.ReadablePartial) localDateTime13);
        int[] intArray15 = localDateTime13.getValues();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime13.plusYears((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime();
        boolean boolean20 = localDateTime18.isBefore((org.joda.time.ReadablePartial) localDateTime19);
        int[] intArray21 = localDateTime19.getValues();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime13.withFields((org.joda.time.ReadablePartial) localDateTime19);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.minusMillis((int) (short) 100);
        int int25 = localDateTime22.getMillisOfSecond();
        org.joda.time.LocalDateTime.Property property26 = localDateTime22.minuteOfHour();
        int[] intArray30 = new int[] { 5200, (short) 100 };
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray32 = dateTimeField7.set((org.joda.time.ReadablePartial) localDateTime22, 42, intArray30, 2022);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 99");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "DateTimeField[dayOfMonth]" + "'", str11, "DateTimeField[dayOfMonth]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(intArray15);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[2022, 2, 11, 35279083]");
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(intArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[2022, 2, 11, 35279083]");
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
// flaky:         org.junit.Assert.assertTrue("'" + int25 + "' != '" + 83 + "'", int25 == 83);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[5200, 100]");
    }

    @Test
    public void test00163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00163");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property5 = localDateTime1.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime6 = property5.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField7 = property5.getField();
        long long9 = dateTimeField7.remainder((-1L));
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = dateTimeField7.getType();
        boolean boolean11 = dateTimeField7.isSupported();
        java.util.Locale locale12 = java.util.Locale.ROOT;
        java.lang.String str13 = locale12.getDisplayName();
        int int14 = dateTimeField7.getMaximumTextLength(locale12);
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.minusMillis((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.plusDays(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime17.withField(dateTimeFieldType20, 0);
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime();
        boolean boolean25 = localDateTime23.isBefore((org.joda.time.ReadablePartial) localDateTime24);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime24.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime24.plusMinutes((int) '#');
        org.joda.time.LocalDateTime localDateTime31 = localDateTime24.minusMinutes((int) (short) 1);
        boolean boolean32 = localDateTime22.isAfter((org.joda.time.ReadablePartial) localDateTime31);
        org.joda.time.LocalDateTime.Property property33 = localDateTime22.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime();
        boolean boolean37 = localDateTime35.isBefore((org.joda.time.ReadablePartial) localDateTime36);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime36.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property40 = localDateTime36.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime41 = property40.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField42 = property40.getField();
        long long45 = dateTimeField42.addWrapField((long) (short) 1, (int) (byte) 100);
        int int47 = dateTimeField42.getMinimumValue((-1L));
        org.joda.time.ReadablePartial readablePartial48 = null;
        int[] intArray51 = new int[] { 11 };
        int[] intArray53 = dateTimeField42.addWrapPartial(readablePartial48, 100, intArray51, 0);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray55 = dateTimeField7.addWrapPartial((org.joda.time.ReadablePartial) localDateTime22, 0, intArray51, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 86399999L + "'", long9 == 86399999L);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 604800001L + "'", long45 == 604800001L);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[11]");
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[11]");
    }

    @Test
    public void test00164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00164");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property5 = localDateTime1.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime6 = property5.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField7 = property5.getField();
        long long10 = dateTimeField7.addWrapField((long) (short) 1, (int) (byte) 100);
        int int12 = dateTimeField7.getLeapAmount(0L);
        long long15 = dateTimeField7.addWrapField(58L, (int) '4');
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.minusMillis((int) (byte) 1);
        java.lang.String str20 = localDateTime19.toString();
        org.joda.time.DateTime dateTime21 = localDateTime19.toDateTime();
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.minusMillis((int) (byte) 1);
        java.lang.String str25 = localDateTime24.toString();
        org.joda.time.DateTime dateTime26 = localDateTime24.toDateTime();
        boolean boolean27 = dateTime21.isEqual((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.Chronology chronology28 = dateTime26.getChronology();
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime((java.lang.Object) 35271574L, chronology28);
        org.joda.time.LocalDateTime localDateTime30 = org.joda.time.LocalDateTime.now(chronology28);
        int[] intArray36 = new int[] { 38, 715, (short) 100, 924 };
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray38 = dateTimeField7.addWrapPartial((org.joda.time.ReadablePartial) localDateTime30, (int) (short) 0, intArray36, 924);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 714");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 604800001L + "'", long10 == 604800001L);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1814400058L + "'", long15 == 1814400058L);
        org.junit.Assert.assertNotNull(localDateTime19);
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "2022-02-11T09:47:59.215" + "'", str20, "2022-02-11T09:47:59.215");
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(localDateTime24);
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "2022-02-11T09:47:59.215" + "'", str25, "2022-02-11T09:47:59.215");
        org.junit.Assert.assertNotNull(dateTime26);
// flaky:         org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[38, 715, 100, 924]");
    }

    @Test
    public void test00165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00165");
        java.util.Locale locale0 = java.util.Locale.JAPAN;
        java.util.Locale locale1 = java.util.Locale.FRENCH;
        java.lang.String str2 = locale0.getDisplayCountry(locale1);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str4 = locale0.getUnicodeLocaleType("2022-02-11T09:47:55.588");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed Unicode locale key: 2022-02-11T09:47:55.588");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Japon" + "'", str2, "Japon");
    }

    @Test
    public void test00166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00166");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.minusMillis((int) (byte) 1);
        java.lang.String str3 = localDateTime2.toString();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.minusMonths((int) 'a');
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusMinutes(22);
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime();
        boolean boolean10 = localDateTime8.isBefore((org.joda.time.ReadablePartial) localDateTime9);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime9.plusSeconds((int) (byte) 100);
        boolean boolean13 = localDateTime7.isBefore((org.joda.time.ReadablePartial) localDateTime9);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((java.lang.Object) boolean13);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: java.lang.Boolean");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime2);
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "2022-02-11T09:47:59.267" + "'", str3, "2022-02-11T09:47:59.267");
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test00167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00167");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property5 = localDateTime1.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime6 = property5.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField7 = property5.getField();
        int int8 = property5.getMaximumValueOverall();
        org.joda.time.LocalDateTime localDateTime10 = property5.addToCopy(0);
        org.joda.time.LocalDateTime localDateTime12 = property5.addToCopy(1);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime14 = localDateTime12.withSecondOfMinute(2022);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2022 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 31 + "'", int8 == 31);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
    }

    @Test
    public void test00168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00168");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plus(readableDuration3);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime1.plusMinutes((int) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime8 = localDateTime1.withDayOfMonth(709);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 709 for dayOfMonth must be in the range [1,28]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
    }

    @Test
    public void test00169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00169");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property5 = localDateTime1.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime6 = property5.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField7 = property5.getField();
        long long9 = dateTimeField7.remainder((-1L));
        int int10 = dateTimeField7.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime();
        int int12 = localDateTime11.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime11.minusMonths((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minusMonths((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property17 = localDateTime14.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime();
        boolean boolean20 = localDateTime18.isBefore((org.joda.time.ReadablePartial) localDateTime19);
        int[] intArray21 = localDateTime19.getValues();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime19.plusYears((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime();
        boolean boolean26 = localDateTime24.isBefore((org.joda.time.ReadablePartial) localDateTime25);
        int[] intArray27 = localDateTime25.getValues();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime19.withFields((org.joda.time.ReadablePartial) localDateTime25);
        boolean boolean29 = localDateTime14.isBefore((org.joda.time.ReadablePartial) localDateTime19);
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.minusMillis((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime33.plusDays(0);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime35.plusMillis((int) '#');
        int[] intArray38 = localDateTime35.getValues();
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray40 = dateTimeField7.set((org.joda.time.ReadablePartial) localDateTime19, 38, intArray38, 1969);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1969 for dayOfMonth must be in the range [1,28]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 86399999L + "'", long9 == 86399999L);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 31 + "'", int10 == 31);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 22 + "'", int12 == 22);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(intArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[2022, 2, 11, 35279441]");
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(intArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[2022, 2, 11, 35279441]");
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(intArray38);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[2022, 2, 11, 35279440]");
    }

    @Test
    public void test00170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00170");
        java.util.Locale.FilteringMode filteringMode0 = java.util.Locale.FilteringMode.AUTOSELECT_FILTERING;
        java.lang.Class<?> wildcardClass1 = filteringMode0.getClass();
        org.junit.Assert.assertTrue("'" + filteringMode0 + "' != '" + java.util.Locale.FilteringMode.AUTOSELECT_FILTERING + "'", filteringMode0.equals(java.util.Locale.FilteringMode.AUTOSELECT_FILTERING));
        org.junit.Assert.assertNotNull(wildcardClass1);
    }

    @Test
    public void test00171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00171");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property5 = localDateTime1.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime6 = property5.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField7 = property5.getField();
        long long9 = dateTimeField7.remainder((-1L));
        java.util.Locale locale11 = java.util.Locale.UK;
        java.lang.String str12 = dateTimeField7.getAsShortText((long) 22, locale11);
        int int13 = dateTimeField7.getMinimumValue();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime();
        boolean boolean16 = localDateTime14.isBefore((org.joda.time.ReadablePartial) localDateTime15);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime15.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime15.plusMinutes((int) '#');
        org.joda.time.LocalDateTime localDateTime22 = localDateTime15.minusMinutes((int) (short) 1);
        org.joda.time.LocalDateTime.Property property23 = localDateTime22.weekOfWeekyear();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime22, chronology24);
        java.util.Locale locale27 = new java.util.Locale("2022-02-11T09:47:50.218");
        java.lang.String str28 = dateTimeField7.getAsShortText((org.joda.time.ReadablePartial) localDateTime22, locale27);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str30 = locale27.getUnicodeLocaleType("2022-02-11T09:47:54.179");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed Unicode locale key: 2022-02-11T09:47:54.179");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 86399999L + "'", long9 == 86399999L);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "1" + "'", str12, "1");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertEquals(locale27.toString(), "2022-02-11t09:47:50.218");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "11" + "'", str28, "11");
    }

    @Test
    public void test00172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00172");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime1.plusMinutes((int) '#');
        int int7 = localDateTime1.getDayOfMonth();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime9 = localDateTime1.withMonthOfYear((int) '#');
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 11 + "'", int7 == 11);
    }

    @Test
    public void test00173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00173");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property5 = localDateTime1.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime6 = property5.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField7 = property5.getField();
        long long9 = dateTimeField7.remainder((-1L));
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = dateTimeField7.getType();
        boolean boolean11 = dateTimeField7.isSupported();
        boolean boolean12 = dateTimeField7.isLenient();
        java.util.Locale locale15 = java.util.Locale.KOREA;
        // The following exception was thrown during execution in test generation
        try {
            long long16 = dateTimeField7.set((long) 117, "2022-02-11T09:47:51.014", locale15);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2022-02-11T09:47:51.014\" for dayOfMonth is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 86399999L + "'", long9 == 86399999L);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko_KR");
    }

    @Test
    public void test00174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00174");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.parse("2022-02-11T09:47:50.173", dateTimeFormatter1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00175");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property5 = localDateTime1.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime6 = property5.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField7 = property5.getField();
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime();
        boolean boolean10 = localDateTime8.isBefore((org.joda.time.ReadablePartial) localDateTime9);
        int[] intArray11 = localDateTime9.getValues();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime9.plusYears((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime();
        boolean boolean16 = localDateTime14.isBefore((org.joda.time.ReadablePartial) localDateTime15);
        int[] intArray17 = localDateTime15.getValues();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime9.withFields((org.joda.time.ReadablePartial) localDateTime15);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.minusMillis((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.minusSeconds((int) '#');
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.withWeekOfWeekyear(50);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime22.withMinuteOfHour((int) (byte) 0);
        int int27 = dateTimeField7.getMinimumValue((org.joda.time.ReadablePartial) localDateTime22);
        java.lang.String str28 = dateTimeField7.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.field.FieldUtils.verifyValueBounds(dateTimeField7, 715, 709, (-120));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 715 for dayOfMonth must be in the range [709,-120]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[2022, 2, 11, 35279899]");
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(intArray17);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[2022, 2, 11, 35279899]");
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "DateTimeField[dayOfMonth]" + "'", str28, "DateTimeField[dayOfMonth]");
    }

    @Test
    public void test00176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00176");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("2022-02-11T09:47:58.747", strMap1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=2022-02-11t09:47:58.747");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00177");
        int int2 = org.joda.time.field.FieldUtils.safeAdd(59, 53);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 112 + "'", int2 == 112);
    }

    @Test
    public void test00178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00178");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale.Builder builder2 = builder1.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder4 = builder1.removeUnicodeLocaleAttribute("2022-02-11T09:47:50.109");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: 2022-02-11T09:47:50.109 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
    }

    @Test
    public void test00179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00179");
        org.joda.time.Chronology chronology7 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime((-3600000), 83, 100, 6, 5, (int) 'u', (int) 'a', chronology7);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 117 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00180");
        java.util.Locale locale0 = java.util.Locale.JAPAN;
        java.lang.String str1 = locale0.getVariant();
        java.lang.String str2 = locale0.getDisplayVariant();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str4 = locale0.getUnicodeLocaleType("dayOfYear");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed Unicode locale key: dayOfYear");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
    }

    @Test
    public void test00181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00181");
        long long2 = org.joda.time.field.FieldUtils.safeMultiply(1814400058L, 0L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
    }

    @Test
    public void test00182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00182");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder4 = builder0.setExtension(' ', "2022-02-11T09:47:50.188");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed extension key:   [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
    }

    @Test
    public void test00183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00183");
        java.util.Set<java.lang.String> strSet0 = org.joda.time.DateTimeZone.getAvailableIDs();
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        int int3 = dateTimeZone1.getStandardOffset((long) (-100));
        java.util.TimeZone timeZone4 = dateTimeZone1.toTimeZone();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean5 = strSet0.contains((java.lang.Object) timeZone4);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: java.util.SimpleTimeZone cannot be cast to java.lang.Comparable");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strSet0);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(timeZone4);
        org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "Coordinated Universal Time");
    }

    @Test
    public void test00184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00184");
        long long2 = org.joda.time.field.FieldUtils.safeMultiply((long) (byte) 100, (long) 2022);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 202200L + "'", long2 == 202200L);
    }

    @Test
    public void test00185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00185");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime1.plusMinutes((int) '#');
        org.joda.time.LocalDateTime localDateTime8 = localDateTime1.minusMinutes((int) (short) 1);
        org.joda.time.ReadablePartial readablePartial9 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean10 = localDateTime8.isEqual(readablePartial9);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Partial cannot be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
    }

    @Test
    public void test00186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00186");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale.Builder builder3 = builder0.setLanguage("");
        java.util.Locale.Builder builder4 = builder3.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder6 = builder3.addUnicodeLocaleAttribute("2022-02-11T09:47:57.735");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: 2022-02-11T09:47:57.735 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
    }

    @Test
    public void test00187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00187");
        long long2 = org.joda.time.field.FieldUtils.safeMultiply((long) (short) 100, 715);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 71500L + "'", long2 == 71500L);
    }

    @Test
    public void test00188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00188");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime();
        boolean boolean4 = localDateTime2.isBefore((org.joda.time.ReadablePartial) localDateTime3);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property7 = localDateTime3.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime8 = property7.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField9 = property7.getField();
        int int10 = dateTimeField9.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime();
        int int12 = localDateTime11.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime11.minusMonths((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minusMonths((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.plusWeeks(22);
        java.util.Locale locale20 = java.util.Locale.JAPANESE;
        java.lang.String str21 = dateTimeField9.getAsShortText((org.joda.time.ReadablePartial) localDateTime18, 22, locale20);
        java.util.Locale.Builder builder22 = builder1.setLocale(locale20);
        java.util.Locale locale23 = builder1.build();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder26 = builder1.setUnicodeLocaleKeyword("2022-02-11T09:47:58.627", "2022-02-11T09:47:57.569");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale keyword key: 2022-02-11T09:47:58.627 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 31 + "'", int10 == 31);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 22 + "'", int12 == 22);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "22" + "'", str21, "22");
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ja");
    }

    @Test
    public void test00189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00189");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale.Builder builder3 = builder0.setLanguage("");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder5 = builder3.setRegion("2142-02-11T09:46:58.613");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed region: 2142-02-11T09:46:58.613 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
    }

    @Test
    public void test00190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00190");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property5 = localDateTime1.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime6 = property5.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField7 = property5.getField();
        long long10 = dateTimeField7.addWrapField((long) 6, (int) (byte) 0);
        java.lang.String str12 = dateTimeField7.getAsShortText((long) (byte) 0);
        java.lang.String str14 = dateTimeField7.getAsShortText((-116L));
        long long16 = dateTimeField7.roundCeiling((long) 11);
        java.util.Locale locale21 = new java.util.Locale("11", "weekyear", "fra");
        java.lang.String str22 = locale21.getDisplayName();
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime();
        boolean boolean25 = localDateTime23.isBefore((org.joda.time.ReadablePartial) localDateTime24);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime24.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property28 = localDateTime24.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime29 = property28.withMinimumValue();
        java.util.Locale locale30 = java.util.Locale.UK;
        java.lang.String str31 = property28.getAsShortText(locale30);
        java.lang.String str32 = locale21.getDisplayScript(locale30);
        java.lang.String str33 = dateTimeField7.getAsShortText((long) 715, locale30);
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime();
        boolean boolean36 = localDateTime34.isBefore((org.joda.time.ReadablePartial) localDateTime35);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime35.plusSeconds((int) (byte) 100);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter39 = null;
        java.lang.String str40 = localDateTime35.toString(dateTimeFormatter39);
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        org.joda.time.LocalDateTime.Property property42 = localDateTime35.property(dateTimeFieldType41);
        java.util.Locale locale43 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str44 = dateTimeField7.getAsText((org.joda.time.ReadablePartial) localDateTime35, locale43);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str46 = locale43.getUnicodeLocaleType("2022-02-11T09:47:59.470");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed Unicode locale key: 2022-02-11T09:47:59.470");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 6L + "'", long10 == 6L);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "1" + "'", str12, "1");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "31" + "'", str14, "31");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 86400000L + "'", long16 == 86400000L);
        org.junit.Assert.assertEquals(locale21.toString(), "11_WEEKYEAR_fra");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "11 (WEEKYEAR,fra)" + "'", str22, "11 (WEEKYEAR,fra)");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "11" + "'", str31, "11");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "1" + "'", str33, "1");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(localDateTime38);
// flaky:         org.junit.Assert.assertEquals("'" + str40 + "' != '" + "2022-02-11T09:48:01.221" + "'", str40, "2022-02-11T09:48:01.221");
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "11" + "'", str44, "11");
    }

    @Test
    public void test00191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00191");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.LanguageRange[] languageRangeArray1 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList2 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList2, languageRangeArray1);
        java.util.Locale[] localeArray4 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList5 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList5, localeArray4);
        java.util.Locale locale7 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList2, (java.util.Collection<java.util.Locale>) localeList5);
        java.util.Locale.LanguageRange[] languageRangeArray8 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList9 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList9, languageRangeArray8);
        java.util.Locale[] localeArray11 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList12 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList12, localeArray11);
        java.util.Locale locale14 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList9, (java.util.Collection<java.util.Locale>) localeList12);
        java.util.Locale.FilteringMode filteringMode15 = null;
        java.util.List<java.util.Locale> localeList16 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList2, (java.util.Collection<java.util.Locale>) localeList12, filteringMode15);
        java.util.Locale locale17 = java.util.Locale.FRENCH;
        java.util.Set<java.lang.String> strSet18 = locale17.getUnicodeLocaleAttributes();
        java.lang.Object[] objArray19 = strSet18.toArray();
        java.util.Locale.FilteringMode filteringMode20 = java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList21 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList2, (java.util.Collection<java.lang.String>) strSet18, filteringMode20);
        java.util.Locale locale22 = java.util.Locale.ITALIAN;
        java.lang.String str23 = locale22.getDisplayCountry();
        boolean boolean24 = strSet18.equals((java.lang.Object) locale22);
        java.util.Locale.Builder builder25 = builder0.setLocale(locale22);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder27 = builder0.setScript("2022-02-11T09:47:58.747");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed script: 2022-02-11T09:47:58.747 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(languageRangeArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(localeArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(locale7);
        org.junit.Assert.assertNotNull(languageRangeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(localeArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(locale14);
        org.junit.Assert.assertNotNull(localeList16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet18);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[]");
        org.junit.Assert.assertTrue("'" + filteringMode20 + "' != '" + java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES + "'", filteringMode20.equals(java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList21);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "it");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(builder25);
    }

    @Test
    public void test00192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00192");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        boolean boolean1 = timeZone0.useDaylightTime();
        org.junit.Assert.assertNotNull(timeZone0);
// flaky:         org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test00193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00193");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property5 = localDateTime1.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime6 = property5.withMinimumValue();
        long long7 = property5.remainder();
        java.lang.String str8 = property5.toString();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime();
        boolean boolean11 = localDateTime9.isBefore((org.joda.time.ReadablePartial) localDateTime10);
        int[] intArray12 = localDateTime10.getValues();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime10.plusYears((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime();
        boolean boolean17 = localDateTime15.isBefore((org.joda.time.ReadablePartial) localDateTime16);
        int[] intArray18 = localDateTime16.getValues();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime10.withFields((org.joda.time.ReadablePartial) localDateTime16);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.minusMillis((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.minusSeconds((int) '#');
        boolean boolean24 = property5.equals((java.lang.Object) '#');
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
// flaky:         org.junit.Assert.assertTrue("'" + long7 + "' != '" + 35281387L + "'", long7 == 35281387L);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Property[dayOfMonth]" + "'", str8, "Property[dayOfMonth]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(intArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[2022, 2, 11, 35281387]");
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(intArray18);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[2022, 2, 11, 35281387]");
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test00194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00194");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.minusMillis((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.plusDays(0);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField6 = localDateTime4.getField((int) 'x');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 120");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
    }

    @Test
    public void test00195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00195");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property5 = localDateTime1.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime6 = property5.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField7 = property5.getField();
        int int8 = dateTimeField7.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime();
        int int10 = localDateTime9.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime9.minusMonths((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.minusMonths((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.plusWeeks(22);
        java.util.Locale locale18 = java.util.Locale.JAPANESE;
        java.lang.String str19 = dateTimeField7.getAsShortText((org.joda.time.ReadablePartial) localDateTime16, 22, locale18);
        int int20 = dateTimeField7.getMinimumValue();
        java.util.Locale locale25 = new java.util.Locale("fra", "");
        java.util.Set<java.lang.String> strSet26 = locale25.getUnicodeLocaleAttributes();
        java.lang.String str27 = locale25.getScript();
        java.util.Set<java.lang.Character> charSet28 = locale25.getExtensionKeys();
        // The following exception was thrown during execution in test generation
        try {
            long long29 = dateTimeField7.set(35275799L, "2022-02-11T09:47:53.739", locale25);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2022-02-11T09:47:53.739\" for dayOfMonth is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 31 + "'", int8 == 31);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 22 + "'", int10 == 22);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "22" + "'", str19, "22");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertEquals(locale25.toString(), "fra");
        org.junit.Assert.assertNotNull(strSet26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(charSet28);
    }

    @Test
    public void test00196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00196");
        // The following exception was thrown during execution in test generation
        try {
            int int2 = org.joda.time.field.FieldUtils.safeMultiplyToInt((long) (-120), 86400000L);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Value cannot fit in an int: -10368000000");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00197");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plus(readableDuration3);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime6 = localDateTime1.withDayOfWeek(35274908);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35274908 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
    }

    @Test
    public void test00198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00198");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property5 = localDateTime1.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime6 = property5.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField7 = property5.getField();
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime();
        boolean boolean10 = localDateTime8.isBefore((org.joda.time.ReadablePartial) localDateTime9);
        int[] intArray11 = localDateTime9.getValues();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime9.plusYears((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime();
        boolean boolean16 = localDateTime14.isBefore((org.joda.time.ReadablePartial) localDateTime15);
        int[] intArray17 = localDateTime15.getValues();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime9.withFields((org.joda.time.ReadablePartial) localDateTime15);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.minusMillis((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.minusSeconds((int) '#');
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.withWeekOfWeekyear(50);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime22.withMinuteOfHour((int) (byte) 0);
        int int27 = dateTimeField7.getMinimumValue((org.joda.time.ReadablePartial) localDateTime22);
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime();
        int int30 = localDateTime29.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime32 = localDateTime29.minusMonths((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.minusMonths((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property35 = localDateTime32.minuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone37);
        java.util.Locale locale40 = java.util.Locale.CHINESE;
        java.lang.String str41 = dateTimeZone37.getName((long) (short) 0, locale40);
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime(0L, dateTimeZone37);
        java.util.Locale locale44 = java.util.Locale.FRENCH;
        java.util.Set<java.lang.String> strSet45 = locale44.getUnicodeLocaleAttributes();
        java.lang.String str46 = locale44.getISO3Language();
        java.lang.String str47 = dateTimeZone37.getName(35271574L, locale44);
        int int48 = property35.getMaximumShortTextLength(locale44);
        java.lang.String str49 = dateTimeField7.getAsShortText((int) 'a', locale44);
        org.joda.time.LocalDateTime localDateTime50 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime51 = new org.joda.time.LocalDateTime();
        boolean boolean52 = localDateTime50.isBefore((org.joda.time.ReadablePartial) localDateTime51);
        org.joda.time.LocalDateTime localDateTime54 = localDateTime51.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime56 = localDateTime51.plusMinutes((int) '#');
        org.joda.time.ReadablePeriod readablePeriod57 = null;
        org.joda.time.LocalDateTime localDateTime58 = localDateTime51.minus(readablePeriod57);
        org.joda.time.DateTimeFieldType dateTimeFieldType59 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.LocalDateTime localDateTime61 = localDateTime51.withField(dateTimeFieldType59, (int) (byte) 100);
        int[] intArray67 = new int[] { (-120), 22, 924, 924 };
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray69 = dateTimeField7.addWrapField((org.joda.time.ReadablePartial) localDateTime61, 10, intArray67, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[2022, 2, 11, 35281618]");
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(intArray17);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[2022, 2, 11, 35281618]");
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 22 + "'", int30 == 22);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "+00:00" + "'", str41, "+00:00");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "fra" + "'", str46, "fra");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "+00:00" + "'", str47, "+00:00");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2 + "'", int48 == 2);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "97" + "'", str49, "97");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(dateTimeFieldType59);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(intArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[-120, 22, 924, 924]");
    }

    @Test
    public void test00199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00199");
        int int3 = org.joda.time.field.FieldUtils.getWrappedValue((int) (short) -1, 11, (int) '#');
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 24 + "'", int3 == 24);
    }

    @Test
    public void test00200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00200");
        int int3 = org.joda.time.field.FieldUtils.getWrappedValue(1, (int) (byte) -1, 117);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
    }

    @Test
    public void test00201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00201");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property5 = localDateTime1.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        boolean boolean8 = localDateTime6.isBefore((org.joda.time.ReadablePartial) localDateTime7);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime7.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property11 = localDateTime7.dayOfMonth();
        java.util.Locale locale12 = java.util.Locale.FRENCH;
        java.util.Set<java.lang.String> strSet13 = locale12.getUnicodeLocaleAttributes();
        java.lang.String str14 = locale12.getVariant();
        java.lang.String str15 = property11.getAsText(locale12);
        java.lang.String str16 = property5.getAsShortText(locale12);
        org.joda.time.LocalDateTime localDateTime17 = property5.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime localDateTime18 = property5.roundFloorCopy();
        java.util.Locale locale21 = new java.util.Locale("", "weekyear");
        int int22 = property5.getMaximumShortTextLength(locale21);
        java.util.Locale locale25 = new java.util.Locale("", "weekyear");
        java.util.Set<java.lang.String> strSet26 = locale25.getUnicodeLocaleAttributes();
        int int27 = property5.getMaximumShortTextLength(locale25);
        java.lang.String str28 = locale25.toString();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "11" + "'", str15, "11");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "11" + "'", str16, "11");
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertEquals(locale21.toString(), "_WEEKYEAR");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertEquals(locale25.toString(), "_WEEKYEAR");
        org.junit.Assert.assertNotNull(strSet26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2 + "'", int27 == 2);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "_WEEKYEAR" + "'", str28, "_WEEKYEAR");
    }

    @Test
    public void test00202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00202");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        int int2 = dateTimeZone0.getStandardOffset((long) (-100));
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime(dateTimeZone0);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime5 = localDateTime3.withYearOfCentury(365);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 365 for yearOfCentury must be in the range [0,99]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
    }

    @Test
    public void test00203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00203");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale.Builder builder3 = builder0.setLanguage("");
        java.util.Locale.Builder builder4 = builder3.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder6 = builder4.setVariant("2022-02-11T09:48:00.120");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed variant: 2022-02-11T09:48:00.120 [at index 5]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
    }

    @Test
    public void test00204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00204");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.LanguageRange[] languageRangeArray1 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList2 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList2, languageRangeArray1);
        java.util.Locale[] localeArray4 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList5 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList5, localeArray4);
        java.util.Locale locale7 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList2, (java.util.Collection<java.util.Locale>) localeList5);
        java.util.Locale.LanguageRange[] languageRangeArray8 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList9 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList9, languageRangeArray8);
        java.util.Locale[] localeArray11 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList12 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList12, localeArray11);
        java.util.Locale locale14 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList9, (java.util.Collection<java.util.Locale>) localeList12);
        java.util.Locale.FilteringMode filteringMode15 = null;
        java.util.List<java.util.Locale> localeList16 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList2, (java.util.Collection<java.util.Locale>) localeList12, filteringMode15);
        java.util.Locale locale17 = java.util.Locale.FRENCH;
        java.util.Set<java.lang.String> strSet18 = locale17.getUnicodeLocaleAttributes();
        java.lang.Object[] objArray19 = strSet18.toArray();
        java.util.Locale.FilteringMode filteringMode20 = java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList21 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList2, (java.util.Collection<java.lang.String>) strSet18, filteringMode20);
        java.util.Locale locale22 = java.util.Locale.ITALIAN;
        java.lang.String str23 = locale22.getDisplayCountry();
        boolean boolean24 = strSet18.equals((java.lang.Object) locale22);
        java.util.Locale.Builder builder25 = builder0.setLocale(locale22);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder28 = builder25.setExtension('x', "2022-02-11T09:47:52.558");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed extension value: 11T09:47:52.558 [at index 8]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(languageRangeArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(localeArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(locale7);
        org.junit.Assert.assertNotNull(languageRangeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(localeArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(locale14);
        org.junit.Assert.assertNotNull(localeList16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet18);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[]");
        org.junit.Assert.assertTrue("'" + filteringMode20 + "' != '" + java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES + "'", filteringMode20.equals(java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList21);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "it");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(builder25);
    }

    @Test
    public void test00205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00205");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale.Builder builder2 = builder1.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder4 = builder2.setRegion("2022-02-11T09:47:59.230");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed region: 2022-02-11T09:47:59.230 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
    }

    @Test
    public void test00206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00206");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        int int2 = dateTimeZone0.getStandardOffset((long) (-100));
        java.util.TimeZone timeZone3 = dateTimeZone0.toTimeZone();
        int int4 = timeZone3.getRawOffset();
        timeZone3.setRawOffset(50);
        timeZone3.setRawOffset((int) '4');
        java.lang.String str9 = timeZone3.getDisplayName();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Coordinated Universal Time" + "'", str9, "Coordinated Universal Time");
    }

    @Test
    public void test00207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00207");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.minusMillis((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.plusDays(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.withField(dateTimeFieldType5, 0);
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime();
        boolean boolean10 = localDateTime8.isBefore((org.joda.time.ReadablePartial) localDateTime9);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime9.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime9.plusMinutes((int) '#');
        org.joda.time.LocalDateTime localDateTime16 = localDateTime9.minusMinutes((int) (short) 1);
        boolean boolean17 = localDateTime7.isAfter((org.joda.time.ReadablePartial) localDateTime16);
        org.joda.time.LocalDateTime.Property property18 = localDateTime7.secondOfMinute();
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = property18.getFieldType();
        org.joda.time.LocalDateTime localDateTime20 = property18.roundHalfFloorCopy();
        org.joda.time.LocalDateTime.Property property21 = localDateTime20.centuryOfEra();
        int int22 = property21.getMinimumValueOverall();
        java.lang.Class<?> wildcardClass23 = property21.getClass();
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test00208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00208");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone2);
        java.util.Locale locale5 = java.util.Locale.CHINESE;
        java.lang.String str6 = dateTimeZone2.getName((long) (short) 0, locale5);
        java.util.Locale.Builder builder7 = builder0.setLocale(locale5);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder9 = builder0.setVariant("2022-02-11T09:47:59.107");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed variant: 2022-02-11T09:47:59.107 [at index 5]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00" + "'", str6, "+00:00");
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test00209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00209");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property5 = localDateTime1.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime6 = property5.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField7 = property5.getField();
        long long10 = dateTimeField7.addWrapField((long) (short) 1, (int) (byte) 100);
        int int12 = dateTimeField7.getLeapAmount(0L);
        long long14 = dateTimeField7.roundHalfFloor((long) (-1));
        long long16 = dateTimeField7.roundFloor((long) 222);
        org.joda.time.ReadablePartial readablePartial17 = null;
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime();
        boolean boolean21 = localDateTime19.isBefore((org.joda.time.ReadablePartial) localDateTime20);
        int[] intArray22 = localDateTime20.getValues();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime20.plusYears((int) (byte) -1);
        int[] intArray25 = localDateTime20.getValues();
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray27 = dateTimeField7.add(readablePartial17, (-1), intArray25, 5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 604800001L + "'", long10 == 604800001L);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[2022, 2, 11, 35282555]");
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(intArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[2022, 2, 11, 35282555]");
    }

    @Test
    public void test00210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00210");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder4 = builder1.setExtension('u', "2022-02-11T09:47:54.576");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed extension value: 11T09:47:54.576 [at index 8]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
    }

    @Test
    public void test00211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00211");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) 'x');
        java.lang.String str3 = dateTimeZone1.getNameKey(58L);
        java.lang.Class<?> wildcardClass4 = dateTimeZone1.getClass();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(wildcardClass4);
    }

    @Test
    public void test00212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00212");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.field.FieldUtils.verifyValueBounds("2022-02-11T09:47:56.112", 1969, 379, (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1969 for 2022-02-11T09:47:56.112 must be in the range [379,-1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00213");
        long long2 = org.joda.time.field.FieldUtils.safeMultiply((long) 50, (int) ' ');
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1600L + "'", long2 == 1600L);
    }

    @Test
    public void test00214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00214");
        int int2 = org.joda.time.field.FieldUtils.safeMultiplyToInt(0L, (long) 2022);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
    }

    @Test
    public void test00215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00215");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property5 = localDateTime1.dayOfMonth();
        java.util.Locale locale6 = java.util.Locale.FRENCH;
        java.util.Set<java.lang.String> strSet7 = locale6.getUnicodeLocaleAttributes();
        java.lang.String str8 = locale6.getVariant();
        java.lang.String str9 = property5.getAsText(locale6);
        org.joda.time.ReadableInstant readableInstant10 = null;
        int int11 = property5.getDifference(readableInstant10);
        int int12 = property5.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime14 = property5.addToCopy(50);
        int int15 = property5.getLeapAmount();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "11" + "'", str9, "11");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
    }

    @Test
    public void test00216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00216");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.minusMillis((int) (byte) 1);
        java.lang.String str3 = localDateTime2.toString();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.minusMonths((int) 'a');
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusMinutes(22);
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime();
        boolean boolean10 = localDateTime8.isBefore((org.joda.time.ReadablePartial) localDateTime9);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime9.plusSeconds((int) (byte) 100);
        boolean boolean13 = localDateTime7.isBefore((org.joda.time.ReadablePartial) localDateTime9);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType15 = localDateTime7.getFieldType(924);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 924");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime2);
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "2022-02-11T09:48:03.250" + "'", str3, "2022-02-11T09:48:03.250");
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test00217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00217");
        java.util.Locale locale2 = new java.util.Locale("fra", "");
        java.util.Set<java.lang.String> strSet3 = locale2.getUnicodeLocaleAttributes();
        java.lang.Object[] objArray4 = strSet3.toArray();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean6 = strSet3.add("2022-02-11T09:47:51.013");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(locale2.toString(), "fra");
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(objArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray4), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray4), "[]");
    }

    @Test
    public void test00218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00218");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property5 = localDateTime1.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime6 = property5.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField7 = property5.getField();
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime();
        boolean boolean10 = localDateTime8.isBefore((org.joda.time.ReadablePartial) localDateTime9);
        int[] intArray11 = localDateTime9.getValues();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime9.plusYears((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime();
        boolean boolean16 = localDateTime14.isBefore((org.joda.time.ReadablePartial) localDateTime15);
        int[] intArray17 = localDateTime15.getValues();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime9.withFields((org.joda.time.ReadablePartial) localDateTime15);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.minusMillis((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.minusSeconds((int) '#');
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.withWeekOfWeekyear(50);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime22.withMinuteOfHour((int) (byte) 0);
        int int27 = dateTimeField7.getMinimumValue((org.joda.time.ReadablePartial) localDateTime22);
        java.lang.String str28 = dateTimeField7.toString();
        int int31 = dateTimeField7.getDifference(0L, (long) (byte) -1);
        java.lang.String str32 = dateTimeField7.getName();
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime();
        int int34 = localDateTime33.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime36 = localDateTime33.minusMonths((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime36.minusMonths((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime38.plusWeeks(22);
        org.joda.time.LocalDateTime.Property property41 = localDateTime40.dayOfYear();
        org.joda.time.LocalDateTime.Property property42 = localDateTime40.secondOfMinute();
        int[] intArray44 = new int[] {};
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray46 = dateTimeField7.addWrapPartial((org.joda.time.ReadablePartial) localDateTime40, 5200, intArray44, 207);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeField7);
// flaky:         org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[2022, 2, 11, 35283371]");
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(intArray17);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[2022, 2, 11, 35283371]");
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "DateTimeField[dayOfMonth]" + "'", str28, "DateTimeField[dayOfMonth]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "dayOfMonth" + "'", str32, "dayOfMonth");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 22 + "'", int34 == 22);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[]");
    }

    @Test
    public void test00219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00219");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.field.FieldUtils.verifyValueBounds("2022-02-11T09:47:52.375", (int) '#', 28, 24);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35 for 2022-02-11T09:47:52.375 must be in the range [28,24]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00220");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.minusMillis((int) (byte) 1);
        java.lang.String str3 = localDateTime2.toString();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.minusMonths((int) 'a');
        org.joda.time.LocalDateTime.Property property6 = localDateTime2.yearOfCentury();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.yearOfEra();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime9 = localDateTime2.withField(dateTimeFieldType7, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for yearOfEra must be in the range [1,292278993]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime2);
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "2022-02-11T09:48:03.403" + "'", str3, "2022-02-11T09:48:03.403");
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
    }

    @Test
    public void test00221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00221");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property5 = localDateTime1.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime6 = property5.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField7 = property5.getField();
        long long9 = dateTimeField7.remainder((-1L));
        java.util.Locale locale11 = java.util.Locale.UK;
        java.lang.String str12 = dateTimeField7.getAsShortText((long) 22, locale11);
        int int13 = dateTimeField7.getMinimumValue();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime();
        boolean boolean16 = localDateTime14.isBefore((org.joda.time.ReadablePartial) localDateTime15);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime15.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime15.plusMinutes((int) '#');
        org.joda.time.LocalDateTime localDateTime22 = localDateTime15.minusMinutes((int) (short) 1);
        org.joda.time.LocalDateTime.Property property23 = localDateTime22.weekOfWeekyear();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime22, chronology24);
        java.util.Locale locale27 = new java.util.Locale("2022-02-11T09:47:50.218");
        java.lang.String str28 = dateTimeField7.getAsShortText((org.joda.time.ReadablePartial) localDateTime22, locale27);
        java.util.Locale locale29 = java.util.Locale.FRENCH;
        java.lang.String str30 = locale29.getDisplayName();
        int int31 = dateTimeField7.getMaximumShortTextLength(locale29);
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.minusMillis((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime34.plusDays(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDateTime localDateTime39 = localDateTime34.withField(dateTimeFieldType37, 0);
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime();
        boolean boolean42 = localDateTime40.isBefore((org.joda.time.ReadablePartial) localDateTime41);
        org.joda.time.LocalDateTime localDateTime44 = localDateTime41.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property45 = localDateTime41.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime46 = property45.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField47 = property45.getField();
        org.joda.time.DurationField durationField48 = dateTimeField47.getLeapDurationField();
        org.joda.time.LocalDateTime localDateTime49 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime50 = new org.joda.time.LocalDateTime();
        boolean boolean51 = localDateTime49.isBefore((org.joda.time.ReadablePartial) localDateTime50);
        org.joda.time.LocalDateTime localDateTime53 = localDateTime50.plusSeconds((int) (byte) 100);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter54 = null;
        java.lang.String str55 = localDateTime50.toString(dateTimeFormatter54);
        org.joda.time.DateTimeFieldType dateTimeFieldType56 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        org.joda.time.LocalDateTime.Property property57 = localDateTime50.property(dateTimeFieldType56);
        org.joda.time.LocalDateTime localDateTime59 = localDateTime50.minusMinutes((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime60 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime61 = new org.joda.time.LocalDateTime();
        boolean boolean62 = localDateTime60.isBefore((org.joda.time.ReadablePartial) localDateTime61);
        org.joda.time.LocalDateTime localDateTime64 = localDateTime61.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property65 = localDateTime61.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime66 = property65.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField67 = property65.getField();
        long long70 = dateTimeField67.addWrapField((long) (short) 1, (int) (byte) 100);
        int int72 = dateTimeField67.getMinimumValue((-1L));
        org.joda.time.ReadablePartial readablePartial73 = null;
        int[] intArray76 = new int[] { 11 };
        int[] intArray78 = dateTimeField67.addWrapPartial(readablePartial73, 100, intArray76, 0);
        int int79 = dateTimeField47.getMinimumValue((org.joda.time.ReadablePartial) localDateTime50, intArray76);
        // The following exception was thrown during execution in test generation
        try {
            int int80 = dateTimeField7.getMaximumValue((org.joda.time.ReadablePartial) localDateTime39, intArray76);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 86399999L + "'", long9 == 86399999L);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "1" + "'", str12, "1");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertEquals(locale27.toString(), "2022-02-11t09:47:50.218");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "11" + "'", str28, "11");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "French" + "'", str30, "French");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2 + "'", int31 == 2);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNull(durationField48);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(localDateTime53);
// flaky:         org.junit.Assert.assertEquals("'" + str55 + "' != '" + "2022-02-11T09:48:03.421" + "'", str55, "2022-02-11T09:48:03.421");
        org.junit.Assert.assertNotNull(dateTimeFieldType56);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 604800001L + "'", long70 == 604800001L);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[11]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[11]");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 1 + "'", int79 == 1);
    }

    @Test
    public void test00222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00222");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        int int1 = localDateTime0.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime3 = localDateTime0.plusHours((-1));
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField5 = localDateTime3.getField((int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 100");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + int1 + "' != '" + 560 + "'", int1 == 560);
        org.junit.Assert.assertNotNull(localDateTime3);
    }

    @Test
    public void test00223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00223");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property5 = localDateTime1.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime6 = property5.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField7 = property5.getField();
        long long9 = dateTimeField7.remainder((-1L));
        org.joda.time.DurationField durationField10 = dateTimeField7.getRangeDurationField();
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime();
        boolean boolean13 = localDateTime11.isBefore((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime12.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property16 = localDateTime12.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime17 = property16.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField18 = property16.getField();
        int int21 = dateTimeField18.getDifference(1L, 86399999L);
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime();
        int int23 = localDateTime22.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime22.minusMonths((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.minusMonths((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.plusWeeks(22);
        org.joda.time.LocalDateTime.Property property30 = localDateTime29.dayOfMonth();
        java.util.Locale locale35 = new java.util.Locale("11", "weekyear", "fra");
        java.lang.String str36 = locale35.getDisplayName();
        java.lang.String str37 = dateTimeField18.getAsShortText((org.joda.time.ReadablePartial) localDateTime29, (int) (byte) 1, locale35);
        int int38 = dateTimeField7.getMaximumShortTextLength(locale35);
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime41 = localDateTime39.minusMillis((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime41.plusDays(0);
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime();
        boolean boolean46 = localDateTime44.isBefore((org.joda.time.ReadablePartial) localDateTime45);
        org.joda.time.LocalDateTime localDateTime48 = localDateTime45.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime50 = localDateTime45.plusMinutes((int) '#');
        org.joda.time.LocalDateTime localDateTime52 = localDateTime45.plusMonths(0);
        org.joda.time.ReadableDuration readableDuration53 = null;
        org.joda.time.LocalDateTime localDateTime55 = localDateTime52.withDurationAdded(readableDuration53, (int) (byte) -1);
        int int56 = localDateTime43.compareTo((org.joda.time.ReadablePartial) localDateTime55);
        org.joda.time.LocalDateTime localDateTime58 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime59 = new org.joda.time.LocalDateTime();
        boolean boolean60 = localDateTime58.isBefore((org.joda.time.ReadablePartial) localDateTime59);
        org.joda.time.LocalDateTime localDateTime62 = localDateTime59.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property63 = localDateTime59.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime64 = property63.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField65 = property63.getField();
        org.joda.time.DurationField durationField66 = dateTimeField65.getLeapDurationField();
        org.joda.time.LocalDateTime localDateTime67 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime68 = new org.joda.time.LocalDateTime();
        boolean boolean69 = localDateTime67.isBefore((org.joda.time.ReadablePartial) localDateTime68);
        org.joda.time.LocalDateTime localDateTime71 = localDateTime68.plusSeconds((int) (byte) 100);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter72 = null;
        java.lang.String str73 = localDateTime68.toString(dateTimeFormatter72);
        org.joda.time.DateTimeFieldType dateTimeFieldType74 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        org.joda.time.LocalDateTime.Property property75 = localDateTime68.property(dateTimeFieldType74);
        org.joda.time.LocalDateTime localDateTime77 = localDateTime68.minusMinutes((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime78 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime79 = new org.joda.time.LocalDateTime();
        boolean boolean80 = localDateTime78.isBefore((org.joda.time.ReadablePartial) localDateTime79);
        org.joda.time.LocalDateTime localDateTime82 = localDateTime79.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property83 = localDateTime79.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime84 = property83.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField85 = property83.getField();
        long long88 = dateTimeField85.addWrapField((long) (short) 1, (int) (byte) 100);
        int int90 = dateTimeField85.getMinimumValue((-1L));
        org.joda.time.ReadablePartial readablePartial91 = null;
        int[] intArray94 = new int[] { 11 };
        int[] intArray96 = dateTimeField85.addWrapPartial(readablePartial91, 100, intArray94, 0);
        int int97 = dateTimeField65.getMinimumValue((org.joda.time.ReadablePartial) localDateTime68, intArray94);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray99 = dateTimeField7.addWrapField((org.joda.time.ReadablePartial) localDateTime55, (int) (byte) 0, intArray94, 24);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 86399999L + "'", long9 == 86399999L);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 22 + "'", int23 == 22);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertEquals(locale35.toString(), "11_WEEKYEAR_fra");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "11 (WEEKYEAR,fra)" + "'", str36, "11 (WEEKYEAR,fra)");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "1" + "'", str37, "1");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2 + "'", int38 == 2);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNull(durationField66);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(localDateTime71);
// flaky:         org.junit.Assert.assertEquals("'" + str73 + "' != '" + "2022-02-11T09:48:03.600" + "'", str73, "2022-02-11T09:48:03.600");
        org.junit.Assert.assertNotNull(dateTimeFieldType74);
        org.junit.Assert.assertNotNull(property75);
        org.junit.Assert.assertNotNull(localDateTime77);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(localDateTime82);
        org.junit.Assert.assertNotNull(property83);
        org.junit.Assert.assertNotNull(localDateTime84);
        org.junit.Assert.assertNotNull(dateTimeField85);
        org.junit.Assert.assertTrue("'" + long88 + "' != '" + 604800001L + "'", long88 == 604800001L);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 1 + "'", int90 == 1);
        org.junit.Assert.assertNotNull(intArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[11]");
        org.junit.Assert.assertNotNull(intArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray96), "[11]");
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 1 + "'", int97 == 1);
    }

    @Test
    public void test00224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00224");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property5 = localDateTime1.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime6 = property5.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField7 = property5.getField();
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime();
        boolean boolean10 = localDateTime8.isBefore((org.joda.time.ReadablePartial) localDateTime9);
        int[] intArray11 = localDateTime9.getValues();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime9.plusYears((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime();
        boolean boolean16 = localDateTime14.isBefore((org.joda.time.ReadablePartial) localDateTime15);
        int[] intArray17 = localDateTime15.getValues();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime9.withFields((org.joda.time.ReadablePartial) localDateTime15);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.minusMillis((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.minusSeconds((int) '#');
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.withWeekOfWeekyear(50);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime22.withMinuteOfHour((int) (byte) 0);
        int int27 = dateTimeField7.getMinimumValue((org.joda.time.ReadablePartial) localDateTime22);
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime();
        int int30 = localDateTime29.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime32 = localDateTime29.minusMonths((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.minusMonths((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property35 = localDateTime32.minuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone37);
        java.util.Locale locale40 = java.util.Locale.CHINESE;
        java.lang.String str41 = dateTimeZone37.getName((long) (short) 0, locale40);
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime(0L, dateTimeZone37);
        java.util.Locale locale44 = java.util.Locale.FRENCH;
        java.util.Set<java.lang.String> strSet45 = locale44.getUnicodeLocaleAttributes();
        java.lang.String str46 = locale44.getISO3Language();
        java.lang.String str47 = dateTimeZone37.getName(35271574L, locale44);
        int int48 = property35.getMaximumShortTextLength(locale44);
        java.lang.String str49 = dateTimeField7.getAsShortText((int) 'a', locale44);
        org.joda.time.LocalDateTime localDateTime52 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime53 = new org.joda.time.LocalDateTime();
        boolean boolean54 = localDateTime52.isBefore((org.joda.time.ReadablePartial) localDateTime53);
        org.joda.time.LocalDateTime localDateTime56 = localDateTime53.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property57 = localDateTime53.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime58 = property57.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField59 = property57.getField();
        long long61 = dateTimeField59.remainder((-1L));
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = dateTimeField59.getType();
        boolean boolean63 = dateTimeField59.isSupported();
        java.util.Locale locale64 = java.util.Locale.ROOT;
        java.lang.String str65 = locale64.getDisplayName();
        int int66 = dateTimeField59.getMaximumTextLength(locale64);
        // The following exception was thrown during execution in test generation
        try {
            long long67 = dateTimeField7.set(0L, "-01:00", locale64);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"-01:00\" for dayOfMonth is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[2022, 2, 11, 35283660]");
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(intArray17);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[2022, 2, 11, 35283660]");
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 22 + "'", int30 == 22);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "+00:00" + "'", str41, "+00:00");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "fra" + "'", str46, "fra");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "+00:00" + "'", str47, "+00:00");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2 + "'", int48 == 2);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "97" + "'", str49, "97");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 86399999L + "'", long61 == 86399999L);
        org.junit.Assert.assertNotNull(dateTimeFieldType62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
    }

    @Test
    public void test00225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00225");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property5 = localDateTime1.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime6 = property5.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField7 = property5.getField();
        long long9 = dateTimeField7.remainder((-1L));
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = dateTimeField7.getType();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minusMillis((int) (byte) 1);
        java.lang.String str17 = localDateTime16.toString();
        org.joda.time.DateTime dateTime18 = localDateTime16.toDateTime();
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.minusMillis((int) (byte) 1);
        java.lang.String str22 = localDateTime21.toString();
        org.joda.time.DateTime dateTime23 = localDateTime21.toDateTime();
        boolean boolean24 = dateTime18.isEqual((org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.Chronology chronology25 = dateTime23.getChronology();
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime((java.lang.Object) 35271574L, chronology25);
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime((long) 'u', chronology25);
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime(86399999L, chronology25);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.withWeekyear(5200);
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime();
        boolean boolean34 = localDateTime32.isBefore((org.joda.time.ReadablePartial) localDateTime33);
        int[] intArray35 = localDateTime33.getValues();
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray37 = dateTimeField7.set((org.joda.time.ReadablePartial) localDateTime30, (int) (byte) -1, intArray35, 47);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 47 for dayOfMonth must be in the range [1,28]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 86399999L + "'", long9 == 86399999L);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(localDateTime16);
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "2022-02-11T09:48:03.696" + "'", str17, "2022-02-11T09:48:03.696");
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(localDateTime21);
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "2022-02-11T09:48:03.696" + "'", str22, "2022-02-11T09:48:03.696");
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(intArray35);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[2022, 2, 11, 35283697]");
    }

    @Test
    public void test00226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00226");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("2022-02-11T09:47:59.470", strMap1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=2022-02-11t09:47:59.470");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00227");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.minusMillis((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.plusDays(0);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.plusMillis(22);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        int int8 = localDateTime6.get(dateTimeFieldType7);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime10 = localDateTime6.withWeekOfWeekyear((-120));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -120 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 6 + "'", int8 == 6);
    }

    @Test
    public void test00228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00228");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property5 = localDateTime1.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime6 = property5.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField7 = property5.getField();
        long long9 = dateTimeField7.remainder((-1L));
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = dateTimeField7.getType();
        org.joda.time.DurationField durationField11 = dateTimeField7.getDurationField();
        long long13 = dateTimeField7.remainder(1644572873292L);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 86399999L + "'", long9 == 86399999L);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 35273292L + "'", long13 == 35273292L);
    }

    @Test
    public void test00229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00229");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        int int2 = dateTimeZone0.getStandardOffset((long) (-100));
        java.util.TimeZone timeZone3 = dateTimeZone0.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        int int7 = dateTimeZone5.getStandardOffset((long) (-100));
        java.util.TimeZone timeZone8 = dateTimeZone5.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        boolean boolean10 = timeZone3.hasSameRules(timeZone8);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        java.lang.Object obj12 = timeZone8.clone();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(timeZone8);
        org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(obj12);
        org.junit.Assert.assertEquals(obj12.toString(), "java.util.SimpleTimeZone[id=Etc/UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj12), "java.util.SimpleTimeZone[id=Etc/UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj12), "java.util.SimpleTimeZone[id=Etc/UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]");
    }

    @Test
    public void test00230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00230");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.minusMillis((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.minusMillis((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.plusDays(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.weekyear();
        boolean boolean9 = localDateTime5.isSupported(dateTimeFieldType8);
        boolean boolean10 = localDateTime2.isEqual((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime5.minusSeconds(379);
        java.util.Locale locale16 = new java.util.Locale("", "weekyear");
        java.util.Set<java.lang.String> strSet17 = locale16.getUnicodeLocaleAttributes();
        java.util.Set<java.lang.String> strSet18 = locale16.getUnicodeLocaleAttributes();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str19 = localDateTime12.toString("11 (WEEKYEAR,fra)", locale16);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: W");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertEquals(locale16.toString(), "_WEEKYEAR");
        org.junit.Assert.assertNotNull(strSet17);
        org.junit.Assert.assertNotNull(strSet18);
    }

    @Test
    public void test00231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00231");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours(35274908);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Offset is too large");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00232");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property5 = localDateTime1.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime6 = property5.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField7 = property5.getField();
        long long9 = dateTimeField7.remainder((-1L));
        org.joda.time.DurationField durationField10 = dateTimeField7.getRangeDurationField();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.field.FieldUtils.verifyValueBounds(dateTimeField7, (-1), (int) (byte) 0, 38);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1 for dayOfMonth must be in the range [0,38]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 86399999L + "'", long9 == 86399999L);
        org.junit.Assert.assertNotNull(durationField10);
    }

    @Test
    public void test00233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00233");
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        int int8 = localDateTime7.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime7.minusMonths((int) (short) 0);
        org.joda.time.Chronology chronology11 = localDateTime10.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime((int) 'u', 28, (int) (short) -1, 1, 11, 2, (int) (short) 10, chronology11);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 28 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 22 + "'", int8 == 22);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(chronology11);
    }

    @Test
    public void test00234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00234");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("2022-02-11T09:47:49.888");
        int int3 = timeZone1.getOffset(822L);
        int int4 = timeZone1.getRawOffset();
        java.util.Locale locale7 = java.util.Locale.JAPAN;
        java.util.Locale locale8 = java.util.Locale.FRENCH;
        java.lang.String str9 = locale7.getDisplayCountry(locale8);
        java.util.Locale.Builder builder10 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder11 = builder10.clear();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone12);
        java.util.Locale locale15 = java.util.Locale.CHINESE;
        java.lang.String str16 = dateTimeZone12.getName((long) (short) 0, locale15);
        java.util.Locale.Builder builder17 = builder10.setLocale(locale15);
        java.lang.String str18 = locale8.getDisplayScript(locale15);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str19 = timeZone1.getDisplayName(true, 35279748, locale15);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal style: 35279748");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Japon" + "'", str9, "Japon");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+00:00" + "'", str16, "+00:00");
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
    }

    @Test
    public void test00235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00235");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property5 = localDateTime1.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime6 = property5.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField7 = property5.getField();
        long long9 = dateTimeField7.remainder((-1L));
        org.joda.time.DurationField durationField10 = dateTimeField7.getRangeDurationField();
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime();
        int int14 = localDateTime13.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime13.minusMonths((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.minusMonths((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property19 = localDateTime16.minuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone21);
        java.util.Locale locale24 = java.util.Locale.CHINESE;
        java.lang.String str25 = dateTimeZone21.getName((long) (short) 0, locale24);
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime(0L, dateTimeZone21);
        java.util.Locale locale28 = java.util.Locale.FRENCH;
        java.util.Set<java.lang.String> strSet29 = locale28.getUnicodeLocaleAttributes();
        java.lang.String str30 = locale28.getISO3Language();
        java.lang.String str31 = dateTimeZone21.getName(35271574L, locale28);
        int int32 = property19.getMaximumShortTextLength(locale28);
        // The following exception was thrown during execution in test generation
        try {
            long long33 = dateTimeField7.set(0L, "2022-02-11T09:48:04.189", locale28);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2022-02-11T09:48:04.189\" for dayOfMonth is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 86399999L + "'", long9 == 86399999L);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 22 + "'", int14 == 22);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "+00:00" + "'", str25, "+00:00");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "fra" + "'", str30, "fra");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "+00:00" + "'", str31, "+00:00");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2 + "'", int32 == 2);
    }

    @Test
    public void test00236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00236");
        int int1 = org.joda.time.field.FieldUtils.safeNegate((-1));
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 1 + "'", int1 == 1);
    }

    @Test
    public void test00237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00237");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.dayOfMonth();
        org.joda.time.LocalDateTime.Property property4 = localDateTime0.weekyear();
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.LocalDateTime localDateTime7 = localDateTime0.withPeriodAdded(readablePeriod5, (-100));
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField9 = localDateTime0.getField((int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 35");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime7);
    }

    @Test
    public void test00238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00238");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.LanguageRange[] languageRangeArray1 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList2 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList2, languageRangeArray1);
        java.util.Locale[] localeArray4 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList5 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList5, localeArray4);
        java.util.Locale locale7 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList2, (java.util.Collection<java.util.Locale>) localeList5);
        java.util.Locale.LanguageRange[] languageRangeArray8 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList9 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList9, languageRangeArray8);
        java.util.Locale[] localeArray11 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList12 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList12, localeArray11);
        java.util.Locale locale14 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList9, (java.util.Collection<java.util.Locale>) localeList12);
        java.util.Locale.FilteringMode filteringMode15 = null;
        java.util.List<java.util.Locale> localeList16 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList2, (java.util.Collection<java.util.Locale>) localeList12, filteringMode15);
        java.util.Locale locale17 = java.util.Locale.FRENCH;
        java.util.Set<java.lang.String> strSet18 = locale17.getUnicodeLocaleAttributes();
        java.lang.Object[] objArray19 = strSet18.toArray();
        java.util.Locale.FilteringMode filteringMode20 = java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList21 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList2, (java.util.Collection<java.lang.String>) strSet18, filteringMode20);
        java.util.Locale locale22 = java.util.Locale.ITALIAN;
        java.lang.String str23 = locale22.getDisplayCountry();
        boolean boolean24 = strSet18.equals((java.lang.Object) locale22);
        java.util.Locale.Builder builder25 = builder0.setLocale(locale22);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder27 = builder0.removeUnicodeLocaleAttribute("2022-02-11T09:47:57.542");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: 2022-02-11T09:47:57.542 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(languageRangeArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(localeArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(locale7);
        org.junit.Assert.assertNotNull(languageRangeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(localeArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(locale14);
        org.junit.Assert.assertNotNull(localeList16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet18);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[]");
        org.junit.Assert.assertTrue("'" + filteringMode20 + "' != '" + java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES + "'", filteringMode20.equals(java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList21);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "it");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(builder25);
    }

    @Test
    public void test00239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00239");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.yearOfCentury();
        org.joda.time.DurationFieldType durationFieldType1 = dateTimeFieldType0.getDurationType();
        java.lang.Class<?> wildcardClass2 = durationFieldType1.getClass();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(durationFieldType1);
        org.junit.Assert.assertNotNull(wildcardClass2);
    }

    @Test
    public void test00240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00240");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (-1));
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusDays(22);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime7 = localDateTime3.withDate((-100), 49, 924);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 49 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
    }

    @Test
    public void test00241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00241");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        int int2 = dateTimeZone0.getStandardOffset((long) (-100));
        java.util.TimeZone timeZone3 = dateTimeZone0.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        int int7 = dateTimeZone5.getStandardOffset((long) (-100));
        java.util.TimeZone timeZone8 = dateTimeZone5.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        int int12 = dateTimeZone10.getStandardOffset((long) (-100));
        java.util.TimeZone timeZone13 = dateTimeZone10.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone13);
        boolean boolean15 = timeZone8.hasSameRules(timeZone13);
        boolean boolean16 = timeZone3.hasSameRules(timeZone8);
        java.util.TimeZone.setDefault(timeZone8);
        boolean boolean18 = timeZone8.useDaylightTime();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(timeZone8);
        org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(timeZone13);
        org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test00242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00242");
        java.lang.String[] strArray4 = new java.lang.String[] { "fra", "", "+00:00", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet5 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet5, strArray4);
        java.lang.Object[] objArray7 = strSet5.toArray();
        boolean boolean8 = strSet5.isEmpty();
        java.util.Locale.LanguageRange[] languageRangeArray9 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList10 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList10, languageRangeArray9);
        java.util.Locale[] localeArray12 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList13 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList13, localeArray12);
        java.util.Locale locale15 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList10, (java.util.Collection<java.util.Locale>) localeList13);
        boolean boolean16 = strSet5.retainAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList10);
        java.util.Iterator<java.lang.String> strItor17 = strSet5.iterator();
        boolean boolean18 = strSet5.isEmpty();
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[fra, , +00:00, hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[fra, , +00:00, hi!]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(languageRangeArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(localeArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(locale15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(strItor17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
    }

    @Test
    public void test00243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00243");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("2022-02-11T09:47:49.888");
        int int3 = timeZone1.getOffset(822L);
        boolean boolean4 = timeZone1.useDaylightTime();
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test00244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00244");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        int int1 = localDateTime0.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime3 = localDateTime0.minusMonths((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.minusMonths((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.plusWeeks(22);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withCenturyOfEra((-100));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -100 for centuryOfEra must be in the range [0,2922789]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 22 + "'", int1 == 22);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
    }

    @Test
    public void test00245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00245");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime1.plusMinutes((int) '#');
        org.joda.time.LocalDateTime localDateTime8 = localDateTime1.minusMinutes((int) (short) 1);
        org.joda.time.LocalDateTime.Property property9 = localDateTime8.weekOfWeekyear();
        int int10 = property9.get();
        int int11 = property9.getMaximumValue();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 6 + "'", int10 == 6);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 52 + "'", int11 == 52);
    }

    @Test
    public void test00246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00246");
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("2022-02-11T09:47:53.883");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=2022-02-11t09:47:53.883");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00247");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.minusMillis((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.plusDays(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.withField(dateTimeFieldType5, 0);
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime();
        boolean boolean10 = localDateTime8.isBefore((org.joda.time.ReadablePartial) localDateTime9);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime9.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime9.plusMinutes((int) '#');
        org.joda.time.LocalDateTime localDateTime16 = localDateTime9.minusMinutes((int) (short) 1);
        boolean boolean17 = localDateTime7.isAfter((org.joda.time.ReadablePartial) localDateTime16);
        org.joda.time.LocalDateTime.Property property18 = localDateTime7.secondOfMinute();
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = property18.getFieldType();
        int int20 = property18.getMaximumValue();
        org.joda.time.DateTimeField dateTimeField21 = property18.getField();
        org.joda.time.ReadablePartial readablePartial22 = null;
        java.util.Locale locale26 = new java.util.Locale("11", "weekyear", "fra");
        java.lang.String str27 = locale26.getDisplayName();
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime();
        boolean boolean30 = localDateTime28.isBefore((org.joda.time.ReadablePartial) localDateTime29);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime29.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property33 = localDateTime29.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime34 = property33.withMinimumValue();
        java.util.Locale locale35 = java.util.Locale.UK;
        java.lang.String str36 = property33.getAsShortText(locale35);
        java.lang.String str37 = locale26.getDisplayScript(locale35);
        java.util.Set<java.lang.String> strSet38 = locale26.getUnicodeLocaleKeys();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str39 = dateTimeField21.getAsShortText(readablePartial22, locale26);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(localDateTime7);
// flaky:         org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 59 + "'", int20 == 59);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertEquals(locale26.toString(), "11_WEEKYEAR_fra");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "11 (WEEKYEAR,fra)" + "'", str27, "11 (WEEKYEAR,fra)");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "11" + "'", str36, "11");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(strSet38);
    }

    @Test
    public void test00248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00248");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property5 = localDateTime1.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime6 = property5.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField7 = property5.getField();
        long long10 = dateTimeField7.addWrapField((long) 6, (int) (byte) 0);
        java.lang.String str12 = dateTimeField7.getAsShortText((long) (byte) 0);
        long long14 = dateTimeField7.roundHalfCeiling(874L);
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime();
        boolean boolean17 = localDateTime15.isBefore((org.joda.time.ReadablePartial) localDateTime16);
        int[] intArray18 = localDateTime16.getValues();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime16.plusYears((int) (byte) -1);
        int int21 = localDateTime20.getDayOfYear();
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime();
        boolean boolean25 = localDateTime23.isBefore((org.joda.time.ReadablePartial) localDateTime24);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime24.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property28 = localDateTime24.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime29 = property28.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField30 = property28.getField();
        long long33 = dateTimeField30.addWrapField((long) (short) 1, (int) (byte) 100);
        int int35 = dateTimeField30.getMinimumValue((-1L));
        org.joda.time.ReadablePartial readablePartial36 = null;
        int[] intArray39 = new int[] { 11 };
        int[] intArray41 = dateTimeField30.addWrapPartial(readablePartial36, 100, intArray39, 0);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray43 = dateTimeField7.addWrapField((org.joda.time.ReadablePartial) localDateTime20, (int) 'u', intArray39, 35279748);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 117");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 6L + "'", long10 == 6L);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "1" + "'", str12, "1");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(intArray18);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[2022, 2, 11, 35285148]");
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 42 + "'", int21 == 42);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 604800001L + "'", long33 == 604800001L);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[11]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[11]");
    }

    @Test
    public void test00249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00249");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.millisOfDay();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime0.plusMonths((int) (byte) 1);
        org.joda.time.LocalDateTime.Property property6 = localDateTime0.weekyear();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime();
        boolean boolean9 = localDateTime7.isBefore((org.joda.time.ReadablePartial) localDateTime8);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime8.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property12 = localDateTime8.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime13 = property12.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField14 = property12.getField();
        long long17 = dateTimeField14.addWrapField((long) 6, (int) (byte) 0);
        java.lang.String str19 = dateTimeField14.getAsShortText((long) (byte) 0);
        java.lang.String str21 = dateTimeField14.getAsShortText((-116L));
        long long23 = dateTimeField14.roundCeiling((long) 11);
        java.util.Locale locale28 = new java.util.Locale("11", "weekyear", "fra");
        java.lang.String str29 = locale28.getDisplayName();
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime();
        boolean boolean32 = localDateTime30.isBefore((org.joda.time.ReadablePartial) localDateTime31);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime31.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property35 = localDateTime31.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime36 = property35.withMinimumValue();
        java.util.Locale locale37 = java.util.Locale.UK;
        java.lang.String str38 = property35.getAsShortText(locale37);
        java.lang.String str39 = locale28.getDisplayScript(locale37);
        java.lang.String str40 = dateTimeField14.getAsShortText((long) 715, locale37);
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime();
        boolean boolean43 = localDateTime41.isBefore((org.joda.time.ReadablePartial) localDateTime42);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime42.plusSeconds((int) (byte) 100);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter46 = null;
        java.lang.String str47 = localDateTime42.toString(dateTimeFormatter46);
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        org.joda.time.LocalDateTime.Property property49 = localDateTime42.property(dateTimeFieldType48);
        java.util.Locale locale50 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str51 = dateTimeField14.getAsText((org.joda.time.ReadablePartial) localDateTime42, locale50);
        java.lang.String str52 = property6.getAsText(locale50);
        org.joda.time.LocalDateTime localDateTime53 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime55 = localDateTime53.minusMillis((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime57 = localDateTime55.plusDays(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType58 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDateTime localDateTime60 = localDateTime55.withField(dateTimeFieldType58, 0);
        org.joda.time.LocalDateTime localDateTime61 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime62 = new org.joda.time.LocalDateTime();
        boolean boolean63 = localDateTime61.isBefore((org.joda.time.ReadablePartial) localDateTime62);
        org.joda.time.LocalDateTime localDateTime65 = localDateTime62.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime67 = localDateTime62.plusMinutes((int) '#');
        org.joda.time.LocalDateTime localDateTime69 = localDateTime62.minusMinutes((int) (short) 1);
        boolean boolean70 = localDateTime60.isAfter((org.joda.time.ReadablePartial) localDateTime69);
        org.joda.time.LocalDateTime.Property property71 = localDateTime60.secondOfMinute();
        org.joda.time.DateTimeFieldType dateTimeFieldType72 = property71.getFieldType();
        org.joda.time.LocalDateTime localDateTime73 = property71.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime74 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime75 = new org.joda.time.LocalDateTime();
        boolean boolean76 = localDateTime74.isBefore((org.joda.time.ReadablePartial) localDateTime75);
        org.joda.time.LocalDateTime localDateTime78 = localDateTime75.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime80 = localDateTime75.plusMinutes((int) '#');
        org.joda.time.LocalDateTime localDateTime82 = localDateTime75.minusMinutes((int) (short) 1);
        org.joda.time.ReadableDuration readableDuration83 = null;
        org.joda.time.LocalDateTime localDateTime85 = localDateTime75.withDurationAdded(readableDuration83, (int) (short) 100);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter86 = null;
        java.lang.String str87 = localDateTime75.toString(dateTimeFormatter86);
        boolean boolean88 = localDateTime73.isAfter((org.joda.time.ReadablePartial) localDateTime75);
        int int89 = localDateTime73.getMinuteOfHour();
        org.joda.time.LocalDateTime localDateTime91 = localDateTime73.plusWeeks(49);
        org.joda.time.LocalDateTime localDateTime93 = localDateTime91.withYearOfCentury(10);
        boolean boolean94 = locale50.equals((java.lang.Object) localDateTime91);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 6L + "'", long17 == 6L);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "1" + "'", str19, "1");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "31" + "'", str21, "31");
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 86400000L + "'", long23 == 86400000L);
        org.junit.Assert.assertEquals(locale28.toString(), "11_WEEKYEAR_fra");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "11 (WEEKYEAR,fra)" + "'", str29, "11 (WEEKYEAR,fra)");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "11" + "'", str38, "11");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "1" + "'", str40, "1");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(localDateTime45);
// flaky:         org.junit.Assert.assertEquals("'" + str47 + "' != '" + "2022-02-11T09:48:05.300" + "'", str47, "2022-02-11T09:48:05.300");
        org.junit.Assert.assertNotNull(dateTimeFieldType48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "11" + "'", str51, "11");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "2022" + "'", str52, "2022");
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(dateTimeFieldType58);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertNotNull(localDateTime69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(property71);
        org.junit.Assert.assertNotNull(dateTimeFieldType72);
        org.junit.Assert.assertNotNull(localDateTime73);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(localDateTime78);
        org.junit.Assert.assertNotNull(localDateTime80);
        org.junit.Assert.assertNotNull(localDateTime82);
        org.junit.Assert.assertNotNull(localDateTime85);
// flaky:         org.junit.Assert.assertEquals("'" + str87 + "' != '" + "2022-02-11T09:48:05.300" + "'", str87, "2022-02-11T09:48:05.300");
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int89 + "' != '" + 48 + "'", int89 == 48);
        org.junit.Assert.assertNotNull(localDateTime91);
        org.junit.Assert.assertNotNull(localDateTime93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
    }

    @Test
    public void test00250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00250");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property5 = localDateTime1.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime6 = property5.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField7 = property5.getField();
        int int8 = dateTimeField7.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime();
        int int10 = localDateTime9.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime9.minusMonths((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.minusMonths((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.plusWeeks(22);
        java.util.Locale locale18 = java.util.Locale.JAPANESE;
        java.lang.String str19 = dateTimeField7.getAsShortText((org.joda.time.ReadablePartial) localDateTime16, 22, locale18);
        long long22 = dateTimeField7.add((long) 2022, 47);
        java.util.Locale locale24 = java.util.Locale.getDefault();
        java.lang.String str25 = dateTimeField7.getAsText((long) 2022, locale24);
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.minusMillis((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.plusDays(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDateTime localDateTime33 = localDateTime28.withField(dateTimeFieldType31, 0);
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime();
        boolean boolean36 = localDateTime34.isBefore((org.joda.time.ReadablePartial) localDateTime35);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime35.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime35.plusMinutes((int) '#');
        org.joda.time.LocalDateTime localDateTime42 = localDateTime35.minusMinutes((int) (short) 1);
        boolean boolean43 = localDateTime33.isAfter((org.joda.time.ReadablePartial) localDateTime42);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime42.withMillisOfSecond(50);
        int[] intArray47 = new int[] {};
        org.joda.time.tz.NameProvider nameProvider49 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.LocalDateTime localDateTime50 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime51 = new org.joda.time.LocalDateTime();
        boolean boolean52 = localDateTime50.isBefore((org.joda.time.ReadablePartial) localDateTime51);
        org.joda.time.LocalDateTime localDateTime54 = localDateTime51.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property55 = localDateTime51.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime56 = property55.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField57 = property55.getField();
        int int58 = dateTimeField57.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime59 = new org.joda.time.LocalDateTime();
        int int60 = localDateTime59.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime62 = localDateTime59.minusMonths((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime64 = localDateTime62.minusMonths((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime66 = localDateTime64.plusWeeks(22);
        java.util.Locale locale68 = java.util.Locale.JAPANESE;
        java.lang.String str69 = dateTimeField57.getAsShortText((org.joda.time.ReadablePartial) localDateTime66, 22, locale68);
        java.lang.String str72 = nameProvider49.getName(locale68, "11", "Etc/UTC");
        boolean boolean73 = locale68.hasExtensions();
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray74 = dateTimeField7.set((org.joda.time.ReadablePartial) localDateTime45, 924, intArray47, "2022-02-11T09:48:04.350", locale68);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2022-02-11T09:48:04.350\" for dayOfMonth is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 31 + "'", int8 == 31);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 22 + "'", int10 == 22);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "22" + "'", str19, "22");
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 4060802022L + "'", long22 == 4060802022L);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "1" + "'", str25, "1");
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(dateTimeFieldType31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[]");
        org.junit.Assert.assertNotNull(nameProvider49);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 31 + "'", int58 == 31);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 22 + "'", int60 == 22);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "22" + "'", str69, "22");
        org.junit.Assert.assertNull(str72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
    }

    @Test
    public void test00251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00251");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        int[] intArray3 = localDateTime1.getValues();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.plusYears((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        boolean boolean8 = localDateTime6.isBefore((org.joda.time.ReadablePartial) localDateTime7);
        int[] intArray9 = localDateTime7.getValues();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime1.withFields((org.joda.time.ReadablePartial) localDateTime7);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusMillis((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.minusSeconds((int) '#');
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.withWeekOfWeekyear(50);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime14.withMinuteOfHour((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime14.minusMonths((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime14.withYearOfCentury(0);
        int int23 = localDateTime14.getDayOfWeek();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime25 = localDateTime14.withSecondOfMinute((-1));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(intArray3);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[2022, 2, 11, 35285496]");
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(intArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[2022, 2, 11, 35285496]");
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 5 + "'", int23 == 5);
    }

    @Test
    public void test00252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00252");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale.Builder builder3 = builder0.setLanguage("");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder5 = builder3.setVariant("2022-02-11T09:48:03.871");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed variant: 2022-02-11T09:48:03.871 [at index 5]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
    }

    @Test
    public void test00253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00253");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.dayOfMonth();
        org.joda.time.LocalDateTime.Property property4 = localDateTime0.weekyear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime6 = localDateTime0.withDayOfWeek(22);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 22 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(property4);
    }

    @Test
    public void test00254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00254");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        int int2 = dateTimeZone0.getStandardOffset((long) (-100));
        java.util.TimeZone timeZone3 = dateTimeZone0.toTimeZone();
        int int4 = timeZone3.getRawOffset();
        timeZone3.setRawOffset(50);
        java.lang.String str7 = timeZone3.getID();
        int int8 = timeZone3.getDSTSavings();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Etc/UTC" + "'", str7, "Etc/UTC");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test00255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00255");
        org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.parse("2022-02-11T09:47:54.999");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withDayOfWeek(0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime1);
    }

    @Test
    public void test00256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00256");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property5 = localDateTime1.dayOfMonth();
        java.util.Locale locale6 = java.util.Locale.FRENCH;
        java.util.Set<java.lang.String> strSet7 = locale6.getUnicodeLocaleAttributes();
        java.lang.String str8 = locale6.getVariant();
        java.lang.String str9 = property5.getAsText(locale6);
        org.joda.time.ReadableInstant readableInstant10 = null;
        int int11 = property5.getDifference(readableInstant10);
        int int12 = property5.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime13 = property5.withMaximumValue();
        int int14 = property5.getMaximumValue();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "11" + "'", str9, "11");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 28 + "'", int14 == 28);
    }

    @Test
    public void test00257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00257");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.parse("CA");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"CA\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00258");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.field.FieldUtils.verifyValueBounds(dateTimeFieldType0, 20, 222, 52);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00259");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property5 = localDateTime1.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime6 = property5.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField7 = property5.getField();
        long long10 = dateTimeField7.addWrapField((long) (short) 1, (int) (byte) 100);
        int int12 = dateTimeField7.getLeapAmount(0L);
        long long14 = dateTimeField7.roundHalfFloor((long) (-1));
        long long16 = dateTimeField7.roundFloor((long) 222);
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.minusMillis((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.plusDays(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime19.withField(dateTimeFieldType22, 0);
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime();
        boolean boolean27 = localDateTime25.isBefore((org.joda.time.ReadablePartial) localDateTime26);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime26.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime26.plusMinutes((int) '#');
        org.joda.time.LocalDateTime localDateTime33 = localDateTime26.minusMinutes((int) (short) 1);
        boolean boolean34 = localDateTime24.isAfter((org.joda.time.ReadablePartial) localDateTime33);
        org.joda.time.LocalDateTime.Property property35 = localDateTime24.secondOfMinute();
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = property35.getFieldType();
        org.joda.time.LocalDateTime localDateTime37 = property35.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime();
        boolean boolean40 = localDateTime38.isBefore((org.joda.time.ReadablePartial) localDateTime39);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime39.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime44 = localDateTime39.plusMinutes((int) '#');
        org.joda.time.LocalDateTime localDateTime46 = localDateTime39.minusMinutes((int) (short) 1);
        org.joda.time.ReadableDuration readableDuration47 = null;
        org.joda.time.LocalDateTime localDateTime49 = localDateTime39.withDurationAdded(readableDuration47, (int) (short) 100);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter50 = null;
        java.lang.String str51 = localDateTime39.toString(dateTimeFormatter50);
        boolean boolean52 = localDateTime37.isAfter((org.joda.time.ReadablePartial) localDateTime39);
        int int53 = localDateTime37.getMinuteOfHour();
        int int54 = dateTimeField7.getMinimumValue((org.joda.time.ReadablePartial) localDateTime37);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime56 = localDateTime37.withMinuteOfHour(35282145);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35282145 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 604800001L + "'", long10 == 604800001L);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(localDateTime49);
// flaky:         org.junit.Assert.assertEquals("'" + str51 + "' != '" + "2022-02-11T09:48:06.120" + "'", str51, "2022-02-11T09:48:06.120");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int53 + "' != '" + 48 + "'", int53 == 48);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
    }

    @Test
    public void test00260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00260");
        org.joda.time.tz.NameProvider nameProvider0 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale1 = java.util.Locale.JAPAN;
        java.lang.String str4 = nameProvider0.getShortName(locale1, "und", "");
        org.joda.time.DateTimeZone.setNameProvider(nameProvider0);
        java.util.TimeZone timeZone6 = null;
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forTimeZone(timeZone6);
        int int9 = dateTimeZone7.getOffsetFromLocal((long) (-1));
        java.util.TimeZone timeZone10 = dateTimeZone7.toTimeZone();
        long long12 = dateTimeZone7.convertUTCToLocal((long) 2);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((java.lang.Object) nameProvider0, dateTimeZone7);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.tz.DefaultNameProvider");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(nameProvider0);
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ja_JP");
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(timeZone10);
        org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 2L + "'", long12 == 2L);
    }

    @Test
    public void test00261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00261");
        java.util.Locale locale3 = new java.util.Locale("2022-02-11T09:47:58.721", "2022-02-11T09:48:04.167", "2022-02-11T09:47:59.470");
        java.lang.Object obj4 = locale3.clone();
        org.junit.Assert.assertEquals(locale3.toString(), "2022-02-11t09:47:58.721_2022-02-11T09:48:04.167_2022-02-11T09:47:59.470");
        org.junit.Assert.assertNotNull(obj4);
        org.junit.Assert.assertEquals(obj4.toString(), "2022-02-11t09:47:58.721_2022-02-11T09:48:04.167_2022-02-11T09:47:59.470");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj4), "2022-02-11t09:47:58.721_2022-02-11T09:48:04.167_2022-02-11T09:47:59.470");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj4), "2022-02-11t09:47:58.721_2022-02-11T09:48:04.167_2022-02-11T09:47:59.470");
    }

    @Test
    public void test00262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00262");
        java.util.List<java.util.Locale.LanguageRange> languageRangeList0 = null;
        java.util.Locale locale3 = new java.util.Locale("", "weekyear");
        java.util.Set<java.lang.String> strSet4 = locale3.getUnicodeLocaleAttributes();
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.String> strList5 = java.util.Locale.filterTags(languageRangeList0, (java.util.Collection<java.lang.String>) strSet4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(locale3.toString(), "_WEEKYEAR");
        org.junit.Assert.assertNotNull(strSet4);
    }

    @Test
    public void test00263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00263");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        int int2 = dateTimeZone0.getStandardOffset((long) (-100));
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime(dateTimeZone0);
        java.util.TimeZone timeZone4 = dateTimeZone0.toTimeZone();
        int int6 = timeZone4.getOffset(86400000L);
        java.util.Locale locale11 = new java.util.Locale("", "weekyear");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str12 = timeZone4.getDisplayName(false, 4, locale11);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal style: 4");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(timeZone4);
        org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertEquals(locale11.toString(), "_WEEKYEAR");
    }

    @Test
    public void test00264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00264");
        int int2 = org.joda.time.field.FieldUtils.safeMultiply(50, 10);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 500 + "'", int2 == 500);
    }

    @Test
    public void test00265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00265");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime1.plusMinutes((int) '#');
        org.joda.time.LocalDateTime localDateTime8 = localDateTime1.minusMinutes((int) (short) 1);
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.LocalDateTime localDateTime11 = localDateTime1.withDurationAdded(readableDuration9, (int) (short) 100);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime1.minusWeeks((int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime15 = localDateTime1.withHourOfDay(59);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 59 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
    }

    @Test
    public void test00266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00266");
        long long2 = org.joda.time.field.FieldUtils.safeMultiply((long) 'a', 11);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1067L + "'", long2 == 1067L);
    }

    @Test
    public void test00267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00267");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (-1));
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusDays(22);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withMinuteOfHour((-120));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -120 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
    }

    @Test
    public void test00268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00268");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("2022-02-11T09:47:52.376", 0.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=2022-02-11t09:47:52.376");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00269");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder4 = builder1.setExtension('4', "2022-02-11T09:47:51.496");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed extension key: 4 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
    }

    @Test
    public void test00270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00270");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (-1));
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusDays(22);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime5 = localDateTime1.withCenturyOfEra((-3600000));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -3600000 for centuryOfEra must be in the range [0,2922789]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
    }

    @Test
    public void test00271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00271");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.getDefault();
        java.util.Locale locale4 = null;
        java.lang.String str5 = dateTimeZone2.getName((long) (short) 10, locale4);
        long long7 = dateTimeZone1.getMillisKeepLocal(dateTimeZone2, (long) 874);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        long long10 = dateTimeZone2.getMillisKeepLocal(dateTimeZone8, (long) '4');
        int int12 = dateTimeZone2.getOffsetFromLocal((long) 83);
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime(0L, dateTimeZone2);
        java.util.TimeZone timeZone14 = dateTimeZone2.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.getDefault();
        java.util.Locale locale18 = null;
        java.lang.String str19 = dateTimeZone16.getName((long) (short) 10, locale18);
        long long21 = dateTimeZone15.getMillisKeepLocal(dateTimeZone16, (long) 874);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.getDefault();
        long long24 = dateTimeZone16.getMillisKeepLocal(dateTimeZone22, (long) '4');
        java.lang.String str26 = dateTimeZone22.getName((long) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime((java.lang.Object) dateTimeZone2, dateTimeZone22);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.tz.FixedDateTimeZone");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00" + "'", str5, "+00:00");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 874L + "'", long7 == 874L);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 52L + "'", long10 == 52L);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(timeZone14);
        org.junit.Assert.assertEquals(timeZone14.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+00:00" + "'", str19, "+00:00");
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 874L + "'", long21 == 874L);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 52L + "'", long24 == 52L);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "+00:00" + "'", str26, "+00:00");
    }

    @Test
    public void test00272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00272");
        java.util.Locale locale0 = java.util.Locale.FRENCH;
        java.util.Set<java.lang.String> strSet1 = locale0.getUnicodeLocaleAttributes();
        java.lang.String str2 = locale0.getVariant();
        java.util.Set<java.lang.String> strSet3 = locale0.getUnicodeLocaleKeys();
        boolean boolean4 = strSet3.isEmpty();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
    }

    @Test
    public void test00273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00273");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) 'x');
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusMillis((int) (byte) 1);
        java.lang.String str5 = localDateTime4.toString();
        org.joda.time.DateTime dateTime6 = localDateTime4.toDateTime();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.minusMillis((int) (byte) 1);
        java.lang.String str10 = localDateTime9.toString();
        org.joda.time.DateTime dateTime11 = localDateTime9.toDateTime();
        boolean boolean12 = dateTime6.isEqual((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.minusMillis((int) (byte) 1);
        java.lang.String str16 = localDateTime15.toString();
        org.joda.time.DateTime dateTime17 = localDateTime15.toDateTime();
        boolean boolean18 = dateTime6.isEqual((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.Instant instant19 = dateTime17.toInstant();
        org.joda.time.DateTimeZone dateTimeZone20 = instant19.getZone();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime((java.lang.Object) 'x', dateTimeZone20);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: java.lang.Character");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(localDateTime4);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "2022-02-11T09:48:06.788" + "'", str5, "2022-02-11T09:48:06.788");
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(localDateTime9);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "2022-02-11T09:48:06.788" + "'", str10, "2022-02-11T09:48:06.788");
        org.junit.Assert.assertNotNull(dateTime11);
// flaky:         org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(localDateTime15);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "2022-02-11T09:48:06.788" + "'", str16, "2022-02-11T09:48:06.788");
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(instant19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
    }

    @Test
    public void test00274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00274");
        long long2 = org.joda.time.field.FieldUtils.safeMultiply(35283490L, 86399999L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 3048493500716510L + "'", long2 == 3048493500716510L);
    }

    @Test
    public void test00275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00275");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        int int2 = dateTimeZone0.getStandardOffset((long) (-100));
        java.util.TimeZone timeZone3 = dateTimeZone0.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        int int7 = dateTimeZone5.getStandardOffset((long) (-100));
        java.util.TimeZone timeZone8 = dateTimeZone5.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        boolean boolean10 = timeZone3.hasSameRules(timeZone8);
        java.lang.String str11 = timeZone8.getDisplayName();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(timeZone8);
        org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Coordinated Universal Time" + "'", str11, "Coordinated Universal Time");
    }

    @Test
    public void test00276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00276");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale locale2 = builder0.build();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder4 = builder0.removeUnicodeLocaleAttribute("2022-02-11T09:47:53.537");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: 2022-02-11T09:47:53.537 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "");
    }

    @Test
    public void test00277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00277");
        long long2 = org.joda.time.field.FieldUtils.safeMultiply(86400000L, 5200);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 449280000000L + "'", long2 == 449280000000L);
    }

    @Test
    public void test00278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00278");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        java.util.Locale locale2 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.setDefault(category0, locale2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Can't set default locale to NULL");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale1);
// flaky:         org.junit.Assert.assertEquals(locale1.toString(), "");
    }

    @Test
    public void test00279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00279");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property5 = localDateTime1.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime6 = property5.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField7 = property5.getField();
        long long9 = dateTimeField7.remainder((-1L));
        java.util.Locale locale11 = java.util.Locale.UK;
        java.lang.String str12 = dateTimeField7.getAsShortText((long) 22, locale11);
        int int15 = dateTimeField7.getDifference((long) (-3600000), (long) (short) 1);
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime();
        boolean boolean18 = localDateTime16.isBefore((org.joda.time.ReadablePartial) localDateTime17);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime17.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime17.plusMinutes((int) '#');
        org.joda.time.LocalDateTime localDateTime24 = localDateTime17.minusMinutes((int) (short) 1);
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.LocalDateTime localDateTime27 = localDateTime17.withDurationAdded(readableDuration25, (int) (short) 100);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray28 = localDateTime17.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime();
        boolean boolean32 = localDateTime30.isBefore((org.joda.time.ReadablePartial) localDateTime31);
        int[] intArray33 = localDateTime31.getValues();
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray35 = dateTimeField7.add((org.joda.time.ReadablePartial) localDateTime17, (-3600000), intArray33, 49);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -3600000");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 86399999L + "'", long9 == 86399999L);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "1" + "'", str12, "1");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray28);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(intArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[2022, 2, 11, 35286955]");
    }

    @Test
    public void test00280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00280");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property5 = localDateTime1.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime6 = property5.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField7 = property5.getField();
        int int10 = dateTimeField7.getDifference(1L, 86399999L);
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime();
        int int12 = localDateTime11.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime11.minusMonths((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minusMonths((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.plusWeeks(22);
        org.joda.time.LocalDateTime.Property property19 = localDateTime18.dayOfMonth();
        java.util.Locale locale24 = new java.util.Locale("11", "weekyear", "fra");
        java.lang.String str25 = locale24.getDisplayName();
        java.lang.String str26 = dateTimeField7.getAsShortText((org.joda.time.ReadablePartial) localDateTime18, (int) (byte) 1, locale24);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime18.withDayOfMonth(10);
        int int29 = localDateTime28.getMonthOfYear();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 22 + "'", int12 == 22);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertEquals(locale24.toString(), "11_WEEKYEAR_fra");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "11 (WEEKYEAR,fra)" + "'", str25, "11 (WEEKYEAR,fra)");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "1" + "'", str26, "1");
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 7 + "'", int29 == 7);
    }

    @Test
    public void test00281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00281");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.minusMillis((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.plusDays(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.withField(dateTimeFieldType5, 0);
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime();
        boolean boolean10 = localDateTime8.isBefore((org.joda.time.ReadablePartial) localDateTime9);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime9.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime9.plusMinutes((int) '#');
        org.joda.time.LocalDateTime localDateTime16 = localDateTime9.minusMinutes((int) (short) 1);
        boolean boolean17 = localDateTime7.isAfter((org.joda.time.ReadablePartial) localDateTime16);
        org.joda.time.LocalDateTime.Property property18 = localDateTime7.secondOfMinute();
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = property18.getFieldType();
        org.joda.time.LocalDateTime localDateTime20 = property18.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime();
        boolean boolean23 = localDateTime21.isBefore((org.joda.time.ReadablePartial) localDateTime22);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime22.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime22.plusMinutes((int) '#');
        org.joda.time.LocalDateTime localDateTime29 = localDateTime22.minusMinutes((int) (short) 1);
        org.joda.time.ReadableDuration readableDuration30 = null;
        org.joda.time.LocalDateTime localDateTime32 = localDateTime22.withDurationAdded(readableDuration30, (int) (short) 100);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter33 = null;
        java.lang.String str34 = localDateTime22.toString(dateTimeFormatter33);
        boolean boolean35 = localDateTime20.isAfter((org.joda.time.ReadablePartial) localDateTime22);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter36 = null;
        java.lang.String str37 = localDateTime20.toString(dateTimeFormatter36);
        int int38 = localDateTime20.getMonthOfYear();
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime32);
// flaky:         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "2022-02-11T09:48:07.237" + "'", str34, "2022-02-11T09:48:07.237");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str37 + "' != '" + "-2022-02-11T09:48:07.000" + "'", str37, "-2022-02-11T09:48:07.000");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2 + "'", int38 == 2);
    }

    @Test
    public void test00282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00282");
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone8);
        java.util.Locale locale11 = java.util.Locale.CHINESE;
        java.lang.String str12 = dateTimeZone8.getName((long) (short) 0, locale11);
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.minusMillis((int) (byte) 1);
        java.lang.String str16 = localDateTime15.toString();
        org.joda.time.DateTime dateTime17 = localDateTime15.toDateTime();
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.minusMillis((int) (byte) 1);
        java.lang.String str21 = localDateTime20.toString();
        org.joda.time.DateTime dateTime22 = localDateTime20.toDateTime();
        boolean boolean23 = dateTime17.isEqual((org.joda.time.ReadableInstant) dateTime22);
        int int24 = dateTimeZone8.getOffset((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str26 = dateTimeFieldType25.toString();
        java.lang.String str27 = dateTimeFieldType25.toString();
        boolean boolean28 = dateTime17.isSupported(dateTimeFieldType25);
        org.joda.time.Chronology chronology29 = dateTime17.getChronology();
        org.joda.time.Chronology chronology30 = dateTime17.getChronology();
        boolean boolean31 = dateTimeFieldType7.isSupported(chronology30);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime(59, (int) (short) -1, 1969, 117, (int) (byte) 10, 50, (int) (byte) 100, chronology30);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 117 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00" + "'", str12, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime15);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "2022-02-11T09:48:07.286" + "'", str16, "2022-02-11T09:48:07.286");
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(localDateTime20);
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "2022-02-11T09:48:07.286" + "'", str21, "2022-02-11T09:48:07.286");
        org.junit.Assert.assertNotNull(dateTime22);
// flaky:         org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "weekyear" + "'", str26, "weekyear");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "weekyear" + "'", str27, "weekyear");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
    }

    @Test
    public void test00283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00283");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        int int2 = dateTimeZone0.getStandardOffset((long) (-100));
        java.util.TimeZone timeZone3 = dateTimeZone0.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        int int7 = dateTimeZone5.getStandardOffset((long) (-100));
        java.util.TimeZone timeZone8 = dateTimeZone5.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        int int12 = dateTimeZone10.getStandardOffset((long) (-100));
        java.util.TimeZone timeZone13 = dateTimeZone10.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone13);
        boolean boolean15 = timeZone8.hasSameRules(timeZone13);
        boolean boolean16 = timeZone3.hasSameRules(timeZone8);
        timeZone3.setRawOffset(5200);
        int int19 = timeZone3.getDSTSavings();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(timeZone8);
        org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(timeZone13);
        org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
    }

    @Test
    public void test00284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00284");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale.Builder builder3 = builder0.setLanguage("");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder5 = builder0.addUnicodeLocaleAttribute("2022-02-11T09:47:49.888");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: 2022-02-11T09:47:49.888 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
    }

    @Test
    public void test00285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00285");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property5 = localDateTime1.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime6 = property5.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField7 = property5.getField();
        int int8 = dateTimeField7.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime();
        int int10 = localDateTime9.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime9.minusMonths((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.minusMonths((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.plusWeeks(22);
        java.util.Locale locale18 = java.util.Locale.JAPANESE;
        java.lang.String str19 = dateTimeField7.getAsShortText((org.joda.time.ReadablePartial) localDateTime16, 22, locale18);
        int int21 = dateTimeField7.getLeapAmount((long) (byte) 1);
        long long23 = dateTimeField7.roundFloor(202200L);
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime();
        boolean boolean26 = localDateTime24.isBefore((org.joda.time.ReadablePartial) localDateTime25);
        int[] intArray27 = localDateTime25.getValues();
        org.joda.time.LocalDateTime localDateTime29 = localDateTime25.plusYears((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime();
        boolean boolean32 = localDateTime30.isBefore((org.joda.time.ReadablePartial) localDateTime31);
        int[] intArray33 = localDateTime31.getValues();
        org.joda.time.LocalDateTime localDateTime34 = localDateTime25.withFields((org.joda.time.ReadablePartial) localDateTime31);
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.forOffsetMillis((int) 'u');
        long long40 = dateTimeZone36.convertLocalToUTC((long) 1, false, 822L);
        java.util.TimeZone timeZone41 = dateTimeZone36.toTimeZone();
        int int43 = dateTimeZone36.getOffset(10L);
        org.joda.time.DateTime dateTime44 = localDateTime25.toDateTime(dateTimeZone36);
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime47 = localDateTime45.minusMillis((int) (byte) 1);
        java.lang.String str48 = localDateTime47.toString();
        org.joda.time.LocalDateTime localDateTime50 = localDateTime47.minusMonths((int) 'a');
        org.joda.time.LocalDateTime localDateTime52 = localDateTime50.minusMinutes(22);
        org.joda.time.LocalDateTime localDateTime53 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime54 = new org.joda.time.LocalDateTime();
        boolean boolean55 = localDateTime53.isBefore((org.joda.time.ReadablePartial) localDateTime54);
        org.joda.time.LocalDateTime localDateTime57 = localDateTime54.plusSeconds((int) (byte) 100);
        boolean boolean58 = localDateTime52.isBefore((org.joda.time.ReadablePartial) localDateTime54);
        boolean boolean59 = localDateTime25.isBefore((org.joda.time.ReadablePartial) localDateTime54);
        int[] intArray63 = new int[] { 500, (byte) -1 };
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray65 = dateTimeField7.add((org.joda.time.ReadablePartial) localDateTime54, 35274908, intArray63, 59);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 31 + "'", int8 == 31);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 22 + "'", int10 == 22);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "22" + "'", str19, "22");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(intArray27);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[2022, 2, 11, 35287685]");
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(intArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[2022, 2, 11, 35287685]");
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + (-116L) + "'", long40 == (-116L));
        org.junit.Assert.assertNotNull(timeZone41);
        org.junit.Assert.assertEquals(timeZone41.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 117 + "'", int43 == 117);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(localDateTime47);
// flaky:         org.junit.Assert.assertEquals("'" + str48 + "' != '" + "2022-02-11T09:48:07.684" + "'", str48, "2022-02-11T09:48:07.684");
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
// flaky:         org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[500, -1]");
    }

    @Test
    public void test00286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00286");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.minusMillis((int) (byte) 1);
        java.lang.String str3 = localDateTime2.toString();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.minusMonths((int) 'a');
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusMinutes(22);
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime();
        boolean boolean10 = localDateTime8.isBefore((org.joda.time.ReadablePartial) localDateTime9);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime9.plusSeconds((int) (byte) 100);
        boolean boolean13 = localDateTime7.isBefore((org.joda.time.ReadablePartial) localDateTime9);
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime();
        int int15 = localDateTime14.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime14.minusMonths((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.minusMonths((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.plusYears(10);
        boolean boolean22 = localDateTime7.isAfter((org.joda.time.ReadablePartial) localDateTime21);
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime();
        boolean boolean25 = localDateTime23.isBefore((org.joda.time.ReadablePartial) localDateTime24);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime24.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property28 = localDateTime24.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime();
        boolean boolean31 = localDateTime29.isBefore((org.joda.time.ReadablePartial) localDateTime30);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime30.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property34 = localDateTime30.dayOfMonth();
        java.util.Locale locale35 = java.util.Locale.FRENCH;
        java.util.Set<java.lang.String> strSet36 = locale35.getUnicodeLocaleAttributes();
        java.lang.String str37 = locale35.getVariant();
        java.lang.String str38 = property34.getAsText(locale35);
        java.lang.String str39 = property28.getAsShortText(locale35);
        org.joda.time.LocalDateTime localDateTime40 = property28.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime localDateTime41 = property28.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime42 = property28.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime44 = localDateTime42.withYear((-1));
        int int45 = localDateTime42.getDayOfMonth();
        boolean boolean46 = localDateTime21.isBefore((org.joda.time.ReadablePartial) localDateTime42);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime48 = localDateTime21.withDayOfYear(35279748);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35279748 for dayOfYear must be in the range [1,366]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime2);
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "2022-02-11T09:48:07.865" + "'", str3, "2022-02-11T09:48:07.865");
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 22 + "'", int15 == 22);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "11" + "'", str38, "11");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "11" + "'", str39, "11");
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 28 + "'", int45 == 28);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test00287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00287");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        int int1 = localDateTime0.getYearOfCentury();
        int int2 = localDateTime0.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.minusMillis((int) (byte) -1);
        org.joda.time.DateTime dateTime5 = localDateTime0.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        java.util.Locale locale9 = null;
        java.lang.String str10 = dateTimeZone7.getName((long) (short) 10, locale9);
        long long12 = dateTimeZone6.getMillisKeepLocal(dateTimeZone7, (long) 874);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.getDefault();
        long long15 = dateTimeZone7.getMillisKeepLocal(dateTimeZone13, (long) '4');
        int int17 = dateTimeZone7.getOffsetFromLocal((long) 83);
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.minusMillis((int) (byte) 1);
        java.lang.String str21 = localDateTime20.toString();
        org.joda.time.DateTime dateTime22 = localDateTime20.toDateTime();
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.minusMillis((int) (byte) 1);
        java.lang.String str26 = localDateTime25.toString();
        org.joda.time.DateTime dateTime27 = localDateTime25.toDateTime();
        boolean boolean28 = dateTime22.isEqual((org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.minusMillis((int) (byte) 1);
        java.lang.String str32 = localDateTime31.toString();
        org.joda.time.DateTime dateTime33 = localDateTime31.toDateTime();
        boolean boolean34 = dateTime22.isEqual((org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime37 = localDateTime35.minusMillis((int) (byte) 1);
        java.lang.String str38 = localDateTime37.toString();
        org.joda.time.DateTime dateTime39 = localDateTime37.toDateTime();
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime42 = localDateTime40.minusMillis((int) (byte) 1);
        java.lang.String str43 = localDateTime42.toString();
        org.joda.time.DateTime dateTime44 = localDateTime42.toDateTime();
        boolean boolean45 = dateTime39.isEqual((org.joda.time.ReadableInstant) dateTime44);
        boolean boolean46 = dateTime22.isEqual((org.joda.time.ReadableInstant) dateTime44);
        int int47 = dateTimeZone7.getOffset((org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.DateTimeZone dateTimeZone48 = dateTime44.getZone();
        long long49 = dateTime44.getMillis();
        org.joda.time.LocalDateTime localDateTime51 = new org.joda.time.LocalDateTime((long) (-1));
        org.joda.time.LocalDateTime.Property property52 = localDateTime51.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.getDefault();
        java.util.Locale locale56 = null;
        java.lang.String str57 = dateTimeZone54.getName((long) (short) 10, locale56);
        long long59 = dateTimeZone53.getMillisKeepLocal(dateTimeZone54, (long) 874);
        org.joda.time.DateTimeZone dateTimeZone60 = org.joda.time.DateTimeZone.getDefault();
        long long62 = dateTimeZone54.getMillisKeepLocal(dateTimeZone60, (long) '4');
        int int64 = dateTimeZone54.getOffsetFromLocal((long) 83);
        org.joda.time.LocalDateTime localDateTime65 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime67 = localDateTime65.minusMillis((int) (byte) 1);
        java.lang.String str68 = localDateTime67.toString();
        org.joda.time.DateTime dateTime69 = localDateTime67.toDateTime();
        org.joda.time.LocalDateTime localDateTime70 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime72 = localDateTime70.minusMillis((int) (byte) 1);
        java.lang.String str73 = localDateTime72.toString();
        org.joda.time.DateTime dateTime74 = localDateTime72.toDateTime();
        boolean boolean75 = dateTime69.isEqual((org.joda.time.ReadableInstant) dateTime74);
        org.joda.time.LocalDateTime localDateTime76 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime78 = localDateTime76.minusMillis((int) (byte) 1);
        java.lang.String str79 = localDateTime78.toString();
        org.joda.time.DateTime dateTime80 = localDateTime78.toDateTime();
        boolean boolean81 = dateTime69.isEqual((org.joda.time.ReadableInstant) dateTime80);
        org.joda.time.LocalDateTime localDateTime82 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime84 = localDateTime82.minusMillis((int) (byte) 1);
        java.lang.String str85 = localDateTime84.toString();
        org.joda.time.DateTime dateTime86 = localDateTime84.toDateTime();
        org.joda.time.LocalDateTime localDateTime87 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime89 = localDateTime87.minusMillis((int) (byte) 1);
        java.lang.String str90 = localDateTime89.toString();
        org.joda.time.DateTime dateTime91 = localDateTime89.toDateTime();
        boolean boolean92 = dateTime86.isEqual((org.joda.time.ReadableInstant) dateTime91);
        boolean boolean93 = dateTime69.isEqual((org.joda.time.ReadableInstant) dateTime91);
        int int94 = dateTimeZone54.getOffset((org.joda.time.ReadableInstant) dateTime91);
        org.joda.time.DateTimeZone dateTimeZone95 = dateTime91.getZone();
        int int96 = property52.getDifference((org.joda.time.ReadableInstant) dateTime91);
        boolean boolean97 = dateTime44.isAfter((org.joda.time.ReadableInstant) dateTime91);
        int int98 = dateTime5.compareTo((org.joda.time.ReadableInstant) dateTime44);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 22 + "'", int1 == 22);
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 7 + "'", int2 == 7);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+00:00" + "'", str10, "+00:00");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 874L + "'", long12 == 874L);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 52L + "'", long15 == 52L);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(localDateTime20);
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "2022-02-11T09:48:07.958" + "'", str21, "2022-02-11T09:48:07.958");
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(localDateTime25);
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "2022-02-11T09:48:07.958" + "'", str26, "2022-02-11T09:48:07.958");
        org.junit.Assert.assertNotNull(dateTime27);
// flaky:         org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(localDateTime31);
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "2022-02-11T09:48:07.958" + "'", str32, "2022-02-11T09:48:07.958");
        org.junit.Assert.assertNotNull(dateTime33);
// flaky:         org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(localDateTime37);
// flaky:         org.junit.Assert.assertEquals("'" + str38 + "' != '" + "2022-02-11T09:48:07.958" + "'", str38, "2022-02-11T09:48:07.958");
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(localDateTime42);
// flaky:         org.junit.Assert.assertEquals("'" + str43 + "' != '" + "2022-02-11T09:48:07.958" + "'", str43, "2022-02-11T09:48:07.958");
        org.junit.Assert.assertNotNull(dateTime44);
// flaky:         org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone48);
// flaky:         org.junit.Assert.assertTrue("'" + long49 + "' != '" + 1644572887958L + "'", long49 == 1644572887958L);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "+00:00" + "'", str57, "+00:00");
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 874L + "'", long59 == 874L);
        org.junit.Assert.assertNotNull(dateTimeZone60);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 52L + "'", long62 == 52L);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(localDateTime67);
// flaky:         org.junit.Assert.assertEquals("'" + str68 + "' != '" + "2022-02-11T09:48:07.959" + "'", str68, "2022-02-11T09:48:07.959");
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(localDateTime72);
// flaky:         org.junit.Assert.assertEquals("'" + str73 + "' != '" + "2022-02-11T09:48:07.959" + "'", str73, "2022-02-11T09:48:07.959");
        org.junit.Assert.assertNotNull(dateTime74);
// flaky:         org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(localDateTime78);
// flaky:         org.junit.Assert.assertEquals("'" + str79 + "' != '" + "2022-02-11T09:48:07.959" + "'", str79, "2022-02-11T09:48:07.959");
        org.junit.Assert.assertNotNull(dateTime80);
// flaky:         org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(localDateTime84);
// flaky:         org.junit.Assert.assertEquals("'" + str85 + "' != '" + "2022-02-11T09:48:07.959" + "'", str85, "2022-02-11T09:48:07.959");
        org.junit.Assert.assertNotNull(dateTime86);
        org.junit.Assert.assertNotNull(localDateTime89);
// flaky:         org.junit.Assert.assertEquals("'" + str90 + "' != '" + "2022-02-11T09:48:07.959" + "'", str90, "2022-02-11T09:48:07.959");
        org.junit.Assert.assertNotNull(dateTime91);
// flaky:         org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
// flaky:         org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 0 + "'", int94 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone95);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + (-2719) + "'", int96 == (-2719));
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + 1 + "'", int98 == 1);
    }

    @Test
    public void test00288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00288");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder3 = builder1.setLanguage("2022-02-11T09:48:00.361");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed language: 2022-02-11T09:48:00.361 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
    }

    @Test
    public void test00289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00289");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property5 = localDateTime1.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime6 = property5.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField7 = property5.getField();
        long long9 = dateTimeField7.remainder((-1L));
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = dateTimeField7.getType();
        boolean boolean11 = dateTimeField7.isSupported();
        java.util.Locale locale12 = java.util.Locale.ROOT;
        java.lang.String str13 = locale12.getDisplayName();
        int int14 = dateTimeField7.getMaximumTextLength(locale12);
        java.util.Locale locale15 = java.util.Locale.GERMAN;
        java.lang.String str16 = locale12.getDisplayCountry(locale15);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str18 = locale15.getExtension('#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed extension key: #");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 86399999L + "'", long9 == 86399999L);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "de");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
    }

    @Test
    public void test00290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00290");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime1.plusMinutes((int) '#');
        org.joda.time.LocalDateTime localDateTime8 = localDateTime1.minusMinutes((int) (short) 1);
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.LocalDateTime localDateTime11 = localDateTime1.withDurationAdded(readableDuration9, (int) (short) 100);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = null;
        java.lang.String str13 = localDateTime1.toString(dateTimeFormatter12);
        int int14 = localDateTime1.getWeekyear();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime11);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "2022-02-11T09:48:08.085" + "'", str13, "2022-02-11T09:48:08.085");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2022 + "'", int14 == 2022);
    }

    @Test
    public void test00291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00291");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime();
        boolean boolean4 = localDateTime2.isBefore((org.joda.time.ReadablePartial) localDateTime3);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property7 = localDateTime3.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime8 = property7.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField9 = property7.getField();
        int int12 = dateTimeField9.getDifference(1L, 86399999L);
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime();
        int int14 = localDateTime13.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime13.minusMonths((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.minusMonths((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.plusWeeks(22);
        org.joda.time.LocalDateTime.Property property21 = localDateTime20.dayOfMonth();
        java.util.Locale locale26 = new java.util.Locale("11", "weekyear", "fra");
        java.lang.String str27 = locale26.getDisplayName();
        java.lang.String str28 = dateTimeField9.getAsShortText((org.joda.time.ReadablePartial) localDateTime20, (int) (byte) 1, locale26);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder29 = builder1.setLocale(locale26);
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed language: 11 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 22 + "'", int14 == 22);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertEquals(locale26.toString(), "11_WEEKYEAR_fra");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "11 (WEEKYEAR,fra)" + "'", str27, "11 (WEEKYEAR,fra)");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "1" + "'", str28, "1");
    }

    @Test
    public void test00292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00292");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property5 = localDateTime1.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime6 = property5.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField7 = property5.getField();
        org.joda.time.LocalDateTime localDateTime8 = property5.getLocalDateTime();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime10 = localDateTime8.withWeekOfWeekyear(0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(localDateTime8);
    }

    @Test
    public void test00293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00293");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusYears(2);
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.minusMillis((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.plusDays(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime6.withField(dateTimeFieldType9, 0);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime();
        boolean boolean14 = localDateTime12.isBefore((org.joda.time.ReadablePartial) localDateTime13);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime13.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime13.plusMinutes((int) '#');
        org.joda.time.LocalDateTime localDateTime20 = localDateTime13.minusMinutes((int) (short) 1);
        boolean boolean21 = localDateTime11.isAfter((org.joda.time.ReadablePartial) localDateTime20);
        org.joda.time.LocalDateTime.Property property22 = localDateTime11.secondOfMinute();
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = property22.getFieldType();
        org.joda.time.LocalDateTime localDateTime24 = property22.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime();
        boolean boolean27 = localDateTime25.isBefore((org.joda.time.ReadablePartial) localDateTime26);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime26.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime26.plusMinutes((int) '#');
        org.joda.time.LocalDateTime localDateTime33 = localDateTime26.minusMinutes((int) (short) 1);
        org.joda.time.ReadableDuration readableDuration34 = null;
        org.joda.time.LocalDateTime localDateTime36 = localDateTime26.withDurationAdded(readableDuration34, (int) (short) 100);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter37 = null;
        java.lang.String str38 = localDateTime26.toString(dateTimeFormatter37);
        boolean boolean39 = localDateTime24.isAfter((org.joda.time.ReadablePartial) localDateTime26);
        org.joda.time.LocalDateTime.Property property40 = localDateTime24.hourOfDay();
        org.joda.time.LocalDateTime localDateTime41 = localDateTime3.withFields((org.joda.time.ReadablePartial) localDateTime24);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime43 = localDateTime41.withMinuteOfHour((int) 'a');
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 97 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime36);
// flaky:         org.junit.Assert.assertEquals("'" + str38 + "' != '" + "2022-02-11T09:48:08.142" + "'", str38, "2022-02-11T09:48:08.142");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(localDateTime41);
    }

    @Test
    public void test00294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00294");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime1.plusMinutes((int) '#');
        org.joda.time.LocalDateTime localDateTime8 = localDateTime1.minusMinutes((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.minusMillis((int) (byte) 1);
        java.lang.String str12 = localDateTime11.toString();
        org.joda.time.DateTime dateTime13 = localDateTime11.toDateTime();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minusMillis((int) (byte) 1);
        java.lang.String str17 = localDateTime16.toString();
        org.joda.time.DateTime dateTime18 = localDateTime16.toDateTime();
        boolean boolean19 = dateTime13.isEqual((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.minusMillis((int) (byte) 1);
        java.lang.String str23 = localDateTime22.toString();
        org.joda.time.DateTime dateTime24 = localDateTime22.toDateTime();
        boolean boolean25 = dateTime13.isEqual((org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone26);
        java.util.Locale locale29 = java.util.Locale.CHINESE;
        java.lang.String str30 = dateTimeZone26.getName((long) (short) 0, locale29);
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.minusMillis((int) (byte) 1);
        java.lang.String str34 = localDateTime33.toString();
        org.joda.time.DateTime dateTime35 = localDateTime33.toDateTime();
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime38 = localDateTime36.minusMillis((int) (byte) 1);
        java.lang.String str39 = localDateTime38.toString();
        org.joda.time.DateTime dateTime40 = localDateTime38.toDateTime();
        boolean boolean41 = dateTime35.isEqual((org.joda.time.ReadableInstant) dateTime40);
        int int42 = dateTimeZone26.getOffset((org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str44 = dateTimeFieldType43.toString();
        java.lang.String str45 = dateTimeFieldType43.toString();
        boolean boolean46 = dateTime35.isSupported(dateTimeFieldType43);
        org.joda.time.Chronology chronology47 = dateTime35.getChronology();
        boolean boolean48 = dateTime13.equals((java.lang.Object) dateTime35);
        org.joda.time.DateTime dateTime49 = localDateTime8.toDateTime((org.joda.time.ReadableInstant) dateTime13);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime51 = localDateTime8.withHourOfDay(48);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 48 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime11);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "2022-02-11T09:48:08.185" + "'", str12, "2022-02-11T09:48:08.185");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(localDateTime16);
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "2022-02-11T09:48:08.185" + "'", str17, "2022-02-11T09:48:08.185");
        org.junit.Assert.assertNotNull(dateTime18);
// flaky:         org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(localDateTime22);
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "2022-02-11T09:48:08.185" + "'", str23, "2022-02-11T09:48:08.185");
        org.junit.Assert.assertNotNull(dateTime24);
// flaky:         org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "+00:00" + "'", str30, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime33);
// flaky:         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "2022-02-11T09:48:08.186" + "'", str34, "2022-02-11T09:48:08.186");
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(localDateTime38);
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "2022-02-11T09:48:08.186" + "'", str39, "2022-02-11T09:48:08.186");
        org.junit.Assert.assertNotNull(dateTime40);
// flaky:         org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "weekyear" + "'", str44, "weekyear");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "weekyear" + "'", str45, "weekyear");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(chronology47);
// flaky:         org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(dateTime49);
    }

    @Test
    public void test00295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00295");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property5 = localDateTime1.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime6 = property5.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField7 = property5.getField();
        long long9 = dateTimeField7.remainder((-1L));
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = dateTimeField7.getType();
        long long13 = dateTimeField7.getDifferenceAsLong(52L, (long) 10);
        long long16 = dateTimeField7.getDifferenceAsLong(0L, (long) 83);
        // The following exception was thrown during execution in test generation
        try {
            long long19 = dateTimeField7.set(715L, "2022-02-11T09:47:54.353");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2022-02-11T09:47:54.353\" for dayOfMonth is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 86399999L + "'", long9 == 86399999L);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
    }

    @Test
    public void test00296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00296");
        long long2 = org.joda.time.field.FieldUtils.safeMultiply(0L, (-100));
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
    }

    @Test
    public void test00297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00297");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        int[] intArray3 = localDateTime1.getValues();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.plusYears((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        boolean boolean8 = localDateTime6.isBefore((org.joda.time.ReadablePartial) localDateTime7);
        int[] intArray9 = localDateTime7.getValues();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime1.withFields((org.joda.time.ReadablePartial) localDateTime7);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusMillis((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.minusSeconds((int) '#');
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.withWeekOfWeekyear(50);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime14.withMinuteOfHour((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime14.minusMonths((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime14.withYearOfCentury(0);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType24 = localDateTime14.getFieldType((int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 10");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(intArray3);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[2022, 2, 11, 35288378]");
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(intArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[2022, 2, 11, 35288378]");
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
    }

    @Test
    public void test00298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00298");
        int int3 = org.joda.time.field.FieldUtils.getWrappedValue(6, (int) '#', 117);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 89 + "'", int3 == 89);
    }

    @Test
    public void test00299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00299");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property5 = localDateTime1.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime6 = property5.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField7 = property5.getField();
        long long10 = dateTimeField7.addWrapField((long) 6, (int) (byte) 0);
        boolean boolean11 = dateTimeField7.isSupported();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 6L + "'", long10 == 6L);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test00300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00300");
        java.util.Locale locale1 = new java.util.Locale("2022-02-11T09:47:50.109");
        java.lang.Object obj2 = locale1.clone();
        org.junit.Assert.assertEquals(locale1.toString(), "2022-02-11t09:47:50.109");
        org.junit.Assert.assertNotNull(obj2);
        org.junit.Assert.assertEquals(obj2.toString(), "2022-02-11t09:47:50.109");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj2), "2022-02-11t09:47:50.109");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj2), "2022-02-11t09:47:50.109");
    }

    @Test
    public void test00301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00301");
        java.util.Locale locale0 = java.util.Locale.FRANCE;
        java.util.Locale locale1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str2 = locale0.getDisplayLanguage(locale1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr_FR");
    }

    @Test
    public void test00302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00302");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder1.addUnicodeLocaleAttribute("Japon");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder5 = builder1.setVariant("2022-02-11T09:48:06.762");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed variant: 2022-02-11T09:48:06.762 [at index 5]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
    }

    @Test
    public void test00303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00303");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property5 = localDateTime1.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime6 = property5.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField7 = property5.getField();
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime();
        boolean boolean10 = localDateTime8.isBefore((org.joda.time.ReadablePartial) localDateTime9);
        int[] intArray11 = localDateTime9.getValues();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime9.plusYears((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime();
        boolean boolean16 = localDateTime14.isBefore((org.joda.time.ReadablePartial) localDateTime15);
        int[] intArray17 = localDateTime15.getValues();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime9.withFields((org.joda.time.ReadablePartial) localDateTime15);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.minusMillis((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.minusSeconds((int) '#');
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.withWeekOfWeekyear(50);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime22.withMinuteOfHour((int) (byte) 0);
        int int27 = dateTimeField7.getMinimumValue((org.joda.time.ReadablePartial) localDateTime22);
        java.lang.String str28 = dateTimeField7.toString();
        long long30 = dateTimeField7.roundHalfFloor(1L);
        // The following exception was thrown during execution in test generation
        try {
            long long33 = dateTimeField7.set(1814400000L, 1969);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1969 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[2022, 2, 11, 35288790]");
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(intArray17);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[2022, 2, 11, 35288790]");
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "DateTimeField[dayOfMonth]" + "'", str28, "DateTimeField[dayOfMonth]");
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
    }

    @Test
    public void test00304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00304");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        int int2 = dateTimeZone0.getStandardOffset((long) (-100));
        java.util.TimeZone timeZone3 = dateTimeZone0.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        int int7 = dateTimeZone5.getStandardOffset((long) (-100));
        java.util.TimeZone timeZone8 = dateTimeZone5.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        int int12 = dateTimeZone10.getStandardOffset((long) (-100));
        java.util.TimeZone timeZone13 = dateTimeZone10.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone13);
        boolean boolean15 = timeZone8.hasSameRules(timeZone13);
        boolean boolean16 = timeZone3.hasSameRules(timeZone8);
        java.lang.String str17 = timeZone3.getID();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(timeZone3);
// flaky:         org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Temps universel coordonn\351");
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(timeZone8);
// flaky:         org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "Temps universel coordonn\351");
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(timeZone13);
// flaky:         org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "Temps universel coordonn\351");
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Etc/UTC" + "'", str17, "Etc/UTC");
    }

    @Test
    public void test00305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00305");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        int int2 = dateTimeZone0.getStandardOffset((long) (-100));
        java.util.TimeZone timeZone3 = dateTimeZone0.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        int int7 = dateTimeZone5.getStandardOffset((long) (-100));
        java.util.TimeZone timeZone8 = dateTimeZone5.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        boolean boolean10 = timeZone3.hasSameRules(timeZone8);
        int int11 = timeZone8.getDSTSavings();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(timeZone3);
// flaky:         org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Temps universel coordonn\351");
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(timeZone8);
// flaky:         org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "Temps universel coordonn\351");
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test00306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00306");
        int int2 = org.joda.time.field.FieldUtils.safeAdd((int) 'x', 5200);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 5320 + "'", int2 == 5320);
    }

    @Test
    public void test00307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00307");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        int int1 = localDateTime0.getYearOfCentury();
        int int2 = localDateTime0.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.minusMillis((int) (byte) -1);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime6 = localDateTime0.withDayOfMonth(5320);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 5320 for dayOfMonth must be in the range [1,28]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 22 + "'", int1 == 22);
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 9 + "'", int2 == 9);
        org.junit.Assert.assertNotNull(localDateTime4);
    }

    @Test
    public void test00308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00308");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        int int2 = dateTimeZone0.getStandardOffset((long) (-100));
        java.util.TimeZone timeZone3 = dateTimeZone0.toTimeZone();
        int int4 = timeZone3.getRawOffset();
        int int5 = timeZone3.getRawOffset();
        java.lang.Object obj6 = timeZone3.clone();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(timeZone3);
// flaky:         org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Temps universel coordonn\351");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertEquals(obj6.toString(), "java.util.SimpleTimeZone[id=Etc/UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "java.util.SimpleTimeZone[id=Etc/UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "java.util.SimpleTimeZone[id=Etc/UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]");
    }

    @Test
    public void test00309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00309");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone0);
        java.util.Locale locale3 = java.util.Locale.CHINESE;
        java.lang.String str4 = dateTimeZone0.getName((long) (short) 0, locale3);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusMillis((int) (byte) 1);
        java.lang.String str8 = localDateTime7.toString();
        org.joda.time.DateTime dateTime9 = localDateTime7.toDateTime();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusMillis((int) (byte) 1);
        java.lang.String str13 = localDateTime12.toString();
        org.joda.time.DateTime dateTime14 = localDateTime12.toDateTime();
        boolean boolean15 = dateTime9.isEqual((org.joda.time.ReadableInstant) dateTime14);
        int int16 = dateTimeZone0.getOffset((org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.minusMillis((int) (byte) 1);
        java.lang.String str20 = localDateTime19.toString();
        org.joda.time.DateTime dateTime21 = localDateTime19.toDateTime();
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.minusMillis((int) (byte) 1);
        java.lang.String str25 = localDateTime24.toString();
        org.joda.time.DateTime dateTime26 = localDateTime24.toDateTime();
        boolean boolean27 = dateTime21.isEqual((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.dayOfYear();
        int int29 = dateTime26.get(dateTimeFieldType28);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.monthOfYear();
        boolean boolean31 = dateTime26.isSupported(dateTimeFieldType30);
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str33 = dateTimeFieldType32.toString();
        java.lang.String str34 = dateTimeFieldType32.toString();
        int int35 = dateTime26.get(dateTimeFieldType32);
        boolean boolean36 = dateTime9.isEqual((org.joda.time.ReadableInstant) dateTime26);
        long long37 = dateTime9.getMillis();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00" + "'", str4, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "2022-02-11T09:48:09.139" + "'", str8, "2022-02-11T09:48:09.139");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(localDateTime12);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "2022-02-11T09:48:09.139" + "'", str13, "2022-02-11T09:48:09.139");
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(localDateTime19);
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "2022-02-11T09:48:09.139" + "'", str20, "2022-02-11T09:48:09.139");
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(localDateTime24);
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "2022-02-11T09:48:09.139" + "'", str25, "2022-02-11T09:48:09.139");
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 42 + "'", int29 == 42);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "weekyear" + "'", str33, "weekyear");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "weekyear" + "'", str34, "weekyear");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2022 + "'", int35 == 2022);
// flaky:         org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
// flaky:         org.junit.Assert.assertTrue("'" + long37 + "' != '" + 1644572889139L + "'", long37 == 1644572889139L);
    }

    @Test
    public void test00310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00310");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property5 = localDateTime1.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime6 = property5.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField7 = property5.getField();
        int int10 = dateTimeField7.getDifference(1L, 86399999L);
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime();
        int int12 = localDateTime11.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime11.minusMonths((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minusMonths((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.plusWeeks(22);
        org.joda.time.LocalDateTime.Property property19 = localDateTime18.dayOfMonth();
        java.util.Locale locale24 = new java.util.Locale("11", "weekyear", "fra");
        java.lang.String str25 = locale24.getDisplayName();
        java.lang.String str26 = dateTimeField7.getAsShortText((org.joda.time.ReadablePartial) localDateTime18, (int) (byte) 1, locale24);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.field.FieldUtils.verifyValueBounds(dateTimeField7, (int) '#', 50, 222);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35 for dayOfMonth must be in the range [50,222]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 22 + "'", int12 == 22);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertEquals(locale24.toString(), "11_WEEKYEAR_fra");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "11 (WEEKYEAR,fra)" + "'", str25, "11 (WEEKYEAR,fra)");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "1" + "'", str26, "1");
    }

    @Test
    public void test00311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00311");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        int int2 = dateTimeZone0.getStandardOffset((long) (-100));
        java.util.TimeZone timeZone3 = dateTimeZone0.toTimeZone();
        int int4 = timeZone3.getDSTSavings();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(timeZone3);
// flaky:         org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Temps universel coordonn\351");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
    }

    @Test
    public void test00312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00312");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        int int2 = dateTimeZone0.getStandardOffset((long) (-100));
        java.util.TimeZone timeZone3 = dateTimeZone0.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        int int7 = dateTimeZone5.getStandardOffset((long) (-100));
        java.util.TimeZone timeZone8 = dateTimeZone5.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        int int12 = dateTimeZone10.getStandardOffset((long) (-100));
        java.util.TimeZone timeZone13 = dateTimeZone10.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone13);
        boolean boolean15 = timeZone8.hasSameRules(timeZone13);
        boolean boolean16 = timeZone3.hasSameRules(timeZone8);
        int int18 = timeZone8.getOffset((long) 6);
        java.time.ZoneId zoneId19 = timeZone8.toZoneId();
        java.util.TimeZone timeZone20 = java.util.TimeZone.getTimeZone(zoneId19);
        java.util.TimeZone timeZone21 = java.util.TimeZone.getTimeZone(zoneId19);
        timeZone21.setID("22");
        boolean boolean24 = timeZone21.useDaylightTime();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(timeZone3);
// flaky:         org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Temps universel coordonn\351");
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(timeZone8);
// flaky:         org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "Temps universel coordonn\351");
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(timeZone13);
// flaky:         org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "Temps universel coordonn\351");
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(zoneId19);
        org.junit.Assert.assertNotNull(timeZone20);
// flaky:         org.junit.Assert.assertEquals(timeZone20.getDisplayName(), "Temps universel coordonn\351");
        org.junit.Assert.assertNotNull(timeZone21);
        org.junit.Assert.assertEquals(timeZone21.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test00313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00313");
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("6");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=6");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00314");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Locale[] localeArray3 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList4 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList4, localeArray3);
        java.util.Locale locale6 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList4);
        java.util.Locale.LanguageRange[] languageRangeArray7 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList8 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList8, languageRangeArray7);
        java.util.Locale[] localeArray10 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList11 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList11, localeArray10);
        java.util.Locale locale13 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList8, (java.util.Collection<java.util.Locale>) localeList11);
        java.util.Locale.FilteringMode filteringMode14 = null;
        java.util.List<java.util.Locale> localeList15 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList11, filteringMode14);
        java.util.Locale locale16 = java.util.Locale.FRENCH;
        java.util.Set<java.lang.String> strSet17 = locale16.getUnicodeLocaleAttributes();
        java.lang.Object[] objArray18 = strSet17.toArray();
        java.util.Locale.FilteringMode filteringMode19 = java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList20 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet17, filteringMode19);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.getDefault();
        int int23 = dateTimeZone21.getStandardOffset((long) (-100));
        java.util.TimeZone timeZone24 = dateTimeZone21.toTimeZone();
        int int25 = timeZone24.getRawOffset();
        timeZone24.setRawOffset(50);
        java.lang.String str28 = timeZone24.getID();
        boolean boolean29 = strSet17.equals((java.lang.Object) timeZone24);
        timeZone24.setID("2022-02-11T09:47:57.489");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str34 = timeZone24.getDisplayName(false, 500);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal style: 500");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localeArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(locale6);
        org.junit.Assert.assertNotNull(languageRangeArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(localeArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(locale13);
        org.junit.Assert.assertNotNull(localeList15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet17);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[]");
        org.junit.Assert.assertTrue("'" + filteringMode19 + "' != '" + java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES + "'", filteringMode19.equals(java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(timeZone24);
        org.junit.Assert.assertEquals(timeZone24.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Etc/UTC" + "'", str28, "Etc/UTC");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test00315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00315");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.minusMillis((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.plusDays(0);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.plusMillis(22);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        int int8 = localDateTime6.get(dateTimeFieldType7);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField10 = localDateTime6.getField((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: -1");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 6 + "'", int8 == 6);
    }

    @Test
    public void test00316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00316");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forID("2022-02-11T09:47:58.398");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The datetime zone id '2022-02-11T09:47:58.398' is not recognised");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00317");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("+00:00");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=+00:00");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00318");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.minusMillis((int) (byte) 1);
        java.lang.String str3 = localDateTime2.toString();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.minusMonths((int) 'a');
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusMinutes(22);
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime();
        boolean boolean10 = localDateTime8.isBefore((org.joda.time.ReadablePartial) localDateTime9);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime9.plusSeconds((int) (byte) 100);
        boolean boolean13 = localDateTime7.isBefore((org.joda.time.ReadablePartial) localDateTime9);
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime();
        int int15 = localDateTime14.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime14.minusMonths((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.minusMonths((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.plusYears(10);
        boolean boolean22 = localDateTime7.isAfter((org.joda.time.ReadablePartial) localDateTime21);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime24 = localDateTime21.withMonthOfYear((-2022));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -2022 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime2);
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "2022-02-11T09:48:09.738" + "'", str3, "2022-02-11T09:48:09.738");
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 22 + "'", int15 == 22);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test00319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00319");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        int int2 = dateTimeZone0.getStandardOffset((long) (-100));
        java.util.TimeZone timeZone3 = dateTimeZone0.toTimeZone();
        java.lang.Object obj4 = timeZone3.clone();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(timeZone3);
// flaky:         org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Temps universel coordonn\351");
        org.junit.Assert.assertNotNull(obj4);
        org.junit.Assert.assertEquals(obj4.toString(), "java.util.SimpleTimeZone[id=Etc/UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj4), "java.util.SimpleTimeZone[id=Etc/UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj4), "java.util.SimpleTimeZone[id=Etc/UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]");
    }

    @Test
    public void test00320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00320");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property5 = localDateTime1.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime6 = property5.withMinimumValue();
        org.joda.time.DurationField durationField7 = property5.getDurationField();
        java.lang.String str8 = property5.getAsShortText();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "11" + "'", str8, "11");
    }

    @Test
    public void test00321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00321");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property5 = localDateTime1.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        boolean boolean8 = localDateTime6.isBefore((org.joda.time.ReadablePartial) localDateTime7);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime7.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property11 = localDateTime7.dayOfMonth();
        java.util.Locale locale12 = java.util.Locale.FRENCH;
        java.util.Set<java.lang.String> strSet13 = locale12.getUnicodeLocaleAttributes();
        java.lang.String str14 = locale12.getVariant();
        java.lang.String str15 = property11.getAsText(locale12);
        java.lang.String str16 = property5.getAsShortText(locale12);
        org.joda.time.LocalDateTime localDateTime17 = property5.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.withMillisOfDay(86399999);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "11" + "'", str15, "11");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "11" + "'", str16, "11");
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
    }

    @Test
    public void test00322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00322");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        int int1 = localDateTime0.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime3 = localDateTime0.minusMonths((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.minusMonths((int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime7 = localDateTime5.withMinuteOfHour(1969);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1969 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 22 + "'", int1 == 22);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
    }

    @Test
    public void test00323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00323");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.field.FieldUtils.verifyValueBounds("2022-02-11T09:47:53.675", (int) (byte) -1, 11, 35282145);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1 for 2022-02-11T09:47:53.675 must be in the range [11,35282145]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00324");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property5 = localDateTime1.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime6 = property5.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField7 = property5.getField();
        long long10 = dateTimeField7.addWrapField((long) (short) 1, (int) (byte) 100);
        int int12 = dateTimeField7.getLeapAmount(0L);
        long long14 = dateTimeField7.roundHalfFloor((long) (-1));
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.minusMillis((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.plusDays(0);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime17.withYearOfEra(874);
        org.joda.time.Chronology chronology22 = localDateTime21.getChronology();
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime();
        boolean boolean26 = localDateTime24.isBefore((org.joda.time.ReadablePartial) localDateTime25);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime25.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property29 = localDateTime25.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime30 = property29.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField31 = property29.getField();
        int int34 = dateTimeField31.getDifference(1L, 86399999L);
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime();
        int int36 = localDateTime35.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime38 = localDateTime35.minusMonths((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime38.minusMonths((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime40.plusWeeks(22);
        org.joda.time.LocalDateTime.Property property43 = localDateTime42.dayOfMonth();
        java.util.Locale locale48 = new java.util.Locale("11", "weekyear", "fra");
        java.lang.String str49 = locale48.getDisplayName();
        java.lang.String str50 = dateTimeField31.getAsShortText((org.joda.time.ReadablePartial) localDateTime42, (int) (byte) 1, locale48);
        org.joda.time.LocalDateTime localDateTime51 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime52 = new org.joda.time.LocalDateTime();
        boolean boolean53 = localDateTime51.isBefore((org.joda.time.ReadablePartial) localDateTime52);
        org.joda.time.LocalDateTime localDateTime55 = localDateTime52.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property56 = localDateTime52.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime57 = property56.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField58 = property56.getField();
        org.joda.time.LocalDateTime localDateTime59 = property56.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime60 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime62 = localDateTime60.minusMillis((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime64 = localDateTime62.plusDays(0);
        org.joda.time.LocalDateTime localDateTime66 = localDateTime64.plusMillis((int) '#');
        int[] intArray67 = localDateTime64.getValues();
        int int68 = dateTimeField31.getMinimumValue((org.joda.time.ReadablePartial) localDateTime59, intArray67);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray70 = dateTimeField7.addWrapField((org.joda.time.ReadablePartial) localDateTime21, 86399999, intArray67, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 86399999");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 604800001L + "'", long10 == 604800001L);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 22 + "'", int36 == 22);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertEquals(locale48.toString(), "11_WEEKYEAR_fra");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "11 (WEEKYEAR,fra)" + "'", str49, "11 (WEEKYEAR,fra)");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "1" + "'", str50, "1");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertNotNull(intArray67);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[2022, 2, 11, 35290052]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
    }

    @Test
    public void test00325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00325");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        int int1 = localDateTime0.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime3 = localDateTime0.minusMonths((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.minusMonths((int) (byte) 0);
        org.joda.time.ReadablePartial readablePartial6 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean7 = localDateTime5.isEqual(readablePartial6);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Partial cannot be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 22 + "'", int1 == 22);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
    }

    @Test
    public void test00326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00326");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        int[] intArray3 = localDateTime1.getValues();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.plusYears((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        boolean boolean8 = localDateTime6.isBefore((org.joda.time.ReadablePartial) localDateTime7);
        int[] intArray9 = localDateTime7.getValues();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime1.withFields((org.joda.time.ReadablePartial) localDateTime7);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusMillis((int) (short) 100);
        int int13 = localDateTime10.getMillisOfSecond();
        org.joda.time.LocalDateTime.Property property14 = localDateTime10.minuteOfHour();
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.LocalDateTime localDateTime16 = localDateTime10.minus(readablePeriod15);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime18 = localDateTime16.withHourOfDay((int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 100 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(intArray3);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[2022, 2, 11, 35290091]");
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(intArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[2022, 2, 11, 35290091]");
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 91 + "'", int13 == 91);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDateTime16);
    }

    @Test
    public void test00327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00327");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale4 = new java.util.Locale("Coordinated Universal Time", "2022-02-11T09:47:52.570", "fra");
        java.util.Locale.setDefault(category0, locale4);
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        boolean boolean8 = localDateTime6.isBefore((org.joda.time.ReadablePartial) localDateTime7);
        int[] intArray9 = localDateTime7.getValues();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime7.plusYears((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime();
        boolean boolean14 = localDateTime12.isBefore((org.joda.time.ReadablePartial) localDateTime13);
        int[] intArray15 = localDateTime13.getValues();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime7.withFields((org.joda.time.ReadablePartial) localDateTime13);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetMillis((int) 'u');
        long long22 = dateTimeZone18.convertLocalToUTC((long) 1, false, 822L);
        java.util.TimeZone timeZone23 = dateTimeZone18.toTimeZone();
        int int25 = dateTimeZone18.getOffset(10L);
        org.joda.time.DateTime dateTime26 = localDateTime7.toDateTime(dateTimeZone18);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime((java.lang.Object) category0, dateTimeZone18);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: java.util.Locale$Category");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertEquals(locale4.toString(), "coordinated universal time_2022-02-11T09:47:52.570_fra");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(intArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[2022, 2, 11, 35290143]");
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(intArray15);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[2022, 2, 11, 35290143]");
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-116L) + "'", long22 == (-116L));
        org.junit.Assert.assertNotNull(timeZone23);
        org.junit.Assert.assertEquals(timeZone23.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 117 + "'", int25 == 117);
        org.junit.Assert.assertNotNull(dateTime26);
    }

    @Test
    public void test00328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00328");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(47, 7, 0, (int) (byte) -1, (-222));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00329");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        int int2 = dateTimeZone0.getStandardOffset((long) (-100));
        java.util.TimeZone timeZone3 = dateTimeZone0.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        int int7 = dateTimeZone5.getStandardOffset((long) (-100));
        java.util.TimeZone timeZone8 = dateTimeZone5.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone8);
        boolean boolean10 = timeZone3.hasSameRules(timeZone8);
        int int12 = timeZone8.getOffset(35271948L);
        java.lang.String str15 = timeZone8.getDisplayName(false, (int) (byte) 0);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(timeZone3);
// flaky:         org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Temps universel coordonn\351");
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(timeZone8);
// flaky:         org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "Temps universel coordonn\351");
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "UTC" + "'", str15, "UTC");
    }

    @Test
    public void test00330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00330");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property5 = localDateTime1.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime6 = property5.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField7 = property5.getField();
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime();
        boolean boolean10 = localDateTime8.isBefore((org.joda.time.ReadablePartial) localDateTime9);
        int[] intArray11 = localDateTime9.getValues();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime9.plusYears((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime();
        boolean boolean16 = localDateTime14.isBefore((org.joda.time.ReadablePartial) localDateTime15);
        int[] intArray17 = localDateTime15.getValues();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime9.withFields((org.joda.time.ReadablePartial) localDateTime15);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.minusMillis((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.minusSeconds((int) '#');
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.withWeekOfWeekyear(50);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime22.withMinuteOfHour((int) (byte) 0);
        int int27 = dateTimeField7.getMinimumValue((org.joda.time.ReadablePartial) localDateTime22);
        org.joda.time.tz.NameProvider nameProvider29 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime();
        boolean boolean32 = localDateTime30.isBefore((org.joda.time.ReadablePartial) localDateTime31);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime31.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property35 = localDateTime31.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime36 = property35.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField37 = property35.getField();
        int int38 = dateTimeField37.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime();
        int int40 = localDateTime39.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime42 = localDateTime39.minusMonths((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime44 = localDateTime42.minusMonths((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime46 = localDateTime44.plusWeeks(22);
        java.util.Locale locale48 = java.util.Locale.JAPANESE;
        java.lang.String str49 = dateTimeField37.getAsShortText((org.joda.time.ReadablePartial) localDateTime46, 22, locale48);
        java.lang.String str52 = nameProvider29.getName(locale48, "11", "Etc/UTC");
        org.joda.time.DateTimeZone.setNameProvider(nameProvider29);
        java.util.Locale locale54 = java.util.Locale.FRENCH;
        java.util.Set<java.lang.String> strSet55 = locale54.getUnicodeLocaleAttributes();
        java.lang.String str56 = locale54.getVariant();
        java.lang.String str59 = nameProvider29.getShortName(locale54, "2022-02-11T09:48:02.913", "2022-02-11T09:48:00.361");
        java.lang.String str60 = dateTimeField7.getAsShortText((int) '#', locale54);
        // The following exception was thrown during execution in test generation
        try {
            long long63 = dateTimeField7.set((long) 100, "2022-02-11T09:48:07.783");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2022-02-11T09:48:07.783\" for dayOfMonth is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[2022, 2, 11, 35290342]");
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(intArray17);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[2022, 2, 11, 35290342]");
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(nameProvider29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 31 + "'", int38 == 31);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 22 + "'", int40 == 22);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "22" + "'", str49, "22");
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "35" + "'", str60, "35");
    }

    @Test
    public void test00331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00331");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.getDefault();
        java.util.Locale locale4 = null;
        java.lang.String str5 = dateTimeZone2.getName((long) (short) 10, locale4);
        long long7 = dateTimeZone1.getMillisKeepLocal(dateTimeZone2, (long) 874);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        long long10 = dateTimeZone2.getMillisKeepLocal(dateTimeZone8, (long) '4');
        int int12 = dateTimeZone2.getOffsetFromLocal((long) 83);
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime(0L, dateTimeZone2);
        java.util.TimeZone timeZone14 = dateTimeZone2.toTimeZone();
        java.lang.String str15 = timeZone14.getID();
        java.util.Locale locale19 = new java.util.Locale("11", "weekyear", "fra");
        java.lang.String str20 = locale19.getDisplayName();
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime();
        boolean boolean23 = localDateTime21.isBefore((org.joda.time.ReadablePartial) localDateTime22);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime22.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property26 = localDateTime22.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime27 = property26.withMinimumValue();
        java.util.Locale locale28 = java.util.Locale.UK;
        java.lang.String str29 = property26.getAsShortText(locale28);
        java.lang.String str30 = locale19.getDisplayScript(locale28);
        java.lang.String str31 = timeZone14.getDisplayName(locale28);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00" + "'", str5, "+00:00");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 874L + "'", long7 == 874L);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 52L + "'", long10 == 52L);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(timeZone14);
// flaky:         org.junit.Assert.assertEquals(timeZone14.getDisplayName(), "Temps universel coordonn\351");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Etc/UTC" + "'", str15, "Etc/UTC");
        org.junit.Assert.assertEquals(locale19.toString(), "11_WEEKYEAR_fra");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "11 (WEEKYEAR,fra)" + "'", str20, "11 (WEEKYEAR,fra)");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "11" + "'", str29, "11");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Coordinated Universal Time" + "'", str31, "Coordinated Universal Time");
    }

    @Test
    public void test00332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00332");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property5 = localDateTime1.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime6 = property5.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField7 = property5.getField();
        int int10 = dateTimeField7.getDifference(1L, 86399999L);
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime();
        int int12 = localDateTime11.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime11.minusMonths((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minusMonths((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.plusWeeks(22);
        org.joda.time.LocalDateTime.Property property19 = localDateTime18.dayOfMonth();
        java.util.Locale locale24 = new java.util.Locale("11", "weekyear", "fra");
        java.lang.String str25 = locale24.getDisplayName();
        java.lang.String str26 = dateTimeField7.getAsShortText((org.joda.time.ReadablePartial) localDateTime18, (int) (byte) 1, locale24);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.getDefault();
        java.util.Locale locale30 = null;
        java.lang.String str31 = dateTimeZone28.getName((long) (short) 10, locale30);
        long long33 = dateTimeZone27.getMillisKeepLocal(dateTimeZone28, (long) 874);
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.getDefault();
        long long36 = dateTimeZone28.getMillisKeepLocal(dateTimeZone34, (long) '4');
        int int38 = dateTimeZone28.getOffsetFromLocal((long) 83);
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime41 = localDateTime39.minusMillis((int) (byte) 1);
        java.lang.String str42 = localDateTime41.toString();
        org.joda.time.DateTime dateTime43 = localDateTime41.toDateTime();
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime46 = localDateTime44.minusMillis((int) (byte) 1);
        java.lang.String str47 = localDateTime46.toString();
        org.joda.time.DateTime dateTime48 = localDateTime46.toDateTime();
        boolean boolean49 = dateTime43.isEqual((org.joda.time.ReadableInstant) dateTime48);
        org.joda.time.LocalDateTime localDateTime50 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime52 = localDateTime50.minusMillis((int) (byte) 1);
        java.lang.String str53 = localDateTime52.toString();
        org.joda.time.DateTime dateTime54 = localDateTime52.toDateTime();
        boolean boolean55 = dateTime43.isEqual((org.joda.time.ReadableInstant) dateTime54);
        org.joda.time.LocalDateTime localDateTime56 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime58 = localDateTime56.minusMillis((int) (byte) 1);
        java.lang.String str59 = localDateTime58.toString();
        org.joda.time.DateTime dateTime60 = localDateTime58.toDateTime();
        org.joda.time.LocalDateTime localDateTime61 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime63 = localDateTime61.minusMillis((int) (byte) 1);
        java.lang.String str64 = localDateTime63.toString();
        org.joda.time.DateTime dateTime65 = localDateTime63.toDateTime();
        boolean boolean66 = dateTime60.isEqual((org.joda.time.ReadableInstant) dateTime65);
        boolean boolean67 = dateTime43.isEqual((org.joda.time.ReadableInstant) dateTime65);
        int int68 = dateTimeZone28.getOffset((org.joda.time.ReadableInstant) dateTime65);
        org.joda.time.DateTimeZone dateTimeZone69 = dateTime65.getZone();
        int int71 = dateTimeZone69.getOffsetFromLocal(86400000L);
        java.lang.String str72 = dateTimeZone69.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime73 = new org.joda.time.LocalDateTime((java.lang.Object) locale24, dateTimeZone69);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: java.util.Locale");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 22 + "'", int12 == 22);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertEquals(locale24.toString(), "11_WEEKYEAR_fra");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "11 (WEEKYEAR,fra)" + "'", str25, "11 (WEEKYEAR,fra)");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "1" + "'", str26, "1");
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "+00:00" + "'", str31, "+00:00");
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 874L + "'", long33 == 874L);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 52L + "'", long36 == 52L);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(localDateTime41);
// flaky:         org.junit.Assert.assertEquals("'" + str42 + "' != '" + "2022-02-11T09:48:10.403" + "'", str42, "2022-02-11T09:48:10.403");
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(localDateTime46);
// flaky:         org.junit.Assert.assertEquals("'" + str47 + "' != '" + "2022-02-11T09:48:10.403" + "'", str47, "2022-02-11T09:48:10.403");
        org.junit.Assert.assertNotNull(dateTime48);
// flaky:         org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(localDateTime52);
// flaky:         org.junit.Assert.assertEquals("'" + str53 + "' != '" + "2022-02-11T09:48:10.403" + "'", str53, "2022-02-11T09:48:10.403");
        org.junit.Assert.assertNotNull(dateTime54);
// flaky:         org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(localDateTime58);
// flaky:         org.junit.Assert.assertEquals("'" + str59 + "' != '" + "2022-02-11T09:48:10.403" + "'", str59, "2022-02-11T09:48:10.403");
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(localDateTime63);
// flaky:         org.junit.Assert.assertEquals("'" + str64 + "' != '" + "2022-02-11T09:48:10.403" + "'", str64, "2022-02-11T09:48:10.403");
        org.junit.Assert.assertNotNull(dateTime65);
// flaky:         org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
// flaky:         org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone69);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "Etc/UTC" + "'", str72, "Etc/UTC");
    }

    @Test
    public void test00333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00333");
        int int1 = org.joda.time.field.FieldUtils.safeNegate(35274908);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + (-35274908) + "'", int1 == (-35274908));
    }

    @Test
    public void test00334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00334");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property5 = localDateTime1.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime6 = property5.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField7 = property5.getField();
        int int8 = property5.getMaximumValueOverall();
        org.joda.time.LocalDateTime localDateTime10 = property5.addToCopy(0);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime15 = localDateTime10.withTime(934, 5200, (int) (short) 10, (-40));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 934 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 31 + "'", int8 == 31);
        org.junit.Assert.assertNotNull(localDateTime10);
    }

    @Test
    public void test00335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00335");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((java.lang.Object) "2022-02-11T09:47:57.288");
        int int2 = localDateTime1.getEra();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime4 = localDateTime1.withMillisOfDay((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1 for millisOfDay must be in the range [0,86399999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
    }

    @Test
    public void test00336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00336");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) 'u');
        long long5 = dateTimeZone1.convertLocalToUTC((long) 1, false, 822L);
        java.util.TimeZone timeZone6 = dateTimeZone1.toTimeZone();
        java.lang.String str7 = timeZone6.getDisplayName();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-116L) + "'", long5 == (-116L));
        org.junit.Assert.assertNotNull(timeZone6);
        org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "GMT+00:00" + "'", str7, "GMT+00:00");
    }

    @Test
    public void test00337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00337");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property5 = localDateTime1.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime6 = property5.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField7 = property5.getField();
        long long10 = dateTimeField7.addWrapField((long) 6, (int) (byte) 0);
        java.lang.String str12 = dateTimeField7.getAsShortText((long) (byte) 0);
        int int13 = dateTimeField7.getMaximumValue();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime(chronology14);
        org.joda.time.LocalDateTime.Property property16 = localDateTime15.yearOfEra();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime15.withMinuteOfHour(0);
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime();
        boolean boolean22 = localDateTime20.isBefore((org.joda.time.ReadablePartial) localDateTime21);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime21.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property25 = localDateTime21.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime26 = property25.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField27 = property25.getField();
        long long29 = dateTimeField27.remainder((-1L));
        java.util.Locale locale31 = java.util.Locale.UK;
        java.lang.String str32 = dateTimeField27.getAsShortText((long) 22, locale31);
        int int33 = dateTimeField27.getMinimumValue();
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime();
        boolean boolean36 = localDateTime34.isBefore((org.joda.time.ReadablePartial) localDateTime35);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime35.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime35.plusMinutes((int) '#');
        org.joda.time.LocalDateTime localDateTime42 = localDateTime35.minusMinutes((int) (short) 1);
        org.joda.time.LocalDateTime.Property property43 = localDateTime42.weekOfWeekyear();
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime42, chronology44);
        java.util.Locale locale47 = new java.util.Locale("2022-02-11T09:47:50.218");
        java.lang.String str48 = dateTimeField27.getAsShortText((org.joda.time.ReadablePartial) localDateTime42, locale47);
        org.joda.time.LocalDateTime localDateTime49 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime50 = new org.joda.time.LocalDateTime();
        boolean boolean51 = localDateTime49.isBefore((org.joda.time.ReadablePartial) localDateTime50);
        org.joda.time.LocalDateTime localDateTime53 = localDateTime50.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime55 = localDateTime50.plusMinutes((int) '#');
        org.joda.time.ReadablePeriod readablePeriod56 = null;
        org.joda.time.LocalDateTime localDateTime57 = localDateTime50.minus(readablePeriod56);
        int int58 = localDateTime50.getDayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.getDefault();
        int int61 = dateTimeZone59.getStandardOffset((long) (-100));
        org.joda.time.LocalDateTime localDateTime62 = new org.joda.time.LocalDateTime(dateTimeZone59);
        int[] intArray63 = localDateTime62.getValues();
        int int64 = dateTimeField27.getMinimumValue((org.joda.time.ReadablePartial) localDateTime50, intArray63);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray66 = dateTimeField7.add((org.joda.time.ReadablePartial) localDateTime15, 704, intArray63, (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 704");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 6L + "'", long10 == 6L);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "1" + "'", str12, "1");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 31 + "'", int13 == 31);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 86399999L + "'", long29 == 86399999L);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "1" + "'", str32, "1");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertEquals(locale47.toString(), "2022-02-11t09:47:50.218");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "11" + "'", str48, "11");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 11 + "'", int58 == 11);
        org.junit.Assert.assertNotNull(dateTimeZone59);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(intArray63);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[2022, 2, 11, 35290578]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
    }

    @Test
    public void test00338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00338");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("97", strMap1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=97");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00339");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.hourOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.field.FieldUtils.verifyValueBounds(dateTimeFieldType0, 0, 86399999, 11);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for hourOfDay must be in the range [86399999,11]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
    }

    @Test
    public void test00340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00340");
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.minusMillis((int) (byte) 1);
        java.lang.String str6 = localDateTime5.toString();
        org.joda.time.DateTime dateTime7 = localDateTime5.toDateTime();
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minusMillis((int) (byte) 1);
        java.lang.String str11 = localDateTime10.toString();
        org.joda.time.DateTime dateTime12 = localDateTime10.toDateTime();
        boolean boolean13 = dateTime7.isEqual((org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.Chronology chronology14 = dateTime12.getChronology();
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime((java.lang.Object) 35271574L, chronology14);
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((long) 'u', chronology14);
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime(86399999L, chronology14);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.plusWeeks((int) 'a');
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.minusDays((int) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            int int23 = localDateTime19.getValue(48);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 48");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime5);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "2022-02-11T09:48:10.723" + "'", str6, "2022-02-11T09:48:10.723");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(localDateTime10);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "2022-02-11T09:48:10.723" + "'", str11, "2022-02-11T09:48:10.723");
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
    }

    @Test
    public void test00341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00341");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder1.addUnicodeLocaleAttribute("Japon");
        java.util.Locale.Builder builder4 = builder1.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder6 = builder1.setVariant("2022-02-11T09:48:07.855");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed variant: 2022-02-11T09:48:07.855 [at index 5]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
    }

    @Test
    public void test00342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00342");
        int int3 = org.joda.time.field.FieldUtils.getWrappedValue(0, (-1), 5200);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
    }

    @Test
    public void test00343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00343");
        int int1 = org.joda.time.field.FieldUtils.safeToInt(0L);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 0 + "'", int1 == 0);
    }

    @Test
    public void test00344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00344");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        int int2 = dateTimeZone0.getStandardOffset((long) (-100));
        java.util.TimeZone timeZone3 = dateTimeZone0.toTimeZone();
        timeZone3.setID("CA");
        java.lang.String str6 = timeZone3.getDisplayName();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "GMT+00:00" + "'", str6, "GMT+00:00");
    }

    @Test
    public void test00345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00345");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        int int1 = localDateTime0.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime3 = localDateTime0.minusMonths((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.minusMonths((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.plusWeeks(22);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str9 = dateTimeFieldType8.toString();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime7.withField(dateTimeFieldType8, (int) 'x');
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime13 = localDateTime7.withYearOfCentury(704);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 704 for yearOfCentury must be in the range [0,99]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 22 + "'", int1 == 22);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "weekyear" + "'", str9, "weekyear");
        org.junit.Assert.assertNotNull(localDateTime11);
    }

    @Test
    public void test00346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00346");
        java.util.Locale locale0 = java.util.Locale.ITALIAN;
        java.lang.String str1 = locale0.getDisplayCountry();
        java.util.Set<java.lang.String> strSet2 = locale0.getUnicodeLocaleAttributes();
        java.util.Locale locale5 = new java.util.Locale("fra", "");
        java.util.Set<java.lang.String> strSet6 = locale5.getUnicodeLocaleAttributes();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime();
        boolean boolean9 = localDateTime7.isBefore((org.joda.time.ReadablePartial) localDateTime8);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime8.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property12 = localDateTime8.dayOfMonth();
        org.joda.time.DurationField durationField13 = property12.getRangeDurationField();
        boolean boolean14 = strSet6.contains((java.lang.Object) durationField13);
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime();
        boolean boolean17 = localDateTime15.isBefore((org.joda.time.ReadablePartial) localDateTime16);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime16.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property20 = localDateTime16.dayOfMonth();
        boolean boolean21 = property20.isLeap();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone22);
        java.util.Locale locale25 = java.util.Locale.CHINESE;
        java.lang.String str26 = dateTimeZone22.getName((long) (short) 0, locale25);
        java.lang.String str27 = property20.getAsShortText(locale25);
        boolean boolean28 = strSet6.equals((java.lang.Object) locale25);
        java.util.Locale.LanguageRange[] languageRangeArray29 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList30 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList30, languageRangeArray29);
        java.util.Locale[] localeArray32 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList33 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList33, localeArray32);
        java.util.Locale locale35 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList30, (java.util.Collection<java.util.Locale>) localeList33);
        boolean boolean36 = strSet6.removeAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList30);
        java.util.Locale.LanguageRange[] languageRangeArray37 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList38 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList38, languageRangeArray37);
        java.util.Locale[] localeArray40 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList41 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList41, localeArray40);
        java.util.Locale locale43 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList38, (java.util.Collection<java.util.Locale>) localeList41);
        java.util.Locale.LanguageRange[] languageRangeArray44 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList45 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList45, languageRangeArray44);
        java.util.Locale[] localeArray47 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList48 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList48, localeArray47);
        java.util.Locale locale50 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList45, (java.util.Collection<java.util.Locale>) localeList48);
        java.util.Locale.FilteringMode filteringMode51 = null;
        java.util.List<java.util.Locale> localeList52 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList38, (java.util.Collection<java.util.Locale>) localeList48, filteringMode51);
        java.util.Locale locale53 = java.util.Locale.FRENCH;
        java.util.Set<java.lang.String> strSet54 = locale53.getUnicodeLocaleAttributes();
        java.lang.Object[] objArray55 = strSet54.toArray();
        java.util.Locale.FilteringMode filteringMode56 = java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList57 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList38, (java.util.Collection<java.lang.String>) strSet54, filteringMode56);
        java.util.AbstractCollection[] abstractCollectionArray59 = new java.util.AbstractCollection[2];
        @SuppressWarnings("unchecked")
        java.util.AbstractCollection<java.util.Locale.LanguageRange>[] languageRangeCollectionArray60 = (java.util.AbstractCollection<java.util.Locale.LanguageRange>[]) abstractCollectionArray59;
        languageRangeCollectionArray60[0] = languageRangeList30;
        languageRangeCollectionArray60[1] = languageRangeList38;
        java.util.AbstractCollection<java.util.Locale.LanguageRange>[] languageRangeCollectionArray65 = strSet2.toArray(languageRangeCollectionArray60);
        org.joda.time.DateTimeZone dateTimeZone66 = org.joda.time.DateTimeZone.getDefault();
        int int68 = dateTimeZone66.getStandardOffset((long) (-100));
        org.joda.time.LocalDateTime localDateTime69 = new org.joda.time.LocalDateTime(dateTimeZone66);
        java.util.TimeZone timeZone70 = dateTimeZone66.toTimeZone();
        boolean boolean72 = dateTimeZone66.isStandardOffset((long) 709);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime73 = new org.joda.time.LocalDateTime((java.lang.Object) languageRangeCollectionArray65, dateTimeZone66);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: [Ljava.util.AbstractCollection;");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertEquals(locale5.toString(), "fra");
        org.junit.Assert.assertNotNull(strSet6);
// flaky:         org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "zh");
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "+00:00:00.117" + "'", str26, "+00:00:00.117");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "11" + "'", str27, "11");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(languageRangeArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(localeArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(locale35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(languageRangeArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(localeArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(locale43);
        org.junit.Assert.assertNotNull(languageRangeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(localeArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(locale50);
        org.junit.Assert.assertNotNull(localeList52);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet54);
        org.junit.Assert.assertNotNull(objArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray55), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray55), "[]");
        org.junit.Assert.assertTrue("'" + filteringMode56 + "' != '" + java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES + "'", filteringMode56.equals(java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList57);
        org.junit.Assert.assertNotNull(abstractCollectionArray59);
        org.junit.Assert.assertNotNull(languageRangeCollectionArray60);
        org.junit.Assert.assertNotNull(languageRangeCollectionArray65);
        org.junit.Assert.assertNotNull(dateTimeZone66);
// flaky:         org.junit.Assert.assertTrue("'" + int68 + "' != '" + 117 + "'", int68 == 117);
        org.junit.Assert.assertNotNull(timeZone70);
// flaky:         org.junit.Assert.assertEquals(timeZone70.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
    }

    @Test
    public void test00347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00347");
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone2);
        java.util.Locale locale5 = java.util.Locale.CHINESE;
        java.lang.String str6 = dateTimeZone2.getName((long) (short) 0, locale5);
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.minusMillis((int) (byte) 1);
        java.lang.String str10 = localDateTime9.toString();
        org.joda.time.DateTime dateTime11 = localDateTime9.toDateTime();
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.minusMillis((int) (byte) 1);
        java.lang.String str15 = localDateTime14.toString();
        org.joda.time.DateTime dateTime16 = localDateTime14.toDateTime();
        boolean boolean17 = dateTime11.isEqual((org.joda.time.ReadableInstant) dateTime16);
        int int18 = dateTimeZone2.getOffset((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str20 = dateTimeFieldType19.toString();
        java.lang.String str21 = dateTimeFieldType19.toString();
        boolean boolean22 = dateTime11.isSupported(dateTimeFieldType19);
        org.joda.time.Chronology chronology23 = dateTime11.getChronology();
        org.joda.time.Chronology chronology24 = dateTime11.getChronology();
        boolean boolean25 = dateTimeFieldType1.isSupported(chronology24);
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime(chronology24);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime((java.lang.Object) '4', chronology24);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: java.lang.Character");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zh");
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.117" + "'", str6, "+00:00:00.117");
        org.junit.Assert.assertNotNull(localDateTime9);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "2022-02-11T09:48:11.813" + "'", str10, "2022-02-11T09:48:11.813");
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(localDateTime14);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "2022-02-11T09:48:11.813" + "'", str15, "2022-02-11T09:48:11.813");
        org.junit.Assert.assertNotNull(dateTime16);
// flaky:         org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 117 + "'", int18 == 117);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "weekyear" + "'", str20, "weekyear");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "weekyear" + "'", str21, "weekyear");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
    }

    @Test
    public void test00348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00348");
        int int4 = org.joda.time.field.FieldUtils.getWrappedValue(100, (int) (short) 100, (int) (byte) -1, 24);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 18 + "'", int4 == 18);
    }

    @Test
    public void test00349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00349");
        org.joda.time.tz.Provider provider0 = org.joda.time.DateTimeZone.getProvider();
        org.joda.time.DateTimeZone.setProvider(provider0);
        java.util.Set<java.lang.String> strSet2 = provider0.getAvailableIDs();
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.minusMillis((int) (byte) 1);
        java.lang.String str6 = localDateTime5.toString();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.minusMonths((int) 'a');
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minusMinutes(22);
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime();
        boolean boolean13 = localDateTime11.isBefore((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime12.plusSeconds((int) (byte) 100);
        boolean boolean16 = localDateTime10.isBefore((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime();
        int int18 = localDateTime17.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime17.minusMonths((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.minusMonths((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.plusYears(10);
        boolean boolean25 = localDateTime10.isAfter((org.joda.time.ReadablePartial) localDateTime24);
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime();
        boolean boolean28 = localDateTime26.isBefore((org.joda.time.ReadablePartial) localDateTime27);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime27.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property31 = localDateTime27.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime();
        boolean boolean34 = localDateTime32.isBefore((org.joda.time.ReadablePartial) localDateTime33);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime33.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property37 = localDateTime33.dayOfMonth();
        java.util.Locale locale38 = java.util.Locale.FRENCH;
        java.util.Set<java.lang.String> strSet39 = locale38.getUnicodeLocaleAttributes();
        java.lang.String str40 = locale38.getVariant();
        java.lang.String str41 = property37.getAsText(locale38);
        java.lang.String str42 = property31.getAsShortText(locale38);
        org.joda.time.LocalDateTime localDateTime43 = property31.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime localDateTime44 = property31.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime45 = property31.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime47 = localDateTime45.withYear((-1));
        int int48 = localDateTime45.getDayOfMonth();
        boolean boolean49 = localDateTime24.isBefore((org.joda.time.ReadablePartial) localDateTime45);
        org.joda.time.DateTimeField[] dateTimeFieldArray50 = localDateTime45.getFields();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean51 = strSet2.remove((java.lang.Object) dateTimeFieldArray50);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: [Lorg.joda.time.DateTimeField; cannot be cast to java.lang.Comparable");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(provider0);
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(localDateTime5);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "2022-02-11T09:48:12.011" + "'", str6, "2022-02-11T09:48:12.011");
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 22 + "'", int18 == 22);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "11" + "'", str41, "11");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "11" + "'", str42, "11");
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 28 + "'", int48 == 28);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldArray50);
    }

    @Test
    public void test00350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00350");
        long long2 = org.joda.time.field.FieldUtils.safeMultiply((long) 715, (long) 19034);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 13609310L + "'", long2 == 13609310L);
    }

    @Test
    public void test00351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00351");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'u', 0);
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        java.util.Locale locale6 = null;
        java.lang.String str7 = dateTimeZone4.getName((long) (short) 10, locale6);
        long long9 = dateTimeZone3.getMillisKeepLocal(dateTimeZone4, (long) 874);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        long long12 = dateTimeZone4.getMillisKeepLocal(dateTimeZone10, (long) '4');
        int int14 = dateTimeZone4.getOffsetFromLocal((long) 83);
        long long16 = dateTimeZone2.getMillisKeepLocal(dateTimeZone4, (long) 0);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone17);
        java.util.Locale locale20 = java.util.Locale.CHINESE;
        java.lang.String str21 = dateTimeZone17.getName((long) (short) 0, locale20);
        long long23 = dateTimeZone2.getMillisKeepLocal(dateTimeZone17, (long) 50);
        java.lang.String str25 = dateTimeZone17.getNameKey((long) 556);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:00:00.117" + "'", str7, "+00:00:00.117");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 874L + "'", long9 == 874L);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 52L + "'", long12 == 52L);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 117 + "'", int14 == 117);
// flaky:         org.junit.Assert.assertTrue("'" + long16 + "' != '" + 421199883L + "'", long16 == 421199883L);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "zh");
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+00:00:00.117" + "'", str21, "+00:00:00.117");
// flaky:         org.junit.Assert.assertTrue("'" + long23 + "' != '" + 421199933L + "'", long23 == 421199933L);
// flaky:         org.junit.Assert.assertNull(str25);
    }

    @Test
    public void test00352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00352");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 83);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusSeconds(83);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.minusYears((int) (byte) 0);
        java.lang.Class<?> wildcardClass6 = localDateTime5.getClass();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(wildcardClass6);
    }

    @Test
    public void test00353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00353");
        java.util.Locale locale2 = new java.util.Locale("", "weekyear");
        java.util.Set<java.lang.String> strSet3 = locale2.getUnicodeLocaleAttributes();
        int int4 = strSet3.size();
        java.util.Iterator<java.lang.String> strItor5 = strSet3.iterator();
        org.junit.Assert.assertEquals(locale2.toString(), "_WEEKYEAR");
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(strItor5);
    }

    @Test
    public void test00354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00354");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.getDefault();
        java.util.Locale locale4 = null;
        java.lang.String str5 = dateTimeZone2.getName((long) (short) 10, locale4);
        long long7 = dateTimeZone1.getMillisKeepLocal(dateTimeZone2, (long) 874);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        long long10 = dateTimeZone2.getMillisKeepLocal(dateTimeZone8, (long) '4');
        int int12 = dateTimeZone2.getOffsetFromLocal((long) 83);
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime(0L, dateTimeZone2);
        java.util.TimeZone timeZone14 = dateTimeZone2.toTimeZone();
        java.lang.String str15 = timeZone14.getID();
        boolean boolean16 = timeZone14.observesDaylightTime();
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.minusMillis((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.plusDays(0);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.plusMillis(22);
        org.joda.time.LocalDateTime.Property property26 = localDateTime25.secondOfMinute();
        org.joda.time.tz.NameProvider nameProvider27 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime();
        boolean boolean30 = localDateTime28.isBefore((org.joda.time.ReadablePartial) localDateTime29);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime29.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property33 = localDateTime29.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime34 = property33.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField35 = property33.getField();
        int int36 = dateTimeField35.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime();
        int int38 = localDateTime37.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime40 = localDateTime37.minusMonths((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime40.minusMonths((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime44 = localDateTime42.plusWeeks(22);
        java.util.Locale locale46 = java.util.Locale.JAPANESE;
        java.lang.String str47 = dateTimeField35.getAsShortText((org.joda.time.ReadablePartial) localDateTime44, 22, locale46);
        java.lang.String str50 = nameProvider27.getName(locale46, "11", "Etc/UTC");
        int int51 = property26.getMaximumTextLength(locale46);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str52 = timeZone14.getDisplayName(true, 7, locale46);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal style: 7");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTimeZone2);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00:00.117" + "'", str5, "+00:00:00.117");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 874L + "'", long7 == 874L);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 52L + "'", long10 == 52L);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 117 + "'", int12 == 117);
        org.junit.Assert.assertNotNull(timeZone14);
// flaky:         org.junit.Assert.assertEquals(timeZone14.getDisplayName(), "GMT+00:00");
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+00:00:00.117" + "'", str15, "+00:00:00.117");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(nameProvider27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 31 + "'", int36 == 31);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 22 + "'", int38 == 22);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "22" + "'", str47, "22");
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 2 + "'", int51 == 2);
    }

    @Test
    public void test00355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00355");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.minusMillis((int) (byte) 1);
        java.lang.String str3 = localDateTime2.toString();
        org.joda.time.DateTime dateTime4 = localDateTime2.toDateTime();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusMillis((int) (byte) 1);
        java.lang.String str8 = localDateTime7.toString();
        org.joda.time.DateTime dateTime9 = localDateTime7.toDateTime();
        boolean boolean10 = dateTime4.isEqual((org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minusMillis((int) (byte) 1);
        java.lang.String str14 = localDateTime13.toString();
        org.joda.time.DateTime dateTime15 = localDateTime13.toDateTime();
        boolean boolean16 = dateTime4.isEqual((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.minusMillis((int) (byte) 1);
        java.lang.String str20 = localDateTime19.toString();
        org.joda.time.DateTime dateTime21 = localDateTime19.toDateTime();
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.minusMillis((int) (byte) 1);
        java.lang.String str25 = localDateTime24.toString();
        org.joda.time.DateTime dateTime26 = localDateTime24.toDateTime();
        boolean boolean27 = dateTime21.isEqual((org.joda.time.ReadableInstant) dateTime26);
        boolean boolean28 = dateTime4.isEqual((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone29);
        java.util.Locale locale32 = java.util.Locale.CHINESE;
        java.lang.String str33 = dateTimeZone29.getName((long) (short) 0, locale32);
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime36 = localDateTime34.minusMillis((int) (byte) 1);
        java.lang.String str37 = localDateTime36.toString();
        org.joda.time.DateTime dateTime38 = localDateTime36.toDateTime();
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime41 = localDateTime39.minusMillis((int) (byte) 1);
        java.lang.String str42 = localDateTime41.toString();
        org.joda.time.DateTime dateTime43 = localDateTime41.toDateTime();
        boolean boolean44 = dateTime38.isEqual((org.joda.time.ReadableInstant) dateTime43);
        int int45 = dateTimeZone29.getOffset((org.joda.time.ReadableInstant) dateTime38);
        boolean boolean46 = dateTime26.isAfter((org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone47);
        java.util.Locale locale50 = java.util.Locale.CHINESE;
        java.lang.String str51 = dateTimeZone47.getName((long) (short) 0, locale50);
        org.joda.time.LocalDateTime localDateTime52 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime54 = localDateTime52.minusMillis((int) (byte) 1);
        java.lang.String str55 = localDateTime54.toString();
        org.joda.time.DateTime dateTime56 = localDateTime54.toDateTime();
        org.joda.time.LocalDateTime localDateTime57 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime59 = localDateTime57.minusMillis((int) (byte) 1);
        java.lang.String str60 = localDateTime59.toString();
        org.joda.time.DateTime dateTime61 = localDateTime59.toDateTime();
        boolean boolean62 = dateTime56.isEqual((org.joda.time.ReadableInstant) dateTime61);
        int int63 = dateTimeZone47.getOffset((org.joda.time.ReadableInstant) dateTime56);
        org.joda.time.DateTimeFieldType dateTimeFieldType64 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str65 = dateTimeFieldType64.toString();
        java.lang.String str66 = dateTimeFieldType64.toString();
        boolean boolean67 = dateTime56.isSupported(dateTimeFieldType64);
        int int68 = dateTime26.compareTo((org.joda.time.ReadableInstant) dateTime56);
        org.joda.time.LocalDateTime localDateTime69 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime71 = localDateTime69.minusMillis((int) (byte) 1);
        java.lang.String str72 = localDateTime71.toString();
        org.joda.time.DateTime dateTime73 = localDateTime71.toDateTime();
        org.joda.time.LocalDateTime localDateTime74 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime76 = localDateTime74.minusMillis((int) (byte) 1);
        java.lang.String str77 = localDateTime76.toString();
        org.joda.time.DateTime dateTime78 = localDateTime76.toDateTime();
        boolean boolean79 = dateTime73.isEqual((org.joda.time.ReadableInstant) dateTime78);
        org.joda.time.Chronology chronology80 = dateTime78.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType81 = org.joda.time.DateTimeFieldType.dayOfYear();
        int int82 = dateTime78.get(dateTimeFieldType81);
        int int83 = dateTime26.compareTo((org.joda.time.ReadableInstant) dateTime78);
        long long84 = dateTime78.getMillis();
        org.junit.Assert.assertNotNull(localDateTime2);
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "2022-02-11T09:48:12.195" + "'", str3, "2022-02-11T09:48:12.195");
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localDateTime7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "2022-02-11T09:48:12.195" + "'", str8, "2022-02-11T09:48:12.195");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(localDateTime13);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "2022-02-11T09:48:12.195" + "'", str14, "2022-02-11T09:48:12.195");
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(localDateTime19);
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "2022-02-11T09:48:12.195" + "'", str20, "2022-02-11T09:48:12.195");
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(localDateTime24);
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "2022-02-11T09:48:12.195" + "'", str25, "2022-02-11T09:48:12.195");
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
// flaky:         org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "zh");
// flaky:         org.junit.Assert.assertEquals("'" + str33 + "' != '" + "+00:00:00.117" + "'", str33, "+00:00:00.117");
        org.junit.Assert.assertNotNull(localDateTime36);
// flaky:         org.junit.Assert.assertEquals("'" + str37 + "' != '" + "2022-02-11T09:48:12.195" + "'", str37, "2022-02-11T09:48:12.195");
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(localDateTime41);
// flaky:         org.junit.Assert.assertEquals("'" + str42 + "' != '" + "2022-02-11T09:48:12.195" + "'", str42, "2022-02-11T09:48:12.195");
        org.junit.Assert.assertNotNull(dateTime43);
// flaky:         org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int45 + "' != '" + 117 + "'", int45 == 117);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "zh");
// flaky:         org.junit.Assert.assertEquals("'" + str51 + "' != '" + "+00:00:00.117" + "'", str51, "+00:00:00.117");
        org.junit.Assert.assertNotNull(localDateTime54);
// flaky:         org.junit.Assert.assertEquals("'" + str55 + "' != '" + "2022-02-11T09:48:12.195" + "'", str55, "2022-02-11T09:48:12.195");
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(localDateTime59);
// flaky:         org.junit.Assert.assertEquals("'" + str60 + "' != '" + "2022-02-11T09:48:12.195" + "'", str60, "2022-02-11T09:48:12.195");
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int63 + "' != '" + 117 + "'", int63 == 117);
        org.junit.Assert.assertNotNull(dateTimeFieldType64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "weekyear" + "'", str65, "weekyear");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "weekyear" + "'", str66, "weekyear");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(localDateTime71);
// flaky:         org.junit.Assert.assertEquals("'" + str72 + "' != '" + "2022-02-11T09:48:12.195" + "'", str72, "2022-02-11T09:48:12.195");
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(localDateTime76);
// flaky:         org.junit.Assert.assertEquals("'" + str77 + "' != '" + "2022-02-11T09:48:12.195" + "'", str77, "2022-02-11T09:48:12.195");
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(chronology80);
        org.junit.Assert.assertNotNull(dateTimeFieldType81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 42 + "'", int82 == 42);
// flaky:         org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + long84 + "' != '" + 1644572892078L + "'", long84 == 1644572892078L);
    }

    @Test
    public void test00356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00356");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.minusMillis((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.plusDays(0);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.plusMillis(22);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        int int8 = localDateTime6.get(dateTimeFieldType7);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime6.withSecondOfMinute(50);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusDays(0);
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime();
        boolean boolean16 = localDateTime14.isBefore((org.joda.time.ReadablePartial) localDateTime15);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime15.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property19 = localDateTime15.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime20 = property19.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField21 = property19.getField();
        int int22 = dateTimeField21.getMaximumValue();
        java.util.Locale locale26 = new java.util.Locale("fra", "");
        java.util.Set<java.lang.String> strSet27 = locale26.getUnicodeLocaleAttributes();
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime();
        boolean boolean30 = localDateTime28.isBefore((org.joda.time.ReadablePartial) localDateTime29);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime29.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property33 = localDateTime29.dayOfMonth();
        org.joda.time.DurationField durationField34 = property33.getRangeDurationField();
        boolean boolean35 = strSet27.contains((java.lang.Object) durationField34);
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime();
        boolean boolean38 = localDateTime36.isBefore((org.joda.time.ReadablePartial) localDateTime37);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime37.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property41 = localDateTime37.dayOfMonth();
        boolean boolean42 = property41.isLeap();
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone43);
        java.util.Locale locale46 = java.util.Locale.CHINESE;
        java.lang.String str47 = dateTimeZone43.getName((long) (short) 0, locale46);
        java.lang.String str48 = property41.getAsShortText(locale46);
        boolean boolean49 = strSet27.equals((java.lang.Object) locale46);
        java.lang.String str50 = locale46.getISO3Country();
        java.lang.String str51 = dateTimeField21.getAsText(0, locale46);
        org.joda.time.LocalDateTime localDateTime52 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime53 = new org.joda.time.LocalDateTime();
        boolean boolean54 = localDateTime52.isBefore((org.joda.time.ReadablePartial) localDateTime53);
        org.joda.time.LocalDateTime localDateTime56 = localDateTime53.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property57 = localDateTime53.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime58 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime59 = new org.joda.time.LocalDateTime();
        boolean boolean60 = localDateTime58.isBefore((org.joda.time.ReadablePartial) localDateTime59);
        org.joda.time.LocalDateTime localDateTime62 = localDateTime59.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property63 = localDateTime59.dayOfMonth();
        java.util.Locale locale64 = java.util.Locale.FRENCH;
        java.util.Set<java.lang.String> strSet65 = locale64.getUnicodeLocaleAttributes();
        java.lang.String str66 = locale64.getVariant();
        java.lang.String str67 = property63.getAsText(locale64);
        java.lang.String str68 = property57.getAsShortText(locale64);
        org.joda.time.LocalDateTime localDateTime69 = property57.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime localDateTime70 = property57.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime71 = property57.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime73 = localDateTime71.withYear((-1));
        int int74 = localDateTime71.getDayOfMonth();
        java.util.Locale locale79 = new java.util.Locale("11", "weekyear", "fra");
        java.lang.String str80 = locale79.getDisplayName();
        java.lang.String str81 = dateTimeField21.getAsText((org.joda.time.ReadablePartial) localDateTime71, 9, locale79);
        java.util.Locale locale82 = java.util.Locale.GERMAN;
        java.lang.String str83 = locale79.getDisplayScript(locale82);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str84 = localDateTime10.toString("2022-02-11T09:47:57.569", locale79);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 6 + "'", int8 == 6);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 31 + "'", int22 == 31);
        org.junit.Assert.assertEquals(locale26.toString(), "fra");
        org.junit.Assert.assertNotNull(strSet27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "zh");
// flaky:         org.junit.Assert.assertEquals("'" + str47 + "' != '" + "+00:00:00.117" + "'", str47, "+00:00:00.117");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "11" + "'", str48, "11");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "0" + "'", str51, "0");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "11" + "'", str67, "11");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "11" + "'", str68, "11");
        org.junit.Assert.assertNotNull(localDateTime69);
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertNotNull(localDateTime71);
        org.junit.Assert.assertNotNull(localDateTime73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 28 + "'", int74 == 28);
        org.junit.Assert.assertEquals(locale79.toString(), "11_WEEKYEAR_fra");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "11 (WEEKYEAR,fra)" + "'", str80, "11 (WEEKYEAR,fra)");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "9" + "'", str81, "9");
        org.junit.Assert.assertNotNull(locale82);
        org.junit.Assert.assertEquals(locale82.toString(), "de");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "" + "'", str83, "");
    }

    @Test
    public void test00357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00357");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale.Builder builder3 = builder0.setLanguage("");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder6 = builder3.setUnicodeLocaleKeyword("100", "cor\351en");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale keyword key: 100 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
    }

    @Test
    public void test00358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00358");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale.Builder builder3 = builder0.setLanguage("");
        java.util.Locale.Builder builder4 = builder3.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder6 = builder4.setLanguageTag("2022-02-11T09:47:58.748");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Invalid subtag: 2022 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
    }

    @Test
    public void test00359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00359");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        int int2 = dateTimeZone0.getStandardOffset((long) (-100));
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime(dateTimeZone0);
        java.util.TimeZone timeZone4 = dateTimeZone0.toTimeZone();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        int int6 = localDateTime5.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.minusMonths((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minusMonths((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.plusYears(10);
        java.util.Date date13 = localDateTime12.toDate();
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.fromDateFields(date13);
        boolean boolean15 = timeZone4.inDaylightTime(date13);
        org.junit.Assert.assertNotNull(dateTimeZone0);
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 117 + "'", int2 == 117);
        org.junit.Assert.assertNotNull(timeZone4);
// flaky:         org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 22 + "'", int6 == 22);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(date13);
// flaky:         org.junit.Assert.assertEquals(date13.toString(), "Wed Feb 11 09:48:12 GMT 2032");
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test00360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00360");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        int int2 = dateTimeZone0.getStandardOffset((long) (-100));
        java.util.TimeZone timeZone3 = dateTimeZone0.toTimeZone();
        java.util.TimeZone timeZone4 = dateTimeZone0.toTimeZone();
        boolean boolean5 = timeZone4.useDaylightTime();
        org.junit.Assert.assertNotNull(dateTimeZone0);
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 117 + "'", int2 == 117);
        org.junit.Assert.assertNotNull(timeZone3);
// flaky:         org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone4);
// flaky:         org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test00361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00361");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((-35274908));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Offset is too large");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00362");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        int int1 = localDateTime0.getYearOfCentury();
        int int2 = localDateTime0.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.minusMillis((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withYear(83);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime8 = localDateTime4.withMillisOfSecond((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1 for millisOfSecond must be in the range [0,999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 22 + "'", int1 == 22);
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 12 + "'", int2 == 12);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
    }

    @Test
    public void test00363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00363");
        int int2 = org.joda.time.field.FieldUtils.safeMultiplyToInt((long) 8, 709L);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 5672 + "'", int2 == 5672);
    }

    @Test
    public void test00364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00364");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("deu");
        java.util.TimeZone.setDefault(timeZone1);
        java.util.Locale locale4 = java.util.Locale.forLanguageTag("");
        java.lang.String str5 = timeZone1.getDisplayName(locale4);
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Greenwich Mean Time" + "'", str5, "Greenwich Mean Time");
    }

    @Test
    public void test00365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00365");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((int) (short) 100, (-35274908), (int) 'a', 5200, (-120), 4);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 5200 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00366");
        long long2 = org.joda.time.field.FieldUtils.safeAdd((long) 293, 13609310L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 13609603L + "'", long2 == 13609603L);
    }

    @Test
    public void test00367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00367");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property5 = localDateTime1.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime6 = property5.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField7 = property5.getField();
        org.joda.time.DurationField durationField8 = dateTimeField7.getLeapDurationField();
        int int9 = dateTimeField7.getMaximumValue();
        org.joda.time.DurationField durationField10 = dateTimeField7.getRangeDurationField();
        java.util.Locale locale15 = new java.util.Locale("fra", "");
        java.util.Set<java.lang.String> strSet16 = locale15.getUnicodeLocaleAttributes();
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime();
        boolean boolean19 = localDateTime17.isBefore((org.joda.time.ReadablePartial) localDateTime18);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime18.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property22 = localDateTime18.dayOfMonth();
        org.joda.time.DurationField durationField23 = property22.getRangeDurationField();
        boolean boolean24 = strSet16.contains((java.lang.Object) durationField23);
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime();
        boolean boolean27 = localDateTime25.isBefore((org.joda.time.ReadablePartial) localDateTime26);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime26.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property30 = localDateTime26.dayOfMonth();
        boolean boolean31 = property30.isLeap();
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone32);
        java.util.Locale locale35 = java.util.Locale.CHINESE;
        java.lang.String str36 = dateTimeZone32.getName((long) (short) 0, locale35);
        java.lang.String str37 = property30.getAsShortText(locale35);
        boolean boolean38 = strSet16.equals((java.lang.Object) locale35);
        java.lang.String str39 = locale35.getISO3Country();
        java.util.Locale locale42 = new java.util.Locale("fra", "");
        java.util.Set<java.lang.String> strSet43 = locale42.getUnicodeLocaleAttributes();
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime();
        boolean boolean46 = localDateTime44.isBefore((org.joda.time.ReadablePartial) localDateTime45);
        org.joda.time.LocalDateTime localDateTime48 = localDateTime45.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property49 = localDateTime45.dayOfMonth();
        org.joda.time.DurationField durationField50 = property49.getRangeDurationField();
        boolean boolean51 = strSet43.contains((java.lang.Object) durationField50);
        org.joda.time.LocalDateTime localDateTime52 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime53 = new org.joda.time.LocalDateTime();
        boolean boolean54 = localDateTime52.isBefore((org.joda.time.ReadablePartial) localDateTime53);
        org.joda.time.LocalDateTime localDateTime56 = localDateTime53.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property57 = localDateTime53.dayOfMonth();
        boolean boolean58 = property57.isLeap();
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone59);
        java.util.Locale locale62 = java.util.Locale.CHINESE;
        java.lang.String str63 = dateTimeZone59.getName((long) (short) 0, locale62);
        java.lang.String str64 = property57.getAsShortText(locale62);
        boolean boolean65 = strSet43.equals((java.lang.Object) locale62);
        java.lang.String str66 = locale62.getISO3Country();
        java.lang.String str67 = locale62.getDisplayLanguage();
        java.lang.String str68 = locale35.getDisplayCountry(locale62);
        // The following exception was thrown during execution in test generation
        try {
            long long69 = dateTimeField7.set((long) 704, "monthOfYear", locale35);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"monthOfYear\" for dayOfMonth is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNull(durationField8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 31 + "'", int9 == 31);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertEquals(locale15.toString(), "fra");
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "zh");
// flaky:         org.junit.Assert.assertEquals("'" + str36 + "' != '" + "+00:00:00.117" + "'", str36, "+00:00:00.117");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "11" + "'", str37, "11");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertEquals(locale42.toString(), "fra");
        org.junit.Assert.assertNotNull(strSet43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(durationField50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(dateTimeZone59);
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "zh");
// flaky:         org.junit.Assert.assertEquals("'" + str63 + "' != '" + "+00:00:00.117" + "'", str63, "+00:00:00.117");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "11" + "'", str64, "11");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "Chinese" + "'", str67, "Chinese");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
    }

    @Test
    public void test00368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00368");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime1.plusMinutes((int) '#');
        org.joda.time.LocalDateTime localDateTime8 = localDateTime1.minusMinutes((int) (short) 1);
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.LocalDateTime localDateTime11 = localDateTime1.withDurationAdded(readableDuration9, (int) (short) 100);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime1.minusWeeks((int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime15 = localDateTime1.withMinuteOfHour((-1));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
    }

    @Test
    public void test00369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00369");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property5 = localDateTime1.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime6 = property5.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField7 = property5.getField();
        long long9 = dateTimeField7.remainder((-1L));
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = dateTimeField7.getType();
        long long13 = dateTimeField7.getDifferenceAsLong(52L, (long) 10);
        java.util.Locale locale15 = java.util.Locale.ITALIAN;
        java.lang.String str16 = dateTimeField7.getAsText((int) (short) 0, locale15);
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.minusMillis((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.plusDays(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime19.withField(dateTimeFieldType22, 0);
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime();
        boolean boolean27 = localDateTime25.isBefore((org.joda.time.ReadablePartial) localDateTime26);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime26.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime26.plusMinutes((int) '#');
        org.joda.time.LocalDateTime localDateTime33 = localDateTime26.minusMinutes((int) (short) 1);
        boolean boolean34 = localDateTime24.isAfter((org.joda.time.ReadablePartial) localDateTime33);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime33.plusYears((int) 'x');
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime40 = localDateTime38.minusMillis((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime40.plusDays(0);
        org.joda.time.LocalDateTime localDateTime44 = localDateTime42.plusMillis((int) '#');
        int[] intArray45 = localDateTime42.getValues();
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray47 = dateTimeField7.set((org.joda.time.ReadablePartial) localDateTime33, 1969, intArray45, 20);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1969");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 86399999L + "'", long9 == 86399999L);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "it");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "0" + "'", str16, "0");
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(intArray45);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[2022, 2, 11, 35293259]");
    }

    @Test
    public void test00370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00370");
        int int2 = org.joda.time.field.FieldUtils.safeMultiply((-120), 575);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-69000) + "'", int2 == (-69000));
    }

    @Test
    public void test00371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00371");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds((int) (byte) 100);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = null;
        java.lang.String str6 = localDateTime1.toString(dateTimeFormatter5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        org.joda.time.LocalDateTime.Property property8 = localDateTime1.property(dateTimeFieldType7);
        org.joda.time.LocalDateTime localDateTime9 = property8.roundHalfFloorCopy();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime11 = property8.setCopy("2022-02-11T09:48:02.991");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2022-02-11T09:48:02.991\" for clockhourOfHalfday is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "2022-02-11T09:48:13.349" + "'", str6, "2022-02-11T09:48:13.349");
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime9);
    }

    @Test
    public void test00372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00372");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property5 = localDateTime1.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime6 = property5.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField7 = property5.getField();
        org.joda.time.LocalDateTime localDateTime8 = property5.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime();
        boolean boolean11 = localDateTime9.isBefore((org.joda.time.ReadablePartial) localDateTime10);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime10.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property14 = localDateTime10.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime15 = property14.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField16 = property14.getField();
        int int17 = property14.getMaximumValueOverall();
        org.joda.time.LocalDateTime localDateTime19 = property14.addToCopy(0);
        org.joda.time.LocalDateTime localDateTime21 = property14.addToCopy(1);
        org.joda.time.LocalDateTime localDateTime23 = property14.addToCopy((long) (byte) 1);
        org.joda.time.LocalDateTime localDateTime24 = property14.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime8.withFields((org.joda.time.ReadablePartial) localDateTime24);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.minusDays(31);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.plusMillis(556);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 31 + "'", int17 == 31);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
    }

    @Test
    public void test00373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00373");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property5 = localDateTime1.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime6 = property5.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField7 = property5.getField();
        long long9 = dateTimeField7.remainder((-1L));
        org.joda.time.DurationField durationField10 = dateTimeField7.getRangeDurationField();
        int int12 = dateTimeField7.get((long) 112);
        int int13 = dateTimeField7.getMinimumValue();
        // The following exception was thrown during execution in test generation
        try {
            long long16 = dateTimeField7.set(35283490L, "2022-02-11T09:48:01.076");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2022-02-11T09:48:01.076\" for dayOfMonth is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 86399999L + "'", long9 == 86399999L);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
    }

    @Test
    public void test00374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00374");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        int int2 = dateTimeZone0.getStandardOffset((long) (-100));
        int int4 = dateTimeZone0.getOffsetFromLocal(0L);
        java.lang.String str5 = dateTimeZone0.getID();
        org.junit.Assert.assertNotNull(dateTimeZone0);
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 117 + "'", int2 == 117);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 117 + "'", int4 == 117);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00:00.117" + "'", str5, "+00:00:00.117");
    }

    @Test
    public void test00375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00375");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        java.util.Locale locale3 = null;
        java.lang.String str4 = dateTimeZone1.getName((long) (short) 10, locale3);
        long long6 = dateTimeZone0.getMillisKeepLocal(dateTimeZone1, (long) 874);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        long long9 = dateTimeZone1.getMillisKeepLocal(dateTimeZone7, (long) '4');
        int int11 = dateTimeZone1.getOffsetFromLocal((long) 83);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.minusMillis((int) (byte) 1);
        java.lang.String str15 = localDateTime14.toString();
        org.joda.time.DateTime dateTime16 = localDateTime14.toDateTime();
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.minusMillis((int) (byte) 1);
        java.lang.String str20 = localDateTime19.toString();
        org.joda.time.DateTime dateTime21 = localDateTime19.toDateTime();
        boolean boolean22 = dateTime16.isEqual((org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.minusMillis((int) (byte) 1);
        java.lang.String str26 = localDateTime25.toString();
        org.joda.time.DateTime dateTime27 = localDateTime25.toDateTime();
        boolean boolean28 = dateTime16.isEqual((org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.minusMillis((int) (byte) 1);
        java.lang.String str32 = localDateTime31.toString();
        org.joda.time.DateTime dateTime33 = localDateTime31.toDateTime();
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime36 = localDateTime34.minusMillis((int) (byte) 1);
        java.lang.String str37 = localDateTime36.toString();
        org.joda.time.DateTime dateTime38 = localDateTime36.toDateTime();
        boolean boolean39 = dateTime33.isEqual((org.joda.time.ReadableInstant) dateTime38);
        boolean boolean40 = dateTime16.isEqual((org.joda.time.ReadableInstant) dateTime38);
        int int41 = dateTimeZone1.getOffset((org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.DateTimeZone dateTimeZone42 = dateTime38.getZone();
        int int44 = dateTimeZone42.getOffsetFromLocal(86400000L);
        java.lang.String str45 = dateTimeZone42.toString();
        java.util.TimeZone timeZone46 = dateTimeZone42.toTimeZone();
        // The following exception was thrown during execution in test generation
        try {
            java.time.ZoneId zoneId47 = timeZone46.toZoneId();
// flaky:             org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid ID for ZoneOffset, invalid format: +00:00:00.117");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.117" + "'", str4, "+00:00:00.117");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 874L + "'", long6 == 874L);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 52L + "'", long9 == 52L);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 117 + "'", int11 == 117);
        org.junit.Assert.assertNotNull(localDateTime14);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "2022-02-11T09:48:13.522" + "'", str15, "2022-02-11T09:48:13.522");
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(localDateTime19);
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "2022-02-11T09:48:13.522" + "'", str20, "2022-02-11T09:48:13.522");
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(localDateTime25);
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "2022-02-11T09:48:13.522" + "'", str26, "2022-02-11T09:48:13.522");
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(localDateTime31);
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "2022-02-11T09:48:13.522" + "'", str32, "2022-02-11T09:48:13.522");
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(localDateTime36);
// flaky:         org.junit.Assert.assertEquals("'" + str37 + "' != '" + "2022-02-11T09:48:13.522" + "'", str37, "2022-02-11T09:48:13.522");
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int41 + "' != '" + 117 + "'", int41 == 117);
        org.junit.Assert.assertNotNull(dateTimeZone42);
// flaky:         org.junit.Assert.assertTrue("'" + int44 + "' != '" + 117 + "'", int44 == 117);
// flaky:         org.junit.Assert.assertEquals("'" + str45 + "' != '" + "+00:00:00.117" + "'", str45, "+00:00:00.117");
        org.junit.Assert.assertNotNull(timeZone46);
// flaky:         org.junit.Assert.assertEquals(timeZone46.getDisplayName(), "GMT+00:00");
    }

    @Test
    public void test00376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00376");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("2022-02-11T09:47:52.375", strMap1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=2022-02-11t09:47:52.375");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00377");
        java.util.Locale locale0 = java.util.Locale.ITALIAN;
        java.lang.String str1 = locale0.getDisplayCountry();
        java.lang.String str2 = locale0.getVariant();
        java.util.Set<java.lang.String> strSet3 = locale0.getUnicodeLocaleAttributes();
        java.util.Iterator<java.lang.String> strItor4 = strSet3.iterator();
        int int5 = strSet3.size();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(strItor4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
    }

    @Test
    public void test00378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00378");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime1.plusMinutes((int) '#');
        org.joda.time.LocalDateTime localDateTime8 = localDateTime1.minusMinutes((int) (short) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.monthOfYear();
        boolean boolean10 = localDateTime8.isSupported(dateTimeFieldType9);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.LocalDateTime localDateTime13 = localDateTime8.withPeriodAdded(readablePeriod11, 28);
        int int14 = localDateTime13.getHourOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime16 = localDateTime13.withMonthOfYear(86399999);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 86399999 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 9 + "'", int14 == 9);
    }

    @Test
    public void test00379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00379");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property5 = localDateTime1.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime6 = property5.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField7 = property5.getField();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = property5.getFieldType();
        org.joda.time.DurationField durationField9 = property5.getLeapDurationField();
        org.joda.time.LocalDateTime localDateTime10 = property5.withMinimumValue();
        org.joda.time.ReadablePartial readablePartial11 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean12 = localDateTime10.isEqual(readablePartial11);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Partial cannot be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNull(durationField9);
        org.junit.Assert.assertNotNull(localDateTime10);
    }

    @Test
    public void test00380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00380");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.dayOfMonth();
        org.joda.time.LocalDateTime.Property property4 = localDateTime0.weekyear();
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.LocalDateTime localDateTime7 = localDateTime0.withPeriodAdded(readablePeriod5, (-100));
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withYearOfCentury(112);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 112 for yearOfCentury must be in the range [0,99]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime7);
    }

    @Test
    public void test00381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00381");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) 'u');
        long long5 = dateTimeZone1.convertLocalToUTC((long) 1, false, 822L);
        java.util.TimeZone timeZone6 = dateTimeZone1.toTimeZone();
        boolean boolean7 = timeZone6.observesDaylightTime();
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime();
        int int9 = localDateTime8.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime8.minusMonths((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minusMonths((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.plusYears(10);
        java.util.Date date16 = localDateTime15.toDate();
        org.joda.time.LocalDateTime localDateTime17 = org.joda.time.LocalDateTime.fromDateFields(date16);
        boolean boolean18 = timeZone6.inDaylightTime(date16);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-116L) + "'", long5 == (-116L));
        org.junit.Assert.assertNotNull(timeZone6);
        org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 22 + "'", int9 == 22);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(date16);
// flaky:         org.junit.Assert.assertEquals(date16.toString(), "Wed Feb 11 09:48:13 GMT 2032");
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test00382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00382");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(8, 35282145, 35293506, 59, (int) ' ');
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 59 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00383");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property5 = localDateTime1.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime6 = property5.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField7 = property5.getField();
        int int8 = property5.getMaximumValueOverall();
        org.joda.time.LocalDateTime localDateTime10 = property5.addToCopy(0);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withWeekOfWeekyear(2022);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2022 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 31 + "'", int8 == 31);
        org.junit.Assert.assertNotNull(localDateTime10);
    }

    @Test
    public void test00384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00384");
        java.util.Locale locale3 = new java.util.Locale("11", "weekyear", "fra");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str5 = locale3.getExtension(' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed extension key:  ");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(locale3.toString(), "11_WEEKYEAR_fra");
    }

    @Test
    public void test00385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00385");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.minusMillis((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.plusDays(0);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime();
        boolean boolean7 = localDateTime5.isBefore((org.joda.time.ReadablePartial) localDateTime6);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime6.plusMinutes((int) '#');
        org.joda.time.LocalDateTime localDateTime13 = localDateTime6.plusMonths(0);
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.LocalDateTime localDateTime16 = localDateTime13.withDurationAdded(readableDuration14, (int) (byte) -1);
        int int17 = localDateTime4.compareTo((org.joda.time.ReadablePartial) localDateTime16);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.getDefault();
        java.util.Locale locale21 = null;
        java.lang.String str22 = dateTimeZone19.getName((long) (short) 10, locale21);
        long long24 = dateTimeZone18.getMillisKeepLocal(dateTimeZone19, (long) 874);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.getDefault();
        long long27 = dateTimeZone19.getMillisKeepLocal(dateTimeZone25, (long) '4');
        int int29 = dateTimeZone19.getStandardOffset((long) ' ');
        java.util.Locale locale33 = new java.util.Locale("", "weekyear");
        java.util.Set<java.lang.String> strSet34 = locale33.getUnicodeLocaleAttributes();
        java.lang.String str35 = dateTimeZone19.getShortName((long) (byte) 1, locale33);
        org.joda.time.DateTime dateTime36 = localDateTime4.toDateTime(dateTimeZone19);
        java.lang.String str38 = dateTimeZone19.getNameKey(4060802022L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone19);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+00:00:00.117" + "'", str22, "+00:00:00.117");
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 874L + "'", long24 == 874L);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 52L + "'", long27 == 52L);
// flaky:         org.junit.Assert.assertTrue("'" + int29 + "' != '" + 117 + "'", int29 == 117);
        org.junit.Assert.assertEquals(locale33.toString(), "_WEEKYEAR");
        org.junit.Assert.assertNotNull(strSet34);
// flaky:         org.junit.Assert.assertEquals("'" + str35 + "' != '" + "+00:00:00.117" + "'", str35, "+00:00:00.117");
        org.junit.Assert.assertNotNull(dateTime36);
// flaky:         org.junit.Assert.assertNull(str38);
    }

    @Test
    public void test00386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00386");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("deu");
        java.util.TimeZone.setDefault(timeZone1);
        java.util.Locale locale5 = new java.util.Locale("fra", "");
        java.util.Set<java.lang.String> strSet6 = locale5.getUnicodeLocaleAttributes();
        java.lang.String str7 = locale5.getScript();
        java.lang.String str8 = timeZone1.getDisplayName(locale5);
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertEquals(locale5.toString(), "fra");
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Greenwich Mean Time" + "'", str8, "Greenwich Mean Time");
    }

    @Test
    public void test00387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00387");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 83);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusSeconds(83);
        org.joda.time.LocalDateTime.Property property4 = localDateTime1.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime5 = property4.roundHalfCeilingCopy();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime7 = property4.setCopy("");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"\" for dayOfWeek is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime5);
    }

    @Test
    public void test00388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00388");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.minusMillis((int) (byte) 1);
        java.lang.String str3 = localDateTime2.toString();
        org.joda.time.DateTime dateTime4 = localDateTime2.toDateTime();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusMillis((int) (byte) 1);
        java.lang.String str8 = localDateTime7.toString();
        org.joda.time.DateTime dateTime9 = localDateTime7.toDateTime();
        boolean boolean10 = dateTime4.isEqual((org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minusMillis((int) (byte) 1);
        java.lang.String str14 = localDateTime13.toString();
        org.joda.time.DateTime dateTime15 = localDateTime13.toDateTime();
        boolean boolean16 = dateTime4.isEqual((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.minusMillis((int) (byte) 1);
        java.lang.String str20 = localDateTime19.toString();
        org.joda.time.DateTime dateTime21 = localDateTime19.toDateTime();
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.minusMillis((int) (byte) 1);
        java.lang.String str25 = localDateTime24.toString();
        org.joda.time.DateTime dateTime26 = localDateTime24.toDateTime();
        boolean boolean27 = dateTime21.isEqual((org.joda.time.ReadableInstant) dateTime26);
        boolean boolean28 = dateTime4.isEqual((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone29);
        java.util.Locale locale32 = java.util.Locale.CHINESE;
        java.lang.String str33 = dateTimeZone29.getName((long) (short) 0, locale32);
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime36 = localDateTime34.minusMillis((int) (byte) 1);
        java.lang.String str37 = localDateTime36.toString();
        org.joda.time.DateTime dateTime38 = localDateTime36.toDateTime();
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime41 = localDateTime39.minusMillis((int) (byte) 1);
        java.lang.String str42 = localDateTime41.toString();
        org.joda.time.DateTime dateTime43 = localDateTime41.toDateTime();
        boolean boolean44 = dateTime38.isEqual((org.joda.time.ReadableInstant) dateTime43);
        int int45 = dateTimeZone29.getOffset((org.joda.time.ReadableInstant) dateTime38);
        boolean boolean46 = dateTime26.isAfter((org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone47);
        java.util.Locale locale50 = java.util.Locale.CHINESE;
        java.lang.String str51 = dateTimeZone47.getName((long) (short) 0, locale50);
        org.joda.time.LocalDateTime localDateTime52 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime54 = localDateTime52.minusMillis((int) (byte) 1);
        java.lang.String str55 = localDateTime54.toString();
        org.joda.time.DateTime dateTime56 = localDateTime54.toDateTime();
        org.joda.time.LocalDateTime localDateTime57 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime59 = localDateTime57.minusMillis((int) (byte) 1);
        java.lang.String str60 = localDateTime59.toString();
        org.joda.time.DateTime dateTime61 = localDateTime59.toDateTime();
        boolean boolean62 = dateTime56.isEqual((org.joda.time.ReadableInstant) dateTime61);
        int int63 = dateTimeZone47.getOffset((org.joda.time.ReadableInstant) dateTime56);
        org.joda.time.DateTimeFieldType dateTimeFieldType64 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str65 = dateTimeFieldType64.toString();
        java.lang.String str66 = dateTimeFieldType64.toString();
        boolean boolean67 = dateTime56.isSupported(dateTimeFieldType64);
        int int68 = dateTime26.compareTo((org.joda.time.ReadableInstant) dateTime56);
        long long69 = dateTime26.getMillis();
        org.junit.Assert.assertNotNull(localDateTime2);
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "2022-02-11T09:48:14.543" + "'", str3, "2022-02-11T09:48:14.543");
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localDateTime7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "2022-02-11T09:48:14.543" + "'", str8, "2022-02-11T09:48:14.543");
        org.junit.Assert.assertNotNull(dateTime9);
// flaky:         org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(localDateTime13);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "2022-02-11T09:48:14.543" + "'", str14, "2022-02-11T09:48:14.543");
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(localDateTime19);
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "2022-02-11T09:48:14.543" + "'", str20, "2022-02-11T09:48:14.543");
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(localDateTime24);
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "2022-02-11T09:48:14.543" + "'", str25, "2022-02-11T09:48:14.543");
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
// flaky:         org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "zh");
// flaky:         org.junit.Assert.assertEquals("'" + str33 + "' != '" + "+00:00:00.117" + "'", str33, "+00:00:00.117");
        org.junit.Assert.assertNotNull(localDateTime36);
// flaky:         org.junit.Assert.assertEquals("'" + str37 + "' != '" + "2022-02-11T09:48:14.543" + "'", str37, "2022-02-11T09:48:14.543");
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(localDateTime41);
// flaky:         org.junit.Assert.assertEquals("'" + str42 + "' != '" + "2022-02-11T09:48:14.543" + "'", str42, "2022-02-11T09:48:14.543");
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int45 + "' != '" + 117 + "'", int45 == 117);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "zh");
// flaky:         org.junit.Assert.assertEquals("'" + str51 + "' != '" + "+00:00:00.117" + "'", str51, "+00:00:00.117");
        org.junit.Assert.assertNotNull(localDateTime54);
// flaky:         org.junit.Assert.assertEquals("'" + str55 + "' != '" + "2022-02-11T09:48:14.543" + "'", str55, "2022-02-11T09:48:14.543");
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(localDateTime59);
// flaky:         org.junit.Assert.assertEquals("'" + str60 + "' != '" + "2022-02-11T09:48:14.543" + "'", str60, "2022-02-11T09:48:14.543");
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int63 + "' != '" + 117 + "'", int63 == 117);
        org.junit.Assert.assertNotNull(dateTimeFieldType64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "weekyear" + "'", str65, "weekyear");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "weekyear" + "'", str66, "weekyear");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + long69 + "' != '" + 1644572894426L + "'", long69 == 1644572894426L);
    }

    @Test
    public void test00389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00389");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        java.util.Locale locale2 = java.util.Locale.getDefault(category0);
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime();
        boolean boolean5 = localDateTime3.isBefore((org.joda.time.ReadablePartial) localDateTime4);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property8 = localDateTime4.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime9 = property8.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField10 = property8.getField();
        int int13 = dateTimeField10.getDifference(1L, 86399999L);
        java.lang.String str14 = dateTimeField10.toString();
        java.util.Locale.LanguageRange[] languageRangeArray16 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList17 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList17, languageRangeArray16);
        java.util.Locale[] localeArray19 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList20 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList20, localeArray19);
        java.util.Locale locale22 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList17, (java.util.Collection<java.util.Locale>) localeList20);
        java.util.Locale.LanguageRange[] languageRangeArray23 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList24 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList24, languageRangeArray23);
        java.util.Locale[] localeArray26 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList27 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList27, localeArray26);
        java.util.Locale locale29 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList24, (java.util.Collection<java.util.Locale>) localeList27);
        java.util.Locale.FilteringMode filteringMode30 = null;
        java.util.List<java.util.Locale> localeList31 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList17, (java.util.Collection<java.util.Locale>) localeList27, filteringMode30);
        java.util.Locale locale32 = java.util.Locale.FRENCH;
        java.util.Set<java.lang.String> strSet33 = locale32.getUnicodeLocaleAttributes();
        java.lang.Object[] objArray34 = strSet33.toArray();
        java.util.Locale.FilteringMode filteringMode35 = java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList36 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList17, (java.util.Collection<java.lang.String>) strSet33, filteringMode35);
        java.util.Locale locale37 = java.util.Locale.ITALIAN;
        java.lang.String str38 = locale37.getDisplayCountry();
        boolean boolean39 = strSet33.equals((java.lang.Object) locale37);
        java.lang.String str40 = dateTimeField10.getAsText((long) (short) -1, locale37);
        java.lang.String str41 = locale2.getDisplayName(locale37);
        java.lang.String str42 = locale2.getDisplayName();
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "coordinated universal time_2022-02-11T09:47:52.570_fra");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "coordinated universal time_2022-02-11T09:47:52.570_fra");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "DateTimeField[dayOfMonth]" + "'", str14, "DateTimeField[dayOfMonth]");
        org.junit.Assert.assertNotNull(languageRangeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(localeArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNull(locale22);
        org.junit.Assert.assertNotNull(languageRangeArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(localeArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(locale29);
        org.junit.Assert.assertNotNull(localeList31);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet33);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[]");
        org.junit.Assert.assertTrue("'" + filteringMode35 + "' != '" + java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES + "'", filteringMode35.equals(java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList36);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "it");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "31" + "'", str40, "31");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "coordinated universal time (2022-02-11T09:47:52.570,fra)" + "'", str41, "coordinated universal time (2022-02-11T09:47:52.570,fra)");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "coordinated universal time (2022-02-11T09:47:52.570,fra)" + "'", str42, "coordinated universal time (2022-02-11T09:47:52.570,fra)");
    }

    @Test
    public void test00390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00390");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes((int) 'u', 0);
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        java.util.Locale locale6 = null;
        java.lang.String str7 = dateTimeZone4.getName((long) (short) 10, locale6);
        long long9 = dateTimeZone3.getMillisKeepLocal(dateTimeZone4, (long) 874);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        long long12 = dateTimeZone4.getMillisKeepLocal(dateTimeZone10, (long) '4');
        int int14 = dateTimeZone4.getOffsetFromLocal((long) 83);
        long long16 = dateTimeZone2.getMillisKeepLocal(dateTimeZone4, (long) 0);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone17);
        java.util.Locale locale20 = java.util.Locale.CHINESE;
        java.lang.String str21 = dateTimeZone17.getName((long) (short) 0, locale20);
        long long23 = dateTimeZone2.getMillisKeepLocal(dateTimeZone17, (long) 50);
        java.util.TimeZone timeZone24 = dateTimeZone17.toTimeZone();
        int int25 = timeZone24.getDSTSavings();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:00:00.117" + "'", str7, "+00:00:00.117");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 874L + "'", long9 == 874L);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 52L + "'", long12 == 52L);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 117 + "'", int14 == 117);
// flaky:         org.junit.Assert.assertTrue("'" + long16 + "' != '" + 421199883L + "'", long16 == 421199883L);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "zh");
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+00:00:00.117" + "'", str21, "+00:00:00.117");
// flaky:         org.junit.Assert.assertTrue("'" + long23 + "' != '" + 421199933L + "'", long23 == 421199933L);
        org.junit.Assert.assertNotNull(timeZone24);
// flaky:         org.junit.Assert.assertEquals(timeZone24.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
    }

    @Test
    public void test00391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00391");
        // The following exception was thrown during execution in test generation
        try {
            int int4 = org.joda.time.field.FieldUtils.getWrappedValue((int) '4', 86399999, 19034, 117);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: MIN > MAX");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00392");
        // The following exception was thrown during execution in test generation
        try {
            int int3 = org.joda.time.field.FieldUtils.getWrappedValue(49, 89, 38);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: MIN > MAX");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00393");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.minusMillis((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.plusDays(0);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.plusMillis(22);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        int int8 = localDateTime6.get(dateTimeFieldType7);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime6.withSecondOfMinute(50);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField12 = localDateTime6.getField(5);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 5");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 6 + "'", int8 == 6);
        org.junit.Assert.assertNotNull(localDateTime10);
    }

    @Test
    public void test00394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00394");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Locale[] localeArray3 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList4 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList4, localeArray3);
        java.util.Locale locale6 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList4);
        java.util.Locale.LanguageRange[] languageRangeArray7 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList8 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList8, languageRangeArray7);
        java.util.Locale[] localeArray10 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList11 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList11, localeArray10);
        java.util.Locale locale13 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList8, (java.util.Collection<java.util.Locale>) localeList11);
        java.util.Locale.FilteringMode filteringMode14 = null;
        java.util.List<java.util.Locale> localeList15 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList11, filteringMode14);
        java.util.Locale locale16 = java.util.Locale.FRENCH;
        java.util.Set<java.lang.String> strSet17 = locale16.getUnicodeLocaleAttributes();
        java.lang.Object[] objArray18 = strSet17.toArray();
        java.util.Locale.FilteringMode filteringMode19 = java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList20 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet17, filteringMode19);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.getDefault();
        int int23 = dateTimeZone21.getStandardOffset((long) (-100));
        java.util.TimeZone timeZone24 = dateTimeZone21.toTimeZone();
        int int25 = timeZone24.getRawOffset();
        timeZone24.setRawOffset(50);
        java.lang.String str28 = timeZone24.getID();
        boolean boolean29 = strSet17.equals((java.lang.Object) timeZone24);
        timeZone24.setID("2022-02-11T09:47:54.002");
        java.lang.String str32 = timeZone24.getID();
        // The following exception was thrown during execution in test generation
        try {
            java.time.ZoneId zoneId33 = timeZone24.toZoneId();
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid ID for region-based ZoneId, invalid format: 2022-02-11T09:47:54.002");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localeArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(locale6);
        org.junit.Assert.assertNotNull(languageRangeArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(localeArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(locale13);
        org.junit.Assert.assertNotNull(localeList15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet17);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[]");
        org.junit.Assert.assertTrue("'" + filteringMode19 + "' != '" + java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES + "'", filteringMode19.equals(java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
// flaky:         org.junit.Assert.assertTrue("'" + int23 + "' != '" + 117 + "'", int23 == 117);
        org.junit.Assert.assertNotNull(timeZone24);
        org.junit.Assert.assertEquals(timeZone24.getDisplayName(), "GMT+00:00");
// flaky:         org.junit.Assert.assertTrue("'" + int25 + "' != '" + 117 + "'", int25 == 117);
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "+00:00:00.117" + "'", str28, "+00:00:00.117");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "2022-02-11T09:47:54.002" + "'", str32, "2022-02-11T09:47:54.002");
    }

    @Test
    public void test00395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00395");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusMillis((int) (byte) 1);
        java.lang.String str4 = localDateTime3.toString();
        org.joda.time.DateTime dateTime5 = localDateTime3.toDateTime();
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.minusMillis((int) (byte) 1);
        java.lang.String str9 = localDateTime8.toString();
        org.joda.time.DateTime dateTime10 = localDateTime8.toDateTime();
        boolean boolean11 = dateTime5.isEqual((org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.minusMillis((int) (byte) 1);
        java.lang.String str15 = localDateTime14.toString();
        org.joda.time.DateTime dateTime16 = localDateTime14.toDateTime();
        boolean boolean17 = dateTime5.isEqual((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.Chronology chronology18 = dateTime16.getChronology();
        org.joda.time.LocalDateTime localDateTime19 = org.joda.time.LocalDateTime.now(chronology18);
        org.joda.time.DateTimeField dateTimeField20 = dateTimeFieldType0.getField(chronology18);
        org.joda.time.DurationField durationField21 = dateTimeField20.getRangeDurationField();
        org.joda.time.ReadablePartial readablePartial22 = null;
        java.util.Locale locale23 = java.util.Locale.ITALIAN;
        java.lang.String str24 = locale23.getScript();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str25 = dateTimeField20.getAsText(readablePartial22, locale23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(localDateTime3);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022-02-11T09:48:14.904" + "'", str4, "2022-02-11T09:48:14.904");
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(localDateTime8);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "2022-02-11T09:48:14.904" + "'", str9, "2022-02-11T09:48:14.904");
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(localDateTime14);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "2022-02-11T09:48:14.904" + "'", str15, "2022-02-11T09:48:14.904");
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "it");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
    }

    @Test
    public void test00396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00396");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property5 = localDateTime1.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime6 = property5.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField7 = property5.getField();
        int int8 = property5.getMaximumValueOverall();
        org.joda.time.LocalDateTime localDateTime10 = property5.addToCopy(0);
        org.joda.time.LocalDateTime localDateTime12 = property5.addToCopy(1);
        org.joda.time.LocalDateTime localDateTime14 = property5.addToCopy((long) (byte) 1);
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((long) '#');
        int int17 = property5.compareTo((org.joda.time.ReadablePartial) localDateTime16);
        java.util.Locale locale19 = java.util.Locale.CHINESE;
        java.lang.String str20 = locale19.toLanguageTag();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime21 = property5.setCopy("2022-02-11T09:47:54.576", locale19);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2022-02-11T09:47:54.576\" for dayOfMonth is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 31 + "'", int8 == 31);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "zh" + "'", str20, "zh");
    }

    @Test
    public void test00397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00397");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property5 = localDateTime1.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime6 = property5.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField7 = property5.getField();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone8);
        java.util.Locale locale11 = java.util.Locale.CHINESE;
        java.lang.String str12 = dateTimeZone8.getName((long) (short) 0, locale11);
        int int13 = dateTimeField7.getMaximumShortTextLength(locale11);
        long long15 = dateTimeField7.roundHalfFloor(71500L);
        long long17 = dateTimeField7.remainder((long) 738);
        org.joda.time.ReadablePartial readablePartial18 = null;
        java.util.Locale locale21 = new java.util.Locale("fra", "");
        java.util.Set<java.lang.String> strSet22 = locale21.getUnicodeLocaleAttributes();
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime();
        boolean boolean25 = localDateTime23.isBefore((org.joda.time.ReadablePartial) localDateTime24);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime24.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property28 = localDateTime24.dayOfMonth();
        org.joda.time.DurationField durationField29 = property28.getRangeDurationField();
        boolean boolean30 = strSet22.contains((java.lang.Object) durationField29);
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime();
        boolean boolean33 = localDateTime31.isBefore((org.joda.time.ReadablePartial) localDateTime32);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime32.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property36 = localDateTime32.dayOfMonth();
        boolean boolean37 = property36.isLeap();
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone38);
        java.util.Locale locale41 = java.util.Locale.CHINESE;
        java.lang.String str42 = dateTimeZone38.getName((long) (short) 0, locale41);
        java.lang.String str43 = property36.getAsShortText(locale41);
        boolean boolean44 = strSet22.equals((java.lang.Object) locale41);
        java.lang.String str45 = locale41.getISO3Country();
        java.lang.String str46 = locale41.getDisplayLanguage();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str47 = dateTimeField7.getAsShortText(readablePartial18, locale41);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "zh");
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00:00.117" + "'", str12, "+00:00:00.117");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 738L + "'", long17 == 738L);
        org.junit.Assert.assertEquals(locale21.toString(), "fra");
        org.junit.Assert.assertNotNull(strSet22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "zh");
// flaky:         org.junit.Assert.assertEquals("'" + str42 + "' != '" + "+00:00:00.117" + "'", str42, "+00:00:00.117");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "11" + "'", str43, "11");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
// flaky:         org.junit.Assert.assertEquals("'" + str46 + "' != '" + "chinois" + "'", str46, "chinois");
    }

    @Test
    public void test00398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00398");
        long long2 = org.joda.time.field.FieldUtils.safeMultiply((long) (byte) -1, (-3600000));
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 3600000L + "'", long2 == 3600000L);
    }

    @Test
    public void test00399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00399");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plus(readableDuration3);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withMinuteOfHour(59);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.getDefault();
        java.util.Locale locale11 = null;
        java.lang.String str12 = dateTimeZone9.getName((long) (short) 10, locale11);
        long long14 = dateTimeZone8.getMillisKeepLocal(dateTimeZone9, (long) 874);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.getDefault();
        long long17 = dateTimeZone9.getMillisKeepLocal(dateTimeZone15, (long) '4');
        int int19 = dateTimeZone9.getOffsetFromLocal((long) 83);
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime(0L, dateTimeZone9);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.yearOfCentury();
        java.lang.String str22 = dateTimeFieldType21.getName();
        java.lang.String str23 = dateTimeFieldType21.toString();
        org.joda.time.DurationFieldType durationFieldType24 = dateTimeFieldType21.getDurationType();
        org.joda.time.LocalDateTime localDateTime26 = localDateTime20.withFieldAdded(durationFieldType24, 42);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime28 = localDateTime4.withFieldAdded(durationFieldType24, (-432000000));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -431997978 for year must be in the range [-292275054,292278993]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+00:00:00.117" + "'", str12, "+00:00:00.117");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 874L + "'", long14 == 874L);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 52L + "'", long17 == 52L);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 117 + "'", int19 == 117);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "yearOfCentury" + "'", str22, "yearOfCentury");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "yearOfCentury" + "'", str23, "yearOfCentury");
        org.junit.Assert.assertNotNull(durationFieldType24);
        org.junit.Assert.assertNotNull(localDateTime26);
    }

    @Test
    public void test00400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00400");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property5 = localDateTime1.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime6 = property5.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField7 = property5.getField();
        int int8 = property5.getMaximumValueOverall();
        org.joda.time.LocalDateTime localDateTime10 = property5.addToCopy(0);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withYearOfEra(35274908);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime14 = localDateTime10.withDayOfMonth(365);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 365 for dayOfMonth must be in the range [1,28]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 31 + "'", int8 == 31);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
    }

    @Test
    public void test00401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00401");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.minusMillis((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.plusDays(0);
        org.joda.time.LocalDateTime.Property property5 = localDateTime4.dayOfMonth();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime7 = property5.setCopy(924);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 924 for dayOfMonth must be in the range [1,28]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
    }

    @Test
    public void test00402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00402");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property5 = localDateTime1.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime6 = property5.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField7 = property5.getField();
        long long9 = dateTimeField7.remainder((-1L));
        org.joda.time.DurationField durationField10 = dateTimeField7.getRangeDurationField();
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime();
        boolean boolean13 = localDateTime11.isBefore((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime12.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property16 = localDateTime12.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime17 = property16.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField18 = property16.getField();
        int int21 = dateTimeField18.getDifference(1L, 86399999L);
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime();
        int int23 = localDateTime22.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime22.minusMonths((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.minusMonths((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.plusWeeks(22);
        org.joda.time.LocalDateTime.Property property30 = localDateTime29.dayOfMonth();
        java.util.Locale locale35 = new java.util.Locale("11", "weekyear", "fra");
        java.lang.String str36 = locale35.getDisplayName();
        java.lang.String str37 = dateTimeField18.getAsShortText((org.joda.time.ReadablePartial) localDateTime29, (int) (byte) 1, locale35);
        int int38 = dateTimeField7.getMaximumShortTextLength(locale35);
        java.util.Locale locale39 = java.util.Locale.CHINESE;
        java.util.Locale locale42 = new java.util.Locale("fra", "");
        java.util.Set<java.lang.String> strSet43 = locale42.getUnicodeLocaleAttributes();
        java.lang.String str44 = locale42.getScript();
        java.lang.String str45 = locale42.getCountry();
        java.lang.String str46 = locale39.getDisplayLanguage(locale42);
        int int47 = dateTimeField7.getMaximumShortTextLength(locale39);
        long long49 = dateTimeField7.roundFloor((long) (-432000000));
        // The following exception was thrown during execution in test generation
        try {
            long long52 = dateTimeField7.set((long) 1969, "2022-02-11T09:47:59.107");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2022-02-11T09:47:59.107\" for dayOfMonth is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 86399999L + "'", long9 == 86399999L);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 22 + "'", int23 == 22);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertEquals(locale35.toString(), "11_WEEKYEAR_fra");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "11 (WEEKYEAR,fra)" + "'", str36, "11 (WEEKYEAR,fra)");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "1" + "'", str37, "1");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2 + "'", int38 == 2);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "zh");
        org.junit.Assert.assertEquals(locale42.toString(), "fra");
        org.junit.Assert.assertNotNull(strSet43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "Chinese" + "'", str46, "Chinese");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2 + "'", int47 == 2);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + (-432000000L) + "'", long49 == (-432000000L));
    }

    @Test
    public void test00403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00403");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property5 = localDateTime1.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime6 = property5.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField7 = property5.getField();
        long long10 = dateTimeField7.addWrapField((long) (short) 1, (int) (byte) 100);
        int int12 = dateTimeField7.getLeapAmount(0L);
        long long14 = dateTimeField7.roundHalfFloor((long) (-1));
        long long16 = dateTimeField7.roundFloor((long) 222);
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.minusMillis((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.plusDays(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime19.withField(dateTimeFieldType22, 0);
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime();
        boolean boolean27 = localDateTime25.isBefore((org.joda.time.ReadablePartial) localDateTime26);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime26.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime26.plusMinutes((int) '#');
        org.joda.time.LocalDateTime localDateTime33 = localDateTime26.minusMinutes((int) (short) 1);
        boolean boolean34 = localDateTime24.isAfter((org.joda.time.ReadablePartial) localDateTime33);
        org.joda.time.LocalDateTime.Property property35 = localDateTime24.secondOfMinute();
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = property35.getFieldType();
        org.joda.time.LocalDateTime localDateTime37 = property35.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime();
        boolean boolean40 = localDateTime38.isBefore((org.joda.time.ReadablePartial) localDateTime39);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime39.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime44 = localDateTime39.plusMinutes((int) '#');
        org.joda.time.LocalDateTime localDateTime46 = localDateTime39.minusMinutes((int) (short) 1);
        org.joda.time.ReadableDuration readableDuration47 = null;
        org.joda.time.LocalDateTime localDateTime49 = localDateTime39.withDurationAdded(readableDuration47, (int) (short) 100);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter50 = null;
        java.lang.String str51 = localDateTime39.toString(dateTimeFormatter50);
        boolean boolean52 = localDateTime37.isAfter((org.joda.time.ReadablePartial) localDateTime39);
        int int53 = localDateTime37.getMinuteOfHour();
        int int54 = dateTimeField7.getMinimumValue((org.joda.time.ReadablePartial) localDateTime37);
        org.joda.time.LocalDateTime localDateTime56 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime57 = new org.joda.time.LocalDateTime();
        boolean boolean58 = localDateTime56.isBefore((org.joda.time.ReadablePartial) localDateTime57);
        org.joda.time.LocalDateTime localDateTime60 = localDateTime57.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property61 = localDateTime57.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime62 = property61.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField63 = property61.getField();
        long long66 = dateTimeField63.addWrapField((long) 6, (int) (byte) 0);
        java.lang.String str68 = dateTimeField63.getAsShortText((long) (byte) 0);
        java.lang.String str70 = dateTimeField63.getAsShortText((-116L));
        long long72 = dateTimeField63.roundCeiling((long) 11);
        int int73 = dateTimeField63.getMaximumValue();
        java.util.Locale locale75 = java.util.Locale.ITALIAN;
        java.lang.String str76 = locale75.getDisplayCountry();
        java.lang.String str77 = dateTimeField63.getAsText(20, locale75);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str78 = localDateTime37.toString("", locale75);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid pattern specification");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 604800001L + "'", long10 == 604800001L);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(localDateTime49);
// flaky:         org.junit.Assert.assertEquals("'" + str51 + "' != '" + "2022-02-11T09:48:15.440" + "'", str51, "2022-02-11T09:48:15.440");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int53 + "' != '" + 48 + "'", int53 == 48);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 6L + "'", long66 == 6L);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "1" + "'", str68, "1");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "31" + "'", str70, "31");
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 86400000L + "'", long72 == 86400000L);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 31 + "'", int73 == 31);
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "it");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, "");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "20" + "'", str77, "20");
    }

    @Test
    public void test00404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00404");
        long long2 = org.joda.time.field.FieldUtils.safeAdd(35295232L, 0L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 35295232L + "'", long2 == 35295232L);
    }

    @Test
    public void test00405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00405");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(100, (-40));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minutes out of range: -40");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00406");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        int int2 = dateTimeZone0.getStandardOffset((long) (-100));
        java.util.TimeZone timeZone3 = dateTimeZone0.toTimeZone();
        int int4 = timeZone3.getRawOffset();
        timeZone3.setRawOffset(50);
        timeZone3.setRawOffset((int) '4');
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forTimeZone(timeZone3);
// flaky:             org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The datetime zone id '+00:00:00.117' is not recognised");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 117 + "'", int2 == 117);
        org.junit.Assert.assertNotNull(timeZone3);
// flaky:         org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "GMT+00:00");
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 117 + "'", int4 == 117);
    }

    @Test
    public void test00407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00407");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale.Builder builder3 = builder0.setLanguage("");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder5 = builder0.setVariant("2022-02-11T09:48:15.128");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed variant: 2022-02-11T09:48:15.128 [at index 5]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
    }

    @Test
    public void test00408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00408");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property5 = localDateTime1.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime6 = property5.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField7 = property5.getField();
        long long10 = dateTimeField7.addWrapField((long) 6, (int) (byte) 0);
        java.lang.String str12 = dateTimeField7.getAsShortText((long) (byte) 0);
        int int13 = dateTimeField7.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime();
        boolean boolean16 = localDateTime14.isBefore((org.joda.time.ReadablePartial) localDateTime15);
        int[] intArray17 = localDateTime15.getValues();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime15.plusYears((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime();
        boolean boolean22 = localDateTime20.isBefore((org.joda.time.ReadablePartial) localDateTime21);
        int[] intArray23 = localDateTime21.getValues();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime15.withFields((org.joda.time.ReadablePartial) localDateTime21);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.minusMillis((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.minusSeconds((int) '#');
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.withWeekOfWeekyear(50);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter31 = null;
        java.lang.String str32 = localDateTime30.toString(dateTimeFormatter31);
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime();
        boolean boolean36 = localDateTime34.isBefore((org.joda.time.ReadablePartial) localDateTime35);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime35.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property39 = localDateTime35.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime40 = property39.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField41 = property39.getField();
        org.joda.time.DurationField durationField42 = dateTimeField41.getLeapDurationField();
        org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime();
        boolean boolean45 = localDateTime43.isBefore((org.joda.time.ReadablePartial) localDateTime44);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime44.plusSeconds((int) (byte) 100);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter48 = null;
        java.lang.String str49 = localDateTime44.toString(dateTimeFormatter48);
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        org.joda.time.LocalDateTime.Property property51 = localDateTime44.property(dateTimeFieldType50);
        org.joda.time.LocalDateTime localDateTime53 = localDateTime44.minusMinutes((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime54 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime55 = new org.joda.time.LocalDateTime();
        boolean boolean56 = localDateTime54.isBefore((org.joda.time.ReadablePartial) localDateTime55);
        org.joda.time.LocalDateTime localDateTime58 = localDateTime55.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property59 = localDateTime55.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime60 = property59.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField61 = property59.getField();
        long long64 = dateTimeField61.addWrapField((long) (short) 1, (int) (byte) 100);
        int int66 = dateTimeField61.getMinimumValue((-1L));
        org.joda.time.ReadablePartial readablePartial67 = null;
        int[] intArray70 = new int[] { 11 };
        int[] intArray72 = dateTimeField61.addWrapPartial(readablePartial67, 100, intArray70, 0);
        int int73 = dateTimeField41.getMinimumValue((org.joda.time.ReadablePartial) localDateTime44, intArray70);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray75 = dateTimeField7.addWrapPartial((org.joda.time.ReadablePartial) localDateTime30, (int) 'a', intArray70, 575);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 6L + "'", long10 == 6L);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "1" + "'", str12, "1");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 31 + "'", int13 == 31);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(intArray17);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[2022, 2, 11, 35295593]");
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(intArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[2022, 2, 11, 35295593]");
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime30);
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "2022-12-16T09:47:40.493" + "'", str32, "2022-12-16T09:47:40.493");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNull(durationField42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(localDateTime47);
// flaky:         org.junit.Assert.assertEquals("'" + str49 + "' != '" + "2022-02-11T09:48:15.593" + "'", str49, "2022-02-11T09:48:15.593");
        org.junit.Assert.assertNotNull(dateTimeFieldType50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 604800001L + "'", long64 == 604800001L);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[11]");
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[11]");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 1 + "'", int73 == 1);
    }

    @Test
    public void test00409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00409");
        // The following exception was thrown during execution in test generation
        try {
            int int2 = org.joda.time.field.FieldUtils.safeMultiplyToInt((long) 2022, 421199933L);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Value cannot fit in an int: 851666264526");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00410");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plus(readableDuration3);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime1.plusMinutes((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime1.withYear(50);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minusYears(31);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        java.util.Locale locale14 = null;
        java.lang.String str15 = dateTimeZone12.getName((long) (short) 10, locale14);
        long long17 = dateTimeZone11.getMillisKeepLocal(dateTimeZone12, (long) 874);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.getDefault();
        long long20 = dateTimeZone12.getMillisKeepLocal(dateTimeZone18, (long) '4');
        int int22 = dateTimeZone12.getOffsetFromLocal((long) 83);
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.minusMillis((int) (byte) 1);
        java.lang.String str26 = localDateTime25.toString();
        org.joda.time.DateTime dateTime27 = localDateTime25.toDateTime();
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.minusMillis((int) (byte) 1);
        java.lang.String str31 = localDateTime30.toString();
        org.joda.time.DateTime dateTime32 = localDateTime30.toDateTime();
        boolean boolean33 = dateTime27.isEqual((org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime36 = localDateTime34.minusMillis((int) (byte) 1);
        java.lang.String str37 = localDateTime36.toString();
        org.joda.time.DateTime dateTime38 = localDateTime36.toDateTime();
        boolean boolean39 = dateTime27.isEqual((org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime42 = localDateTime40.minusMillis((int) (byte) 1);
        java.lang.String str43 = localDateTime42.toString();
        org.joda.time.DateTime dateTime44 = localDateTime42.toDateTime();
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime47 = localDateTime45.minusMillis((int) (byte) 1);
        java.lang.String str48 = localDateTime47.toString();
        org.joda.time.DateTime dateTime49 = localDateTime47.toDateTime();
        boolean boolean50 = dateTime44.isEqual((org.joda.time.ReadableInstant) dateTime49);
        boolean boolean51 = dateTime27.isEqual((org.joda.time.ReadableInstant) dateTime49);
        int int52 = dateTimeZone12.getOffset((org.joda.time.ReadableInstant) dateTime49);
        org.joda.time.DateTimeZone dateTimeZone53 = dateTime49.getZone();
        org.joda.time.Chronology chronology54 = dateTime49.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime55 = new org.joda.time.LocalDateTime((java.lang.Object) 31, chronology54);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: java.lang.Integer");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+00:00:00.117" + "'", str15, "+00:00:00.117");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 874L + "'", long17 == 874L);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 52L + "'", long20 == 52L);
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 117 + "'", int22 == 117);
        org.junit.Assert.assertNotNull(localDateTime25);
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "2022-02-11T09:48:15.700" + "'", str26, "2022-02-11T09:48:15.700");
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(localDateTime30);
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "2022-02-11T09:48:15.700" + "'", str31, "2022-02-11T09:48:15.700");
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(localDateTime36);
// flaky:         org.junit.Assert.assertEquals("'" + str37 + "' != '" + "2022-02-11T09:48:15.700" + "'", str37, "2022-02-11T09:48:15.700");
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(localDateTime42);
// flaky:         org.junit.Assert.assertEquals("'" + str43 + "' != '" + "2022-02-11T09:48:15.700" + "'", str43, "2022-02-11T09:48:15.700");
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(localDateTime47);
// flaky:         org.junit.Assert.assertEquals("'" + str48 + "' != '" + "2022-02-11T09:48:15.700" + "'", str48, "2022-02-11T09:48:15.700");
        org.junit.Assert.assertNotNull(dateTime49);
// flaky:         org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int52 + "' != '" + 117 + "'", int52 == 117);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertNotNull(chronology54);
    }

    @Test
    public void test00411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00411");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.field.FieldUtils.verifyValueBounds("2022-02-11T09:48:12.885", 0, 556, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for 2022-02-11T09:48:12.885 must be in the range [556,100]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00412");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        int int2 = dateTimeZone0.getStandardOffset((long) (-100));
        java.util.TimeZone timeZone3 = dateTimeZone0.toTimeZone();
        java.util.TimeZone timeZone4 = dateTimeZone0.toTimeZone();
        boolean boolean5 = timeZone4.observesDaylightTime();
        java.lang.Object obj6 = timeZone4.clone();
        org.junit.Assert.assertNotNull(dateTimeZone0);
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 117 + "'", int2 == 117);
        org.junit.Assert.assertNotNull(timeZone3);
// flaky:         org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone4);
// flaky:         org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(obj6);
// flaky:         org.junit.Assert.assertEquals(obj6.toString(), "java.util.SimpleTimeZone[id=+00:00:00.117,offset=117,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "java.util.SimpleTimeZone[id=+00:00:00.117,offset=117,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "java.util.SimpleTimeZone[id=+00:00:00.117,offset=117,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]");
    }

    @Test
    public void test00413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00413");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime1.plusMinutes((int) '#');
        org.joda.time.LocalDateTime localDateTime8 = localDateTime1.withEra((int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone9);
        java.util.Locale locale12 = java.util.Locale.CHINESE;
        java.lang.String str13 = dateTimeZone9.getName((long) (short) 0, locale12);
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minusMillis((int) (byte) 1);
        java.lang.String str17 = localDateTime16.toString();
        org.joda.time.DateTime dateTime18 = localDateTime16.toDateTime();
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.minusMillis((int) (byte) 1);
        java.lang.String str22 = localDateTime21.toString();
        org.joda.time.DateTime dateTime23 = localDateTime21.toDateTime();
        boolean boolean24 = dateTime18.isEqual((org.joda.time.ReadableInstant) dateTime23);
        int int25 = dateTimeZone9.getOffset((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str27 = dateTimeFieldType26.toString();
        java.lang.String str28 = dateTimeFieldType26.toString();
        boolean boolean29 = dateTime18.isSupported(dateTimeFieldType26);
        org.joda.time.Chronology chronology30 = dateTime18.getChronology();
        org.joda.time.Chronology chronology31 = dateTime18.getChronology();
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime1, chronology31);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.withYear((-120));
        int int35 = localDateTime34.getDayOfMonth();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh");
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+00:00:00.117" + "'", str13, "+00:00:00.117");
        org.junit.Assert.assertNotNull(localDateTime16);
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "2022-02-11T09:48:15.854" + "'", str17, "2022-02-11T09:48:15.854");
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(localDateTime21);
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "2022-02-11T09:48:15.854" + "'", str22, "2022-02-11T09:48:15.854");
        org.junit.Assert.assertNotNull(dateTime23);
// flaky:         org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int25 + "' != '" + 117 + "'", int25 == 117);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "weekyear" + "'", str27, "weekyear");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "weekyear" + "'", str28, "weekyear");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 11 + "'", int35 == 11);
    }

    @Test
    public void test00414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00414");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("2022-02-11T09:47:53.332", (double) 1643708883378L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: weight=1.643708883378E12");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00415");
        java.util.Locale locale0 = java.util.Locale.JAPAN;
        java.util.Locale locale1 = java.util.Locale.ITALY;
        java.lang.String str2 = locale0.getDisplayScript(locale1);
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime();
        boolean boolean5 = localDateTime3.isBefore((org.joda.time.ReadablePartial) localDateTime4);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime4.plusMinutes((int) '#');
        org.joda.time.LocalDateTime localDateTime11 = localDateTime4.minusMinutes((int) (short) 1);
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.LocalDateTime localDateTime14 = localDateTime4.withDurationAdded(readableDuration12, (int) (short) 100);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime4.minusWeeks((int) (short) 1);
        boolean boolean17 = locale0.equals((java.lang.Object) localDateTime16);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test00416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00416");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds((int) (byte) 100);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = null;
        java.lang.String str6 = localDateTime1.toString(dateTimeFormatter5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        org.joda.time.LocalDateTime.Property property8 = localDateTime1.property(dateTimeFieldType7);
        org.joda.time.LocalDateTime localDateTime9 = property8.roundHalfFloorCopy();
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.era();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime12 = property10.setCopy("yearOfCentury");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"yearOfCentury\" for era is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "2022-02-11T09:48:15.965" + "'", str6, "2022-02-11T09:48:15.965");
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
    }

    @Test
    public void test00417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00417");
        // The following exception was thrown during execution in test generation
        try {
            int int3 = org.joda.time.field.FieldUtils.getWrappedValue(47, 83, 46);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: MIN > MAX");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00418");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property5 = localDateTime1.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime6 = property5.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField7 = property5.getField();
        int int8 = dateTimeField7.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime();
        int int10 = localDateTime9.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime9.minusMonths((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.minusMonths((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.plusWeeks(22);
        java.util.Locale locale18 = java.util.Locale.JAPANESE;
        java.lang.String str19 = dateTimeField7.getAsShortText((org.joda.time.ReadablePartial) localDateTime16, 22, locale18);
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime();
        boolean boolean23 = localDateTime21.isBefore((org.joda.time.ReadablePartial) localDateTime22);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime22.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property26 = localDateTime22.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime27 = property26.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField28 = property26.getField();
        int int29 = dateTimeField28.getMaximumValue();
        long long31 = dateTimeField28.roundHalfCeiling((long) (-222));
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime((long) 83);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime33.minusSeconds(83);
        int int36 = localDateTime35.getYear();
        java.util.Locale locale39 = new java.util.Locale("fra", "");
        java.util.Set<java.lang.String> strSet40 = locale39.getUnicodeLocaleAttributes();
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime();
        boolean boolean43 = localDateTime41.isBefore((org.joda.time.ReadablePartial) localDateTime42);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime42.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property46 = localDateTime42.dayOfMonth();
        org.joda.time.DurationField durationField47 = property46.getRangeDurationField();
        boolean boolean48 = strSet40.contains((java.lang.Object) durationField47);
        org.joda.time.LocalDateTime localDateTime49 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime50 = new org.joda.time.LocalDateTime();
        boolean boolean51 = localDateTime49.isBefore((org.joda.time.ReadablePartial) localDateTime50);
        org.joda.time.LocalDateTime localDateTime53 = localDateTime50.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property54 = localDateTime50.dayOfMonth();
        boolean boolean55 = property54.isLeap();
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone56);
        java.util.Locale locale59 = java.util.Locale.CHINESE;
        java.lang.String str60 = dateTimeZone56.getName((long) (short) 0, locale59);
        java.lang.String str61 = property54.getAsShortText(locale59);
        boolean boolean62 = strSet40.equals((java.lang.Object) locale59);
        java.lang.String str63 = locale59.getDisplayCountry();
        boolean boolean64 = locale59.hasExtensions();
        java.lang.String str65 = dateTimeField28.getAsText((org.joda.time.ReadablePartial) localDateTime35, locale59);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str66 = localDateTime16.toString("2022-02-11T09:48:15.684", locale59);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 31 + "'", int8 == 31);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 22 + "'", int10 == 22);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "22" + "'", str19, "22");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 31 + "'", int29 == 31);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1969 + "'", int36 == 1969);
        org.junit.Assert.assertEquals(locale39.toString(), "fra");
        org.junit.Assert.assertNotNull(strSet40);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(durationField47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(dateTimeZone56);
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "zh");
// flaky:         org.junit.Assert.assertEquals("'" + str60 + "' != '" + "+00:00:00.117" + "'", str60, "+00:00:00.117");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "11" + "'", str61, "11");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "31" + "'", str65, "31");
    }

    @Test
    public void test00419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00419");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        int int2 = dateTimeZone0.getStandardOffset((long) (-100));
        java.util.TimeZone timeZone3 = dateTimeZone0.toTimeZone();
        int int4 = timeZone3.getRawOffset();
        // The following exception was thrown during execution in test generation
        try {
            int int11 = timeZone3.getOffset(7, 18, 8, 500, 278, 200);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal era 7");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 117 + "'", int2 == 117);
        org.junit.Assert.assertNotNull(timeZone3);
// flaky:         org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "GMT+00:00");
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 117 + "'", int4 == 117);
    }

    @Test
    public void test00420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00420");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("Japon");
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime();
        int int3 = localDateTime2.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.minusMonths((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusMonths((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.plusYears(10);
        java.util.Date date10 = localDateTime9.toDate();
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.fromDateFields(date10);
        boolean boolean12 = timeZone1.inDaylightTime(date10);
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 22 + "'", int3 == 22);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(date10);
// flaky:         org.junit.Assert.assertEquals(date10.toString(), "Wed Feb 11 09:48:16 GMT 2032");
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test00421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00421");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        timeZone0.setRawOffset(20);
        // The following exception was thrown during execution in test generation
        try {
            int int9 = timeZone0.getOffset((-1), 11, (int) 'x', 575, 47, 46);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone0);
        org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "Greenwich Mean Time");
    }

    @Test
    public void test00422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00422");
        java.util.Locale locale0 = java.util.Locale.ITALIAN;
        java.lang.String str1 = locale0.getDisplayCountry();
        java.lang.String str2 = locale0.getVariant();
        java.util.Set<java.lang.String> strSet3 = locale0.getUnicodeLocaleAttributes();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str5 = locale0.getUnicodeLocaleType("2022-02-11T09:48:01.091");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed Unicode locale key: 2022-02-11T09:48:01.091");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(strSet3);
    }

    @Test
    public void test00423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00423");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property5 = localDateTime1.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime6 = property5.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField7 = property5.getField();
        long long10 = dateTimeField7.addWrapField((long) 6, (int) (byte) 0);
        java.lang.String str12 = dateTimeField7.getAsShortText((long) (byte) 0);
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.minusMillis((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.plusDays(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime15.withField(dateTimeFieldType18, 0);
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime();
        boolean boolean23 = localDateTime21.isBefore((org.joda.time.ReadablePartial) localDateTime22);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime22.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime22.plusMinutes((int) '#');
        org.joda.time.LocalDateTime localDateTime29 = localDateTime22.minusMinutes((int) (short) 1);
        boolean boolean30 = localDateTime20.isAfter((org.joda.time.ReadablePartial) localDateTime29);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime29.withMillisOfSecond(50);
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime();
        boolean boolean36 = localDateTime34.isBefore((org.joda.time.ReadablePartial) localDateTime35);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime35.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property39 = localDateTime35.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime40 = property39.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField41 = property39.getField();
        int int44 = dateTimeField41.getDifference(1L, 86399999L);
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime();
        int int46 = localDateTime45.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime48 = localDateTime45.minusMonths((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime50 = localDateTime48.minusMonths((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime52 = localDateTime50.plusWeeks(22);
        org.joda.time.LocalDateTime.Property property53 = localDateTime52.dayOfMonth();
        java.util.Locale locale58 = new java.util.Locale("11", "weekyear", "fra");
        java.lang.String str59 = locale58.getDisplayName();
        java.lang.String str60 = dateTimeField41.getAsShortText((org.joda.time.ReadablePartial) localDateTime52, (int) (byte) 1, locale58);
        org.joda.time.LocalDateTime localDateTime61 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime62 = new org.joda.time.LocalDateTime();
        boolean boolean63 = localDateTime61.isBefore((org.joda.time.ReadablePartial) localDateTime62);
        org.joda.time.LocalDateTime localDateTime65 = localDateTime62.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property66 = localDateTime62.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime67 = property66.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField68 = property66.getField();
        org.joda.time.LocalDateTime localDateTime69 = property66.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime70 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime72 = localDateTime70.minusMillis((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime74 = localDateTime72.plusDays(0);
        org.joda.time.LocalDateTime localDateTime76 = localDateTime74.plusMillis((int) '#');
        int[] intArray77 = localDateTime74.getValues();
        int int78 = dateTimeField41.getMinimumValue((org.joda.time.ReadablePartial) localDateTime69, intArray77);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray80 = dateTimeField7.set((org.joda.time.ReadablePartial) localDateTime32, 28, intArray77, 35282145);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35282145 for dayOfMonth must be in the range [1,28]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 6L + "'", long10 == 6L);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "1" + "'", str12, "1");
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 22 + "'", int46 == 22);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertEquals(locale58.toString(), "11_WEEKYEAR_fra");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "11 (WEEKYEAR,fra)" + "'", str59, "11 (WEEKYEAR,fra)");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "1" + "'", str60, "1");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertNotNull(localDateTime69);
        org.junit.Assert.assertNotNull(localDateTime72);
        org.junit.Assert.assertNotNull(localDateTime74);
        org.junit.Assert.assertNotNull(localDateTime76);
        org.junit.Assert.assertNotNull(intArray77);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[2022, 2, 11, 35296290]");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1 + "'", int78 == 1);
    }

    @Test
    public void test00424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00424");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.getDefault();
        java.util.Locale locale4 = null;
        java.lang.String str5 = dateTimeZone2.getName((long) (short) 10, locale4);
        long long7 = dateTimeZone1.getMillisKeepLocal(dateTimeZone2, (long) 874);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        long long10 = dateTimeZone2.getMillisKeepLocal(dateTimeZone8, (long) '4');
        int int12 = dateTimeZone2.getOffsetFromLocal((long) 83);
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime(0L, dateTimeZone2);
        java.util.TimeZone timeZone14 = dateTimeZone2.toTimeZone();
        java.lang.String str15 = timeZone14.getID();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str18 = timeZone14.getDisplayName(false, 117);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal style: 117");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTimeZone2);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00:00.117" + "'", str5, "+00:00:00.117");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 874L + "'", long7 == 874L);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 52L + "'", long10 == 52L);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 117 + "'", int12 == 117);
        org.junit.Assert.assertNotNull(timeZone14);
// flaky:         org.junit.Assert.assertEquals(timeZone14.getDisplayName(), "GMT+00:00");
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+00:00:00.117" + "'", str15, "+00:00:00.117");
    }

    @Test
    public void test00425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00425");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property5 = localDateTime1.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime6 = property5.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField7 = property5.getField();
        int int10 = dateTimeField7.getDifference(1L, 86399999L);
        org.joda.time.DurationField durationField11 = dateTimeField7.getLeapDurationField();
        long long14 = dateTimeField7.set(1644572883261L, 1);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.field.FieldUtils.verifyValueBounds(dateTimeField7, 278, 0, (int) 'u');
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 278 for dayOfMonth must be in the range [0,117]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNull(durationField11);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1643708883261L + "'", long14 == 1643708883261L);
    }

    @Test
    public void test00426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00426");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.parse("yearOfEra");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"yearOfEra\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00427");
        int int1 = org.joda.time.field.FieldUtils.safeNegate((-3600000));
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 3600000 + "'", int1 == 3600000);
    }

    @Test
    public void test00428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00428");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.LanguageRange[] languageRangeArray1 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList2 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList2, languageRangeArray1);
        java.util.Locale[] localeArray4 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList5 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList5, localeArray4);
        java.util.Locale locale7 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList2, (java.util.Collection<java.util.Locale>) localeList5);
        java.util.Locale.LanguageRange[] languageRangeArray8 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList9 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList9, languageRangeArray8);
        java.util.Locale[] localeArray11 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList12 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList12, localeArray11);
        java.util.Locale locale14 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList9, (java.util.Collection<java.util.Locale>) localeList12);
        java.util.Locale.FilteringMode filteringMode15 = null;
        java.util.List<java.util.Locale> localeList16 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList2, (java.util.Collection<java.util.Locale>) localeList12, filteringMode15);
        java.util.Locale locale17 = java.util.Locale.FRENCH;
        java.util.Set<java.lang.String> strSet18 = locale17.getUnicodeLocaleAttributes();
        java.lang.Object[] objArray19 = strSet18.toArray();
        java.util.Locale.FilteringMode filteringMode20 = java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList21 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList2, (java.util.Collection<java.lang.String>) strSet18, filteringMode20);
        java.util.Locale locale22 = java.util.Locale.ITALIAN;
        java.lang.String str23 = locale22.getDisplayCountry();
        boolean boolean24 = strSet18.equals((java.lang.Object) locale22);
        java.util.Locale.Builder builder25 = builder0.setLocale(locale22);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder27 = builder25.addUnicodeLocaleAttribute("2022-02-11T09:47:58.398");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: 2022-02-11T09:47:58.398 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(languageRangeArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(localeArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(locale7);
        org.junit.Assert.assertNotNull(languageRangeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(localeArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(locale14);
        org.junit.Assert.assertNotNull(localeList16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet18);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[]");
        org.junit.Assert.assertTrue("'" + filteringMode20 + "' != '" + java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES + "'", filteringMode20.equals(java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList21);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "it");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(builder25);
    }

    @Test
    public void test00429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00429");
        java.util.Locale locale2 = new java.util.Locale("", "weekyear");
        java.util.Set<java.lang.String> strSet3 = locale2.getUnicodeLocaleKeys();
        java.util.Spliterator<java.lang.String> strSpliterator4 = strSet3.spliterator();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean6 = strSet3.add("2022-02-11T09:47:58.351");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(locale2.toString(), "_WEEKYEAR");
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(strSpliterator4);
    }

    @Test
    public void test00430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00430");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.LanguageRange[] languageRangeArray1 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList2 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList2, languageRangeArray1);
        java.util.Locale[] localeArray4 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList5 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList5, localeArray4);
        java.util.Locale locale7 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList2, (java.util.Collection<java.util.Locale>) localeList5);
        java.util.Locale.LanguageRange[] languageRangeArray8 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList9 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList9, languageRangeArray8);
        java.util.Locale[] localeArray11 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList12 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList12, localeArray11);
        java.util.Locale locale14 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList9, (java.util.Collection<java.util.Locale>) localeList12);
        java.util.Locale.FilteringMode filteringMode15 = null;
        java.util.List<java.util.Locale> localeList16 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList2, (java.util.Collection<java.util.Locale>) localeList12, filteringMode15);
        java.util.Locale locale17 = java.util.Locale.FRENCH;
        java.util.Set<java.lang.String> strSet18 = locale17.getUnicodeLocaleAttributes();
        java.lang.Object[] objArray19 = strSet18.toArray();
        java.util.Locale.FilteringMode filteringMode20 = java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList21 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList2, (java.util.Collection<java.lang.String>) strSet18, filteringMode20);
        java.util.Locale locale22 = java.util.Locale.ITALIAN;
        java.lang.String str23 = locale22.getDisplayCountry();
        boolean boolean24 = strSet18.equals((java.lang.Object) locale22);
        java.util.Locale.Builder builder25 = builder0.setLocale(locale22);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder27 = builder25.setLanguage("2022-02-11T09:47:57.735");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed language: 2022-02-11T09:47:57.735 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(languageRangeArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(localeArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(locale7);
        org.junit.Assert.assertNotNull(languageRangeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(localeArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(locale14);
        org.junit.Assert.assertNotNull(localeList16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet18);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[]");
        org.junit.Assert.assertTrue("'" + filteringMode20 + "' != '" + java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES + "'", filteringMode20.equals(java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList21);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "it");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(builder25);
    }

    @Test
    public void test00431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00431");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property5 = localDateTime1.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime6 = property5.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField7 = property5.getField();
        int int10 = dateTimeField7.getDifference(1L, 86399999L);
        org.joda.time.DurationField durationField11 = dateTimeField7.getLeapDurationField();
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime();
        boolean boolean14 = localDateTime12.isBefore((org.joda.time.ReadablePartial) localDateTime13);
        org.joda.time.LocalDateTime.Property property15 = localDateTime12.dayOfMonth();
        org.joda.time.LocalDateTime.Property property16 = localDateTime12.weekyear();
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.LocalDateTime localDateTime19 = localDateTime12.withPeriodAdded(readablePeriod17, (-100));
        int int20 = dateTimeField7.getMinimumValue((org.joda.time.ReadablePartial) localDateTime19);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime25 = localDateTime19.withTime(35293506, 934, 19034, 715);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35293506 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNull(durationField11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
    }

    @Test
    public void test00432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00432");
        int int1 = org.joda.time.field.FieldUtils.safeToInt((long) 3);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 3 + "'", int1 == 3);
    }

    @Test
    public void test00433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00433");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("2022-02-11T09:48:08.557", (double) 278);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: weight=278.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00434");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        java.util.Locale locale3 = null;
        java.lang.String str4 = dateTimeZone1.getName((long) (short) 10, locale3);
        long long6 = dateTimeZone0.getMillisKeepLocal(dateTimeZone1, (long) 874);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        long long9 = dateTimeZone1.getMillisKeepLocal(dateTimeZone7, (long) '4');
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime();
        boolean boolean13 = localDateTime11.isBefore((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime12.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property16 = localDateTime12.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime17 = property16.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField18 = property16.getField();
        int int21 = dateTimeField18.getDifference(1L, 86399999L);
        java.lang.String str22 = dateTimeField18.toString();
        java.util.Locale.LanguageRange[] languageRangeArray24 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList25 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList25, languageRangeArray24);
        java.util.Locale[] localeArray27 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList28 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList28, localeArray27);
        java.util.Locale locale30 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList25, (java.util.Collection<java.util.Locale>) localeList28);
        java.util.Locale.LanguageRange[] languageRangeArray31 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList32 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList32, languageRangeArray31);
        java.util.Locale[] localeArray34 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList35 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList35, localeArray34);
        java.util.Locale locale37 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList32, (java.util.Collection<java.util.Locale>) localeList35);
        java.util.Locale.FilteringMode filteringMode38 = null;
        java.util.List<java.util.Locale> localeList39 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList25, (java.util.Collection<java.util.Locale>) localeList35, filteringMode38);
        java.util.Locale locale40 = java.util.Locale.FRENCH;
        java.util.Set<java.lang.String> strSet41 = locale40.getUnicodeLocaleAttributes();
        java.lang.Object[] objArray42 = strSet41.toArray();
        java.util.Locale.FilteringMode filteringMode43 = java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList44 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList25, (java.util.Collection<java.lang.String>) strSet41, filteringMode43);
        java.util.Locale locale45 = java.util.Locale.ITALIAN;
        java.lang.String str46 = locale45.getDisplayCountry();
        boolean boolean47 = strSet41.equals((java.lang.Object) locale45);
        java.lang.String str48 = dateTimeField18.getAsText((long) (short) -1, locale45);
        java.lang.String str49 = dateTimeZone1.getName((long) (byte) 1, locale45);
        boolean boolean50 = locale45.hasExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str52 = locale45.getExtension('4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed extension key: 4");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.117" + "'", str4, "+00:00:00.117");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 874L + "'", long6 == 874L);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 52L + "'", long9 == 52L);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "DateTimeField[dayOfMonth]" + "'", str22, "DateTimeField[dayOfMonth]");
        org.junit.Assert.assertNotNull(languageRangeArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(localeArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNull(locale30);
        org.junit.Assert.assertNotNull(languageRangeArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(localeArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNull(locale37);
        org.junit.Assert.assertNotNull(localeList39);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet41);
        org.junit.Assert.assertNotNull(objArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray42), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray42), "[]");
        org.junit.Assert.assertTrue("'" + filteringMode43 + "' != '" + java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES + "'", filteringMode43.equals(java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList44);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "it");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "31" + "'", str48, "31");
// flaky:         org.junit.Assert.assertEquals("'" + str49 + "' != '" + "+00:00:00.117" + "'", str49, "+00:00:00.117");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test00435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00435");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.millisOfDay();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime0.plusMonths((int) (byte) 1);
        org.joda.time.LocalDateTime.Property property6 = localDateTime0.weekyear();
        org.joda.time.LocalDateTime.Property property7 = localDateTime0.year();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime9 = property7.setCopy("2022-02-11T09:48:16.569");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2022-02-11T09:48:16.569\" for year is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(property7);
    }

    @Test
    public void test00436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00436");
        int int4 = org.joda.time.field.FieldUtils.getWrappedValue(379, 46, (-2719), 292278993);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 425 + "'", int4 == 425);
    }

    @Test
    public void test00437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00437");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.minusMillis((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.plusDays(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.withField(dateTimeFieldType5, 0);
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime();
        boolean boolean10 = localDateTime8.isBefore((org.joda.time.ReadablePartial) localDateTime9);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime9.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime9.plusMinutes((int) '#');
        org.joda.time.LocalDateTime localDateTime16 = localDateTime9.minusMinutes((int) (short) 1);
        boolean boolean17 = localDateTime7.isAfter((org.joda.time.ReadablePartial) localDateTime16);
        org.joda.time.LocalDateTime.Property property18 = localDateTime7.secondOfMinute();
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = property18.getFieldType();
        int int20 = property18.getMaximumValue();
        org.joda.time.DateTimeField dateTimeField21 = property18.getField();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime23 = property18.setCopy(83);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 83 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 59 + "'", int20 == 59);
        org.junit.Assert.assertNotNull(dateTimeField21);
    }

    @Test
    public void test00438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00438");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property5 = localDateTime1.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime6 = property5.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField7 = property5.getField();
        long long9 = dateTimeField7.remainder((-1L));
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = dateTimeField7.getType();
        boolean boolean11 = dateTimeField7.isSupported();
        java.lang.String str13 = dateTimeField7.getAsText((long) 715);
        java.util.Locale locale16 = java.util.Locale.ROOT;
        // The following exception was thrown during execution in test generation
        try {
            long long17 = dateTimeField7.set(715L, "era", locale16);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"era\" for dayOfMonth is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 86399999L + "'", long9 == 86399999L);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "1" + "'", str13, "1");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "");
    }

    @Test
    public void test00439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00439");
        java.util.Locale locale2 = new java.util.Locale("fra", "");
        java.util.Set<java.lang.String> strSet3 = locale2.getUnicodeLocaleAttributes();
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        boolean boolean6 = localDateTime4.isBefore((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property9 = localDateTime5.dayOfMonth();
        org.joda.time.DurationField durationField10 = property9.getRangeDurationField();
        boolean boolean11 = strSet3.contains((java.lang.Object) durationField10);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime();
        boolean boolean14 = localDateTime12.isBefore((org.joda.time.ReadablePartial) localDateTime13);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime13.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property17 = localDateTime13.dayOfMonth();
        boolean boolean18 = property17.isLeap();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone19);
        java.util.Locale locale22 = java.util.Locale.CHINESE;
        java.lang.String str23 = dateTimeZone19.getName((long) (short) 0, locale22);
        java.lang.String str24 = property17.getAsShortText(locale22);
        boolean boolean25 = strSet3.equals((java.lang.Object) locale22);
        java.lang.String str26 = locale22.getDisplayCountry();
        boolean boolean27 = locale22.hasExtensions();
        java.lang.String str28 = locale22.getCountry();
        org.junit.Assert.assertEquals(locale2.toString(), "fra");
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "zh");
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+00:00:00.117" + "'", str23, "+00:00:00.117");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "11" + "'", str24, "11");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
    }

    @Test
    public void test00440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00440");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.minusMillis((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.plusDays(0);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.plusMillis(22);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        int int8 = localDateTime6.get(dateTimeFieldType7);
        java.lang.String str9 = dateTimeFieldType7.getName();
        java.lang.String str10 = dateTimeFieldType7.getName();
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 6 + "'", int8 == 6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "weekOfWeekyear" + "'", str9, "weekOfWeekyear");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "weekOfWeekyear" + "'", str10, "weekOfWeekyear");
    }

    @Test
    public void test00441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00441");
        java.util.Locale locale0 = java.util.Locale.CANADA;
        java.lang.String str1 = locale0.getCountry();
        java.lang.String str2 = locale0.getISO3Country();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str4 = locale0.getUnicodeLocaleType("2022-02-11T09:48:05.803");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed Unicode locale key: 2022-02-11T09:48:05.803");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "CA" + "'", str1, "CA");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "CAN" + "'", str2, "CAN");
    }

    @Test
    public void test00442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00442");
        java.util.Locale locale2 = new java.util.Locale("fra", "");
        java.util.Set<java.lang.String> strSet3 = locale2.getUnicodeLocaleAttributes();
        java.lang.Object[] objArray4 = strSet3.toArray();
        java.util.Iterator<java.lang.String> strItor5 = strSet3.iterator();
        org.junit.Assert.assertEquals(locale2.toString(), "fra");
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(objArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray4), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray4), "[]");
        org.junit.Assert.assertNotNull(strItor5);
    }

    @Test
    public void test00443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00443");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone2);
        java.util.Locale locale5 = java.util.Locale.CHINESE;
        java.lang.String str6 = dateTimeZone2.getName((long) (short) 0, locale5);
        java.util.Locale.Builder builder7 = builder0.setLocale(locale5);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder9 = builder7.setLanguageTag("Japanese (Japan)");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Invalid subtag: Japanese (Japan) [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zh");
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.117" + "'", str6, "+00:00:00.117");
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test00444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00444");
        long long2 = org.joda.time.field.FieldUtils.safeSubtract((long) 2022, (long) (-40));
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 2062L + "'", long2 == 2062L);
    }

    @Test
    public void test00445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00445");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.minusMillis((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.plusDays(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.withField(dateTimeFieldType5, 0);
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime();
        boolean boolean10 = localDateTime8.isBefore((org.joda.time.ReadablePartial) localDateTime9);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime9.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime9.plusMinutes((int) '#');
        org.joda.time.LocalDateTime localDateTime16 = localDateTime9.minusMinutes((int) (short) 1);
        boolean boolean17 = localDateTime7.isAfter((org.joda.time.ReadablePartial) localDateTime16);
        org.joda.time.LocalDateTime.Property property18 = localDateTime7.minuteOfHour();
        org.joda.time.DurationField durationField19 = property18.getLeapDurationField();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime21 = property18.setCopy("2022-02-11T09:48:04.350");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2022-02-11T09:48:04.350\" for minuteOfHour is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNull(durationField19);
    }

    @Test
    public void test00446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00446");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property5 = localDateTime1.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime6 = property5.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField7 = property5.getField();
        long long10 = dateTimeField7.addWrapField((long) 6, (int) (byte) 0);
        java.lang.String str12 = dateTimeField7.getAsShortText((long) (byte) 0);
        java.lang.String str14 = dateTimeField7.getAsShortText((-116L));
        long long16 = dateTimeField7.roundCeiling((long) 11);
        int int17 = dateTimeField7.getMaximumValue();
        java.util.Locale locale19 = java.util.Locale.ITALIAN;
        java.lang.String str20 = locale19.getDisplayCountry();
        java.lang.String str21 = dateTimeField7.getAsText(20, locale19);
        org.joda.time.ReadablePartial readablePartial22 = null;
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.minusMillis((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.plusDays(0);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.plusMillis((int) '#');
        int[] intArray31 = localDateTime28.getValues();
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray33 = dateTimeField7.addWrapPartial(readablePartial22, 365, intArray31, 709);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 6L + "'", long10 == 6L);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "1" + "'", str12, "1");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "31" + "'", str14, "31");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 86400000L + "'", long16 == 86400000L);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 31 + "'", int17 == 31);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "it");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "20" + "'", str21, "20");
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(intArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[2022, 2, 11, 35297435]");
    }

    @Test
    public void test00447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00447");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.minusMillis((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.plusDays(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.withField(dateTimeFieldType5, 0);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.field.FieldUtils.verifyValueBounds(dateTimeFieldType5, 38, (int) (byte) 0, 0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 38 for era must be in the range [0,0]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(localDateTime7);
    }

    @Test
    public void test00448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00448");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.minusMillis((int) (byte) 1);
        java.lang.String str3 = localDateTime2.toString();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.minusMonths((int) 'a');
        org.joda.time.LocalDateTime.Property property6 = localDateTime2.yearOfEra();
        org.joda.time.LocalDateTime localDateTime7 = property6.roundFloorCopy();
        org.joda.time.ReadableInstant readableInstant8 = null;
        long long9 = property6.getDifferenceAsLong(readableInstant8);
        org.junit.Assert.assertNotNull(localDateTime2);
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "2022-02-11T09:48:17.456" + "'", str3, "2022-02-11T09:48:17.456");
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
    }

    @Test
    public void test00449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00449");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder3 = builder1.addUnicodeLocaleAttribute("Cor\351e du Sud");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: Core?e du Sud [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
    }

    @Test
    public void test00450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00450");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        int int2 = dateTimeZone0.getStandardOffset((long) (-100));
        java.util.TimeZone timeZone3 = dateTimeZone0.toTimeZone();
        java.util.TimeZone timeZone4 = dateTimeZone0.toTimeZone();
        boolean boolean5 = timeZone4.observesDaylightTime();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str8 = timeZone4.getDisplayName(false, 22);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal style: 22");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 117 + "'", int2 == 117);
        org.junit.Assert.assertNotNull(timeZone3);
// flaky:         org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone4);
// flaky:         org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test00451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00451");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((int) ' ', 3, 117, (int) (short) 0, (int) (short) 100, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 100 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00452");
        // The following exception was thrown during execution in test generation
        try {
            int int3 = org.joda.time.field.FieldUtils.getWrappedValue((-35274908), (int) 'x', (-222));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: MIN > MAX");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00453");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        int[] intArray3 = localDateTime1.getValues();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.plusYears((int) (byte) -1);
        int int6 = localDateTime5.getDayOfYear();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.minusMillis((int) (byte) 1);
        java.lang.String str10 = localDateTime9.toString();
        org.joda.time.DateTime dateTime11 = localDateTime9.toDateTime();
        org.joda.time.Instant instant12 = dateTime11.toInstant();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.yearOfCentury();
        org.joda.time.DurationFieldType durationFieldType14 = dateTimeFieldType13.getDurationType();
        boolean boolean15 = instant12.isSupported(dateTimeFieldType13);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime17 = localDateTime5.withField(dateTimeFieldType13, (-69000));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -69000 for yearOfCentury must be in the range [0,99]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(intArray3);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[2022, 2, 11, 35298381]");
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 42 + "'", int6 == 42);
        org.junit.Assert.assertNotNull(localDateTime9);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "2022-02-11T09:48:18.380" + "'", str10, "2022-02-11T09:48:18.380");
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(instant12);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(durationFieldType14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    }

    @Test
    public void test00454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00454");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("2022-02-11T09:47:49.888");
        timeZone1.setID("2022-02-11T09:47:52.558");
        java.util.TimeZone.setDefault(timeZone1);
        boolean boolean5 = timeZone1.observesDaylightTime();
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.minusMillis((int) (byte) 1);
        java.lang.String str9 = localDateTime8.toString();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime8.minusMonths((int) 'a');
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minusMinutes(22);
        java.util.Date date14 = localDateTime13.toDate();
        boolean boolean15 = timeZone1.inDaylightTime(date14);
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(localDateTime8);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "2022-02-11T09:48:18.392" + "'", str9, "2022-02-11T09:48:18.392");
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(date14);
// flaky:         org.junit.Assert.assertEquals(date14.toString(), "Sat Jan 11 09:26:18 GMT+00:00 2014");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test00455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00455");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder1.addUnicodeLocaleAttribute("Japon");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder5 = builder1.setVariant("2022-02-11T09:48:15.231");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed variant: 2022-02-11T09:48:15.231 [at index 5]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
    }

    @Test
    public void test00456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00456");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.minusMillis((int) (byte) 1);
        java.lang.String str3 = localDateTime2.toString();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.minusMonths((int) 'a');
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusMinutes(22);
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime();
        boolean boolean10 = localDateTime8.isBefore((org.joda.time.ReadablePartial) localDateTime9);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime9.plusSeconds((int) (byte) 100);
        boolean boolean13 = localDateTime7.isBefore((org.joda.time.ReadablePartial) localDateTime9);
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime();
        int int15 = localDateTime14.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime14.minusMonths((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.minusMonths((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.plusYears(10);
        boolean boolean22 = localDateTime7.isAfter((org.joda.time.ReadablePartial) localDateTime21);
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime();
        boolean boolean25 = localDateTime23.isBefore((org.joda.time.ReadablePartial) localDateTime24);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime24.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property28 = localDateTime24.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime();
        boolean boolean31 = localDateTime29.isBefore((org.joda.time.ReadablePartial) localDateTime30);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime30.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property34 = localDateTime30.dayOfMonth();
        java.util.Locale locale35 = java.util.Locale.FRENCH;
        java.util.Set<java.lang.String> strSet36 = locale35.getUnicodeLocaleAttributes();
        java.lang.String str37 = locale35.getVariant();
        java.lang.String str38 = property34.getAsText(locale35);
        java.lang.String str39 = property28.getAsShortText(locale35);
        org.joda.time.LocalDateTime localDateTime40 = property28.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime localDateTime41 = property28.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime42 = property28.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime44 = localDateTime42.withYear((-1));
        int int45 = localDateTime42.getDayOfMonth();
        boolean boolean46 = localDateTime21.isBefore((org.joda.time.ReadablePartial) localDateTime42);
        org.joda.time.DateTimeField[] dateTimeFieldArray47 = localDateTime42.getFields();
        org.joda.time.LocalDateTime localDateTime49 = localDateTime42.withDayOfYear((int) ' ');
        org.joda.time.LocalDateTime.Property property50 = localDateTime42.weekOfWeekyear();
        org.junit.Assert.assertNotNull(localDateTime2);
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "2022-02-11T09:48:18.769" + "'", str3, "2022-02-11T09:48:18.769");
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 22 + "'", int15 == 22);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "11" + "'", str38, "11");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "11" + "'", str39, "11");
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 28 + "'", int45 == 28);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldArray47);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(property50);
    }

    @Test
    public void test00457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00457");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale.Builder builder3 = builder0.setLanguage("");
        java.util.Locale.Builder builder4 = builder3.clearExtensions();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime();
        boolean boolean7 = localDateTime5.isBefore((org.joda.time.ReadablePartial) localDateTime6);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property10 = localDateTime6.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime11 = property10.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField12 = property10.getField();
        org.joda.time.DurationField durationField13 = dateTimeField12.getLeapDurationField();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime();
        boolean boolean16 = localDateTime14.isBefore((org.joda.time.ReadablePartial) localDateTime15);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime15.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime15.plusMinutes((int) '#');
        org.joda.time.LocalDateTime localDateTime22 = localDateTime15.plusMonths(0);
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.LocalDateTime localDateTime25 = localDateTime22.withDurationAdded(readableDuration23, (int) (byte) -1);
        java.util.Locale locale28 = new java.util.Locale("fra", "");
        java.util.Set<java.lang.String> strSet29 = locale28.getUnicodeLocaleAttributes();
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime();
        boolean boolean32 = localDateTime30.isBefore((org.joda.time.ReadablePartial) localDateTime31);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime31.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property35 = localDateTime31.dayOfMonth();
        org.joda.time.DurationField durationField36 = property35.getRangeDurationField();
        boolean boolean37 = strSet29.contains((java.lang.Object) durationField36);
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime();
        boolean boolean40 = localDateTime38.isBefore((org.joda.time.ReadablePartial) localDateTime39);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime39.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property43 = localDateTime39.dayOfMonth();
        boolean boolean44 = property43.isLeap();
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone45);
        java.util.Locale locale48 = java.util.Locale.CHINESE;
        java.lang.String str49 = dateTimeZone45.getName((long) (short) 0, locale48);
        java.lang.String str50 = property43.getAsShortText(locale48);
        boolean boolean51 = strSet29.equals((java.lang.Object) locale48);
        java.lang.String str52 = dateTimeField12.getAsText((org.joda.time.ReadablePartial) localDateTime25, locale48);
        java.util.Locale.Builder builder53 = builder3.setLocale(locale48);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder55 = builder3.setScript("2022-02-11T09:47:58.549");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed script: 2022-02-11T09:47:58.549 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNull(durationField13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertEquals(locale28.toString(), "fra");
        org.junit.Assert.assertNotNull(strSet29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "zh");
// flaky:         org.junit.Assert.assertEquals("'" + str49 + "' != '" + "+00:00:00.117" + "'", str49, "+00:00:00.117");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "11" + "'", str50, "11");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "11" + "'", str52, "11");
        org.junit.Assert.assertNotNull(builder53);
    }

    @Test
    public void test00458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00458");
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.minusMillis((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.plusDays(0);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime9.withYearOfEra(874);
        org.joda.time.Chronology chronology14 = localDateTime13.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime(4, (-120), 688, 5200, 704, (int) (byte) 1, 575, chronology14);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 5200 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(chronology14);
    }

    @Test
    public void test00459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00459");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property5 = localDateTime1.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime6 = property5.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField7 = property5.getField();
        long long10 = dateTimeField7.addWrapField((long) 6, (int) (byte) 0);
        java.lang.String str12 = dateTimeField7.getAsShortText((long) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.getDefault();
        java.util.Locale locale17 = null;
        java.lang.String str18 = dateTimeZone15.getName((long) (short) 10, locale17);
        long long20 = dateTimeZone14.getMillisKeepLocal(dateTimeZone15, (long) 874);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.getDefault();
        long long23 = dateTimeZone15.getMillisKeepLocal(dateTimeZone21, (long) '4');
        int int25 = dateTimeZone15.getOffsetFromLocal((long) 83);
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.minusMillis((int) (byte) 1);
        java.lang.String str29 = localDateTime28.toString();
        org.joda.time.DateTime dateTime30 = localDateTime28.toDateTime();
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.minusMillis((int) (byte) 1);
        java.lang.String str34 = localDateTime33.toString();
        org.joda.time.DateTime dateTime35 = localDateTime33.toDateTime();
        boolean boolean36 = dateTime30.isEqual((org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime39 = localDateTime37.minusMillis((int) (byte) 1);
        java.lang.String str40 = localDateTime39.toString();
        org.joda.time.DateTime dateTime41 = localDateTime39.toDateTime();
        boolean boolean42 = dateTime30.isEqual((org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime45 = localDateTime43.minusMillis((int) (byte) 1);
        java.lang.String str46 = localDateTime45.toString();
        org.joda.time.DateTime dateTime47 = localDateTime45.toDateTime();
        org.joda.time.LocalDateTime localDateTime48 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime50 = localDateTime48.minusMillis((int) (byte) 1);
        java.lang.String str51 = localDateTime50.toString();
        org.joda.time.DateTime dateTime52 = localDateTime50.toDateTime();
        boolean boolean53 = dateTime47.isEqual((org.joda.time.ReadableInstant) dateTime52);
        boolean boolean54 = dateTime30.isEqual((org.joda.time.ReadableInstant) dateTime52);
        int int55 = dateTimeZone15.getOffset((org.joda.time.ReadableInstant) dateTime52);
        org.joda.time.DateTimeZone dateTimeZone56 = dateTime52.getZone();
        java.util.Locale locale58 = java.util.Locale.TAIWAN;
        java.lang.String str59 = dateTimeZone56.getShortName((long) 11, locale58);
        java.lang.String str60 = dateTimeField7.getAsText(35287404L, locale58);
        int int62 = dateTimeField7.getLeapAmount((long) (short) -1);
        int int63 = dateTimeField7.getMaximumValue();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 6L + "'", long10 == 6L);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "1" + "'", str12, "1");
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+00:00:00.117" + "'", str18, "+00:00:00.117");
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 874L + "'", long20 == 874L);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 52L + "'", long23 == 52L);
// flaky:         org.junit.Assert.assertTrue("'" + int25 + "' != '" + 117 + "'", int25 == 117);
        org.junit.Assert.assertNotNull(localDateTime28);
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "2022-02-11T09:48:18.854" + "'", str29, "2022-02-11T09:48:18.854");
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(localDateTime33);
// flaky:         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "2022-02-11T09:48:18.854" + "'", str34, "2022-02-11T09:48:18.854");
        org.junit.Assert.assertNotNull(dateTime35);
// flaky:         org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(localDateTime39);
// flaky:         org.junit.Assert.assertEquals("'" + str40 + "' != '" + "2022-02-11T09:48:18.854" + "'", str40, "2022-02-11T09:48:18.854");
        org.junit.Assert.assertNotNull(dateTime41);
// flaky:         org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(localDateTime45);
// flaky:         org.junit.Assert.assertEquals("'" + str46 + "' != '" + "2022-02-11T09:48:18.854" + "'", str46, "2022-02-11T09:48:18.854");
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(localDateTime50);
// flaky:         org.junit.Assert.assertEquals("'" + str51 + "' != '" + "2022-02-11T09:48:18.854" + "'", str51, "2022-02-11T09:48:18.854");
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int55 + "' != '" + 117 + "'", int55 == 117);
        org.junit.Assert.assertNotNull(dateTimeZone56);
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "zh_TW");
// flaky:         org.junit.Assert.assertEquals("'" + str59 + "' != '" + "+00:00:00.117" + "'", str59, "+00:00:00.117");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "1" + "'", str60, "1");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 31 + "'", int63 == 31);
    }

    @Test
    public void test00460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00460");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property5 = localDateTime1.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime6 = property5.withMinimumValue();
        long long7 = property5.remainder();
        java.lang.String str8 = property5.toString();
        java.util.Locale locale11 = new java.util.Locale("fra", "");
        java.util.Set<java.lang.String> strSet12 = locale11.getUnicodeLocaleAttributes();
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime();
        boolean boolean15 = localDateTime13.isBefore((org.joda.time.ReadablePartial) localDateTime14);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime14.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property18 = localDateTime14.dayOfMonth();
        org.joda.time.DurationField durationField19 = property18.getRangeDurationField();
        boolean boolean20 = strSet12.contains((java.lang.Object) durationField19);
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime();
        boolean boolean23 = localDateTime21.isBefore((org.joda.time.ReadablePartial) localDateTime22);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime22.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property26 = localDateTime22.dayOfMonth();
        boolean boolean27 = property26.isLeap();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone28);
        java.util.Locale locale31 = java.util.Locale.CHINESE;
        java.lang.String str32 = dateTimeZone28.getName((long) (short) 0, locale31);
        java.lang.String str33 = property26.getAsShortText(locale31);
        boolean boolean34 = strSet12.equals((java.lang.Object) locale31);
        java.lang.String str35 = locale31.getDisplayCountry();
        boolean boolean36 = locale31.hasExtensions();
        int int37 = property5.getMaximumShortTextLength(locale31);
        java.lang.String str38 = locale31.getDisplayName();
        java.lang.Object obj39 = locale31.clone();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
// flaky:         org.junit.Assert.assertTrue("'" + long7 + "' != '" + 35298988L + "'", long7 == 35298988L);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Property[dayOfMonth]" + "'", str8, "Property[dayOfMonth]");
        org.junit.Assert.assertEquals(locale11.toString(), "fra");
        org.junit.Assert.assertNotNull(strSet12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "zh");
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "+00:00:00.117" + "'", str32, "+00:00:00.117");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "11" + "'", str33, "11");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2 + "'", int37 == 2);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Chinese" + "'", str38, "Chinese");
        org.junit.Assert.assertNotNull(obj39);
        org.junit.Assert.assertEquals(obj39.toString(), "zh");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj39), "zh");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj39), "zh");
    }

    @Test
    public void test00461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00461");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property5 = localDateTime1.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime6 = property5.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField7 = property5.getField();
        int int10 = dateTimeField7.getDifference(1L, 86399999L);
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime();
        int int12 = localDateTime11.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime11.minusMonths((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minusMonths((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.plusWeeks(22);
        org.joda.time.LocalDateTime.Property property19 = localDateTime18.dayOfMonth();
        java.util.Locale locale24 = new java.util.Locale("11", "weekyear", "fra");
        java.lang.String str25 = locale24.getDisplayName();
        java.lang.String str26 = dateTimeField7.getAsShortText((org.joda.time.ReadablePartial) localDateTime18, (int) (byte) 1, locale24);
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime();
        boolean boolean29 = localDateTime27.isBefore((org.joda.time.ReadablePartial) localDateTime28);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime28.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property32 = localDateTime28.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime33 = property32.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField34 = property32.getField();
        org.joda.time.LocalDateTime localDateTime35 = property32.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime38 = localDateTime36.minusMillis((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime38.plusDays(0);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime40.plusMillis((int) '#');
        int[] intArray43 = localDateTime40.getValues();
        int int44 = dateTimeField7.getMinimumValue((org.joda.time.ReadablePartial) localDateTime35, intArray43);
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = dateTimeField7.getType();
        boolean boolean47 = dateTimeField7.isLeap(0L);
        java.util.Locale.Builder builder50 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder51 = builder50.clear();
        java.util.Locale.Builder builder53 = builder50.setLanguage("");
        java.util.Locale.Builder builder54 = builder53.clearExtensions();
        java.util.Locale locale55 = builder54.build();
        java.lang.String str56 = locale55.getScript();
        // The following exception was thrown during execution in test generation
        try {
            long long57 = dateTimeField7.set((long) 49, "2022-02-11T09:48:09.491", locale55);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2022-02-11T09:48:09.491\" for dayOfMonth is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 22 + "'", int12 == 22);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertEquals(locale24.toString(), "11_WEEKYEAR_fra");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "11 (WEEKYEAR,fra)" + "'", str25, "11 (WEEKYEAR,fra)");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "1" + "'", str26, "1");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(intArray43);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[2022, 2, 11, 35299181]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(dateTimeFieldType45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
    }

    @Test
    public void test00462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00462");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        int int2 = dateTimeZone0.getStandardOffset((long) (-100));
        java.util.TimeZone timeZone3 = dateTimeZone0.toTimeZone();
        java.lang.String str4 = timeZone3.getDisplayName();
        org.junit.Assert.assertNotNull(dateTimeZone0);
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 117 + "'", int2 == 117);
        org.junit.Assert.assertNotNull(timeZone3);
// flaky:         org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "GMT+00:00");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "GMT+00:00" + "'", str4, "GMT+00:00");
    }

    @Test
    public void test00463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00463");
        int int1 = org.joda.time.field.FieldUtils.safeNegate(2);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + (-2) + "'", int1 == (-2));
    }

    @Test
    public void test00464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00464");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property5 = localDateTime1.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        boolean boolean8 = localDateTime6.isBefore((org.joda.time.ReadablePartial) localDateTime7);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime7.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property11 = localDateTime7.dayOfMonth();
        java.util.Locale locale12 = java.util.Locale.FRENCH;
        java.util.Set<java.lang.String> strSet13 = locale12.getUnicodeLocaleAttributes();
        java.lang.String str14 = locale12.getVariant();
        java.lang.String str15 = property11.getAsText(locale12);
        java.lang.String str16 = property5.getAsShortText(locale12);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime18 = property5.setCopy((int) 'u');
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 117 for dayOfMonth must be in the range [1,28]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "11" + "'", str15, "11");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "11" + "'", str16, "11");
    }

    @Test
    public void test00465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00465");
        long long2 = org.joda.time.field.FieldUtils.safeSubtract((long) 293, 35293570L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + (-35293277L) + "'", long2 == (-35293277L));
    }

    @Test
    public void test00466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00466");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property5 = localDateTime1.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime6 = property5.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField7 = property5.getField();
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime();
        boolean boolean10 = localDateTime8.isBefore((org.joda.time.ReadablePartial) localDateTime9);
        int[] intArray11 = localDateTime9.getValues();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime9.plusYears((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime();
        boolean boolean16 = localDateTime14.isBefore((org.joda.time.ReadablePartial) localDateTime15);
        int[] intArray17 = localDateTime15.getValues();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime9.withFields((org.joda.time.ReadablePartial) localDateTime15);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.minusMillis((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.minusSeconds((int) '#');
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.withWeekOfWeekyear(50);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime22.withMinuteOfHour((int) (byte) 0);
        int int27 = dateTimeField7.getMinimumValue((org.joda.time.ReadablePartial) localDateTime22);
        java.lang.String str28 = dateTimeField7.toString();
        int int31 = dateTimeField7.getDifference(0L, (long) (byte) -1);
        java.lang.String str32 = dateTimeField7.getName();
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime35 = localDateTime33.minusMillis((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime35.plusDays(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDateTime localDateTime40 = localDateTime35.withField(dateTimeFieldType38, 0);
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime();
        boolean boolean43 = localDateTime41.isBefore((org.joda.time.ReadablePartial) localDateTime42);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime42.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime42.plusMinutes((int) '#');
        org.joda.time.LocalDateTime localDateTime49 = localDateTime42.minusMinutes((int) (short) 1);
        boolean boolean50 = localDateTime40.isAfter((org.joda.time.ReadablePartial) localDateTime49);
        org.joda.time.LocalDateTime localDateTime52 = localDateTime49.plusYears((int) 'x');
        org.joda.time.LocalDateTime localDateTime54 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime55 = new org.joda.time.LocalDateTime();
        boolean boolean56 = localDateTime54.isBefore((org.joda.time.ReadablePartial) localDateTime55);
        org.joda.time.LocalDateTime localDateTime58 = localDateTime55.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property59 = localDateTime55.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime60 = property59.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField61 = property59.getField();
        long long64 = dateTimeField61.addWrapField((long) (short) 1, (int) (byte) 100);
        int int66 = dateTimeField61.getLeapAmount(0L);
        org.joda.time.LocalDateTime localDateTime67 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime68 = new org.joda.time.LocalDateTime();
        boolean boolean69 = localDateTime67.isBefore((org.joda.time.ReadablePartial) localDateTime68);
        org.joda.time.LocalDateTime localDateTime71 = localDateTime68.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property72 = localDateTime68.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime73 = property72.withMinimumValue();
        long long74 = property72.remainder();
        java.lang.String str75 = property72.toString();
        org.joda.time.LocalDateTime localDateTime76 = property72.roundFloorCopy();
        org.joda.time.DateTimeZone dateTimeZone77 = org.joda.time.DateTimeZone.getDefault();
        int int79 = dateTimeZone77.getStandardOffset((long) (-100));
        org.joda.time.LocalDateTime localDateTime80 = new org.joda.time.LocalDateTime(dateTimeZone77);
        int[] intArray81 = localDateTime80.getValues();
        int int82 = dateTimeField61.getMaximumValue((org.joda.time.ReadablePartial) localDateTime76, intArray81);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray84 = dateTimeField7.addWrapPartial((org.joda.time.ReadablePartial) localDateTime49, 2000, intArray81, 52);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 2000");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[2022, 2, 11, 35299446]");
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(intArray17);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[2022, 2, 11, 35299446]");
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "DateTimeField[dayOfMonth]" + "'", str28, "DateTimeField[dayOfMonth]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "dayOfMonth" + "'", str32, "dayOfMonth");
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(dateTimeFieldType38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 604800001L + "'", long64 == 604800001L);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(localDateTime71);
        org.junit.Assert.assertNotNull(property72);
        org.junit.Assert.assertNotNull(localDateTime73);
// flaky:         org.junit.Assert.assertTrue("'" + long74 + "' != '" + 35299446L + "'", long74 == 35299446L);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "Property[dayOfMonth]" + "'", str75, "Property[dayOfMonth]");
        org.junit.Assert.assertNotNull(localDateTime76);
        org.junit.Assert.assertNotNull(dateTimeZone77);
// flaky:         org.junit.Assert.assertTrue("'" + int79 + "' != '" + 117 + "'", int79 == 117);
        org.junit.Assert.assertNotNull(intArray81);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[2022, 2, 11, 35299446]");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 28 + "'", int82 == 28);
    }

    @Test
    public void test00467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00467");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Locale[] localeArray3 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList4 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList4, localeArray3);
        java.util.Locale locale6 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList4);
        java.util.Locale.LanguageRange[] languageRangeArray7 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList8 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList8, languageRangeArray7);
        java.util.Locale[] localeArray10 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList11 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList11, localeArray10);
        java.util.Locale locale13 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList8, (java.util.Collection<java.util.Locale>) localeList11);
        java.util.Locale.FilteringMode filteringMode14 = null;
        java.util.List<java.util.Locale> localeList15 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList11, filteringMode14);
        java.util.Locale locale16 = java.util.Locale.FRENCH;
        java.util.Set<java.lang.String> strSet17 = locale16.getUnicodeLocaleAttributes();
        java.lang.Object[] objArray18 = strSet17.toArray();
        java.util.Locale.FilteringMode filteringMode19 = java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList20 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet17, filteringMode19);
        java.util.Locale locale21 = java.util.Locale.ITALIAN;
        java.lang.String str22 = locale21.getDisplayCountry();
        boolean boolean23 = strSet17.equals((java.lang.Object) locale21);
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.getDefault();
        java.util.Locale locale27 = null;
        java.lang.String str28 = dateTimeZone25.getName((long) (short) 10, locale27);
        long long30 = dateTimeZone24.getMillisKeepLocal(dateTimeZone25, (long) 874);
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.getDefault();
        long long33 = dateTimeZone25.getMillisKeepLocal(dateTimeZone31, (long) '4');
        int int35 = dateTimeZone25.getOffsetFromLocal((long) 83);
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime38 = localDateTime36.minusMillis((int) (byte) 1);
        java.lang.String str39 = localDateTime38.toString();
        org.joda.time.DateTime dateTime40 = localDateTime38.toDateTime();
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime43 = localDateTime41.minusMillis((int) (byte) 1);
        java.lang.String str44 = localDateTime43.toString();
        org.joda.time.DateTime dateTime45 = localDateTime43.toDateTime();
        boolean boolean46 = dateTime40.isEqual((org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.LocalDateTime localDateTime47 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime49 = localDateTime47.minusMillis((int) (byte) 1);
        java.lang.String str50 = localDateTime49.toString();
        org.joda.time.DateTime dateTime51 = localDateTime49.toDateTime();
        boolean boolean52 = dateTime40.isEqual((org.joda.time.ReadableInstant) dateTime51);
        org.joda.time.LocalDateTime localDateTime53 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime55 = localDateTime53.minusMillis((int) (byte) 1);
        java.lang.String str56 = localDateTime55.toString();
        org.joda.time.DateTime dateTime57 = localDateTime55.toDateTime();
        org.joda.time.LocalDateTime localDateTime58 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime60 = localDateTime58.minusMillis((int) (byte) 1);
        java.lang.String str61 = localDateTime60.toString();
        org.joda.time.DateTime dateTime62 = localDateTime60.toDateTime();
        boolean boolean63 = dateTime57.isEqual((org.joda.time.ReadableInstant) dateTime62);
        boolean boolean64 = dateTime40.isEqual((org.joda.time.ReadableInstant) dateTime62);
        int int65 = dateTimeZone25.getOffset((org.joda.time.ReadableInstant) dateTime62);
        org.joda.time.DateTimeZone dateTimeZone66 = dateTime62.getZone();
        org.joda.time.LocalDateTime localDateTime67 = org.joda.time.LocalDateTime.now(dateTimeZone66);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime68 = new org.joda.time.LocalDateTime((java.lang.Object) strSet17, dateTimeZone66);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: java.util.Collections$EmptySet");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localeArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(locale6);
        org.junit.Assert.assertNotNull(languageRangeArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(localeArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(locale13);
        org.junit.Assert.assertNotNull(localeList15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet17);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[]");
        org.junit.Assert.assertTrue("'" + filteringMode19 + "' != '" + java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES + "'", filteringMode19.equals(java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "it");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(dateTimeZone25);
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "+00:00:00.117" + "'", str28, "+00:00:00.117");
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 874L + "'", long30 == 874L);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 52L + "'", long33 == 52L);
// flaky:         org.junit.Assert.assertTrue("'" + int35 + "' != '" + 117 + "'", int35 == 117);
        org.junit.Assert.assertNotNull(localDateTime38);
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "2022-02-11T09:48:19.514" + "'", str39, "2022-02-11T09:48:19.514");
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(localDateTime43);
// flaky:         org.junit.Assert.assertEquals("'" + str44 + "' != '" + "2022-02-11T09:48:19.514" + "'", str44, "2022-02-11T09:48:19.514");
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(localDateTime49);
// flaky:         org.junit.Assert.assertEquals("'" + str50 + "' != '" + "2022-02-11T09:48:19.514" + "'", str50, "2022-02-11T09:48:19.514");
        org.junit.Assert.assertNotNull(dateTime51);
// flaky:         org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(localDateTime55);
// flaky:         org.junit.Assert.assertEquals("'" + str56 + "' != '" + "2022-02-11T09:48:19.514" + "'", str56, "2022-02-11T09:48:19.514");
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(localDateTime60);
// flaky:         org.junit.Assert.assertEquals("'" + str61 + "' != '" + "2022-02-11T09:48:19.514" + "'", str61, "2022-02-11T09:48:19.514");
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int65 + "' != '" + 117 + "'", int65 == 117);
        org.junit.Assert.assertNotNull(dateTimeZone66);
        org.junit.Assert.assertNotNull(localDateTime67);
    }

    @Test
    public void test00468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00468");
        java.util.Locale locale2 = new java.util.Locale("", "weekyear");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str4 = locale2.getUnicodeLocaleType("2022-02-11T09:48:03.871");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed Unicode locale key: 2022-02-11T09:48:03.871");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(locale2.toString(), "_WEEKYEAR");
    }

    @Test
    public void test00469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00469");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("2022-02-11T09:47:49.888");
        timeZone1.setID("2022-02-11T09:47:52.558");
        java.util.TimeZone.setDefault(timeZone1);
        boolean boolean5 = timeZone1.observesDaylightTime();
        int int6 = timeZone1.getDSTSavings();
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    }

    @Test
    public void test00470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00470");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property5 = localDateTime1.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime6 = property5.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField7 = property5.getField();
        java.util.Locale locale8 = java.util.Locale.JAPAN;
        java.util.Locale locale9 = java.util.Locale.FRENCH;
        java.lang.String str10 = locale8.getDisplayCountry(locale9);
        int int11 = property5.getMaximumTextLength(locale9);
        java.lang.String str12 = property5.getName();
        java.util.Locale locale16 = new java.util.Locale("11", "weekyear", "fra");
        java.lang.String str17 = locale16.getDisplayName();
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime();
        boolean boolean20 = localDateTime18.isBefore((org.joda.time.ReadablePartial) localDateTime19);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime19.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property23 = localDateTime19.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime();
        boolean boolean26 = localDateTime24.isBefore((org.joda.time.ReadablePartial) localDateTime25);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime25.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property29 = localDateTime25.dayOfMonth();
        java.util.Locale locale30 = java.util.Locale.FRENCH;
        java.util.Set<java.lang.String> strSet31 = locale30.getUnicodeLocaleAttributes();
        java.lang.String str32 = locale30.getVariant();
        java.lang.String str33 = property29.getAsText(locale30);
        java.lang.String str34 = property23.getAsShortText(locale30);
        java.lang.String str35 = locale16.getDisplayCountry(locale30);
        java.lang.String str36 = property5.getAsText(locale16);
        java.lang.Object obj37 = locale16.clone();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Japon" + "'", str10, "Japon");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "dayOfMonth" + "'", str12, "dayOfMonth");
        org.junit.Assert.assertEquals(locale16.toString(), "11_WEEKYEAR_fra");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "11 (WEEKYEAR,fra)" + "'", str17, "11 (WEEKYEAR,fra)");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "11" + "'", str33, "11");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "11" + "'", str34, "11");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "WEEKYEAR" + "'", str35, "WEEKYEAR");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "11" + "'", str36, "11");
        org.junit.Assert.assertNotNull(obj37);
        org.junit.Assert.assertEquals(obj37.toString(), "11_WEEKYEAR_fra");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj37), "11_WEEKYEAR_fra");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj37), "11_WEEKYEAR_fra");
    }

    @Test
    public void test00471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00471");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) 'x');
        java.lang.String str3 = dateTimeZone1.getNameKey(58L);
        java.lang.String str5 = dateTimeZone1.getShortName(75600050L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00:00.120" + "'", str5, "+00:00:00.120");
    }

    @Test
    public void test00472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00472");
        java.util.Locale locale3 = new java.util.Locale("", "CA", "2022-02-11T09:47:57.596");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str5 = locale3.getExtension('#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed extension key: #");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(locale3.toString(), "_CA_2022-02-11T09:47:57.596");
    }

    @Test
    public void test00473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00473");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forID("2022-02-11T09:48:00.361");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The datetime zone id '2022-02-11T09:48:00.361' is not recognised");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00474");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property5 = localDateTime1.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime6 = property5.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField7 = property5.getField();
        long long9 = dateTimeField7.remainder((-1L));
        java.util.Locale locale11 = java.util.Locale.UK;
        java.lang.String str12 = dateTimeField7.getAsShortText((long) 22, locale11);
        java.lang.String str14 = dateTimeField7.getAsShortText((long) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.field.FieldUtils.verifyValueBounds(dateTimeField7, 59, 207, (-2));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 59 for dayOfMonth must be in the range [207,-2]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 86399999L + "'", long9 == 86399999L);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "1" + "'", str12, "1");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1" + "'", str14, "1");
    }

    @Test
    public void test00475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00475");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property5 = localDateTime1.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime6 = property5.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField7 = property5.getField();
        int int8 = property5.getMaximumValueOverall();
        org.joda.time.LocalDateTime localDateTime10 = property5.addToCopy(0);
        org.joda.time.LocalDateTime localDateTime12 = property5.addToCopy(1);
        org.joda.time.LocalDateTime localDateTime13 = property5.getLocalDateTime();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withDayOfWeek(112);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 112 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 31 + "'", int8 == 31);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
    }

    @Test
    public void test00476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00476");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        int[] intArray3 = localDateTime1.getValues();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.plusYears((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        boolean boolean8 = localDateTime6.isBefore((org.joda.time.ReadablePartial) localDateTime7);
        int[] intArray9 = localDateTime7.getValues();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime1.withFields((org.joda.time.ReadablePartial) localDateTime7);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetMillis((int) 'u');
        long long16 = dateTimeZone12.convertLocalToUTC((long) 1, false, 822L);
        java.util.TimeZone timeZone17 = dateTimeZone12.toTimeZone();
        int int19 = dateTimeZone12.getOffset(10L);
        org.joda.time.DateTime dateTime20 = localDateTime1.toDateTime(dateTimeZone12);
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.minusMillis((int) (byte) 1);
        java.lang.String str24 = localDateTime23.toString();
        org.joda.time.LocalDateTime localDateTime26 = localDateTime23.minusMonths((int) 'a');
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.minusMinutes(22);
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.minusMillis((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.plusDays(0);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime33.plusMillis(22);
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        int int37 = localDateTime35.get(dateTimeFieldType36);
        org.joda.time.LocalDateTime.Property property38 = localDateTime26.property(dateTimeFieldType36);
        java.lang.String str39 = dateTimeFieldType36.getName();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime41 = localDateTime1.withField(dateTimeFieldType36, (-69000));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -69000 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(intArray3);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[2022, 2, 11, 35300031]");
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(intArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[2022, 2, 11, 35300031]");
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-116L) + "'", long16 == (-116L));
        org.junit.Assert.assertNotNull(timeZone17);
        org.junit.Assert.assertEquals(timeZone17.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 117 + "'", int19 == 117);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(localDateTime23);
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "2022-02-11T09:48:20.030" + "'", str24, "2022-02-11T09:48:20.030");
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 6 + "'", int37 == 6);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "weekOfWeekyear" + "'", str39, "weekOfWeekyear");
    }

    @Test
    public void test00477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00477");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds((int) (byte) 100);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray5 = localDateTime4.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.plusSeconds((int) (short) 1);
        int int8 = localDateTime4.getYearOfCentury();
        org.joda.time.LocalDateTime.Property property9 = localDateTime4.millisOfSecond();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str11 = localDateTime4.toString("fr");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: f");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 22 + "'", int8 == 22);
        org.junit.Assert.assertNotNull(property9);
    }

    @Test
    public void test00478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00478");
        int int4 = org.joda.time.field.FieldUtils.getWrappedValue((int) ' ', 19034, 0, (int) (byte) 10);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 3 + "'", int4 == 3);
    }

    @Test
    public void test00479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00479");
        java.util.List<java.util.Locale.LanguageRange> languageRangeList0 = null;
        java.util.Set<java.lang.String> strSet1 = org.joda.time.DateTimeZone.getAvailableIDs();
        java.util.Locale.FilteringMode filteringMode2 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.lang.String> strList3 = java.util.Locale.filterTags(languageRangeList0, (java.util.Collection<java.lang.String>) strSet1, filteringMode2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertTrue("'" + filteringMode2 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode2.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
    }

    @Test
    public void test00480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00480");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.getDefault();
        java.util.Locale locale4 = null;
        java.lang.String str5 = dateTimeZone2.getName((long) (short) 10, locale4);
        long long7 = dateTimeZone1.getMillisKeepLocal(dateTimeZone2, (long) 874);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        long long10 = dateTimeZone2.getMillisKeepLocal(dateTimeZone8, (long) '4');
        int int12 = dateTimeZone2.getOffsetFromLocal((long) 83);
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime(0L, dateTimeZone2);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.yearOfCentury();
        java.lang.String str15 = dateTimeFieldType14.getName();
        java.lang.String str16 = dateTimeFieldType14.toString();
        org.joda.time.DurationFieldType durationFieldType17 = dateTimeFieldType14.getDurationType();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime13.withFieldAdded(durationFieldType17, 42);
        int int20 = localDateTime13.getEra();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTimeZone2);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00:00.117" + "'", str5, "+00:00:00.117");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 874L + "'", long7 == 874L);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 52L + "'", long10 == 52L);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 117 + "'", int12 == 117);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "yearOfCentury" + "'", str15, "yearOfCentury");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "yearOfCentury" + "'", str16, "yearOfCentury");
        org.junit.Assert.assertNotNull(durationFieldType17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
    }

    @Test
    public void test00481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00481");
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime();
        boolean boolean9 = localDateTime7.isBefore((org.joda.time.ReadablePartial) localDateTime8);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime8.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property12 = localDateTime8.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime13 = property12.withMinimumValue();
        long long14 = property12.remainder();
        int int15 = property12.getMinimumValue();
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.minusMillis((int) (byte) 1);
        java.lang.String str19 = localDateTime18.toString();
        org.joda.time.DateTime dateTime20 = localDateTime18.toDateTime();
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.minusMillis((int) (byte) 1);
        java.lang.String str24 = localDateTime23.toString();
        org.joda.time.DateTime dateTime25 = localDateTime23.toDateTime();
        boolean boolean26 = dateTime20.isEqual((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.minusMillis((int) (byte) 1);
        java.lang.String str30 = localDateTime29.toString();
        org.joda.time.DateTime dateTime31 = localDateTime29.toDateTime();
        boolean boolean32 = dateTime20.isEqual((org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.Instant instant33 = dateTime31.toInstant();
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone34);
        java.util.Locale locale37 = java.util.Locale.CHINESE;
        java.lang.String str38 = dateTimeZone34.getName((long) (short) 0, locale37);
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime41 = localDateTime39.minusMillis((int) (byte) 1);
        java.lang.String str42 = localDateTime41.toString();
        org.joda.time.DateTime dateTime43 = localDateTime41.toDateTime();
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime46 = localDateTime44.minusMillis((int) (byte) 1);
        java.lang.String str47 = localDateTime46.toString();
        org.joda.time.DateTime dateTime48 = localDateTime46.toDateTime();
        boolean boolean49 = dateTime43.isEqual((org.joda.time.ReadableInstant) dateTime48);
        int int50 = dateTimeZone34.getOffset((org.joda.time.ReadableInstant) dateTime43);
        org.joda.time.LocalDateTime localDateTime51 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime53 = localDateTime51.minusMillis((int) (byte) 1);
        java.lang.String str54 = localDateTime53.toString();
        org.joda.time.DateTime dateTime55 = localDateTime53.toDateTime();
        org.joda.time.LocalDateTime localDateTime56 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime58 = localDateTime56.minusMillis((int) (byte) 1);
        java.lang.String str59 = localDateTime58.toString();
        org.joda.time.DateTime dateTime60 = localDateTime58.toDateTime();
        boolean boolean61 = dateTime55.isEqual((org.joda.time.ReadableInstant) dateTime60);
        org.joda.time.LocalDateTime localDateTime62 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime64 = localDateTime62.minusMillis((int) (byte) 1);
        java.lang.String str65 = localDateTime64.toString();
        org.joda.time.DateTime dateTime66 = localDateTime64.toDateTime();
        boolean boolean67 = dateTime55.isEqual((org.joda.time.ReadableInstant) dateTime66);
        boolean boolean68 = dateTime43.isEqual((org.joda.time.ReadableInstant) dateTime66);
        boolean boolean69 = instant33.isBefore((org.joda.time.ReadableInstant) dateTime43);
        long long70 = property12.getDifferenceAsLong((org.joda.time.ReadableInstant) instant33);
        org.joda.time.Chronology chronology71 = instant33.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime72 = new org.joda.time.LocalDateTime(3600000, 35279748, 714, 738, 28, 48, 278, chronology71);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 738 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDateTime13);
// flaky:         org.junit.Assert.assertTrue("'" + long14 + "' != '" + 35300184L + "'", long14 == 35300184L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(localDateTime18);
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "2022-02-11T09:48:20.184" + "'", str19, "2022-02-11T09:48:20.184");
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(localDateTime23);
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "2022-02-11T09:48:20.184" + "'", str24, "2022-02-11T09:48:20.184");
        org.junit.Assert.assertNotNull(dateTime25);
// flaky:         org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(localDateTime29);
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "2022-02-11T09:48:20.184" + "'", str30, "2022-02-11T09:48:20.184");
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(instant33);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "zh");
// flaky:         org.junit.Assert.assertEquals("'" + str38 + "' != '" + "+00:00:00.117" + "'", str38, "+00:00:00.117");
        org.junit.Assert.assertNotNull(localDateTime41);
// flaky:         org.junit.Assert.assertEquals("'" + str42 + "' != '" + "2022-02-11T09:48:20.184" + "'", str42, "2022-02-11T09:48:20.184");
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(localDateTime46);
// flaky:         org.junit.Assert.assertEquals("'" + str47 + "' != '" + "2022-02-11T09:48:20.184" + "'", str47, "2022-02-11T09:48:20.184");
        org.junit.Assert.assertNotNull(dateTime48);
// flaky:         org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int50 + "' != '" + 117 + "'", int50 == 117);
        org.junit.Assert.assertNotNull(localDateTime53);
// flaky:         org.junit.Assert.assertEquals("'" + str54 + "' != '" + "2022-02-11T09:48:20.184" + "'", str54, "2022-02-11T09:48:20.184");
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(localDateTime58);
// flaky:         org.junit.Assert.assertEquals("'" + str59 + "' != '" + "2022-02-11T09:48:20.184" + "'", str59, "2022-02-11T09:48:20.184");
        org.junit.Assert.assertNotNull(dateTime60);
// flaky:         org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(localDateTime64);
// flaky:         org.junit.Assert.assertEquals("'" + str65 + "' != '" + "2022-02-11T09:48:20.184" + "'", str65, "2022-02-11T09:48:20.184");
        org.junit.Assert.assertNotNull(dateTime66);
// flaky:         org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
// flaky:         org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 0L + "'", long70 == 0L);
        org.junit.Assert.assertNotNull(chronology71);
    }

    @Test
    public void test00482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00482");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime(4, 704, 42, 6, 714, 52);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 714 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00483");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("deu");
        java.lang.Object obj2 = timeZone1.clone();
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(obj2);
        org.junit.Assert.assertEquals(obj2.toString(), "sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj2), "sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj2), "sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null]");
    }

    @Test
    public void test00484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00484");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) 'u');
        long long5 = dateTimeZone1.convertLocalToUTC((long) 1, false, 822L);
        java.util.TimeZone timeZone6 = dateTimeZone1.toTimeZone();
        boolean boolean7 = timeZone6.observesDaylightTime();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime();
        boolean boolean12 = localDateTime10.isBefore((org.joda.time.ReadablePartial) localDateTime11);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime11.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property15 = localDateTime11.dayOfMonth();
        java.util.Locale locale16 = java.util.Locale.FRENCH;
        java.util.Set<java.lang.String> strSet17 = locale16.getUnicodeLocaleAttributes();
        java.lang.String str18 = locale16.getVariant();
        java.lang.String str19 = property15.getAsText(locale16);
        org.joda.time.ReadableInstant readableInstant20 = null;
        int int21 = property15.getDifference(readableInstant20);
        int int22 = property15.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime23 = property15.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime();
        boolean boolean26 = localDateTime24.isBefore((org.joda.time.ReadablePartial) localDateTime25);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime25.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property29 = localDateTime25.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime30 = property29.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField31 = property29.getField();
        int int32 = dateTimeField31.getMaximumValue();
        java.util.Locale locale36 = new java.util.Locale("fra", "");
        java.util.Set<java.lang.String> strSet37 = locale36.getUnicodeLocaleAttributes();
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime();
        boolean boolean40 = localDateTime38.isBefore((org.joda.time.ReadablePartial) localDateTime39);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime39.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property43 = localDateTime39.dayOfMonth();
        org.joda.time.DurationField durationField44 = property43.getRangeDurationField();
        boolean boolean45 = strSet37.contains((java.lang.Object) durationField44);
        org.joda.time.LocalDateTime localDateTime46 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime47 = new org.joda.time.LocalDateTime();
        boolean boolean48 = localDateTime46.isBefore((org.joda.time.ReadablePartial) localDateTime47);
        org.joda.time.LocalDateTime localDateTime50 = localDateTime47.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property51 = localDateTime47.dayOfMonth();
        boolean boolean52 = property51.isLeap();
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone53);
        java.util.Locale locale56 = java.util.Locale.CHINESE;
        java.lang.String str57 = dateTimeZone53.getName((long) (short) 0, locale56);
        java.lang.String str58 = property51.getAsShortText(locale56);
        boolean boolean59 = strSet37.equals((java.lang.Object) locale56);
        java.lang.String str60 = locale56.getISO3Country();
        java.lang.String str61 = dateTimeField31.getAsText(0, locale56);
        java.lang.String str62 = property15.getAsText(locale56);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str63 = timeZone6.getDisplayName(false, (-2021), locale56);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal style: -2021");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-116L) + "'", long5 == (-116L));
        org.junit.Assert.assertNotNull(timeZone6);
        org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "11" + "'", str19, "11");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 31 + "'", int32 == 31);
        org.junit.Assert.assertEquals(locale36.toString(), "fra");
        org.junit.Assert.assertNotNull(strSet37);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(durationField44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "zh");
// flaky:         org.junit.Assert.assertEquals("'" + str57 + "' != '" + "+00:00:00.117" + "'", str57, "+00:00:00.117");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "11" + "'", str58, "11");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "0" + "'", str61, "0");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "11" + "'", str62, "11");
    }

    @Test
    public void test00485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00485");
        java.lang.String[] strArray1 = java.util.TimeZone.getAvailableIDs(556);
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) 'u');
        long long7 = dateTimeZone3.convertLocalToUTC((long) 1, false, 822L);
        java.lang.String str8 = dateTimeZone3.toString();
        java.lang.String str10 = dateTimeZone3.getNameKey((long) (-222));
        boolean boolean12 = dateTimeZone3.isStandardOffset((long) 48);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((java.lang.Object) strArray1, dateTimeZone3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: [Ljava.lang.String;");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-116L) + "'", long7 == (-116L));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+00:00:00.117" + "'", str8, "+00:00:00.117");
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test00486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00486");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.minusMillis((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.plusDays(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.withField(dateTimeFieldType5, 0);
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime();
        boolean boolean10 = localDateTime8.isBefore((org.joda.time.ReadablePartial) localDateTime9);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime9.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime9.plusMinutes((int) '#');
        org.joda.time.LocalDateTime localDateTime16 = localDateTime9.minusMinutes((int) (short) 1);
        boolean boolean17 = localDateTime7.isAfter((org.joda.time.ReadablePartial) localDateTime16);
        org.joda.time.LocalDateTime.Property property18 = localDateTime7.secondOfMinute();
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = property18.getFieldType();
        int int20 = property18.getMaximumValue();
        org.joda.time.DateTimeField dateTimeField21 = property18.getField();
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime();
        boolean boolean24 = localDateTime22.isBefore((org.joda.time.ReadablePartial) localDateTime23);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime23.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime23.plusMinutes((int) '#');
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.LocalDateTime localDateTime30 = localDateTime23.minus(readablePeriod29);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime30.withYear(52);
        org.joda.time.LocalDateTime.Property property33 = localDateTime32.weekyear();
        java.util.Locale locale34 = java.util.Locale.FRANCE;
        java.lang.String str35 = dateTimeField21.getAsShortText((org.joda.time.ReadablePartial) localDateTime32, locale34);
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime();
        boolean boolean38 = localDateTime36.isBefore((org.joda.time.ReadablePartial) localDateTime37);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime37.plusSeconds((int) (byte) 100);
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone42);
        java.util.Locale locale45 = java.util.Locale.CHINESE;
        java.lang.String str46 = dateTimeZone42.getName((long) (short) 0, locale45);
        org.joda.time.LocalDateTime localDateTime47 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime49 = localDateTime47.minusMillis((int) (byte) 1);
        java.lang.String str50 = localDateTime49.toString();
        org.joda.time.DateTime dateTime51 = localDateTime49.toDateTime();
        org.joda.time.LocalDateTime localDateTime52 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime54 = localDateTime52.minusMillis((int) (byte) 1);
        java.lang.String str55 = localDateTime54.toString();
        org.joda.time.DateTime dateTime56 = localDateTime54.toDateTime();
        boolean boolean57 = dateTime51.isEqual((org.joda.time.ReadableInstant) dateTime56);
        int int58 = dateTimeZone42.getOffset((org.joda.time.ReadableInstant) dateTime51);
        org.joda.time.LocalDateTime localDateTime59 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime61 = localDateTime59.minusMillis((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime63 = localDateTime61.plusDays(0);
        boolean boolean64 = dateTime51.equals((java.lang.Object) localDateTime63);
        int[] intArray65 = localDateTime63.getValues();
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray67 = dateTimeField21.addWrapPartial((org.joda.time.ReadablePartial) localDateTime37, 47, intArray65, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 47");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 59 + "'", int20 == 59);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "fr_FR");
// flaky:         org.junit.Assert.assertEquals("'" + str35 + "' != '" + "20" + "'", str35, "20");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "zh");
// flaky:         org.junit.Assert.assertEquals("'" + str46 + "' != '" + "+00:00:00.117" + "'", str46, "+00:00:00.117");
        org.junit.Assert.assertNotNull(localDateTime49);
// flaky:         org.junit.Assert.assertEquals("'" + str50 + "' != '" + "2022-02-11T09:48:20.579" + "'", str50, "2022-02-11T09:48:20.579");
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(localDateTime54);
// flaky:         org.junit.Assert.assertEquals("'" + str55 + "' != '" + "2022-02-11T09:48:20.579" + "'", str55, "2022-02-11T09:48:20.579");
        org.junit.Assert.assertNotNull(dateTime56);
// flaky:         org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int58 + "' != '" + 117 + "'", int58 == 117);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(intArray65);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[2022, 2, 11, 35300579]");
    }

    @Test
    public void test00487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00487");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale.Builder builder2 = builder1.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder4 = builder1.setVariant("2022-02-11T09:48:10.190");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed variant: 2022-02-11T09:48:10.190 [at index 5]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
    }

    @Test
    public void test00488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00488");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.millisOfDay();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime0.plusMonths((int) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            int int7 = localDateTime5.getValue(18);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 18");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
    }

    @Test
    public void test00489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00489");
        java.util.Locale locale3 = new java.util.Locale("2022-02-11T09:47:52.924", "2022-02-11T09:47:51.404", "");
        java.util.Locale.Category category4 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale5 = java.util.Locale.getDefault(category4);
        java.lang.String str6 = locale5.getDisplayName();
        java.util.Locale locale9 = new java.util.Locale("fra", "");
        java.util.Set<java.lang.String> strSet10 = locale9.getUnicodeLocaleAttributes();
        java.lang.String str11 = locale9.getScript();
        java.util.Set<java.lang.Character> charSet12 = locale9.getExtensionKeys();
        java.util.Set<java.lang.String> strSet13 = locale9.getUnicodeLocaleKeys();
        java.lang.String str14 = locale9.getDisplayName();
        java.lang.String str15 = locale5.getDisplayLanguage(locale9);
        java.lang.String str16 = locale3.getDisplayLanguage(locale9);
        java.util.Locale locale20 = new java.util.Locale("11", "weekyear", "fra");
        java.lang.String str21 = locale20.getDisplayName();
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime();
        boolean boolean24 = localDateTime22.isBefore((org.joda.time.ReadablePartial) localDateTime23);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime23.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property27 = localDateTime23.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime28 = property27.withMinimumValue();
        java.util.Locale locale29 = java.util.Locale.UK;
        java.lang.String str30 = property27.getAsShortText(locale29);
        java.lang.String str31 = locale20.getDisplayScript(locale29);
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime();
        boolean boolean34 = localDateTime32.isBefore((org.joda.time.ReadablePartial) localDateTime33);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime33.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property37 = localDateTime33.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime38 = property37.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField39 = property37.getField();
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime();
        boolean boolean42 = localDateTime40.isBefore((org.joda.time.ReadablePartial) localDateTime41);
        int[] intArray43 = localDateTime41.getValues();
        org.joda.time.LocalDateTime localDateTime45 = localDateTime41.plusYears((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime46 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime47 = new org.joda.time.LocalDateTime();
        boolean boolean48 = localDateTime46.isBefore((org.joda.time.ReadablePartial) localDateTime47);
        int[] intArray49 = localDateTime47.getValues();
        org.joda.time.LocalDateTime localDateTime50 = localDateTime41.withFields((org.joda.time.ReadablePartial) localDateTime47);
        org.joda.time.LocalDateTime localDateTime52 = localDateTime50.minusMillis((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime54 = localDateTime52.minusSeconds((int) '#');
        org.joda.time.LocalDateTime localDateTime56 = localDateTime54.withWeekOfWeekyear(50);
        org.joda.time.LocalDateTime localDateTime58 = localDateTime54.withMinuteOfHour((int) (byte) 0);
        int int59 = dateTimeField39.getMinimumValue((org.joda.time.ReadablePartial) localDateTime54);
        org.joda.time.tz.NameProvider nameProvider61 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.LocalDateTime localDateTime62 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime63 = new org.joda.time.LocalDateTime();
        boolean boolean64 = localDateTime62.isBefore((org.joda.time.ReadablePartial) localDateTime63);
        org.joda.time.LocalDateTime localDateTime66 = localDateTime63.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property67 = localDateTime63.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime68 = property67.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField69 = property67.getField();
        int int70 = dateTimeField69.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime71 = new org.joda.time.LocalDateTime();
        int int72 = localDateTime71.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime74 = localDateTime71.minusMonths((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime76 = localDateTime74.minusMonths((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime78 = localDateTime76.plusWeeks(22);
        java.util.Locale locale80 = java.util.Locale.JAPANESE;
        java.lang.String str81 = dateTimeField69.getAsShortText((org.joda.time.ReadablePartial) localDateTime78, 22, locale80);
        java.lang.String str84 = nameProvider61.getName(locale80, "11", "Etc/UTC");
        org.joda.time.DateTimeZone.setNameProvider(nameProvider61);
        java.util.Locale locale86 = java.util.Locale.FRENCH;
        java.util.Set<java.lang.String> strSet87 = locale86.getUnicodeLocaleAttributes();
        java.lang.String str88 = locale86.getVariant();
        java.lang.String str91 = nameProvider61.getShortName(locale86, "2022-02-11T09:48:02.913", "2022-02-11T09:48:00.361");
        java.lang.String str92 = dateTimeField39.getAsShortText((int) '#', locale86);
        java.lang.String str93 = locale20.getDisplayName(locale86);
        java.lang.String str94 = locale3.getDisplayName(locale20);
        org.junit.Assert.assertEquals(locale3.toString(), "2022-02-11t09:47:52.924_2022-02-11T09:47:51.404");
        org.junit.Assert.assertTrue("'" + category4 + "' != '" + java.util.Locale.Category.FORMAT + "'", category4.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale5);
// flaky:         org.junit.Assert.assertEquals(locale5.toString(), "fr");
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "French" + "'", str6, "French");
        org.junit.Assert.assertEquals(locale9.toString(), "fra");
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(charSet12);
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "fra" + "'", str14, "fra");
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "French" + "'", str15, "French");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "2022-02-11t09:47:52.924" + "'", str16, "2022-02-11t09:47:52.924");
        org.junit.Assert.assertEquals(locale20.toString(), "11_WEEKYEAR_fra");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "11 (WEEKYEAR,fra)" + "'", str21, "11 (WEEKYEAR,fra)");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "11" + "'", str30, "11");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(intArray43);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[2022, 2, 11, 35300786]");
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(intArray49);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[2022, 2, 11, 35300786]");
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertNotNull(nameProvider61);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertNotNull(dateTimeField69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 31 + "'", int70 == 31);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 22 + "'", int72 == 22);
        org.junit.Assert.assertNotNull(localDateTime74);
        org.junit.Assert.assertNotNull(localDateTime76);
        org.junit.Assert.assertNotNull(localDateTime78);
        org.junit.Assert.assertNotNull(locale80);
        org.junit.Assert.assertEquals(locale80.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "22" + "'", str81, "22");
        org.junit.Assert.assertNull(str84);
        org.junit.Assert.assertNotNull(locale86);
        org.junit.Assert.assertEquals(locale86.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet87);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "" + "'", str88, "");
        org.junit.Assert.assertNull(str91);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "35" + "'", str92, "35");
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "11 (WEEKYEAR,fra)" + "'", str93, "11 (WEEKYEAR,fra)");
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "2022-02-11t09:47:52.924 (2022-02-11T09:47:51.404)" + "'", str94, "2022-02-11t09:47:52.924 (2022-02-11T09:47:51.404)");
    }

    @Test
    public void test00490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00490");
        int int2 = org.joda.time.field.FieldUtils.safeMultiply(0, 365);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
    }

    @Test
    public void test00491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00491");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("2022-12-16T09:47:17.749");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=2022-12-16t09:47:17.749");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00492");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property5 = localDateTime1.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime6 = property5.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField7 = property5.getField();
        long long9 = dateTimeField7.remainder((-1L));
        java.util.Locale locale11 = java.util.Locale.UK;
        java.lang.String str12 = dateTimeField7.getAsShortText((long) 22, locale11);
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime();
        boolean boolean15 = localDateTime13.isBefore((org.joda.time.ReadablePartial) localDateTime14);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime14.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime14.plusMinutes((int) '#');
        org.joda.time.LocalDateTime localDateTime21 = localDateTime14.minusMinutes((int) (short) 1);
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.LocalDateTime localDateTime24 = localDateTime14.withDurationAdded(readableDuration22, (int) (short) 100);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = null;
        java.lang.String str26 = localDateTime14.toString(dateTimeFormatter25);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime14.minusMillis(379);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.withWeekOfWeekyear((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime();
        boolean boolean34 = localDateTime32.isBefore((org.joda.time.ReadablePartial) localDateTime33);
        int[] intArray35 = localDateTime33.getValues();
        org.joda.time.LocalDateTime localDateTime37 = localDateTime33.plusYears((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime();
        boolean boolean40 = localDateTime38.isBefore((org.joda.time.ReadablePartial) localDateTime39);
        int[] intArray41 = localDateTime39.getValues();
        org.joda.time.LocalDateTime localDateTime42 = localDateTime33.withFields((org.joda.time.ReadablePartial) localDateTime39);
        org.joda.time.LocalDateTime localDateTime44 = localDateTime42.minusMillis((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime46 = localDateTime44.minusSeconds((int) '#');
        org.joda.time.LocalDateTime localDateTime48 = localDateTime46.withWeekOfWeekyear(50);
        org.joda.time.LocalDateTime localDateTime50 = localDateTime46.withMinuteOfHour((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime52 = localDateTime46.minusMonths((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime54 = localDateTime52.plusYears(2022);
        int[] intArray55 = localDateTime52.getValues();
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray57 = dateTimeField7.add((org.joda.time.ReadablePartial) localDateTime28, (int) (short) 0, intArray55, 49);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Maximum value exceeded for add");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 86399999L + "'", long9 == 86399999L);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "1" + "'", str12, "1");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime24);
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "2022-02-11T09:48:21.198" + "'", str26, "2022-02-11T09:48:21.198");
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(intArray35);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[2022, 2, 11, 35301198]");
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(intArray41);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[2022, 2, 11, 35301198]");
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(intArray55);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[2021, 4, 11, 35266098]");
    }

    @Test
    public void test00493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00493");
        int int2 = org.joda.time.field.FieldUtils.safeMultiply(4, 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
    }

    @Test
    public void test00494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00494");
        java.util.Locale locale0 = java.util.Locale.JAPAN;
        java.util.Locale locale1 = java.util.Locale.ITALY;
        java.lang.String str2 = locale0.getDisplayScript(locale1);
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime();
        boolean boolean5 = localDateTime3.isBefore((org.joda.time.ReadablePartial) localDateTime4);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime4.plusMinutes((int) '#');
        org.joda.time.LocalDateTime localDateTime11 = localDateTime4.plusMonths(0);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minusWeeks(5);
        boolean boolean14 = locale1.equals((java.lang.Object) localDateTime13);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test00495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00495");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property5 = localDateTime1.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime6 = property5.withMinimumValue();
        long long7 = property5.remainder();
        org.joda.time.LocalDateTime localDateTime8 = property5.roundFloorCopy();
        int int9 = property5.getMinimumValue();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
// flaky:         org.junit.Assert.assertTrue("'" + long7 + "' != '" + 35301650L + "'", long7 == 35301650L);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
    }

    @Test
    public void test00496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00496");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale.Builder builder2 = builder1.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder5 = builder2.setUnicodeLocaleKeyword("2022-02-11T09:48:15.571", "2022-02-11T09:48:18.514");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale keyword key: 2022-02-11T09:48:15.571 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
    }

    @Test
    public void test00497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00497");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.field.FieldUtils.verifyValueBounds("hourOfHalfday", 292278993, 24, 46);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 292278993 for hourOfHalfday must be in the range [24,46]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test00498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00498");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Locale[] localeArray3 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList4 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList4, localeArray3);
        java.util.Locale locale6 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList4);
        java.util.Locale.LanguageRange[] languageRangeArray7 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList8 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList8, languageRangeArray7);
        java.util.Locale[] localeArray10 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList11 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList11, localeArray10);
        java.util.Locale locale13 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList8, (java.util.Collection<java.util.Locale>) localeList11);
        java.util.Locale.FilteringMode filteringMode14 = null;
        java.util.List<java.util.Locale> localeList15 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList11, filteringMode14);
        java.util.Locale locale16 = java.util.Locale.FRENCH;
        java.util.Set<java.lang.String> strSet17 = locale16.getUnicodeLocaleAttributes();
        java.lang.Object[] objArray18 = strSet17.toArray();
        java.util.Locale.FilteringMode filteringMode19 = java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList20 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet17, filteringMode19);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.getDefault();
        int int23 = dateTimeZone21.getStandardOffset((long) (-100));
        java.util.TimeZone timeZone24 = dateTimeZone21.toTimeZone();
        int int25 = timeZone24.getRawOffset();
        timeZone24.setRawOffset(50);
        java.lang.String str28 = timeZone24.getID();
        boolean boolean29 = strSet17.equals((java.lang.Object) timeZone24);
        java.lang.String str30 = timeZone24.getID();
        // The following exception was thrown during execution in test generation
        try {
            int int37 = timeZone24.getOffset(19034, 575, (-2), 35274908, 635, 86399999);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal era 19034");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localeArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(locale6);
        org.junit.Assert.assertNotNull(languageRangeArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(localeArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(locale13);
        org.junit.Assert.assertNotNull(localeList15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet17);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[]");
        org.junit.Assert.assertTrue("'" + filteringMode19 + "' != '" + java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES + "'", filteringMode19.equals(java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
// flaky:         org.junit.Assert.assertTrue("'" + int23 + "' != '" + 117 + "'", int23 == 117);
        org.junit.Assert.assertNotNull(timeZone24);
// flaky:         org.junit.Assert.assertEquals(timeZone24.getDisplayName(), "GMT+00:00");
// flaky:         org.junit.Assert.assertTrue("'" + int25 + "' != '" + 117 + "'", int25 == 117);
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "+00:00:00.117" + "'", str28, "+00:00:00.117");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "+00:00:00.117" + "'", str30, "+00:00:00.117");
    }

    @Test
    public void test00499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00499");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.millisOfDay();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime0.plusMonths((int) (byte) 1);
        org.joda.time.LocalDateTime.Property property6 = localDateTime0.weekyear();
        org.joda.time.LocalDateTime localDateTime7 = property6.roundHalfCeilingCopy();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str9 = localDateTime7.toString("2022-02-11T09:48:09.921");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDateTime7);
    }

    @Test
    public void test00500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test00500");
        java.util.Locale locale2 = new java.util.Locale("fra", "");
        java.util.Set<java.lang.String> strSet3 = locale2.getUnicodeLocaleAttributes();
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        boolean boolean6 = localDateTime4.isBefore((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property9 = localDateTime5.dayOfMonth();
        org.joda.time.DurationField durationField10 = property9.getRangeDurationField();
        boolean boolean11 = strSet3.contains((java.lang.Object) durationField10);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime();
        boolean boolean14 = localDateTime12.isBefore((org.joda.time.ReadablePartial) localDateTime13);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime13.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property17 = localDateTime13.dayOfMonth();
        boolean boolean18 = property17.isLeap();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone19);
        java.util.Locale locale22 = java.util.Locale.CHINESE;
        java.lang.String str23 = dateTimeZone19.getName((long) (short) 0, locale22);
        java.lang.String str24 = property17.getAsShortText(locale22);
        boolean boolean25 = strSet3.equals((java.lang.Object) locale22);
        java.lang.String str26 = locale22.getISO3Country();
        java.util.Locale locale27 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str28 = locale22.getDisplayCountry(locale27);
        java.lang.String str29 = locale22.toString();
        org.junit.Assert.assertEquals(locale2.toString(), "fra");
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "zh");
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+00:00:00.117" + "'", str23, "+00:00:00.117");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "11" + "'", str24, "11");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "zh" + "'", str29, "zh");
    }
}

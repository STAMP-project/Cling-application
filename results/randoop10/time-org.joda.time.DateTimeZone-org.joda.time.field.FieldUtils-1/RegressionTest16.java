import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest16 {

    public static boolean debug = false;

    @Test
    public void test08001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08001");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(550, 35592902, 0, 0, 35450303);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35450303 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08002");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.util.Locale locale2 = locale1.stripExtensions();
        java.util.Locale.setDefault(category0, locale2);
        java.util.Locale locale4 = java.util.Locale.getDefault(category0);
        java.util.Locale locale5 = java.util.Locale.getDefault(category0);
        java.lang.String str6 = locale5.getISO3Language();
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "kor" + "'", str6, "kor");
    }

    @Test
    public void test08003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08003");
        java.util.Locale locale2 = new java.util.Locale("fra", "");
        java.util.Set<java.lang.String> strSet3 = locale2.getUnicodeLocaleAttributes();
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        boolean boolean6 = localDateTime4.isBefore((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property9 = localDateTime5.dayOfMonth();
        org.joda.time.DurationField durationField10 = property9.getRangeDurationField();
        boolean boolean11 = strSet3.contains((java.lang.Object) durationField10);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime();
        boolean boolean14 = localDateTime12.isBefore((org.joda.time.ReadablePartial) localDateTime13);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime13.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property17 = localDateTime13.dayOfMonth();
        boolean boolean18 = property17.isLeap();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone19);
        java.util.Locale locale22 = java.util.Locale.CHINESE;
        java.lang.String str23 = dateTimeZone19.getName((long) (short) 0, locale22);
        java.lang.String str24 = property17.getAsShortText(locale22);
        boolean boolean25 = strSet3.equals((java.lang.Object) locale22);
        java.util.Locale.LanguageRange[] languageRangeArray26 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList27 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList27, languageRangeArray26);
        java.util.Locale[] localeArray29 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList30 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList30, localeArray29);
        java.util.Locale locale32 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList27, (java.util.Collection<java.util.Locale>) localeList30);
        boolean boolean33 = strSet3.removeAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList27);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap34 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList35 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList27, strMap34);
        java.util.stream.Stream<java.util.Locale.LanguageRange> languageRangeStream36 = languageRangeList35.stream();
        java.util.stream.Stream<java.util.Locale.LanguageRange> languageRangeStream37 = languageRangeList35.parallelStream();
        org.junit.Assert.assertEquals(locale2.toString(), "fra");
        org.junit.Assert.assertNotNull(strSet3);
// flaky:         org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "zh");
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+117:00" + "'", str23, "+117:00");
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "16" + "'", str24, "16");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(languageRangeArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(localeArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(locale32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(languageRangeList35);
        org.junit.Assert.assertNotNull(languageRangeStream36);
        org.junit.Assert.assertNotNull(languageRangeStream37);
    }

    @Test
    public void test08004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08004");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        int int1 = localDateTime0.getYearOfCentury();
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str3 = dateTimeFieldType2.toString();
        int int4 = localDateTime0.indexOf(dateTimeFieldType2);
        org.joda.time.DateTime dateTime5 = localDateTime0.toDateTime();
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime();
        int int7 = localDateTime6.getYearOfCentury();
        int int8 = localDateTime6.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime6.minusMillis((int) (byte) -1);
        int int11 = localDateTime0.compareTo((org.joda.time.ReadablePartial) localDateTime10);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime();
        int int13 = localDateTime12.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime12.minusMonths((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.minusMonths((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property18 = localDateTime15.minuteOfHour();
        org.joda.time.LocalDateTime.Property property19 = localDateTime15.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.minusMillis((int) (byte) 1);
        java.lang.String str23 = localDateTime22.toString();
        org.joda.time.DateTime dateTime24 = localDateTime22.toDateTime();
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.minusMillis((int) (byte) 1);
        java.lang.String str28 = localDateTime27.toString();
        org.joda.time.DateTime dateTime29 = localDateTime27.toDateTime();
        boolean boolean30 = dateTime24.isEqual((org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = org.joda.time.DateTimeFieldType.dayOfYear();
        int int32 = dateTime29.get(dateTimeFieldType31);
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.monthOfYear();
        boolean boolean34 = dateTime29.isSupported(dateTimeFieldType33);
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str36 = dateTimeFieldType35.toString();
        java.lang.String str37 = dateTimeFieldType35.toString();
        int int38 = dateTime29.get(dateTimeFieldType35);
        boolean boolean39 = localDateTime15.isSupported(dateTimeFieldType35);
        org.joda.time.DurationFieldType durationFieldType40 = dateTimeFieldType35.getDurationType();
        org.joda.time.LocalDateTime localDateTime42 = localDateTime0.withFieldAdded(durationFieldType40, 647);
        org.joda.time.LocalDateTime localDateTime44 = localDateTime0.plusHours(566);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 22 + "'", int1 == 22);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "weekyear" + "'", str3, "weekyear");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 22 + "'", int7 == 22);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 4 + "'", int8 == 4);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 22 + "'", int13 == 22);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(localDateTime22);
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "2022-02-16T06:54:04.766" + "'", str23, "2022-02-16T06:54:04.766");
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(localDateTime27);
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "2022-02-16T06:54:04.766" + "'", str28, "2022-02-16T06:54:04.766");
        org.junit.Assert.assertNotNull(dateTime29);
// flaky:         org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType31);
// flaky:         org.junit.Assert.assertTrue("'" + int32 + "' != '" + 47 + "'", int32 == 47);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "weekyear" + "'", str36, "weekyear");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "weekyear" + "'", str37, "weekyear");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2022 + "'", int38 == 2022);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(durationFieldType40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(localDateTime44);
    }

    @Test
    public void test08005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08005");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone2);
        java.util.Locale locale5 = java.util.Locale.CHINESE;
        java.lang.String str6 = dateTimeZone2.getName((long) (short) 0, locale5);
        java.util.Locale.Builder builder7 = builder0.setLocale(locale5);
        java.util.Locale.Builder builder8 = builder0.clear();
        java.util.Locale locale9 = java.util.Locale.KOREAN;
        java.util.Locale locale10 = locale9.stripExtensions();
        java.util.Locale.Builder builder11 = builder8.setLocale(locale10);
        java.util.Locale.Builder builder12 = builder8.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder14 = builder8.setLanguage("2022-02-11T09:49:54.716");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed language: 2022-02-11T09:49:54.716 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zh");
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+117:00" + "'", str6, "+117:00");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ko");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test08006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08006");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property5 = localDateTime1.dayOfMonth();
        java.util.Locale locale6 = java.util.Locale.FRENCH;
        java.util.Set<java.lang.String> strSet7 = locale6.getUnicodeLocaleAttributes();
        java.lang.String str8 = locale6.getVariant();
        java.lang.String str9 = property5.getAsText(locale6);
        org.joda.time.ReadableInstant readableInstant10 = null;
        int int11 = property5.getDifference(readableInstant10);
        int int12 = property5.getMaximumValueOverall();
        int int13 = property5.getMinimumValue();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime();
        int int15 = localDateTime14.getYearOfCentury();
        int int16 = property5.compareTo((org.joda.time.ReadablePartial) localDateTime14);
        int int17 = localDateTime14.size();
        org.joda.time.DateTimeField[] dateTimeFieldArray18 = localDateTime14.getFields();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime20 = localDateTime14.withSecondOfMinute((-98));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -98 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "16" + "'", str9, "16");
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 4 + "'", int11 == 4);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 31 + "'", int12 == 31);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 22 + "'", int15 == 22);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 4 + "'", int17 == 4);
        org.junit.Assert.assertNotNull(dateTimeFieldArray18);
    }

    @Test
    public void test08007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08007");
        org.joda.time.tz.NameProvider nameProvider0 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale1 = java.util.Locale.FRENCH;
        java.lang.String str2 = locale1.getDisplayName();
        java.lang.String str5 = nameProvider0.getShortName(locale1, "2022-02-11T09:47:59.470", "2022-02-11T09:48:12.308");
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        boolean boolean8 = localDateTime6.isBefore((org.joda.time.ReadablePartial) localDateTime7);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime7.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property11 = localDateTime7.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime12 = property11.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField13 = property11.getField();
        long long16 = dateTimeField13.addWrapField((long) 6, (int) (byte) 0);
        java.lang.String str18 = dateTimeField13.getAsShortText((long) (byte) 0);
        java.lang.String str20 = dateTimeField13.getAsShortText((-116L));
        long long22 = dateTimeField13.roundCeiling((long) 11);
        int int23 = dateTimeField13.getMaximumValue();
        java.util.Locale locale24 = java.util.Locale.KOREAN;
        java.lang.String str25 = locale24.getCountry();
        int int26 = dateTimeField13.getMaximumTextLength(locale24);
        java.lang.String str29 = nameProvider0.getName(locale24, "2022-02-11T09:48:04.573", "2022-02-11T09:48:11.352");
        java.util.Locale.Category category30 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale31 = java.util.Locale.getDefault(category30);
        java.util.Locale locale32 = java.util.Locale.getDefault(category30);
        org.joda.time.tz.NameProvider nameProvider33 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime();
        boolean boolean36 = localDateTime34.isBefore((org.joda.time.ReadablePartial) localDateTime35);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime35.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property39 = localDateTime35.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime40 = property39.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField41 = property39.getField();
        int int42 = dateTimeField41.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime();
        int int44 = localDateTime43.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime46 = localDateTime43.minusMonths((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime48 = localDateTime46.minusMonths((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime50 = localDateTime48.plusWeeks(22);
        java.util.Locale locale52 = java.util.Locale.JAPANESE;
        java.lang.String str53 = dateTimeField41.getAsShortText((org.joda.time.ReadablePartial) localDateTime50, 22, locale52);
        java.lang.String str56 = nameProvider33.getName(locale52, "11", "Etc/UTC");
        org.joda.time.DateTimeZone.setNameProvider(nameProvider33);
        java.util.Locale locale58 = java.util.Locale.FRENCH;
        java.util.Set<java.lang.String> strSet59 = locale58.getUnicodeLocaleAttributes();
        java.lang.String str60 = locale58.getVariant();
        java.lang.String str63 = nameProvider33.getShortName(locale58, "2022-02-11T09:48:02.913", "2022-02-11T09:48:00.361");
        java.util.Locale locale64 = java.util.Locale.JAPAN;
        java.util.Locale locale65 = java.util.Locale.FRENCH;
        java.lang.String str66 = locale64.getDisplayCountry(locale65);
        java.lang.String str67 = locale64.getScript();
        java.lang.String str68 = locale64.getDisplayVariant();
        java.util.Locale.Builder builder69 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder70 = builder69.clear();
        org.joda.time.DateTimeZone dateTimeZone71 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone71);
        java.util.Locale locale74 = java.util.Locale.CHINESE;
        java.lang.String str75 = dateTimeZone71.getName((long) (short) 0, locale74);
        java.util.Locale.Builder builder76 = builder69.setLocale(locale74);
        java.lang.String str77 = locale64.getDisplayScript(locale74);
        java.lang.String str80 = nameProvider33.getShortName(locale64, "2022-02-11T09:48:29.050", "2022-02-11T09:48:28.030");
        java.util.Locale locale81 = locale64.stripExtensions();
        java.util.Locale.setDefault(category30, locale81);
        java.util.Locale locale83 = java.util.Locale.FRANCE;
        java.util.Locale.setDefault(category30, locale83);
        java.util.Locale locale85 = java.util.Locale.CHINESE;
        java.util.Locale locale86 = java.util.Locale.ITALIAN;
        java.lang.String str87 = locale86.getDisplayCountry();
        java.util.Set<java.lang.String> strSet88 = locale86.getUnicodeLocaleAttributes();
        java.lang.String str89 = locale85.getDisplayScript(locale86);
        java.util.Set<java.lang.Character> charSet90 = locale86.getExtensionKeys();
        java.lang.String str91 = locale86.getCountry();
        java.util.Locale.setDefault(category30, locale86);
        java.util.Locale locale93 = java.util.Locale.getDefault(category30);
        java.lang.String str96 = nameProvider0.getShortName(locale93, "2022-02-16T06:53:24.915", "2022-02-11T09:50:36.058");
        org.junit.Assert.assertNotNull(nameProvider0);
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "fr");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "fran\347ais" + "'", str2, "fran\347ais");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 6L + "'", long16 == 6L);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "1" + "'", str18, "1");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "31" + "'", str20, "31");
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 86400000L + "'", long22 == 86400000L);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 31 + "'", int23 == 31);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertTrue("'" + category30 + "' != '" + java.util.Locale.Category.FORMAT + "'", category30.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "ko");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "ko");
        org.junit.Assert.assertNotNull(nameProvider33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 31 + "'", int42 == 31);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 22 + "'", int44 == 22);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "22" + "'", str53, "22");
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "Japon" + "'", str66, "Japon");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(dateTimeZone71);
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "zh");
// flaky:         org.junit.Assert.assertEquals("'" + str75 + "' != '" + "+117:00" + "'", str75, "+117:00");
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "" + "'", str77, "");
        org.junit.Assert.assertNull(str80);
        org.junit.Assert.assertNotNull(locale81);
        org.junit.Assert.assertEquals(locale81.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale83);
        org.junit.Assert.assertEquals(locale83.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale85);
        org.junit.Assert.assertEquals(locale85.toString(), "zh");
        org.junit.Assert.assertNotNull(locale86);
        org.junit.Assert.assertEquals(locale86.toString(), "it");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "" + "'", str87, "");
        org.junit.Assert.assertNotNull(strSet88);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "" + "'", str89, "");
        org.junit.Assert.assertNotNull(charSet90);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "" + "'", str91, "");
        org.junit.Assert.assertNotNull(locale93);
        org.junit.Assert.assertEquals(locale93.toString(), "it");
        org.junit.Assert.assertNull(str96);
    }

    @Test
    public void test08008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08008");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property5 = localDateTime1.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime6 = property5.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField7 = property5.getField();
        int int8 = property5.getMaximumValueOverall();
        org.joda.time.LocalDateTime localDateTime10 = property5.addToCopy(0);
        org.joda.time.LocalDateTime localDateTime12 = property5.addToCopy(1);
        org.joda.time.LocalDateTime localDateTime14 = property5.addToCopy((long) (byte) 1);
        org.joda.time.LocalDateTime localDateTime15 = property5.roundHalfCeilingCopy();
        java.util.Locale locale16 = java.util.Locale.JAPAN;
        java.util.Locale locale17 = java.util.Locale.FRENCH;
        java.lang.String str18 = locale16.getDisplayCountry(locale17);
        java.util.Locale.Builder builder19 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder20 = builder19.clear();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone21);
        java.util.Locale locale24 = java.util.Locale.CHINESE;
        java.lang.String str25 = dateTimeZone21.getName((long) (short) 0, locale24);
        java.util.Locale.Builder builder26 = builder19.setLocale(locale24);
        java.lang.String str27 = locale17.getDisplayScript(locale24);
        int int28 = property5.getMaximumShortTextLength(locale24);
        org.joda.time.DurationField durationField29 = property5.getDurationField();
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime();
        boolean boolean32 = localDateTime30.isBefore((org.joda.time.ReadablePartial) localDateTime31);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime31.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property35 = localDateTime31.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime36 = property35.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField37 = property35.getField();
        long long40 = dateTimeField37.addWrapField((long) 6, (int) (byte) 0);
        java.lang.String str42 = dateTimeField37.getAsShortText((long) (byte) 10);
        boolean boolean43 = dateTimeField37.isSupported();
        int int44 = dateTimeField37.getMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = dateTimeField37.getType();
        int int47 = dateTimeField37.getLeapAmount(42L);
        org.joda.time.LocalDateTime localDateTime48 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime49 = new org.joda.time.LocalDateTime();
        boolean boolean50 = localDateTime48.isBefore((org.joda.time.ReadablePartial) localDateTime49);
        org.joda.time.LocalDateTime localDateTime52 = localDateTime49.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property53 = localDateTime49.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime54 = property53.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField55 = property53.getField();
        long long58 = dateTimeField55.addWrapField((long) 6, (int) (byte) 0);
        java.lang.String str60 = dateTimeField55.getAsShortText((long) (byte) 0);
        java.lang.String str62 = dateTimeField55.getAsShortText((-116L));
        long long64 = dateTimeField55.roundCeiling((long) 11);
        java.util.Locale locale69 = new java.util.Locale("11", "weekyear", "fra");
        java.lang.String str70 = locale69.getDisplayName();
        org.joda.time.LocalDateTime localDateTime71 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime72 = new org.joda.time.LocalDateTime();
        boolean boolean73 = localDateTime71.isBefore((org.joda.time.ReadablePartial) localDateTime72);
        org.joda.time.LocalDateTime localDateTime75 = localDateTime72.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property76 = localDateTime72.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime77 = property76.withMinimumValue();
        java.util.Locale locale78 = java.util.Locale.UK;
        java.lang.String str79 = property76.getAsShortText(locale78);
        java.lang.String str80 = locale69.getDisplayScript(locale78);
        java.lang.String str81 = dateTimeField55.getAsShortText((long) 715, locale78);
        int int82 = dateTimeField37.getMaximumShortTextLength(locale78);
        int int83 = property5.getMaximumTextLength(locale78);
        org.joda.time.LocalDateTime localDateTime84 = property5.roundCeilingCopy();
        org.joda.time.DateTimeField dateTimeField85 = property5.getField();
        long long87 = dateTimeField85.roundFloor((long) 244);
// flaky:         org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 31 + "'", int8 == 31);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Japon" + "'", str18, "Japon");
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "zh");
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "+117:00" + "'", str25, "+117:00");
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 6L + "'", long40 == 6L);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "1" + "'", str42, "1");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 31 + "'", int44 == 31);
        org.junit.Assert.assertNotNull(dateTimeFieldType45);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 6L + "'", long58 == 6L);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "1" + "'", str60, "1");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "31" + "'", str62, "31");
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 86400000L + "'", long64 == 86400000L);
        org.junit.Assert.assertEquals(locale69.toString(), "11_WEEKYEAR_fra");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "11 (WEEKYEAR,fra)" + "'", str70, "11 (WEEKYEAR,fra)");
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(localDateTime75);
        org.junit.Assert.assertNotNull(property76);
        org.junit.Assert.assertNotNull(localDateTime77);
        org.junit.Assert.assertNotNull(locale78);
        org.junit.Assert.assertEquals(locale78.toString(), "en_GB");
// flaky:         org.junit.Assert.assertEquals("'" + str79 + "' != '" + "16" + "'", str79, "16");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "" + "'", str80, "");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "1" + "'", str81, "1");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 2 + "'", int82 == 2);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 2 + "'", int83 == 2);
        org.junit.Assert.assertNotNull(localDateTime84);
        org.junit.Assert.assertNotNull(dateTimeField85);
        org.junit.Assert.assertTrue("'" + long87 + "' != '" + 0L + "'", long87 == 0L);
    }

    @Test
    public void test08009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08009");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) 'u');
        long long5 = dateTimeZone1.convertLocalToUTC((long) 1, false, 822L);
        java.util.TimeZone timeZone6 = dateTimeZone1.toTimeZone();
        int int8 = dateTimeZone1.getOffset(10L);
        org.joda.time.LocalDateTime localDateTime9 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        boolean boolean10 = dateTimeZone1.isFixed();
        boolean boolean12 = dateTimeZone1.isStandardOffset(35590604L);
        boolean boolean14 = dateTimeZone1.isStandardOffset(35320947L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-116L) + "'", long5 == (-116L));
        org.junit.Assert.assertNotNull(timeZone6);
        org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 117 + "'", int8 == 117);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    }

    @Test
    public void test08010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08010");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        java.lang.String str2 = locale1.getDisplayName();
        java.util.Locale locale5 = new java.util.Locale("fra", "");
        java.util.Set<java.lang.String> strSet6 = locale5.getUnicodeLocaleAttributes();
        java.lang.String str7 = locale5.getScript();
        java.util.Set<java.lang.Character> charSet8 = locale5.getExtensionKeys();
        java.util.Set<java.lang.String> strSet9 = locale5.getUnicodeLocaleKeys();
        java.lang.String str10 = locale5.getDisplayName();
        java.lang.String str11 = locale1.getDisplayLanguage(locale5);
        java.lang.String str12 = locale5.toLanguageTag();
        java.util.Locale.Builder builder13 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder14 = builder13.clearExtensions();
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime();
        boolean boolean17 = localDateTime15.isBefore((org.joda.time.ReadablePartial) localDateTime16);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime16.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property20 = localDateTime16.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime21 = property20.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField22 = property20.getField();
        int int23 = dateTimeField22.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime();
        int int25 = localDateTime24.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime24.minusMonths((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.minusMonths((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.plusWeeks(22);
        java.util.Locale locale33 = java.util.Locale.JAPANESE;
        java.lang.String str34 = dateTimeField22.getAsShortText((org.joda.time.ReadablePartial) localDateTime31, 22, locale33);
        java.util.Locale.Builder builder35 = builder14.setLocale(locale33);
        java.util.Locale.Builder builder38 = builder35.setExtension('a', "37");
        java.util.Locale locale39 = builder38.build();
        java.lang.String str40 = locale5.getDisplayCountry(locale39);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str42 = locale39.getUnicodeLocaleType("2022-02-11T09:50:01.127");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed Unicode locale key: 2022-02-11T09:50:01.127");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "it");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "italien" + "'", str2, "italien");
        org.junit.Assert.assertEquals(locale5.toString(), "fra");
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(charSet8);
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "fra" + "'", str10, "fra");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Italian" + "'", str11, "Italian");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "fra" + "'", str12, "fra");
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 31 + "'", int23 == 31);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 22 + "'", int25 == 22);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "22" + "'", str34, "22");
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "ja__#a-37");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
    }

    @Test
    public void test08011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08011");
        org.joda.time.tz.NameProvider nameProvider0 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale1 = java.util.Locale.FRENCH;
        java.lang.String str2 = locale1.getDisplayName();
        java.lang.String str5 = nameProvider0.getShortName(locale1, "2022-02-11T09:47:59.470", "2022-02-11T09:48:12.308");
        java.lang.String str6 = locale1.getScript();
        java.lang.String str7 = locale1.getScript();
        org.junit.Assert.assertNotNull(nameProvider0);
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "fr");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "fran\347ais" + "'", str2, "fran\347ais");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
    }

    @Test
    public void test08012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08012");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plus(readableDuration3);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime1.minusDays(35320391);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime1.plusMinutes(53);
        org.joda.time.LocalDateTime.Property property9 = localDateTime1.monthOfYear();
        java.lang.String str10 = property9.getName();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "monthOfYear" + "'", str10, "monthOfYear");
    }

    @Test
    public void test08013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08013");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime(9800, 393, 835, (-282338282), 35440696, 35627569, 0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -282338282 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08014");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.minusMillis((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.plusDays(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.withField(dateTimeFieldType5, 0);
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime();
        boolean boolean10 = localDateTime8.isBefore((org.joda.time.ReadablePartial) localDateTime9);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime9.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime9.plusMinutes((int) '#');
        org.joda.time.LocalDateTime localDateTime16 = localDateTime9.minusMinutes((int) (short) 1);
        boolean boolean17 = localDateTime7.isAfter((org.joda.time.ReadablePartial) localDateTime16);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime16.withMillisOfSecond(50);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.plusWeeks(35304112);
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.LocalDateTime localDateTime23 = localDateTime19.plus(readableDuration22);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
    }

    @Test
    public void test08015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08015");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property5 = localDateTime1.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime6 = property5.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField7 = property5.getField();
        long long9 = dateTimeField7.remainder((-1L));
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = dateTimeField7.getType();
        boolean boolean11 = dateTimeField7.isSupported();
        java.lang.String str13 = dateTimeField7.getAsText((long) 715);
        // The following exception was thrown during execution in test generation
        try {
            long long16 = dateTimeField7.set(3577705463L, 69001);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 69001 for dayOfMonth must be in the range [1,28]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 86399999L + "'", long9 == 86399999L);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "1" + "'", str13, "1");
    }

    @Test
    public void test08016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08016");
        org.joda.time.tz.Provider provider0 = org.joda.time.DateTimeZone.getProvider();
        org.joda.time.DateTimeZone.setProvider(provider0);
        org.joda.time.DateTimeZone dateTimeZone3 = provider0.getZone("11");
        org.joda.time.DateTimeZone.setProvider(provider0);
        java.util.Set<java.lang.String> strSet5 = provider0.getAvailableIDs();
        org.joda.time.DateTimeZone dateTimeZone7 = provider0.getZone("2022-02-11T09:49:57.554");
        org.joda.time.DateTimeZone.setProvider(provider0);
        org.junit.Assert.assertNotNull(provider0);
        org.junit.Assert.assertNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertNull(dateTimeZone7);
    }

    @Test
    public void test08017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08017");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        int int1 = localDateTime0.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime3 = localDateTime0.minusMonths((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.minusMonths((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.plusWeeks(22);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.dayOfYear();
        boolean boolean10 = property8.equals((java.lang.Object) "2022-02-11T09:47:53.675");
        org.joda.time.LocalDateTime localDateTime11 = property8.roundHalfEvenCopy();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 22 + "'", int1 == 22);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(localDateTime11);
    }

    @Test
    public void test08018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08018");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        int[] intArray3 = localDateTime1.getValues();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.plusYears((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        boolean boolean8 = localDateTime6.isBefore((org.joda.time.ReadablePartial) localDateTime7);
        int[] intArray9 = localDateTime7.getValues();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime1.withFields((org.joda.time.ReadablePartial) localDateTime7);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetMillis((int) 'u');
        long long16 = dateTimeZone12.convertLocalToUTC((long) 1, false, 822L);
        java.util.TimeZone timeZone17 = dateTimeZone12.toTimeZone();
        int int19 = dateTimeZone12.getOffset(10L);
        org.joda.time.DateTime dateTime20 = localDateTime1.toDateTime(dateTimeZone12);
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime(dateTimeZone12);
        org.joda.time.LocalDateTime.Property property22 = localDateTime21.year();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime21.minusDays(443);
        int int25 = localDateTime21.getYearOfCentury();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(intArray3);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[2022, 2, 16, 24845112]");
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(intArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[2022, 2, 16, 24845112]");
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-116L) + "'", long16 == (-116L));
        org.junit.Assert.assertNotNull(timeZone17);
        org.junit.Assert.assertEquals(timeZone17.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 117 + "'", int19 == 117);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 22 + "'", int25 == 22);
    }

    @Test
    public void test08019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08019");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("2022-02-11T09:48:22.403");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        int int4 = dateTimeZone2.getStandardOffset((long) 635);
        long long7 = dateTimeZone2.convertLocalToUTC((long) 2000, false);
        org.junit.Assert.assertNotNull(timeZone1);
// flaky:         org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Heure de Greenwich");
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 2000L + "'", long7 == 2000L);
    }

    @Test
    public void test08020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08020");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        int int1 = localDateTime0.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime3 = localDateTime0.minusMonths((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.minusMonths((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property6 = localDateTime3.minuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone8);
        java.util.Locale locale11 = java.util.Locale.CHINESE;
        java.lang.String str12 = dateTimeZone8.getName((long) (short) 0, locale11);
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime(0L, dateTimeZone8);
        java.util.Locale locale15 = java.util.Locale.FRENCH;
        java.util.Set<java.lang.String> strSet16 = locale15.getUnicodeLocaleAttributes();
        java.lang.String str17 = locale15.getISO3Language();
        java.lang.String str18 = dateTimeZone8.getName(35271574L, locale15);
        int int19 = property6.getMaximumShortTextLength(locale15);
        java.lang.String str20 = property6.getAsText();
        org.joda.time.LocalDateTime localDateTime21 = property6.roundFloorCopy();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 22 + "'", int1 == 22);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "zh");
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+117:00" + "'", str12, "+117:00");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "fra" + "'", str17, "fra");
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+117:00" + "'", str18, "+117:00");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "54" + "'", str20, "54");
        org.junit.Assert.assertNotNull(localDateTime21);
    }

    @Test
    public void test08021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08021");
        java.util.Locale locale2 = new java.util.Locale("2022-02-20T01:46:04.141", "2022-02-11T09:52:11.959");
        org.junit.Assert.assertEquals(locale2.toString(), "2022-02-20t01:46:04.141_2022-02-11T09:52:11.959");
    }

    @Test
    public void test08022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08022");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.minusMillis((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.minusMillis((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.plusDays(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.weekyear();
        boolean boolean9 = localDateTime5.isSupported(dateTimeFieldType8);
        boolean boolean10 = localDateTime2.isEqual((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime5.minusSeconds(379);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime5.plusSeconds((-89));
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime();
        boolean boolean17 = localDateTime15.isBefore((org.joda.time.ReadablePartial) localDateTime16);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime16.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property20 = localDateTime16.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime21 = property20.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField22 = property20.getField();
        long long24 = dateTimeField22.remainder((-1L));
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = dateTimeField22.getType();
        boolean boolean26 = dateTimeField22.isSupported();
        boolean boolean27 = dateTimeField22.isLenient();
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = dateTimeField22.getType();
        boolean boolean29 = localDateTime5.isSupported(dateTimeFieldType28);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str31 = localDateTime5.toString("2022-02-11T09:49:21.044");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 86399999L + "'", long24 == 86399999L);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
    }

    @Test
    public void test08023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08023");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property5 = localDateTime1.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime6 = property5.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField7 = property5.getField();
        long long9 = dateTimeField7.remainder((-1L));
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = dateTimeField7.getType();
        boolean boolean11 = dateTimeField7.isSupported();
        boolean boolean12 = dateTimeField7.isLenient();
        org.joda.time.ReadablePartial readablePartial13 = null;
        java.util.Locale locale15 = java.util.Locale.CHINESE;
        java.util.Locale locale16 = java.util.Locale.ITALIAN;
        java.lang.String str17 = locale16.getDisplayCountry();
        java.util.Set<java.lang.String> strSet18 = locale16.getUnicodeLocaleAttributes();
        java.lang.String str19 = locale15.getDisplayScript(locale16);
        java.lang.String str20 = dateTimeField7.getAsText(readablePartial13, 35282145, locale15);
        org.joda.time.ReadablePartial readablePartial21 = null;
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime();
        boolean boolean24 = localDateTime22.isBefore((org.joda.time.ReadablePartial) localDateTime23);
        int[] intArray25 = localDateTime23.getValues();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime23.plusYears((int) (byte) -1);
        int[] intArray28 = localDateTime23.getValues();
        int int29 = dateTimeField7.getMinimumValue(readablePartial21, intArray28);
        java.lang.String str31 = dateTimeField7.getAsText((long) 882);
        int int33 = dateTimeField7.get(35354749L);
        boolean boolean34 = dateTimeField7.isLenient();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.field.FieldUtils.verifyValueBounds(dateTimeField7, 35321196, 979, 820);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35321196 for dayOfMonth must be in the range [979,820]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 86399999L + "'", long9 == 86399999L);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "it");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(strSet18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "35282145" + "'", str20, "35282145");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[2022, 2, 16, 24845442]");
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(intArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[2022, 2, 16, 24845442]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "1" + "'", str31, "1");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test08024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08024");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (-1));
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withDayOfYear(365);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusMillis((int) (byte) 1);
        java.lang.String str8 = localDateTime7.toString();
        org.joda.time.DateTime dateTime9 = localDateTime7.toDateTime();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusMillis((int) (byte) 1);
        java.lang.String str13 = localDateTime12.toString();
        org.joda.time.DateTime dateTime14 = localDateTime12.toDateTime();
        boolean boolean15 = dateTime9.isEqual((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.minusMillis((int) (byte) 1);
        java.lang.String str19 = localDateTime18.toString();
        org.joda.time.DateTime dateTime20 = localDateTime18.toDateTime();
        boolean boolean21 = dateTime9.isEqual((org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.Chronology chronology22 = dateTime20.getChronology();
        org.joda.time.LocalDateTime localDateTime23 = org.joda.time.LocalDateTime.now(chronology22);
        org.joda.time.DateTimeField dateTimeField24 = dateTimeFieldType4.getField(chronology22);
        org.joda.time.LocalDateTime.Property property25 = localDateTime1.property(dateTimeFieldType4);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone26);
        java.util.Locale locale29 = java.util.Locale.CHINESE;
        java.lang.String str30 = dateTimeZone26.getName((long) (short) 0, locale29);
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.minusMillis((int) (byte) 1);
        java.lang.String str34 = localDateTime33.toString();
        org.joda.time.DateTime dateTime35 = localDateTime33.toDateTime();
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime38 = localDateTime36.minusMillis((int) (byte) 1);
        java.lang.String str39 = localDateTime38.toString();
        org.joda.time.DateTime dateTime40 = localDateTime38.toDateTime();
        boolean boolean41 = dateTime35.isEqual((org.joda.time.ReadableInstant) dateTime40);
        int int42 = dateTimeZone26.getOffset((org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str44 = dateTimeFieldType43.toString();
        java.lang.String str45 = dateTimeFieldType43.toString();
        boolean boolean46 = dateTime35.isSupported(dateTimeFieldType43);
        org.joda.time.Chronology chronology47 = dateTime35.getChronology();
        org.joda.time.Chronology chronology48 = dateTime35.getChronology();
        org.joda.time.DateTimeField dateTimeField49 = dateTimeFieldType4.getField(chronology48);
        org.joda.time.LocalDateTime localDateTime50 = org.joda.time.LocalDateTime.now(chronology48);
        org.joda.time.LocalDateTime localDateTime51 = new org.joda.time.LocalDateTime(chronology48);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNotNull(localDateTime7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "2022-02-16T06:54:05.475" + "'", str8, "2022-02-16T06:54:05.475");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(localDateTime12);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "2022-02-16T06:54:05.475" + "'", str13, "2022-02-16T06:54:05.475");
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(localDateTime18);
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "2022-02-16T06:54:05.475" + "'", str19, "2022-02-16T06:54:05.475");
        org.junit.Assert.assertNotNull(dateTime20);
// flaky:         org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "zh");
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "+117:00" + "'", str30, "+117:00");
        org.junit.Assert.assertNotNull(localDateTime33);
// flaky:         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "2022-02-16T06:54:05.475" + "'", str34, "2022-02-16T06:54:05.475");
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(localDateTime38);
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "2022-02-16T06:54:05.475" + "'", str39, "2022-02-16T06:54:05.475");
        org.junit.Assert.assertNotNull(dateTime40);
// flaky:         org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int42 + "' != '" + 421200000 + "'", int42 == 421200000);
        org.junit.Assert.assertNotNull(dateTimeFieldType43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "weekyear" + "'", str44, "weekyear");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "weekyear" + "'", str45, "weekyear");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(localDateTime50);
    }

    @Test
    public void test08025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08025");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property5 = localDateTime1.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime6 = property5.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField7 = property5.getField();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone8);
        java.util.Locale locale11 = java.util.Locale.CHINESE;
        java.lang.String str12 = dateTimeZone8.getName((long) (short) 0, locale11);
        int int13 = dateTimeField7.getMaximumShortTextLength(locale11);
        long long15 = dateTimeField7.roundHalfFloor(71500L);
        long long17 = dateTimeField7.remainder((long) 738);
        long long19 = dateTimeField7.roundHalfEven(52L);
        long long21 = dateTimeField7.roundHalfEven(1600L);
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.minusMillis((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.plusDays(0);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.plusMillis(22);
        org.joda.time.LocalDateTime.Property property30 = localDateTime29.secondOfMinute();
        org.joda.time.tz.NameProvider nameProvider31 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime();
        boolean boolean34 = localDateTime32.isBefore((org.joda.time.ReadablePartial) localDateTime33);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime33.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property37 = localDateTime33.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime38 = property37.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField39 = property37.getField();
        int int40 = dateTimeField39.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime();
        int int42 = localDateTime41.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime44 = localDateTime41.minusMonths((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime46 = localDateTime44.minusMonths((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime48 = localDateTime46.plusWeeks(22);
        java.util.Locale locale50 = java.util.Locale.JAPANESE;
        java.lang.String str51 = dateTimeField39.getAsShortText((org.joda.time.ReadablePartial) localDateTime48, 22, locale50);
        java.lang.String str54 = nameProvider31.getName(locale50, "11", "Etc/UTC");
        int int55 = property30.getMaximumTextLength(locale50);
        java.lang.String str56 = dateTimeField7.getAsShortText((long) 35451451, locale50);
        long long59 = dateTimeField7.addWrapField((long) 296, 35360379);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "zh");
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+117:00" + "'", str12, "+117:00");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 738L + "'", long17 == 738L);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(nameProvider31);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 31 + "'", int40 == 31);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 22 + "'", int42 == 22);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "22" + "'", str51, "22");
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 2 + "'", int55 == 2);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "1" + "'", str56, "1");
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 1036800296L + "'", long59 == 1036800296L);
    }

    @Test
    public void test08026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08026");
        java.util.Locale locale0 = java.util.Locale.JAPAN;
        java.util.Locale locale1 = java.util.Locale.ITALY;
        java.lang.String str2 = locale0.getDisplayScript(locale1);
        java.util.Locale locale3 = locale1.stripExtensions();
        java.lang.String str4 = locale3.getDisplayLanguage();
        java.lang.String str5 = locale3.getDisplayScript();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "it_IT");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "italien" + "'", str4, "italien");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
    }

    @Test
    public void test08027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08027");
        org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.parse("2022-02-11T09:47:59.107");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withDayOfYear(1036);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1036 for dayOfYear must be in the range [1,365]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime1);
    }

    @Test
    public void test08028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08028");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.minusMillis((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.plusDays(0);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime2.withYearOfEra(874);
        org.joda.time.LocalDateTime.Property property7 = localDateTime2.weekOfWeekyear();
        org.joda.time.ReadablePartial readablePartial8 = null;
        org.joda.time.LocalDateTime localDateTime9 = localDateTime2.withFields(readablePartial8);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime2.minusHours(100);
        org.joda.time.ReadablePartial readablePartial12 = null;
        org.joda.time.LocalDateTime localDateTime13 = localDateTime2.withFields(readablePartial12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime2.plusDays(74);
        int int16 = localDateTime2.getCenturyOfEra();
        int[] intArray17 = localDateTime2.getValues();
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 20 + "'", int16 == 20);
        org.junit.Assert.assertNotNull(intArray17);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[2022, 2, 16, 24845568]");
    }

    @Test
    public void test08029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08029");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        int int1 = localDateTime0.getYearOfCentury();
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str3 = dateTimeFieldType2.toString();
        int int4 = localDateTime0.indexOf(dateTimeFieldType2);
        org.joda.time.DateTime dateTime5 = localDateTime0.toDateTime();
        java.lang.String str7 = localDateTime0.toString("22");
        org.joda.time.LocalDateTime.Property property8 = localDateTime0.millisOfSecond();
        org.joda.time.LocalDateTime.Property property9 = localDateTime0.hourOfDay();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 22 + "'", int1 == 22);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "weekyear" + "'", str3, "weekyear");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "22" + "'", str7, "22");
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(property9);
    }

    @Test
    public void test08030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08030");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property5 = localDateTime1.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime6 = property5.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField7 = property5.getField();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone8);
        java.util.Locale locale11 = java.util.Locale.CHINESE;
        java.lang.String str12 = dateTimeZone8.getName((long) (short) 0, locale11);
        int int13 = dateTimeField7.getMaximumShortTextLength(locale11);
        java.lang.String str14 = dateTimeField7.getName();
        long long16 = dateTimeField7.roundHalfEven((long) (byte) 10);
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime();
        boolean boolean19 = localDateTime17.isBefore((org.joda.time.ReadablePartial) localDateTime18);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime18.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime18.plusMinutes((int) '#');
        org.joda.time.LocalDateTime localDateTime25 = localDateTime18.minusMinutes((int) (short) 1);
        org.joda.time.ReadableDuration readableDuration26 = null;
        org.joda.time.LocalDateTime localDateTime28 = localDateTime18.withDurationAdded(readableDuration26, (int) (short) 100);
        java.util.Locale locale29 = java.util.Locale.JAPANESE;
        java.lang.String str30 = dateTimeField7.getAsText((org.joda.time.ReadablePartial) localDateTime28, locale29);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime28.minusSeconds((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property33 = localDateTime32.millisOfSecond();
        org.joda.time.ReadableDuration readableDuration34 = null;
        org.joda.time.LocalDateTime localDateTime35 = localDateTime32.plus(readableDuration34);
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.LocalDateTime localDateTime38 = localDateTime32.withPeriodAdded(readablePeriod36, (-598));
        int int39 = localDateTime32.getYearOfCentury();
// flaky:         org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "zh");
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+117:00" + "'", str12, "+117:00");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "dayOfMonth" + "'", str14, "dayOfMonth");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "ja");
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "16" + "'", str30, "16");
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 22 + "'", int39 == 22);
    }

    @Test
    public void test08031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08031");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = builder0.build();
        java.util.Locale.setDefault(locale1);
        java.util.Locale locale3 = locale1.stripExtensions();
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "");
    }

    @Test
    public void test08032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08032");
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.minusMillis((int) (byte) 1);
        java.lang.String str6 = localDateTime5.toString();
        org.joda.time.DateTime dateTime7 = localDateTime5.toDateTime();
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minusMillis((int) (byte) 1);
        java.lang.String str11 = localDateTime10.toString();
        org.joda.time.DateTime dateTime12 = localDateTime10.toDateTime();
        boolean boolean13 = dateTime7.isEqual((org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.Chronology chronology14 = dateTime12.getChronology();
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime((java.lang.Object) 35271574L, chronology14);
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((long) 'u', chronology14);
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime(86399999L, chronology14);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.plusWeeks((int) 'a');
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.minusDays((int) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime26 = localDateTime21.withTime(292206053, (-18520), 57, 35433550);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 292206053 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime5);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "2022-02-16T06:54:05.612" + "'", str6, "2022-02-16T06:54:05.612");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(localDateTime10);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "2022-02-16T06:54:05.612" + "'", str11, "2022-02-16T06:54:05.612");
        org.junit.Assert.assertNotNull(dateTime12);
// flaky:         org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
    }

    @Test
    public void test08033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08033");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property5 = localDateTime1.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime6 = property5.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField7 = property5.getField();
        long long9 = dateTimeField7.remainder((-1L));
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusMillis((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.plusDays(0);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.plusMillis((int) '#');
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime();
        boolean boolean19 = localDateTime17.isBefore((org.joda.time.ReadablePartial) localDateTime18);
        int[] intArray20 = localDateTime18.getValues();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime18.plusYears((int) (byte) -1);
        int[] intArray23 = localDateTime18.getValues();
        boolean boolean24 = localDateTime14.isAfter((org.joda.time.ReadablePartial) localDateTime18);
        java.util.Locale locale28 = new java.util.Locale("11", "weekyear", "fra");
        java.lang.String str29 = dateTimeField7.getAsShortText((org.joda.time.ReadablePartial) localDateTime18, locale28);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.LocalDateTime localDateTime31 = localDateTime18.minus(readablePeriod30);
// flaky:         org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 86399999L + "'", long9 == 86399999L);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(intArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[2022, 2, 16, 24845625]");
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(intArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[2022, 2, 16, 24845625]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals(locale28.toString(), "11_WEEKYEAR_fra");
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "16" + "'", str29, "16");
        org.junit.Assert.assertNotNull(localDateTime31);
    }

    @Test
    public void test08034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08034");
        int int2 = org.joda.time.field.FieldUtils.safeAdd(146, 35619945);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 35620091 + "'", int2 == 35620091);
    }

    @Test
    public void test08035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08035");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property5 = localDateTime1.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime6 = property5.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField7 = property5.getField();
        long long10 = dateTimeField7.addWrapField((long) (short) 1, (int) (byte) 100);
        int int12 = dateTimeField7.getLeapAmount(0L);
        long long14 = dateTimeField7.roundHalfFloor((long) (-1));
        long long16 = dateTimeField7.roundFloor((long) 222);
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime();
        int int18 = localDateTime17.getYearOfCentury();
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str20 = dateTimeFieldType19.toString();
        int int21 = localDateTime17.indexOf(dateTimeFieldType19);
        int int22 = dateTimeField7.getMaximumValue((org.joda.time.ReadablePartial) localDateTime17);
        java.util.Locale.Category category23 = java.util.Locale.Category.DISPLAY;
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime();
        boolean boolean26 = localDateTime24.isBefore((org.joda.time.ReadablePartial) localDateTime25);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime25.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property29 = localDateTime25.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime30 = property29.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField31 = property29.getField();
        long long33 = dateTimeField31.remainder((-1L));
        java.util.Locale locale35 = java.util.Locale.UK;
        java.lang.String str36 = dateTimeField31.getAsShortText((long) 22, locale35);
        int int37 = dateTimeField31.getMinimumValue();
        java.util.Locale locale40 = new java.util.Locale("fra", "");
        java.util.Set<java.lang.String> strSet41 = locale40.getUnicodeLocaleAttributes();
        int int42 = dateTimeField31.getMaximumShortTextLength(locale40);
        java.util.Locale.setDefault(category23, locale40);
        java.util.Locale locale44 = java.util.Locale.getDefault(category23);
        int int45 = dateTimeField7.getMaximumShortTextLength(locale44);
        boolean boolean46 = dateTimeField7.isLenient();
        org.joda.time.DurationField durationField47 = dateTimeField7.getRangeDurationField();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.field.FieldUtils.verifyValueBounds(dateTimeField7, 337, 606, 0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 337 for dayOfMonth must be in the range [606,0]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 604800001L + "'", long10 == 604800001L);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 22 + "'", int18 == 22);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "weekyear" + "'", str20, "weekyear");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 28 + "'", int22 == 28);
        org.junit.Assert.assertTrue("'" + category23 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category23.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 86399999L + "'", long33 == 86399999L);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "1" + "'", str36, "1");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertEquals(locale40.toString(), "fra");
        org.junit.Assert.assertNotNull(strSet41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2 + "'", int42 == 2);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "fra");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2 + "'", int45 == 2);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(durationField47);
    }

    @Test
    public void test08036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08036");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        int[] intArray3 = localDateTime1.getValues();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.plusYears((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        boolean boolean8 = localDateTime6.isBefore((org.joda.time.ReadablePartial) localDateTime7);
        int[] intArray9 = localDateTime7.getValues();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime1.withFields((org.joda.time.ReadablePartial) localDateTime7);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusMillis((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.minusSeconds((int) '#');
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.withWeekOfWeekyear(50);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime14.withMinuteOfHour((int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone19);
        java.util.Locale locale22 = java.util.Locale.CHINESE;
        java.lang.String str23 = dateTimeZone19.getName((long) (short) 0, locale22);
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.minusMillis((int) (byte) 1);
        java.lang.String str27 = localDateTime26.toString();
        org.joda.time.DateTime dateTime28 = localDateTime26.toDateTime();
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.minusMillis((int) (byte) 1);
        java.lang.String str32 = localDateTime31.toString();
        org.joda.time.DateTime dateTime33 = localDateTime31.toDateTime();
        boolean boolean34 = dateTime28.isEqual((org.joda.time.ReadableInstant) dateTime33);
        int int35 = dateTimeZone19.getOffset((org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime38 = localDateTime36.minusMillis((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime38.plusDays(0);
        boolean boolean41 = dateTime28.equals((java.lang.Object) localDateTime40);
        int[] intArray42 = localDateTime40.getValues();
        org.joda.time.LocalDateTime localDateTime44 = localDateTime40.plusWeeks((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime46 = localDateTime40.withWeekyear((-292275054));
        org.joda.time.LocalDateTime localDateTime48 = localDateTime46.minusMillis(207);
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.getDefault();
        int int51 = dateTimeZone49.getStandardOffset((long) (-100));
        org.joda.time.LocalDateTime localDateTime52 = new org.joda.time.LocalDateTime(dateTimeZone49);
        java.util.TimeZone timeZone53 = dateTimeZone49.toTimeZone();
        boolean boolean55 = dateTimeZone49.isStandardOffset((long) 709);
        org.joda.time.LocalDateTime localDateTime56 = new org.joda.time.LocalDateTime(dateTimeZone49);
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.getDefault();
        int int59 = dateTimeZone57.getStandardOffset((long) (-100));
        java.lang.String str60 = dateTimeZone57.getID();
        long long62 = dateTimeZone57.nextTransition((long) 709);
        java.util.TimeZone timeZone63 = dateTimeZone57.toTimeZone();
        long long65 = dateTimeZone49.getMillisKeepLocal(dateTimeZone57, 0L);
        org.joda.time.DateTime dateTime66 = localDateTime48.toDateTime(dateTimeZone49);
        org.joda.time.DateTime dateTime67 = localDateTime18.toDateTime((org.joda.time.ReadableInstant) dateTime66);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(intArray3);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[2022, 2, 16, 24845799]");
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(intArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[2022, 2, 16, 24845799]");
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "zh");
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+117:00" + "'", str23, "+117:00");
        org.junit.Assert.assertNotNull(localDateTime26);
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "2022-02-16T06:54:05.799" + "'", str27, "2022-02-16T06:54:05.799");
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(localDateTime31);
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "2022-02-16T06:54:05.799" + "'", str32, "2022-02-16T06:54:05.799");
        org.junit.Assert.assertNotNull(dateTime33);
// flaky:         org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int35 + "' != '" + 421200000 + "'", int35 == 421200000);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(intArray42);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[2022, 2, 16, 24845799]");
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(dateTimeZone49);
// flaky:         org.junit.Assert.assertTrue("'" + int51 + "' != '" + 421200000 + "'", int51 == 421200000);
        org.junit.Assert.assertNotNull(timeZone53);
// flaky:         org.junit.Assert.assertEquals(timeZone53.getDisplayName(), "GMT+;7:00");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(dateTimeZone57);
// flaky:         org.junit.Assert.assertTrue("'" + int59 + "' != '" + 421200000 + "'", int59 == 421200000);
// flaky:         org.junit.Assert.assertEquals("'" + str60 + "' != '" + "+117:00" + "'", str60, "+117:00");
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 709L + "'", long62 == 709L);
        org.junit.Assert.assertNotNull(timeZone63);
// flaky:         org.junit.Assert.assertEquals(timeZone63.getDisplayName(), "GMT+;7:00");
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 0L + "'", long65 == 0L);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(dateTime67);
    }

    @Test
    public void test08037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08037");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.getDefault();
        java.util.Locale locale4 = null;
        java.lang.String str5 = dateTimeZone2.getName((long) (short) 10, locale4);
        long long7 = dateTimeZone1.getMillisKeepLocal(dateTimeZone2, (long) 874);
        int int9 = dateTimeZone2.getOffsetFromLocal((long) 22);
        long long11 = dateTimeZone2.nextTransition((long) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.getDefault();
        java.util.Locale locale15 = null;
        java.lang.String str16 = dateTimeZone13.getName((long) (short) 10, locale15);
        long long18 = dateTimeZone12.getMillisKeepLocal(dateTimeZone13, (long) 874);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.getDefault();
        long long21 = dateTimeZone13.getMillisKeepLocal(dateTimeZone19, (long) '4');
        boolean boolean23 = dateTimeZone13.isStandardOffset(1644572873292L);
        java.lang.String str25 = dateTimeZone13.getNameKey((long) '#');
        org.joda.time.LocalDateTime localDateTime26 = org.joda.time.LocalDateTime.now(dateTimeZone13);
        int int28 = dateTimeZone13.getOffset(3600000L);
        long long30 = dateTimeZone2.getMillisKeepLocal(dateTimeZone13, 0L);
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime((long) (-89), dateTimeZone2);
        int int32 = localDateTime31.getSecondOfMinute();
        org.joda.time.LocalDateTime.Property property33 = localDateTime31.hourOfDay();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTimeZone2);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+117:00" + "'", str5, "+117:00");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 874L + "'", long7 == 874L);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 421200000 + "'", int9 == 421200000);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 10L + "'", long11 == 10L);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+117:00" + "'", str16, "+117:00");
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 874L + "'", long18 == 874L);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 52L + "'", long21 == 52L);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
// flaky:         org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(localDateTime26);
// flaky:         org.junit.Assert.assertTrue("'" + int28 + "' != '" + 421200000 + "'", int28 == 421200000);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 59 + "'", int32 == 59);
        org.junit.Assert.assertNotNull(property33);
    }

    @Test
    public void test08038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08038");
        org.joda.time.tz.Provider provider0 = org.joda.time.DateTimeZone.getProvider();
        org.joda.time.DateTimeZone.setProvider(provider0);
        org.joda.time.DateTimeZone dateTimeZone3 = provider0.getZone("11");
        org.joda.time.DateTimeZone.setProvider(provider0);
        java.util.Set<java.lang.String> strSet5 = provider0.getAvailableIDs();
        org.joda.time.DateTimeZone.setProvider(provider0);
        java.util.Set<java.lang.String> strSet7 = provider0.getAvailableIDs();
        java.lang.String[] strArray12 = new java.lang.String[] { "fra", "", "+00:00", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet13 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet13, strArray12);
        java.lang.Object[] objArray15 = strSet13.toArray();
        boolean boolean16 = strSet13.isEmpty();
        java.util.Locale.LanguageRange[] languageRangeArray17 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList18 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList18, languageRangeArray17);
        java.util.Locale[] localeArray20 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList21 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList21, localeArray20);
        java.util.Locale locale23 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList18, (java.util.Collection<java.util.Locale>) localeList21);
        boolean boolean24 = strSet13.removeAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList18);
        java.util.Locale.LanguageRange[] languageRangeArray25 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList26 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList26, languageRangeArray25);
        java.util.Locale[] localeArray28 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList29 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList29, localeArray28);
        java.util.Locale locale31 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList26, (java.util.Collection<java.util.Locale>) localeList29);
        java.util.Locale.FilteringMode filteringMode32 = java.util.Locale.FilteringMode.EXTENDED_FILTERING;
        java.util.List<java.util.Locale> localeList33 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList18, (java.util.Collection<java.util.Locale>) localeList29, filteringMode32);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap34 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList35 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList18, strMap34);
        java.util.Locale locale38 = new java.util.Locale("fra", "");
        java.util.Set<java.lang.String> strSet39 = locale38.getUnicodeLocaleAttributes();
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime();
        boolean boolean42 = localDateTime40.isBefore((org.joda.time.ReadablePartial) localDateTime41);
        org.joda.time.LocalDateTime localDateTime44 = localDateTime41.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property45 = localDateTime41.dayOfMonth();
        org.joda.time.DurationField durationField46 = property45.getRangeDurationField();
        boolean boolean47 = strSet39.contains((java.lang.Object) durationField46);
        java.lang.String[] strArray52 = new java.lang.String[] { "fra", "", "+00:00", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet53 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet53, strArray52);
        java.lang.Object[] objArray55 = strSet53.toArray();
        boolean boolean56 = strSet53.isEmpty();
        java.util.Locale.LanguageRange[] languageRangeArray57 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList58 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList58, languageRangeArray57);
        java.util.Locale[] localeArray60 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList61 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList61, localeArray60);
        java.util.Locale locale63 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList58, (java.util.Collection<java.util.Locale>) localeList61);
        boolean boolean64 = strSet53.removeAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList58);
        java.util.Locale.LanguageRange[] languageRangeArray65 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList66 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList66, languageRangeArray65);
        java.util.Locale[] localeArray68 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList69 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList69, localeArray68);
        java.util.Locale locale71 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList66, (java.util.Collection<java.util.Locale>) localeList69);
        java.util.Locale.FilteringMode filteringMode72 = java.util.Locale.FilteringMode.EXTENDED_FILTERING;
        java.util.List<java.util.Locale> localeList73 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList58, (java.util.Collection<java.util.Locale>) localeList69, filteringMode72);
        java.util.List<java.lang.String> strList74 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList18, (java.util.Collection<java.lang.String>) strSet39, filteringMode72);
        java.util.stream.Stream<java.util.Locale.LanguageRange> languageRangeStream75 = languageRangeList18.parallelStream();
        java.util.stream.Stream<java.util.Locale.LanguageRange> languageRangeStream76 = languageRangeList18.stream();
        java.util.stream.Stream<java.util.Locale.LanguageRange> languageRangeStream77 = languageRangeList18.parallelStream();
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap78 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList79 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList18, strMap78);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean80 = strSet7.remove((java.lang.Object) strMap78);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(provider0);
        org.junit.Assert.assertNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[fra, , +00:00, hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[fra, , +00:00, hi!]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(languageRangeArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(localeArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(locale23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(languageRangeArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(localeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(locale31);
        org.junit.Assert.assertTrue("'" + filteringMode32 + "' != '" + java.util.Locale.FilteringMode.EXTENDED_FILTERING + "'", filteringMode32.equals(java.util.Locale.FilteringMode.EXTENDED_FILTERING));
        org.junit.Assert.assertNotNull(localeList33);
        org.junit.Assert.assertNotNull(languageRangeList35);
        org.junit.Assert.assertEquals(locale38.toString(), "fra");
        org.junit.Assert.assertNotNull(strSet39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(durationField46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(objArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray55), "[fra, , +00:00, hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray55), "[fra, , +00:00, hi!]");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(languageRangeArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(localeArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNull(locale63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(languageRangeArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(localeArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNull(locale71);
        org.junit.Assert.assertTrue("'" + filteringMode72 + "' != '" + java.util.Locale.FilteringMode.EXTENDED_FILTERING + "'", filteringMode72.equals(java.util.Locale.FilteringMode.EXTENDED_FILTERING));
        org.junit.Assert.assertNotNull(localeList73);
        org.junit.Assert.assertNotNull(strList74);
        org.junit.Assert.assertNotNull(languageRangeStream75);
        org.junit.Assert.assertNotNull(languageRangeStream76);
        org.junit.Assert.assertNotNull(languageRangeStream77);
        org.junit.Assert.assertNotNull(languageRangeList79);
    }

    @Test
    public void test08039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08039");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime();
        boolean boolean4 = localDateTime2.isBefore((org.joda.time.ReadablePartial) localDateTime3);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property7 = localDateTime3.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime8 = property7.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField9 = property7.getField();
        int int10 = dateTimeField9.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime();
        int int12 = localDateTime11.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime11.minusMonths((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minusMonths((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.plusWeeks(22);
        java.util.Locale locale20 = java.util.Locale.JAPANESE;
        java.lang.String str21 = dateTimeField9.getAsShortText((org.joda.time.ReadablePartial) localDateTime18, 22, locale20);
        java.util.Locale.Builder builder22 = builder1.setLocale(locale20);
        java.util.Locale.Builder builder23 = builder22.clearExtensions();
        java.util.Locale.Builder builder24 = builder22.clear();
        org.joda.time.tz.NameProvider nameProvider25 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime();
        boolean boolean28 = localDateTime26.isBefore((org.joda.time.ReadablePartial) localDateTime27);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime27.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property31 = localDateTime27.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime32 = property31.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField33 = property31.getField();
        int int34 = dateTimeField33.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime();
        int int36 = localDateTime35.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime38 = localDateTime35.minusMonths((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime38.minusMonths((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime40.plusWeeks(22);
        java.util.Locale locale44 = java.util.Locale.JAPANESE;
        java.lang.String str45 = dateTimeField33.getAsShortText((org.joda.time.ReadablePartial) localDateTime42, 22, locale44);
        java.lang.String str48 = nameProvider25.getName(locale44, "11", "Etc/UTC");
        org.joda.time.DateTimeZone.setNameProvider(nameProvider25);
        java.util.Locale locale50 = java.util.Locale.FRENCH;
        java.util.Set<java.lang.String> strSet51 = locale50.getUnicodeLocaleAttributes();
        java.lang.String str52 = locale50.getVariant();
        java.lang.String str55 = nameProvider25.getShortName(locale50, "2022-02-11T09:48:02.913", "2022-02-11T09:48:00.361");
        java.util.Locale locale56 = java.util.Locale.JAPAN;
        java.util.Locale locale57 = java.util.Locale.FRENCH;
        java.lang.String str58 = locale56.getDisplayCountry(locale57);
        java.lang.String str59 = locale56.getScript();
        java.lang.String str60 = locale56.getDisplayVariant();
        java.util.Locale.Builder builder61 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder62 = builder61.clear();
        org.joda.time.DateTimeZone dateTimeZone63 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone63);
        java.util.Locale locale66 = java.util.Locale.CHINESE;
        java.lang.String str67 = dateTimeZone63.getName((long) (short) 0, locale66);
        java.util.Locale.Builder builder68 = builder61.setLocale(locale66);
        java.lang.String str69 = locale56.getDisplayScript(locale66);
        java.lang.String str72 = nameProvider25.getShortName(locale56, "2022-02-11T09:48:29.050", "2022-02-11T09:48:28.030");
        java.lang.String str73 = locale56.getVariant();
        java.util.Locale.Builder builder74 = builder22.setLocale(locale56);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder77 = builder22.setUnicodeLocaleKeyword("2022-02-11T09:49:14.533", "2022-02-11T09:48:54.649");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale keyword key: 2022-02-11T09:49:14.533 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
// flaky:         org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 31 + "'", int10 == 31);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 22 + "'", int12 == 22);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "22" + "'", str21, "22");
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(nameProvider25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 31 + "'", int34 == 31);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 22 + "'", int36 == 22);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "22" + "'", str45, "22");
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNull(str55);
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "Japon" + "'", str58, "Japon");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(dateTimeZone63);
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "zh");
// flaky:         org.junit.Assert.assertEquals("'" + str67 + "' != '" + "+117:00" + "'", str67, "+117:00");
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertNull(str72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertNotNull(builder74);
    }

    @Test
    public void test08040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08040");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(988, 369, 760, 0, 836);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 836 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08041");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property5 = localDateTime1.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime6 = property5.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField7 = property5.getField();
        int int8 = property5.getMaximumValueOverall();
        org.joda.time.DateTimeField dateTimeField9 = property5.getField();
        org.joda.time.LocalDateTime localDateTime10 = property5.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime11 = property5.roundHalfFloorCopy();
        org.joda.time.DurationField durationField12 = property5.getLeapDurationField();
// flaky:         org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 31 + "'", int8 == 31);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNull(durationField12);
    }

    @Test
    public void test08042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08042");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = builder0.build();
        java.util.Locale.Builder builder2 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder2.clear();
        java.util.Locale.Category category4 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale5 = java.util.Locale.getDefault(category4);
        java.util.Locale locale6 = java.util.Locale.getDefault(category4);
        java.util.Locale locale7 = java.util.Locale.getDefault(category4);
        java.util.Locale locale8 = java.util.Locale.ROOT;
        java.lang.String str9 = locale8.getDisplayName();
        java.util.Locale.setDefault(category4, locale8);
        java.util.Locale.Builder builder11 = builder2.setLocale(locale8);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder14 = builder2.setExtension('a', "2022-02-11T09:51:32.779");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed extension value: 11T09:51:32.779 [at index 8]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + category4 + "' != '" + java.util.Locale.Category.FORMAT + "'", category4.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test08043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08043");
        long long2 = org.joda.time.field.FieldUtils.safeSubtract((long) 35576370, (long) 188);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 35576182L + "'", long2 == 35576182L);
    }

    @Test
    public void test08044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08044");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone0);
        java.util.Locale locale3 = java.util.Locale.CHINESE;
        java.lang.String str4 = dateTimeZone0.getName((long) (short) 0, locale3);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusMillis((int) (byte) 1);
        java.lang.String str8 = localDateTime7.toString();
        org.joda.time.DateTime dateTime9 = localDateTime7.toDateTime();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusMillis((int) (byte) 1);
        java.lang.String str13 = localDateTime12.toString();
        org.joda.time.DateTime dateTime14 = localDateTime12.toDateTime();
        boolean boolean15 = dateTime9.isEqual((org.joda.time.ReadableInstant) dateTime14);
        int int16 = dateTimeZone0.getOffset((org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.minusMillis((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.plusDays(0);
        boolean boolean22 = dateTime9.equals((java.lang.Object) localDateTime21);
        int[] intArray23 = localDateTime21.getValues();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime21.plusWeeks((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime21.withWeekyear((-292275054));
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.minusMillis(207);
        int int30 = localDateTime27.getWeekyear();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+117:00" + "'", str4, "+117:00");
        org.junit.Assert.assertNotNull(localDateTime7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "2022-02-16T06:54:06.067" + "'", str8, "2022-02-16T06:54:06.067");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(localDateTime12);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "2022-02-16T06:54:06.067" + "'", str13, "2022-02-16T06:54:06.067");
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 421200000 + "'", int16 == 421200000);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(intArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[2022, 2, 16, 24846067]");
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-292275054) + "'", int30 == (-292275054));
    }

    @Test
    public void test08045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08045");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        int[] intArray3 = localDateTime1.getValues();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.plusYears((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        boolean boolean8 = localDateTime6.isBefore((org.joda.time.ReadablePartial) localDateTime7);
        int[] intArray9 = localDateTime7.getValues();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime1.withFields((org.joda.time.ReadablePartial) localDateTime7);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusMillis((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.minusSeconds((int) '#');
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.withWeekOfWeekyear(50);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime14.withMinuteOfHour((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime14.minusMonths((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime14.withYearOfCentury(0);
        int int23 = localDateTime22.getYearOfEra();
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.LocalDateTime localDateTime26 = localDateTime22.withDurationAdded(readableDuration24, 35320391);
        org.joda.time.LocalDateTime.Property property27 = localDateTime22.dayOfYear();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(intArray3);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[2022, 2, 16, 24846105]");
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(intArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[2022, 2, 16, 24846105]");
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2000 + "'", int23 == 2000);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(property27);
    }

    @Test
    public void test08046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08046");
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.minusMillis((int) (byte) 1);
        java.lang.String str6 = localDateTime5.toString();
        org.joda.time.DateTime dateTime7 = localDateTime5.toDateTime();
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minusMillis((int) (byte) 1);
        java.lang.String str11 = localDateTime10.toString();
        org.joda.time.DateTime dateTime12 = localDateTime10.toDateTime();
        boolean boolean13 = dateTime7.isEqual((org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.Chronology chronology14 = dateTime12.getChronology();
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime((java.lang.Object) 35271574L, chronology14);
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((long) 'u', chronology14);
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime(86399999L, chronology14);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.plusWeeks((int) 'a');
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.minusDays((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.withDayOfYear(26);
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.getDefault();
        java.util.Locale locale27 = null;
        java.lang.String str28 = dateTimeZone25.getName((long) (short) 10, locale27);
        long long30 = dateTimeZone24.getMillisKeepLocal(dateTimeZone25, (long) 874);
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.getDefault();
        long long33 = dateTimeZone25.getMillisKeepLocal(dateTimeZone31, (long) '4');
        int int35 = dateTimeZone25.getOffsetFromLocal((long) 83);
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime38 = localDateTime36.minusMillis((int) (byte) 1);
        java.lang.String str39 = localDateTime38.toString();
        org.joda.time.DateTime dateTime40 = localDateTime38.toDateTime();
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime43 = localDateTime41.minusMillis((int) (byte) 1);
        java.lang.String str44 = localDateTime43.toString();
        org.joda.time.DateTime dateTime45 = localDateTime43.toDateTime();
        boolean boolean46 = dateTime40.isEqual((org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.LocalDateTime localDateTime47 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime49 = localDateTime47.minusMillis((int) (byte) 1);
        java.lang.String str50 = localDateTime49.toString();
        org.joda.time.DateTime dateTime51 = localDateTime49.toDateTime();
        boolean boolean52 = dateTime40.isEqual((org.joda.time.ReadableInstant) dateTime51);
        org.joda.time.LocalDateTime localDateTime53 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime55 = localDateTime53.minusMillis((int) (byte) 1);
        java.lang.String str56 = localDateTime55.toString();
        org.joda.time.DateTime dateTime57 = localDateTime55.toDateTime();
        org.joda.time.LocalDateTime localDateTime58 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime60 = localDateTime58.minusMillis((int) (byte) 1);
        java.lang.String str61 = localDateTime60.toString();
        org.joda.time.DateTime dateTime62 = localDateTime60.toDateTime();
        boolean boolean63 = dateTime57.isEqual((org.joda.time.ReadableInstant) dateTime62);
        boolean boolean64 = dateTime40.isEqual((org.joda.time.ReadableInstant) dateTime62);
        int int65 = dateTimeZone25.getOffset((org.joda.time.ReadableInstant) dateTime62);
        org.joda.time.DateTimeZone dateTimeZone66 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone dateTimeZone67 = org.joda.time.DateTimeZone.getDefault();
        java.util.Locale locale69 = null;
        java.lang.String str70 = dateTimeZone67.getName((long) (short) 10, locale69);
        long long72 = dateTimeZone66.getMillisKeepLocal(dateTimeZone67, (long) 874);
        org.joda.time.DateTimeZone dateTimeZone73 = org.joda.time.DateTimeZone.getDefault();
        long long75 = dateTimeZone67.getMillisKeepLocal(dateTimeZone73, (long) '4');
        int int77 = dateTimeZone67.getOffsetFromLocal((long) 83);
        long long81 = dateTimeZone67.convertLocalToUTC((long) 1, true, 0L);
        java.util.Locale locale83 = java.util.Locale.ROOT;
        java.lang.String str84 = locale83.getDisplayName();
        java.lang.String str85 = dateTimeZone67.getShortName((long) (-120), locale83);
        long long87 = dateTimeZone25.getMillisKeepLocal(dateTimeZone67, (long) 42);
        java.lang.String str89 = dateTimeZone25.getNameKey(52L);
        org.joda.time.DateTime dateTime90 = localDateTime21.toDateTime(dateTimeZone25);
        java.lang.String str91 = dateTime90.toString();
        org.junit.Assert.assertNotNull(localDateTime5);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "2022-02-16T06:54:06.120" + "'", str6, "2022-02-16T06:54:06.120");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(localDateTime10);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "2022-02-16T06:54:06.120" + "'", str11, "2022-02-16T06:54:06.120");
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(dateTimeZone25);
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "+117:00" + "'", str28, "+117:00");
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 874L + "'", long30 == 874L);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 52L + "'", long33 == 52L);
// flaky:         org.junit.Assert.assertTrue("'" + int35 + "' != '" + 421200000 + "'", int35 == 421200000);
        org.junit.Assert.assertNotNull(localDateTime38);
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "2022-02-16T06:54:06.120" + "'", str39, "2022-02-16T06:54:06.120");
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(localDateTime43);
// flaky:         org.junit.Assert.assertEquals("'" + str44 + "' != '" + "2022-02-16T06:54:06.120" + "'", str44, "2022-02-16T06:54:06.120");
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(localDateTime49);
// flaky:         org.junit.Assert.assertEquals("'" + str50 + "' != '" + "2022-02-16T06:54:06.120" + "'", str50, "2022-02-16T06:54:06.120");
        org.junit.Assert.assertNotNull(dateTime51);
// flaky:         org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(localDateTime55);
// flaky:         org.junit.Assert.assertEquals("'" + str56 + "' != '" + "2022-02-16T06:54:06.120" + "'", str56, "2022-02-16T06:54:06.120");
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(localDateTime60);
// flaky:         org.junit.Assert.assertEquals("'" + str61 + "' != '" + "2022-02-16T06:54:06.120" + "'", str61, "2022-02-16T06:54:06.120");
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
// flaky:         org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int65 + "' != '" + 421200000 + "'", int65 == 421200000);
        org.junit.Assert.assertNotNull(dateTimeZone66);
        org.junit.Assert.assertNotNull(dateTimeZone67);
// flaky:         org.junit.Assert.assertEquals("'" + str70 + "' != '" + "+117:00" + "'", str70, "+117:00");
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 874L + "'", long72 == 874L);
        org.junit.Assert.assertNotNull(dateTimeZone73);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 52L + "'", long75 == 52L);
// flaky:         org.junit.Assert.assertTrue("'" + int77 + "' != '" + 421200000 + "'", int77 == 421200000);
// flaky:         org.junit.Assert.assertTrue("'" + long81 + "' != '" + (-421199999L) + "'", long81 == (-421199999L));
        org.junit.Assert.assertNotNull(locale83);
        org.junit.Assert.assertEquals(locale83.toString(), "");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "" + "'", str84, "");
// flaky:         org.junit.Assert.assertEquals("'" + str85 + "' != '" + "+117:00" + "'", str85, "+117:00");
        org.junit.Assert.assertTrue("'" + long87 + "' != '" + 42L + "'", long87 == 42L);
// flaky:         org.junit.Assert.assertNull(str89);
        org.junit.Assert.assertNotNull(dateTime90);
// flaky:         org.junit.Assert.assertEquals("'" + str91 + "' != '" + "1971-11-06T20:59:59.999+117:00" + "'", str91, "1971-11-06T20:59:59.999+117:00");
    }

    @Test
    public void test08047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08047");
        int int2 = org.joda.time.field.FieldUtils.safeMultiplyToInt((long) 276, (long) 424);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 117024 + "'", int2 == 117024);
    }

    @Test
    public void test08048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08048");
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.minusMillis((int) (byte) 1);
        java.lang.String str6 = localDateTime5.toString();
        org.joda.time.DateTime dateTime7 = localDateTime5.toDateTime();
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minusMillis((int) (byte) 1);
        java.lang.String str11 = localDateTime10.toString();
        org.joda.time.DateTime dateTime12 = localDateTime10.toDateTime();
        boolean boolean13 = dateTime7.isEqual((org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.Chronology chronology14 = dateTime12.getChronology();
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime((java.lang.Object) 35271574L, chronology14);
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((long) 'u', chronology14);
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime(86399999L, chronology14);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.plusWeeks((int) 'a');
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.plusYears(1);
        org.joda.time.ReadablePeriod readablePeriod22 = null;
        org.joda.time.LocalDateTime localDateTime23 = localDateTime19.minus(readablePeriod22);
        org.junit.Assert.assertNotNull(localDateTime5);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "2022-02-16T06:54:06.164" + "'", str6, "2022-02-16T06:54:06.164");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(localDateTime10);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "2022-02-16T06:54:06.164" + "'", str11, "2022-02-16T06:54:06.164");
        org.junit.Assert.assertNotNull(dateTime12);
// flaky:         org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
    }

    @Test
    public void test08049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08049");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        int int1 = localDateTime0.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime3 = localDateTime0.minusMonths((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.minusSeconds((-35274908));
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetMillis((int) 'u');
        long long11 = dateTimeZone7.convertLocalToUTC((long) 1, false, 822L);
        java.util.TimeZone timeZone12 = dateTimeZone7.toTimeZone();
        int int14 = dateTimeZone7.getOffset(10L);
        org.joda.time.DateTime dateTime15 = localDateTime3.toDateTime(dateTimeZone7);
        org.joda.time.LocalDateTime.Property property16 = localDateTime3.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime3.minusYears(45);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.LocalDateTime localDateTime20 = localDateTime3.plus(readablePeriod19);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 22 + "'", int1 == 22);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-116L) + "'", long11 == (-116L));
        org.junit.Assert.assertNotNull(timeZone12);
        org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 117 + "'", int14 == 117);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
    }

    @Test
    public void test08050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08050");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("CAN");
        java.lang.String str2 = languageRange1.getRange();
        double double3 = languageRange1.getWeight();
        double double4 = languageRange1.getWeight();
        java.lang.String str5 = languageRange1.getRange();
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        boolean boolean8 = localDateTime6.isBefore((org.joda.time.ReadablePartial) localDateTime7);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime7.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property11 = localDateTime7.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime12 = property11.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField13 = property11.getField();
        long long15 = dateTimeField13.remainder((-1L));
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.minusMillis((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.plusDays(0);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.plusMillis((int) '#');
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime();
        boolean boolean25 = localDateTime23.isBefore((org.joda.time.ReadablePartial) localDateTime24);
        int[] intArray26 = localDateTime24.getValues();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime24.plusYears((int) (byte) -1);
        int[] intArray29 = localDateTime24.getValues();
        boolean boolean30 = localDateTime20.isAfter((org.joda.time.ReadablePartial) localDateTime24);
        java.util.Locale locale34 = new java.util.Locale("11", "weekyear", "fra");
        java.lang.String str35 = dateTimeField13.getAsShortText((org.joda.time.ReadablePartial) localDateTime24, locale34);
        java.util.Date date36 = localDateTime24.toDate();
        boolean boolean37 = languageRange1.equals((java.lang.Object) date36);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "can" + "'", str2, "can");
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 1.0d + "'", double4 == 1.0d);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "can" + "'", str5, "can");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 86399999L + "'", long15 == 86399999L);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(intArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[2022, 2, 16, 24846197]");
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(intArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[2022, 2, 16, 24846197]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertEquals(locale34.toString(), "11_WEEKYEAR_fra");
// flaky:         org.junit.Assert.assertEquals("'" + str35 + "' != '" + "16" + "'", str35, "16");
        org.junit.Assert.assertNotNull(date36);
// flaky:         org.junit.Assert.assertEquals(date36.toString(), "Wed Feb 16 06:54:07 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test08051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08051");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 83);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusSeconds(83);
        int int4 = localDateTime3.getYear();
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        org.joda.time.LocalDateTime localDateTime7 = localDateTime3.withPeriodAdded(readablePeriod5, 958);
        org.junit.Assert.assertNotNull(localDateTime3);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1970 + "'", int4 == 1970);
        org.junit.Assert.assertNotNull(localDateTime7);
    }

    @Test
    public void test08052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08052");
        org.joda.time.tz.NameProvider nameProvider0 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale1 = java.util.Locale.JAPAN;
        java.lang.String str4 = nameProvider0.getShortName(locale1, "und", "");
        java.util.Locale locale5 = java.util.Locale.GERMANY;
        java.lang.String str6 = locale5.getISO3Language();
        java.lang.String str7 = locale5.getDisplayCountry();
        java.lang.String str10 = nameProvider0.getName(locale5, "2022-02-11T09:49:30.991", "2022-02-11T09:48:55.827");
        java.lang.Object obj11 = locale5.clone();
        org.junit.Assert.assertNotNull(nameProvider0);
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ja_JP");
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "deu" + "'", str6, "deu");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Germany" + "'", str7, "Germany");
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertEquals(obj11.toString(), "de_DE");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj11), "de_DE");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj11), "de_DE");
    }

    @Test
    public void test08053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08053");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        java.util.Locale locale3 = null;
        java.lang.String str4 = dateTimeZone1.getName((long) (short) 10, locale3);
        long long6 = dateTimeZone0.getMillisKeepLocal(dateTimeZone1, (long) 874);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        long long9 = dateTimeZone1.getMillisKeepLocal(dateTimeZone7, (long) '4');
        java.lang.String str10 = dateTimeZone1.toString();
        java.lang.String str12 = dateTimeZone1.getNameKey((long) 505);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+117:00" + "'", str4, "+117:00");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 874L + "'", long6 == 874L);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 52L + "'", long9 == 52L);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+117:00" + "'", str10, "+117:00");
// flaky:         org.junit.Assert.assertNull(str12);
    }

    @Test
    public void test08054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08054");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(626);
        long long4 = dateTimeZone1.adjustOffset((-421199990L), false);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.forOffsetMillis((int) 'x');
        java.lang.String str8 = dateTimeZone6.getNameKey(58L);
        boolean boolean9 = dateTimeZone6.isFixed();
        long long11 = dateTimeZone6.nextTransition(1814400058L);
        long long13 = dateTimeZone6.nextTransition(3577707550L);
        long long16 = dateTimeZone6.adjustOffset(542L, true);
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime();
        boolean boolean19 = localDateTime17.isBefore((org.joda.time.ReadablePartial) localDateTime18);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime18.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime18.plusMinutes((int) '#');
        org.joda.time.LocalDateTime.Property property24 = localDateTime23.weekOfWeekyear();
        java.lang.String str25 = property24.getAsShortText();
        org.joda.time.LocalDateTime localDateTime27 = property24.addWrapFieldToCopy((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.minusMillis((int) (byte) 1);
        java.lang.String str31 = localDateTime30.toString();
        org.joda.time.DateTime dateTime32 = localDateTime30.toDateTime();
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime35 = localDateTime33.minusMillis((int) (byte) 1);
        java.lang.String str36 = localDateTime35.toString();
        org.joda.time.DateTime dateTime37 = localDateTime35.toDateTime();
        boolean boolean38 = dateTime32.isEqual((org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.Chronology chronology39 = dateTime37.getChronology();
        org.joda.time.ReadableInstant readableInstant40 = null;
        boolean boolean41 = dateTime37.isEqual(readableInstant40);
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime();
        boolean boolean44 = localDateTime42.isBefore((org.joda.time.ReadablePartial) localDateTime43);
        org.joda.time.LocalDateTime localDateTime46 = localDateTime43.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property47 = localDateTime43.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime48 = property47.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField49 = property47.getField();
        long long52 = dateTimeField49.addWrapField((long) 6, (int) (byte) 0);
        java.lang.String str54 = dateTimeField49.getAsShortText((long) (byte) 10);
        boolean boolean55 = dateTime37.equals((java.lang.Object) str54);
        int int56 = property24.getDifference((org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.LocalDateTime localDateTime57 = property24.roundHalfEvenCopy();
        org.joda.time.LocalDateTime.Property property58 = localDateTime57.millisOfSecond();
        org.joda.time.ReadableDuration readableDuration59 = null;
        org.joda.time.LocalDateTime localDateTime61 = localDateTime57.withDurationAdded(readableDuration59, 41);
        boolean boolean62 = dateTimeZone6.isLocalDateTimeGap(localDateTime57);
        long long64 = dateTimeZone1.getMillisKeepLocal(dateTimeZone6, (-29L));
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-421199990L) + "'", long4 == (-421199990L));
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1814400058L + "'", long11 == 1814400058L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 3577707550L + "'", long13 == 3577707550L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 542L + "'", long16 == 542L);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(property24);
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "7" + "'", str25, "7");
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime30);
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "2022-02-16T06:54:06.239" + "'", str31, "2022-02-16T06:54:06.239");
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(localDateTime35);
// flaky:         org.junit.Assert.assertEquals("'" + str36 + "' != '" + "2022-02-16T06:54:06.239" + "'", str36, "2022-02-16T06:54:06.239");
        org.junit.Assert.assertNotNull(dateTime37);
// flaky:         org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 6L + "'", long52 == 6L);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "1" + "'", str54, "1");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 477L + "'", long64 == 477L);
    }

    @Test
    public void test08055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08055");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("2022-02-11T09:47:49.888");
        int int2 = timeZone1.getRawOffset();
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        java.lang.Object obj4 = timeZone1.clone();
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(obj4);
        org.junit.Assert.assertEquals(obj4.toString(), "sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null]");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj4), "sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null]");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj4), "sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null]");
    }

    @Test
    public void test08056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08056");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property5 = localDateTime1.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime6 = property5.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField7 = property5.getField();
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime();
        boolean boolean10 = localDateTime8.isBefore((org.joda.time.ReadablePartial) localDateTime9);
        int[] intArray11 = localDateTime9.getValues();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime9.plusYears((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime();
        boolean boolean16 = localDateTime14.isBefore((org.joda.time.ReadablePartial) localDateTime15);
        int[] intArray17 = localDateTime15.getValues();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime9.withFields((org.joda.time.ReadablePartial) localDateTime15);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.minusMillis((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.minusSeconds((int) '#');
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.withWeekOfWeekyear(50);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime22.withMinuteOfHour((int) (byte) 0);
        int int27 = dateTimeField7.getMinimumValue((org.joda.time.ReadablePartial) localDateTime22);
        java.lang.String str28 = dateTimeField7.toString();
        long long30 = dateTimeField7.roundHalfFloor(1L);
        boolean boolean31 = dateTimeField7.isLenient();
        long long34 = dateTimeField7.addWrapField((long) 5200, 35279748);
        long long37 = dateTimeField7.getDifferenceAsLong(449280000000L, 404400L);
        java.util.Locale locale39 = java.util.Locale.getDefault();
        java.lang.String str40 = locale39.getVariant();
        java.lang.String str41 = dateTimeField7.getAsShortText(21, locale39);
        // The following exception was thrown during execution in test generation
        try {
            long long44 = dateTimeField7.set((long) (-69000), 163);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 163 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[2022, 2, 16, 24846273]");
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(intArray17);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[2022, 2, 16, 24846273]");
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "DateTimeField[dayOfMonth]" + "'", str28, "DateTimeField[dayOfMonth]");
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 1036805200L + "'", long34 == 1036805200L);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 5199L + "'", long37 == 5199L);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "21" + "'", str41, "21");
    }

    @Test
    public void test08057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08057");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property5 = localDateTime1.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime6 = property5.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField7 = property5.getField();
        int int10 = dateTimeField7.getDifference(1L, 86399999L);
        org.joda.time.DurationField durationField11 = dateTimeField7.getLeapDurationField();
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime();
        boolean boolean14 = localDateTime12.isBefore((org.joda.time.ReadablePartial) localDateTime13);
        org.joda.time.LocalDateTime.Property property15 = localDateTime12.dayOfMonth();
        org.joda.time.LocalDateTime.Property property16 = localDateTime12.weekyear();
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.LocalDateTime localDateTime19 = localDateTime12.withPeriodAdded(readablePeriod17, (-100));
        int int20 = dateTimeField7.getMinimumValue((org.joda.time.ReadablePartial) localDateTime19);
        long long23 = dateTimeField7.add((long) 724, (long) 688);
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.getDefault();
        java.util.Locale locale27 = null;
        java.lang.String str28 = dateTimeZone25.getName((long) (short) 10, locale27);
        long long30 = dateTimeZone24.getMillisKeepLocal(dateTimeZone25, (long) 874);
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.getDefault();
        long long33 = dateTimeZone25.getMillisKeepLocal(dateTimeZone31, (long) '4');
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime36 = localDateTime34.minusMillis((int) (byte) 1);
        java.lang.String str37 = localDateTime36.toString();
        org.joda.time.LocalDateTime localDateTime39 = localDateTime36.minusMonths((int) 'a');
        boolean boolean40 = dateTimeZone25.equals((java.lang.Object) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = org.joda.time.DateTimeFieldType.centuryOfEra();
        boolean boolean42 = dateTimeZone25.equals((java.lang.Object) dateTimeFieldType41);
        org.joda.time.LocalDateTime localDateTime43 = org.joda.time.LocalDateTime.now(dateTimeZone25);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter44 = null;
        java.lang.String str45 = localDateTime43.toString(dateTimeFormatter44);
        int int46 = localDateTime43.getMillisOfSecond();
        int int47 = localDateTime43.getYear();
        int int48 = dateTimeField7.getMaximumValue((org.joda.time.ReadablePartial) localDateTime43);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNull(durationField11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 59443200724L + "'", long23 == 59443200724L);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(dateTimeZone25);
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "+117:00" + "'", str28, "+117:00");
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 874L + "'", long30 == 874L);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 52L + "'", long33 == 52L);
        org.junit.Assert.assertNotNull(localDateTime36);
// flaky:         org.junit.Assert.assertEquals("'" + str37 + "' != '" + "2022-02-16T06:54:06.290" + "'", str37, "2022-02-16T06:54:06.290");
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(localDateTime43);
// flaky:         org.junit.Assert.assertEquals("'" + str45 + "' != '" + "2022-02-16T06:54:06.291" + "'", str45, "2022-02-16T06:54:06.291");
// flaky:         org.junit.Assert.assertTrue("'" + int46 + "' != '" + 291 + "'", int46 == 291);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2022 + "'", int47 == 2022);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 28 + "'", int48 == 28);
    }

    @Test
    public void test08058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08058");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        boolean boolean2 = dateTimeZone1.isFixed();
        java.lang.String str3 = dateTimeZone1.getID();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime();
        boolean boolean7 = localDateTime5.isBefore((org.joda.time.ReadablePartial) localDateTime6);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property10 = localDateTime6.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime11 = property10.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField12 = property10.getField();
        int int13 = dateTimeField12.getMaximumValue();
        java.util.Locale locale17 = new java.util.Locale("fra", "");
        java.util.Set<java.lang.String> strSet18 = locale17.getUnicodeLocaleAttributes();
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime();
        boolean boolean21 = localDateTime19.isBefore((org.joda.time.ReadablePartial) localDateTime20);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime20.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property24 = localDateTime20.dayOfMonth();
        org.joda.time.DurationField durationField25 = property24.getRangeDurationField();
        boolean boolean26 = strSet18.contains((java.lang.Object) durationField25);
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime();
        boolean boolean29 = localDateTime27.isBefore((org.joda.time.ReadablePartial) localDateTime28);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime28.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property32 = localDateTime28.dayOfMonth();
        boolean boolean33 = property32.isLeap();
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone34);
        java.util.Locale locale37 = java.util.Locale.CHINESE;
        java.lang.String str38 = dateTimeZone34.getName((long) (short) 0, locale37);
        java.lang.String str39 = property32.getAsShortText(locale37);
        boolean boolean40 = strSet18.equals((java.lang.Object) locale37);
        java.lang.String str41 = locale37.getISO3Country();
        java.lang.String str42 = dateTimeField12.getAsText(0, locale37);
        java.lang.String str43 = locale37.getVariant();
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime();
        boolean boolean46 = localDateTime44.isBefore((org.joda.time.ReadablePartial) localDateTime45);
        org.joda.time.LocalDateTime localDateTime48 = localDateTime45.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property49 = localDateTime45.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime50 = property49.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField51 = property49.getField();
        long long54 = dateTimeField51.addWrapField((long) (short) 1, (int) (byte) 100);
        int int56 = dateTimeField51.getLeapAmount(0L);
        long long58 = dateTimeField51.roundHalfFloor((long) (-1));
        org.joda.time.LocalDateTime localDateTime59 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime60 = new org.joda.time.LocalDateTime();
        boolean boolean61 = localDateTime59.isBefore((org.joda.time.ReadablePartial) localDateTime60);
        org.joda.time.LocalDateTime localDateTime63 = localDateTime60.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property64 = localDateTime60.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime65 = property64.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField66 = property64.getField();
        long long68 = dateTimeField66.remainder((-1L));
        org.joda.time.DateTimeFieldType dateTimeFieldType69 = dateTimeField66.getType();
        boolean boolean70 = dateTimeField66.isSupported();
        boolean boolean71 = dateTimeField66.isLenient();
        org.joda.time.ReadablePartial readablePartial72 = null;
        java.util.Locale locale74 = java.util.Locale.CHINESE;
        java.util.Locale locale75 = java.util.Locale.ITALIAN;
        java.lang.String str76 = locale75.getDisplayCountry();
        java.util.Set<java.lang.String> strSet77 = locale75.getUnicodeLocaleAttributes();
        java.lang.String str78 = locale74.getDisplayScript(locale75);
        java.lang.String str79 = dateTimeField66.getAsText(readablePartial72, 35282145, locale74);
        int int80 = dateTimeField51.getMaximumTextLength(locale74);
        java.lang.String str81 = locale37.getDisplayCountry(locale74);
        java.lang.String str82 = dateTimeZone1.getName((long) (-2717), locale74);
        java.lang.String str84 = dateTimeZone1.getShortName(0L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+117:00" + "'", str3, "+117:00");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 31 + "'", int13 == 31);
        org.junit.Assert.assertEquals(locale17.toString(), "fra");
        org.junit.Assert.assertNotNull(strSet18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "zh");
// flaky:         org.junit.Assert.assertEquals("'" + str38 + "' != '" + "+117:00" + "'", str38, "+117:00");
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "16" + "'", str39, "16");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "0" + "'", str42, "0");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 604800001L + "'", long54 == 604800001L);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 0L + "'", long58 == 0L);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 86399999L + "'", long68 == 86399999L);
        org.junit.Assert.assertNotNull(dateTimeFieldType69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "zh");
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "it");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, "");
        org.junit.Assert.assertNotNull(strSet77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "" + "'", str78, "");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "35282145" + "'", str79, "35282145");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 2 + "'", int80 == 2);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "" + "'", str81, "");
// flaky:         org.junit.Assert.assertEquals("'" + str82 + "' != '" + "+117:00" + "'", str82, "+117:00");
// flaky:         org.junit.Assert.assertEquals("'" + str84 + "' != '" + "+117:00" + "'", str84, "+117:00");
    }

    @Test
    public void test08059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08059");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property5 = localDateTime1.dayOfMonth();
        java.util.Locale locale6 = java.util.Locale.FRENCH;
        java.util.Set<java.lang.String> strSet7 = locale6.getUnicodeLocaleAttributes();
        java.lang.String str8 = locale6.getVariant();
        java.lang.String str9 = property5.getAsText(locale6);
        org.joda.time.ReadableInstant readableInstant10 = null;
        long long11 = property5.getDifferenceAsLong(readableInstant10);
        org.joda.time.LocalDateTime localDateTime12 = property5.roundCeilingCopy();
        org.joda.time.LocalDateTime localDateTime13 = property5.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withCenturyOfEra(49);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime13.minusYears(35360379);
        org.joda.time.DateTimeField[] dateTimeFieldArray18 = localDateTime13.getFields();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "16" + "'", str9, "16");
// flaky:         org.junit.Assert.assertTrue("'" + long11 + "' != '" + 4L + "'", long11 == 4L);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(dateTimeFieldArray18);
    }

    @Test
    public void test08060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08060");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property5 = localDateTime1.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime6 = property5.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField7 = property5.getField();
        int int10 = dateTimeField7.getDifference(1L, 86399999L);
        org.joda.time.DurationField durationField11 = dateTimeField7.getLeapDurationField();
        java.lang.String str13 = dateTimeField7.getAsText(1382602200L);
        int int15 = dateTimeField7.getMinimumValue(2L);
        int int16 = dateTimeField7.getMinimumValue();
        long long18 = dateTimeField7.roundHalfEven((long) 35390156);
        int int20 = dateTimeField7.getMaximumValue(35603448L);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNull(durationField11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "17" + "'", str13, "17");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 31 + "'", int20 == 31);
    }

    @Test
    public void test08061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08061");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.minusMillis((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.plusDays(0);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.plusMillis((int) '#');
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime();
        boolean boolean9 = localDateTime7.isBefore((org.joda.time.ReadablePartial) localDateTime8);
        int[] intArray10 = localDateTime8.getValues();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime8.plusYears((int) (byte) -1);
        int[] intArray13 = localDateTime8.getValues();
        boolean boolean14 = localDateTime4.isAfter((org.joda.time.ReadablePartial) localDateTime8);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.LocalDateTime localDateTime16 = localDateTime4.minus(readablePeriod15);
        int int17 = localDateTime16.getYear();
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(intArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[2022, 2, 16, 24846381]");
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(intArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[2022, 2, 16, 24846381]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2022 + "'", int17 == 2022);
    }

    @Test
    public void test08062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08062");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((-215999359L));
        int int2 = localDateTime1.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime();
        boolean boolean5 = localDateTime3.isBefore((org.joda.time.ReadablePartial) localDateTime4);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime4.plusMinutes((int) '#');
        org.joda.time.LocalDateTime localDateTime11 = localDateTime4.minusMinutes((int) (short) 1);
        org.joda.time.LocalDateTime.Property property12 = localDateTime11.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime();
        boolean boolean15 = localDateTime13.isBefore((org.joda.time.ReadablePartial) localDateTime14);
        int[] intArray16 = localDateTime14.getValues();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime14.plusYears((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime();
        boolean boolean21 = localDateTime19.isBefore((org.joda.time.ReadablePartial) localDateTime20);
        int[] intArray22 = localDateTime20.getValues();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime14.withFields((org.joda.time.ReadablePartial) localDateTime20);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.minusMillis((int) (short) 100);
        int int26 = localDateTime23.getMillisOfSecond();
        int int27 = localDateTime23.size();
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime();
        int int29 = localDateTime28.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime31 = localDateTime28.minusMonths((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.minusMonths((int) (byte) 0);
        int int34 = localDateTime31.getWeekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = org.joda.time.DateTimeFieldType.yearOfCentury();
        org.joda.time.DurationFieldType durationFieldType36 = dateTimeFieldType35.getDurationType();
        org.joda.time.LocalDateTime localDateTime38 = localDateTime31.withFieldAdded(durationFieldType36, (int) '4');
        boolean boolean39 = localDateTime23.isSupported(durationFieldType36);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime11.withFieldAdded(durationFieldType36, 52);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime1.withFieldAdded(durationFieldType36, 800);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime43.minusWeeks((int) 'x');
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 641 + "'", int2 == 641);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(intArray16);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[2022, 2, 16, 24846396]");
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[2022, 2, 16, 24846396]");
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
// flaky:         org.junit.Assert.assertTrue("'" + int26 + "' != '" + 396 + "'", int26 == 396);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 4 + "'", int27 == 4);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 22 + "'", int29 == 22);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2022 + "'", int34 == 2022);
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertNotNull(durationFieldType36);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(localDateTime45);
    }

    @Test
    public void test08063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08063");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property5 = localDateTime1.dayOfMonth();
        int int6 = property5.get();
        org.joda.time.LocalDateTime localDateTime8 = property5.addWrapFieldToCopy(405);
        org.joda.time.DateTimeField dateTimeField9 = property5.getField();
        org.joda.time.LocalDateTime localDateTime11 = property5.addToCopy((-20496));
        int int12 = property5.getMaximumValueOverall();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 16 + "'", int6 == 16);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 31 + "'", int12 == 31);
    }

    @Test
    public void test08064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08064");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.minusMillis((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.plusDays(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.weekyear();
        boolean boolean6 = localDateTime2.isSupported(dateTimeFieldType5);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime2.plusMonths(0);
        org.joda.time.LocalDateTime.Property property9 = localDateTime2.millisOfDay();
        org.joda.time.ReadablePartial readablePartial10 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean11 = localDateTime2.isBefore(readablePartial10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Partial cannot be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
    }

    @Test
    public void test08065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08065");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.minusMillis((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.plusDays(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.withField(dateTimeFieldType5, 0);
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime();
        boolean boolean10 = localDateTime8.isBefore((org.joda.time.ReadablePartial) localDateTime9);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime9.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime9.plusMinutes((int) '#');
        org.joda.time.LocalDateTime localDateTime16 = localDateTime9.minusMinutes((int) (short) 1);
        boolean boolean17 = localDateTime7.isAfter((org.joda.time.ReadablePartial) localDateTime16);
        java.util.Date date18 = localDateTime16.toDate();
        int int19 = localDateTime16.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime16);
        java.util.Date date21 = localDateTime20.toDate();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetMillis(10);
        org.joda.time.DateTime dateTime24 = localDateTime20.toDateTime(dateTimeZone23);
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime();
        int int26 = localDateTime25.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime25.plusHours((-1));
        org.joda.time.LocalDateTime localDateTime30 = localDateTime25.minusHours((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime();
        boolean boolean33 = localDateTime31.isBefore((org.joda.time.ReadablePartial) localDateTime32);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime32.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property36 = localDateTime32.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime37 = property36.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField38 = property36.getField();
        long long40 = dateTimeField38.remainder((-1L));
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = dateTimeField38.getType();
        int int42 = localDateTime25.indexOf(dateTimeFieldType41);
        org.joda.time.DurationFieldType durationFieldType43 = dateTimeFieldType41.getDurationType();
        boolean boolean44 = dateTime24.isSupported(dateTimeFieldType41);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(date18);
// flaky:         org.junit.Assert.assertEquals(date18.toString(), "Wed Feb 16 06:53:07 GMT+00:00 2022");
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 488 + "'", int19 == 488);
        org.junit.Assert.assertNotNull(date21);
// flaky:         org.junit.Assert.assertEquals(date21.toString(), "Wed Feb 16 06:53:07 GMT+00:00 2022");
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(dateTime24);
// flaky:         org.junit.Assert.assertTrue("'" + int26 + "' != '" + 489 + "'", int26 == 489);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 86399999L + "'", long40 == 86399999L);
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2 + "'", int42 == 2);
        org.junit.Assert.assertNotNull(durationFieldType43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
    }

    @Test
    public void test08066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08066");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property5 = localDateTime1.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime6 = property5.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField7 = property5.getField();
        long long10 = dateTimeField7.addWrapField((long) 6, (int) (byte) 0);
        java.lang.String str12 = dateTimeField7.getAsShortText((long) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = dateTimeField7.getType();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minusMillis((int) (byte) 1);
        java.lang.String str17 = localDateTime16.toString();
        org.joda.time.DateTime dateTime18 = localDateTime16.toDateTime();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime16.minusWeeks(1969);
        org.joda.time.DateTime dateTime21 = localDateTime16.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.getDefault();
        java.util.Locale locale26 = null;
        java.lang.String str27 = dateTimeZone24.getName((long) (short) 10, locale26);
        long long29 = dateTimeZone23.getMillisKeepLocal(dateTimeZone24, (long) 874);
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.getDefault();
        long long32 = dateTimeZone24.getMillisKeepLocal(dateTimeZone30, (long) '4');
        int int34 = dateTimeZone24.getOffsetFromLocal((long) 83);
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime(0L, dateTimeZone24);
        int int37 = dateTimeZone24.getOffset(1644572877407L);
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime((java.lang.Object) dateTime21, dateTimeZone24);
        long long42 = dateTimeZone24.convertLocalToUTC(3577705580L, true, (long) 200);
        java.util.Locale locale46 = new java.util.Locale("fra", "");
        java.util.Set<java.lang.String> strSet47 = locale46.getUnicodeLocaleAttributes();
        java.lang.String str48 = locale46.getScript();
        java.lang.String str49 = locale46.getDisplayCountry();
        java.lang.String str50 = locale46.getDisplayCountry();
        java.lang.String str51 = dateTimeZone24.getName((long) (-68990), locale46);
        int int52 = dateTimeField7.getMaximumTextLength(locale46);
        long long54 = dateTimeField7.roundCeiling(3577714050L);
        org.joda.time.DurationField durationField55 = dateTimeField7.getLeapDurationField();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 6L + "'", long10 == 6L);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "1" + "'", str12, "1");
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(localDateTime16);
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "2022-02-16T06:54:06.515" + "'", str17, "2022-02-16T06:54:06.515");
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "+117:00" + "'", str27, "+117:00");
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 874L + "'", long29 == 874L);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 52L + "'", long32 == 52L);
// flaky:         org.junit.Assert.assertTrue("'" + int34 + "' != '" + 421200000 + "'", int34 == 421200000);
// flaky:         org.junit.Assert.assertTrue("'" + int37 + "' != '" + 421200000 + "'", int37 == 421200000);
// flaky:         org.junit.Assert.assertTrue("'" + long42 + "' != '" + 3156505580L + "'", long42 == 3156505580L);
        org.junit.Assert.assertEquals(locale46.toString(), "fra");
        org.junit.Assert.assertNotNull(strSet47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
// flaky:         org.junit.Assert.assertEquals("'" + str51 + "' != '" + "+117:00" + "'", str51, "+117:00");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2 + "'", int52 == 2);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 3628800000L + "'", long54 == 3628800000L);
        org.junit.Assert.assertNull(durationField55);
    }

    @Test
    public void test08067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08067");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property5 = localDateTime1.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime6 = property5.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField7 = property5.getField();
        int int8 = property5.getMaximumValueOverall();
        org.joda.time.LocalDateTime localDateTime10 = property5.addToCopy(0);
        java.util.Locale.Builder builder11 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder12 = builder11.clear();
        boolean boolean13 = property5.equals((java.lang.Object) builder11);
        org.joda.time.LocalDateTime localDateTime15 = property5.addWrapFieldToCopy((-3600000));
        org.joda.time.LocalDateTime localDateTime16 = property5.roundHalfFloorCopy();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 31 + "'", int8 == 31);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime16);
    }

    @Test
    public void test08068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08068");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.minusMillis((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.minusMillis((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.plusDays(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.weekyear();
        boolean boolean9 = localDateTime5.isSupported(dateTimeFieldType8);
        boolean boolean10 = localDateTime2.isEqual((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.LocalDateTime localDateTime12 = localDateTime2.minus(readablePeriod11);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone13);
        java.util.Locale locale16 = java.util.Locale.CHINESE;
        java.lang.String str17 = dateTimeZone13.getName((long) (short) 0, locale16);
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.minusMillis((int) (byte) 1);
        java.lang.String str21 = localDateTime20.toString();
        org.joda.time.DateTime dateTime22 = localDateTime20.toDateTime();
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.minusMillis((int) (byte) 1);
        java.lang.String str26 = localDateTime25.toString();
        org.joda.time.DateTime dateTime27 = localDateTime25.toDateTime();
        boolean boolean28 = dateTime22.isEqual((org.joda.time.ReadableInstant) dateTime27);
        int int29 = dateTimeZone13.getOffset((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str31 = dateTimeFieldType30.toString();
        java.lang.String str32 = dateTimeFieldType30.toString();
        boolean boolean33 = dateTime22.isSupported(dateTimeFieldType30);
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime();
        boolean boolean36 = localDateTime34.isBefore((org.joda.time.ReadablePartial) localDateTime35);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime35.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property39 = localDateTime35.dayOfMonth();
        boolean boolean40 = property39.isLeap();
        org.joda.time.LocalDateTime localDateTime41 = property39.roundCeilingCopy();
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime44 = localDateTime42.minusMillis((int) (byte) 1);
        java.lang.String str45 = localDateTime44.toString();
        org.joda.time.DateTime dateTime46 = localDateTime44.toDateTime();
        org.joda.time.LocalDateTime localDateTime47 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime49 = localDateTime47.minusMillis((int) (byte) 1);
        java.lang.String str50 = localDateTime49.toString();
        org.joda.time.DateTime dateTime51 = localDateTime49.toDateTime();
        boolean boolean52 = dateTime46.isEqual((org.joda.time.ReadableInstant) dateTime51);
        org.joda.time.Chronology chronology53 = dateTime51.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = org.joda.time.DateTimeFieldType.dayOfYear();
        int int55 = dateTime51.get(dateTimeFieldType54);
        int int56 = property39.compareTo((org.joda.time.ReadableInstant) dateTime51);
        org.joda.time.DateTimeField dateTimeField57 = property39.getField();
        org.joda.time.DateTimeField dateTimeField58 = property39.getField();
        boolean boolean59 = dateTime22.equals((java.lang.Object) dateTimeField58);
        org.joda.time.LocalDateTime localDateTime62 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime64 = localDateTime62.minusMillis((int) (byte) 1);
        java.lang.String str65 = localDateTime64.toString();
        org.joda.time.DateTime dateTime66 = localDateTime64.toDateTime();
        org.joda.time.LocalDateTime localDateTime67 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime69 = localDateTime67.minusMillis((int) (byte) 1);
        java.lang.String str70 = localDateTime69.toString();
        org.joda.time.DateTime dateTime71 = localDateTime69.toDateTime();
        boolean boolean72 = dateTime66.isEqual((org.joda.time.ReadableInstant) dateTime71);
        org.joda.time.Chronology chronology73 = dateTime71.getChronology();
        org.joda.time.LocalDateTime localDateTime74 = new org.joda.time.LocalDateTime((java.lang.Object) 35271574L, chronology73);
        org.joda.time.LocalDateTime localDateTime75 = new org.joda.time.LocalDateTime((long) 'u', chronology73);
        org.joda.time.LocalDateTime localDateTime76 = new org.joda.time.LocalDateTime(chronology73);
        java.util.Locale locale77 = java.util.Locale.KOREA;
        java.util.Locale.Builder builder78 = new java.util.Locale.Builder();
        java.util.Locale locale79 = builder78.build();
        java.lang.String str80 = locale79.getDisplayVariant();
        java.lang.String str81 = locale77.getDisplayName(locale79);
        java.lang.String str82 = locale79.toLanguageTag();
        java.lang.String str83 = dateTimeField58.getAsShortText((org.joda.time.ReadablePartial) localDateTime76, locale79);
        boolean boolean84 = localDateTime2.isBefore((org.joda.time.ReadablePartial) localDateTime76);
        int int85 = localDateTime2.getSecondOfMinute();
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "zh");
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+117:00" + "'", str17, "+117:00");
        org.junit.Assert.assertNotNull(localDateTime20);
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "2022-02-16T06:54:06.585" + "'", str21, "2022-02-16T06:54:06.585");
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(localDateTime25);
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "2022-02-16T06:54:06.585" + "'", str26, "2022-02-16T06:54:06.585");
        org.junit.Assert.assertNotNull(dateTime27);
// flaky:         org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int29 + "' != '" + 421200000 + "'", int29 == 421200000);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "weekyear" + "'", str31, "weekyear");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "weekyear" + "'", str32, "weekyear");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(localDateTime44);
// flaky:         org.junit.Assert.assertEquals("'" + str45 + "' != '" + "2022-02-16T06:54:06.585" + "'", str45, "2022-02-16T06:54:06.585");
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(localDateTime49);
// flaky:         org.junit.Assert.assertEquals("'" + str50 + "' != '" + "2022-02-16T06:54:06.585" + "'", str50, "2022-02-16T06:54:06.585");
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(dateTimeFieldType54);
// flaky:         org.junit.Assert.assertTrue("'" + int55 + "' != '" + 47 + "'", int55 == 47);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(localDateTime64);
// flaky:         org.junit.Assert.assertEquals("'" + str65 + "' != '" + "2022-02-16T06:54:06.585" + "'", str65, "2022-02-16T06:54:06.585");
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(localDateTime69);
// flaky:         org.junit.Assert.assertEquals("'" + str70 + "' != '" + "2022-02-16T06:54:06.585" + "'", str70, "2022-02-16T06:54:06.585");
        org.junit.Assert.assertNotNull(dateTime71);
// flaky:         org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(chronology73);
        org.junit.Assert.assertNotNull(locale77);
        org.junit.Assert.assertEquals(locale77.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale79);
        org.junit.Assert.assertEquals(locale79.toString(), "");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "" + "'", str80, "");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "Korean (South Korea)" + "'", str81, "Korean (South Korea)");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "und" + "'", str82, "und");
// flaky:         org.junit.Assert.assertEquals("'" + str83 + "' != '" + "16" + "'", str83, "16");
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int85 + "' != '" + 6 + "'", int85 == 6);
    }

    @Test
    public void test08069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08069");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        int int1 = localDateTime0.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime3 = localDateTime0.minusMonths((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.minusMonths((int) (byte) 0);
        int int6 = localDateTime3.getWeekyear();
        org.joda.time.LocalDateTime.Property property7 = localDateTime3.dayOfYear();
        org.joda.time.LocalDateTime.Property property8 = localDateTime3.minuteOfHour();
        org.joda.time.LocalDateTime.Property property9 = localDateTime3.era();
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.LocalDateTime localDateTime11 = localDateTime3.minus(readablePeriod10);
        org.joda.time.LocalDateTime.Property property12 = localDateTime11.millisOfSecond();
        org.joda.time.LocalDateTime.Property property13 = localDateTime11.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime();
        boolean boolean16 = localDateTime14.isBefore((org.joda.time.ReadablePartial) localDateTime15);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime15.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property19 = localDateTime15.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime20 = property19.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField21 = property19.getField();
        int int22 = dateTimeField21.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime();
        int int24 = localDateTime23.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime26 = localDateTime23.minusMonths((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.minusMonths((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.plusWeeks(22);
        java.util.Locale locale32 = java.util.Locale.JAPANESE;
        java.lang.String str33 = dateTimeField21.getAsShortText((org.joda.time.ReadablePartial) localDateTime30, 22, locale32);
        int int35 = dateTimeField21.getLeapAmount((long) (byte) 1);
        int int37 = dateTimeField21.getMaximumValue((long) 35293506);
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime();
        boolean boolean40 = localDateTime38.isBefore((org.joda.time.ReadablePartial) localDateTime39);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime39.plusSeconds((int) (byte) 100);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter43 = null;
        java.lang.String str44 = localDateTime39.toString(dateTimeFormatter43);
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        org.joda.time.LocalDateTime.Property property46 = localDateTime39.property(dateTimeFieldType45);
        org.joda.time.LocalDateTime localDateTime47 = property46.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime49 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime50 = new org.joda.time.LocalDateTime();
        boolean boolean51 = localDateTime49.isBefore((org.joda.time.ReadablePartial) localDateTime50);
        int[] intArray52 = localDateTime50.getValues();
        org.joda.time.LocalDateTime localDateTime54 = localDateTime50.plusYears((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime55 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime56 = new org.joda.time.LocalDateTime();
        boolean boolean57 = localDateTime55.isBefore((org.joda.time.ReadablePartial) localDateTime56);
        int[] intArray58 = localDateTime56.getValues();
        org.joda.time.LocalDateTime localDateTime59 = localDateTime50.withFields((org.joda.time.ReadablePartial) localDateTime56);
        org.joda.time.LocalDateTime localDateTime61 = localDateTime59.minusMillis((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime63 = localDateTime61.minusSeconds((int) '#');
        org.joda.time.LocalDateTime localDateTime65 = localDateTime63.withWeekOfWeekyear(50);
        org.joda.time.LocalDateTime localDateTime67 = localDateTime63.withMinuteOfHour((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime69 = localDateTime63.minusMonths((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime71 = localDateTime69.plusYears(2022);
        int[] intArray72 = localDateTime69.getValues();
        int[] intArray74 = dateTimeField21.addWrapPartial((org.joda.time.ReadablePartial) localDateTime47, 31, intArray72, 0);
        int int75 = localDateTime47.getCenturyOfEra();
        org.joda.time.LocalDateTime localDateTime76 = localDateTime11.withFields((org.joda.time.ReadablePartial) localDateTime47);
        int int77 = localDateTime11.getDayOfWeek();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 22 + "'", int1 == 22);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 31 + "'", int22 == 31);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 22 + "'", int24 == 22);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "22" + "'", str33, "22");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 31 + "'", int37 == 31);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(localDateTime42);
// flaky:         org.junit.Assert.assertEquals("'" + str44 + "' != '" + "2022-02-16T06:54:06.635" + "'", str44, "2022-02-16T06:54:06.635");
        org.junit.Assert.assertNotNull(dateTimeFieldType45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(intArray52);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[2022, 2, 16, 24846635]");
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(intArray58);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[2022, 2, 16, 24846635]");
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertNotNull(localDateTime69);
        org.junit.Assert.assertNotNull(localDateTime71);
        org.junit.Assert.assertNotNull(intArray72);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[2021, 4, 16, 24811535]");
        org.junit.Assert.assertNotNull(intArray74);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[2021, 4, 16, 24811535]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 20 + "'", int75 == 20);
        org.junit.Assert.assertNotNull(localDateTime76);
// flaky:         org.junit.Assert.assertTrue("'" + int77 + "' != '" + 3 + "'", int77 == 3);
    }

    @Test
    public void test08070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08070");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property5 = localDateTime1.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime6 = property5.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField7 = property5.getField();
        int int8 = dateTimeField7.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime();
        int int10 = localDateTime9.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime9.minusMonths((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.minusMonths((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.plusWeeks(22);
        java.util.Locale locale18 = java.util.Locale.JAPANESE;
        java.lang.String str19 = dateTimeField7.getAsShortText((org.joda.time.ReadablePartial) localDateTime16, 22, locale18);
        long long22 = dateTimeField7.add((long) 2022, 47);
        java.util.Locale locale24 = java.util.Locale.getDefault();
        java.lang.String str25 = dateTimeField7.getAsText((long) 2022, locale24);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime(chronology26);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.plusYears(2);
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime32 = localDateTime30.minusMillis((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.plusDays(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDateTime localDateTime37 = localDateTime32.withField(dateTimeFieldType35, 0);
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime();
        boolean boolean40 = localDateTime38.isBefore((org.joda.time.ReadablePartial) localDateTime39);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime39.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime44 = localDateTime39.plusMinutes((int) '#');
        org.joda.time.LocalDateTime localDateTime46 = localDateTime39.minusMinutes((int) (short) 1);
        boolean boolean47 = localDateTime37.isAfter((org.joda.time.ReadablePartial) localDateTime46);
        org.joda.time.LocalDateTime.Property property48 = localDateTime37.secondOfMinute();
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = property48.getFieldType();
        org.joda.time.LocalDateTime localDateTime50 = property48.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime51 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime52 = new org.joda.time.LocalDateTime();
        boolean boolean53 = localDateTime51.isBefore((org.joda.time.ReadablePartial) localDateTime52);
        org.joda.time.LocalDateTime localDateTime55 = localDateTime52.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime57 = localDateTime52.plusMinutes((int) '#');
        org.joda.time.LocalDateTime localDateTime59 = localDateTime52.minusMinutes((int) (short) 1);
        org.joda.time.ReadableDuration readableDuration60 = null;
        org.joda.time.LocalDateTime localDateTime62 = localDateTime52.withDurationAdded(readableDuration60, (int) (short) 100);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter63 = null;
        java.lang.String str64 = localDateTime52.toString(dateTimeFormatter63);
        boolean boolean65 = localDateTime50.isAfter((org.joda.time.ReadablePartial) localDateTime52);
        org.joda.time.LocalDateTime.Property property66 = localDateTime50.hourOfDay();
        org.joda.time.LocalDateTime localDateTime67 = localDateTime29.withFields((org.joda.time.ReadablePartial) localDateTime50);
        int int68 = dateTimeField7.getMinimumValue((org.joda.time.ReadablePartial) localDateTime29);
        int int70 = dateTimeField7.get(1644573047332L);
        long long72 = dateTimeField7.roundFloor((long) 84);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 31 + "'", int8 == 31);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 22 + "'", int10 == 22);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "22" + "'", str19, "22");
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 4060802022L + "'", long22 == 4060802022L);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "1" + "'", str25, "1");
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(dateTimeFieldType49);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(localDateTime62);
// flaky:         org.junit.Assert.assertEquals("'" + str64 + "' != '" + "2022-02-16T06:54:06.675" + "'", str64, "2022-02-16T06:54:06.675");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 11 + "'", int70 == 11);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 0L + "'", long72 == 0L);
    }

    @Test
    public void test08071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08071");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.minusMillis((int) (byte) 1);
        java.lang.String str3 = localDateTime2.toString();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.minusMinutes((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.withEra(0);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.minusHours(641);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.plusHours(1430);
        org.junit.Assert.assertNotNull(localDateTime2);
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "2022-02-16T06:54:06.700" + "'", str3, "2022-02-16T06:54:06.700");
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
    }

    @Test
    public void test08072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08072");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property5 = localDateTime1.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime6 = property5.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField7 = property5.getField();
        long long9 = dateTimeField7.remainder((-1L));
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = dateTimeField7.getType();
        long long13 = dateTimeField7.add((long) 'x', 35275799L);
        org.joda.time.DurationField durationField14 = dateTimeField7.getDurationField();
        int int15 = dateTimeField7.getMaximumValue();
        long long18 = dateTimeField7.add((long) 30, 35404835);
        org.joda.time.DurationField durationField19 = dateTimeField7.getRangeDurationField();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 86399999L + "'", long9 == 86399999L);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 3047829033600120L + "'", long13 == 3047829033600120L);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 31 + "'", int15 == 31);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 3058977744000030L + "'", long18 == 3058977744000030L);
        org.junit.Assert.assertNotNull(durationField19);
    }

    @Test
    public void test08073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08073");
        int int1 = org.joda.time.field.FieldUtils.safeToInt(86400040L);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 86400040 + "'", int1 == 86400040);
    }

    @Test
    public void test08074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08074");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        int int1 = localDateTime0.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime3 = localDateTime0.minusMonths((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.minusMonths((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.plusWeeks(22);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.millisOfSecond();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime10 = localDateTime7.withHourOfDay(639);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 639 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 22 + "'", int1 == 22);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
    }

    @Test
    public void test08075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08075");
        long long2 = org.joda.time.field.FieldUtils.safeSubtract((-421199990L), (long) 7);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + (-421199997L) + "'", long2 == (-421199997L));
    }

    @Test
    public void test08076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08076");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.millisOfSecond();
        java.lang.String str1 = dateTimeFieldType0.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime();
        int int4 = localDateTime3.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.minusMonths((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.minusMonths((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.plusWeeks(22);
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str12 = dateTimeFieldType11.toString();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime10.withField(dateTimeFieldType11, (int) 'x');
        org.joda.time.DurationFieldType durationFieldType15 = dateTimeFieldType11.getRangeDurationType();
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.minusMillis((int) (byte) 1);
        java.lang.String str19 = localDateTime18.toString();
        org.joda.time.DateTime dateTime20 = localDateTime18.toDateTime();
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.minusMillis((int) (byte) 1);
        java.lang.String str24 = localDateTime23.toString();
        org.joda.time.DateTime dateTime25 = localDateTime23.toDateTime();
        boolean boolean26 = dateTime20.isEqual((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.minusMillis((int) (byte) 1);
        java.lang.String str30 = localDateTime29.toString();
        org.joda.time.DateTime dateTime31 = localDateTime29.toDateTime();
        boolean boolean32 = dateTime20.isEqual((org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.dayOfMonth();
        int int34 = dateTime20.get(dateTimeFieldType33);
        org.joda.time.DurationFieldType durationFieldType35 = dateTimeFieldType33.getRangeDurationType();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone36);
        java.util.Locale locale39 = java.util.Locale.CHINESE;
        java.lang.String str40 = dateTimeZone36.getName((long) (short) 0, locale39);
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime43 = localDateTime41.minusMillis((int) (byte) 1);
        java.lang.String str44 = localDateTime43.toString();
        org.joda.time.DateTime dateTime45 = localDateTime43.toDateTime();
        org.joda.time.LocalDateTime localDateTime46 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime48 = localDateTime46.minusMillis((int) (byte) 1);
        java.lang.String str49 = localDateTime48.toString();
        org.joda.time.DateTime dateTime50 = localDateTime48.toDateTime();
        boolean boolean51 = dateTime45.isEqual((org.joda.time.ReadableInstant) dateTime50);
        int int52 = dateTimeZone36.getOffset((org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.DateTimeFieldType dateTimeFieldType53 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str54 = dateTimeFieldType53.toString();
        java.lang.String str55 = dateTimeFieldType53.toString();
        boolean boolean56 = dateTime45.isSupported(dateTimeFieldType53);
        org.joda.time.Chronology chronology57 = dateTime45.getChronology();
        boolean boolean58 = dateTimeFieldType33.isSupported(chronology57);
        org.joda.time.DateTimeField dateTimeField59 = dateTimeFieldType11.getField(chronology57);
        org.joda.time.DateTimeField dateTimeField60 = dateTimeFieldType2.getField(chronology57);
        org.joda.time.LocalDateTime localDateTime61 = org.joda.time.LocalDateTime.now(chronology57);
        boolean boolean62 = dateTimeFieldType0.isSupported(chronology57);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "millisOfSecond" + "'", str1, "millisOfSecond");
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 22 + "'", int4 == 22);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "weekyear" + "'", str12, "weekyear");
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNull(durationFieldType15);
        org.junit.Assert.assertNotNull(localDateTime18);
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "2022-02-16T06:54:06.883" + "'", str19, "2022-02-16T06:54:06.883");
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(localDateTime23);
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "2022-02-16T06:54:06.883" + "'", str24, "2022-02-16T06:54:06.883");
        org.junit.Assert.assertNotNull(dateTime25);
// flaky:         org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(localDateTime29);
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "2022-02-16T06:54:06.883" + "'", str30, "2022-02-16T06:54:06.883");
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
// flaky:         org.junit.Assert.assertTrue("'" + int34 + "' != '" + 16 + "'", int34 == 16);
        org.junit.Assert.assertNotNull(durationFieldType35);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "zh");
// flaky:         org.junit.Assert.assertEquals("'" + str40 + "' != '" + "+117:00" + "'", str40, "+117:00");
        org.junit.Assert.assertNotNull(localDateTime43);
// flaky:         org.junit.Assert.assertEquals("'" + str44 + "' != '" + "2022-02-16T06:54:06.883" + "'", str44, "2022-02-16T06:54:06.883");
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(localDateTime48);
// flaky:         org.junit.Assert.assertEquals("'" + str49 + "' != '" + "2022-02-16T06:54:06.883" + "'", str49, "2022-02-16T06:54:06.883");
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int52 + "' != '" + 421200000 + "'", int52 == 421200000);
        org.junit.Assert.assertNotNull(dateTimeFieldType53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "weekyear" + "'", str54, "weekyear");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "weekyear" + "'", str55, "weekyear");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
    }

    @Test
    public void test08077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08077");
        java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("weekyear");
        java.util.stream.Stream<java.util.Locale.LanguageRange> languageRangeStream2 = languageRangeList1.parallelStream();
        java.util.Locale locale5 = new java.util.Locale("fra", "");
        java.util.Set<java.lang.String> strSet6 = locale5.getUnicodeLocaleAttributes();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime();
        boolean boolean9 = localDateTime7.isBefore((org.joda.time.ReadablePartial) localDateTime8);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime8.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property12 = localDateTime8.dayOfMonth();
        org.joda.time.DurationField durationField13 = property12.getRangeDurationField();
        boolean boolean14 = strSet6.contains((java.lang.Object) durationField13);
        java.util.Iterator<java.lang.String> strItor15 = strSet6.iterator();
        java.lang.String str16 = java.util.Locale.lookupTag(languageRangeList1, (java.util.Collection<java.lang.String>) strSet6);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean18 = strSet6.add("2022-02-11T09:51:31.882");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(languageRangeList1);
        org.junit.Assert.assertNotNull(languageRangeStream2);
        org.junit.Assert.assertEquals(locale5.toString(), "fra");
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(strItor15);
        org.junit.Assert.assertNull(str16);
    }

    @Test
    public void test08078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08078");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property5 = localDateTime1.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime6 = property5.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField7 = property5.getField();
        java.util.Locale locale8 = java.util.Locale.JAPAN;
        java.util.Locale locale9 = java.util.Locale.FRENCH;
        java.lang.String str10 = locale8.getDisplayCountry(locale9);
        int int11 = property5.getMaximumTextLength(locale9);
        org.joda.time.LocalDateTime localDateTime12 = property5.roundHalfFloorCopy();
        java.util.Locale.LanguageRange[] languageRangeArray13 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList14 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList14, languageRangeArray13);
        java.util.Locale[] localeArray16 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList17 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList17, localeArray16);
        java.util.Locale locale19 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList14, (java.util.Collection<java.util.Locale>) localeList17);
        java.util.Locale.LanguageRange[] languageRangeArray20 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList21 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList21, languageRangeArray20);
        java.util.Locale[] localeArray23 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList24 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList24, localeArray23);
        java.util.Locale locale26 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList21, (java.util.Collection<java.util.Locale>) localeList24);
        java.util.Locale.FilteringMode filteringMode27 = null;
        java.util.List<java.util.Locale> localeList28 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList14, (java.util.Collection<java.util.Locale>) localeList24, filteringMode27);
        java.util.Locale locale29 = java.util.Locale.FRENCH;
        java.util.Set<java.lang.String> strSet30 = locale29.getUnicodeLocaleAttributes();
        java.lang.Object[] objArray31 = strSet30.toArray();
        java.util.Locale.FilteringMode filteringMode32 = java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList33 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList14, (java.util.Collection<java.lang.String>) strSet30, filteringMode32);
        java.util.Locale locale34 = java.util.Locale.ITALIAN;
        java.lang.String str35 = locale34.getDisplayCountry();
        boolean boolean36 = strSet30.equals((java.lang.Object) locale34);
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime();
        boolean boolean39 = localDateTime37.isBefore((org.joda.time.ReadablePartial) localDateTime38);
        org.joda.time.LocalDateTime.Property property40 = localDateTime37.dayOfMonth();
        org.joda.time.LocalDateTime.Property property41 = localDateTime37.weekyear();
        boolean boolean43 = property41.equals((java.lang.Object) 52L);
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = property41.getFieldType();
        java.util.Locale locale48 = new java.util.Locale("fra", "");
        java.util.Set<java.lang.String> strSet49 = locale48.getUnicodeLocaleAttributes();
        java.lang.String str50 = locale48.getScript();
        java.util.Set<java.lang.Character> charSet51 = locale48.getExtensionKeys();
        boolean boolean52 = locale48.hasExtensions();
        org.joda.time.LocalDateTime localDateTime53 = property41.setCopy("2022", locale48);
        java.lang.String str54 = locale34.getDisplayScript(locale48);
        java.lang.String str55 = property5.getAsText(locale34);
        org.joda.time.DurationField durationField56 = property5.getRangeDurationField();
// flaky:         org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Japon" + "'", str10, "Japon");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(languageRangeArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(localeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(locale19);
        org.junit.Assert.assertNotNull(languageRangeArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(localeArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(locale26);
        org.junit.Assert.assertNotNull(localeList28);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet30);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[]");
        org.junit.Assert.assertTrue("'" + filteringMode32 + "' != '" + java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES + "'", filteringMode32.equals(java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList33);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "it");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType44);
        org.junit.Assert.assertEquals(locale48.toString(), "fra");
        org.junit.Assert.assertNotNull(strSet49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(charSet51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
// flaky:         org.junit.Assert.assertEquals("'" + str55 + "' != '" + "16" + "'", str55, "16");
        org.junit.Assert.assertNotNull(durationField56);
    }

    @Test
    public void test08079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08079");
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("2022-03-11T09:52:04.585Z");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=2022-03-11t09:52:04.585z");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08080");
        // The following exception was thrown during execution in test generation
        try {
            int int4 = org.joda.time.field.FieldUtils.getWrappedValue(267, 0, 35366741, 19029);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: MIN > MAX");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08081");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.util.TimeZone.setDefault(timeZone0);
        java.util.Locale locale3 = new java.util.Locale("2022-02-11T09:48:10.170");
        java.lang.String str4 = locale3.getScript();
        java.util.Locale locale5 = null;
        java.lang.String str6 = locale3.getDisplayVariant(locale5);
        java.lang.String str7 = timeZone0.getDisplayName(locale3);
        org.junit.Assert.assertNotNull(timeZone0);
// flaky:         org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "GMT+;7:00");
        org.junit.Assert.assertEquals(locale3.toString(), "2022-02-11t09:48:10.170");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "GMT+;7:00" + "'", str7, "GMT+;7:00");
    }

    @Test
    public void test08082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08082");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds((int) (byte) 100);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray5 = localDateTime4.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.plusSeconds((int) (short) 1);
        int int8 = localDateTime4.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime4.withWeekOfWeekyear((int) '4');
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.yearOfEra();
        org.joda.time.DurationField durationField12 = property11.getRangeDurationField();
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime();
        boolean boolean15 = localDateTime13.isBefore((org.joda.time.ReadablePartial) localDateTime14);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime14.plusSeconds((int) (byte) 100);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = null;
        java.lang.String str19 = localDateTime14.toString(dateTimeFormatter18);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        org.joda.time.LocalDateTime.Property property21 = localDateTime14.property(dateTimeFieldType20);
        org.joda.time.LocalDateTime localDateTime22 = property21.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime23 = property21.withMinimumValue();
        org.joda.time.LocalDateTime localDateTime24 = property21.withMinimumValue();
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.plusHours(74);
        int int27 = property11.compareTo((org.joda.time.ReadablePartial) localDateTime24);
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.minusMillis((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime30.plusDays(0);
        int int33 = localDateTime32.size();
        boolean boolean34 = localDateTime24.isAfter((org.joda.time.ReadablePartial) localDateTime32);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime24.minusWeeks(6407549);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 22 + "'", int8 == 22);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNull(durationField12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(localDateTime17);
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "2022-02-16T06:54:07.069" + "'", str19, "2022-02-16T06:54:07.069");
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 4 + "'", int33 == 4);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(localDateTime36);
    }

    @Test
    public void test08083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08083");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        java.util.Locale locale3 = null;
        java.lang.String str4 = dateTimeZone1.getName((long) (short) 10, locale3);
        long long6 = dateTimeZone0.getMillisKeepLocal(dateTimeZone1, (long) 874);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        long long9 = dateTimeZone1.getMillisKeepLocal(dateTimeZone7, (long) '4');
        boolean boolean11 = dateTimeZone1.isStandardOffset(1644572873292L);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime();
        boolean boolean14 = localDateTime12.isBefore((org.joda.time.ReadablePartial) localDateTime13);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime13.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property17 = localDateTime13.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime18 = property17.withMinimumValue();
        java.util.Locale locale19 = java.util.Locale.UK;
        java.lang.String str20 = property17.getAsShortText(locale19);
        org.joda.time.LocalDateTime localDateTime22 = property17.addToCopy(34);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.plusSeconds(25);
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.plus(readablePeriod25);
        boolean boolean27 = dateTimeZone1.isLocalDateTimeGap(localDateTime24);
        long long29 = dateTimeZone1.convertUTCToLocal(207L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+117:00" + "'", str4, "+117:00");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 874L + "'", long6 == 874L);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 52L + "'", long9 == 52L);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "en_GB");
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "16" + "'", str20, "16");
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long29 + "' != '" + 421200207L + "'", long29 == 421200207L);
    }

    @Test
    public void test08084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08084");
        int int2 = org.joda.time.field.FieldUtils.safeMultiply(35622853, 0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
    }

    @Test
    public void test08085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08085");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) -1);
        long long4 = dateTimeZone1.convertLocalToUTC(1644572877787L, true);
        java.util.Locale locale9 = new java.util.Locale("2022-02-11T09:47:52.924", "2022-02-11T09:47:51.404", "");
        java.lang.String str10 = dateTimeZone1.getShortName((long) 116, locale9);
        long long13 = dateTimeZone1.adjustOffset((-1644537684333L), true);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1644576477787L + "'", long4 == 1644576477787L);
        org.junit.Assert.assertEquals(locale9.toString(), "2022-02-11t09:47:52.924_2022-02-11T09:47:51.404");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "-01:00" + "'", str10, "-01:00");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1644537684333L) + "'", long13 == (-1644537684333L));
    }

    @Test
    public void test08086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08086");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.minusMillis((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.plusDays(0);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.plusMillis(22);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        int int8 = localDateTime6.get(dateTimeFieldType7);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime6.withSecondOfMinute(50);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusDays(0);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.minusSeconds(19029);
        int int15 = localDateTime14.getYearOfEra();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime17 = localDateTime14.withDayOfMonth(707);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 707 for dayOfMonth must be in the range [1,28]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 7 + "'", int8 == 7);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2022 + "'", int15 == 2022);
    }

    @Test
    public void test08087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08087");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.minusMillis((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.plusDays(0);
        int int5 = localDateTime4.getDayOfYear();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.plusWeeks(709);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.plusYears((int) 'x');
        org.joda.time.LocalDateTime localDateTime11 = localDateTime7.withMillisOfDay(35314963);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 47 + "'", int5 == 47);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
    }

    @Test
    public void test08088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08088");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds((int) (byte) 100);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = null;
        java.lang.String str6 = localDateTime1.toString(dateTimeFormatter5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        org.joda.time.LocalDateTime.Property property8 = localDateTime1.property(dateTimeFieldType7);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime1.minusMinutes((int) (short) 1);
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.millisOfDay();
        org.joda.time.LocalDateTime.Property property12 = localDateTime10.weekyear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime14 = localDateTime10.withDayOfWeek((-1208558));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1208558 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "2022-02-16T06:54:07.170" + "'", str6, "2022-02-16T06:54:07.170");
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(property12);
    }

    @Test
    public void test08089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08089");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 894, chronology1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusSeconds(29925);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.minuteOfHour();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
    }

    @Test
    public void test08090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08090");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.field.FieldUtils.verifyValueBounds("2022-02-11T09:48:13.388", 1881548, 16, 936);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1881548 for 2022-02-11T09:48:13.388 must be in the range [16,936]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08091");
        java.util.Locale locale0 = java.util.Locale.GERMANY;
        java.lang.String str1 = locale0.getISO3Language();
        java.lang.String str2 = locale0.getDisplayCountry();
        java.util.Locale locale5 = new java.util.Locale("2022-02-11T09:48:28.422", "2022-02-11T09:48:54.708");
        java.lang.String str6 = locale0.getDisplayScript(locale5);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "deu" + "'", str1, "deu");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Germany" + "'", str2, "Germany");
        org.junit.Assert.assertEquals(locale5.toString(), "2022-02-11t09:48:28.422_2022-02-11T09:48:54.708");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
    }

    @Test
    public void test08092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08092");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property5 = localDateTime1.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime6 = property5.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField7 = property5.getField();
        long long9 = dateTimeField7.remainder((-1L));
        int int10 = dateTimeField7.getMaximumValue();
        org.joda.time.DurationField durationField11 = dateTimeField7.getLeapDurationField();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 86399999L + "'", long9 == 86399999L);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 31 + "'", int10 == 31);
        org.junit.Assert.assertNull(durationField11);
    }

    @Test
    public void test08093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08093");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.dayOfMonth();
        org.joda.time.LocalDateTime.Property property4 = localDateTime0.weekyear();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime0.withYear(12);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.plus(readablePeriod7);
        int[] intArray9 = localDateTime6.getValues();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime6.minusSeconds((-2719));
        int int12 = localDateTime11.getWeekOfWeekyear();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(intArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[12, 2, 16, 24847240]");
        org.junit.Assert.assertNotNull(localDateTime11);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 7 + "'", int12 == 7);
    }

    @Test
    public void test08094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08094");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.minusMillis((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.plusDays(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.withField(dateTimeFieldType5, 0);
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime();
        boolean boolean10 = localDateTime8.isBefore((org.joda.time.ReadablePartial) localDateTime9);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime9.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime9.plusMinutes((int) '#');
        org.joda.time.LocalDateTime localDateTime16 = localDateTime9.minusMinutes((int) (short) 1);
        boolean boolean17 = localDateTime7.isAfter((org.joda.time.ReadablePartial) localDateTime16);
        org.joda.time.LocalDateTime.Property property18 = localDateTime7.year();
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime();
        int int20 = localDateTime19.getYearOfCentury();
        int int21 = localDateTime19.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime19.minusMillis((int) (byte) -1);
        org.joda.time.DateTime dateTime24 = localDateTime19.toDateTime();
        org.joda.time.LocalDateTime localDateTime26 = localDateTime19.withMonthOfYear((int) (short) 10);
        boolean boolean27 = localDateTime7.isAfter((org.joda.time.ReadablePartial) localDateTime19);
        org.joda.time.LocalDateTime.Property property28 = localDateTime7.dayOfYear();
        int int29 = localDateTime7.getYearOfCentury();
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 22 + "'", int20 == 22);
// flaky:         org.junit.Assert.assertTrue("'" + int21 + "' != '" + 7 + "'", int21 == 7);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 22 + "'", int29 == 22);
    }

    @Test
    public void test08095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08095");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis((int) 'x');
        java.lang.String str4 = dateTimeZone2.getNameKey(58L);
        boolean boolean5 = dateTimeZone2.isFixed();
        long long7 = dateTimeZone2.nextTransition(1814400058L);
        long long9 = dateTimeZone2.nextTransition(3577707550L);
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((java.lang.Object) "2022-02-11T09:50:35.447", dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1814400058L + "'", long7 == 1814400058L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 3577707550L + "'", long9 == 3577707550L);
    }

    @Test
    public void test08096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08096");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("2022-02-11T09:48:18.458");
        java.util.Locale.Category category2 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale3 = java.util.Locale.getDefault(category2);
        java.util.Locale locale4 = java.util.Locale.getDefault(category2);
        java.util.Locale.Builder builder5 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder6 = builder5.clearExtensions();
        java.util.Locale.Builder builder8 = builder6.addUnicodeLocaleAttribute("Japon");
        java.util.Locale.Builder builder9 = builder8.clearExtensions();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusMillis((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.plusDays(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime12.withField(dateTimeFieldType15, 0);
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime();
        boolean boolean20 = localDateTime18.isBefore((org.joda.time.ReadablePartial) localDateTime19);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime19.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime19.plusMinutes((int) '#');
        org.joda.time.LocalDateTime localDateTime26 = localDateTime19.minusMinutes((int) (short) 1);
        boolean boolean27 = localDateTime17.isAfter((org.joda.time.ReadablePartial) localDateTime26);
        org.joda.time.LocalDateTime.Property property28 = localDateTime17.secondOfMinute();
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = property28.getFieldType();
        int int30 = property28.getMaximumValue();
        org.joda.time.DateTimeField dateTimeField31 = property28.getField();
        java.util.Locale locale32 = java.util.Locale.KOREAN;
        java.lang.String str33 = locale32.getCountry();
        java.lang.String str34 = locale32.getDisplayName();
        java.lang.String str35 = locale32.getDisplayCountry();
        int int36 = dateTimeField31.getMaximumShortTextLength(locale32);
        boolean boolean37 = locale32.hasExtensions();
        java.util.Locale.Builder builder38 = builder8.setLocale(locale32);
        java.util.Locale.setDefault(category2, locale32);
        java.lang.String str40 = locale1.getDisplayLanguage(locale32);
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime43 = localDateTime41.minusMillis((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime43.plusDays(0);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime45.plusMillis((int) '#');
        org.joda.time.LocalDateTime.Property property48 = localDateTime47.yearOfEra();
        org.joda.time.LocalDateTime localDateTime49 = property48.roundHalfFloorCopy();
        java.util.Locale locale50 = java.util.Locale.CHINESE;
        java.lang.String str51 = locale50.toLanguageTag();
        java.lang.String str52 = locale50.getDisplayLanguage();
        int int53 = property48.getMaximumTextLength(locale50);
        java.lang.String str54 = locale1.getDisplayName(locale50);
        org.joda.time.tz.NameProvider nameProvider55 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.LocalDateTime localDateTime56 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime57 = new org.joda.time.LocalDateTime();
        boolean boolean58 = localDateTime56.isBefore((org.joda.time.ReadablePartial) localDateTime57);
        org.joda.time.LocalDateTime localDateTime60 = localDateTime57.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property61 = localDateTime57.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime62 = property61.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField63 = property61.getField();
        int int64 = dateTimeField63.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime65 = new org.joda.time.LocalDateTime();
        int int66 = localDateTime65.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime68 = localDateTime65.minusMonths((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime70 = localDateTime68.minusMonths((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime72 = localDateTime70.plusWeeks(22);
        java.util.Locale locale74 = java.util.Locale.JAPANESE;
        java.lang.String str75 = dateTimeField63.getAsShortText((org.joda.time.ReadablePartial) localDateTime72, 22, locale74);
        java.lang.String str78 = nameProvider55.getName(locale74, "11", "Etc/UTC");
        org.joda.time.DateTimeZone.setNameProvider(nameProvider55);
        java.util.Locale locale80 = java.util.Locale.FRENCH;
        java.util.Set<java.lang.String> strSet81 = locale80.getUnicodeLocaleAttributes();
        java.lang.String str82 = locale80.getVariant();
        java.lang.String str85 = nameProvider55.getShortName(locale80, "2022-02-11T09:48:02.913", "2022-02-11T09:48:00.361");
        java.util.Locale locale86 = java.util.Locale.ROOT;
        java.lang.String str87 = locale86.toLanguageTag();
        java.lang.String str88 = locale86.getISO3Language();
        java.lang.String str91 = nameProvider55.getName(locale86, "2022-02-11T09:48:01.242", "3600000");
        java.util.Locale locale93 = new java.util.Locale("2022-02-11T09:48:25.304");
        java.lang.String str94 = locale86.getDisplayScript(locale93);
        java.lang.String str95 = locale1.getDisplayScript(locale93);
        java.util.Locale locale96 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str97 = locale93.getDisplayLanguage(locale96);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertTrue("'" + category2 + "' != '" + java.util.Locale.Category.FORMAT + "'", category2.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale3);
// flaky:         org.junit.Assert.assertEquals(locale3.toString(), "fr");
        org.junit.Assert.assertNotNull(locale4);
// flaky:         org.junit.Assert.assertEquals(locale4.toString(), "fr");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 59 + "'", int30 == 59);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
// flaky:         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "cor\351en" + "'", str34, "cor\351en");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2 + "'", int36 == 2);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "zh" + "'", str51, "zh");
// flaky:         org.junit.Assert.assertEquals("'" + str52 + "' != '" + "chinois" + "'", str52, "chinois");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 9 + "'", int53 == 9);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNotNull(nameProvider55);
// flaky:         org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 31 + "'", int64 == 31);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 22 + "'", int66 == 22);
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertNotNull(localDateTime72);
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "22" + "'", str75, "22");
        org.junit.Assert.assertNull(str78);
        org.junit.Assert.assertNotNull(locale80);
        org.junit.Assert.assertEquals(locale80.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet81);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "" + "'", str82, "");
        org.junit.Assert.assertNull(str85);
        org.junit.Assert.assertNotNull(locale86);
        org.junit.Assert.assertEquals(locale86.toString(), "");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "und" + "'", str87, "und");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "" + "'", str88, "");
        org.junit.Assert.assertNull(str91);
        org.junit.Assert.assertEquals(locale93.toString(), "2022-02-11t09:48:25.304");
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "" + "'", str94, "");
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "" + "'", str95, "");
    }

    @Test
    public void test08097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08097");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds((int) (byte) 100);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = null;
        java.lang.String str6 = localDateTime1.toString(dateTimeFormatter5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        org.joda.time.LocalDateTime.Property property8 = localDateTime1.property(dateTimeFieldType7);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray9 = localDateTime1.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime1.minusWeeks((-112));
        org.joda.time.LocalDateTime localDateTime13 = localDateTime1.plusSeconds(74);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "2022-02-16T06:54:07.363" + "'", str6, "2022-02-16T06:54:07.363");
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
    }

    @Test
    public void test08098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08098");
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) 83);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusSeconds(83);
        int int5 = localDateTime4.getYear();
        org.joda.time.LocalDateTime.Property property6 = localDateTime4.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime4.plusMillis(49);
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime();
        int int11 = localDateTime10.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime10.minusMonths((int) (short) 0);
        org.joda.time.Chronology chronology14 = localDateTime13.getChronology();
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now(chronology14);
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime(35282442L, chronology14);
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime4, chronology14);
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((long) 57685, chronology14);
        org.junit.Assert.assertNotNull(localDateTime4);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1970 + "'", int5 == 1970);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 22 + "'", int11 == 22);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(localDateTime15);
    }

    @Test
    public void test08099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08099");
        org.joda.time.tz.Provider provider0 = org.joda.time.DateTimeZone.getProvider();
        org.joda.time.DateTimeZone.setProvider(provider0);
        org.joda.time.DateTimeZone dateTimeZone3 = provider0.getZone("11");
        org.joda.time.DateTimeZone.setProvider(provider0);
        org.joda.time.DateTimeZone.setProvider(provider0);
        java.util.Set<java.lang.String> strSet6 = provider0.getAvailableIDs();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.minusMillis((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.plusDays(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime9.withField(dateTimeFieldType12, 0);
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime();
        boolean boolean17 = localDateTime15.isBefore((org.joda.time.ReadablePartial) localDateTime16);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime16.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime16.plusMinutes((int) '#');
        org.joda.time.LocalDateTime localDateTime23 = localDateTime16.minusMinutes((int) (short) 1);
        boolean boolean24 = localDateTime14.isAfter((org.joda.time.ReadablePartial) localDateTime23);
        org.joda.time.LocalDateTime.Property property25 = localDateTime14.secondOfMinute();
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = property25.getFieldType();
        org.joda.time.LocalDateTime localDateTime27 = property25.roundHalfFloorCopy();
        org.joda.time.LocalDateTime.Property property28 = localDateTime27.centuryOfEra();
        int int29 = property28.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime30 = property28.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime32 = property28.addToCopy(50);
        int int33 = property28.get();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean34 = strSet6.remove((java.lang.Object) int33);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: java.lang.String cannot be cast to java.lang.Integer");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(provider0);
        org.junit.Assert.assertNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 20 + "'", int33 == 20);
    }

    @Test
    public void test08100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08100");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(858, 4770);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minutes out of range: 4770");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08101");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.minusMillis((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.plusDays(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.withField(dateTimeFieldType5, 0);
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime();
        boolean boolean10 = localDateTime8.isBefore((org.joda.time.ReadablePartial) localDateTime9);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime9.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime9.plusMinutes((int) '#');
        org.joda.time.LocalDateTime localDateTime16 = localDateTime9.minusMinutes((int) (short) 1);
        boolean boolean17 = localDateTime7.isAfter((org.joda.time.ReadablePartial) localDateTime16);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime16.plusYears((int) 'x');
        org.joda.time.LocalDateTime localDateTime21 = localDateTime16.minusDays(207);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.plusYears(924);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime21.withYear(2000);
        int int26 = localDateTime25.getYearOfEra();
        int int27 = localDateTime25.getEra();
        org.joda.time.LocalDateTime.Property property28 = localDateTime25.year();
        java.lang.String str29 = property28.getAsShortText();
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2000 + "'", int26 == 2000);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "2000" + "'", str29, "2000");
    }

    @Test
    public void test08102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08102");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        int int1 = localDateTime0.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime3 = localDateTime0.minusMonths((int) (short) 0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.LocalDateTime localDateTime5 = org.joda.time.LocalDateTime.now(chronology4);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minus(readablePeriod6);
        org.joda.time.LocalDateTime.Property property8 = localDateTime5.hourOfDay();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((long) 35282145);
        int int11 = property8.compareTo((org.joda.time.ReadablePartial) localDateTime10);
        org.joda.time.LocalDateTime localDateTime13 = property8.addToCopy((-19034L));
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 22 + "'", int1 == 22);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(localDateTime13);
    }

    @Test
    public void test08103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08103");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime1.plusMinutes((int) '#');
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.weekOfWeekyear();
        boolean boolean8 = property7.isLeap();
        int int9 = property7.getMaximumValueOverall();
        org.joda.time.LocalDateTime localDateTime11 = property7.addToCopy(0L);
        org.joda.time.LocalDateTime localDateTime13 = property7.addToCopy(27);
        org.joda.time.Interval interval14 = property7.toInterval();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 53 + "'", int9 == 53);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(interval14);
    }

    @Test
    public void test08104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08104");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale.Builder builder3 = builder0.setLanguage("");
        java.util.Locale.Builder builder4 = builder3.clearExtensions();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime();
        boolean boolean7 = localDateTime5.isBefore((org.joda.time.ReadablePartial) localDateTime6);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property10 = localDateTime6.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime11 = property10.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField12 = property10.getField();
        org.joda.time.DurationField durationField13 = dateTimeField12.getLeapDurationField();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime();
        boolean boolean16 = localDateTime14.isBefore((org.joda.time.ReadablePartial) localDateTime15);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime15.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime15.plusMinutes((int) '#');
        org.joda.time.LocalDateTime localDateTime22 = localDateTime15.plusMonths(0);
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.LocalDateTime localDateTime25 = localDateTime22.withDurationAdded(readableDuration23, (int) (byte) -1);
        java.util.Locale locale28 = new java.util.Locale("fra", "");
        java.util.Set<java.lang.String> strSet29 = locale28.getUnicodeLocaleAttributes();
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime();
        boolean boolean32 = localDateTime30.isBefore((org.joda.time.ReadablePartial) localDateTime31);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime31.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property35 = localDateTime31.dayOfMonth();
        org.joda.time.DurationField durationField36 = property35.getRangeDurationField();
        boolean boolean37 = strSet29.contains((java.lang.Object) durationField36);
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime();
        boolean boolean40 = localDateTime38.isBefore((org.joda.time.ReadablePartial) localDateTime39);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime39.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property43 = localDateTime39.dayOfMonth();
        boolean boolean44 = property43.isLeap();
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone45);
        java.util.Locale locale48 = java.util.Locale.CHINESE;
        java.lang.String str49 = dateTimeZone45.getName((long) (short) 0, locale48);
        java.lang.String str50 = property43.getAsShortText(locale48);
        boolean boolean51 = strSet29.equals((java.lang.Object) locale48);
        java.lang.String str52 = dateTimeField12.getAsText((org.joda.time.ReadablePartial) localDateTime25, locale48);
        java.util.Locale.Builder builder53 = builder3.setLocale(locale48);
        java.util.Locale.Builder builder54 = builder3.clear();
        org.joda.time.LocalDateTime localDateTime55 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime56 = new org.joda.time.LocalDateTime();
        boolean boolean57 = localDateTime55.isBefore((org.joda.time.ReadablePartial) localDateTime56);
        org.joda.time.LocalDateTime localDateTime59 = localDateTime56.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property60 = localDateTime56.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime61 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime62 = new org.joda.time.LocalDateTime();
        boolean boolean63 = localDateTime61.isBefore((org.joda.time.ReadablePartial) localDateTime62);
        org.joda.time.LocalDateTime localDateTime65 = localDateTime62.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property66 = localDateTime62.dayOfMonth();
        java.util.Locale locale67 = java.util.Locale.FRENCH;
        java.util.Set<java.lang.String> strSet68 = locale67.getUnicodeLocaleAttributes();
        java.lang.String str69 = locale67.getVariant();
        java.lang.String str70 = property66.getAsText(locale67);
        java.lang.String str71 = property60.getAsShortText(locale67);
        org.joda.time.LocalDateTime localDateTime72 = property60.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime localDateTime73 = property60.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime74 = property60.withMaximumValue();
        int int75 = property60.getMaximumValueOverall();
        java.util.Locale locale78 = new java.util.Locale("fra", "");
        java.lang.String str79 = locale78.getCountry();
        int int80 = property60.getMaximumTextLength(locale78);
        java.util.Locale.Builder builder81 = builder54.setLocale(locale78);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder83 = builder81.setScript("2022-02-16T06:53:32.538");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed script: 2022-02-16T06:53:32.538 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
// flaky:         org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNull(durationField13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertEquals(locale28.toString(), "fra");
        org.junit.Assert.assertNotNull(strSet29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "zh");
// flaky:         org.junit.Assert.assertEquals("'" + str49 + "' != '" + "+117:00" + "'", str49, "+117:00");
// flaky:         org.junit.Assert.assertEquals("'" + str50 + "' != '" + "16" + "'", str50, "16");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str52 + "' != '" + "16" + "'", str52, "16");
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
// flaky:         org.junit.Assert.assertEquals("'" + str70 + "' != '" + "16" + "'", str70, "16");
// flaky:         org.junit.Assert.assertEquals("'" + str71 + "' != '" + "16" + "'", str71, "16");
        org.junit.Assert.assertNotNull(localDateTime72);
        org.junit.Assert.assertNotNull(localDateTime73);
        org.junit.Assert.assertNotNull(localDateTime74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 31 + "'", int75 == 31);
        org.junit.Assert.assertEquals(locale78.toString(), "fra");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, "");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 2 + "'", int80 == 2);
        org.junit.Assert.assertNotNull(builder81);
    }

    @Test
    public void test08105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08105");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property5 = localDateTime1.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime6 = property5.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField7 = property5.getField();
        long long9 = dateTimeField7.remainder((-1L));
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = dateTimeField7.getType();
        long long13 = dateTimeField7.getDifferenceAsLong(52L, (long) 10);
        long long16 = dateTimeField7.getDifferenceAsLong(0L, (long) 83);
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime();
        boolean boolean19 = localDateTime17.isBefore((org.joda.time.ReadablePartial) localDateTime18);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime18.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property22 = localDateTime18.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime23 = property22.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField24 = property22.getField();
        long long27 = dateTimeField24.addWrapField((long) 6, (int) (byte) 0);
        java.lang.String str29 = dateTimeField24.getAsShortText((long) (byte) 0);
        java.lang.String str31 = dateTimeField24.getAsShortText((-116L));
        long long33 = dateTimeField24.roundCeiling((long) 11);
        int int34 = dateTimeField24.getMaximumValue();
        java.util.Locale locale35 = java.util.Locale.KOREAN;
        java.lang.String str36 = locale35.getCountry();
        int int37 = dateTimeField24.getMaximumTextLength(locale35);
        int int38 = dateTimeField7.getMaximumShortTextLength(locale35);
        long long40 = dateTimeField7.roundHalfEven((long) 51574);
        int int42 = dateTimeField7.getMinimumValue(52780L);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 86399999L + "'", long9 == 86399999L);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 6L + "'", long27 == 6L);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "1" + "'", str29, "1");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "31" + "'", str31, "31");
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 86400000L + "'", long33 == 86400000L);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 31 + "'", int34 == 31);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2 + "'", int37 == 2);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2 + "'", int38 == 2);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
    }

    @Test
    public void test08106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08106");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(216000000, 9800, 35477644, 1309, 35592902);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1309 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08107");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("deu", strMap1);
        java.util.stream.Stream<java.util.Locale.LanguageRange> languageRangeStream3 = languageRangeList2.stream();
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap4 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList5 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList2, strMap4);
        java.util.Locale.LanguageRange[] languageRangeArray6 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList7 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList7, languageRangeArray6);
        java.util.Locale[] localeArray9 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList10 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList10, localeArray9);
        java.util.Locale locale12 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList7, (java.util.Collection<java.util.Locale>) localeList10);
        java.util.Locale.LanguageRange[] languageRangeArray13 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList14 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList14, languageRangeArray13);
        java.util.Locale[] localeArray16 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList17 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList17, localeArray16);
        java.util.Locale locale19 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList14, (java.util.Collection<java.util.Locale>) localeList17);
        java.util.Locale.FilteringMode filteringMode20 = null;
        java.util.List<java.util.Locale> localeList21 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList7, (java.util.Collection<java.util.Locale>) localeList17, filteringMode20);
        java.util.Locale locale22 = java.util.Locale.FRENCH;
        java.util.Set<java.lang.String> strSet23 = locale22.getUnicodeLocaleAttributes();
        java.lang.Object[] objArray24 = strSet23.toArray();
        java.util.Locale.FilteringMode filteringMode25 = java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList26 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList7, (java.util.Collection<java.lang.String>) strSet23, filteringMode25);
        java.util.Locale locale27 = java.util.Locale.ITALIAN;
        java.lang.String str28 = locale27.getDisplayCountry();
        boolean boolean29 = strSet23.equals((java.lang.Object) locale27);
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime();
        boolean boolean32 = localDateTime30.isBefore((org.joda.time.ReadablePartial) localDateTime31);
        org.joda.time.LocalDateTime.Property property33 = localDateTime30.dayOfMonth();
        org.joda.time.LocalDateTime.Property property34 = localDateTime30.weekyear();
        boolean boolean36 = property34.equals((java.lang.Object) 52L);
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = property34.getFieldType();
        java.util.Locale locale41 = new java.util.Locale("fra", "");
        java.util.Set<java.lang.String> strSet42 = locale41.getUnicodeLocaleAttributes();
        java.lang.String str43 = locale41.getScript();
        java.util.Set<java.lang.Character> charSet44 = locale41.getExtensionKeys();
        boolean boolean45 = locale41.hasExtensions();
        org.joda.time.LocalDateTime localDateTime46 = property34.setCopy("2022", locale41);
        java.lang.String str47 = locale27.getDisplayScript(locale41);
        java.util.Set<java.lang.String> strSet48 = locale27.getUnicodeLocaleAttributes();
        strSet48.clear();
        java.lang.String str50 = java.util.Locale.lookupTag(languageRangeList5, (java.util.Collection<java.lang.String>) strSet48);
        java.util.stream.Stream<java.util.Locale.LanguageRange> languageRangeStream51 = languageRangeList5.parallelStream();
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap52 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList53 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList5, strMap52);
        org.junit.Assert.assertNotNull(languageRangeList2);
        org.junit.Assert.assertNotNull(languageRangeStream3);
        org.junit.Assert.assertNotNull(languageRangeList5);
        org.junit.Assert.assertNotNull(languageRangeArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(localeArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNull(locale12);
        org.junit.Assert.assertNotNull(languageRangeArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(localeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(locale19);
        org.junit.Assert.assertNotNull(localeList21);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet23);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[]");
        org.junit.Assert.assertTrue("'" + filteringMode25 + "' != '" + java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES + "'", filteringMode25.equals(java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList26);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "it");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertEquals(locale41.toString(), "fra");
        org.junit.Assert.assertNotNull(strSet42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(charSet44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(strSet48);
        org.junit.Assert.assertNull(str50);
        org.junit.Assert.assertNotNull(languageRangeStream51);
        org.junit.Assert.assertNotNull(languageRangeList53);
    }

    @Test
    public void test08108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08108");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("2022-02-11T09:53:13.724", strMap1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=2022-02-11t09:53:13.724");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08109");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        int int2 = dateTimeZone0.getStandardOffset((long) (-100));
        java.util.TimeZone timeZone3 = dateTimeZone0.toTimeZone();
        int int4 = timeZone3.getRawOffset();
        timeZone3.setRawOffset(50);
        timeZone3.setRawOffset((int) '4');
        int int9 = timeZone3.getRawOffset();
        int int10 = timeZone3.getDSTSavings();
        org.junit.Assert.assertNotNull(dateTimeZone0);
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 421200000 + "'", int2 == 421200000);
        org.junit.Assert.assertNotNull(timeZone3);
// flaky:         org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "GMT+00:00");
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 421200000 + "'", int4 == 421200000);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 52 + "'", int9 == 52);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test08110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08110");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property5 = localDateTime1.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime6 = property5.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField7 = property5.getField();
        long long9 = dateTimeField7.remainder((-1L));
        java.util.Locale locale11 = java.util.Locale.UK;
        java.lang.String str12 = dateTimeField7.getAsShortText((long) 22, locale11);
        java.lang.String str13 = dateTimeField7.getName();
        long long15 = dateTimeField7.roundCeiling((long) 635);
        int int17 = dateTimeField7.get((long) 35464349);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 86399999L + "'", long9 == 86399999L);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "1" + "'", str12, "1");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "dayOfMonth" + "'", str13, "dayOfMonth");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 86400000L + "'", long15 == 86400000L);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
    }

    @Test
    public void test08111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08111");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property5 = localDateTime1.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime6 = property5.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField7 = property5.getField();
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime();
        boolean boolean10 = localDateTime8.isBefore((org.joda.time.ReadablePartial) localDateTime9);
        int[] intArray11 = localDateTime9.getValues();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime9.plusYears((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime();
        boolean boolean16 = localDateTime14.isBefore((org.joda.time.ReadablePartial) localDateTime15);
        int[] intArray17 = localDateTime15.getValues();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime9.withFields((org.joda.time.ReadablePartial) localDateTime15);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.minusMillis((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.minusSeconds((int) '#');
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.withWeekOfWeekyear(50);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime22.withMinuteOfHour((int) (byte) 0);
        int int27 = dateTimeField7.getMinimumValue((org.joda.time.ReadablePartial) localDateTime22);
        java.lang.String str28 = dateTimeField7.toString();
        long long30 = dateTimeField7.roundHalfFloor(1L);
        long long33 = dateTimeField7.add((long) 207, 222L);
        boolean boolean34 = dateTimeField7.isLenient();
        long long36 = dateTimeField7.roundFloor(35396729L);
        org.joda.time.DurationField durationField37 = dateTimeField7.getLeapDurationField();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[2022, 2, 16, 24847838]");
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(intArray17);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[2022, 2, 16, 24847838]");
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "DateTimeField[dayOfMonth]" + "'", str28, "DateTimeField[dayOfMonth]");
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 19180800207L + "'", long33 == 19180800207L);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertNull(durationField37);
    }

    @Test
    public void test08112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08112");
        java.util.Locale locale0 = java.util.Locale.FRENCH;
        java.util.Set<java.lang.String> strSet1 = locale0.getUnicodeLocaleAttributes();
        java.lang.String str2 = locale0.getISO3Language();
        java.util.Set<java.lang.String> strSet3 = locale0.getUnicodeLocaleAttributes();
        java.util.List<java.util.Locale.LanguageRange> languageRangeList5 = java.util.Locale.LanguageRange.parse("und");
        java.util.Locale locale8 = new java.util.Locale("fra", "");
        java.util.Set<java.lang.String> strSet9 = locale8.getUnicodeLocaleAttributes();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime();
        boolean boolean12 = localDateTime10.isBefore((org.joda.time.ReadablePartial) localDateTime11);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime11.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property15 = localDateTime11.dayOfMonth();
        org.joda.time.DurationField durationField16 = property15.getRangeDurationField();
        boolean boolean17 = strSet9.contains((java.lang.Object) durationField16);
        java.util.List<java.lang.String> strList18 = java.util.Locale.filterTags(languageRangeList5, (java.util.Collection<java.lang.String>) strSet9);
        java.lang.String[] strArray23 = new java.lang.String[] { "fra", "", "+00:00", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet24 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet24, strArray23);
        java.lang.Object[] objArray26 = strSet24.toArray();
        boolean boolean27 = strSet24.isEmpty();
        java.util.Locale.LanguageRange[] languageRangeArray28 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList29 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList29, languageRangeArray28);
        java.util.Locale[] localeArray31 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList32 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList32, localeArray31);
        java.util.Locale locale34 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList29, (java.util.Collection<java.util.Locale>) localeList32);
        boolean boolean35 = strSet24.removeAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList29);
        boolean boolean36 = strSet9.retainAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList29);
        boolean boolean37 = strSet3.removeAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList29);
        java.util.stream.Stream<java.util.Locale.LanguageRange> languageRangeStream38 = languageRangeList29.parallelStream();
        java.util.Locale locale39 = java.util.Locale.CANADA_FRENCH;
        java.util.Set<java.lang.String> strSet40 = locale39.getUnicodeLocaleKeys();
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime();
        boolean boolean43 = localDateTime41.isBefore((org.joda.time.ReadablePartial) localDateTime42);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime42.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property46 = localDateTime42.dayOfMonth();
        java.util.Locale locale47 = java.util.Locale.FRENCH;
        java.util.Set<java.lang.String> strSet48 = locale47.getUnicodeLocaleAttributes();
        java.lang.String str49 = locale47.getVariant();
        java.lang.String str50 = property46.getAsText(locale47);
        org.joda.time.ReadableInstant readableInstant51 = null;
        long long52 = property46.getDifferenceAsLong(readableInstant51);
        org.joda.time.LocalDateTime localDateTime53 = property46.roundCeilingCopy();
        org.joda.time.LocalDateTime localDateTime54 = property46.withMaximumValue();
        org.joda.time.LocalDateTime.Property property55 = localDateTime54.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime56 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime57 = new org.joda.time.LocalDateTime();
        boolean boolean58 = localDateTime56.isBefore((org.joda.time.ReadablePartial) localDateTime57);
        org.joda.time.LocalDateTime localDateTime60 = localDateTime57.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property61 = localDateTime57.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime62 = property61.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField63 = property61.getField();
        org.joda.time.LocalDateTime localDateTime64 = property61.getLocalDateTime();
        org.joda.time.LocalDateTime.Property property65 = localDateTime64.dayOfYear();
        java.lang.String str66 = property65.getAsShortText();
        org.joda.time.LocalDateTime localDateTime67 = property65.roundHalfEvenCopy();
        int int68 = localDateTime67.getMinuteOfHour();
        org.joda.time.LocalDateTime[] localDateTimeArray69 = new org.joda.time.LocalDateTime[] { localDateTime54, localDateTime67 };
        org.joda.time.LocalDateTime[] localDateTimeArray70 = strSet40.toArray(localDateTimeArray69);
        java.util.Spliterator<java.lang.String> strSpliterator71 = strSet40.spliterator();
        java.util.List<java.lang.String> strList72 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList29, (java.util.Collection<java.lang.String>) strSet40);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "fra" + "'", str2, "fra");
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(languageRangeList5);
        org.junit.Assert.assertEquals(locale8.toString(), "fra");
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(strList18);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[fra, , +00:00, hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[fra, , +00:00, hi!]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(languageRangeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(localeArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(locale34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(languageRangeStream38);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(strSet40);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
// flaky:         org.junit.Assert.assertEquals("'" + str50 + "' != '" + "16" + "'", str50, "16");
// flaky:         org.junit.Assert.assertTrue("'" + long52 + "' != '" + 4L + "'", long52 == 4L);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertNotNull(property65);
// flaky:         org.junit.Assert.assertEquals("'" + str66 + "' != '" + "47" + "'", str66, "47");
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(localDateTimeArray69);
        org.junit.Assert.assertNotNull(localDateTimeArray70);
        org.junit.Assert.assertNotNull(strSpliterator71);
        org.junit.Assert.assertNotNull(strList72);
    }

    @Test
    public void test08113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08113");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        java.util.Locale locale3 = null;
        java.lang.String str4 = dateTimeZone1.getName((long) (short) 10, locale3);
        long long6 = dateTimeZone0.getMillisKeepLocal(dateTimeZone1, (long) 874);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        long long9 = dateTimeZone1.getMillisKeepLocal(dateTimeZone7, (long) '4');
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusMillis((int) (byte) 1);
        java.lang.String str13 = localDateTime12.toString();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime12.minusMonths((int) 'a');
        boolean boolean16 = dateTimeZone1.equals((java.lang.Object) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.centuryOfEra();
        boolean boolean18 = dateTimeZone1.equals((java.lang.Object) dateTimeFieldType17);
        org.joda.time.LocalDateTime localDateTime19 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        long long21 = dateTimeZone1.convertUTCToLocal((long) 425);
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime();
        boolean boolean25 = localDateTime23.isBefore((org.joda.time.ReadablePartial) localDateTime24);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime24.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property28 = localDateTime24.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime29 = property28.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField30 = property28.getField();
        long long32 = dateTimeField30.remainder((-1L));
        org.joda.time.DurationField durationField33 = dateTimeField30.getRangeDurationField();
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime();
        boolean boolean36 = localDateTime34.isBefore((org.joda.time.ReadablePartial) localDateTime35);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime35.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property39 = localDateTime35.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime40 = property39.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField41 = property39.getField();
        int int44 = dateTimeField41.getDifference(1L, 86399999L);
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime();
        int int46 = localDateTime45.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime48 = localDateTime45.minusMonths((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime50 = localDateTime48.minusMonths((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime52 = localDateTime50.plusWeeks(22);
        org.joda.time.LocalDateTime.Property property53 = localDateTime52.dayOfMonth();
        java.util.Locale locale58 = new java.util.Locale("11", "weekyear", "fra");
        java.lang.String str59 = locale58.getDisplayName();
        java.lang.String str60 = dateTimeField41.getAsShortText((org.joda.time.ReadablePartial) localDateTime52, (int) (byte) 1, locale58);
        int int61 = dateTimeField30.getMaximumShortTextLength(locale58);
        org.joda.time.DateTimeZone dateTimeZone63 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone63);
        java.util.Locale locale66 = java.util.Locale.CHINESE;
        java.lang.String str67 = dateTimeZone63.getName((long) (short) 0, locale66);
        org.joda.time.LocalDateTime localDateTime68 = new org.joda.time.LocalDateTime(0L, dateTimeZone63);
        java.util.Locale locale70 = java.util.Locale.FRENCH;
        java.util.Set<java.lang.String> strSet71 = locale70.getUnicodeLocaleAttributes();
        java.lang.String str72 = locale70.getISO3Language();
        java.lang.String str73 = dateTimeZone63.getName(35271574L, locale70);
        java.lang.String str74 = locale58.getDisplayScript(locale70);
        java.lang.String str75 = dateTimeZone1.getShortName(822L, locale70);
        java.lang.String str77 = dateTimeZone1.getShortName((long) (byte) 10);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+117:00" + "'", str4, "+117:00");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 874L + "'", long6 == 874L);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 52L + "'", long9 == 52L);
        org.junit.Assert.assertNotNull(localDateTime12);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "2022-02-16T06:54:07.937" + "'", str13, "2022-02-16T06:54:07.937");
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(localDateTime19);
// flaky:         org.junit.Assert.assertTrue("'" + long21 + "' != '" + 421200425L + "'", long21 == 421200425L);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 86399999L + "'", long32 == 86399999L);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 22 + "'", int46 == 22);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertEquals(locale58.toString(), "11_WEEKYEAR_fra");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "11 (WEEKYEAR,fra)" + "'", str59, "11 (WEEKYEAR,fra)");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "1" + "'", str60, "1");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 2 + "'", int61 == 2);
        org.junit.Assert.assertNotNull(dateTimeZone63);
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "zh");
// flaky:         org.junit.Assert.assertEquals("'" + str67 + "' != '" + "+117:00" + "'", str67, "+117:00");
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "fra" + "'", str72, "fra");
// flaky:         org.junit.Assert.assertEquals("'" + str73 + "' != '" + "+117:00" + "'", str73, "+117:00");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
// flaky:         org.junit.Assert.assertEquals("'" + str75 + "' != '" + "+117:00" + "'", str75, "+117:00");
// flaky:         org.junit.Assert.assertEquals("'" + str77 + "' != '" + "+117:00" + "'", str77, "+117:00");
    }

    @Test
    public void test08114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08114");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property5 = localDateTime1.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime6 = property5.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField7 = property5.getField();
        long long9 = dateTimeField7.remainder((-1L));
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = dateTimeField7.getType();
        boolean boolean11 = dateTimeField7.isSupported();
        java.util.Locale locale12 = java.util.Locale.ROOT;
        java.lang.String str13 = locale12.getDisplayName();
        int int14 = dateTimeField7.getMaximumTextLength(locale12);
        java.util.Locale locale15 = java.util.Locale.GERMAN;
        java.lang.String str16 = locale12.getDisplayCountry(locale15);
        boolean boolean17 = locale12.hasExtensions();
        java.util.Set<java.lang.String> strSet18 = locale12.getUnicodeLocaleAttributes();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 86399999L + "'", long9 == 86399999L);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "de");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(strSet18);
    }

    @Test
    public void test08115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08115");
        java.util.TimeZone timeZone1 = null;
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        java.util.Locale locale4 = java.util.Locale.PRC;
        java.lang.String str5 = dateTimeZone2.getShortName((long) 7, locale4);
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((long) 24, dateTimeZone2);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        java.util.Locale locale10 = null;
        java.lang.String str11 = dateTimeZone8.getName((long) (short) 10, locale10);
        long long13 = dateTimeZone7.getMillisKeepLocal(dateTimeZone8, (long) 874);
        int int15 = dateTimeZone8.getOffsetFromLocal((long) 22);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone17);
        java.util.Locale locale20 = java.util.Locale.CHINESE;
        java.lang.String str21 = dateTimeZone17.getName((long) (short) 0, locale20);
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime(0L, dateTimeZone17);
        long long24 = dateTimeZone8.getMillisKeepLocal(dateTimeZone17, 202200L);
        org.joda.time.LocalDateTime localDateTime25 = org.joda.time.LocalDateTime.now(dateTimeZone17);
        long long29 = dateTimeZone17.convertLocalToUTC(1644572884603L, false, 1644572873292L);
        long long31 = dateTimeZone2.getMillisKeepLocal(dateTimeZone17, 1643708883378L);
        long long33 = dateTimeZone17.convertUTCToLocal(35351278L);
        java.lang.String str35 = dateTimeZone17.getName((long) 7021);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+117:00" + "'", str5, "+117:00");
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+117:00" + "'", str11, "+117:00");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 874L + "'", long13 == 874L);
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + 421200000 + "'", int15 == 421200000);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "zh");
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+117:00" + "'", str21, "+117:00");
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 202200L + "'", long24 == 202200L);
        org.junit.Assert.assertNotNull(localDateTime25);
// flaky:         org.junit.Assert.assertTrue("'" + long29 + "' != '" + 1644151684603L + "'", long29 == 1644151684603L);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 1643708883378L + "'", long31 == 1643708883378L);
// flaky:         org.junit.Assert.assertTrue("'" + long33 + "' != '" + 456551278L + "'", long33 == 456551278L);
// flaky:         org.junit.Assert.assertEquals("'" + str35 + "' != '" + "+117:00" + "'", str35, "+117:00");
    }

    @Test
    public void test08116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08116");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property5 = localDateTime1.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime6 = property5.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField7 = property5.getField();
        long long10 = dateTimeField7.addWrapField((long) (short) 1, (int) (byte) 100);
        int int12 = dateTimeField7.getMinimumValue((-1L));
        org.joda.time.ReadablePartial readablePartial13 = null;
        int[] intArray16 = new int[] { 11 };
        int[] intArray18 = dateTimeField7.addWrapPartial(readablePartial13, 100, intArray16, 0);
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime();
        boolean boolean22 = localDateTime20.isBefore((org.joda.time.ReadablePartial) localDateTime21);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime21.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property25 = localDateTime21.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime();
        boolean boolean28 = localDateTime26.isBefore((org.joda.time.ReadablePartial) localDateTime27);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime27.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property31 = localDateTime27.dayOfMonth();
        java.util.Locale locale32 = java.util.Locale.FRENCH;
        java.util.Set<java.lang.String> strSet33 = locale32.getUnicodeLocaleAttributes();
        java.lang.String str34 = locale32.getVariant();
        java.lang.String str35 = property31.getAsText(locale32);
        java.lang.String str36 = property25.getAsShortText(locale32);
        org.joda.time.LocalDateTime localDateTime37 = property25.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime localDateTime38 = property25.roundFloorCopy();
        java.util.Locale locale41 = new java.util.Locale("", "weekyear");
        int int42 = property25.getMaximumShortTextLength(locale41);
        java.lang.String str43 = dateTimeField7.getAsText(0L, locale41);
        long long45 = dateTimeField7.roundHalfCeiling(724102764749277787L);
        boolean boolean46 = dateTimeField7.isLenient();
        java.lang.String str47 = dateTimeField7.toString();
        org.joda.time.DurationField durationField48 = dateTimeField7.getLeapDurationField();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 604800001L + "'", long10 == 604800001L);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[11]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[11]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
// flaky:         org.junit.Assert.assertEquals("'" + str35 + "' != '" + "16" + "'", str35, "16");
// flaky:         org.junit.Assert.assertEquals("'" + str36 + "' != '" + "16" + "'", str36, "16");
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertEquals(locale41.toString(), "_WEEKYEAR");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2 + "'", int42 == 2);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "1" + "'", str43, "1");
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 724102764710400000L + "'", long45 == 724102764710400000L);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "DateTimeField[dayOfMonth]" + "'", str47, "DateTimeField[dayOfMonth]");
        org.junit.Assert.assertNull(durationField48);
    }

    @Test
    public void test08117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08117");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusYears(2);
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.minusMillis((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.plusDays(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime6.withField(dateTimeFieldType9, 0);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime();
        boolean boolean14 = localDateTime12.isBefore((org.joda.time.ReadablePartial) localDateTime13);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime13.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime13.plusMinutes((int) '#');
        org.joda.time.LocalDateTime localDateTime20 = localDateTime13.minusMinutes((int) (short) 1);
        boolean boolean21 = localDateTime11.isAfter((org.joda.time.ReadablePartial) localDateTime20);
        org.joda.time.LocalDateTime.Property property22 = localDateTime11.secondOfMinute();
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = property22.getFieldType();
        org.joda.time.LocalDateTime localDateTime24 = property22.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime();
        boolean boolean27 = localDateTime25.isBefore((org.joda.time.ReadablePartial) localDateTime26);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime26.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime26.plusMinutes((int) '#');
        org.joda.time.LocalDateTime localDateTime33 = localDateTime26.minusMinutes((int) (short) 1);
        org.joda.time.ReadableDuration readableDuration34 = null;
        org.joda.time.LocalDateTime localDateTime36 = localDateTime26.withDurationAdded(readableDuration34, (int) (short) 100);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter37 = null;
        java.lang.String str38 = localDateTime26.toString(dateTimeFormatter37);
        boolean boolean39 = localDateTime24.isAfter((org.joda.time.ReadablePartial) localDateTime26);
        org.joda.time.LocalDateTime.Property property40 = localDateTime24.hourOfDay();
        org.joda.time.LocalDateTime localDateTime41 = localDateTime3.withFields((org.joda.time.ReadablePartial) localDateTime24);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime24.withDayOfMonth(28);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime43.minusMillis(30);
        org.joda.time.LocalDateTime.Property property46 = localDateTime45.weekyear();
        org.joda.time.LocalDateTime localDateTime48 = localDateTime45.plusMonths(635);
        org.joda.time.LocalDateTime.Property property49 = localDateTime48.dayOfWeek();
        boolean boolean50 = property49.isLeap();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime36);
// flaky:         org.junit.Assert.assertEquals("'" + str38 + "' != '" + "2022-02-16T06:54:08.048" + "'", str38, "2022-02-16T06:54:08.048");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test08118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08118");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property5 = localDateTime1.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime6 = property5.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField7 = property5.getField();
        org.joda.time.LocalDateTime localDateTime8 = property5.getLocalDateTime();
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.LocalDateTime localDateTime11 = localDateTime8.withPeriodAdded(readablePeriod9, (int) '#');
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.LocalDateTime localDateTime13 = localDateTime8.plus(readablePeriod12);
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime();
        boolean boolean16 = localDateTime14.isBefore((org.joda.time.ReadablePartial) localDateTime15);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime15.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime15.plusMinutes((int) '#');
        org.joda.time.LocalDateTime localDateTime22 = localDateTime15.minusMinutes((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.minusMillis((int) (byte) 1);
        java.lang.String str26 = localDateTime25.toString();
        org.joda.time.DateTime dateTime27 = localDateTime25.toDateTime();
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.minusMillis((int) (byte) 1);
        java.lang.String str31 = localDateTime30.toString();
        org.joda.time.DateTime dateTime32 = localDateTime30.toDateTime();
        boolean boolean33 = dateTime27.isEqual((org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime36 = localDateTime34.minusMillis((int) (byte) 1);
        java.lang.String str37 = localDateTime36.toString();
        org.joda.time.DateTime dateTime38 = localDateTime36.toDateTime();
        boolean boolean39 = dateTime27.isEqual((org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone40);
        java.util.Locale locale43 = java.util.Locale.CHINESE;
        java.lang.String str44 = dateTimeZone40.getName((long) (short) 0, locale43);
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime47 = localDateTime45.minusMillis((int) (byte) 1);
        java.lang.String str48 = localDateTime47.toString();
        org.joda.time.DateTime dateTime49 = localDateTime47.toDateTime();
        org.joda.time.LocalDateTime localDateTime50 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime52 = localDateTime50.minusMillis((int) (byte) 1);
        java.lang.String str53 = localDateTime52.toString();
        org.joda.time.DateTime dateTime54 = localDateTime52.toDateTime();
        boolean boolean55 = dateTime49.isEqual((org.joda.time.ReadableInstant) dateTime54);
        int int56 = dateTimeZone40.getOffset((org.joda.time.ReadableInstant) dateTime49);
        org.joda.time.DateTimeFieldType dateTimeFieldType57 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str58 = dateTimeFieldType57.toString();
        java.lang.String str59 = dateTimeFieldType57.toString();
        boolean boolean60 = dateTime49.isSupported(dateTimeFieldType57);
        org.joda.time.Chronology chronology61 = dateTime49.getChronology();
        boolean boolean62 = dateTime27.equals((java.lang.Object) dateTime49);
        org.joda.time.DateTime dateTime63 = localDateTime22.toDateTime((org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.LocalDateTime localDateTime64 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime65 = new org.joda.time.LocalDateTime();
        boolean boolean66 = localDateTime64.isBefore((org.joda.time.ReadablePartial) localDateTime65);
        org.joda.time.LocalDateTime localDateTime68 = localDateTime65.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property69 = localDateTime65.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime70 = property69.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField71 = property69.getField();
        long long74 = dateTimeField71.addWrapField((long) 6, (int) (byte) 0);
        java.lang.String str76 = dateTimeField71.getAsShortText((long) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType77 = dateTimeField71.getType();
        boolean boolean78 = dateTime27.isSupported(dateTimeFieldType77);
        int int79 = localDateTime13.get(dateTimeFieldType77);
        org.joda.time.LocalDateTime localDateTime81 = localDateTime13.withMinuteOfHour(22);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime83 = localDateTime81.withYearOfCentury(796);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 796 for yearOfCentury must be in the range [0,99]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime25);
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "2022-02-16T06:54:08.077" + "'", str26, "2022-02-16T06:54:08.077");
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(localDateTime30);
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "2022-02-16T06:54:08.077" + "'", str31, "2022-02-16T06:54:08.077");
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(localDateTime36);
// flaky:         org.junit.Assert.assertEquals("'" + str37 + "' != '" + "2022-02-16T06:54:08.077" + "'", str37, "2022-02-16T06:54:08.077");
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "zh");
// flaky:         org.junit.Assert.assertEquals("'" + str44 + "' != '" + "+117:00" + "'", str44, "+117:00");
        org.junit.Assert.assertNotNull(localDateTime47);
// flaky:         org.junit.Assert.assertEquals("'" + str48 + "' != '" + "2022-02-16T06:54:08.077" + "'", str48, "2022-02-16T06:54:08.077");
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(localDateTime52);
// flaky:         org.junit.Assert.assertEquals("'" + str53 + "' != '" + "2022-02-16T06:54:08.077" + "'", str53, "2022-02-16T06:54:08.077");
        org.junit.Assert.assertNotNull(dateTime54);
// flaky:         org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int56 + "' != '" + 421200000 + "'", int56 == 421200000);
        org.junit.Assert.assertNotNull(dateTimeFieldType57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "weekyear" + "'", str58, "weekyear");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "weekyear" + "'", str59, "weekyear");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertNotNull(property69);
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertNotNull(dateTimeField71);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 6L + "'", long74 == 6L);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "1" + "'", str76, "1");
        org.junit.Assert.assertNotNull(dateTimeFieldType77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int79 + "' != '" + 16 + "'", int79 == 16);
        org.junit.Assert.assertNotNull(localDateTime81);
    }

    @Test
    public void test08119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08119");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("CAN");
        java.lang.String str2 = languageRange1.getRange();
        double double3 = languageRange1.getWeight();
        double double4 = languageRange1.getWeight();
        java.lang.String str5 = languageRange1.getRange();
        java.lang.Object obj6 = null;
        boolean boolean7 = languageRange1.equals(obj6);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "can" + "'", str2, "can");
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 1.0d + "'", double4 == 1.0d);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "can" + "'", str5, "can");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test08120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08120");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        int int2 = dateTimeZone0.getStandardOffset((long) (-100));
        java.util.TimeZone timeZone3 = dateTimeZone0.toTimeZone();
        int int4 = timeZone3.getRawOffset();
        timeZone3.setID("2022-02-11T09:48:26.586");
        java.util.TimeZone.setDefault(timeZone3);
        java.lang.String str8 = timeZone3.getID();
        boolean boolean9 = timeZone3.observesDaylightTime();
        java.util.TimeZone timeZone11 = java.util.TimeZone.getTimeZone("2022-02-11T09:47:49.888");
        int int13 = timeZone11.getOffset(822L);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone11);
        int int15 = timeZone11.getRawOffset();
        timeZone11.setID("2022-02-11T09:50:15.374");
        boolean boolean18 = timeZone3.hasSameRules(timeZone11);
        // The following exception was thrown during execution in test generation
        try {
            java.time.ZoneId zoneId19 = timeZone11.toZoneId();
            org.junit.Assert.fail("Expected exception of type java.time.DateTimeException; message: Invalid ID for region-based ZoneId, invalid format: 2022-02-11T09:50:15.374");
        } catch (java.time.DateTimeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 421200000 + "'", int2 == 421200000);
        org.junit.Assert.assertNotNull(timeZone3);
// flaky:         org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "GMT+;7:00");
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 421200000 + "'", int4 == 421200000);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "2022-02-11T09:48:26.586" + "'", str8, "2022-02-11T09:48:26.586");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(timeZone11);
        org.junit.Assert.assertEquals(timeZone11.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test08121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08121");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property5 = localDateTime1.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime6 = property5.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField7 = property5.getField();
        long long10 = dateTimeField7.addWrapField((long) 6, (int) (byte) 0);
        java.lang.String str12 = dateTimeField7.getAsShortText((long) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = dateTimeField7.getType();
        long long15 = dateTimeField7.roundHalfEven((long) 10);
        long long18 = dateTimeField7.getDifferenceAsLong((long) 464, 35295232L);
        long long20 = dateTimeField7.roundHalfEven(1644572963605L);
        int int23 = dateTimeField7.getDifference(924L, (long) 660);
        boolean boolean24 = dateTimeField7.isLenient();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 6L + "'", long10 == 6L);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "1" + "'", str12, "1");
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1644537600000L + "'", long20 == 1644537600000L);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test08122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08122");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime1.plusMinutes((int) '#');
        org.joda.time.LocalDateTime localDateTime8 = localDateTime1.plusMonths(0);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minusWeeks(5);
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.monthOfYear();
        org.joda.time.Interval interval12 = property11.toInterval();
        int int13 = property11.getMinimumValueOverall();
        org.joda.time.Interval interval14 = property11.toInterval();
        java.util.Locale.Builder builder16 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder17 = builder16.clearExtensions();
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime();
        boolean boolean20 = localDateTime18.isBefore((org.joda.time.ReadablePartial) localDateTime19);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime19.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property23 = localDateTime19.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime24 = property23.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField25 = property23.getField();
        int int26 = dateTimeField25.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime();
        int int28 = localDateTime27.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime30 = localDateTime27.minusMonths((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime30.minusMonths((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.plusWeeks(22);
        java.util.Locale locale36 = java.util.Locale.JAPANESE;
        java.lang.String str37 = dateTimeField25.getAsShortText((org.joda.time.ReadablePartial) localDateTime34, 22, locale36);
        java.util.Locale.Builder builder38 = builder17.setLocale(locale36);
        java.util.Locale.Builder builder40 = builder17.setScript("");
        java.util.Locale locale41 = builder17.build();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime42 = property11.setCopy("2022-02-11T09:52:28.164", locale41);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2022-02-11T09:52:28.164\" for monthOfYear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 31 + "'", int26 == 31);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 22 + "'", int28 == 22);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "22" + "'", str37, "22");
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "ja");
    }

    @Test
    public void test08123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08123");
        java.lang.String[] strArray4 = new java.lang.String[] { "fra", "", "+00:00", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet5 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet5, strArray4);
        java.lang.Object[] objArray7 = strSet5.toArray();
        boolean boolean8 = strSet5.isEmpty();
        java.util.Locale.LanguageRange[] languageRangeArray9 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList10 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList10, languageRangeArray9);
        java.util.Locale[] localeArray12 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList13 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList13, localeArray12);
        java.util.Locale locale15 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList10, (java.util.Collection<java.util.Locale>) localeList13);
        boolean boolean16 = strSet5.removeAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList10);
        java.util.Locale.LanguageRange[] languageRangeArray17 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList18 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList18, languageRangeArray17);
        java.util.Locale[] localeArray20 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList21 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList21, localeArray20);
        java.util.Locale locale23 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList18, (java.util.Collection<java.util.Locale>) localeList21);
        java.util.Locale.FilteringMode filteringMode24 = java.util.Locale.FilteringMode.EXTENDED_FILTERING;
        java.util.List<java.util.Locale> localeList25 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList10, (java.util.Collection<java.util.Locale>) localeList21, filteringMode24);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap26 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList27 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList10, strMap26);
        java.util.Locale locale30 = new java.util.Locale("fra", "");
        java.util.Set<java.lang.String> strSet31 = locale30.getUnicodeLocaleAttributes();
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime();
        boolean boolean34 = localDateTime32.isBefore((org.joda.time.ReadablePartial) localDateTime33);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime33.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property37 = localDateTime33.dayOfMonth();
        org.joda.time.DurationField durationField38 = property37.getRangeDurationField();
        boolean boolean39 = strSet31.contains((java.lang.Object) durationField38);
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime();
        boolean boolean42 = localDateTime40.isBefore((org.joda.time.ReadablePartial) localDateTime41);
        org.joda.time.LocalDateTime localDateTime44 = localDateTime41.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property45 = localDateTime41.dayOfMonth();
        boolean boolean46 = property45.isLeap();
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone47);
        java.util.Locale locale50 = java.util.Locale.CHINESE;
        java.lang.String str51 = dateTimeZone47.getName((long) (short) 0, locale50);
        java.lang.String str52 = property45.getAsShortText(locale50);
        boolean boolean53 = strSet31.equals((java.lang.Object) locale50);
        java.util.Locale.LanguageRange[] languageRangeArray54 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList55 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList55, languageRangeArray54);
        java.util.Locale[] localeArray57 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList58 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList58, localeArray57);
        java.util.Locale locale60 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList55, (java.util.Collection<java.util.Locale>) localeList58);
        boolean boolean61 = strSet31.removeAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList55);
        java.lang.String str62 = java.util.Locale.lookupTag(languageRangeList27, (java.util.Collection<java.lang.String>) strSet31);
        java.util.stream.Stream<java.util.Locale.LanguageRange> languageRangeStream63 = languageRangeList27.stream();
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[fra, , +00:00, hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[fra, , +00:00, hi!]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(languageRangeArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(localeArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(locale15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(languageRangeArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(localeArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(locale23);
        org.junit.Assert.assertTrue("'" + filteringMode24 + "' != '" + java.util.Locale.FilteringMode.EXTENDED_FILTERING + "'", filteringMode24.equals(java.util.Locale.FilteringMode.EXTENDED_FILTERING));
        org.junit.Assert.assertNotNull(localeList25);
        org.junit.Assert.assertNotNull(languageRangeList27);
        org.junit.Assert.assertEquals(locale30.toString(), "fra");
        org.junit.Assert.assertNotNull(strSet31);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "zh");
// flaky:         org.junit.Assert.assertEquals("'" + str51 + "' != '" + "+117:00" + "'", str51, "+117:00");
// flaky:         org.junit.Assert.assertEquals("'" + str52 + "' != '" + "16" + "'", str52, "16");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(languageRangeArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(localeArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNull(locale60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertNotNull(languageRangeStream63);
    }

    @Test
    public void test08124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08124");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        java.util.Locale locale2 = java.util.Locale.getDefault(category0);
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime();
        boolean boolean5 = localDateTime3.isBefore((org.joda.time.ReadablePartial) localDateTime4);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property8 = localDateTime4.dayOfMonth();
        java.util.Locale locale9 = java.util.Locale.FRENCH;
        java.util.Set<java.lang.String> strSet10 = locale9.getUnicodeLocaleAttributes();
        java.lang.String str11 = locale9.getVariant();
        java.lang.String str12 = property8.getAsText(locale9);
        java.util.Locale locale13 = locale9.stripExtensions();
        java.util.Locale.setDefault(category0, locale13);
        java.util.Locale locale15 = java.util.Locale.JAPAN;
        java.util.Locale locale16 = java.util.Locale.ITALY;
        java.lang.String str17 = locale15.getDisplayScript(locale16);
        java.lang.String str18 = locale15.getDisplayScript();
        java.lang.String str19 = locale15.getCountry();
        java.util.Locale.setDefault(category0, locale15);
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime();
        boolean boolean23 = localDateTime21.isBefore((org.joda.time.ReadablePartial) localDateTime22);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime22.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property26 = localDateTime22.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime27 = property26.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField28 = property26.getField();
        long long31 = dateTimeField28.addWrapField((long) 6, (int) (byte) 0);
        int int34 = dateTimeField28.getDifference(1644572883261L, (-822L));
        long long36 = dateTimeField28.remainder(0L);
        org.joda.time.tz.NameProvider nameProvider37 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale38 = java.util.Locale.FRENCH;
        java.lang.String str39 = locale38.getDisplayName();
        java.lang.String str42 = nameProvider37.getShortName(locale38, "2022-02-11T09:47:59.470", "2022-02-11T09:48:12.308");
        java.lang.String str43 = locale38.getScript();
        java.lang.String str44 = locale38.getDisplayVariant();
        int int45 = dateTimeField28.getMaximumTextLength(locale38);
        java.lang.String str46 = locale38.getDisplayCountry();
        java.util.Locale.setDefault(category0, locale38);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale1);
// flaky:         org.junit.Assert.assertEquals(locale1.toString(), "fr");
        org.junit.Assert.assertNotNull(locale2);
// flaky:         org.junit.Assert.assertEquals(locale2.toString(), "fr");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "16" + "'", str12, "16");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "fr");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "JP" + "'", str19, "JP");
// flaky:         org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 6L + "'", long31 == 6L);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 19034 + "'", int34 == 19034);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertNotNull(nameProvider37);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "fr");
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "fran\347ais" + "'", str39, "fran\347ais");
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2 + "'", int45 == 2);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
    }

    @Test
    public void test08125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08125");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        int[] intArray3 = localDateTime1.getValues();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.plusYears((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        boolean boolean8 = localDateTime6.isBefore((org.joda.time.ReadablePartial) localDateTime7);
        int[] intArray9 = localDateTime7.getValues();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime1.withFields((org.joda.time.ReadablePartial) localDateTime7);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusMillis((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.minusSeconds((int) '#');
        org.joda.time.LocalDateTime localDateTime16 = localDateTime12.plusMonths(49);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime12.minusYears((-28));
        org.joda.time.LocalDateTime localDateTime20 = localDateTime12.minusHours(556);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime22 = localDateTime12.withYearOfCentury(464);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 464 for yearOfCentury must be in the range [0,99]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(intArray3);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[2022, 2, 16, 24848232]");
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(intArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[2022, 2, 16, 24848232]");
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
    }

    @Test
    public void test08126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08126");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.getDefault();
        java.util.Locale locale5 = null;
        java.lang.String str6 = dateTimeZone3.getName((long) (short) 10, locale5);
        long long8 = dateTimeZone2.getMillisKeepLocal(dateTimeZone3, (long) 874);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.getDefault();
        long long11 = dateTimeZone3.getMillisKeepLocal(dateTimeZone9, (long) '4');
        int int13 = dateTimeZone3.getOffsetFromLocal((long) 83);
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime(0L, dateTimeZone3);
        java.util.TimeZone timeZone15 = dateTimeZone3.toTimeZone();
        int int17 = dateTimeZone3.getOffsetFromLocal((long) (short) 10);
        java.lang.String str18 = dateTimeZone3.toString();
        java.lang.String str20 = dateTimeZone3.getName(0L);
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.minusMillis((int) (byte) 1);
        java.lang.String str25 = localDateTime24.toString();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime24.minusMonths((int) 'a');
        org.joda.time.LocalDateTime.Property property28 = localDateTime24.yearOfEra();
        java.util.Locale locale32 = new java.util.Locale("11", "weekyear", "fra");
        java.lang.String str33 = property28.getAsShortText(locale32);
        java.util.Locale locale34 = java.util.Locale.JAPAN;
        java.lang.String str35 = locale32.getDisplayName(locale34);
        java.lang.String str36 = locale34.getISO3Country();
        java.lang.String str37 = dateTimeZone3.getShortName(0L, locale34);
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime((java.lang.Object) 1644572974526L, dateTimeZone3);
        java.lang.String str39 = dateTimeZone3.getID();
        java.lang.String str41 = dateTimeZone3.getNameKey((-61049355064L));
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTimeZone3);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+117:00" + "'", str6, "+117:00");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 874L + "'", long8 == 874L);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 52L + "'", long11 == 52L);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 421200000 + "'", int13 == 421200000);
        org.junit.Assert.assertNotNull(timeZone15);
// flaky:         org.junit.Assert.assertEquals(timeZone15.getDisplayName(), "GMT+;7:00");
// flaky:         org.junit.Assert.assertTrue("'" + int17 + "' != '" + 421200000 + "'", int17 == 421200000);
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+117:00" + "'", str18, "+117:00");
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+117:00" + "'", str20, "+117:00");
        org.junit.Assert.assertNotNull(localDateTime24);
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "2022-02-16T06:54:08.282" + "'", str25, "2022-02-16T06:54:08.282");
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertEquals(locale32.toString(), "11_WEEKYEAR_fra");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "2022" + "'", str33, "2022");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "11 (WEEKYEAR,fra)" + "'", str35, "11 (WEEKYEAR,fra)");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "JPN" + "'", str36, "JPN");
// flaky:         org.junit.Assert.assertEquals("'" + str37 + "' != '" + "+117:00" + "'", str37, "+117:00");
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "+117:00" + "'", str39, "+117:00");
// flaky:         org.junit.Assert.assertNull(str41);
    }

    @Test
    public void test08127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08127");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        int int1 = localDateTime0.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime3 = localDateTime0.minusMonths((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.minusMonths((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.plusWeeks((int) 'x');
        org.joda.time.LocalDateTime localDateTime9 = localDateTime5.plusMinutes((-2));
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime11 = localDateTime5.withCenturyOfEra(241477222);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 241477222 for centuryOfEra must be in the range [0,2922789]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 22 + "'", int1 == 22);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
    }

    @Test
    public void test08128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08128");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime1.plusMinutes((int) '#');
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.LocalDateTime localDateTime8 = localDateTime1.minus(readablePeriod7);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime1.withField(dateTimeFieldType9, (int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime1.withYearOfEra(1);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime1.minusMillis(9);
        org.joda.time.LocalDateTime.Property property16 = localDateTime15.millisOfSecond();
// flaky:         org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
    }

    @Test
    public void test08129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08129");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property5 = localDateTime1.dayOfMonth();
        java.util.Locale locale6 = java.util.Locale.FRENCH;
        java.util.Set<java.lang.String> strSet7 = locale6.getUnicodeLocaleAttributes();
        java.lang.String str8 = locale6.getVariant();
        java.lang.String str9 = property5.getAsText(locale6);
        org.joda.time.ReadableInstant readableInstant10 = null;
        long long11 = property5.getDifferenceAsLong(readableInstant10);
        org.joda.time.LocalDateTime localDateTime12 = property5.roundCeilingCopy();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.plusMonths((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime12.withYearOfEra(117);
        org.joda.time.LocalDateTime.Property property17 = localDateTime16.hourOfDay();
        int int18 = property17.getMaximumValue();
        java.lang.String str19 = property17.getAsString();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "16" + "'", str9, "16");
// flaky:         org.junit.Assert.assertTrue("'" + long11 + "' != '" + 4L + "'", long11 == 4L);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 23 + "'", int18 == 23);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "0" + "'", str19, "0");
    }

    @Test
    public void test08130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08130");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale locale3 = java.util.Locale.forLanguageTag("6");
        java.util.Locale.Builder builder4 = builder1.setLocale(locale3);
        java.util.Locale.Builder builder5 = builder4.clear();
        java.util.Locale locale7 = java.util.Locale.forLanguageTag("2022-02-11T09:48:02.052");
        java.lang.String str8 = locale7.getDisplayVariant();
        java.util.Locale.Builder builder9 = builder4.setLocale(locale7);
        java.lang.String str10 = locale7.getISO3Country();
        java.lang.String str11 = locale7.getCountry();
        java.lang.String str12 = locale7.getDisplayScript();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "");
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
    }

    @Test
    public void test08131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08131");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds((int) (byte) 100);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = null;
        java.lang.String str6 = localDateTime1.toString(dateTimeFormatter5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        org.joda.time.LocalDateTime.Property property8 = localDateTime1.property(dateTimeFieldType7);
        org.joda.time.LocalDateTime localDateTime9 = property8.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime10 = property8.withMinimumValue();
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.millisOfDay();
        org.joda.time.DurationField durationField12 = property11.getRangeDurationField();
        int int13 = property11.getMaximumValue();
        int int14 = property11.getLeapAmount();
        org.joda.time.LocalDateTime localDateTime15 = property11.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime localDateTime16 = property11.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.withWeekyear(606);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime20 = localDateTime16.withDayOfYear(118380000);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 118380000 for dayOfYear must be in the range [1,365]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "2022-02-16T06:54:08.329" + "'", str6, "2022-02-16T06:54:08.329");
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 86399999 + "'", int13 == 86399999);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
    }

    @Test
    public void test08132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08132");
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusMillis((int) (byte) 1);
        java.lang.String str5 = localDateTime4.toString();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.minusMonths((int) 'a');
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.minusMinutes(22);
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusMillis((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.plusDays(0);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.plusMillis(22);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        int int18 = localDateTime16.get(dateTimeFieldType17);
        org.joda.time.LocalDateTime.Property property19 = localDateTime7.property(dateTimeFieldType17);
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.minusMillis((int) (byte) 1);
        java.lang.String str23 = localDateTime22.toString();
        org.joda.time.DateTime dateTime24 = localDateTime22.toDateTime();
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.minusMillis((int) (byte) 1);
        java.lang.String str28 = localDateTime27.toString();
        org.joda.time.DateTime dateTime29 = localDateTime27.toDateTime();
        boolean boolean30 = dateTime24.isEqual((org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.Chronology chronology31 = dateTime29.getChronology();
        boolean boolean32 = dateTimeFieldType17.isSupported(chronology31);
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime((long) 292278993, chronology31);
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime((-68178L), chronology31);
        int int35 = localDateTime34.getWeekOfWeekyear();
        org.junit.Assert.assertNotNull(localDateTime4);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "2022-02-16T06:54:08.339" + "'", str5, "2022-02-16T06:54:08.339");
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 7 + "'", int18 == 7);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(localDateTime22);
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "2022-02-16T06:54:08.339" + "'", str23, "2022-02-16T06:54:08.339");
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(localDateTime27);
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "2022-02-16T06:54:08.339" + "'", str28, "2022-02-16T06:54:08.339");
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2 + "'", int35 == 2);
    }

    @Test
    public void test08133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08133");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property5 = localDateTime1.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime6 = property5.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField7 = property5.getField();
        long long10 = dateTimeField7.addWrapField((long) 6, (int) (byte) 0);
        java.lang.String str12 = dateTimeField7.getAsShortText((long) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = dateTimeField7.getType();
        java.util.Locale locale15 = java.util.Locale.FRENCH;
        java.util.Set<java.lang.String> strSet16 = locale15.getUnicodeLocaleAttributes();
        java.lang.String str17 = locale15.getVariant();
        java.util.Set<java.lang.String> strSet18 = locale15.getUnicodeLocaleKeys();
        java.lang.String str19 = dateTimeField7.getAsShortText((long) (short) -1, locale15);
        int int22 = dateTimeField7.getDifference((long) 4, (long) 35293104);
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.minusMillis((int) (byte) 1);
        java.lang.String str26 = localDateTime25.toString();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime25.minusMinutes((int) (byte) 10);
        org.joda.time.LocalDateTime.Property property29 = localDateTime28.weekOfWeekyear();
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.LocalDateTime localDateTime32 = localDateTime28.withPeriodAdded(readablePeriod30, (int) (short) -1);
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime();
        boolean boolean35 = localDateTime33.isBefore((org.joda.time.ReadablePartial) localDateTime34);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime34.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property38 = localDateTime34.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime39 = property38.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField40 = property38.getField();
        int int41 = dateTimeField40.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime();
        int int43 = localDateTime42.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime45 = localDateTime42.minusMonths((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime45.minusMonths((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime49 = localDateTime47.plusWeeks(22);
        java.util.Locale locale51 = java.util.Locale.JAPANESE;
        java.lang.String str52 = dateTimeField40.getAsShortText((org.joda.time.ReadablePartial) localDateTime49, 22, locale51);
        int int54 = dateTimeField40.getLeapAmount((long) (byte) 1);
        int int56 = dateTimeField40.getMaximumValue((long) 35293506);
        org.joda.time.LocalDateTime localDateTime57 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime58 = new org.joda.time.LocalDateTime();
        boolean boolean59 = localDateTime57.isBefore((org.joda.time.ReadablePartial) localDateTime58);
        org.joda.time.LocalDateTime localDateTime61 = localDateTime58.plusSeconds((int) (byte) 100);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter62 = null;
        java.lang.String str63 = localDateTime58.toString(dateTimeFormatter62);
        org.joda.time.DateTimeFieldType dateTimeFieldType64 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        org.joda.time.LocalDateTime.Property property65 = localDateTime58.property(dateTimeFieldType64);
        org.joda.time.LocalDateTime localDateTime66 = property65.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime68 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime69 = new org.joda.time.LocalDateTime();
        boolean boolean70 = localDateTime68.isBefore((org.joda.time.ReadablePartial) localDateTime69);
        int[] intArray71 = localDateTime69.getValues();
        org.joda.time.LocalDateTime localDateTime73 = localDateTime69.plusYears((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime74 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime75 = new org.joda.time.LocalDateTime();
        boolean boolean76 = localDateTime74.isBefore((org.joda.time.ReadablePartial) localDateTime75);
        int[] intArray77 = localDateTime75.getValues();
        org.joda.time.LocalDateTime localDateTime78 = localDateTime69.withFields((org.joda.time.ReadablePartial) localDateTime75);
        org.joda.time.LocalDateTime localDateTime80 = localDateTime78.minusMillis((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime82 = localDateTime80.minusSeconds((int) '#');
        org.joda.time.LocalDateTime localDateTime84 = localDateTime82.withWeekOfWeekyear(50);
        org.joda.time.LocalDateTime localDateTime86 = localDateTime82.withMinuteOfHour((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime88 = localDateTime82.minusMonths((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime90 = localDateTime88.plusYears(2022);
        int[] intArray91 = localDateTime88.getValues();
        int[] intArray93 = dateTimeField40.addWrapPartial((org.joda.time.ReadablePartial) localDateTime66, 31, intArray91, 0);
        int int94 = dateTimeField7.getMaximumValue((org.joda.time.ReadablePartial) localDateTime28, intArray91);
        java.util.Locale locale96 = java.util.Locale.CANADA;
        java.lang.String str97 = locale96.getCountry();
        boolean boolean98 = locale96.hasExtensions();
        java.lang.String str99 = dateTimeField7.getAsShortText((long) 367, locale96);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 6L + "'", long10 == 6L);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "1" + "'", str12, "1");
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(strSet18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "31" + "'", str19, "31");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(localDateTime25);
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "2022-02-16T06:54:08.356" + "'", str26, "2022-02-16T06:54:08.356");
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 31 + "'", int41 == 31);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 22 + "'", int43 == 22);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "22" + "'", str52, "22");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 31 + "'", int56 == 31);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(localDateTime61);
// flaky:         org.junit.Assert.assertEquals("'" + str63 + "' != '" + "2022-02-16T06:54:08.357" + "'", str63, "2022-02-16T06:54:08.357");
        org.junit.Assert.assertNotNull(dateTimeFieldType64);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(intArray71);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[2022, 2, 16, 24848357]");
        org.junit.Assert.assertNotNull(localDateTime73);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(intArray77);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[2022, 2, 16, 24848357]");
        org.junit.Assert.assertNotNull(localDateTime78);
        org.junit.Assert.assertNotNull(localDateTime80);
        org.junit.Assert.assertNotNull(localDateTime82);
        org.junit.Assert.assertNotNull(localDateTime84);
        org.junit.Assert.assertNotNull(localDateTime86);
        org.junit.Assert.assertNotNull(localDateTime88);
        org.junit.Assert.assertNotNull(localDateTime90);
        org.junit.Assert.assertNotNull(intArray91);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[2021, 4, 16, 24813257]");
        org.junit.Assert.assertNotNull(intArray93);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[2021, 4, 16, 24813257]");
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 30 + "'", int94 == 30);
        org.junit.Assert.assertNotNull(locale96);
        org.junit.Assert.assertEquals(locale96.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str97 + "' != '" + "CA" + "'", str97, "CA");
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
        org.junit.Assert.assertEquals("'" + str99 + "' != '" + "1" + "'", str99, "1");
    }

    @Test
    public void test08134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08134");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property5 = localDateTime1.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        boolean boolean8 = localDateTime6.isBefore((org.joda.time.ReadablePartial) localDateTime7);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime7.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property11 = localDateTime7.dayOfMonth();
        java.util.Locale locale12 = java.util.Locale.FRENCH;
        java.util.Set<java.lang.String> strSet13 = locale12.getUnicodeLocaleAttributes();
        java.lang.String str14 = locale12.getVariant();
        java.lang.String str15 = property11.getAsText(locale12);
        java.lang.String str16 = property5.getAsShortText(locale12);
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime();
        boolean boolean19 = localDateTime17.isBefore((org.joda.time.ReadablePartial) localDateTime18);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime18.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property22 = localDateTime18.dayOfMonth();
        java.util.Locale locale23 = java.util.Locale.FRENCH;
        java.util.Set<java.lang.String> strSet24 = locale23.getUnicodeLocaleAttributes();
        java.lang.String str25 = locale23.getVariant();
        java.lang.String str26 = property22.getAsText(locale23);
        java.util.Locale locale27 = locale23.stripExtensions();
        java.util.Set<java.lang.Character> charSet28 = locale23.getExtensionKeys();
        java.lang.String str29 = property5.getAsText(locale23);
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime();
        boolean boolean32 = localDateTime30.isBefore((org.joda.time.ReadablePartial) localDateTime31);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime31.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property35 = localDateTime31.dayOfMonth();
        java.util.Locale locale36 = java.util.Locale.ROOT;
        java.lang.String str37 = locale36.toLanguageTag();
        java.lang.String str38 = property35.getAsText(locale36);
        java.lang.String str39 = property5.getAsText(locale36);
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.getDefault();
        int int42 = dateTimeZone40.getStandardOffset((long) (-100));
        java.util.TimeZone timeZone43 = dateTimeZone40.toTimeZone();
        java.util.TimeZone timeZone44 = dateTimeZone40.toTimeZone();
        long long46 = dateTimeZone40.previousTransition((long) 59472);
        boolean boolean47 = property5.equals((java.lang.Object) 59472);
        java.lang.String str48 = property5.getName();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "16" + "'", str15, "16");
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "16" + "'", str16, "16");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "16" + "'", str26, "16");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "fr");
        org.junit.Assert.assertNotNull(charSet28);
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "16" + "'", str29, "16");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "und" + "'", str37, "und");
// flaky:         org.junit.Assert.assertEquals("'" + str38 + "' != '" + "16" + "'", str38, "16");
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "16" + "'", str39, "16");
        org.junit.Assert.assertNotNull(dateTimeZone40);
// flaky:         org.junit.Assert.assertTrue("'" + int42 + "' != '" + 421200000 + "'", int42 == 421200000);
        org.junit.Assert.assertNotNull(timeZone43);
// flaky:         org.junit.Assert.assertEquals(timeZone43.getDisplayName(), "GMT+;7:00");
        org.junit.Assert.assertNotNull(timeZone44);
// flaky:         org.junit.Assert.assertEquals(timeZone44.getDisplayName(), "GMT+;7:00");
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 59472L + "'", long46 == 59472L);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "dayOfMonth" + "'", str48, "dayOfMonth");
    }

    @Test
    public void test08135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08135");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale.Builder builder3 = builder0.setLanguage("");
        java.util.Locale locale4 = builder0.build();
        java.util.Locale.Builder builder5 = builder0.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder8 = builder5.setExtension(' ', "2022-02-11T09:52:41.565");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed extension key:   [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test08136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08136");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(142L, chronology1);
    }

    @Test
    public void test08137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08137");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property5 = localDateTime1.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime6 = property5.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField7 = property5.getField();
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime();
        boolean boolean10 = localDateTime8.isBefore((org.joda.time.ReadablePartial) localDateTime9);
        int[] intArray11 = localDateTime9.getValues();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime9.plusYears((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime();
        boolean boolean16 = localDateTime14.isBefore((org.joda.time.ReadablePartial) localDateTime15);
        int[] intArray17 = localDateTime15.getValues();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime9.withFields((org.joda.time.ReadablePartial) localDateTime15);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.minusMillis((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.minusSeconds((int) '#');
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.withWeekOfWeekyear(50);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime22.withMinuteOfHour((int) (byte) 0);
        int int27 = dateTimeField7.getMinimumValue((org.joda.time.ReadablePartial) localDateTime22);
        java.lang.String str28 = dateTimeField7.toString();
        int int30 = dateTimeField7.get((long) 776);
        org.joda.time.field.FieldUtils.verifyValueBounds(dateTimeField7, 2375, (-400), 35318270);
        long long36 = dateTimeField7.roundHalfEven(1644572936810L);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[2022, 2, 16, 24848452]");
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(intArray17);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[2022, 2, 16, 24848452]");
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "DateTimeField[dayOfMonth]" + "'", str28, "DateTimeField[dayOfMonth]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 1644537600000L + "'", long36 == 1644537600000L);
    }

    @Test
    public void test08138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08138");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property5 = localDateTime1.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime6 = property5.withMinimumValue();
        long long7 = property5.remainder();
        java.lang.String str8 = property5.toString();
        java.util.Locale locale11 = new java.util.Locale("fra", "");
        java.util.Set<java.lang.String> strSet12 = locale11.getUnicodeLocaleAttributes();
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime();
        boolean boolean15 = localDateTime13.isBefore((org.joda.time.ReadablePartial) localDateTime14);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime14.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property18 = localDateTime14.dayOfMonth();
        org.joda.time.DurationField durationField19 = property18.getRangeDurationField();
        boolean boolean20 = strSet12.contains((java.lang.Object) durationField19);
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime();
        boolean boolean23 = localDateTime21.isBefore((org.joda.time.ReadablePartial) localDateTime22);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime22.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property26 = localDateTime22.dayOfMonth();
        boolean boolean27 = property26.isLeap();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone28);
        java.util.Locale locale31 = java.util.Locale.CHINESE;
        java.lang.String str32 = dateTimeZone28.getName((long) (short) 0, locale31);
        java.lang.String str33 = property26.getAsShortText(locale31);
        boolean boolean34 = strSet12.equals((java.lang.Object) locale31);
        java.lang.String str35 = locale31.getDisplayCountry();
        boolean boolean36 = locale31.hasExtensions();
        int int37 = property5.getMaximumShortTextLength(locale31);
        org.joda.time.DurationField durationField38 = property5.getRangeDurationField();
        org.joda.time.DateTimeField dateTimeField39 = property5.getField();
        org.joda.time.LocalDateTime localDateTime40 = property5.roundHalfFloorCopy();
        int int41 = localDateTime40.getMillisOfSecond();
        int int42 = localDateTime40.getEra();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
// flaky:         org.junit.Assert.assertTrue("'" + long7 + "' != '" + 24848533L + "'", long7 == 24848533L);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Property[dayOfMonth]" + "'", str8, "Property[dayOfMonth]");
        org.junit.Assert.assertEquals(locale11.toString(), "fra");
        org.junit.Assert.assertNotNull(strSet12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "zh");
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "+117:00" + "'", str32, "+117:00");
// flaky:         org.junit.Assert.assertEquals("'" + str33 + "' != '" + "16" + "'", str33, "16");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2 + "'", int37 == 2);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
    }

    @Test
    public void test08139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08139");
        java.util.Locale locale2 = new java.util.Locale("2022-02-11T09:48:28.422", "2022-02-11T09:49:26.348");
        org.junit.Assert.assertEquals(locale2.toString(), "2022-02-11t09:48:28.422_2022-02-11T09:49:26.348");
    }

    @Test
    public void test08140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08140");
        int int2 = org.joda.time.field.FieldUtils.safeMultiply(353, 1478000);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 521734000 + "'", int2 == 521734000);
    }

    @Test
    public void test08141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08141");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        int int1 = localDateTime0.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime3 = localDateTime0.minusMonths((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.minusMonths((int) (byte) 0);
        int int6 = localDateTime3.getWeekyear();
        org.joda.time.LocalDateTime.Property property7 = localDateTime3.dayOfYear();
        org.joda.time.LocalDateTime.Property property8 = localDateTime3.minuteOfHour();
        org.joda.time.LocalDateTime.Property property9 = localDateTime3.era();
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.LocalDateTime localDateTime11 = localDateTime3.minus(readablePeriod10);
        org.joda.time.LocalDateTime.Property property12 = localDateTime11.millisOfSecond();
        org.joda.time.LocalDateTime.Property property13 = localDateTime11.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime();
        boolean boolean16 = localDateTime14.isBefore((org.joda.time.ReadablePartial) localDateTime15);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime15.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property19 = localDateTime15.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime20 = property19.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField21 = property19.getField();
        int int22 = dateTimeField21.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime();
        int int24 = localDateTime23.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime26 = localDateTime23.minusMonths((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.minusMonths((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.plusWeeks(22);
        java.util.Locale locale32 = java.util.Locale.JAPANESE;
        java.lang.String str33 = dateTimeField21.getAsShortText((org.joda.time.ReadablePartial) localDateTime30, 22, locale32);
        int int35 = dateTimeField21.getLeapAmount((long) (byte) 1);
        int int37 = dateTimeField21.getMaximumValue((long) 35293506);
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime();
        boolean boolean40 = localDateTime38.isBefore((org.joda.time.ReadablePartial) localDateTime39);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime39.plusSeconds((int) (byte) 100);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter43 = null;
        java.lang.String str44 = localDateTime39.toString(dateTimeFormatter43);
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        org.joda.time.LocalDateTime.Property property46 = localDateTime39.property(dateTimeFieldType45);
        org.joda.time.LocalDateTime localDateTime47 = property46.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime49 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime50 = new org.joda.time.LocalDateTime();
        boolean boolean51 = localDateTime49.isBefore((org.joda.time.ReadablePartial) localDateTime50);
        int[] intArray52 = localDateTime50.getValues();
        org.joda.time.LocalDateTime localDateTime54 = localDateTime50.plusYears((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime55 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime56 = new org.joda.time.LocalDateTime();
        boolean boolean57 = localDateTime55.isBefore((org.joda.time.ReadablePartial) localDateTime56);
        int[] intArray58 = localDateTime56.getValues();
        org.joda.time.LocalDateTime localDateTime59 = localDateTime50.withFields((org.joda.time.ReadablePartial) localDateTime56);
        org.joda.time.LocalDateTime localDateTime61 = localDateTime59.minusMillis((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime63 = localDateTime61.minusSeconds((int) '#');
        org.joda.time.LocalDateTime localDateTime65 = localDateTime63.withWeekOfWeekyear(50);
        org.joda.time.LocalDateTime localDateTime67 = localDateTime63.withMinuteOfHour((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime69 = localDateTime63.minusMonths((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime71 = localDateTime69.plusYears(2022);
        int[] intArray72 = localDateTime69.getValues();
        int[] intArray74 = dateTimeField21.addWrapPartial((org.joda.time.ReadablePartial) localDateTime47, 31, intArray72, 0);
        int int75 = localDateTime47.getCenturyOfEra();
        org.joda.time.LocalDateTime localDateTime76 = localDateTime11.withFields((org.joda.time.ReadablePartial) localDateTime47);
        int int77 = localDateTime11.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime79 = localDateTime11.plusYears(353);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 22 + "'", int1 == 22);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 31 + "'", int22 == 31);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 22 + "'", int24 == 22);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "22" + "'", str33, "22");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 31 + "'", int37 == 31);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(localDateTime42);
// flaky:         org.junit.Assert.assertEquals("'" + str44 + "' != '" + "2022-02-16T06:54:08.574" + "'", str44, "2022-02-16T06:54:08.574");
        org.junit.Assert.assertNotNull(dateTimeFieldType45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(intArray52);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray52), "[2022, 2, 16, 24848574]");
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(intArray58);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[2022, 2, 16, 24848574]");
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertNotNull(localDateTime69);
        org.junit.Assert.assertNotNull(localDateTime71);
        org.junit.Assert.assertNotNull(intArray72);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[2021, 4, 16, 24813474]");
        org.junit.Assert.assertNotNull(intArray74);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[2021, 4, 16, 24813474]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 20 + "'", int75 == 20);
        org.junit.Assert.assertNotNull(localDateTime76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 2022 + "'", int77 == 2022);
        org.junit.Assert.assertNotNull(localDateTime79);
    }

    @Test
    public void test08142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08142");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.dayOfMonth();
        org.joda.time.LocalDateTime.Property property4 = localDateTime0.weekyear();
        java.util.Locale locale5 = java.util.Locale.CANADA;
        java.lang.String str6 = locale5.getCountry();
        int int7 = property4.getMaximumShortTextLength(locale5);
        java.lang.String str8 = locale5.getCountry();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "CA" + "'", str6, "CA");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 9 + "'", int7 == 9);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "CA" + "'", str8, "CA");
    }

    @Test
    public void test08143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08143");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        int[] intArray3 = localDateTime1.getValues();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.plusYears((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        boolean boolean8 = localDateTime6.isBefore((org.joda.time.ReadablePartial) localDateTime7);
        int[] intArray9 = localDateTime7.getValues();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime1.withFields((org.joda.time.ReadablePartial) localDateTime7);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusMillis((int) (short) 100);
        int int13 = localDateTime10.getMillisOfSecond();
        org.joda.time.LocalDateTime.Property property14 = localDateTime10.minuteOfHour();
        java.lang.String str15 = property14.getName();
        org.joda.time.LocalDateTime localDateTime17 = property14.addToCopy(35294270L);
        org.joda.time.LocalDateTime localDateTime18 = property14.roundHalfEvenCopy();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone19);
        java.util.Locale locale22 = java.util.Locale.CHINESE;
        java.lang.String str23 = dateTimeZone19.getName((long) (short) 0, locale22);
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.minusMillis((int) (byte) 1);
        java.lang.String str27 = localDateTime26.toString();
        org.joda.time.DateTime dateTime28 = localDateTime26.toDateTime();
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.minusMillis((int) (byte) 1);
        java.lang.String str32 = localDateTime31.toString();
        org.joda.time.DateTime dateTime33 = localDateTime31.toDateTime();
        boolean boolean34 = dateTime28.isEqual((org.joda.time.ReadableInstant) dateTime33);
        int int35 = dateTimeZone19.getOffset((org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str37 = dateTimeFieldType36.toString();
        java.lang.String str38 = dateTimeFieldType36.toString();
        boolean boolean39 = dateTime28.isSupported(dateTimeFieldType36);
        org.joda.time.Chronology chronology40 = dateTime28.getChronology();
        org.joda.time.Chronology chronology41 = dateTime28.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = org.joda.time.DateTimeFieldType.yearOfCentury();
        java.lang.String str43 = dateTimeFieldType42.getName();
        java.lang.String str44 = dateTimeFieldType42.toString();
        org.joda.time.DurationFieldType durationFieldType45 = dateTimeFieldType42.getDurationType();
        boolean boolean46 = dateTime28.isSupported(dateTimeFieldType42);
        boolean boolean47 = localDateTime18.isSupported(dateTimeFieldType42);
        org.joda.time.LocalDateTime localDateTime49 = localDateTime18.minusMinutes(59472);
        org.joda.time.LocalDateTime.Property property50 = localDateTime18.dayOfYear();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(intArray3);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[2022, 2, 16, 24848695]");
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(intArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[2022, 2, 16, 24848695]");
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 695 + "'", int13 == 695);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "minuteOfHour" + "'", str15, "minuteOfHour");
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "zh");
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+117:00" + "'", str23, "+117:00");
        org.junit.Assert.assertNotNull(localDateTime26);
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "2022-02-16T06:54:08.694" + "'", str27, "2022-02-16T06:54:08.694");
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(localDateTime31);
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "2022-02-16T06:54:08.694" + "'", str32, "2022-02-16T06:54:08.694");
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int35 + "' != '" + 421200000 + "'", int35 == 421200000);
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "weekyear" + "'", str37, "weekyear");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "weekyear" + "'", str38, "weekyear");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTimeFieldType42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "yearOfCentury" + "'", str43, "yearOfCentury");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "yearOfCentury" + "'", str44, "yearOfCentury");
        org.junit.Assert.assertNotNull(durationFieldType45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(property50);
    }

    @Test
    public void test08144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08144");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        int[] intArray3 = localDateTime1.getValues();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.plusYears((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        boolean boolean8 = localDateTime6.isBefore((org.joda.time.ReadablePartial) localDateTime7);
        int[] intArray9 = localDateTime7.getValues();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime1.withFields((org.joda.time.ReadablePartial) localDateTime7);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusMillis((int) (short) 100);
        int int13 = localDateTime10.getMillisOfSecond();
        org.joda.time.LocalDateTime.Property property14 = localDateTime10.minuteOfHour();
        java.lang.String str15 = property14.getName();
        org.joda.time.LocalDateTime localDateTime17 = property14.addToCopy(35294270L);
        org.joda.time.LocalDateTime localDateTime18 = property14.roundHalfEvenCopy();
        java.util.Locale locale19 = null;
        java.lang.String str20 = property14.getAsShortText(locale19);
        org.joda.time.LocalDateTime localDateTime21 = property14.roundHalfEvenCopy();
        java.lang.String str22 = property14.getName();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(intArray3);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[2022, 2, 16, 24848723]");
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(intArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[2022, 2, 16, 24848723]");
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 723 + "'", int13 == 723);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "minuteOfHour" + "'", str15, "minuteOfHour");
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime18);
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "54" + "'", str20, "54");
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "minuteOfHour" + "'", str22, "minuteOfHour");
    }

    @Test
    public void test08145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08145");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("2022-02-11T09:48:19.876");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
    }

    @Test
    public void test08146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08146");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis((-921));
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((long) 882, dateTimeZone2);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.withMillisOfDay(53);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(localDateTime5);
    }

    @Test
    public void test08147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08147");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.minusMillis((int) (byte) 1);
        java.lang.String str3 = localDateTime2.toString();
        org.joda.time.DateTime dateTime4 = localDateTime2.toDateTime();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusMillis((int) (byte) 1);
        java.lang.String str8 = localDateTime7.toString();
        org.joda.time.DateTime dateTime9 = localDateTime7.toDateTime();
        boolean boolean10 = dateTime4.isEqual((org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.dayOfYear();
        int int12 = dateTime9.get(dateTimeFieldType11);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.monthOfYear();
        boolean boolean14 = dateTime9.isSupported(dateTimeFieldType13);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str16 = dateTimeFieldType15.toString();
        java.lang.String str17 = dateTimeFieldType15.toString();
        int int18 = dateTime9.get(dateTimeFieldType15);
        org.joda.time.DateTimeZone dateTimeZone19 = dateTime9.getZone();
        long long21 = dateTimeZone19.previousTransition((long) 60);
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime();
        boolean boolean24 = localDateTime22.isBefore((org.joda.time.ReadablePartial) localDateTime23);
        int[] intArray25 = localDateTime23.getValues();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime23.plusYears((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime();
        boolean boolean30 = localDateTime28.isBefore((org.joda.time.ReadablePartial) localDateTime29);
        int[] intArray31 = localDateTime29.getValues();
        org.joda.time.LocalDateTime localDateTime32 = localDateTime23.withFields((org.joda.time.ReadablePartial) localDateTime29);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.minusMillis((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime34.minusSeconds((int) '#');
        org.joda.time.LocalDateTime localDateTime38 = localDateTime36.withWeekOfWeekyear(50);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime38.minusHours((int) (byte) -1);
        boolean boolean41 = dateTimeZone19.isLocalDateTimeGap(localDateTime38);
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime(dateTimeZone19);
        org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime45 = localDateTime43.minusMillis((int) (byte) 1);
        java.lang.String str46 = localDateTime45.toString();
        org.joda.time.DateTime dateTime47 = localDateTime45.toDateTime();
        org.joda.time.LocalDateTime localDateTime48 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime50 = localDateTime48.minusMillis((int) (byte) 1);
        java.lang.String str51 = localDateTime50.toString();
        org.joda.time.DateTime dateTime52 = localDateTime50.toDateTime();
        boolean boolean53 = dateTime47.isEqual((org.joda.time.ReadableInstant) dateTime52);
        org.joda.time.LocalDateTime localDateTime54 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime56 = localDateTime54.minusMillis((int) (byte) 1);
        java.lang.String str57 = localDateTime56.toString();
        org.joda.time.DateTime dateTime58 = localDateTime56.toDateTime();
        boolean boolean59 = dateTime47.isEqual((org.joda.time.ReadableInstant) dateTime58);
        org.joda.time.LocalDateTime localDateTime60 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime61 = new org.joda.time.LocalDateTime();
        boolean boolean62 = localDateTime60.isBefore((org.joda.time.ReadablePartial) localDateTime61);
        org.joda.time.LocalDateTime localDateTime64 = localDateTime61.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property65 = localDateTime61.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime66 = property65.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField67 = property65.getField();
        long long70 = dateTimeField67.addWrapField((long) (short) 1, (int) (byte) 100);
        int int72 = dateTimeField67.getMinimumValue((-1L));
        org.joda.time.ReadablePartial readablePartial73 = null;
        int[] intArray76 = new int[] { 11 };
        int[] intArray78 = dateTimeField67.addWrapPartial(readablePartial73, 100, intArray76, 0);
        boolean boolean79 = dateTime47.equals((java.lang.Object) 0);
        org.joda.time.LocalDateTime localDateTime80 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime81 = new org.joda.time.LocalDateTime();
        boolean boolean82 = localDateTime80.isBefore((org.joda.time.ReadablePartial) localDateTime81);
        org.joda.time.LocalDateTime localDateTime84 = localDateTime81.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property85 = localDateTime81.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime86 = property85.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField87 = property85.getField();
        org.joda.time.LocalDateTime localDateTime88 = property85.getLocalDateTime();
        org.joda.time.LocalDateTime.Property property89 = localDateTime88.dayOfYear();
        java.lang.String str90 = property89.getAsShortText();
        org.joda.time.LocalDateTime localDateTime91 = property89.roundHalfEvenCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType92 = property89.getFieldType();
        int int93 = dateTime47.get(dateTimeFieldType92);
        int int94 = dateTimeZone19.getOffset((org.joda.time.ReadableInstant) dateTime47);
        java.lang.String str95 = dateTime47.toString();
        java.lang.String str96 = dateTime47.toString();
        org.junit.Assert.assertNotNull(localDateTime2);
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "2022-02-16T06:54:08.774" + "'", str3, "2022-02-16T06:54:08.774");
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localDateTime7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "2022-02-16T06:54:08.774" + "'", str8, "2022-02-16T06:54:08.774");
        org.junit.Assert.assertNotNull(dateTime9);
// flaky:         org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 47 + "'", int12 == 47);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "weekyear" + "'", str16, "weekyear");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "weekyear" + "'", str17, "weekyear");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2022 + "'", int18 == 2022);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 60L + "'", long21 == 60L);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[2022, 2, 16, 24848775]");
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(intArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[2022, 2, 16, 24848775]");
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(localDateTime45);
// flaky:         org.junit.Assert.assertEquals("'" + str46 + "' != '" + "2022-02-16T06:54:08.774" + "'", str46, "2022-02-16T06:54:08.774");
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(localDateTime50);
// flaky:         org.junit.Assert.assertEquals("'" + str51 + "' != '" + "2022-02-16T06:54:08.774" + "'", str51, "2022-02-16T06:54:08.774");
        org.junit.Assert.assertNotNull(dateTime52);
// flaky:         org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(localDateTime56);
// flaky:         org.junit.Assert.assertEquals("'" + str57 + "' != '" + "2022-02-16T06:54:08.774" + "'", str57, "2022-02-16T06:54:08.774");
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 604800001L + "'", long70 == 604800001L);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[11]");
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[11]");
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(localDateTime84);
        org.junit.Assert.assertNotNull(property85);
        org.junit.Assert.assertNotNull(localDateTime86);
        org.junit.Assert.assertNotNull(dateTimeField87);
        org.junit.Assert.assertNotNull(localDateTime88);
        org.junit.Assert.assertNotNull(property89);
// flaky:         org.junit.Assert.assertEquals("'" + str90 + "' != '" + "47" + "'", str90, "47");
        org.junit.Assert.assertNotNull(localDateTime91);
        org.junit.Assert.assertNotNull(dateTimeFieldType92);
// flaky:         org.junit.Assert.assertTrue("'" + int93 + "' != '" + 47 + "'", int93 == 47);
// flaky:         org.junit.Assert.assertTrue("'" + int94 + "' != '" + 421200000 + "'", int94 == 421200000);
// flaky:         org.junit.Assert.assertEquals("'" + str95 + "' != '" + "2022-02-16T06:54:08.774+117:00" + "'", str95, "2022-02-16T06:54:08.774+117:00");
// flaky:         org.junit.Assert.assertEquals("'" + str96 + "' != '" + "2022-02-16T06:54:08.774+117:00" + "'", str96, "2022-02-16T06:54:08.774+117:00");
    }

    @Test
    public void test08148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08148");
        // The following exception was thrown during execution in test generation
        try {
            int int2 = org.joda.time.field.FieldUtils.safeMultiplyToInt((long) (-1208558), (long) 59850000);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Value cannot fit in an int: -72332196300000");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08149");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.parse("2022-02-11T09:49:29.379", dateTimeFormatter1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08150");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.minusMillis((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.plusDays(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.weekyear();
        boolean boolean6 = localDateTime2.isSupported(dateTimeFieldType5);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime2.plusMonths(0);
        org.joda.time.LocalDateTime.Property property9 = localDateTime2.millisOfDay();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime();
        int int11 = localDateTime10.getYearOfCentury();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str13 = dateTimeFieldType12.toString();
        int int14 = localDateTime10.indexOf(dateTimeFieldType12);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime2.withField(dateTimeFieldType12, 2022);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.withDayOfYear(30);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 22 + "'", int11 == 22);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "weekyear" + "'", str13, "weekyear");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
    }

    @Test
    public void test08151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08151");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property5 = localDateTime1.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime6 = property5.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField7 = property5.getField();
        long long9 = dateTimeField7.remainder((-1L));
        org.joda.time.DurationField durationField10 = dateTimeField7.getRangeDurationField();
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime();
        boolean boolean13 = localDateTime11.isBefore((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime12.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property16 = localDateTime12.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime17 = property16.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField18 = property16.getField();
        int int21 = dateTimeField18.getDifference(1L, 86399999L);
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime();
        int int23 = localDateTime22.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime22.minusMonths((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.minusMonths((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.plusWeeks(22);
        org.joda.time.LocalDateTime.Property property30 = localDateTime29.dayOfMonth();
        java.util.Locale locale35 = new java.util.Locale("11", "weekyear", "fra");
        java.lang.String str36 = locale35.getDisplayName();
        java.lang.String str37 = dateTimeField18.getAsShortText((org.joda.time.ReadablePartial) localDateTime29, (int) (byte) 1, locale35);
        int int38 = dateTimeField7.getMaximumShortTextLength(locale35);
        java.util.Locale locale39 = java.util.Locale.CHINESE;
        java.util.Locale locale42 = new java.util.Locale("fra", "");
        java.util.Set<java.lang.String> strSet43 = locale42.getUnicodeLocaleAttributes();
        java.lang.String str44 = locale42.getScript();
        java.lang.String str45 = locale42.getCountry();
        java.lang.String str46 = locale39.getDisplayLanguage(locale42);
        int int47 = dateTimeField7.getMaximumShortTextLength(locale39);
        org.joda.time.LocalDateTime localDateTime48 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime49 = new org.joda.time.LocalDateTime();
        boolean boolean50 = localDateTime48.isBefore((org.joda.time.ReadablePartial) localDateTime49);
        int[] intArray51 = localDateTime49.getValues();
        org.joda.time.LocalDateTime localDateTime53 = localDateTime49.plusYears((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime54 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime55 = new org.joda.time.LocalDateTime();
        boolean boolean56 = localDateTime54.isBefore((org.joda.time.ReadablePartial) localDateTime55);
        int[] intArray57 = localDateTime55.getValues();
        org.joda.time.LocalDateTime localDateTime58 = localDateTime49.withFields((org.joda.time.ReadablePartial) localDateTime55);
        org.joda.time.LocalDateTime localDateTime60 = localDateTime58.minusMillis((int) (short) 100);
        int int61 = localDateTime58.getMillisOfSecond();
        org.joda.time.LocalDateTime.Property property62 = localDateTime58.minuteOfHour();
        org.joda.time.ReadablePeriod readablePeriod63 = null;
        org.joda.time.LocalDateTime localDateTime64 = localDateTime58.minus(readablePeriod63);
        org.joda.time.LocalDateTime localDateTime66 = localDateTime58.withWeekyear(27);
        org.joda.time.ReadablePeriod readablePeriod67 = null;
        org.joda.time.LocalDateTime localDateTime69 = localDateTime58.withPeriodAdded(readablePeriod67, 448);
        org.joda.time.LocalDateTime localDateTime71 = localDateTime58.plusDays(0);
        int int72 = dateTimeField7.getMinimumValue((org.joda.time.ReadablePartial) localDateTime71);
        int int73 = localDateTime71.getCenturyOfEra();
        org.joda.time.LocalDateTime localDateTime74 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime76 = localDateTime74.minusMillis((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime78 = localDateTime76.plusDays(0);
        org.joda.time.LocalDateTime localDateTime80 = localDateTime78.plusMillis((int) '#');
        org.joda.time.DateTimeZone dateTimeZone82 = org.joda.time.DateTimeZone.forOffsetMillis((int) 'u');
        org.joda.time.LocalDateTime localDateTime83 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime78, dateTimeZone82);
        org.joda.time.LocalDateTime localDateTime84 = new org.joda.time.LocalDateTime(dateTimeZone82);
        boolean boolean85 = localDateTime71.isEqual((org.joda.time.ReadablePartial) localDateTime84);
        int[] intArray86 = localDateTime84.getValues();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 86399999L + "'", long9 == 86399999L);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 22 + "'", int23 == 22);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertEquals(locale35.toString(), "11_WEEKYEAR_fra");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "11 (WEEKYEAR,fra)" + "'", str36, "11 (WEEKYEAR,fra)");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "1" + "'", str37, "1");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2 + "'", int38 == 2);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "zh");
        org.junit.Assert.assertEquals(locale42.toString(), "fra");
        org.junit.Assert.assertNotNull(strSet43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "Chinese" + "'", str46, "Chinese");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2 + "'", int47 == 2);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(intArray51);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[2022, 2, 16, 24848937]");
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(intArray57);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[2022, 2, 16, 24848937]");
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(localDateTime60);
// flaky:         org.junit.Assert.assertTrue("'" + int61 + "' != '" + 937 + "'", int61 == 937);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertNotNull(localDateTime69);
        org.junit.Assert.assertNotNull(localDateTime71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 20 + "'", int73 == 20);
        org.junit.Assert.assertNotNull(localDateTime76);
        org.junit.Assert.assertNotNull(localDateTime78);
        org.junit.Assert.assertNotNull(localDateTime80);
        org.junit.Assert.assertNotNull(dateTimeZone82);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(intArray86);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray86), "[2022, 2, 11, 35649054]");
    }

    @Test
    public void test08152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08152");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime1.plusMinutes((int) '#');
        org.joda.time.LocalDateTime localDateTime8 = localDateTime1.minusMinutes((int) (short) 1);
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.LocalDateTime localDateTime11 = localDateTime1.withDurationAdded(readableDuration9, (int) (short) 100);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime();
        boolean boolean14 = localDateTime12.isBefore((org.joda.time.ReadablePartial) localDateTime13);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime13.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property17 = localDateTime13.dayOfMonth();
        java.util.Locale locale18 = java.util.Locale.FRENCH;
        java.util.Set<java.lang.String> strSet19 = locale18.getUnicodeLocaleAttributes();
        java.lang.String str20 = locale18.getVariant();
        java.lang.String str21 = property17.getAsText(locale18);
        org.joda.time.ReadableInstant readableInstant22 = null;
        int int23 = property17.getDifference(readableInstant22);
        int int24 = property17.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime25 = property17.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.minusMillis((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.plusDays(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDateTime localDateTime33 = localDateTime28.withField(dateTimeFieldType31, 0);
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime();
        boolean boolean36 = localDateTime34.isBefore((org.joda.time.ReadablePartial) localDateTime35);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime35.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime35.plusMinutes((int) '#');
        org.joda.time.LocalDateTime localDateTime42 = localDateTime35.minusMinutes((int) (short) 1);
        boolean boolean43 = localDateTime33.isAfter((org.joda.time.ReadablePartial) localDateTime42);
        org.joda.time.LocalDateTime.Property property44 = localDateTime33.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime46 = new org.joda.time.LocalDateTime();
        boolean boolean47 = localDateTime45.isBefore((org.joda.time.ReadablePartial) localDateTime46);
        org.joda.time.LocalDateTime localDateTime49 = localDateTime46.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime51 = localDateTime46.plusMinutes((int) '#');
        org.joda.time.LocalDateTime localDateTime53 = localDateTime46.minusMinutes((int) (short) 1);
        org.joda.time.LocalDateTime.Property property54 = localDateTime53.weekOfWeekyear();
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.LocalDateTime localDateTime56 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime53, chronology55);
        boolean boolean57 = localDateTime33.isEqual((org.joda.time.ReadablePartial) localDateTime53);
        org.joda.time.LocalDateTime localDateTime59 = localDateTime53.minusSeconds(5);
        boolean boolean60 = localDateTime25.isAfter((org.joda.time.ReadablePartial) localDateTime59);
        boolean boolean61 = localDateTime11.isBefore((org.joda.time.ReadablePartial) localDateTime25);
        org.joda.time.LocalDateTime localDateTime63 = localDateTime25.plusMillis(826);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "16" + "'", str21, "16");
// flaky:         org.junit.Assert.assertTrue("'" + int23 + "' != '" + 4 + "'", int23 == 4);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(dateTimeFieldType31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(localDateTime63);
    }

    @Test
    public void test08153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08153");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property5 = localDateTime1.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime6 = property5.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField7 = property5.getField();
        long long9 = dateTimeField7.remainder((-1L));
        java.util.Locale locale11 = java.util.Locale.UK;
        java.lang.String str12 = dateTimeField7.getAsShortText((long) 22, locale11);
        int int13 = dateTimeField7.getMinimumValue();
        java.util.Locale locale16 = new java.util.Locale("fra", "");
        java.util.Set<java.lang.String> strSet17 = locale16.getUnicodeLocaleAttributes();
        int int18 = dateTimeField7.getMaximumShortTextLength(locale16);
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime();
        boolean boolean21 = localDateTime19.isBefore((org.joda.time.ReadablePartial) localDateTime20);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime20.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property24 = localDateTime20.dayOfMonth();
        java.util.Locale locale25 = java.util.Locale.FRENCH;
        java.util.Set<java.lang.String> strSet26 = locale25.getUnicodeLocaleAttributes();
        java.lang.String str27 = locale25.getVariant();
        java.lang.String str28 = property24.getAsText(locale25);
        org.joda.time.ReadableInstant readableInstant29 = null;
        long long30 = property24.getDifferenceAsLong(readableInstant29);
        org.joda.time.LocalDateTime localDateTime31 = property24.roundCeilingCopy();
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.plusMonths((int) (byte) 100);
        int int34 = localDateTime31.getYear();
        int[] intArray35 = null;
        int int36 = dateTimeField7.getMinimumValue((org.joda.time.ReadablePartial) localDateTime31, intArray35);
        java.lang.String str38 = dateTimeField7.getAsShortText((long) 100);
        java.util.Locale locale40 = null;
        java.lang.String str41 = dateTimeField7.getAsShortText((-292275054), locale40);
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime();
        boolean boolean44 = localDateTime42.isBefore((org.joda.time.ReadablePartial) localDateTime43);
        org.joda.time.LocalDateTime localDateTime46 = localDateTime43.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property47 = localDateTime43.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime48 = property47.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField49 = property47.getField();
        long long51 = dateTimeField49.remainder((-1L));
        java.util.Locale locale53 = java.util.Locale.UK;
        java.lang.String str54 = dateTimeField49.getAsShortText((long) 22, locale53);
        int int55 = dateTimeField49.getMinimumValue();
        org.joda.time.LocalDateTime localDateTime56 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime57 = new org.joda.time.LocalDateTime();
        boolean boolean58 = localDateTime56.isBefore((org.joda.time.ReadablePartial) localDateTime57);
        org.joda.time.LocalDateTime localDateTime60 = localDateTime57.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime62 = localDateTime57.plusMinutes((int) '#');
        org.joda.time.LocalDateTime localDateTime64 = localDateTime57.minusMinutes((int) (short) 1);
        org.joda.time.LocalDateTime.Property property65 = localDateTime64.weekOfWeekyear();
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.LocalDateTime localDateTime67 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime64, chronology66);
        java.util.Locale locale69 = new java.util.Locale("2022-02-11T09:47:50.218");
        java.lang.String str70 = dateTimeField49.getAsShortText((org.joda.time.ReadablePartial) localDateTime64, locale69);
        org.joda.time.LocalDateTime localDateTime72 = localDateTime64.plusYears((-328800));
        int int73 = dateTimeField7.getMaximumValue((org.joda.time.ReadablePartial) localDateTime64);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 86399999L + "'", long9 == 86399999L);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "1" + "'", str12, "1");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertEquals(locale16.toString(), "fra");
        org.junit.Assert.assertNotNull(strSet17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "16" + "'", str28, "16");
// flaky:         org.junit.Assert.assertTrue("'" + long30 + "' != '" + 4L + "'", long30 == 4L);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2022 + "'", int34 == 2022);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "1" + "'", str38, "1");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "-292275054" + "'", str41, "-292275054");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 86399999L + "'", long51 == 86399999L);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "1" + "'", str54, "1");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertEquals(locale69.toString(), "2022-02-11t09:47:50.218");
// flaky:         org.junit.Assert.assertEquals("'" + str70 + "' != '" + "16" + "'", str70, "16");
        org.junit.Assert.assertNotNull(localDateTime72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 28 + "'", int73 == 28);
    }

    @Test
    public void test08154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08154");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property5 = localDateTime1.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime6 = property5.withMinimumValue();
        long long7 = property5.remainder();
        org.joda.time.LocalDateTime localDateTime8 = property5.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime9 = property5.withMaximumValue();
        int int10 = property5.get();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
// flaky:         org.junit.Assert.assertTrue("'" + long7 + "' != '" + 24849194L + "'", long7 == 24849194L);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime9);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 16 + "'", int10 == 16);
    }

    @Test
    public void test08155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08155");
        java.util.Locale locale0 = java.util.Locale.FRENCH;
        java.util.Set<java.lang.String> strSet1 = locale0.getUnicodeLocaleAttributes();
        java.lang.String str2 = locale0.getISO3Language();
        java.util.Set<java.lang.String> strSet3 = locale0.getUnicodeLocaleAttributes();
        java.util.List<java.util.Locale.LanguageRange> languageRangeList5 = java.util.Locale.LanguageRange.parse("und");
        java.util.Locale locale8 = new java.util.Locale("fra", "");
        java.util.Set<java.lang.String> strSet9 = locale8.getUnicodeLocaleAttributes();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime();
        boolean boolean12 = localDateTime10.isBefore((org.joda.time.ReadablePartial) localDateTime11);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime11.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property15 = localDateTime11.dayOfMonth();
        org.joda.time.DurationField durationField16 = property15.getRangeDurationField();
        boolean boolean17 = strSet9.contains((java.lang.Object) durationField16);
        java.util.List<java.lang.String> strList18 = java.util.Locale.filterTags(languageRangeList5, (java.util.Collection<java.lang.String>) strSet9);
        java.lang.String[] strArray23 = new java.lang.String[] { "fra", "", "+00:00", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet24 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet24, strArray23);
        java.lang.Object[] objArray26 = strSet24.toArray();
        boolean boolean27 = strSet24.isEmpty();
        java.util.Locale.LanguageRange[] languageRangeArray28 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList29 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList29, languageRangeArray28);
        java.util.Locale[] localeArray31 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList32 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList32, localeArray31);
        java.util.Locale locale34 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList29, (java.util.Collection<java.util.Locale>) localeList32);
        boolean boolean35 = strSet24.removeAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList29);
        boolean boolean36 = strSet9.retainAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList29);
        boolean boolean37 = strSet3.removeAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList29);
        java.util.stream.Stream<java.util.Locale.LanguageRange> languageRangeStream38 = languageRangeList29.stream();
        java.util.stream.Stream<java.util.Locale.LanguageRange> languageRangeStream39 = languageRangeList29.stream();
        java.util.stream.Stream<java.util.Locale.LanguageRange> languageRangeStream40 = languageRangeList29.parallelStream();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "fra" + "'", str2, "fra");
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(languageRangeList5);
        org.junit.Assert.assertEquals(locale8.toString(), "fra");
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(strList18);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[fra, , +00:00, hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[fra, , +00:00, hi!]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(languageRangeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(localeArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(locale34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(languageRangeStream38);
        org.junit.Assert.assertNotNull(languageRangeStream39);
        org.junit.Assert.assertNotNull(languageRangeStream40);
    }

    @Test
    public void test08156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08156");
        java.lang.String[] strArray4 = new java.lang.String[] { "fra", "", "+00:00", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet5 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet5, strArray4);
        java.lang.Object[] objArray7 = strSet5.toArray();
        boolean boolean8 = strSet5.isEmpty();
        java.util.Locale.LanguageRange[] languageRangeArray9 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList10 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList10, languageRangeArray9);
        java.util.Locale[] localeArray12 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList13 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList13, localeArray12);
        java.util.Locale locale15 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList10, (java.util.Collection<java.util.Locale>) localeList13);
        boolean boolean16 = strSet5.removeAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList10);
        java.util.Locale.LanguageRange[] languageRangeArray17 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList18 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList18, languageRangeArray17);
        java.util.Locale[] localeArray20 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList21 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList21, localeArray20);
        java.util.Locale locale23 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList18, (java.util.Collection<java.util.Locale>) localeList21);
        java.util.Locale.FilteringMode filteringMode24 = java.util.Locale.FilteringMode.EXTENDED_FILTERING;
        java.util.List<java.util.Locale> localeList25 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList10, (java.util.Collection<java.util.Locale>) localeList21, filteringMode24);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap26 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList27 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList10, strMap26);
        java.util.Locale locale30 = new java.util.Locale("fra", "");
        java.util.Set<java.lang.String> strSet31 = locale30.getUnicodeLocaleAttributes();
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime();
        boolean boolean34 = localDateTime32.isBefore((org.joda.time.ReadablePartial) localDateTime33);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime33.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property37 = localDateTime33.dayOfMonth();
        org.joda.time.DurationField durationField38 = property37.getRangeDurationField();
        boolean boolean39 = strSet31.contains((java.lang.Object) durationField38);
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime();
        boolean boolean42 = localDateTime40.isBefore((org.joda.time.ReadablePartial) localDateTime41);
        org.joda.time.LocalDateTime localDateTime44 = localDateTime41.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property45 = localDateTime41.dayOfMonth();
        boolean boolean46 = property45.isLeap();
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone47);
        java.util.Locale locale50 = java.util.Locale.CHINESE;
        java.lang.String str51 = dateTimeZone47.getName((long) (short) 0, locale50);
        java.lang.String str52 = property45.getAsShortText(locale50);
        boolean boolean53 = strSet31.equals((java.lang.Object) locale50);
        java.util.Locale.LanguageRange[] languageRangeArray54 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList55 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList55, languageRangeArray54);
        java.util.Locale[] localeArray57 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList58 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList58, localeArray57);
        java.util.Locale locale60 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList55, (java.util.Collection<java.util.Locale>) localeList58);
        boolean boolean61 = strSet31.removeAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList55);
        java.lang.String str62 = java.util.Locale.lookupTag(languageRangeList27, (java.util.Collection<java.lang.String>) strSet31);
        java.util.List<java.util.Locale.LanguageRange> languageRangeList64 = java.util.Locale.LanguageRange.parse("und");
        boolean boolean65 = strSet31.retainAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList64);
        java.util.Iterator<java.lang.String> strItor66 = strSet31.iterator();
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[fra, , +00:00, hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[fra, , +00:00, hi!]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(languageRangeArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(localeArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(locale15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(languageRangeArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(localeArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(locale23);
        org.junit.Assert.assertTrue("'" + filteringMode24 + "' != '" + java.util.Locale.FilteringMode.EXTENDED_FILTERING + "'", filteringMode24.equals(java.util.Locale.FilteringMode.EXTENDED_FILTERING));
        org.junit.Assert.assertNotNull(localeList25);
        org.junit.Assert.assertNotNull(languageRangeList27);
        org.junit.Assert.assertEquals(locale30.toString(), "fra");
        org.junit.Assert.assertNotNull(strSet31);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "zh");
// flaky:         org.junit.Assert.assertEquals("'" + str51 + "' != '" + "+117:00" + "'", str51, "+117:00");
// flaky:         org.junit.Assert.assertEquals("'" + str52 + "' != '" + "16" + "'", str52, "16");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(languageRangeArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(localeArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNull(locale60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNull(str62);
        org.junit.Assert.assertNotNull(languageRangeList64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(strItor66);
    }

    @Test
    public void test08157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08157");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.minusMillis((int) (byte) 1);
        java.lang.String str3 = localDateTime2.toString();
        org.joda.time.DateTime dateTime4 = localDateTime2.toDateTime();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusMillis((int) (byte) 1);
        java.lang.String str8 = localDateTime7.toString();
        org.joda.time.DateTime dateTime9 = localDateTime7.toDateTime();
        boolean boolean10 = dateTime4.isEqual((org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.dayOfYear();
        int int12 = dateTime9.get(dateTimeFieldType11);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.monthOfYear();
        boolean boolean14 = dateTime9.isSupported(dateTimeFieldType13);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str16 = dateTimeFieldType15.toString();
        java.lang.String str17 = dateTimeFieldType15.toString();
        int int18 = dateTime9.get(dateTimeFieldType15);
        org.joda.time.DateTimeZone dateTimeZone19 = dateTime9.getZone();
        long long21 = dateTimeZone19.previousTransition((long) 60);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.getDefault();
        java.util.Locale locale25 = null;
        java.lang.String str26 = dateTimeZone23.getName((long) (short) 10, locale25);
        long long28 = dateTimeZone22.getMillisKeepLocal(dateTimeZone23, (long) 874);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.getDefault();
        long long31 = dateTimeZone23.getMillisKeepLocal(dateTimeZone29, (long) '4');
        int int33 = dateTimeZone23.getOffsetFromLocal((long) 83);
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime36 = localDateTime34.minusMillis((int) (byte) 1);
        java.lang.String str37 = localDateTime36.toString();
        org.joda.time.DateTime dateTime38 = localDateTime36.toDateTime();
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime41 = localDateTime39.minusMillis((int) (byte) 1);
        java.lang.String str42 = localDateTime41.toString();
        org.joda.time.DateTime dateTime43 = localDateTime41.toDateTime();
        boolean boolean44 = dateTime38.isEqual((org.joda.time.ReadableInstant) dateTime43);
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime47 = localDateTime45.minusMillis((int) (byte) 1);
        java.lang.String str48 = localDateTime47.toString();
        org.joda.time.DateTime dateTime49 = localDateTime47.toDateTime();
        boolean boolean50 = dateTime38.isEqual((org.joda.time.ReadableInstant) dateTime49);
        org.joda.time.LocalDateTime localDateTime51 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime53 = localDateTime51.minusMillis((int) (byte) 1);
        java.lang.String str54 = localDateTime53.toString();
        org.joda.time.DateTime dateTime55 = localDateTime53.toDateTime();
        org.joda.time.LocalDateTime localDateTime56 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime58 = localDateTime56.minusMillis((int) (byte) 1);
        java.lang.String str59 = localDateTime58.toString();
        org.joda.time.DateTime dateTime60 = localDateTime58.toDateTime();
        boolean boolean61 = dateTime55.isEqual((org.joda.time.ReadableInstant) dateTime60);
        boolean boolean62 = dateTime38.isEqual((org.joda.time.ReadableInstant) dateTime60);
        int int63 = dateTimeZone23.getOffset((org.joda.time.ReadableInstant) dateTime60);
        org.joda.time.DateTimeZone dateTimeZone64 = dateTime60.getZone();
        org.joda.time.LocalDateTime localDateTime65 = org.joda.time.LocalDateTime.now(dateTimeZone64);
        long long67 = dateTimeZone19.getMillisKeepLocal(dateTimeZone64, (long) ' ');
        long long69 = dateTimeZone64.convertUTCToLocal(0L);
        org.junit.Assert.assertNotNull(localDateTime2);
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "2022-02-16T06:54:09.290" + "'", str3, "2022-02-16T06:54:09.290");
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localDateTime7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "2022-02-16T06:54:09.290" + "'", str8, "2022-02-16T06:54:09.290");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 47 + "'", int12 == 47);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "weekyear" + "'", str16, "weekyear");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "weekyear" + "'", str17, "weekyear");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2022 + "'", int18 == 2022);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 60L + "'", long21 == 60L);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "+117:00" + "'", str26, "+117:00");
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 874L + "'", long28 == 874L);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 52L + "'", long31 == 52L);
// flaky:         org.junit.Assert.assertTrue("'" + int33 + "' != '" + 421200000 + "'", int33 == 421200000);
        org.junit.Assert.assertNotNull(localDateTime36);
// flaky:         org.junit.Assert.assertEquals("'" + str37 + "' != '" + "2022-02-16T06:54:09.290" + "'", str37, "2022-02-16T06:54:09.290");
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(localDateTime41);
// flaky:         org.junit.Assert.assertEquals("'" + str42 + "' != '" + "2022-02-16T06:54:09.290" + "'", str42, "2022-02-16T06:54:09.290");
        org.junit.Assert.assertNotNull(dateTime43);
// flaky:         org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(localDateTime47);
// flaky:         org.junit.Assert.assertEquals("'" + str48 + "' != '" + "2022-02-16T06:54:09.290" + "'", str48, "2022-02-16T06:54:09.290");
        org.junit.Assert.assertNotNull(dateTime49);
// flaky:         org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(localDateTime53);
// flaky:         org.junit.Assert.assertEquals("'" + str54 + "' != '" + "2022-02-16T06:54:09.290" + "'", str54, "2022-02-16T06:54:09.290");
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(localDateTime58);
// flaky:         org.junit.Assert.assertEquals("'" + str59 + "' != '" + "2022-02-16T06:54:09.290" + "'", str59, "2022-02-16T06:54:09.290");
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
// flaky:         org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int63 + "' != '" + 421200000 + "'", int63 == 421200000);
        org.junit.Assert.assertNotNull(dateTimeZone64);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 32L + "'", long67 == 32L);
// flaky:         org.junit.Assert.assertTrue("'" + long69 + "' != '" + 421200000L + "'", long69 == 421200000L);
    }

    @Test
    public void test08158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08158");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusMillis((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.plusDays(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime3.withField(dateTimeFieldType6, 0);
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime();
        boolean boolean11 = localDateTime9.isBefore((org.joda.time.ReadablePartial) localDateTime10);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime10.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime10.plusMinutes((int) '#');
        org.joda.time.LocalDateTime localDateTime17 = localDateTime10.minusMinutes((int) (short) 1);
        boolean boolean18 = localDateTime8.isAfter((org.joda.time.ReadablePartial) localDateTime17);
        org.joda.time.LocalDateTime.Property property19 = localDateTime8.secondOfMinute();
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = property19.getFieldType();
        int int21 = property19.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime22 = property19.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.minusMillis((int) (byte) 1);
        java.lang.String str26 = localDateTime25.toString();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime25.minusMinutes((int) (byte) 10);
        org.joda.time.Chronology chronology29 = localDateTime28.getChronology();
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime22, chronology29);
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime((java.lang.Object) "2022-02-11T09:47:53.883", chronology29);
        org.joda.time.LocalDateTime localDateTime32 = org.joda.time.LocalDateTime.now(chronology29);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.plusMonths(78584223);
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime();
        boolean boolean37 = localDateTime35.isBefore((org.joda.time.ReadablePartial) localDateTime36);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime36.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property40 = localDateTime36.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime41 = property40.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField42 = property40.getField();
        long long44 = dateTimeField42.remainder((-1L));
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = dateTimeField42.getType();
        long long48 = dateTimeField42.getDifferenceAsLong(52L, (long) 10);
        long long51 = dateTimeField42.getDifferenceAsLong(0L, (long) 83);
        org.joda.time.DurationField durationField52 = dateTimeField42.getDurationField();
        org.joda.time.DateTimeFieldType dateTimeFieldType53 = dateTimeField42.getType();
        org.joda.time.DurationFieldType durationFieldType54 = dateTimeFieldType53.getDurationType();
        boolean boolean55 = localDateTime34.isSupported(dateTimeFieldType53);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 59 + "'", int21 == 59);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime25);
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "2022-02-16T06:54:09.316" + "'", str26, "2022-02-16T06:54:09.316");
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 86399999L + "'", long44 == 86399999L);
        org.junit.Assert.assertNotNull(dateTimeFieldType45);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
        org.junit.Assert.assertNotNull(durationField52);
        org.junit.Assert.assertNotNull(dateTimeFieldType53);
        org.junit.Assert.assertNotNull(durationFieldType54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
    }

    @Test
    public void test08159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08159");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property5 = localDateTime1.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime6 = property5.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField7 = property5.getField();
        long long10 = dateTimeField7.addWrapField((long) (short) 1, (int) (byte) 100);
        int int12 = dateTimeField7.getMinimumValue((-1L));
        org.joda.time.ReadablePartial readablePartial13 = null;
        int[] intArray16 = new int[] { 11 };
        int[] intArray18 = dateTimeField7.addWrapPartial(readablePartial13, 100, intArray16, 0);
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime();
        boolean boolean22 = localDateTime20.isBefore((org.joda.time.ReadablePartial) localDateTime21);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime21.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property25 = localDateTime21.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime();
        boolean boolean28 = localDateTime26.isBefore((org.joda.time.ReadablePartial) localDateTime27);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime27.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property31 = localDateTime27.dayOfMonth();
        java.util.Locale locale32 = java.util.Locale.FRENCH;
        java.util.Set<java.lang.String> strSet33 = locale32.getUnicodeLocaleAttributes();
        java.lang.String str34 = locale32.getVariant();
        java.lang.String str35 = property31.getAsText(locale32);
        java.lang.String str36 = property25.getAsShortText(locale32);
        org.joda.time.LocalDateTime localDateTime37 = property25.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime localDateTime38 = property25.roundFloorCopy();
        java.util.Locale locale41 = new java.util.Locale("", "weekyear");
        int int42 = property25.getMaximumShortTextLength(locale41);
        java.lang.String str43 = dateTimeField7.getAsText(0L, locale41);
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone44);
        java.util.Locale locale47 = java.util.Locale.CHINESE;
        java.lang.String str48 = dateTimeZone44.getName((long) (short) 0, locale47);
        org.joda.time.LocalDateTime localDateTime49 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime51 = localDateTime49.minusMillis((int) (byte) 1);
        java.lang.String str52 = localDateTime51.toString();
        org.joda.time.DateTime dateTime53 = localDateTime51.toDateTime();
        org.joda.time.LocalDateTime localDateTime54 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime56 = localDateTime54.minusMillis((int) (byte) 1);
        java.lang.String str57 = localDateTime56.toString();
        org.joda.time.DateTime dateTime58 = localDateTime56.toDateTime();
        boolean boolean59 = dateTime53.isEqual((org.joda.time.ReadableInstant) dateTime58);
        int int60 = dateTimeZone44.getOffset((org.joda.time.ReadableInstant) dateTime53);
        org.joda.time.LocalDateTime localDateTime61 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime63 = localDateTime61.minusMillis((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime65 = localDateTime63.plusDays(0);
        boolean boolean66 = dateTime53.equals((java.lang.Object) localDateTime65);
        int[] intArray67 = localDateTime65.getValues();
        org.joda.time.LocalDateTime localDateTime69 = localDateTime65.plusWeeks((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime71 = localDateTime65.withWeekyear((-292275054));
        int int72 = dateTimeField7.getMinimumValue((org.joda.time.ReadablePartial) localDateTime71);
        long long74 = dateTimeField7.roundFloor(3577705580L);
        long long76 = dateTimeField7.roundCeiling((long) 714);
        int int79 = dateTimeField7.getDifference((long) 3, 1644572884603L);
        boolean boolean80 = dateTimeField7.isLenient();
        org.joda.time.DurationField durationField81 = dateTimeField7.getDurationField();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 604800001L + "'", long10 == 604800001L);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[11]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[11]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
// flaky:         org.junit.Assert.assertEquals("'" + str35 + "' != '" + "16" + "'", str35, "16");
// flaky:         org.junit.Assert.assertEquals("'" + str36 + "' != '" + "16" + "'", str36, "16");
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertEquals(locale41.toString(), "_WEEKYEAR");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2 + "'", int42 == 2);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "1" + "'", str43, "1");
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "zh");
// flaky:         org.junit.Assert.assertEquals("'" + str48 + "' != '" + "+117:00" + "'", str48, "+117:00");
        org.junit.Assert.assertNotNull(localDateTime51);
// flaky:         org.junit.Assert.assertEquals("'" + str52 + "' != '" + "2022-02-16T06:54:09.360" + "'", str52, "2022-02-16T06:54:09.360");
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(localDateTime56);
// flaky:         org.junit.Assert.assertEquals("'" + str57 + "' != '" + "2022-02-16T06:54:09.360" + "'", str57, "2022-02-16T06:54:09.360");
        org.junit.Assert.assertNotNull(dateTime58);
// flaky:         org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int60 + "' != '" + 421200000 + "'", int60 == 421200000);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(intArray67);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray67), "[2022, 2, 16, 24849360]");
        org.junit.Assert.assertNotNull(localDateTime69);
        org.junit.Assert.assertNotNull(localDateTime71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 3542400000L + "'", long74 == 3542400000L);
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + 86400000L + "'", long76 == 86400000L);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-19034) + "'", int79 == (-19034));
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(durationField81);
    }

    @Test
    public void test08160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08160");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.util.Locale locale2 = null;
        java.lang.String str3 = dateTimeZone0.getName((long) (short) 10, locale2);
        long long7 = dateTimeZone0.convertLocalToUTC((long) (byte) 10, false, (long) 0);
        org.joda.time.LocalDateTime localDateTime8 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        org.joda.time.LocalDateTime.Property property9 = localDateTime8.era();
        java.lang.String str10 = property9.getName();
        org.joda.time.LocalDateTime localDateTime12 = property9.addWrapFieldToCopy(472);
        org.junit.Assert.assertNotNull(dateTimeZone0);
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+117:00" + "'", str3, "+117:00");
// flaky:         org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-421199990L) + "'", long7 == (-421199990L));
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "era" + "'", str10, "era");
        org.junit.Assert.assertNotNull(localDateTime12);
    }

    @Test
    public void test08161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08161");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.minusMillis((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.plusDays(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.withField(dateTimeFieldType5, 0);
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime();
        boolean boolean10 = localDateTime8.isBefore((org.joda.time.ReadablePartial) localDateTime9);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime9.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime9.plusMinutes((int) '#');
        org.joda.time.LocalDateTime localDateTime16 = localDateTime9.minusMinutes((int) (short) 1);
        boolean boolean17 = localDateTime7.isAfter((org.joda.time.ReadablePartial) localDateTime16);
        org.joda.time.LocalDateTime.Property property18 = localDateTime7.secondOfMinute();
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = property18.getFieldType();
        int int20 = property18.getMaximumValue();
        org.joda.time.DateTimeField dateTimeField21 = property18.getField();
        long long24 = dateTimeField21.addWrapField((long) 2000, 934);
        java.util.Locale locale27 = java.util.Locale.forLanguageTag("2022-02-11T09:50:37.691");
        java.lang.String str28 = dateTimeField21.getAsText((-51), locale27);
        java.lang.String str29 = locale27.getDisplayName();
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 59 + "'", int20 == 59);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 36000L + "'", long24 == 36000L);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "-51" + "'", str28, "-51");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
    }

    @Test
    public void test08162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08162");
        java.lang.String[] strArray4 = new java.lang.String[] { "fra", "", "+00:00", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet5 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet5, strArray4);
        java.lang.Object[] objArray7 = strSet5.toArray();
        boolean boolean8 = strSet5.isEmpty();
        java.util.Locale.LanguageRange[] languageRangeArray9 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList10 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList10, languageRangeArray9);
        java.util.Locale[] localeArray12 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList13 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList13, localeArray12);
        java.util.Locale locale15 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList10, (java.util.Collection<java.util.Locale>) localeList13);
        boolean boolean16 = strSet5.removeAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList10);
        java.lang.String[] strArray18 = java.util.TimeZone.getAvailableIDs(100);
        java.lang.String[] strArray19 = strSet5.toArray(strArray18);
        java.lang.Object[] objArray20 = strSet5.toArray();
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.minusMillis((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.plusDays(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime23.withField(dateTimeFieldType26, 0);
        org.joda.time.LocalDateTime.Property property29 = localDateTime28.hourOfDay();
        org.joda.time.LocalDateTime localDateTime30 = property29.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime32 = localDateTime30.withDayOfMonth((int) (short) 10);
        org.joda.time.DateTime dateTime33 = localDateTime30.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forOffsetMillis((int) 'u');
        long long39 = dateTimeZone35.convertLocalToUTC((long) 1, false, 822L);
        java.util.TimeZone timeZone40 = dateTimeZone35.toTimeZone();
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime((java.lang.Object) dateTime33, dateTimeZone35);
        boolean boolean42 = strSet5.remove((java.lang.Object) dateTime33);
        java.lang.Object obj43 = null;
        boolean boolean44 = strSet5.contains(obj43);
        java.util.Locale.Builder builder45 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder46 = builder45.clear();
        java.util.Locale.Builder builder48 = builder45.setLanguage("");
        java.util.Locale.Builder builder49 = builder48.clearExtensions();
        java.util.Locale locale50 = builder49.build();
        java.lang.String str51 = locale50.getScript();
        java.lang.String str52 = locale50.getLanguage();
        boolean boolean53 = strSet5.equals((java.lang.Object) str52);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[fra, , +00:00, hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[fra, , +00:00, hi!]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(languageRangeArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(localeArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(locale15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[fra, , +00:00, hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[fra, , +00:00, hi!]");
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + (-116L) + "'", long39 == (-116L));
        org.junit.Assert.assertNotNull(timeZone40);
        org.junit.Assert.assertEquals(timeZone40.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test08163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08163");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime1.plusMinutes((int) '#');
        org.joda.time.LocalDateTime localDateTime8 = localDateTime1.minusMinutes((int) (short) 1);
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.LocalDateTime localDateTime11 = localDateTime1.withDurationAdded(readableDuration9, (int) (short) 100);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime1.minusWeeks((int) (short) 1);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.LocalDateTime localDateTime15 = localDateTime1.plus(readablePeriod14);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.plusMinutes(0);
        org.joda.time.DateTime dateTime18 = localDateTime17.toDateTime();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime17.plusMinutes(400);
        org.joda.time.Chronology chronology21 = localDateTime20.getChronology();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(chronology21);
    }

    @Test
    public void test08164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08164");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property5 = localDateTime1.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime6 = property5.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField7 = property5.getField();
        long long10 = dateTimeField7.addWrapField((long) 6, (int) (byte) 0);
        java.lang.String str12 = dateTimeField7.getAsShortText((long) (byte) 0);
        java.lang.String str14 = dateTimeField7.getAsShortText((-116L));
        long long16 = dateTimeField7.roundCeiling((long) 11);
        java.util.Locale locale21 = new java.util.Locale("11", "weekyear", "fra");
        java.lang.String str22 = locale21.getDisplayName();
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime();
        boolean boolean25 = localDateTime23.isBefore((org.joda.time.ReadablePartial) localDateTime24);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime24.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property28 = localDateTime24.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime29 = property28.withMinimumValue();
        java.util.Locale locale30 = java.util.Locale.UK;
        java.lang.String str31 = property28.getAsShortText(locale30);
        java.lang.String str32 = locale21.getDisplayScript(locale30);
        java.lang.String str33 = dateTimeField7.getAsShortText((long) 715, locale30);
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime();
        boolean boolean36 = localDateTime34.isBefore((org.joda.time.ReadablePartial) localDateTime35);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime35.plusSeconds((int) (byte) 100);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter39 = null;
        java.lang.String str40 = localDateTime35.toString(dateTimeFormatter39);
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        org.joda.time.LocalDateTime.Property property42 = localDateTime35.property(dateTimeFieldType41);
        java.util.Locale locale43 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str44 = dateTimeField7.getAsText((org.joda.time.ReadablePartial) localDateTime35, locale43);
        java.lang.String str45 = dateTimeField7.getName();
        long long47 = dateTimeField7.remainder((long) 35401128);
        boolean boolean48 = dateTimeField7.isLenient();
        org.joda.time.DurationField durationField49 = dateTimeField7.getLeapDurationField();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 6L + "'", long10 == 6L);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "1" + "'", str12, "1");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "31" + "'", str14, "31");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 86400000L + "'", long16 == 86400000L);
        org.junit.Assert.assertEquals(locale21.toString(), "11_WEEKYEAR_fra");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "11 (WEEKYEAR,fra)" + "'", str22, "11 (WEEKYEAR,fra)");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "en_GB");
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "16" + "'", str31, "16");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "1" + "'", str33, "1");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(localDateTime38);
// flaky:         org.junit.Assert.assertEquals("'" + str40 + "' != '" + "2022-02-16T06:54:09.490" + "'", str40, "2022-02-16T06:54:09.490");
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "fr_CA");
// flaky:         org.junit.Assert.assertEquals("'" + str44 + "' != '" + "16" + "'", str44, "16");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "dayOfMonth" + "'", str45, "dayOfMonth");
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 35401128L + "'", long47 == 35401128L);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNull(durationField49);
    }

    @Test
    public void test08165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08165");
        java.util.Locale locale2 = new java.util.Locale("fra", "");
        java.util.Set<java.lang.String> strSet3 = locale2.getUnicodeLocaleAttributes();
        java.lang.String str4 = locale2.getScript();
        java.util.Set<java.lang.Character> charSet5 = locale2.getExtensionKeys();
        boolean boolean6 = locale2.hasExtensions();
        java.lang.String str7 = locale2.getISO3Country();
        java.util.Set<java.lang.String> strSet8 = locale2.getUnicodeLocaleKeys();
        java.lang.Object obj9 = locale2.clone();
        org.junit.Assert.assertEquals(locale2.toString(), "fra");
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(charSet5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertEquals(obj9.toString(), "fra");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj9), "fra");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj9), "fra");
    }

    @Test
    public void test08166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08166");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property5 = localDateTime1.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime6 = property5.withMinimumValue();
        long long7 = property5.remainder();
        org.joda.time.LocalDateTime localDateTime8 = property5.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime9 = property5.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.plusMillis(3);
        org.joda.time.LocalDateTime.Property property12 = localDateTime11.millisOfDay();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime11.minusMinutes(921);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.plusSeconds(571);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
// flaky:         org.junit.Assert.assertTrue("'" + long7 + "' != '" + 24849514L + "'", long7 == 24849514L);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
    }

    @Test
    public void test08167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08167");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((java.lang.Object) "2022-02-11T09:47:57.288");
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusHours(50);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.minusWeeks(222);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusSeconds(2669);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
    }

    @Test
    public void test08168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08168");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.minusMillis((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.plusDays(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.withField(dateTimeFieldType5, 0);
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime();
        boolean boolean10 = localDateTime8.isBefore((org.joda.time.ReadablePartial) localDateTime9);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime9.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime9.plusMinutes((int) '#');
        org.joda.time.LocalDateTime localDateTime16 = localDateTime9.minusMinutes((int) (short) 1);
        boolean boolean17 = localDateTime7.isAfter((org.joda.time.ReadablePartial) localDateTime16);
        org.joda.time.LocalDateTime.Property property18 = localDateTime7.secondOfMinute();
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = property18.getFieldType();
        int int20 = property18.getMaximumValue();
        org.joda.time.DateTimeField dateTimeField21 = property18.getField();
        java.util.Locale locale22 = java.util.Locale.KOREAN;
        java.lang.String str23 = locale22.getCountry();
        java.lang.String str24 = locale22.getDisplayName();
        java.lang.String str25 = locale22.getDisplayCountry();
        int int26 = dateTimeField21.getMaximumShortTextLength(locale22);
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime((long) 531);
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime();
        boolean boolean31 = localDateTime29.isBefore((org.joda.time.ReadablePartial) localDateTime30);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime30.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property34 = localDateTime30.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime35 = property34.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField36 = property34.getField();
        long long38 = dateTimeField36.remainder((-1L));
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = dateTimeField36.getType();
        boolean boolean40 = dateTimeField36.isSupported();
        boolean boolean41 = dateTimeField36.isLenient();
        org.joda.time.ReadablePartial readablePartial42 = null;
        java.util.Locale locale44 = java.util.Locale.CHINESE;
        java.util.Locale locale45 = java.util.Locale.ITALIAN;
        java.lang.String str46 = locale45.getDisplayCountry();
        java.util.Set<java.lang.String> strSet47 = locale45.getUnicodeLocaleAttributes();
        java.lang.String str48 = locale44.getDisplayScript(locale45);
        java.lang.String str49 = dateTimeField36.getAsText(readablePartial42, 35282145, locale44);
        org.joda.time.ReadablePartial readablePartial50 = null;
        org.joda.time.LocalDateTime localDateTime51 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime52 = new org.joda.time.LocalDateTime();
        boolean boolean53 = localDateTime51.isBefore((org.joda.time.ReadablePartial) localDateTime52);
        int[] intArray54 = localDateTime52.getValues();
        org.joda.time.LocalDateTime localDateTime56 = localDateTime52.plusYears((int) (byte) -1);
        int[] intArray57 = localDateTime52.getValues();
        int int58 = dateTimeField36.getMinimumValue(readablePartial50, intArray57);
        int int59 = dateTimeField21.getMaximumValue((org.joda.time.ReadablePartial) localDateTime28, intArray57);
        org.joda.time.DateTimeZone dateTimeZone61 = org.joda.time.DateTimeZone.forOffsetMillis((int) 'u');
        long long65 = dateTimeZone61.convertLocalToUTC((long) 1, false, 822L);
        java.util.TimeZone timeZone66 = dateTimeZone61.toTimeZone();
        long long69 = dateTimeZone61.convertLocalToUTC(0L, false);
        java.lang.String str70 = dateTimeZone61.toString();
        boolean boolean71 = dateTimeZone61.isFixed();
        org.joda.time.LocalDateTime localDateTime72 = new org.joda.time.LocalDateTime(dateTimeZone61);
        int int74 = dateTimeZone61.getOffset((long) 19034);
        org.joda.time.DateTime dateTime75 = localDateTime28.toDateTime(dateTimeZone61);
        java.lang.String str77 = dateTimeZone61.getNameKey(1764655083L);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 59 + "'", int20 == 59);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "cor\351en" + "'", str24, "cor\351en");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 86399999L + "'", long38 == 86399999L);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "zh");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "it");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(strSet47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "35282145" + "'", str49, "35282145");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(intArray54);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[2022, 2, 16, 24849531]");
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(intArray57);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[2022, 2, 16, 24849531]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 59 + "'", int59 == 59);
        org.junit.Assert.assertNotNull(dateTimeZone61);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + (-116L) + "'", long65 == (-116L));
        org.junit.Assert.assertNotNull(timeZone66);
        org.junit.Assert.assertEquals(timeZone66.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + (-117L) + "'", long69 == (-117L));
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "+00:00:00.117" + "'", str70, "+00:00:00.117");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 117 + "'", int74 == 117);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNull(str77);
    }

    @Test
    public void test08169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08169");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        int[] intArray3 = localDateTime1.getValues();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.plusYears((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        boolean boolean8 = localDateTime6.isBefore((org.joda.time.ReadablePartial) localDateTime7);
        int[] intArray9 = localDateTime7.getValues();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime1.withFields((org.joda.time.ReadablePartial) localDateTime7);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusMillis((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.minusSeconds((int) '#');
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.withWeekOfWeekyear(50);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime14.withMinuteOfHour((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.plusMinutes(1);
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime();
        boolean boolean23 = localDateTime21.isBefore((org.joda.time.ReadablePartial) localDateTime22);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime22.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime22.plusMinutes((int) '#');
        org.joda.time.LocalDateTime localDateTime29 = localDateTime22.minusMinutes((int) (short) 1);
        org.joda.time.ReadableDuration readableDuration30 = null;
        org.joda.time.LocalDateTime localDateTime32 = localDateTime22.withDurationAdded(readableDuration30, (int) (short) 100);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray33 = localDateTime22.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime35 = localDateTime22.withWeekyear((int) (short) -1);
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime();
        boolean boolean38 = localDateTime36.isBefore((org.joda.time.ReadablePartial) localDateTime37);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime37.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime37.plusMinutes((int) '#');
        org.joda.time.ReadablePeriod readablePeriod43 = null;
        org.joda.time.LocalDateTime localDateTime44 = localDateTime37.minus(readablePeriod43);
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.LocalDateTime localDateTime47 = localDateTime37.withField(dateTimeFieldType45, (int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime49 = localDateTime37.withYearOfEra(1);
        boolean boolean50 = localDateTime35.isEqual((org.joda.time.ReadablePartial) localDateTime37);
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.forOffsetMillis((int) 'x');
        java.lang.String str54 = dateTimeZone52.getNameKey(58L);
        boolean boolean55 = dateTimeZone52.isFixed();
        long long57 = dateTimeZone52.nextTransition(1814400058L);
        org.joda.time.LocalDateTime localDateTime58 = new org.joda.time.LocalDateTime(dateTimeZone52);
        org.joda.time.DateTime dateTime59 = localDateTime35.toDateTime(dateTimeZone52);
        org.joda.time.DateTime dateTime60 = localDateTime20.toDateTime((org.joda.time.ReadableInstant) dateTime59);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray61 = localDateTime20.getFieldTypes();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(intArray3);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[2022, 2, 16, 24849577]");
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(intArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[2022, 2, 16, 24849577]");
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(dateTimeFieldType45);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 1814400058L + "'", long57 == 1814400058L);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray61);
    }

    @Test
    public void test08170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08170");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.LanguageRange[] languageRangeArray1 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList2 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList2, languageRangeArray1);
        java.util.Locale[] localeArray4 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList5 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList5, localeArray4);
        java.util.Locale locale7 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList2, (java.util.Collection<java.util.Locale>) localeList5);
        java.util.Locale.LanguageRange[] languageRangeArray8 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList9 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList9, languageRangeArray8);
        java.util.Locale[] localeArray11 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList12 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList12, localeArray11);
        java.util.Locale locale14 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList9, (java.util.Collection<java.util.Locale>) localeList12);
        java.util.Locale.FilteringMode filteringMode15 = null;
        java.util.List<java.util.Locale> localeList16 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList2, (java.util.Collection<java.util.Locale>) localeList12, filteringMode15);
        java.util.Locale locale17 = java.util.Locale.FRENCH;
        java.util.Set<java.lang.String> strSet18 = locale17.getUnicodeLocaleAttributes();
        java.lang.Object[] objArray19 = strSet18.toArray();
        java.util.Locale.FilteringMode filteringMode20 = java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList21 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList2, (java.util.Collection<java.lang.String>) strSet18, filteringMode20);
        java.util.Locale locale22 = java.util.Locale.ITALIAN;
        java.lang.String str23 = locale22.getDisplayCountry();
        boolean boolean24 = strSet18.equals((java.lang.Object) locale22);
        java.util.Locale.Builder builder25 = builder0.setLocale(locale22);
        java.util.Locale.Builder builder26 = builder0.clear();
        java.util.Locale locale27 = builder0.build();
        java.util.Locale locale28 = builder0.build();
        org.junit.Assert.assertNotNull(languageRangeArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(localeArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(locale7);
        org.junit.Assert.assertNotNull(languageRangeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(localeArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(locale14);
        org.junit.Assert.assertNotNull(localeList16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet18);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[]");
        org.junit.Assert.assertTrue("'" + filteringMode20 + "' != '" + java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES + "'", filteringMode20.equals(java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList21);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "it");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "");
    }

    @Test
    public void test08171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08171");
        java.lang.Object obj0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime();
        boolean boolean3 = localDateTime1.isBefore((org.joda.time.ReadablePartial) localDateTime2);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property6 = localDateTime2.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime7 = property6.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField8 = property6.getField();
        long long10 = dateTimeField8.remainder((-1L));
        java.util.Locale locale12 = java.util.Locale.UK;
        java.lang.String str13 = dateTimeField8.getAsShortText((long) 22, locale12);
        int int14 = dateTimeField8.getMinimumValue();
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime();
        boolean boolean17 = localDateTime15.isBefore((org.joda.time.ReadablePartial) localDateTime16);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime16.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime16.plusMinutes((int) '#');
        org.joda.time.LocalDateTime localDateTime23 = localDateTime16.minusMinutes((int) (short) 1);
        org.joda.time.LocalDateTime.Property property24 = localDateTime23.weekOfWeekyear();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime23, chronology25);
        java.util.Locale locale28 = new java.util.Locale("2022-02-11T09:47:50.218");
        java.lang.String str29 = dateTimeField8.getAsShortText((org.joda.time.ReadablePartial) localDateTime23, locale28);
        java.util.Locale locale30 = java.util.Locale.FRENCH;
        java.lang.String str31 = locale30.getDisplayName();
        int int32 = dateTimeField8.getMaximumShortTextLength(locale30);
        boolean boolean33 = org.joda.time.field.FieldUtils.equals(obj0, (java.lang.Object) dateTimeField8);
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime();
        boolean boolean36 = localDateTime34.isBefore((org.joda.time.ReadablePartial) localDateTime35);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime35.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime35.plusMinutes((int) '#');
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        org.joda.time.LocalDateTime localDateTime42 = localDateTime35.minus(readablePeriod41);
        int int43 = dateTimeField8.getMaximumValue((org.joda.time.ReadablePartial) localDateTime35);
        java.util.Locale locale46 = new java.util.Locale("2022-02-11T09:47:51.404");
        java.lang.String str47 = dateTimeField8.getAsShortText(4, locale46);
        long long49 = dateTimeField8.roundHalfEven(1644572891294L);
        long long52 = dateTimeField8.getDifferenceAsLong((long) 46, (long) (byte) 100);
        boolean boolean53 = dateTimeField8.isLenient();
        boolean boolean55 = dateTimeField8.isLeap(42L);
        // The following exception was thrown during execution in test generation
        try {
            long long58 = dateTimeField8.set(748380726L, "2022-02-11T09:48:26.561");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2022-02-11T09:48:26.561\" for dayOfMonth is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 86399999L + "'", long10 == 86399999L);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "1" + "'", str13, "1");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertEquals(locale28.toString(), "2022-02-11t09:47:50.218");
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "16" + "'", str29, "16");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "fr");
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "fran\347ais" + "'", str31, "fran\347ais");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2 + "'", int32 == 2);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 28 + "'", int43 == 28);
        org.junit.Assert.assertEquals(locale46.toString(), "2022-02-11t09:47:51.404");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "4" + "'", str47, "4");
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 1644537600000L + "'", long49 == 1644537600000L);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
    }

    @Test
    public void test08172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08172");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone0);
        java.util.Locale locale3 = java.util.Locale.CHINESE;
        java.lang.String str4 = dateTimeZone0.getName((long) (short) 0, locale3);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusMillis((int) (byte) 1);
        java.lang.String str8 = localDateTime7.toString();
        org.joda.time.DateTime dateTime9 = localDateTime7.toDateTime();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusMillis((int) (byte) 1);
        java.lang.String str13 = localDateTime12.toString();
        org.joda.time.DateTime dateTime14 = localDateTime12.toDateTime();
        boolean boolean15 = dateTime9.isEqual((org.joda.time.ReadableInstant) dateTime14);
        int int16 = dateTimeZone0.getOffset((org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str18 = dateTimeFieldType17.toString();
        java.lang.String str19 = dateTimeFieldType17.toString();
        boolean boolean20 = dateTime9.isSupported(dateTimeFieldType17);
        org.joda.time.Chronology chronology21 = dateTime9.getChronology();
        org.joda.time.Chronology chronology22 = dateTime9.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.yearOfCentury();
        java.lang.String str24 = dateTimeFieldType23.getName();
        java.lang.String str25 = dateTimeFieldType23.toString();
        org.joda.time.DurationFieldType durationFieldType26 = dateTimeFieldType23.getDurationType();
        boolean boolean27 = dateTime9.isSupported(dateTimeFieldType23);
        org.joda.time.DateTimeZone dateTimeZone28 = dateTime9.getZone();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone28);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+117:00" + "'", str4, "+117:00");
        org.junit.Assert.assertNotNull(localDateTime7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "2022-02-16T06:54:09.683" + "'", str8, "2022-02-16T06:54:09.683");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(localDateTime12);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "2022-02-16T06:54:09.683" + "'", str13, "2022-02-16T06:54:09.683");
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 421200000 + "'", int16 == 421200000);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "weekyear" + "'", str18, "weekyear");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "weekyear" + "'", str19, "weekyear");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "yearOfCentury" + "'", str24, "yearOfCentury");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "yearOfCentury" + "'", str25, "yearOfCentury");
        org.junit.Assert.assertNotNull(durationFieldType26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(dateTimeZone28);
    }

    @Test
    public void test08173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08173");
        java.util.Locale locale3 = new java.util.Locale("2022-02-11T09:48:34.800", "2022-02-11T09:49:05.687", "2022-02-11T09:49:16.966");
        java.lang.String str4 = locale3.getCountry();
        org.junit.Assert.assertEquals(locale3.toString(), "2022-02-11t09:48:34.800_2022-02-11T09:49:05.687_2022-02-11T09:49:16.966");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022-02-11T09:49:05.687" + "'", str4, "2022-02-11T09:49:05.687");
    }

    @Test
    public void test08174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08174");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property5 = localDateTime1.dayOfMonth();
        int int6 = property5.get();
        org.joda.time.LocalDateTime localDateTime7 = property5.getLocalDateTime();
        int int8 = localDateTime7.getYear();
        int int9 = localDateTime7.getDayOfWeek();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 16 + "'", int6 == 16);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2022 + "'", int8 == 2022);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 3 + "'", int9 == 3);
    }

    @Test
    public void test08175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08175");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        int[] intArray3 = localDateTime1.getValues();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.plusYears((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        boolean boolean8 = localDateTime6.isBefore((org.joda.time.ReadablePartial) localDateTime7);
        int[] intArray9 = localDateTime7.getValues();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime1.withFields((org.joda.time.ReadablePartial) localDateTime7);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusMillis((int) (short) 100);
        int int13 = localDateTime10.getMillisOfSecond();
        org.joda.time.LocalDateTime.Property property14 = localDateTime10.minuteOfHour();
        java.lang.String str15 = property14.getName();
        org.joda.time.LocalDateTime localDateTime17 = property14.addToCopy(35294270L);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.minusDays((int) (byte) -1);
        int int20 = localDateTime17.getMillisOfSecond();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(intArray3);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[2022, 2, 16, 24849719]");
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(intArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[2022, 2, 16, 24849719]");
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 719 + "'", int13 == 719);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "minuteOfHour" + "'", str15, "minuteOfHour");
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 719 + "'", int20 == 719);
    }

    @Test
    public void test08176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08176");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime1.plusMinutes((int) '#');
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.LocalDateTime localDateTime8 = localDateTime1.minus(readablePeriod7);
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.LocalDateTime localDateTime10 = localDateTime1.plus(readableDuration9);
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.weekOfWeekyear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime15 = localDateTime10.withDate(35359692, (-704), 20);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -704 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
    }

    @Test
    public void test08177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08177");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.minusMillis((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.plusDays(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.withField(dateTimeFieldType5, 0);
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime();
        boolean boolean10 = localDateTime8.isBefore((org.joda.time.ReadablePartial) localDateTime9);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime9.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime9.plusMinutes((int) '#');
        org.joda.time.LocalDateTime localDateTime16 = localDateTime9.minusMinutes((int) (short) 1);
        boolean boolean17 = localDateTime7.isAfter((org.joda.time.ReadablePartial) localDateTime16);
        org.joda.time.LocalDateTime.Property property18 = localDateTime7.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime();
        boolean boolean21 = localDateTime19.isBefore((org.joda.time.ReadablePartial) localDateTime20);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime20.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime20.plusMinutes((int) '#');
        org.joda.time.LocalDateTime localDateTime27 = localDateTime20.minusMinutes((int) (short) 1);
        org.joda.time.LocalDateTime.Property property28 = localDateTime27.weekOfWeekyear();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime27, chronology29);
        boolean boolean31 = localDateTime7.isEqual((org.joda.time.ReadablePartial) localDateTime27);
        org.joda.time.LocalDateTime.Property property32 = localDateTime27.dayOfYear();
        int int33 = property32.get();
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime((long) 83);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime35.minusSeconds(83);
        org.joda.time.LocalDateTime.Property property38 = localDateTime35.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime40 = localDateTime35.plusDays((-100));
        org.joda.time.LocalDateTime localDateTime42 = localDateTime40.plusMonths(0);
        int int43 = localDateTime40.getHourOfDay();
        int int44 = property32.compareTo((org.joda.time.ReadablePartial) localDateTime40);
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = property32.getFieldType();
        java.lang.String str46 = dateTimeFieldType45.getName();
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(property32);
// flaky:         org.junit.Assert.assertTrue("'" + int33 + "' != '" + 47 + "'", int33 == 47);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime42);
// flaky:         org.junit.Assert.assertTrue("'" + int43 + "' != '" + 21 + "'", int43 == 21);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertNotNull(dateTimeFieldType45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "dayOfYear" + "'", str46, "dayOfYear");
    }

    @Test
    public void test08178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08178");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property5 = localDateTime1.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime6 = property5.withMinimumValue();
        long long7 = property5.remainder();
        java.lang.String str8 = property5.toString();
        java.util.Locale locale11 = new java.util.Locale("fra", "");
        java.util.Set<java.lang.String> strSet12 = locale11.getUnicodeLocaleAttributes();
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime();
        boolean boolean15 = localDateTime13.isBefore((org.joda.time.ReadablePartial) localDateTime14);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime14.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property18 = localDateTime14.dayOfMonth();
        org.joda.time.DurationField durationField19 = property18.getRangeDurationField();
        boolean boolean20 = strSet12.contains((java.lang.Object) durationField19);
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime();
        boolean boolean23 = localDateTime21.isBefore((org.joda.time.ReadablePartial) localDateTime22);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime22.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property26 = localDateTime22.dayOfMonth();
        boolean boolean27 = property26.isLeap();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone28);
        java.util.Locale locale31 = java.util.Locale.CHINESE;
        java.lang.String str32 = dateTimeZone28.getName((long) (short) 0, locale31);
        java.lang.String str33 = property26.getAsShortText(locale31);
        boolean boolean34 = strSet12.equals((java.lang.Object) locale31);
        java.lang.String str35 = locale31.getDisplayCountry();
        boolean boolean36 = locale31.hasExtensions();
        int int37 = property5.getMaximumShortTextLength(locale31);
        org.joda.time.DurationField durationField38 = property5.getRangeDurationField();
        org.joda.time.DateTimeField dateTimeField39 = property5.getField();
        org.joda.time.LocalDateTime localDateTime40 = property5.roundHalfFloorCopy();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime(chronology41);
        org.joda.time.LocalDateTime localDateTime44 = localDateTime42.plusYears(2);
        org.joda.time.ReadableDuration readableDuration45 = null;
        org.joda.time.LocalDateTime localDateTime46 = localDateTime44.plus(readableDuration45);
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.LocalDateTime localDateTime50 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime52 = localDateTime50.minusMillis((int) (byte) 1);
        java.lang.String str53 = localDateTime52.toString();
        org.joda.time.DateTime dateTime54 = localDateTime52.toDateTime();
        org.joda.time.LocalDateTime localDateTime55 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime57 = localDateTime55.minusMillis((int) (byte) 1);
        java.lang.String str58 = localDateTime57.toString();
        org.joda.time.DateTime dateTime59 = localDateTime57.toDateTime();
        boolean boolean60 = dateTime54.isEqual((org.joda.time.ReadableInstant) dateTime59);
        org.joda.time.Chronology chronology61 = dateTime59.getChronology();
        org.joda.time.LocalDateTime localDateTime62 = new org.joda.time.LocalDateTime((java.lang.Object) 35271574L, chronology61);
        org.joda.time.LocalDateTime localDateTime63 = new org.joda.time.LocalDateTime((long) 'u', chronology61);
        org.joda.time.LocalDateTime localDateTime64 = new org.joda.time.LocalDateTime(chronology61);
        boolean boolean65 = dateTimeFieldType47.isSupported(chronology61);
        org.joda.time.LocalDateTime localDateTime66 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime67 = new org.joda.time.LocalDateTime();
        boolean boolean68 = localDateTime66.isBefore((org.joda.time.ReadablePartial) localDateTime67);
        org.joda.time.LocalDateTime localDateTime70 = localDateTime67.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime72 = localDateTime67.plusMinutes((int) '#');
        org.joda.time.LocalDateTime localDateTime74 = localDateTime67.plusMonths(0);
        org.joda.time.LocalDateTime localDateTime76 = localDateTime74.minusWeeks(5);
        org.joda.time.Chronology chronology77 = localDateTime74.getChronology();
        org.joda.time.LocalDateTime localDateTime78 = org.joda.time.LocalDateTime.now(chronology77);
        org.joda.time.LocalDateTime localDateTime79 = new org.joda.time.LocalDateTime(chronology77);
        org.joda.time.DateTimeField dateTimeField80 = dateTimeFieldType47.getField(chronology77);
        boolean boolean81 = localDateTime46.isSupported(dateTimeFieldType47);
        java.lang.String str82 = dateTimeFieldType47.getName();
        int int83 = localDateTime40.get(dateTimeFieldType47);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
// flaky:         org.junit.Assert.assertTrue("'" + long7 + "' != '" + 24849757L + "'", long7 == 24849757L);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Property[dayOfMonth]" + "'", str8, "Property[dayOfMonth]");
        org.junit.Assert.assertEquals(locale11.toString(), "fra");
        org.junit.Assert.assertNotNull(strSet12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "zh");
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "+117:00" + "'", str32, "+117:00");
// flaky:         org.junit.Assert.assertEquals("'" + str33 + "' != '" + "16" + "'", str33, "16");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2 + "'", int37 == 2);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(dateTimeFieldType47);
        org.junit.Assert.assertNotNull(localDateTime52);
// flaky:         org.junit.Assert.assertEquals("'" + str53 + "' != '" + "2022-02-16T06:54:09.756" + "'", str53, "2022-02-16T06:54:09.756");
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(localDateTime57);
// flaky:         org.junit.Assert.assertEquals("'" + str58 + "' != '" + "2022-02-16T06:54:09.756" + "'", str58, "2022-02-16T06:54:09.756");
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertNotNull(localDateTime72);
        org.junit.Assert.assertNotNull(localDateTime74);
        org.junit.Assert.assertNotNull(localDateTime76);
        org.junit.Assert.assertNotNull(chronology77);
        org.junit.Assert.assertNotNull(localDateTime78);
        org.junit.Assert.assertNotNull(dateTimeField80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "weekyearOfCentury" + "'", str82, "weekyearOfCentury");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 22 + "'", int83 == 22);
    }

    @Test
    public void test08179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08179");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property5 = localDateTime1.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime6 = property5.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField7 = property5.getField();
        long long10 = dateTimeField7.addWrapField((long) 6, (int) (byte) 0);
        java.lang.String str12 = dateTimeField7.getAsShortText((long) (byte) 0);
        int int13 = dateTimeField7.getMaximumValue();
        long long15 = dateTimeField7.roundHalfFloor((long) (-120));
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime();
        boolean boolean19 = localDateTime17.isBefore((org.joda.time.ReadablePartial) localDateTime18);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime18.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property22 = localDateTime18.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime23 = property22.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField24 = property22.getField();
        long long26 = dateTimeField24.remainder((-1L));
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = dateTimeField24.getType();
        long long30 = dateTimeField24.getDifferenceAsLong(52L, (long) 10);
        long long33 = dateTimeField24.getDifferenceAsLong(0L, (long) 83);
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime();
        boolean boolean36 = localDateTime34.isBefore((org.joda.time.ReadablePartial) localDateTime35);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime35.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property39 = localDateTime35.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime40 = property39.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField41 = property39.getField();
        long long44 = dateTimeField41.addWrapField((long) 6, (int) (byte) 0);
        java.lang.String str46 = dateTimeField41.getAsShortText((long) (byte) 0);
        java.lang.String str48 = dateTimeField41.getAsShortText((-116L));
        long long50 = dateTimeField41.roundCeiling((long) 11);
        int int51 = dateTimeField41.getMaximumValue();
        java.util.Locale locale52 = java.util.Locale.KOREAN;
        java.lang.String str53 = locale52.getCountry();
        int int54 = dateTimeField41.getMaximumTextLength(locale52);
        int int55 = dateTimeField24.getMaximumShortTextLength(locale52);
        java.lang.String str56 = dateTimeField7.getAsText((int) '#', locale52);
        long long58 = dateTimeField7.roundHalfEven(0L);
        int int61 = dateTimeField7.getDifference((long) 162, 1643824504603L);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 6L + "'", long10 == 6L);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "1" + "'", str12, "1");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 31 + "'", int13 == 31);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 86399999L + "'", long26 == 86399999L);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 6L + "'", long44 == 6L);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "1" + "'", str46, "1");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "31" + "'", str48, "31");
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 86400000L + "'", long50 == 86400000L);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 31 + "'", int51 == 31);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 2 + "'", int54 == 2);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 2 + "'", int55 == 2);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "35" + "'", str56, "35");
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 0L + "'", long58 == 0L);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-19025) + "'", int61 == (-19025));
    }

    @Test
    public void test08180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08180");
        java.util.Locale locale2 = new java.util.Locale("fra", "");
        java.util.Set<java.lang.String> strSet3 = locale2.getUnicodeLocaleAttributes();
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        boolean boolean6 = localDateTime4.isBefore((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property9 = localDateTime5.dayOfMonth();
        org.joda.time.DurationField durationField10 = property9.getRangeDurationField();
        boolean boolean11 = strSet3.contains((java.lang.Object) durationField10);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime();
        boolean boolean14 = localDateTime12.isBefore((org.joda.time.ReadablePartial) localDateTime13);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime13.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property17 = localDateTime13.dayOfMonth();
        boolean boolean18 = property17.isLeap();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone19);
        java.util.Locale locale22 = java.util.Locale.CHINESE;
        java.lang.String str23 = dateTimeZone19.getName((long) (short) 0, locale22);
        java.lang.String str24 = property17.getAsShortText(locale22);
        boolean boolean25 = strSet3.equals((java.lang.Object) locale22);
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime();
        int int27 = localDateTime26.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime29 = localDateTime26.minusMonths((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.minusMonths((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.plusWeeks(22);
        org.joda.time.LocalDateTime.Property property34 = localDateTime33.millisOfSecond();
        boolean boolean35 = strSet3.remove((java.lang.Object) property34);
        boolean boolean36 = property34.isLeap();
        org.joda.time.LocalDateTime localDateTime38 = property34.addWrapFieldToCopy(592);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter39 = null;
        java.lang.String str40 = localDateTime38.toString(dateTimeFormatter39);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime42 = localDateTime38.withMinuteOfHour((-112));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -112 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(locale2.toString(), "fra");
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "zh");
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+117:00" + "'", str23, "+117:00");
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "16" + "'", str24, "16");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 22 + "'", int27 == 22);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(localDateTime38);
// flaky:         org.junit.Assert.assertEquals("'" + str40 + "' != '" + "2022-07-20T06:54:09.428" + "'", str40, "2022-07-20T06:54:09.428");
    }

    @Test
    public void test08181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08181");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Locale[] localeArray3 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList4 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList4, localeArray3);
        java.util.Locale locale6 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList4);
        java.util.Locale.LanguageRange[] languageRangeArray7 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList8 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList8, languageRangeArray7);
        java.util.Locale[] localeArray10 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList11 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList11, localeArray10);
        java.util.Locale locale13 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList8, (java.util.Collection<java.util.Locale>) localeList11);
        java.util.Locale.FilteringMode filteringMode14 = null;
        java.util.List<java.util.Locale> localeList15 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList11, filteringMode14);
        java.util.Locale locale16 = java.util.Locale.FRENCH;
        java.util.Set<java.lang.String> strSet17 = locale16.getUnicodeLocaleAttributes();
        java.lang.Object[] objArray18 = strSet17.toArray();
        java.util.Locale.FilteringMode filteringMode19 = java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList20 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet17, filteringMode19);
        java.util.Locale locale21 = java.util.Locale.ITALIAN;
        java.lang.String str22 = locale21.getDisplayCountry();
        boolean boolean23 = strSet17.equals((java.lang.Object) locale21);
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime();
        boolean boolean26 = localDateTime24.isBefore((org.joda.time.ReadablePartial) localDateTime25);
        org.joda.time.LocalDateTime.Property property27 = localDateTime24.dayOfMonth();
        org.joda.time.LocalDateTime.Property property28 = localDateTime24.weekyear();
        boolean boolean30 = property28.equals((java.lang.Object) 52L);
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = property28.getFieldType();
        java.util.Locale locale35 = new java.util.Locale("fra", "");
        java.util.Set<java.lang.String> strSet36 = locale35.getUnicodeLocaleAttributes();
        java.lang.String str37 = locale35.getScript();
        java.util.Set<java.lang.Character> charSet38 = locale35.getExtensionKeys();
        boolean boolean39 = locale35.hasExtensions();
        org.joda.time.LocalDateTime localDateTime40 = property28.setCopy("2022", locale35);
        java.lang.String str41 = locale21.getDisplayScript(locale35);
        java.util.Set<java.lang.String> strSet42 = locale21.getUnicodeLocaleAttributes();
        int int43 = strSet42.size();
        java.util.Spliterator<java.lang.String> strSpliterator44 = strSet42.spliterator();
        strSet42.clear();
        int int46 = strSet42.size();
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localeArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(locale6);
        org.junit.Assert.assertNotNull(languageRangeArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(localeArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(locale13);
        org.junit.Assert.assertNotNull(localeList15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet17);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[]");
        org.junit.Assert.assertTrue("'" + filteringMode19 + "' != '" + java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES + "'", filteringMode19.equals(java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "it");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType31);
        org.junit.Assert.assertEquals(locale35.toString(), "fra");
        org.junit.Assert.assertNotNull(strSet36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(charSet38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(strSet42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(strSpliterator44);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
    }

    @Test
    public void test08182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08182");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime.Property property2 = localDateTime1.yearOfEra();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.withMinuteOfHour(0);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withCenturyOfEra(20);
        int[] intArray7 = localDateTime6.getValues();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(intArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[2022, 2, 16, 21609935]");
    }

    @Test
    public void test08183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08183");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) -1);
        int int4 = dateTimeZone2.getStandardOffset(1644572877407L);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime();
        boolean boolean7 = localDateTime5.isBefore((org.joda.time.ReadablePartial) localDateTime6);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.plusSeconds((int) (byte) 100);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = null;
        java.lang.String str11 = localDateTime6.toString(dateTimeFormatter10);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        org.joda.time.LocalDateTime.Property property13 = localDateTime6.property(dateTimeFieldType12);
        org.joda.time.LocalDateTime localDateTime14 = property13.roundHalfFloorCopy();
        java.lang.String str15 = property13.getName();
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.minusMillis((int) (byte) 1);
        java.lang.String str19 = localDateTime18.toString();
        org.joda.time.DateTime dateTime20 = localDateTime18.toDateTime();
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.minusMillis((int) (byte) 1);
        java.lang.String str24 = localDateTime23.toString();
        org.joda.time.DateTime dateTime25 = localDateTime23.toDateTime();
        boolean boolean26 = dateTime20.isEqual((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.dayOfYear();
        int int28 = dateTime25.get(dateTimeFieldType27);
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = org.joda.time.DateTimeFieldType.monthOfYear();
        boolean boolean30 = dateTime25.isSupported(dateTimeFieldType29);
        long long31 = property13.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime25);
        int int32 = dateTimeZone2.getOffset((org.joda.time.ReadableInstant) dateTime25);
        java.lang.String str34 = dateTimeZone2.getShortName((long) 464);
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime((long) 292206053, dateTimeZone2);
        java.lang.String str37 = dateTimeZone2.getNameKey(35403628L);
        boolean boolean39 = dateTimeZone2.isStandardOffset(32150L);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-3600000) + "'", int4 == (-3600000));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(localDateTime9);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "2022-02-16T06:54:09.961" + "'", str11, "2022-02-16T06:54:09.961");
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "clockhourOfHalfday" + "'", str15, "clockhourOfHalfday");
        org.junit.Assert.assertNotNull(localDateTime18);
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "2022-02-16T06:54:09.960" + "'", str19, "2022-02-16T06:54:09.960");
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(localDateTime23);
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "2022-02-16T06:54:09.960" + "'", str24, "2022-02-16T06:54:09.960");
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
// flaky:         org.junit.Assert.assertTrue("'" + int28 + "' != '" + 47 + "'", int28 == 47);
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
// flaky:         org.junit.Assert.assertTrue("'" + long31 + "' != '" + 117L + "'", long31 == 117L);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-3600000) + "'", int32 == (-3600000));
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "-01:00" + "'", str34, "-01:00");
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
    }

    @Test
    public void test08184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08184");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(chronology0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusYears(2);
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.minusMillis((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.plusDays(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime6.withField(dateTimeFieldType9, 0);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime();
        boolean boolean14 = localDateTime12.isBefore((org.joda.time.ReadablePartial) localDateTime13);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime13.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime13.plusMinutes((int) '#');
        org.joda.time.LocalDateTime localDateTime20 = localDateTime13.minusMinutes((int) (short) 1);
        boolean boolean21 = localDateTime11.isAfter((org.joda.time.ReadablePartial) localDateTime20);
        org.joda.time.LocalDateTime.Property property22 = localDateTime11.secondOfMinute();
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = property22.getFieldType();
        org.joda.time.LocalDateTime localDateTime24 = property22.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime();
        boolean boolean27 = localDateTime25.isBefore((org.joda.time.ReadablePartial) localDateTime26);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime26.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime26.plusMinutes((int) '#');
        org.joda.time.LocalDateTime localDateTime33 = localDateTime26.minusMinutes((int) (short) 1);
        org.joda.time.ReadableDuration readableDuration34 = null;
        org.joda.time.LocalDateTime localDateTime36 = localDateTime26.withDurationAdded(readableDuration34, (int) (short) 100);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter37 = null;
        java.lang.String str38 = localDateTime26.toString(dateTimeFormatter37);
        boolean boolean39 = localDateTime24.isAfter((org.joda.time.ReadablePartial) localDateTime26);
        org.joda.time.LocalDateTime.Property property40 = localDateTime24.hourOfDay();
        org.joda.time.LocalDateTime localDateTime41 = localDateTime3.withFields((org.joda.time.ReadablePartial) localDateTime24);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime24.withDayOfMonth(28);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime43.minusMillis(30);
        org.joda.time.DateTimeField[] dateTimeFieldArray46 = localDateTime45.getFields();
        org.joda.time.LocalDateTime localDateTime48 = localDateTime45.plusWeeks(35293506);
        org.joda.time.ReadablePeriod readablePeriod49 = null;
        org.joda.time.LocalDateTime localDateTime50 = localDateTime48.minus(readablePeriod49);
        int int51 = localDateTime50.getYear();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime36);
// flaky:         org.junit.Assert.assertEquals("'" + str38 + "' != '" + "2022-02-16T06:54:09.982" + "'", str38, "2022-02-16T06:54:09.982");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(dateTimeFieldArray46);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 674390 + "'", int51 == 674390);
    }

    @Test
    public void test08185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08185");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property5 = localDateTime1.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime6 = property5.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField7 = property5.getField();
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime();
        boolean boolean10 = localDateTime8.isBefore((org.joda.time.ReadablePartial) localDateTime9);
        int[] intArray11 = localDateTime9.getValues();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime9.plusYears((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime();
        boolean boolean16 = localDateTime14.isBefore((org.joda.time.ReadablePartial) localDateTime15);
        int[] intArray17 = localDateTime15.getValues();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime9.withFields((org.joda.time.ReadablePartial) localDateTime15);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.minusMillis((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.minusSeconds((int) '#');
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.withWeekOfWeekyear(50);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime22.withMinuteOfHour((int) (byte) 0);
        int int27 = dateTimeField7.getMinimumValue((org.joda.time.ReadablePartial) localDateTime22);
        java.lang.String str28 = dateTimeField7.toString();
        int int31 = dateTimeField7.getDifference(0L, (long) (byte) -1);
        java.lang.String str32 = dateTimeField7.getName();
        org.joda.time.ReadablePartial readablePartial33 = null;
        java.util.Locale locale36 = new java.util.Locale("", "weekyear");
        java.util.Set<java.lang.String> strSet37 = locale36.getUnicodeLocaleKeys();
        java.lang.String str38 = locale36.getDisplayLanguage();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str39 = dateTimeField7.getAsShortText(readablePartial33, locale36);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[2022, 2, 16, 24850007]");
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(intArray17);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[2022, 2, 16, 24850007]");
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "DateTimeField[dayOfMonth]" + "'", str28, "DateTimeField[dayOfMonth]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "dayOfMonth" + "'", str32, "dayOfMonth");
        org.junit.Assert.assertEquals(locale36.toString(), "_WEEKYEAR");
        org.junit.Assert.assertNotNull(strSet37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
    }

    @Test
    public void test08186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08186");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property5 = localDateTime1.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime6 = property5.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField7 = property5.getField();
        long long10 = dateTimeField7.addWrapField((long) 6, (int) (byte) 0);
        java.lang.String str12 = dateTimeField7.getAsShortText((long) (byte) 0);
        java.lang.String str14 = dateTimeField7.getAsShortText((-116L));
        long long16 = dateTimeField7.roundCeiling((long) 11);
        java.util.Locale locale21 = new java.util.Locale("11", "weekyear", "fra");
        java.lang.String str22 = locale21.getDisplayName();
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime();
        boolean boolean25 = localDateTime23.isBefore((org.joda.time.ReadablePartial) localDateTime24);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime24.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property28 = localDateTime24.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime29 = property28.withMinimumValue();
        java.util.Locale locale30 = java.util.Locale.UK;
        java.lang.String str31 = property28.getAsShortText(locale30);
        java.lang.String str32 = locale21.getDisplayScript(locale30);
        java.lang.String str33 = dateTimeField7.getAsShortText((long) 715, locale30);
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime();
        boolean boolean36 = localDateTime34.isBefore((org.joda.time.ReadablePartial) localDateTime35);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime35.plusSeconds((int) (byte) 100);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter39 = null;
        java.lang.String str40 = localDateTime35.toString(dateTimeFormatter39);
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        org.joda.time.LocalDateTime.Property property42 = localDateTime35.property(dateTimeFieldType41);
        java.util.Locale locale43 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str44 = dateTimeField7.getAsText((org.joda.time.ReadablePartial) localDateTime35, locale43);
        boolean boolean45 = dateTimeField7.isLenient();
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = dateTimeField7.getType();
        org.joda.time.LocalDateTime localDateTime48 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime localDateTime49 = new org.joda.time.LocalDateTime();
        int int50 = localDateTime49.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime52 = localDateTime49.minusMonths((int) (short) 0);
        org.joda.time.Chronology chronology53 = localDateTime52.getChronology();
        org.joda.time.LocalDateTime localDateTime54 = new org.joda.time.LocalDateTime(chronology53);
        org.joda.time.LocalDateTime localDateTime55 = org.joda.time.LocalDateTime.now(chronology53);
        org.joda.time.LocalDateTime localDateTime56 = localDateTime48.withFields((org.joda.time.ReadablePartial) localDateTime55);
        org.joda.time.LocalDateTime localDateTime58 = localDateTime55.withMinuteOfHour(0);
        org.joda.time.LocalDateTime localDateTime60 = localDateTime58.plusWeeks(575);
        org.joda.time.LocalDateTime localDateTime62 = localDateTime60.minusSeconds(50);
        java.util.Locale.Category category64 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale65 = java.util.Locale.getDefault(category64);
        java.lang.String str66 = dateTimeField7.getAsText((org.joda.time.ReadablePartial) localDateTime60, 46971, locale65);
        org.joda.time.LocalDateTime.Property property67 = localDateTime60.minuteOfHour();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 6L + "'", long10 == 6L);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "1" + "'", str12, "1");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "31" + "'", str14, "31");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 86400000L + "'", long16 == 86400000L);
        org.junit.Assert.assertEquals(locale21.toString(), "11_WEEKYEAR_fra");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "11 (WEEKYEAR,fra)" + "'", str22, "11 (WEEKYEAR,fra)");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "en_GB");
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "16" + "'", str31, "16");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "1" + "'", str33, "1");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(localDateTime38);
// flaky:         org.junit.Assert.assertEquals("'" + str40 + "' != '" + "2022-02-16T06:54:10.021" + "'", str40, "2022-02-16T06:54:10.021");
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "fr_CA");
// flaky:         org.junit.Assert.assertEquals("'" + str44 + "' != '" + "16" + "'", str44, "16");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType46);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 22 + "'", int50 == 22);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertTrue("'" + category64 + "' != '" + java.util.Locale.Category.FORMAT + "'", category64.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale65);
// flaky:         org.junit.Assert.assertEquals(locale65.toString(), "");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "46971" + "'", str66, "46971");
        org.junit.Assert.assertNotNull(property67);
    }

    @Test
    public void test08187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08187");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime1.plusMinutes((int) '#');
        org.joda.time.LocalDateTime localDateTime8 = localDateTime1.withEra((int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone9);
        java.util.Locale locale12 = java.util.Locale.CHINESE;
        java.lang.String str13 = dateTimeZone9.getName((long) (short) 0, locale12);
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minusMillis((int) (byte) 1);
        java.lang.String str17 = localDateTime16.toString();
        org.joda.time.DateTime dateTime18 = localDateTime16.toDateTime();
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.minusMillis((int) (byte) 1);
        java.lang.String str22 = localDateTime21.toString();
        org.joda.time.DateTime dateTime23 = localDateTime21.toDateTime();
        boolean boolean24 = dateTime18.isEqual((org.joda.time.ReadableInstant) dateTime23);
        int int25 = dateTimeZone9.getOffset((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str27 = dateTimeFieldType26.toString();
        java.lang.String str28 = dateTimeFieldType26.toString();
        boolean boolean29 = dateTime18.isSupported(dateTimeFieldType26);
        org.joda.time.Chronology chronology30 = dateTime18.getChronology();
        org.joda.time.Chronology chronology31 = dateTime18.getChronology();
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime1, chronology31);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.plusYears((-222));
        org.joda.time.LocalDateTime.Property property35 = localDateTime34.dayOfMonth();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh");
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+117:00" + "'", str13, "+117:00");
        org.junit.Assert.assertNotNull(localDateTime16);
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "2022-02-16T06:54:10.069" + "'", str17, "2022-02-16T06:54:10.069");
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(localDateTime21);
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "2022-02-16T06:54:10.069" + "'", str22, "2022-02-16T06:54:10.069");
        org.junit.Assert.assertNotNull(dateTime23);
// flaky:         org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int25 + "' != '" + 421200000 + "'", int25 == 421200000);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "weekyear" + "'", str27, "weekyear");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "weekyear" + "'", str28, "weekyear");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(property35);
    }

    @Test
    public void test08188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08188");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        java.util.Locale locale2 = java.util.Locale.getDefault(category0);
        java.util.Locale locale3 = java.util.Locale.getDefault(category0);
        java.util.Locale locale4 = java.util.Locale.getDefault(category0);
        java.util.Locale locale6 = java.util.Locale.forLanguageTag("6");
        java.util.Locale.setDefault(category0, locale6);
        java.lang.String str8 = locale6.getVariant();
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale1);
// flaky:         org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertNotNull(locale2);
// flaky:         org.junit.Assert.assertEquals(locale2.toString(), "");
        org.junit.Assert.assertNotNull(locale3);
// flaky:         org.junit.Assert.assertEquals(locale3.toString(), "");
        org.junit.Assert.assertNotNull(locale4);
// flaky:         org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
    }

    @Test
    public void test08189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08189");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property5 = localDateTime1.dayOfMonth();
        java.util.Locale locale6 = java.util.Locale.FRENCH;
        java.util.Set<java.lang.String> strSet7 = locale6.getUnicodeLocaleAttributes();
        java.lang.String str8 = locale6.getVariant();
        java.lang.String str9 = property5.getAsText(locale6);
        org.joda.time.ReadableInstant readableInstant10 = null;
        long long11 = property5.getDifferenceAsLong(readableInstant10);
        org.joda.time.LocalDateTime localDateTime12 = property5.roundCeilingCopy();
        org.joda.time.LocalDateTime localDateTime13 = property5.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minusMillis((int) (byte) 1);
        java.lang.String str17 = localDateTime16.toString();
        org.joda.time.DateTime dateTime18 = localDateTime16.toDateTime();
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.minusMillis((int) (byte) 1);
        java.lang.String str22 = localDateTime21.toString();
        org.joda.time.DateTime dateTime23 = localDateTime21.toDateTime();
        boolean boolean24 = dateTime18.isEqual((org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.dayOfYear();
        int int26 = dateTime23.get(dateTimeFieldType25);
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.monthOfYear();
        boolean boolean28 = dateTime23.isSupported(dateTimeFieldType27);
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str30 = dateTimeFieldType29.toString();
        java.lang.String str31 = dateTimeFieldType29.toString();
        int int32 = dateTime23.get(dateTimeFieldType29);
        int int33 = localDateTime13.indexOf(dateTimeFieldType29);
        int int34 = localDateTime13.getDayOfMonth();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField36 = localDateTime13.getField(63);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 63");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "16" + "'", str9, "16");
// flaky:         org.junit.Assert.assertTrue("'" + long11 + "' != '" + 4L + "'", long11 == 4L);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime16);
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "2022-02-16T06:54:10.119" + "'", str17, "2022-02-16T06:54:10.119");
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(localDateTime21);
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "2022-02-16T06:54:10.119" + "'", str22, "2022-02-16T06:54:10.119");
        org.junit.Assert.assertNotNull(dateTime23);
// flaky:         org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
// flaky:         org.junit.Assert.assertTrue("'" + int26 + "' != '" + 47 + "'", int26 == 47);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "weekyear" + "'", str30, "weekyear");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "weekyear" + "'", str31, "weekyear");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2022 + "'", int32 == 2022);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 28 + "'", int34 == 28);
    }

    @Test
    public void test08190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08190");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property5 = localDateTime1.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime6 = property5.withMinimumValue();
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.year();
        org.joda.time.Interval interval8 = property7.toInterval();
        java.util.Locale locale13 = new java.util.Locale("2022-02-11T09:49:25.503", "2022-02-11T09:48:01.289", "2022-02-11T09:49:21.423");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime14 = property7.setCopy("2022-02-11T09:53:14.990", locale13);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2022-02-11T09:53:14.990\" for year is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(interval8);
        org.junit.Assert.assertEquals(locale13.toString(), "2022-02-11t09:49:25.503_2022-02-11T09:48:01.289_2022-02-11T09:49:21.423");
    }

    @Test
    public void test08191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08191");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property5 = localDateTime1.dayOfMonth();
        java.util.Locale locale6 = java.util.Locale.FRENCH;
        java.util.Set<java.lang.String> strSet7 = locale6.getUnicodeLocaleAttributes();
        java.lang.String str8 = locale6.getVariant();
        java.lang.String str9 = property5.getAsText(locale6);
        org.joda.time.ReadableInstant readableInstant10 = null;
        long long11 = property5.getDifferenceAsLong(readableInstant10);
        org.joda.time.LocalDateTime localDateTime12 = property5.roundCeilingCopy();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.plusMonths((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime12.withYearOfEra(117);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType18 = localDateTime12.getFieldType(35306586);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 35306586");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "16" + "'", str9, "16");
// flaky:         org.junit.Assert.assertTrue("'" + long11 + "' != '" + 4L + "'", long11 == 4L);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
    }

    @Test
    public void test08192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08192");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        int[] intArray3 = localDateTime1.getValues();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.plusYears((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        boolean boolean8 = localDateTime6.isBefore((org.joda.time.ReadablePartial) localDateTime7);
        int[] intArray9 = localDateTime7.getValues();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime1.withFields((org.joda.time.ReadablePartial) localDateTime7);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusMillis((int) (short) 100);
        int int13 = localDateTime10.getMillisOfSecond();
        org.joda.time.LocalDateTime.Property property14 = localDateTime10.minuteOfHour();
        java.lang.String str15 = property14.getName();
        org.joda.time.LocalDateTime localDateTime17 = property14.addToCopy(35294270L);
        org.joda.time.LocalDateTime localDateTime18 = property14.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.minusWeeks(55);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime22 = localDateTime20.withYearOfCentury(197);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 197 for yearOfCentury must be in the range [0,99]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(intArray3);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[2022, 2, 16, 24850169]");
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(intArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[2022, 2, 16, 24850169]");
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 169 + "'", int13 == 169);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "minuteOfHour" + "'", str15, "minuteOfHour");
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
    }

    @Test
    public void test08193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08193");
        org.joda.time.tz.NameProvider nameProvider0 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale1 = java.util.Locale.JAPAN;
        java.lang.String str4 = nameProvider0.getShortName(locale1, "und", "");
        java.util.Locale locale5 = java.util.Locale.GERMANY;
        java.lang.String str6 = locale5.getISO3Language();
        java.lang.String str7 = locale5.getDisplayCountry();
        java.lang.String str10 = nameProvider0.getName(locale5, "2022-02-11T09:49:30.991", "2022-02-11T09:48:55.827");
        java.util.Set<java.lang.String> strSet11 = locale5.getUnicodeLocaleKeys();
        org.junit.Assert.assertNotNull(nameProvider0);
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ja_JP");
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "deu" + "'", str6, "deu");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Allemagne" + "'", str7, "Allemagne");
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNotNull(strSet11);
    }

    @Test
    public void test08194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08194");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.minusMillis((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.plusDays(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.weekyear();
        boolean boolean6 = localDateTime2.isSupported(dateTimeFieldType5);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime2.plusMonths(0);
        org.joda.time.LocalDateTime.Property property9 = localDateTime2.millisOfDay();
        org.joda.time.LocalDateTime localDateTime10 = property9.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime11 = property9.roundHalfFloorCopy();
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime11);
    }

    @Test
    public void test08195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08195");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone2);
        java.util.Locale locale5 = java.util.Locale.CHINESE;
        java.lang.String str6 = dateTimeZone2.getName((long) (short) 0, locale5);
        java.util.Locale.Builder builder7 = builder0.setLocale(locale5);
        java.util.Set<java.lang.String> strSet8 = locale5.getUnicodeLocaleAttributes();
        java.util.TimeZone timeZone9 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forTimeZone(timeZone9);
        boolean boolean11 = dateTimeZone10.isFixed();
        boolean boolean12 = strSet8.remove((java.lang.Object) dateTimeZone10);
        java.util.TimeZone timeZone13 = dateTimeZone10.toTimeZone();
        java.lang.String str14 = dateTimeZone10.toString();
        java.util.Locale locale17 = new java.util.Locale("fra", "");
        java.util.Set<java.lang.String> strSet18 = locale17.getUnicodeLocaleAttributes();
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime();
        boolean boolean21 = localDateTime19.isBefore((org.joda.time.ReadablePartial) localDateTime20);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime20.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property24 = localDateTime20.dayOfMonth();
        org.joda.time.DurationField durationField25 = property24.getRangeDurationField();
        boolean boolean26 = strSet18.contains((java.lang.Object) durationField25);
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime();
        boolean boolean29 = localDateTime27.isBefore((org.joda.time.ReadablePartial) localDateTime28);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime28.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property32 = localDateTime28.dayOfMonth();
        boolean boolean33 = property32.isLeap();
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone34);
        java.util.Locale locale37 = java.util.Locale.CHINESE;
        java.lang.String str38 = dateTimeZone34.getName((long) (short) 0, locale37);
        java.lang.String str39 = property32.getAsShortText(locale37);
        boolean boolean40 = strSet18.equals((java.lang.Object) locale37);
        java.lang.String str41 = locale37.getISO3Country();
        java.util.Locale locale44 = new java.util.Locale("fra", "");
        java.util.Set<java.lang.String> strSet45 = locale44.getUnicodeLocaleAttributes();
        org.joda.time.LocalDateTime localDateTime46 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime47 = new org.joda.time.LocalDateTime();
        boolean boolean48 = localDateTime46.isBefore((org.joda.time.ReadablePartial) localDateTime47);
        org.joda.time.LocalDateTime localDateTime50 = localDateTime47.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property51 = localDateTime47.dayOfMonth();
        org.joda.time.DurationField durationField52 = property51.getRangeDurationField();
        boolean boolean53 = strSet45.contains((java.lang.Object) durationField52);
        org.joda.time.LocalDateTime localDateTime54 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime55 = new org.joda.time.LocalDateTime();
        boolean boolean56 = localDateTime54.isBefore((org.joda.time.ReadablePartial) localDateTime55);
        org.joda.time.LocalDateTime localDateTime58 = localDateTime55.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property59 = localDateTime55.dayOfMonth();
        boolean boolean60 = property59.isLeap();
        org.joda.time.DateTimeZone dateTimeZone61 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone61);
        java.util.Locale locale64 = java.util.Locale.CHINESE;
        java.lang.String str65 = dateTimeZone61.getName((long) (short) 0, locale64);
        java.lang.String str66 = property59.getAsShortText(locale64);
        boolean boolean67 = strSet45.equals((java.lang.Object) locale64);
        java.lang.String str68 = locale64.getISO3Country();
        java.lang.String str69 = locale64.getDisplayLanguage();
        java.lang.String str70 = locale37.getDisplayCountry(locale64);
        java.lang.String str71 = locale64.getVariant();
        java.lang.String str72 = locale64.getDisplayVariant();
        boolean boolean73 = dateTimeZone10.equals((java.lang.Object) locale64);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zh");
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+117:00" + "'", str6, "+117:00");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(timeZone13);
// flaky:         org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "GMT+;7:00");
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+117:00" + "'", str14, "+117:00");
        org.junit.Assert.assertEquals(locale17.toString(), "fra");
        org.junit.Assert.assertNotNull(strSet18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "zh");
// flaky:         org.junit.Assert.assertEquals("'" + str38 + "' != '" + "+117:00" + "'", str38, "+117:00");
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "16" + "'", str39, "16");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertEquals(locale44.toString(), "fra");
        org.junit.Assert.assertNotNull(strSet45);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(durationField52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(dateTimeZone61);
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "zh");
// flaky:         org.junit.Assert.assertEquals("'" + str65 + "' != '" + "+117:00" + "'", str65, "+117:00");
// flaky:         org.junit.Assert.assertEquals("'" + str66 + "' != '" + "16" + "'", str66, "16");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
// flaky:         org.junit.Assert.assertEquals("'" + str69 + "' != '" + "chinois" + "'", str69, "chinois");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
    }

    @Test
    public void test08196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08196");
        java.util.Locale locale0 = java.util.Locale.ITALIAN;
        java.lang.String str1 = locale0.getDisplayCountry();
        java.util.Set<java.lang.String> strSet2 = locale0.getUnicodeLocaleAttributes();
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime();
        boolean boolean5 = localDateTime3.isBefore((org.joda.time.ReadablePartial) localDateTime4);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property8 = localDateTime4.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime9 = property8.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField10 = property8.getField();
        int int13 = dateTimeField10.getDifference(1L, 86399999L);
        org.joda.time.DurationField durationField14 = dateTimeField10.getLeapDurationField();
        long long17 = dateTimeField10.set(1644572883261L, 1);
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime();
        boolean boolean20 = localDateTime18.isBefore((org.joda.time.ReadablePartial) localDateTime19);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime19.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime19.plusMinutes((int) '#');
        org.joda.time.LocalDateTime localDateTime26 = localDateTime19.withEra((int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone27);
        java.util.Locale locale30 = java.util.Locale.CHINESE;
        java.lang.String str31 = dateTimeZone27.getName((long) (short) 0, locale30);
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.minusMillis((int) (byte) 1);
        java.lang.String str35 = localDateTime34.toString();
        org.joda.time.DateTime dateTime36 = localDateTime34.toDateTime();
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime39 = localDateTime37.minusMillis((int) (byte) 1);
        java.lang.String str40 = localDateTime39.toString();
        org.joda.time.DateTime dateTime41 = localDateTime39.toDateTime();
        boolean boolean42 = dateTime36.isEqual((org.joda.time.ReadableInstant) dateTime41);
        int int43 = dateTimeZone27.getOffset((org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str45 = dateTimeFieldType44.toString();
        java.lang.String str46 = dateTimeFieldType44.toString();
        boolean boolean47 = dateTime36.isSupported(dateTimeFieldType44);
        org.joda.time.Chronology chronology48 = dateTime36.getChronology();
        org.joda.time.Chronology chronology49 = dateTime36.getChronology();
        org.joda.time.LocalDateTime localDateTime50 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime19, chronology49);
        org.joda.time.LocalDateTime localDateTime52 = localDateTime50.withYear((-120));
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.getDefault();
        java.util.Locale locale56 = null;
        java.lang.String str57 = dateTimeZone54.getName((long) (short) 10, locale56);
        long long59 = dateTimeZone53.getMillisKeepLocal(dateTimeZone54, (long) 874);
        org.joda.time.DateTimeZone dateTimeZone60 = org.joda.time.DateTimeZone.getDefault();
        long long62 = dateTimeZone54.getMillisKeepLocal(dateTimeZone60, (long) '4');
        int int64 = dateTimeZone54.getOffsetFromLocal((long) 83);
        long long68 = dateTimeZone54.convertLocalToUTC((long) 1, true, 0L);
        java.util.Locale locale70 = java.util.Locale.ROOT;
        java.lang.String str71 = locale70.getDisplayName();
        java.lang.String str72 = dateTimeZone54.getShortName((long) (-120), locale70);
        java.lang.String str73 = dateTimeField10.getAsShortText((org.joda.time.ReadablePartial) localDateTime50, locale70);
        boolean boolean74 = strSet2.contains((java.lang.Object) dateTimeField10);
        boolean boolean75 = strSet2.isEmpty();
        strSet2.clear();
        java.util.Iterator<java.lang.String> strItor77 = strSet2.iterator();
        java.util.Iterator<java.lang.String> strItor78 = strSet2.iterator();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNull(durationField14);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1643708883261L + "'", long17 == 1643708883261L);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "zh");
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "+117:00" + "'", str31, "+117:00");
        org.junit.Assert.assertNotNull(localDateTime34);
// flaky:         org.junit.Assert.assertEquals("'" + str35 + "' != '" + "2022-02-16T06:54:10.238" + "'", str35, "2022-02-16T06:54:10.238");
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(localDateTime39);
// flaky:         org.junit.Assert.assertEquals("'" + str40 + "' != '" + "2022-02-16T06:54:10.238" + "'", str40, "2022-02-16T06:54:10.238");
        org.junit.Assert.assertNotNull(dateTime41);
// flaky:         org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int43 + "' != '" + 421200000 + "'", int43 == 421200000);
        org.junit.Assert.assertNotNull(dateTimeFieldType44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "weekyear" + "'", str45, "weekyear");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "weekyear" + "'", str46, "weekyear");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertNotNull(dateTimeZone54);
// flaky:         org.junit.Assert.assertEquals("'" + str57 + "' != '" + "+117:00" + "'", str57, "+117:00");
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 874L + "'", long59 == 874L);
        org.junit.Assert.assertNotNull(dateTimeZone60);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 52L + "'", long62 == 52L);
// flaky:         org.junit.Assert.assertTrue("'" + int64 + "' != '" + 421200000 + "'", int64 == 421200000);
// flaky:         org.junit.Assert.assertTrue("'" + long68 + "' != '" + (-421199999L) + "'", long68 == (-421199999L));
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
// flaky:         org.junit.Assert.assertEquals("'" + str72 + "' != '" + "+117:00" + "'", str72, "+117:00");
// flaky:         org.junit.Assert.assertEquals("'" + str73 + "' != '" + "16" + "'", str73, "16");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(strItor77);
        org.junit.Assert.assertNotNull(strItor78);
    }

    @Test
    public void test08197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08197");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property5 = localDateTime1.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime6 = property5.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField7 = property5.getField();
        long long9 = dateTimeField7.remainder((-1L));
        java.util.Locale locale11 = java.util.Locale.UK;
        java.lang.String str12 = dateTimeField7.getAsShortText((long) 22, locale11);
        int int13 = dateTimeField7.getMinimumValue();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime();
        boolean boolean16 = localDateTime14.isBefore((org.joda.time.ReadablePartial) localDateTime15);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime15.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime15.plusMinutes((int) '#');
        org.joda.time.LocalDateTime localDateTime22 = localDateTime15.minusMinutes((int) (short) 1);
        org.joda.time.LocalDateTime.Property property23 = localDateTime22.weekOfWeekyear();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime22, chronology24);
        java.util.Locale locale27 = new java.util.Locale("2022-02-11T09:47:50.218");
        java.lang.String str28 = dateTimeField7.getAsShortText((org.joda.time.ReadablePartial) localDateTime22, locale27);
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime();
        boolean boolean31 = localDateTime29.isBefore((org.joda.time.ReadablePartial) localDateTime30);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime30.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime30.plusMinutes((int) '#');
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.LocalDateTime localDateTime37 = localDateTime30.minus(readablePeriod36);
        int int38 = localDateTime30.getDayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.getDefault();
        int int41 = dateTimeZone39.getStandardOffset((long) (-100));
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime(dateTimeZone39);
        int[] intArray43 = localDateTime42.getValues();
        int int44 = dateTimeField7.getMinimumValue((org.joda.time.ReadablePartial) localDateTime30, intArray43);
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime46 = new org.joda.time.LocalDateTime();
        boolean boolean47 = localDateTime45.isBefore((org.joda.time.ReadablePartial) localDateTime46);
        org.joda.time.LocalDateTime localDateTime49 = localDateTime46.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property50 = localDateTime46.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime51 = property50.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField52 = property50.getField();
        int int55 = dateTimeField52.getDifference(1L, 86399999L);
        org.joda.time.LocalDateTime localDateTime56 = new org.joda.time.LocalDateTime();
        int int57 = localDateTime56.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime59 = localDateTime56.minusMonths((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime61 = localDateTime59.minusMonths((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime63 = localDateTime61.plusWeeks(22);
        org.joda.time.LocalDateTime.Property property64 = localDateTime63.dayOfMonth();
        java.util.Locale locale69 = new java.util.Locale("11", "weekyear", "fra");
        java.lang.String str70 = locale69.getDisplayName();
        java.lang.String str71 = dateTimeField52.getAsShortText((org.joda.time.ReadablePartial) localDateTime63, (int) (byte) 1, locale69);
        int int72 = dateTimeField7.getMaximumTextLength(locale69);
        org.joda.time.DurationField durationField73 = dateTimeField7.getLeapDurationField();
        boolean boolean74 = dateTimeField7.isLenient();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 86399999L + "'", long9 == 86399999L);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "1" + "'", str12, "1");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertEquals(locale27.toString(), "2022-02-11t09:47:50.218");
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "16" + "'", str28, "16");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime37);
// flaky:         org.junit.Assert.assertTrue("'" + int38 + "' != '" + 16 + "'", int38 == 16);
        org.junit.Assert.assertNotNull(dateTimeZone39);
// flaky:         org.junit.Assert.assertTrue("'" + int41 + "' != '" + 421200000 + "'", int41 == 421200000);
        org.junit.Assert.assertNotNull(intArray43);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[2022, 2, 16, 24850280]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 22 + "'", int57 == 22);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertEquals(locale69.toString(), "11_WEEKYEAR_fra");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "11 (WEEKYEAR,fra)" + "'", str70, "11 (WEEKYEAR,fra)");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "1" + "'", str71, "1");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 2 + "'", int72 == 2);
        org.junit.Assert.assertNull(durationField73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
    }

    @Test
    public void test08198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08198");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusMillis((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.plusDays(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime3.withField(dateTimeFieldType6, 0);
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime();
        boolean boolean11 = localDateTime9.isBefore((org.joda.time.ReadablePartial) localDateTime10);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime10.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime10.plusMinutes((int) '#');
        org.joda.time.LocalDateTime localDateTime17 = localDateTime10.minusMinutes((int) (short) 1);
        boolean boolean18 = localDateTime8.isAfter((org.joda.time.ReadablePartial) localDateTime17);
        org.joda.time.LocalDateTime.Property property19 = localDateTime8.secondOfMinute();
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = property19.getFieldType();
        int int21 = property19.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime22 = property19.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.minusMillis((int) (byte) 1);
        java.lang.String str26 = localDateTime25.toString();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime25.minusMinutes((int) (byte) 10);
        org.joda.time.Chronology chronology29 = localDateTime28.getChronology();
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime22, chronology29);
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime(51574L, chronology29);
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime();
        boolean boolean34 = localDateTime32.isBefore((org.joda.time.ReadablePartial) localDateTime33);
        org.joda.time.LocalDateTime.Property property35 = localDateTime32.dayOfMonth();
        org.joda.time.LocalDateTime.Property property36 = localDateTime32.weekyear();
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        org.joda.time.LocalDateTime localDateTime39 = localDateTime32.withPeriodAdded(readablePeriod37, (-100));
        org.joda.time.LocalDateTime localDateTime41 = localDateTime39.minusDays(263);
        boolean boolean42 = localDateTime31.isBefore((org.joda.time.ReadablePartial) localDateTime41);
        org.joda.time.ReadableDuration readableDuration43 = null;
        org.joda.time.LocalDateTime localDateTime44 = localDateTime41.plus(readableDuration43);
        org.joda.time.Chronology chronology45 = localDateTime41.getChronology();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray46 = localDateTime41.getFieldTypes();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 59 + "'", int21 == 59);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime25);
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "2022-02-16T06:54:10.356" + "'", str26, "2022-02-16T06:54:10.356");
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray46);
    }

    @Test
    public void test08199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08199");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds((int) (byte) 100);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = null;
        java.lang.String str6 = localDateTime1.toString(dateTimeFormatter5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        org.joda.time.LocalDateTime.Property property8 = localDateTime1.property(dateTimeFieldType7);
        org.joda.time.LocalDateTime localDateTime9 = property8.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime10 = property8.withMinimumValue();
        org.joda.time.LocalDateTime localDateTime11 = property8.withMinimumValue();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.plusHours(74);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime11.minusMillis(35316041);
        int int16 = localDateTime15.getYearOfEra();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "2022-02-16T06:54:10.396" + "'", str6, "2022-02-16T06:54:10.396");
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2022 + "'", int16 == 2022);
    }

    @Test
    public void test08200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08200");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Locale[] localeArray3 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList4 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList4, localeArray3);
        java.util.Locale locale6 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList4);
        java.util.Locale.LanguageRange[] languageRangeArray7 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList8 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList8, languageRangeArray7);
        java.util.Locale[] localeArray10 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList11 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList11, localeArray10);
        java.util.Locale locale13 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList8, (java.util.Collection<java.util.Locale>) localeList11);
        java.util.Locale.FilteringMode filteringMode14 = null;
        java.util.List<java.util.Locale> localeList15 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList11, filteringMode14);
        java.util.Locale locale16 = java.util.Locale.FRENCH;
        java.util.Set<java.lang.String> strSet17 = locale16.getUnicodeLocaleAttributes();
        java.lang.Object[] objArray18 = strSet17.toArray();
        java.util.Locale.FilteringMode filteringMode19 = java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList20 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet17, filteringMode19);
        java.lang.Object[] objArray21 = strSet17.toArray();
        java.lang.String[] strArray26 = new java.lang.String[] { "fra", "", "+00:00", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet27 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet27, strArray26);
        java.lang.Object[] objArray29 = strSet27.toArray();
        boolean boolean30 = strSet27.isEmpty();
        java.util.Locale.LanguageRange[] languageRangeArray31 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList32 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList32, languageRangeArray31);
        java.util.Locale[] localeArray34 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList35 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList35, localeArray34);
        java.util.Locale locale37 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList32, (java.util.Collection<java.util.Locale>) localeList35);
        boolean boolean38 = strSet27.retainAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList32);
        java.util.stream.Stream<java.util.Locale.LanguageRange> languageRangeStream39 = languageRangeList32.stream();
        java.util.stream.Stream<java.util.Locale.LanguageRange> languageRangeStream40 = languageRangeList32.stream();
        java.lang.String[] strArray45 = new java.lang.String[] { "fra", "", "+00:00", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet46 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet46, strArray45);
        java.lang.Object[] objArray48 = strSet46.toArray();
        boolean boolean49 = strSet46.isEmpty();
        java.util.Locale.LanguageRange[] languageRangeArray50 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList51 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList51, languageRangeArray50);
        java.util.Locale[] localeArray53 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList54 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList54, localeArray53);
        java.util.Locale locale56 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList51, (java.util.Collection<java.util.Locale>) localeList54);
        boolean boolean57 = strSet46.removeAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList51);
        java.util.Locale.LanguageRange[] languageRangeArray58 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList59 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean60 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList59, languageRangeArray58);
        java.util.Locale[] localeArray61 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList62 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList62, localeArray61);
        java.util.Locale locale64 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList59, (java.util.Collection<java.util.Locale>) localeList62);
        java.util.Locale.FilteringMode filteringMode65 = java.util.Locale.FilteringMode.EXTENDED_FILTERING;
        java.util.List<java.util.Locale> localeList66 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList51, (java.util.Collection<java.util.Locale>) localeList62, filteringMode65);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap67 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList68 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList51, strMap67);
        java.util.stream.Stream<java.util.Locale.LanguageRange> languageRangeStream69 = languageRangeList68.stream();
        java.util.Locale.LanguageRange[] languageRangeArray70 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList71 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean72 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList71, languageRangeArray70);
        java.util.Locale[] localeArray73 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList74 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean75 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList74, localeArray73);
        java.util.Locale locale76 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList71, (java.util.Collection<java.util.Locale>) localeList74);
        java.util.Locale.LanguageRange[] languageRangeArray77 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList78 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean79 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList78, languageRangeArray77);
        java.util.Locale[] localeArray80 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList81 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean82 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList81, localeArray80);
        java.util.Locale locale83 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList78, (java.util.Collection<java.util.Locale>) localeList81);
        java.util.Locale.FilteringMode filteringMode84 = null;
        java.util.List<java.util.Locale> localeList85 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList71, (java.util.Collection<java.util.Locale>) localeList81, filteringMode84);
        java.util.Locale locale86 = java.util.Locale.lookup(languageRangeList68, (java.util.Collection<java.util.Locale>) localeList81);
        java.util.List<java.util.Locale> localeList87 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList32, (java.util.Collection<java.util.Locale>) localeList81);
        java.util.stream.Stream<java.util.Locale.LanguageRange> languageRangeStream88 = languageRangeList32.parallelStream();
        boolean boolean89 = strSet17.retainAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList32);
        java.util.stream.Stream<java.util.Locale.LanguageRange> languageRangeStream90 = languageRangeList32.stream();
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localeArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(locale6);
        org.junit.Assert.assertNotNull(languageRangeArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(localeArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(locale13);
        org.junit.Assert.assertNotNull(localeList15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet17);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[]");
        org.junit.Assert.assertTrue("'" + filteringMode19 + "' != '" + java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES + "'", filteringMode19.equals(java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList20);
        org.junit.Assert.assertNotNull(objArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray21), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray21), "[]");
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(objArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray29), "[fra, , +00:00, hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray29), "[fra, , +00:00, hi!]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(languageRangeArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(localeArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNull(locale37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(languageRangeStream39);
        org.junit.Assert.assertNotNull(languageRangeStream40);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(objArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray48), "[fra, , +00:00, hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray48), "[fra, , +00:00, hi!]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(languageRangeArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(localeArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNull(locale56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(languageRangeArray58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(localeArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNull(locale64);
        org.junit.Assert.assertTrue("'" + filteringMode65 + "' != '" + java.util.Locale.FilteringMode.EXTENDED_FILTERING + "'", filteringMode65.equals(java.util.Locale.FilteringMode.EXTENDED_FILTERING));
        org.junit.Assert.assertNotNull(localeList66);
        org.junit.Assert.assertNotNull(languageRangeList68);
        org.junit.Assert.assertNotNull(languageRangeStream69);
        org.junit.Assert.assertNotNull(languageRangeArray70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(localeArray73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNull(locale76);
        org.junit.Assert.assertNotNull(languageRangeArray77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(localeArray80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNull(locale83);
        org.junit.Assert.assertNotNull(localeList85);
        org.junit.Assert.assertNull(locale86);
        org.junit.Assert.assertNotNull(localeList87);
        org.junit.Assert.assertNotNull(languageRangeStream88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(languageRangeStream90);
    }

    @Test
    public void test08201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08201");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime1.plusMinutes((int) '#');
        org.joda.time.LocalDateTime localDateTime8 = localDateTime1.withEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property9 = localDateTime8.dayOfWeek();
        java.lang.String str10 = property9.getAsText();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "mercredi" + "'", str10, "mercredi");
    }

    @Test
    public void test08202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08202");
        java.util.Locale locale2 = new java.util.Locale("fra", "");
        java.util.Set<java.lang.String> strSet3 = locale2.getUnicodeLocaleAttributes();
        java.lang.String str4 = locale2.getScript();
        java.util.Set<java.lang.Character> charSet5 = locale2.getExtensionKeys();
        java.util.Set<java.lang.String> strSet6 = locale2.getUnicodeLocaleKeys();
        java.util.Set<java.lang.String> strSet7 = locale2.getUnicodeLocaleAttributes();
        java.util.Locale locale10 = new java.util.Locale("2022-02-11T09:47:59.996", "2022-02-11T09:48:12.885");
        boolean boolean11 = strSet7.remove((java.lang.Object) "2022-02-11T09:47:59.996");
        java.lang.Object[] objArray12 = strSet7.toArray();
        java.lang.String[] strArray17 = new java.lang.String[] { "fra", "", "+00:00", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet18 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet18, strArray17);
        java.lang.Object[] objArray20 = strSet18.toArray();
        boolean boolean21 = strSet18.isEmpty();
        java.util.Locale.LanguageRange[] languageRangeArray22 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList23 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList23, languageRangeArray22);
        java.util.Locale[] localeArray25 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList26 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList26, localeArray25);
        java.util.Locale locale28 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList23, (java.util.Collection<java.util.Locale>) localeList26);
        boolean boolean29 = strSet18.retainAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList23);
        java.lang.String[] strArray34 = new java.lang.String[] { "fra", "", "+00:00", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet35 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet35, strArray34);
        java.lang.Object[] objArray37 = strSet35.toArray();
        boolean boolean38 = strSet35.isEmpty();
        java.util.Locale.LanguageRange[] languageRangeArray39 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList40 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList40, languageRangeArray39);
        java.util.Locale[] localeArray42 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList43 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList43, localeArray42);
        java.util.Locale locale45 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList40, (java.util.Collection<java.util.Locale>) localeList43);
        boolean boolean46 = strSet35.removeAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList40);
        java.util.Locale.LanguageRange[] languageRangeArray47 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList48 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList48, languageRangeArray47);
        java.util.Locale[] localeArray50 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList51 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList51, localeArray50);
        java.util.Locale locale53 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList48, (java.util.Collection<java.util.Locale>) localeList51);
        java.util.Locale.FilteringMode filteringMode54 = java.util.Locale.FilteringMode.EXTENDED_FILTERING;
        java.util.List<java.util.Locale> localeList55 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList40, (java.util.Collection<java.util.Locale>) localeList51, filteringMode54);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap56 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList57 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList40, strMap56);
        java.util.Locale locale60 = new java.util.Locale("fra", "");
        java.util.Set<java.lang.String> strSet61 = locale60.getUnicodeLocaleAttributes();
        org.joda.time.LocalDateTime localDateTime62 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime63 = new org.joda.time.LocalDateTime();
        boolean boolean64 = localDateTime62.isBefore((org.joda.time.ReadablePartial) localDateTime63);
        org.joda.time.LocalDateTime localDateTime66 = localDateTime63.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property67 = localDateTime63.dayOfMonth();
        org.joda.time.DurationField durationField68 = property67.getRangeDurationField();
        boolean boolean69 = strSet61.contains((java.lang.Object) durationField68);
        java.lang.String[] strArray74 = new java.lang.String[] { "fra", "", "+00:00", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet75 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean76 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet75, strArray74);
        java.lang.Object[] objArray77 = strSet75.toArray();
        boolean boolean78 = strSet75.isEmpty();
        java.util.Locale.LanguageRange[] languageRangeArray79 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList80 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean81 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList80, languageRangeArray79);
        java.util.Locale[] localeArray82 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList83 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean84 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList83, localeArray82);
        java.util.Locale locale85 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList80, (java.util.Collection<java.util.Locale>) localeList83);
        boolean boolean86 = strSet75.removeAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList80);
        java.util.Locale.LanguageRange[] languageRangeArray87 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList88 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean89 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList88, languageRangeArray87);
        java.util.Locale[] localeArray90 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList91 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean92 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList91, localeArray90);
        java.util.Locale locale93 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList88, (java.util.Collection<java.util.Locale>) localeList91);
        java.util.Locale.FilteringMode filteringMode94 = java.util.Locale.FilteringMode.EXTENDED_FILTERING;
        java.util.List<java.util.Locale> localeList95 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList80, (java.util.Collection<java.util.Locale>) localeList91, filteringMode94);
        java.util.List<java.lang.String> strList96 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList40, (java.util.Collection<java.lang.String>) strSet61, filteringMode94);
        boolean boolean97 = strSet18.retainAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList40);
        boolean boolean98 = strSet7.retainAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList40);
        java.lang.Object[] objArray99 = strSet7.toArray();
        org.junit.Assert.assertEquals(locale2.toString(), "fra");
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(charSet5);
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertEquals(locale10.toString(), "2022-02-11t09:47:59.996_2022-02-11T09:48:12.885");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[]");
        org.junit.Assert.assertNotNull(strArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[fra, , +00:00, hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[fra, , +00:00, hi!]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(languageRangeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(localeArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(locale28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(strArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(objArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray37), "[fra, , +00:00, hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray37), "[fra, , +00:00, hi!]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(languageRangeArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(localeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNull(locale45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(languageRangeArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(localeArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNull(locale53);
        org.junit.Assert.assertTrue("'" + filteringMode54 + "' != '" + java.util.Locale.FilteringMode.EXTENDED_FILTERING + "'", filteringMode54.equals(java.util.Locale.FilteringMode.EXTENDED_FILTERING));
        org.junit.Assert.assertNotNull(localeList55);
        org.junit.Assert.assertNotNull(languageRangeList57);
        org.junit.Assert.assertEquals(locale60.toString(), "fra");
        org.junit.Assert.assertNotNull(strSet61);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertNotNull(durationField68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(objArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray77), "[fra, , +00:00, hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray77), "[fra, , +00:00, hi!]");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(languageRangeArray79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(localeArray82);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNull(locale85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(languageRangeArray87);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(localeArray90);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNull(locale93);
        org.junit.Assert.assertTrue("'" + filteringMode94 + "' != '" + java.util.Locale.FilteringMode.EXTENDED_FILTERING + "'", filteringMode94.equals(java.util.Locale.FilteringMode.EXTENDED_FILTERING));
        org.junit.Assert.assertNotNull(localeList95);
        org.junit.Assert.assertNotNull(strList96);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
        org.junit.Assert.assertNotNull(objArray99);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray99), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray99), "[]");
    }

    @Test
    public void test08203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08203");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property5 = localDateTime1.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime6 = property5.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField7 = property5.getField();
        int int8 = property5.getMaximumValueOverall();
        org.joda.time.LocalDateTime localDateTime9 = property5.roundCeilingCopy();
        java.lang.String str11 = localDateTime9.toString("35437902");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 31 + "'", int8 == 31);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "35437902" + "'", str11, "35437902");
    }

    @Test
    public void test08204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08204");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.getDefault();
        java.util.Locale locale4 = null;
        java.lang.String str5 = dateTimeZone2.getName((long) (short) 10, locale4);
        long long7 = dateTimeZone1.getMillisKeepLocal(dateTimeZone2, (long) 874);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        long long10 = dateTimeZone2.getMillisKeepLocal(dateTimeZone8, (long) '4');
        int int12 = dateTimeZone2.getOffsetFromLocal((long) 83);
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime(0L, dateTimeZone2);
        java.util.TimeZone timeZone14 = dateTimeZone2.toTimeZone();
        java.lang.String str15 = timeZone14.getID();
        timeZone14.setID("2022-02-11T09:48:29.332");
        java.lang.String str18 = timeZone14.getID();
        timeZone14.setRawOffset((-35274808));
        java.util.TimeZone.setDefault(timeZone14);
        int int23 = timeZone14.getOffset(1644151684603L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTimeZone2);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+117:00" + "'", str5, "+117:00");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 874L + "'", long7 == 874L);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 52L + "'", long10 == 52L);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 421200000 + "'", int12 == 421200000);
        org.junit.Assert.assertNotNull(timeZone14);
        org.junit.Assert.assertEquals(timeZone14.getDisplayName(), "GMT-09:47");
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+117:00" + "'", str15, "+117:00");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "2022-02-11T09:48:29.332" + "'", str18, "2022-02-11T09:48:29.332");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-35274808) + "'", int23 == (-35274808));
    }

    @Test
    public void test08205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08205");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.LanguageRange[] languageRangeArray1 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList2 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList2, languageRangeArray1);
        java.util.Locale[] localeArray4 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList5 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList5, localeArray4);
        java.util.Locale locale7 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList2, (java.util.Collection<java.util.Locale>) localeList5);
        java.util.Locale.LanguageRange[] languageRangeArray8 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList9 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList9, languageRangeArray8);
        java.util.Locale[] localeArray11 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList12 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList12, localeArray11);
        java.util.Locale locale14 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList9, (java.util.Collection<java.util.Locale>) localeList12);
        java.util.Locale.FilteringMode filteringMode15 = null;
        java.util.List<java.util.Locale> localeList16 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList2, (java.util.Collection<java.util.Locale>) localeList12, filteringMode15);
        java.util.Locale locale17 = java.util.Locale.FRENCH;
        java.util.Set<java.lang.String> strSet18 = locale17.getUnicodeLocaleAttributes();
        java.lang.Object[] objArray19 = strSet18.toArray();
        java.util.Locale.FilteringMode filteringMode20 = java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList21 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList2, (java.util.Collection<java.lang.String>) strSet18, filteringMode20);
        java.util.Locale locale22 = java.util.Locale.ITALIAN;
        java.lang.String str23 = locale22.getDisplayCountry();
        boolean boolean24 = strSet18.equals((java.lang.Object) locale22);
        java.util.Locale.Builder builder25 = builder0.setLocale(locale22);
        java.util.Locale.Builder builder26 = builder0.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder29 = builder26.setExtension(' ', "2022-02-11T09:52:32.442");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed extension key:   [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(languageRangeArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(localeArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(locale7);
        org.junit.Assert.assertNotNull(languageRangeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(localeArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(locale14);
        org.junit.Assert.assertNotNull(localeList16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet18);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[]");
        org.junit.Assert.assertTrue("'" + filteringMode20 + "' != '" + java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES + "'", filteringMode20.equals(java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList21);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "it");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
    }

    @Test
    public void test08206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08206");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        int int2 = dateTimeZone0.getStandardOffset((long) (-100));
        java.util.TimeZone timeZone3 = dateTimeZone0.toTimeZone();
        int int4 = timeZone3.getRawOffset();
        timeZone3.setID("2022-02-11T09:48:26.586");
        java.util.TimeZone.setDefault(timeZone3);
        java.util.Locale.LanguageRange[] languageRangeArray8 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList9 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList9, languageRangeArray8);
        java.util.Locale[] localeArray11 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList12 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList12, localeArray11);
        java.util.Locale locale14 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList9, (java.util.Collection<java.util.Locale>) localeList12);
        java.util.Locale.LanguageRange[] languageRangeArray15 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList16 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList16, languageRangeArray15);
        java.util.Locale[] localeArray18 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList19 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList19, localeArray18);
        java.util.Locale locale21 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList16, (java.util.Collection<java.util.Locale>) localeList19);
        java.util.Locale.FilteringMode filteringMode22 = null;
        java.util.List<java.util.Locale> localeList23 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList9, (java.util.Collection<java.util.Locale>) localeList19, filteringMode22);
        java.util.Locale locale24 = java.util.Locale.FRENCH;
        java.util.Set<java.lang.String> strSet25 = locale24.getUnicodeLocaleAttributes();
        java.lang.Object[] objArray26 = strSet25.toArray();
        java.util.Locale.FilteringMode filteringMode27 = java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList28 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList9, (java.util.Collection<java.lang.String>) strSet25, filteringMode27);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.getDefault();
        int int31 = dateTimeZone29.getStandardOffset((long) (-100));
        java.util.TimeZone timeZone32 = dateTimeZone29.toTimeZone();
        int int33 = timeZone32.getRawOffset();
        timeZone32.setRawOffset(50);
        java.lang.String str36 = timeZone32.getID();
        boolean boolean37 = strSet25.equals((java.lang.Object) timeZone32);
        java.lang.String str38 = timeZone32.getID();
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.getDefault();
        int int41 = dateTimeZone39.getStandardOffset((long) (-100));
        java.util.TimeZone timeZone42 = dateTimeZone39.toTimeZone();
        java.util.TimeZone timeZone43 = dateTimeZone39.toTimeZone();
        boolean boolean44 = timeZone32.hasSameRules(timeZone43);
        timeZone32.setID("2022-03-11T09:48:15.516Z");
        boolean boolean47 = timeZone3.hasSameRules(timeZone32);
        boolean boolean48 = timeZone32.observesDaylightTime();
        boolean boolean49 = timeZone32.observesDaylightTime();
        org.junit.Assert.assertNotNull(dateTimeZone0);
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 421200000 + "'", int2 == 421200000);
        org.junit.Assert.assertNotNull(timeZone3);
// flaky:         org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "GMT+;7:00");
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 421200000 + "'", int4 == 421200000);
        org.junit.Assert.assertNotNull(languageRangeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(localeArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(locale14);
        org.junit.Assert.assertNotNull(languageRangeArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(localeArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(locale21);
        org.junit.Assert.assertNotNull(localeList23);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet25);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[]");
        org.junit.Assert.assertTrue("'" + filteringMode27 + "' != '" + java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES + "'", filteringMode27.equals(java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList28);
        org.junit.Assert.assertNotNull(dateTimeZone29);
// flaky:         org.junit.Assert.assertTrue("'" + int31 + "' != '" + 421200000 + "'", int31 == 421200000);
        org.junit.Assert.assertNotNull(timeZone32);
        org.junit.Assert.assertEquals(timeZone32.getDisplayName(), "GMT+00:00");
// flaky:         org.junit.Assert.assertTrue("'" + int33 + "' != '" + 421200000 + "'", int33 == 421200000);
// flaky:         org.junit.Assert.assertEquals("'" + str36 + "' != '" + "+117:00" + "'", str36, "+117:00");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str38 + "' != '" + "+117:00" + "'", str38, "+117:00");
        org.junit.Assert.assertNotNull(dateTimeZone39);
// flaky:         org.junit.Assert.assertTrue("'" + int41 + "' != '" + 421200000 + "'", int41 == 421200000);
        org.junit.Assert.assertNotNull(timeZone42);
// flaky:         org.junit.Assert.assertEquals(timeZone42.getDisplayName(), "GMT+;7:00");
        org.junit.Assert.assertNotNull(timeZone43);
// flaky:         org.junit.Assert.assertEquals(timeZone43.getDisplayName(), "GMT+;7:00");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test08207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08207");
        org.joda.time.tz.Provider provider0 = org.joda.time.DateTimeZone.getProvider();
        org.joda.time.DateTimeZone.setProvider(provider0);
        org.joda.time.DateTimeZone dateTimeZone3 = provider0.getZone("11");
        org.joda.time.DateTimeZone.setProvider(provider0);
        org.joda.time.DateTimeZone.setProvider(provider0);
        java.util.Set<java.lang.String> strSet6 = provider0.getAvailableIDs();
        int int7 = strSet6.size();
        java.lang.String[] strArray12 = new java.lang.String[] { "fra", "", "+00:00", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet13 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet13, strArray12);
        java.lang.Object[] objArray15 = strSet13.toArray();
        boolean boolean16 = strSet13.isEmpty();
        java.util.Locale.LanguageRange[] languageRangeArray17 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList18 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList18, languageRangeArray17);
        java.util.Locale[] localeArray20 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList21 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList21, localeArray20);
        java.util.Locale locale23 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList18, (java.util.Collection<java.util.Locale>) localeList21);
        boolean boolean24 = strSet13.removeAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList18);
        java.util.Locale.LanguageRange[] languageRangeArray25 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList26 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList26, languageRangeArray25);
        java.util.Locale[] localeArray28 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList29 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList29, localeArray28);
        java.util.Locale locale31 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList26, (java.util.Collection<java.util.Locale>) localeList29);
        java.util.Locale.FilteringMode filteringMode32 = java.util.Locale.FilteringMode.EXTENDED_FILTERING;
        java.util.List<java.util.Locale> localeList33 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList18, (java.util.Collection<java.util.Locale>) localeList29, filteringMode32);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap34 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList35 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList18, strMap34);
        java.util.stream.Stream<java.util.Locale.LanguageRange> languageRangeStream36 = languageRangeList35.stream();
        java.util.Collection<java.lang.String> strCollection37 = null;
        java.util.List<java.lang.String> strList38 = java.util.Locale.filterTags(languageRangeList35, strCollection37);
        java.lang.String[] strArray43 = new java.lang.String[] { "fra", "", "+00:00", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet44 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet44, strArray43);
        java.lang.Object[] objArray46 = strSet44.toArray();
        boolean boolean47 = strSet44.isEmpty();
        java.util.Locale.LanguageRange[] languageRangeArray48 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList49 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList49, languageRangeArray48);
        java.util.Locale[] localeArray51 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList52 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList52, localeArray51);
        java.util.Locale locale54 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList49, (java.util.Collection<java.util.Locale>) localeList52);
        boolean boolean55 = strSet44.removeAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList49);
        java.util.Locale.LanguageRange[] languageRangeArray56 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList57 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList57, languageRangeArray56);
        java.util.Locale[] localeArray59 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList60 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList60, localeArray59);
        java.util.Locale locale62 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList57, (java.util.Collection<java.util.Locale>) localeList60);
        java.util.Locale.FilteringMode filteringMode63 = java.util.Locale.FilteringMode.EXTENDED_FILTERING;
        java.util.List<java.util.Locale> localeList64 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList49, (java.util.Collection<java.util.Locale>) localeList60, filteringMode63);
        java.util.Locale locale65 = java.util.Locale.lookup(languageRangeList35, (java.util.Collection<java.util.Locale>) localeList60);
        boolean boolean66 = strSet6.retainAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList35);
        boolean boolean67 = strSet6.isEmpty();
        org.junit.Assert.assertNotNull(provider0);
        org.junit.Assert.assertNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 575 + "'", int7 == 575);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(objArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray15), "[fra, , +00:00, hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray15), "[fra, , +00:00, hi!]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(languageRangeArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(localeArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(locale23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(languageRangeArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(localeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNull(locale31);
        org.junit.Assert.assertTrue("'" + filteringMode32 + "' != '" + java.util.Locale.FilteringMode.EXTENDED_FILTERING + "'", filteringMode32.equals(java.util.Locale.FilteringMode.EXTENDED_FILTERING));
        org.junit.Assert.assertNotNull(localeList33);
        org.junit.Assert.assertNotNull(languageRangeList35);
        org.junit.Assert.assertNotNull(languageRangeStream36);
        org.junit.Assert.assertNotNull(strList38);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(objArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray46), "[fra, , +00:00, hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray46), "[fra, , +00:00, hi!]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(languageRangeArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(localeArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNull(locale54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(languageRangeArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(localeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNull(locale62);
        org.junit.Assert.assertTrue("'" + filteringMode63 + "' != '" + java.util.Locale.FilteringMode.EXTENDED_FILTERING + "'", filteringMode63.equals(java.util.Locale.FilteringMode.EXTENDED_FILTERING));
        org.junit.Assert.assertNotNull(localeList64);
        org.junit.Assert.assertNull(locale65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
    }

    @Test
    public void test08208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08208");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        int int1 = localDateTime0.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime3 = localDateTime0.minusMonths((int) (short) 0);
        org.joda.time.Chronology chronology4 = localDateTime3.getChronology();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime(chronology4);
        org.joda.time.LocalDateTime localDateTime6 = org.joda.time.LocalDateTime.now(chronology4);
        org.joda.time.LocalDateTime localDateTime7 = org.joda.time.LocalDateTime.now(chronology4);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.minuteOfHour();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 22 + "'", int1 == 22);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
    }

    @Test
    public void test08209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08209");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("Etc/UTC");
        java.util.TimeZone.setDefault(timeZone1);
        int int3 = timeZone1.getRawOffset();
        java.time.ZoneId zoneId4 = timeZone1.toZoneId();
        java.lang.String str5 = timeZone1.getID();
        boolean boolean6 = timeZone1.useDaylightTime();
        org.junit.Assert.assertNotNull(timeZone1);
// flaky:         org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Temps universel coordonn\351");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(zoneId4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Etc/UTC" + "'", str5, "Etc/UTC");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test08210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08210");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("2022-02-11T09:48:54.232");
        org.junit.Assert.assertNotNull(timeZone1);
// flaky:         org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Heure de Greenwich");
    }

    @Test
    public void test08211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08211");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        int[] intArray3 = localDateTime1.getValues();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.plusYears((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        boolean boolean8 = localDateTime6.isBefore((org.joda.time.ReadablePartial) localDateTime7);
        int[] intArray9 = localDateTime7.getValues();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime1.withFields((org.joda.time.ReadablePartial) localDateTime7);
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime();
        int int12 = localDateTime11.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime11.minusMonths((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minusMonths((int) (byte) 0);
        int int17 = localDateTime14.getWeekyear();
        org.joda.time.LocalDateTime.Property property18 = localDateTime14.dayOfYear();
        org.joda.time.LocalDateTime.Property property19 = localDateTime14.minuteOfHour();
        org.joda.time.LocalDateTime.Property property20 = localDateTime14.era();
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.LocalDateTime localDateTime22 = localDateTime14.minus(readablePeriod21);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.minusSeconds(692);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime22.withCenturyOfEra(89);
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDateTime.Property property28 = localDateTime22.property(dateTimeFieldType27);
        boolean boolean29 = localDateTime10.isSupported(dateTimeFieldType27);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField31 = localDateTime10.getField(984);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 984");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(intArray3);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[2022, 2, 16, 24850861]");
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(intArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[2022, 2, 16, 24850861]");
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 22 + "'", int12 == 22);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2022 + "'", int17 == 2022);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
    }

    @Test
    public void test08212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08212");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale locale3 = java.util.Locale.forLanguageTag("6");
        java.util.Locale.Builder builder4 = builder1.setLocale(locale3);
        java.util.Locale.Builder builder5 = builder4.clear();
        java.util.Locale locale7 = java.util.Locale.forLanguageTag("2022-02-11T09:48:02.052");
        java.lang.String str8 = locale7.getDisplayVariant();
        java.util.Locale.Builder builder9 = builder4.setLocale(locale7);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder11 = builder4.setVariant("2022-02-11T09:49:27.068");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed variant: 2022-02-11T09:49:27.068 [at index 5]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "");
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test08213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08213");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.minusMillis((int) (byte) 1);
        java.lang.String str3 = localDateTime2.toString();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.minusMonths((int) 'a');
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusMinutes(22);
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime();
        boolean boolean10 = localDateTime8.isBefore((org.joda.time.ReadablePartial) localDateTime9);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime9.plusSeconds((int) (byte) 100);
        boolean boolean13 = localDateTime7.isBefore((org.joda.time.ReadablePartial) localDateTime9);
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime();
        int int15 = localDateTime14.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime14.minusMonths((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.minusMonths((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.plusYears(10);
        boolean boolean22 = localDateTime7.isAfter((org.joda.time.ReadablePartial) localDateTime21);
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime();
        boolean boolean25 = localDateTime23.isBefore((org.joda.time.ReadablePartial) localDateTime24);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime24.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property28 = localDateTime24.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime();
        boolean boolean31 = localDateTime29.isBefore((org.joda.time.ReadablePartial) localDateTime30);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime30.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property34 = localDateTime30.dayOfMonth();
        java.util.Locale locale35 = java.util.Locale.FRENCH;
        java.util.Set<java.lang.String> strSet36 = locale35.getUnicodeLocaleAttributes();
        java.lang.String str37 = locale35.getVariant();
        java.lang.String str38 = property34.getAsText(locale35);
        java.lang.String str39 = property28.getAsShortText(locale35);
        org.joda.time.LocalDateTime localDateTime40 = property28.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime localDateTime41 = property28.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime42 = property28.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime44 = localDateTime42.withYear((-1));
        int int45 = localDateTime42.getDayOfMonth();
        boolean boolean46 = localDateTime21.isBefore((org.joda.time.ReadablePartial) localDateTime42);
        org.joda.time.LocalDateTime localDateTime48 = localDateTime42.minusDays(353);
        int int49 = localDateTime48.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime51 = localDateTime48.withCenturyOfEra(203);
        org.joda.time.LocalDateTime localDateTime53 = localDateTime48.withMillisOfSecond(120);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime55 = localDateTime48.withDayOfWeek(22);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 22 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime2);
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "2022-02-16T06:54:10.881" + "'", str3, "2022-02-16T06:54:10.881");
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 22 + "'", int15 == 22);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
// flaky:         org.junit.Assert.assertEquals("'" + str38 + "' != '" + "16" + "'", str38, "16");
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "16" + "'", str39, "16");
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 28 + "'", int45 == 28);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2021 + "'", int49 == 2021);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(localDateTime53);
    }

    @Test
    public void test08214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08214");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 83);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusSeconds(83);
        int int4 = localDateTime3.getYear();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.minus(readableDuration5);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime8 = localDateTime6.withDayOfWeek(35557576);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35557576 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1970 + "'", int4 == 1970);
        org.junit.Assert.assertNotNull(localDateTime6);
    }

    @Test
    public void test08215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08215");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property5 = localDateTime1.dayOfMonth();
        boolean boolean6 = property5.isLeap();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.minusMillis((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.plusDays(0);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.plusMillis(22);
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.minusMillis((int) (byte) 1);
        java.lang.String str18 = localDateTime17.toString();
        org.joda.time.DateTime dateTime19 = localDateTime17.toDateTime();
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.minusMillis((int) (byte) 1);
        java.lang.String str23 = localDateTime22.toString();
        org.joda.time.DateTime dateTime24 = localDateTime22.toDateTime();
        boolean boolean25 = dateTime19.isEqual((org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.minusMillis((int) (byte) 1);
        java.lang.String str29 = localDateTime28.toString();
        org.joda.time.DateTime dateTime30 = localDateTime28.toDateTime();
        boolean boolean31 = dateTime19.isEqual((org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.Instant instant32 = dateTime30.toInstant();
        long long33 = instant32.getMillis();
        org.joda.time.DateTime dateTime34 = localDateTime13.toDateTime((org.joda.time.ReadableInstant) instant32);
        int int35 = property5.getDifference((org.joda.time.ReadableInstant) instant32);
        org.joda.time.LocalDateTime localDateTime36 = property5.getLocalDateTime();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime38 = property5.setCopy("2022-02-11T09:51:01.247");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2022-02-11T09:51:01.247\" for dayOfMonth is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDateTime17);
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "2022-02-16T06:54:10.918" + "'", str18, "2022-02-16T06:54:10.918");
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(localDateTime22);
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "2022-02-16T06:54:10.918" + "'", str23, "2022-02-16T06:54:10.918");
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(localDateTime28);
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "2022-02-16T06:54:10.918" + "'", str29, "2022-02-16T06:54:10.918");
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(instant32);
// flaky:         org.junit.Assert.assertTrue("'" + long33 + "' != '" + 1644573250918L + "'", long33 == 1644573250918L);
        org.junit.Assert.assertNotNull(dateTime34);
// flaky:         org.junit.Assert.assertTrue("'" + int35 + "' != '" + 4 + "'", int35 == 4);
        org.junit.Assert.assertNotNull(localDateTime36);
    }

    @Test
    public void test08216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08216");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder1.addUnicodeLocaleAttribute("Japon");
        java.util.Locale.Builder builder4 = builder3.clearExtensions();
        java.util.Locale.Builder builder5 = builder3.clearExtensions();
        java.util.Locale.Builder builder6 = builder5.clear();
        java.util.Locale.Builder builder7 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder8 = builder7.clearExtensions();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime();
        boolean boolean11 = localDateTime9.isBefore((org.joda.time.ReadablePartial) localDateTime10);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime10.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property14 = localDateTime10.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime15 = property14.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField16 = property14.getField();
        int int17 = dateTimeField16.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime();
        int int19 = localDateTime18.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime18.minusMonths((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.minusMonths((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.plusWeeks(22);
        java.util.Locale locale27 = java.util.Locale.JAPANESE;
        java.lang.String str28 = dateTimeField16.getAsShortText((org.joda.time.ReadablePartial) localDateTime25, 22, locale27);
        java.util.Locale.Builder builder29 = builder8.setLocale(locale27);
        java.util.Locale.Builder builder30 = builder6.setLocale(locale27);
        java.lang.String str31 = locale27.getVariant();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 31 + "'", int17 == 31);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 22 + "'", int19 == 22);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "22" + "'", str28, "22");
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
    }

    @Test
    public void test08217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08217");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        java.util.Locale locale3 = null;
        java.lang.String str4 = dateTimeZone1.getName((long) (short) 10, locale3);
        long long6 = dateTimeZone0.getMillisKeepLocal(dateTimeZone1, (long) 874);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        long long9 = dateTimeZone1.getMillisKeepLocal(dateTimeZone7, (long) '4');
        long long11 = dateTimeZone7.convertUTCToLocal(1067L);
        long long13 = dateTimeZone7.previousTransition((long) 2024);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap15 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList16 = java.util.Locale.LanguageRange.parse("deu", strMap15);
        java.util.stream.Stream<java.util.Locale.LanguageRange> languageRangeStream17 = languageRangeList16.stream();
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap18 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList19 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList16, strMap18);
        java.lang.String[] strArray24 = new java.lang.String[] { "fra", "", "+00:00", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet25 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet25, strArray24);
        java.lang.Object[] objArray27 = strSet25.toArray();
        boolean boolean28 = strSet25.isEmpty();
        java.util.Locale.LanguageRange[] languageRangeArray29 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList30 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList30, languageRangeArray29);
        java.util.Locale[] localeArray32 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList33 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList33, localeArray32);
        java.util.Locale locale35 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList30, (java.util.Collection<java.util.Locale>) localeList33);
        boolean boolean36 = strSet25.removeAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList30);
        java.util.Locale.LanguageRange[] languageRangeArray37 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList38 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList38, languageRangeArray37);
        java.util.Locale[] localeArray40 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList41 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList41, localeArray40);
        java.util.Locale locale43 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList38, (java.util.Collection<java.util.Locale>) localeList41);
        java.util.Locale.FilteringMode filteringMode44 = java.util.Locale.FilteringMode.EXTENDED_FILTERING;
        java.util.List<java.util.Locale> localeList45 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList30, (java.util.Collection<java.util.Locale>) localeList41, filteringMode44);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap46 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList47 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList30, strMap46);
        java.util.stream.Stream<java.util.Locale.LanguageRange> languageRangeStream48 = languageRangeList47.stream();
        java.util.Locale.LanguageRange[] languageRangeArray49 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList50 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList50, languageRangeArray49);
        java.util.Locale[] localeArray52 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList53 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList53, localeArray52);
        java.util.Locale locale55 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList50, (java.util.Collection<java.util.Locale>) localeList53);
        java.util.Locale.LanguageRange[] languageRangeArray56 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList57 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList57, languageRangeArray56);
        java.util.Locale[] localeArray59 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList60 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList60, localeArray59);
        java.util.Locale locale62 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList57, (java.util.Collection<java.util.Locale>) localeList60);
        java.util.Locale.FilteringMode filteringMode63 = null;
        java.util.List<java.util.Locale> localeList64 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList50, (java.util.Collection<java.util.Locale>) localeList60, filteringMode63);
        java.util.Locale locale65 = java.util.Locale.lookup(languageRangeList47, (java.util.Collection<java.util.Locale>) localeList60);
        java.util.Locale.FilteringMode filteringMode66 = java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList67 = java.util.Locale.filter(languageRangeList16, (java.util.Collection<java.util.Locale>) localeList60, filteringMode66);
        java.util.stream.Stream<java.util.Locale.LanguageRange> languageRangeStream68 = languageRangeList16.parallelStream();
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap69 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList70 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList16, strMap69);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap71 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList72 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList70, strMap71);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap74 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList75 = java.util.Locale.LanguageRange.parse("deu", strMap74);
        java.util.Locale locale78 = new java.util.Locale("fra", "");
        java.util.Set<java.lang.String> strSet79 = locale78.getUnicodeLocaleAttributes();
        java.lang.String str80 = locale78.getScript();
        java.util.Set<java.lang.Character> charSet81 = locale78.getExtensionKeys();
        java.util.Set<java.lang.String> strSet82 = locale78.getUnicodeLocaleKeys();
        java.util.Locale.FilteringMode filteringMode83 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList84 = java.util.Locale.filterTags(languageRangeList75, (java.util.Collection<java.lang.String>) strSet82, filteringMode83);
        org.joda.time.tz.Provider provider85 = org.joda.time.DateTimeZone.getProvider();
        org.joda.time.DateTimeZone.setProvider(provider85);
        org.joda.time.DateTimeZone dateTimeZone88 = provider85.getZone("2022-02-11T09:48:02.991");
        java.util.Set<java.lang.String> strSet89 = provider85.getAvailableIDs();
        java.lang.String str90 = java.util.Locale.lookupTag(languageRangeList75, (java.util.Collection<java.lang.String>) strSet89);
        int int91 = strSet89.size();
        java.util.List<java.lang.String> strList92 = java.util.Locale.filterTags(languageRangeList72, (java.util.Collection<java.lang.String>) strSet89);
        boolean boolean93 = dateTimeZone7.equals((java.lang.Object) strSet89);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+117:00" + "'", str4, "+117:00");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 874L + "'", long6 == 874L);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 52L + "'", long9 == 52L);
// flaky:         org.junit.Assert.assertTrue("'" + long11 + "' != '" + 421201067L + "'", long11 == 421201067L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 2024L + "'", long13 == 2024L);
        org.junit.Assert.assertNotNull(languageRangeList16);
        org.junit.Assert.assertNotNull(languageRangeStream17);
        org.junit.Assert.assertNotNull(languageRangeList19);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(objArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray27), "[fra, , +00:00, hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray27), "[fra, , +00:00, hi!]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(languageRangeArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(localeArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNull(locale35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(languageRangeArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(localeArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(locale43);
        org.junit.Assert.assertTrue("'" + filteringMode44 + "' != '" + java.util.Locale.FilteringMode.EXTENDED_FILTERING + "'", filteringMode44.equals(java.util.Locale.FilteringMode.EXTENDED_FILTERING));
        org.junit.Assert.assertNotNull(localeList45);
        org.junit.Assert.assertNotNull(languageRangeList47);
        org.junit.Assert.assertNotNull(languageRangeStream48);
        org.junit.Assert.assertNotNull(languageRangeArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(localeArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNull(locale55);
        org.junit.Assert.assertNotNull(languageRangeArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(localeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNull(locale62);
        org.junit.Assert.assertNotNull(localeList64);
        org.junit.Assert.assertNull(locale65);
        org.junit.Assert.assertTrue("'" + filteringMode66 + "' != '" + java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES + "'", filteringMode66.equals(java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList67);
        org.junit.Assert.assertNotNull(languageRangeStream68);
        org.junit.Assert.assertNotNull(languageRangeList70);
        org.junit.Assert.assertNotNull(languageRangeList72);
        org.junit.Assert.assertNotNull(languageRangeList75);
        org.junit.Assert.assertEquals(locale78.toString(), "fra");
        org.junit.Assert.assertNotNull(strSet79);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "" + "'", str80, "");
        org.junit.Assert.assertNotNull(charSet81);
        org.junit.Assert.assertNotNull(strSet82);
        org.junit.Assert.assertTrue("'" + filteringMode83 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode83.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList84);
        org.junit.Assert.assertNotNull(provider85);
        org.junit.Assert.assertNull(dateTimeZone88);
        org.junit.Assert.assertNotNull(strSet89);
        org.junit.Assert.assertNull(str90);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 575 + "'", int91 == 575);
        org.junit.Assert.assertNotNull(strList92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
    }

    @Test
    public void test08218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08218");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        int int2 = dateTimeZone0.getStandardOffset((long) (-100));
        java.util.TimeZone timeZone3 = dateTimeZone0.toTimeZone();
        java.util.TimeZone timeZone4 = dateTimeZone0.toTimeZone();
        java.lang.String str6 = dateTimeZone0.getShortName((long) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        int int9 = dateTimeZone7.getStandardOffset((long) (-100));
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime(dateTimeZone7);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime();
        boolean boolean14 = localDateTime12.isBefore((org.joda.time.ReadablePartial) localDateTime13);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime13.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property17 = localDateTime13.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime18 = property17.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField19 = property17.getField();
        long long21 = dateTimeField19.remainder((-1L));
        java.util.Locale locale23 = java.util.Locale.UK;
        java.lang.String str24 = dateTimeField19.getAsShortText((long) 22, locale23);
        java.lang.String str25 = locale23.getDisplayCountry();
        java.lang.String str26 = dateTimeZone7.getShortName(524L, locale23);
        long long28 = dateTimeZone0.getMillisKeepLocal(dateTimeZone7, 0L);
        java.util.TimeZone timeZone29 = dateTimeZone0.toTimeZone();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str32 = timeZone29.getDisplayName(true, 35376270);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal style: 35376270");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 421200000 + "'", int2 == 421200000);
        org.junit.Assert.assertNotNull(timeZone3);
// flaky:         org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "GMT+;7:00");
        org.junit.Assert.assertNotNull(timeZone4);
// flaky:         org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "GMT+;7:00");
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+117:00" + "'", str6, "+117:00");
        org.junit.Assert.assertNotNull(dateTimeZone7);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 421200000 + "'", int9 == 421200000);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 86399999L + "'", long21 == 86399999L);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "1" + "'", str24, "1");
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Royaume-Uni" + "'", str25, "Royaume-Uni");
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "+117:00" + "'", str26, "+117:00");
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertNotNull(timeZone29);
// flaky:         org.junit.Assert.assertEquals(timeZone29.getDisplayName(), "GMT+;7:00");
    }

    @Test
    public void test08219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08219");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property5 = localDateTime1.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime6 = property5.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField7 = property5.getField();
        long long9 = dateTimeField7.remainder((-1L));
        java.util.Locale locale11 = java.util.Locale.UK;
        java.lang.String str12 = dateTimeField7.getAsShortText((long) 22, locale11);
        int int15 = dateTimeField7.getDifference((long) 5320, (long) 20);
        java.util.Locale locale17 = java.util.Locale.JAPAN;
        java.util.Locale locale18 = java.util.Locale.FRENCH;
        java.lang.String str19 = locale17.getDisplayCountry(locale18);
        java.lang.String str20 = locale18.getDisplayScript();
        java.lang.String str21 = dateTimeField7.getAsShortText(1644572879323L, locale18);
        java.util.Set<java.lang.Character> charSet22 = locale18.getExtensionKeys();
        java.util.Locale.setDefault(locale18);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 86399999L + "'", long9 == 86399999L);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "1" + "'", str12, "1");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Japon" + "'", str19, "Japon");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "11" + "'", str21, "11");
        org.junit.Assert.assertNotNull(charSet22);
    }

    @Test
    public void test08220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08220");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Locale[] localeArray3 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList4 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList4, localeArray3);
        java.util.Locale locale6 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList4);
        java.util.Locale.LanguageRange[] languageRangeArray7 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList8 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList8, languageRangeArray7);
        java.util.Locale[] localeArray10 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList11 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList11, localeArray10);
        java.util.Locale locale13 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList8, (java.util.Collection<java.util.Locale>) localeList11);
        java.util.Locale.FilteringMode filteringMode14 = null;
        java.util.List<java.util.Locale> localeList15 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList11, filteringMode14);
        java.util.Locale locale16 = java.util.Locale.FRENCH;
        java.util.Set<java.lang.String> strSet17 = locale16.getUnicodeLocaleAttributes();
        java.lang.Object[] objArray18 = strSet17.toArray();
        java.util.Locale.FilteringMode filteringMode19 = java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList20 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet17, filteringMode19);
        java.util.Locale locale21 = java.util.Locale.ITALIAN;
        java.lang.String str22 = locale21.getDisplayCountry();
        boolean boolean23 = strSet17.equals((java.lang.Object) locale21);
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime();
        boolean boolean26 = localDateTime24.isBefore((org.joda.time.ReadablePartial) localDateTime25);
        org.joda.time.LocalDateTime.Property property27 = localDateTime24.dayOfMonth();
        org.joda.time.LocalDateTime.Property property28 = localDateTime24.weekyear();
        boolean boolean30 = property28.equals((java.lang.Object) 52L);
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = property28.getFieldType();
        java.util.Locale locale35 = new java.util.Locale("fra", "");
        java.util.Set<java.lang.String> strSet36 = locale35.getUnicodeLocaleAttributes();
        java.lang.String str37 = locale35.getScript();
        java.util.Set<java.lang.Character> charSet38 = locale35.getExtensionKeys();
        boolean boolean39 = locale35.hasExtensions();
        org.joda.time.LocalDateTime localDateTime40 = property28.setCopy("2022", locale35);
        java.lang.String str41 = locale21.getDisplayScript(locale35);
        java.util.Set<java.lang.String> strSet42 = locale21.getUnicodeLocaleAttributes();
        boolean boolean43 = strSet42.isEmpty();
        java.util.TimeZone timeZone45 = java.util.TimeZone.getTimeZone("2022-02-11T09:47:49.888");
        timeZone45.setID("2022-02-11T09:47:52.558");
        java.util.TimeZone.setDefault(timeZone45);
        boolean boolean49 = strSet42.contains((java.lang.Object) timeZone45);
        org.joda.time.LocalDateTime localDateTime50 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime52 = localDateTime50.minusMillis((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime54 = localDateTime52.plusDays(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType55 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDateTime localDateTime57 = localDateTime52.withField(dateTimeFieldType55, 0);
        org.joda.time.LocalDateTime localDateTime58 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime59 = new org.joda.time.LocalDateTime();
        boolean boolean60 = localDateTime58.isBefore((org.joda.time.ReadablePartial) localDateTime59);
        org.joda.time.LocalDateTime localDateTime62 = localDateTime59.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime64 = localDateTime59.plusMinutes((int) '#');
        org.joda.time.LocalDateTime localDateTime66 = localDateTime59.minusMinutes((int) (short) 1);
        boolean boolean67 = localDateTime57.isAfter((org.joda.time.ReadablePartial) localDateTime66);
        org.joda.time.LocalDateTime localDateTime69 = localDateTime66.withMillisOfSecond(50);
        org.joda.time.LocalDateTime localDateTime71 = localDateTime69.withYear(47);
        org.joda.time.LocalDateTime localDateTime73 = localDateTime69.withYearOfEra(776);
        int int74 = localDateTime69.getEra();
        org.joda.time.ReadableDuration readableDuration75 = null;
        org.joda.time.LocalDateTime localDateTime76 = localDateTime69.minus(readableDuration75);
        int int77 = localDateTime76.getWeekyear();
        int int78 = localDateTime76.getMillisOfDay();
        org.joda.time.LocalDateTime.Property property79 = localDateTime76.weekOfWeekyear();
        boolean boolean80 = strSet42.contains((java.lang.Object) localDateTime76);
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localeArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(locale6);
        org.junit.Assert.assertNotNull(languageRangeArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(localeArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(locale13);
        org.junit.Assert.assertNotNull(localeList15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet17);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[]");
        org.junit.Assert.assertTrue("'" + filteringMode19 + "' != '" + java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES + "'", filteringMode19.equals(java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "it");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType31);
        org.junit.Assert.assertEquals(locale35.toString(), "fra");
        org.junit.Assert.assertNotNull(strSet36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(charSet38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(strSet42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(timeZone45);
        org.junit.Assert.assertEquals(timeZone45.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(dateTimeFieldType55);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(localDateTime69);
        org.junit.Assert.assertNotNull(localDateTime71);
        org.junit.Assert.assertNotNull(localDateTime73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1 + "'", int74 == 1);
        org.junit.Assert.assertNotNull(localDateTime76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 2022 + "'", int77 == 2022);
// flaky:         org.junit.Assert.assertTrue("'" + int78 + "' != '" + 24791050 + "'", int78 == 24791050);
        org.junit.Assert.assertNotNull(property79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
    }

    @Test
    public void test08221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08221");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property5 = localDateTime1.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime6 = property5.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField7 = property5.getField();
        java.util.Locale locale8 = java.util.Locale.JAPAN;
        java.util.Locale locale9 = java.util.Locale.FRENCH;
        java.lang.String str10 = locale8.getDisplayCountry(locale9);
        int int11 = property5.getMaximumTextLength(locale9);
        java.lang.String str12 = property5.getAsShortText();
        int int13 = property5.get();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime();
        boolean boolean16 = localDateTime14.isBefore((org.joda.time.ReadablePartial) localDateTime15);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime15.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime15.plusMinutes((int) '#');
        org.joda.time.LocalDateTime localDateTime22 = localDateTime15.minusMinutes((int) (short) 1);
        org.joda.time.LocalDateTime.Property property23 = localDateTime22.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime();
        boolean boolean26 = localDateTime24.isBefore((org.joda.time.ReadablePartial) localDateTime25);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime25.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property29 = localDateTime25.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime30 = property29.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField31 = property29.getField();
        long long33 = dateTimeField31.remainder((-1L));
        org.joda.time.DurationField durationField34 = dateTimeField31.getRangeDurationField();
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime();
        boolean boolean37 = localDateTime35.isBefore((org.joda.time.ReadablePartial) localDateTime36);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime36.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property40 = localDateTime36.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime41 = property40.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField42 = property40.getField();
        int int45 = dateTimeField42.getDifference(1L, 86399999L);
        org.joda.time.LocalDateTime localDateTime46 = new org.joda.time.LocalDateTime();
        int int47 = localDateTime46.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime49 = localDateTime46.minusMonths((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime51 = localDateTime49.minusMonths((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime53 = localDateTime51.plusWeeks(22);
        org.joda.time.LocalDateTime.Property property54 = localDateTime53.dayOfMonth();
        java.util.Locale locale59 = new java.util.Locale("11", "weekyear", "fra");
        java.lang.String str60 = locale59.getDisplayName();
        java.lang.String str61 = dateTimeField42.getAsShortText((org.joda.time.ReadablePartial) localDateTime53, (int) (byte) 1, locale59);
        int int62 = dateTimeField31.getMaximumShortTextLength(locale59);
        boolean boolean63 = locale59.hasExtensions();
        int int64 = property23.getMaximumTextLength(locale59);
        int int65 = property5.getMaximumShortTextLength(locale59);
        org.joda.time.LocalDateTime localDateTime66 = property5.getLocalDateTime();
        long long67 = property5.remainder();
        java.lang.String str68 = property5.getName();
        boolean boolean69 = property5.isLeap();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Japon" + "'", str10, "Japon");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "16" + "'", str12, "16");
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 16 + "'", int13 == 16);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 86399999L + "'", long33 == 86399999L);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 22 + "'", int47 == 22);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertEquals(locale59.toString(), "11_WEEKYEAR_fra");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "11 (WEEKYEAR,fra)" + "'", str60, "11 (WEEKYEAR,fra)");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "1" + "'", str61, "1");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 2 + "'", int62 == 2);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 2 + "'", int64 == 2);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 2 + "'", int65 == 2);
        org.junit.Assert.assertNotNull(localDateTime66);
// flaky:         org.junit.Assert.assertTrue("'" + long67 + "' != '" + 24851211L + "'", long67 == 24851211L);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "dayOfMonth" + "'", str68, "dayOfMonth");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
    }

    @Test
    public void test08222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08222");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.minusMillis((int) (byte) 1);
        java.lang.String str3 = localDateTime2.toString();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.minusMonths((int) 'a');
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusMinutes(22);
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime();
        boolean boolean10 = localDateTime8.isBefore((org.joda.time.ReadablePartial) localDateTime9);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime9.plusSeconds((int) (byte) 100);
        boolean boolean13 = localDateTime7.isBefore((org.joda.time.ReadablePartial) localDateTime9);
        java.lang.Class<?> wildcardClass14 = localDateTime7.getClass();
        org.junit.Assert.assertNotNull(localDateTime2);
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "2022-02-16T06:54:11.241" + "'", str3, "2022-02-16T06:54:11.241");
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test08223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08223");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime1.plusMinutes((int) '#');
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.weekOfWeekyear();
        java.lang.String str8 = property7.getAsShortText();
        org.joda.time.LocalDateTime localDateTime10 = property7.addWrapFieldToCopy((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minusMillis((int) (byte) 1);
        java.lang.String str14 = localDateTime13.toString();
        org.joda.time.DateTime dateTime15 = localDateTime13.toDateTime();
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.minusMillis((int) (byte) 1);
        java.lang.String str19 = localDateTime18.toString();
        org.joda.time.DateTime dateTime20 = localDateTime18.toDateTime();
        boolean boolean21 = dateTime15.isEqual((org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.Chronology chronology22 = dateTime20.getChronology();
        org.joda.time.ReadableInstant readableInstant23 = null;
        boolean boolean24 = dateTime20.isEqual(readableInstant23);
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime();
        boolean boolean27 = localDateTime25.isBefore((org.joda.time.ReadablePartial) localDateTime26);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime26.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property30 = localDateTime26.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime31 = property30.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField32 = property30.getField();
        long long35 = dateTimeField32.addWrapField((long) 6, (int) (byte) 0);
        java.lang.String str37 = dateTimeField32.getAsShortText((long) (byte) 10);
        boolean boolean38 = dateTime20.equals((java.lang.Object) str37);
        int int39 = property7.getDifference((org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.LocalDateTime localDateTime40 = property7.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime41 = property7.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime42 = property7.getLocalDateTime();
        long long43 = property7.remainder();
        org.joda.time.DateTimeField dateTimeField44 = property7.getField();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "7" + "'", str8, "7");
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime13);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "2022-02-16T06:54:11.272" + "'", str14, "2022-02-16T06:54:11.272");
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(localDateTime18);
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "2022-02-16T06:54:11.272" + "'", str19, "2022-02-16T06:54:11.272");
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 6L + "'", long35 == 6L);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "1" + "'", str37, "1");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(localDateTime42);
// flaky:         org.junit.Assert.assertTrue("'" + long43 + "' != '" + 199751273L + "'", long43 == 199751273L);
        org.junit.Assert.assertNotNull(dateTimeField44);
    }

    @Test
    public void test08224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08224");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Locale[] localeArray3 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList4 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList4, localeArray3);
        java.util.Locale locale6 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList4);
        java.util.Locale.LanguageRange[] languageRangeArray7 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList8 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList8, languageRangeArray7);
        java.util.Locale[] localeArray10 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList11 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList11, localeArray10);
        java.util.Locale locale13 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList8, (java.util.Collection<java.util.Locale>) localeList11);
        java.util.Locale.FilteringMode filteringMode14 = null;
        java.util.List<java.util.Locale> localeList15 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList11, filteringMode14);
        java.util.Locale locale16 = java.util.Locale.FRENCH;
        java.util.Set<java.lang.String> strSet17 = locale16.getUnicodeLocaleAttributes();
        java.lang.Object[] objArray18 = strSet17.toArray();
        java.util.Locale.FilteringMode filteringMode19 = java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList20 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet17, filteringMode19);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.getDefault();
        int int23 = dateTimeZone21.getStandardOffset((long) (-100));
        java.util.TimeZone timeZone24 = dateTimeZone21.toTimeZone();
        int int25 = timeZone24.getRawOffset();
        timeZone24.setRawOffset(50);
        java.lang.String str28 = timeZone24.getID();
        boolean boolean29 = strSet17.equals((java.lang.Object) timeZone24);
        java.lang.String str30 = timeZone24.getID();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.getDefault();
        int int33 = dateTimeZone31.getStandardOffset((long) (-100));
        java.util.TimeZone timeZone34 = dateTimeZone31.toTimeZone();
        java.util.TimeZone timeZone35 = dateTimeZone31.toTimeZone();
        boolean boolean36 = timeZone24.hasSameRules(timeZone35);
        int int37 = timeZone35.getRawOffset();
        boolean boolean38 = timeZone35.observesDaylightTime();
        timeZone35.setRawOffset(406421);
        java.lang.Object obj41 = timeZone35.clone();
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localeArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(locale6);
        org.junit.Assert.assertNotNull(languageRangeArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(localeArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(locale13);
        org.junit.Assert.assertNotNull(localeList15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet17);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[]");
        org.junit.Assert.assertTrue("'" + filteringMode19 + "' != '" + java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES + "'", filteringMode19.equals(java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
// flaky:         org.junit.Assert.assertTrue("'" + int23 + "' != '" + 421200000 + "'", int23 == 421200000);
        org.junit.Assert.assertNotNull(timeZone24);
// flaky:         org.junit.Assert.assertEquals(timeZone24.getDisplayName(), "GMT+00:00");
// flaky:         org.junit.Assert.assertTrue("'" + int25 + "' != '" + 421200000 + "'", int25 == 421200000);
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "+117:00" + "'", str28, "+117:00");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "+117:00" + "'", str30, "+117:00");
        org.junit.Assert.assertNotNull(dateTimeZone31);
// flaky:         org.junit.Assert.assertTrue("'" + int33 + "' != '" + 421200000 + "'", int33 == 421200000);
        org.junit.Assert.assertNotNull(timeZone34);
// flaky:         org.junit.Assert.assertEquals(timeZone34.getDisplayName(), "GMT+;7:00");
        org.junit.Assert.assertNotNull(timeZone35);
// flaky:         org.junit.Assert.assertEquals(timeZone35.getDisplayName(), "GMT+00:06");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int37 + "' != '" + 421200000 + "'", int37 == 421200000);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(obj41);
// flaky:         org.junit.Assert.assertEquals(obj41.toString(), "java.util.SimpleTimeZone[id=+117:00,offset=406421,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj41), "java.util.SimpleTimeZone[id=+117:00,offset=406421,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj41), "java.util.SimpleTimeZone[id=+117:00,offset=406421,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]");
    }

    @Test
    public void test08225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08225");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(376);
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetMillis((int) 'u');
        long long7 = dateTimeZone3.convertLocalToUTC((long) 1, false, 822L);
        java.lang.String str8 = dateTimeZone3.toString();
        java.lang.String str10 = dateTimeZone3.getShortName((long) 21);
        long long12 = dateTimeZone1.getMillisKeepLocal(dateTimeZone3, (long) 894);
        long long14 = dateTimeZone3.nextTransition((long) 86400000);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-116L) + "'", long7 == (-116L));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+00:00:00.117" + "'", str8, "+00:00:00.117");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+00:00:00.117" + "'", str10, "+00:00:00.117");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1153L + "'", long12 == 1153L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 86400000L + "'", long14 == 86400000L);
    }

    @Test
    public void test08226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08226");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("2022-02-11T09:47:49.888");
        int int3 = timeZone1.getOffset(822L);
        int int4 = timeZone1.getRawOffset();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str8 = timeZone1.getDisplayName(true, 483);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal style: 483");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Heure de Greenwich");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone5);
    }

    @Test
    public void test08227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08227");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder1.addUnicodeLocaleAttribute("Japon");
        java.util.Locale.Builder builder4 = builder1.clear();
        java.util.Locale.Builder builder5 = builder1.clearExtensions();
        java.util.Locale.Category category6 = java.util.Locale.Category.DISPLAY;
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime();
        boolean boolean9 = localDateTime7.isBefore((org.joda.time.ReadablePartial) localDateTime8);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime8.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property12 = localDateTime8.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime13 = property12.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField14 = property12.getField();
        int int17 = dateTimeField14.getDifference(1L, 86399999L);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.getDefault();
        java.util.Locale locale22 = null;
        java.lang.String str23 = dateTimeZone20.getName((long) (short) 10, locale22);
        long long25 = dateTimeZone19.getMillisKeepLocal(dateTimeZone20, (long) 874);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.getDefault();
        long long28 = dateTimeZone20.getMillisKeepLocal(dateTimeZone26, (long) '4');
        int int30 = dateTimeZone20.getOffsetFromLocal((long) 83);
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.minusMillis((int) (byte) 1);
        java.lang.String str34 = localDateTime33.toString();
        org.joda.time.DateTime dateTime35 = localDateTime33.toDateTime();
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime38 = localDateTime36.minusMillis((int) (byte) 1);
        java.lang.String str39 = localDateTime38.toString();
        org.joda.time.DateTime dateTime40 = localDateTime38.toDateTime();
        boolean boolean41 = dateTime35.isEqual((org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime44 = localDateTime42.minusMillis((int) (byte) 1);
        java.lang.String str45 = localDateTime44.toString();
        org.joda.time.DateTime dateTime46 = localDateTime44.toDateTime();
        boolean boolean47 = dateTime35.isEqual((org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.LocalDateTime localDateTime48 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime50 = localDateTime48.minusMillis((int) (byte) 1);
        java.lang.String str51 = localDateTime50.toString();
        org.joda.time.DateTime dateTime52 = localDateTime50.toDateTime();
        org.joda.time.LocalDateTime localDateTime53 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime55 = localDateTime53.minusMillis((int) (byte) 1);
        java.lang.String str56 = localDateTime55.toString();
        org.joda.time.DateTime dateTime57 = localDateTime55.toDateTime();
        boolean boolean58 = dateTime52.isEqual((org.joda.time.ReadableInstant) dateTime57);
        boolean boolean59 = dateTime35.isEqual((org.joda.time.ReadableInstant) dateTime57);
        int int60 = dateTimeZone20.getOffset((org.joda.time.ReadableInstant) dateTime57);
        org.joda.time.DateTimeZone dateTimeZone61 = dateTime57.getZone();
        java.util.Locale locale63 = java.util.Locale.TAIWAN;
        java.lang.String str64 = dateTimeZone61.getShortName((long) 11, locale63);
        java.util.Locale locale68 = new java.util.Locale("11", "weekyear", "fra");
        java.lang.String str69 = locale68.getDisplayName();
        org.joda.time.LocalDateTime localDateTime70 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime71 = new org.joda.time.LocalDateTime();
        boolean boolean72 = localDateTime70.isBefore((org.joda.time.ReadablePartial) localDateTime71);
        org.joda.time.LocalDateTime localDateTime74 = localDateTime71.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property75 = localDateTime71.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime76 = property75.withMinimumValue();
        java.util.Locale locale77 = java.util.Locale.UK;
        java.lang.String str78 = property75.getAsShortText(locale77);
        java.lang.String str79 = locale68.getDisplayScript(locale77);
        java.lang.String str80 = locale77.getDisplayName();
        java.lang.String str81 = locale63.getDisplayScript(locale77);
        java.lang.String str82 = dateTimeField14.getAsText((long) 9, locale77);
        java.util.Locale.setDefault(category6, locale77);
        java.util.Locale.Builder builder84 = builder1.setLocale(locale77);
        java.util.Set<java.lang.String> strSet85 = locale77.getUnicodeLocaleAttributes();
        java.lang.String str86 = locale77.getDisplayScript();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + category6 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category6.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+117:00" + "'", str23, "+117:00");
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 874L + "'", long25 == 874L);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 52L + "'", long28 == 52L);
// flaky:         org.junit.Assert.assertTrue("'" + int30 + "' != '" + 421200000 + "'", int30 == 421200000);
        org.junit.Assert.assertNotNull(localDateTime33);
// flaky:         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "2022-02-16T06:54:11.471" + "'", str34, "2022-02-16T06:54:11.471");
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(localDateTime38);
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "2022-02-16T06:54:11.471" + "'", str39, "2022-02-16T06:54:11.471");
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(localDateTime44);
// flaky:         org.junit.Assert.assertEquals("'" + str45 + "' != '" + "2022-02-16T06:54:11.471" + "'", str45, "2022-02-16T06:54:11.471");
        org.junit.Assert.assertNotNull(dateTime46);
// flaky:         org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(localDateTime50);
// flaky:         org.junit.Assert.assertEquals("'" + str51 + "' != '" + "2022-02-16T06:54:11.471" + "'", str51, "2022-02-16T06:54:11.471");
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(localDateTime55);
// flaky:         org.junit.Assert.assertEquals("'" + str56 + "' != '" + "2022-02-16T06:54:11.471" + "'", str56, "2022-02-16T06:54:11.471");
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
// flaky:         org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int60 + "' != '" + 421200000 + "'", int60 == 421200000);
        org.junit.Assert.assertNotNull(dateTimeZone61);
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "zh_TW");
// flaky:         org.junit.Assert.assertEquals("'" + str64 + "' != '" + "+117:00" + "'", str64, "+117:00");
        org.junit.Assert.assertEquals(locale68.toString(), "11_WEEKYEAR_fra");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "11 (WEEKYEAR,fra)" + "'", str69, "11 (WEEKYEAR,fra)");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(localDateTime74);
        org.junit.Assert.assertNotNull(property75);
        org.junit.Assert.assertNotNull(localDateTime76);
        org.junit.Assert.assertNotNull(locale77);
        org.junit.Assert.assertEquals(locale77.toString(), "en_GB");
// flaky:         org.junit.Assert.assertEquals("'" + str78 + "' != '" + "16" + "'", str78, "16");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, "");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "anglais (Royaume-Uni)" + "'", str80, "anglais (Royaume-Uni)");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "" + "'", str81, "");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "1" + "'", str82, "1");
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(strSet85);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "" + "'", str86, "");
    }

    @Test
    public void test08228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08228");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.minusMillis((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.plusDays(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.withField(dateTimeFieldType5, 0);
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime();
        boolean boolean10 = localDateTime8.isBefore((org.joda.time.ReadablePartial) localDateTime9);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime9.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime9.plusMinutes((int) '#');
        org.joda.time.LocalDateTime localDateTime16 = localDateTime9.minusMinutes((int) (short) 1);
        boolean boolean17 = localDateTime7.isAfter((org.joda.time.ReadablePartial) localDateTime16);
        org.joda.time.LocalDateTime.Property property18 = localDateTime7.secondOfMinute();
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = property18.getFieldType();
        org.joda.time.LocalDateTime localDateTime20 = property18.roundHalfFloorCopy();
        long long21 = property18.remainder();
        org.joda.time.DateTimeField dateTimeField22 = property18.getField();
        int int23 = property18.get();
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(localDateTime20);
// flaky:         org.junit.Assert.assertTrue("'" + long21 + "' != '" + 515L + "'", long21 == 515L);
        org.junit.Assert.assertNotNull(dateTimeField22);
// flaky:         org.junit.Assert.assertTrue("'" + int23 + "' != '" + 11 + "'", int23 == 11);
    }

    @Test
    public void test08229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08229");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.minusMillis((int) (byte) 1);
        java.lang.String str3 = localDateTime2.toString();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.minusMonths((int) 'a');
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusMinutes(22);
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime();
        boolean boolean10 = localDateTime8.isBefore((org.joda.time.ReadablePartial) localDateTime9);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime9.plusSeconds((int) (byte) 100);
        boolean boolean13 = localDateTime7.isBefore((org.joda.time.ReadablePartial) localDateTime9);
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime();
        int int15 = localDateTime14.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime14.minusMonths((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.minusMonths((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.plusYears(10);
        boolean boolean22 = localDateTime7.isAfter((org.joda.time.ReadablePartial) localDateTime21);
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime();
        boolean boolean25 = localDateTime23.isBefore((org.joda.time.ReadablePartial) localDateTime24);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime24.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property28 = localDateTime24.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime();
        boolean boolean31 = localDateTime29.isBefore((org.joda.time.ReadablePartial) localDateTime30);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime30.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property34 = localDateTime30.dayOfMonth();
        java.util.Locale locale35 = java.util.Locale.FRENCH;
        java.util.Set<java.lang.String> strSet36 = locale35.getUnicodeLocaleAttributes();
        java.lang.String str37 = locale35.getVariant();
        java.lang.String str38 = property34.getAsText(locale35);
        java.lang.String str39 = property28.getAsShortText(locale35);
        org.joda.time.LocalDateTime localDateTime40 = property28.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime localDateTime41 = property28.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime42 = property28.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime44 = localDateTime42.withYear((-1));
        int int45 = localDateTime42.getDayOfMonth();
        boolean boolean46 = localDateTime21.isBefore((org.joda.time.ReadablePartial) localDateTime42);
        org.joda.time.LocalDateTime localDateTime48 = localDateTime42.minusDays(353);
        int int49 = localDateTime48.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime51 = localDateTime48.withCenturyOfEra(203);
        org.joda.time.LocalDateTime localDateTime53 = localDateTime48.withMillisOfSecond(120);
        java.util.Date date54 = localDateTime48.toDate();
        org.junit.Assert.assertNotNull(localDateTime2);
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "2022-02-16T06:54:11.660" + "'", str3, "2022-02-16T06:54:11.660");
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 22 + "'", int15 == 22);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
// flaky:         org.junit.Assert.assertEquals("'" + str38 + "' != '" + "16" + "'", str38, "16");
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "16" + "'", str39, "16");
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 28 + "'", int45 == 28);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2021 + "'", int49 == 2021);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(date54);
// flaky:         org.junit.Assert.assertEquals(date54.toString(), "Fri Mar 12 06:54:11 GMT+00:00 2021");
    }

    @Test
    public void test08230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08230");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours(35427390);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Offset is too large");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08231");
        java.lang.Object obj0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime();
        boolean boolean3 = localDateTime1.isBefore((org.joda.time.ReadablePartial) localDateTime2);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property6 = localDateTime2.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime7 = property6.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField8 = property6.getField();
        long long10 = dateTimeField8.remainder((-1L));
        java.util.Locale locale12 = java.util.Locale.UK;
        java.lang.String str13 = dateTimeField8.getAsShortText((long) 22, locale12);
        int int14 = dateTimeField8.getMinimumValue();
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime();
        boolean boolean17 = localDateTime15.isBefore((org.joda.time.ReadablePartial) localDateTime16);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime16.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime16.plusMinutes((int) '#');
        org.joda.time.LocalDateTime localDateTime23 = localDateTime16.minusMinutes((int) (short) 1);
        org.joda.time.LocalDateTime.Property property24 = localDateTime23.weekOfWeekyear();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime23, chronology25);
        java.util.Locale locale28 = new java.util.Locale("2022-02-11T09:47:50.218");
        java.lang.String str29 = dateTimeField8.getAsShortText((org.joda.time.ReadablePartial) localDateTime23, locale28);
        java.util.Locale locale30 = java.util.Locale.FRENCH;
        java.lang.String str31 = locale30.getDisplayName();
        int int32 = dateTimeField8.getMaximumShortTextLength(locale30);
        boolean boolean33 = org.joda.time.field.FieldUtils.equals(obj0, (java.lang.Object) dateTimeField8);
        java.lang.String str34 = dateTimeField8.getName();
        long long36 = dateTimeField8.remainder((long) 642);
        java.lang.String str38 = dateTimeField8.getAsText(35310586L);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 86399999L + "'", long10 == 86399999L);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "1" + "'", str13, "1");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertEquals(locale28.toString(), "2022-02-11t09:47:50.218");
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "16" + "'", str29, "16");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "French" + "'", str31, "French");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2 + "'", int32 == 2);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "dayOfMonth" + "'", str34, "dayOfMonth");
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 642L + "'", long36 == 642L);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "1" + "'", str38, "1");
    }

    @Test
    public void test08232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08232");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property5 = localDateTime1.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime6 = property5.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField7 = property5.getField();
        int int10 = dateTimeField7.getDifference(1L, 86399999L);
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime();
        int int12 = localDateTime11.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime11.minusMonths((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minusMonths((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.plusWeeks(22);
        org.joda.time.LocalDateTime.Property property19 = localDateTime18.dayOfMonth();
        java.util.Locale locale24 = new java.util.Locale("11", "weekyear", "fra");
        java.lang.String str25 = locale24.getDisplayName();
        java.lang.String str26 = dateTimeField7.getAsShortText((org.joda.time.ReadablePartial) localDateTime18, (int) (byte) 1, locale24);
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime();
        boolean boolean29 = localDateTime27.isBefore((org.joda.time.ReadablePartial) localDateTime28);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime28.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property32 = localDateTime28.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime33 = property32.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField34 = property32.getField();
        org.joda.time.LocalDateTime localDateTime35 = property32.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime38 = localDateTime36.minusMillis((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime38.plusDays(0);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime40.plusMillis((int) '#');
        int[] intArray43 = localDateTime40.getValues();
        int int44 = dateTimeField7.getMinimumValue((org.joda.time.ReadablePartial) localDateTime35, intArray43);
        java.lang.String str45 = dateTimeField7.toString();
        org.joda.time.LocalDateTime localDateTime46 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime47 = new org.joda.time.LocalDateTime();
        boolean boolean48 = localDateTime46.isBefore((org.joda.time.ReadablePartial) localDateTime47);
        org.joda.time.LocalDateTime.Property property49 = localDateTime46.millisOfDay();
        org.joda.time.LocalDateTime localDateTime51 = localDateTime46.plusMonths((int) (byte) 1);
        java.util.Locale.Builder builder52 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder53 = builder52.clear();
        java.util.Locale locale55 = java.util.Locale.forLanguageTag("6");
        java.util.Locale.Builder builder56 = builder53.setLocale(locale55);
        java.lang.String str57 = dateTimeField7.getAsShortText((org.joda.time.ReadablePartial) localDateTime51, locale55);
        java.lang.String str58 = locale55.getDisplayVariant();
        org.joda.time.LocalDateTime localDateTime59 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime61 = localDateTime59.minusMillis((int) (byte) 1);
        java.lang.String str62 = localDateTime61.toString();
        org.joda.time.LocalDateTime localDateTime64 = localDateTime61.minusMonths((int) 'a');
        org.joda.time.LocalDateTime localDateTime66 = localDateTime64.minusMinutes(22);
        org.joda.time.LocalDateTime localDateTime67 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime68 = new org.joda.time.LocalDateTime();
        boolean boolean69 = localDateTime67.isBefore((org.joda.time.ReadablePartial) localDateTime68);
        org.joda.time.LocalDateTime localDateTime71 = localDateTime68.plusSeconds((int) (byte) 100);
        boolean boolean72 = localDateTime66.isBefore((org.joda.time.ReadablePartial) localDateTime68);
        org.joda.time.LocalDateTime localDateTime73 = new org.joda.time.LocalDateTime();
        int int74 = localDateTime73.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime76 = localDateTime73.minusMonths((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime78 = localDateTime76.minusMonths((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime80 = localDateTime78.plusYears(10);
        boolean boolean81 = localDateTime66.isAfter((org.joda.time.ReadablePartial) localDateTime80);
        org.joda.time.LocalDateTime.Property property82 = localDateTime66.centuryOfEra();
        java.util.Locale.Category category83 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale84 = java.util.Locale.getDefault(category83);
        java.lang.String str85 = locale84.getDisplayName();
        java.util.Locale locale88 = new java.util.Locale("fra", "");
        java.util.Set<java.lang.String> strSet89 = locale88.getUnicodeLocaleAttributes();
        java.lang.String str90 = locale88.getScript();
        java.util.Set<java.lang.Character> charSet91 = locale88.getExtensionKeys();
        java.util.Set<java.lang.String> strSet92 = locale88.getUnicodeLocaleKeys();
        java.lang.String str93 = locale88.getDisplayName();
        java.lang.String str94 = locale84.getDisplayLanguage(locale88);
        java.lang.String str95 = locale88.toLanguageTag();
        int int96 = property82.getMaximumTextLength(locale88);
        java.lang.String str97 = locale88.getDisplayVariant();
        java.lang.String str98 = locale55.getDisplayScript(locale88);
        java.util.Set<java.lang.String> strSet99 = locale88.getUnicodeLocaleKeys();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 22 + "'", int12 == 22);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertEquals(locale24.toString(), "11_WEEKYEAR_fra");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "11 (WEEKYEAR,fra)" + "'", str25, "11 (WEEKYEAR,fra)");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "1" + "'", str26, "1");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(intArray43);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[2022, 2, 16, 24851791]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "DateTimeField[dayOfMonth]" + "'", str45, "DateTimeField[dayOfMonth]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "");
        org.junit.Assert.assertNotNull(builder56);
// flaky:         org.junit.Assert.assertEquals("'" + str57 + "' != '" + "16" + "'", str57, "16");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNotNull(localDateTime61);
// flaky:         org.junit.Assert.assertEquals("'" + str62 + "' != '" + "2022-02-16T06:54:11.791" + "'", str62, "2022-02-16T06:54:11.791");
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(localDateTime71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 22 + "'", int74 == 22);
        org.junit.Assert.assertNotNull(localDateTime76);
        org.junit.Assert.assertNotNull(localDateTime78);
        org.junit.Assert.assertNotNull(localDateTime80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(property82);
        org.junit.Assert.assertTrue("'" + category83 + "' != '" + java.util.Locale.Category.FORMAT + "'", category83.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale84);
        org.junit.Assert.assertEquals(locale84.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "French" + "'", str85, "French");
        org.junit.Assert.assertEquals(locale88.toString(), "fra");
        org.junit.Assert.assertNotNull(strSet89);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "" + "'", str90, "");
        org.junit.Assert.assertNotNull(charSet91);
        org.junit.Assert.assertNotNull(strSet92);
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "fra" + "'", str93, "fra");
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "French" + "'", str94, "French");
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "fra" + "'", str95, "fra");
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 7 + "'", int96 == 7);
        org.junit.Assert.assertEquals("'" + str97 + "' != '" + "" + "'", str97, "");
        org.junit.Assert.assertEquals("'" + str98 + "' != '" + "" + "'", str98, "");
        org.junit.Assert.assertNotNull(strSet99);
    }

    @Test
    public void test08233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08233");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) -1);
        int int3 = dateTimeZone1.getStandardOffset(1644572877407L);
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        boolean boolean6 = localDateTime4.isBefore((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.plusSeconds((int) (byte) 100);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = null;
        java.lang.String str10 = localDateTime5.toString(dateTimeFormatter9);
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        org.joda.time.LocalDateTime.Property property12 = localDateTime5.property(dateTimeFieldType11);
        org.joda.time.LocalDateTime localDateTime13 = property12.roundHalfFloorCopy();
        java.lang.String str14 = property12.getName();
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.minusMillis((int) (byte) 1);
        java.lang.String str18 = localDateTime17.toString();
        org.joda.time.DateTime dateTime19 = localDateTime17.toDateTime();
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.minusMillis((int) (byte) 1);
        java.lang.String str23 = localDateTime22.toString();
        org.joda.time.DateTime dateTime24 = localDateTime22.toDateTime();
        boolean boolean25 = dateTime19.isEqual((org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.dayOfYear();
        int int27 = dateTime24.get(dateTimeFieldType26);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.monthOfYear();
        boolean boolean29 = dateTime24.isSupported(dateTimeFieldType28);
        long long30 = property12.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime24);
        int int31 = dateTimeZone1.getOffset((org.joda.time.ReadableInstant) dateTime24);
        java.lang.String str33 = dateTimeZone1.getShortName((long) 464);
        long long35 = dateTimeZone1.previousTransition((long) 753);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-3600000) + "'", int3 == (-3600000));
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(localDateTime8);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "2022-02-16T06:54:11.875" + "'", str10, "2022-02-16T06:54:11.875");
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "clockhourOfHalfday" + "'", str14, "clockhourOfHalfday");
        org.junit.Assert.assertNotNull(localDateTime17);
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "2022-02-16T06:54:11.874" + "'", str18, "2022-02-16T06:54:11.874");
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(localDateTime22);
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "2022-02-16T06:54:11.874" + "'", str23, "2022-02-16T06:54:11.874");
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + 47 + "'", int27 == 47);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
// flaky:         org.junit.Assert.assertTrue("'" + long30 + "' != '" + 117L + "'", long30 == 117L);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-3600000) + "'", int31 == (-3600000));
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "-01:00" + "'", str33, "-01:00");
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 753L + "'", long35 == 753L);
    }

    @Test
    public void test08234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08234");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.minusMillis((int) (byte) 1);
        java.lang.String str3 = localDateTime2.toString();
        org.joda.time.DateTime dateTime4 = localDateTime2.toDateTime();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime2.minusWeeks(1969);
        org.joda.time.LocalDateTime.Property property7 = localDateTime2.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime2.minusYears((-282338282));
        org.junit.Assert.assertNotNull(localDateTime2);
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "2022-02-16T06:54:11.898" + "'", str3, "2022-02-16T06:54:11.898");
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime9);
    }

    @Test
    public void test08235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08235");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) 'u');
        long long5 = dateTimeZone1.convertLocalToUTC((long) 1, false, 822L);
        java.util.TimeZone timeZone6 = dateTimeZone1.toTimeZone();
        int int8 = dateTimeZone1.getOffset(10L);
        org.joda.time.LocalDateTime localDateTime9 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime();
        boolean boolean12 = localDateTime10.isBefore((org.joda.time.ReadablePartial) localDateTime11);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime11.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property15 = localDateTime11.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime16 = property15.withMinimumValue();
        org.joda.time.DurationField durationField17 = property15.getDurationField();
        java.util.Locale.Builder builder18 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder19 = builder18.clear();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone20);
        java.util.Locale locale23 = java.util.Locale.CHINESE;
        java.lang.String str24 = dateTimeZone20.getName((long) (short) 0, locale23);
        java.util.Locale.Builder builder25 = builder18.setLocale(locale23);
        java.lang.String str26 = property15.getAsText(locale23);
        boolean boolean27 = localDateTime9.equals((java.lang.Object) property15);
        java.util.Locale locale28 = java.util.Locale.FRENCH;
        java.lang.String str29 = locale28.getDisplayName();
        java.lang.String str30 = property15.getAsText(locale28);
        int int31 = property15.getMinimumValue();
        org.joda.time.LocalDateTime localDateTime32 = property15.withMaximumValue();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime34 = localDateTime32.withSecondOfMinute(505);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 505 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-116L) + "'", long5 == (-116L));
        org.junit.Assert.assertNotNull(timeZone6);
        org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 117 + "'", int8 == 117);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "zh");
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+117:00" + "'", str24, "+117:00");
        org.junit.Assert.assertNotNull(builder25);
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "16" + "'", str26, "16");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "French" + "'", str29, "French");
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "16" + "'", str30, "16");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(localDateTime32);
    }

    @Test
    public void test08236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08236");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property5 = localDateTime1.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime6 = property5.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField7 = property5.getField();
        long long10 = dateTimeField7.addWrapField((long) 6, (int) (byte) 0);
        java.lang.String str12 = dateTimeField7.getAsShortText((long) (byte) 0);
        java.lang.String str14 = dateTimeField7.getAsShortText((-116L));
        org.joda.time.ReadablePartial readablePartial15 = null;
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime();
        boolean boolean18 = localDateTime16.isBefore((org.joda.time.ReadablePartial) localDateTime17);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime17.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property21 = localDateTime17.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime22 = property21.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField23 = property21.getField();
        long long25 = dateTimeField23.remainder((-1L));
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = dateTimeField23.getType();
        boolean boolean27 = dateTimeField23.isSupported();
        java.lang.String str29 = dateTimeField23.getAsText((long) 715);
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime32 = localDateTime30.minusMillis((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.plusDays(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDateTime localDateTime37 = localDateTime32.withField(dateTimeFieldType35, 0);
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime();
        boolean boolean40 = localDateTime38.isBefore((org.joda.time.ReadablePartial) localDateTime39);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime39.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime44 = localDateTime39.plusMinutes((int) '#');
        org.joda.time.LocalDateTime localDateTime46 = localDateTime39.minusMinutes((int) (short) 1);
        boolean boolean47 = localDateTime37.isAfter((org.joda.time.ReadablePartial) localDateTime46);
        org.joda.time.LocalDateTime.Property property48 = localDateTime37.year();
        org.joda.time.LocalDateTime localDateTime49 = new org.joda.time.LocalDateTime();
        int int50 = localDateTime49.getYearOfCentury();
        int int51 = localDateTime49.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime53 = localDateTime49.minusMillis((int) (byte) -1);
        org.joda.time.DateTime dateTime54 = localDateTime49.toDateTime();
        org.joda.time.LocalDateTime localDateTime56 = localDateTime49.withMonthOfYear((int) (short) 10);
        boolean boolean57 = localDateTime37.isAfter((org.joda.time.ReadablePartial) localDateTime49);
        org.joda.time.LocalDateTime localDateTime58 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime59 = new org.joda.time.LocalDateTime();
        boolean boolean60 = localDateTime58.isBefore((org.joda.time.ReadablePartial) localDateTime59);
        int[] intArray61 = localDateTime59.getValues();
        org.joda.time.LocalDateTime localDateTime63 = localDateTime59.plusYears((int) (byte) -1);
        int[] intArray64 = localDateTime59.getValues();
        int int65 = dateTimeField23.getMaximumValue((org.joda.time.ReadablePartial) localDateTime49, intArray64);
        int int66 = dateTimeField7.getMinimumValue(readablePartial15, intArray64);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.field.FieldUtils.verifyValueBounds(dateTimeField7, 731, 0, 394);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 731 for dayOfMonth must be in the range [0,394]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 6L + "'", long10 == 6L);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "1" + "'", str12, "1");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "31" + "'", str14, "31");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 86399999L + "'", long25 == 86399999L);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "1" + "'", str29, "1");
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 22 + "'", int50 == 22);
// flaky:         org.junit.Assert.assertTrue("'" + int51 + "' != '" + 11 + "'", int51 == 11);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(intArray61);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[2022, 2, 16, 24851923]");
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(intArray64);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[2022, 2, 16, 24851923]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 28 + "'", int65 == 28);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 1 + "'", int66 == 1);
    }

    @Test
    public void test08237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08237");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        long long4 = dateTimeZone0.convertLocalToUTC(730123809L, true, (long) 22);
        java.util.TimeZone timeZone5 = dateTimeZone0.toTimeZone();
        java.lang.String str7 = dateTimeZone0.getName(35412927L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 730123809L + "'", long4 == 730123809L);
        org.junit.Assert.assertNotNull(timeZone5);
        org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:00" + "'", str7, "+00:00");
    }

    @Test
    public void test08238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08238");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime();
        boolean boolean3 = localDateTime1.isBefore((org.joda.time.ReadablePartial) localDateTime2);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusMinutes((int) '#');
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.weekOfWeekyear();
        java.lang.String str9 = property8.getAsShortText();
        org.joda.time.LocalDateTime localDateTime11 = property8.addWrapFieldToCopy((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.minusMillis((int) (byte) 1);
        java.lang.String str15 = localDateTime14.toString();
        org.joda.time.DateTime dateTime16 = localDateTime14.toDateTime();
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.minusMillis((int) (byte) 1);
        java.lang.String str20 = localDateTime19.toString();
        org.joda.time.DateTime dateTime21 = localDateTime19.toDateTime();
        boolean boolean22 = dateTime16.isEqual((org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.Chronology chronology23 = dateTime21.getChronology();
        org.joda.time.ReadableInstant readableInstant24 = null;
        boolean boolean25 = dateTime21.isEqual(readableInstant24);
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime();
        boolean boolean28 = localDateTime26.isBefore((org.joda.time.ReadablePartial) localDateTime27);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime27.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property31 = localDateTime27.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime32 = property31.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField33 = property31.getField();
        long long36 = dateTimeField33.addWrapField((long) 6, (int) (byte) 0);
        java.lang.String str38 = dateTimeField33.getAsShortText((long) (byte) 10);
        boolean boolean39 = dateTime21.equals((java.lang.Object) str38);
        int int40 = property8.getDifference((org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.Chronology chronology41 = dateTime21.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime((java.lang.Object) (-2718), chronology41);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: java.lang.Integer");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "7" + "'", str9, "7");
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime14);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "2022-02-16T06:54:11.996" + "'", str15, "2022-02-16T06:54:11.996");
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(localDateTime19);
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "2022-02-16T06:54:11.996" + "'", str20, "2022-02-16T06:54:11.996");
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 6L + "'", long36 == 6L);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "1" + "'", str38, "1");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(chronology41);
    }

    @Test
    public void test08239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08239");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property5 = localDateTime1.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime6 = property5.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField7 = property5.getField();
        org.joda.time.LocalDateTime localDateTime8 = property5.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.plusWeeks(49);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime8.withMinuteOfHour(10);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.Chronology chronology14 = null;
        boolean boolean15 = dateTimeFieldType13.isSupported(chronology14);
        java.lang.String str16 = dateTimeFieldType13.getName();
        org.joda.time.DurationFieldType durationFieldType17 = dateTimeFieldType13.getDurationType();
        boolean boolean18 = localDateTime12.isSupported(durationFieldType17);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.LocalDateTime localDateTime21 = localDateTime12.withPeriodAdded(readablePeriod19, 715);
        java.util.Date date22 = localDateTime12.toDate();
        org.joda.time.LocalDateTime localDateTime23 = org.joda.time.LocalDateTime.fromDateFields(date22);
        org.joda.time.LocalDateTime.Property property24 = localDateTime23.dayOfYear();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "dayOfYear" + "'", str16, "dayOfYear");
        org.junit.Assert.assertNotNull(durationFieldType17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(date22);
// flaky:         org.junit.Assert.assertEquals(date22.toString(), "Wed Feb 16 06:10:12 GMT+00:00 2022");
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(property24);
    }

    @Test
    public void test08240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08240");
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime();
        int int4 = localDateTime3.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.minusMonths((int) (short) 0);
        org.joda.time.Chronology chronology7 = localDateTime6.getChronology();
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime(chronology7);
        org.joda.time.LocalDateTime localDateTime9 = org.joda.time.LocalDateTime.now(chronology7);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime2.withFields((org.joda.time.ReadablePartial) localDateTime9);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.LocalDateTime localDateTime13 = localDateTime10.withPeriodAdded(readablePeriod11, (-68990));
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minusMillis((int) (byte) 1);
        java.lang.String str17 = localDateTime16.toString();
        org.joda.time.DateTime dateTime18 = localDateTime16.toDateTime();
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.minusMillis((int) (byte) 1);
        java.lang.String str22 = localDateTime21.toString();
        org.joda.time.DateTime dateTime23 = localDateTime21.toDateTime();
        boolean boolean24 = dateTime18.isEqual((org.joda.time.ReadableInstant) dateTime23);
        boolean boolean26 = dateTime18.equals((java.lang.Object) 222L);
        org.joda.time.DateTime dateTime27 = localDateTime10.toDateTime((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.Chronology chronology28 = dateTime18.getChronology();
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime((long) 86308083, chronology28);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 22 + "'", int4 == 22);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime16);
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "2022-02-16T06:54:12.049" + "'", str17, "2022-02-16T06:54:12.049");
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(localDateTime21);
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "2022-02-16T06:54:12.049" + "'", str22, "2022-02-16T06:54:12.049");
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(chronology28);
    }

    @Test
    public void test08241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08241");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("deu", strMap1);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap3 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList4 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList2, strMap3);
        java.util.Collection<java.util.Locale> localeCollection5 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale> localeList6 = java.util.Locale.filter(languageRangeList4, localeCollection5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(languageRangeList2);
        org.junit.Assert.assertNotNull(languageRangeList4);
    }

    @Test
    public void test08242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08242");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property5 = localDateTime1.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime6 = property5.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField7 = property5.getField();
        long long9 = dateTimeField7.remainder((-1L));
        org.joda.time.DurationField durationField10 = dateTimeField7.getRangeDurationField();
        int int12 = dateTimeField7.get((long) 112);
        java.lang.String str14 = dateTimeField7.getAsText((long) 647);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = dateTimeField7.getType();
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime();
        boolean boolean18 = localDateTime16.isBefore((org.joda.time.ReadablePartial) localDateTime17);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime17.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property21 = localDateTime17.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime22 = property21.withMinimumValue();
        long long23 = property21.remainder();
        org.joda.time.LocalDateTime localDateTime24 = property21.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime25 = property21.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.plusMillis(3);
        org.joda.time.LocalDateTime.Property property28 = localDateTime27.millisOfDay();
        org.joda.time.LocalDateTime localDateTime30 = localDateTime27.minusMinutes(921);
        int[] intArray31 = localDateTime30.getValues();
        org.joda.time.LocalDateTime localDateTime33 = localDateTime30.plusSeconds(882);
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime();
        boolean boolean37 = localDateTime35.isBefore((org.joda.time.ReadablePartial) localDateTime36);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime36.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property40 = localDateTime36.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime41 = property40.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField42 = property40.getField();
        long long44 = dateTimeField42.remainder((-1L));
        java.util.Locale locale46 = java.util.Locale.UK;
        java.lang.String str47 = dateTimeField42.getAsShortText((long) 22, locale46);
        int int50 = dateTimeField42.getDifference((long) (-3600000), (long) (short) 1);
        org.joda.time.ReadablePartial readablePartial51 = null;
        int int52 = dateTimeField42.getMinimumValue(readablePartial51);
        org.joda.time.LocalDateTime localDateTime53 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime54 = new org.joda.time.LocalDateTime();
        boolean boolean55 = localDateTime53.isBefore((org.joda.time.ReadablePartial) localDateTime54);
        org.joda.time.LocalDateTime localDateTime57 = localDateTime54.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property58 = localDateTime54.dayOfMonth();
        java.util.Locale locale59 = java.util.Locale.FRENCH;
        java.util.Set<java.lang.String> strSet60 = locale59.getUnicodeLocaleAttributes();
        java.lang.String str61 = locale59.getVariant();
        java.lang.String str62 = property58.getAsText(locale59);
        org.joda.time.ReadableInstant readableInstant63 = null;
        int int64 = property58.getDifference(readableInstant63);
        int int65 = property58.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime66 = property58.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime68 = localDateTime66.plusYears(259);
        org.joda.time.LocalDateTime localDateTime69 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime70 = new org.joda.time.LocalDateTime();
        boolean boolean71 = localDateTime69.isBefore((org.joda.time.ReadablePartial) localDateTime70);
        org.joda.time.LocalDateTime localDateTime73 = localDateTime70.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property74 = localDateTime70.dayOfMonth();
        java.util.Locale locale75 = java.util.Locale.FRENCH;
        java.util.Set<java.lang.String> strSet76 = locale75.getUnicodeLocaleAttributes();
        java.lang.String str77 = locale75.getVariant();
        java.lang.String str78 = property74.getAsText(locale75);
        java.util.Locale locale79 = locale75.stripExtensions();
        java.lang.String str80 = dateTimeField42.getAsText((org.joda.time.ReadablePartial) localDateTime66, locale79);
        org.joda.time.LocalDateTime localDateTime82 = localDateTime66.plusYears(35355298);
        int[] intArray83 = localDateTime82.getValues();
        int[] intArray85 = dateTimeField7.add((org.joda.time.ReadablePartial) localDateTime30, 35298988, intArray83, 0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 86399999L + "'", long9 == 86399999L);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1" + "'", str14, "1");
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localDateTime22);
// flaky:         org.junit.Assert.assertTrue("'" + long23 + "' != '" + 24852080L + "'", long23 == 24852080L);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(intArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[2022, 2, 27, 55992083]");
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 86399999L + "'", long44 == 86399999L);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "1" + "'", str47, "1");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
// flaky:         org.junit.Assert.assertEquals("'" + str62 + "' != '" + "16" + "'", str62, "16");
// flaky:         org.junit.Assert.assertTrue("'" + int64 + "' != '" + 4 + "'", int64 == 4);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(localDateTime73);
        org.junit.Assert.assertNotNull(property74);
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "" + "'", str77, "");
// flaky:         org.junit.Assert.assertEquals("'" + str78 + "' != '" + "16" + "'", str78, "16");
        org.junit.Assert.assertNotNull(locale79);
        org.junit.Assert.assertEquals(locale79.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "28" + "'", str80, "28");
        org.junit.Assert.assertNotNull(localDateTime82);
        org.junit.Assert.assertNotNull(intArray83);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[35357320, 2, 28, 24852081]");
        org.junit.Assert.assertNotNull(intArray85);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[35357320, 2, 28, 24852081]");
    }

    @Test
    public void test08243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08243");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property5 = localDateTime1.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime6 = property5.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField7 = property5.getField();
        long long9 = dateTimeField7.remainder((-1L));
        int int10 = dateTimeField7.getMaximumValue();
        java.lang.String str12 = dateTimeField7.getAsText((long) 58);
        int int13 = dateTimeField7.getMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = dateTimeField7.getType();
        java.lang.String str15 = dateTimeFieldType14.toString();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 86399999L + "'", long9 == 86399999L);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 31 + "'", int10 == 31);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "1" + "'", str12, "1");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 31 + "'", int13 == 31);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "dayOfMonth" + "'", str15, "dayOfMonth");
    }

    @Test
    public void test08244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08244");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("CAN");
        java.lang.String str2 = languageRange1.getRange();
        double double3 = languageRange1.getWeight();
        java.lang.String str4 = languageRange1.getRange();
        java.lang.String str5 = languageRange1.getRange();
        double double6 = languageRange1.getWeight();
        double double7 = languageRange1.getWeight();
        double double8 = languageRange1.getWeight();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime();
        boolean boolean11 = localDateTime9.isBefore((org.joda.time.ReadablePartial) localDateTime10);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime10.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property14 = localDateTime10.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime15 = property14.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField16 = property14.getField();
        long long18 = dateTimeField16.remainder((-1L));
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = dateTimeField16.getType();
        boolean boolean20 = dateTimeField16.isSupported();
        boolean boolean21 = dateTimeField16.isLenient();
        org.joda.time.ReadablePartial readablePartial22 = null;
        java.util.Locale locale24 = java.util.Locale.CHINESE;
        java.util.Locale locale25 = java.util.Locale.ITALIAN;
        java.lang.String str26 = locale25.getDisplayCountry();
        java.util.Set<java.lang.String> strSet27 = locale25.getUnicodeLocaleAttributes();
        java.lang.String str28 = locale24.getDisplayScript(locale25);
        java.lang.String str29 = dateTimeField16.getAsText(readablePartial22, 35282145, locale24);
        org.joda.time.ReadablePartial readablePartial30 = null;
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime();
        boolean boolean33 = localDateTime31.isBefore((org.joda.time.ReadablePartial) localDateTime32);
        int[] intArray34 = localDateTime32.getValues();
        org.joda.time.LocalDateTime localDateTime36 = localDateTime32.plusYears((int) (byte) -1);
        int[] intArray37 = localDateTime32.getValues();
        int int38 = dateTimeField16.getMinimumValue(readablePartial30, intArray37);
        java.lang.String str40 = dateTimeField16.getAsText((long) 882);
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = dateTimeField16.getType();
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = dateTimeField16.getType();
        boolean boolean43 = languageRange1.equals((java.lang.Object) dateTimeField16);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "can" + "'", str2, "can");
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "can" + "'", str4, "can");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "can" + "'", str5, "can");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 1.0d + "'", double7 == 1.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0d + "'", double8 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 86399999L + "'", long18 == 86399999L);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "zh");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "it");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(strSet27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "35282145" + "'", str29, "35282145");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(intArray34);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[2022, 2, 16, 24852183]");
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(intArray37);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[2022, 2, 16, 24852183]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "1" + "'", str40, "1");
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
        org.junit.Assert.assertNotNull(dateTimeFieldType42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test08245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08245");
        java.util.Locale locale3 = new java.util.Locale("11", "weekyear", "fra");
        java.lang.String str4 = locale3.getDisplayName();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime();
        boolean boolean7 = localDateTime5.isBefore((org.joda.time.ReadablePartial) localDateTime6);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property10 = localDateTime6.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime11 = property10.withMinimumValue();
        java.util.Locale locale12 = java.util.Locale.UK;
        java.lang.String str13 = property10.getAsShortText(locale12);
        java.lang.String str14 = locale3.getDisplayScript(locale12);
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime();
        boolean boolean17 = localDateTime15.isBefore((org.joda.time.ReadablePartial) localDateTime16);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime16.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property20 = localDateTime16.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime21 = property20.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField22 = property20.getField();
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime();
        boolean boolean25 = localDateTime23.isBefore((org.joda.time.ReadablePartial) localDateTime24);
        int[] intArray26 = localDateTime24.getValues();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime24.plusYears((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime();
        boolean boolean31 = localDateTime29.isBefore((org.joda.time.ReadablePartial) localDateTime30);
        int[] intArray32 = localDateTime30.getValues();
        org.joda.time.LocalDateTime localDateTime33 = localDateTime24.withFields((org.joda.time.ReadablePartial) localDateTime30);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime33.minusMillis((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime35.minusSeconds((int) '#');
        org.joda.time.LocalDateTime localDateTime39 = localDateTime37.withWeekOfWeekyear(50);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime37.withMinuteOfHour((int) (byte) 0);
        int int42 = dateTimeField22.getMinimumValue((org.joda.time.ReadablePartial) localDateTime37);
        org.joda.time.tz.NameProvider nameProvider44 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime46 = new org.joda.time.LocalDateTime();
        boolean boolean47 = localDateTime45.isBefore((org.joda.time.ReadablePartial) localDateTime46);
        org.joda.time.LocalDateTime localDateTime49 = localDateTime46.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property50 = localDateTime46.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime51 = property50.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField52 = property50.getField();
        int int53 = dateTimeField52.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime54 = new org.joda.time.LocalDateTime();
        int int55 = localDateTime54.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime57 = localDateTime54.minusMonths((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime59 = localDateTime57.minusMonths((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime61 = localDateTime59.plusWeeks(22);
        java.util.Locale locale63 = java.util.Locale.JAPANESE;
        java.lang.String str64 = dateTimeField52.getAsShortText((org.joda.time.ReadablePartial) localDateTime61, 22, locale63);
        java.lang.String str67 = nameProvider44.getName(locale63, "11", "Etc/UTC");
        org.joda.time.DateTimeZone.setNameProvider(nameProvider44);
        java.util.Locale locale69 = java.util.Locale.FRENCH;
        java.util.Set<java.lang.String> strSet70 = locale69.getUnicodeLocaleAttributes();
        java.lang.String str71 = locale69.getVariant();
        java.lang.String str74 = nameProvider44.getShortName(locale69, "2022-02-11T09:48:02.913", "2022-02-11T09:48:00.361");
        java.lang.String str75 = dateTimeField22.getAsShortText((int) '#', locale69);
        java.lang.String str76 = locale3.getDisplayName(locale69);
        org.joda.time.DateTimeZone dateTimeZone78 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone78);
        java.util.Locale locale81 = java.util.Locale.CHINESE;
        java.lang.String str82 = dateTimeZone78.getName((long) (short) 0, locale81);
        org.joda.time.LocalDateTime localDateTime83 = new org.joda.time.LocalDateTime(0L, dateTimeZone78);
        java.util.Locale locale85 = java.util.Locale.FRENCH;
        java.util.Set<java.lang.String> strSet86 = locale85.getUnicodeLocaleAttributes();
        java.lang.String str87 = locale85.getISO3Language();
        java.lang.String str88 = dateTimeZone78.getName(35271574L, locale85);
        java.util.Locale locale89 = java.util.Locale.CHINESE;
        java.util.Locale locale90 = java.util.Locale.ITALIAN;
        java.lang.String str91 = locale90.getDisplayCountry();
        java.util.Set<java.lang.String> strSet92 = locale90.getUnicodeLocaleAttributes();
        java.lang.String str93 = locale89.getDisplayScript(locale90);
        java.lang.String str94 = locale85.getDisplayScript(locale89);
        java.lang.String str95 = locale69.getDisplayVariant(locale85);
        java.util.Locale locale96 = locale85.stripExtensions();
        org.junit.Assert.assertEquals(locale3.toString(), "11_WEEKYEAR_fra");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "11 (WEEKYEAR,fra)" + "'", str4, "11 (WEEKYEAR,fra)");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "en_GB");
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "16" + "'", str13, "16");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(intArray26);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[2022, 2, 16, 24852204]");
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(intArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[2022, 2, 16, 24852204]");
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(nameProvider44);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 31 + "'", int53 == 31);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 22 + "'", int55 == 22);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "22" + "'", str64, "22");
        org.junit.Assert.assertNull(str67);
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertNull(str74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "35" + "'", str75, "35");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "11 (WEEKYEAR,fra)" + "'", str76, "11 (WEEKYEAR,fra)");
        org.junit.Assert.assertNotNull(dateTimeZone78);
        org.junit.Assert.assertNotNull(locale81);
        org.junit.Assert.assertEquals(locale81.toString(), "zh");
// flaky:         org.junit.Assert.assertEquals("'" + str82 + "' != '" + "+117:00" + "'", str82, "+117:00");
        org.junit.Assert.assertNotNull(locale85);
        org.junit.Assert.assertEquals(locale85.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet86);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "fra" + "'", str87, "fra");
// flaky:         org.junit.Assert.assertEquals("'" + str88 + "' != '" + "+117:00" + "'", str88, "+117:00");
        org.junit.Assert.assertNotNull(locale89);
        org.junit.Assert.assertEquals(locale89.toString(), "zh");
        org.junit.Assert.assertNotNull(locale90);
        org.junit.Assert.assertEquals(locale90.toString(), "it");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "" + "'", str91, "");
        org.junit.Assert.assertNotNull(strSet92);
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "" + "'", str93, "");
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "" + "'", str94, "");
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "" + "'", str95, "");
        org.junit.Assert.assertNotNull(locale96);
        org.junit.Assert.assertEquals(locale96.toString(), "fr");
    }

    @Test
    public void test08246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08246");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        int int1 = localDateTime0.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime3 = localDateTime0.minusMonths((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.minusMonths((int) (byte) 0);
        int int6 = localDateTime3.getWeekyear();
        org.joda.time.LocalDateTime.Property property7 = localDateTime3.dayOfYear();
        org.joda.time.LocalDateTime.Property property8 = localDateTime3.minuteOfHour();
        org.joda.time.LocalDateTime.Property property9 = localDateTime3.era();
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.LocalDateTime localDateTime11 = localDateTime3.minus(readablePeriod10);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minusSeconds(692);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime11.withCenturyOfEra(89);
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.LocalDateTime localDateTime18 = localDateTime11.withDurationAdded(readableDuration16, 513);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime11.withCenturyOfEra(2024);
        int int21 = localDateTime11.getCenturyOfEra();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 22 + "'", int1 == 22);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 20 + "'", int21 == 20);
    }

    @Test
    public void test08247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08247");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds((int) (byte) 100);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray5 = localDateTime4.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.plusSeconds((int) (short) 1);
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.plus(readableDuration8);
        int int10 = localDateTime9.getDayOfMonth();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime9.plusHours(1309);
        org.joda.time.LocalDateTime.Property property13 = localDateTime9.minuteOfHour();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 16 + "'", int10 == 16);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
    }

    @Test
    public void test08248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08248");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime1.plusMinutes((int) '#');
        org.joda.time.LocalDateTime localDateTime8 = localDateTime1.withEra((int) (short) 1);
        org.joda.time.LocalDateTime.Property property9 = localDateTime8.weekyear();
        org.joda.time.LocalDateTime localDateTime11 = property9.setCopy((-35314963));
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDateTime11);
    }

    @Test
    public void test08249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08249");
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.DurationFieldType durationFieldType2 = dateTimeFieldType1.getDurationType();
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.minusMillis((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.plusDays(0);
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime();
        boolean boolean11 = localDateTime9.isBefore((org.joda.time.ReadablePartial) localDateTime10);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime10.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime10.plusMinutes((int) '#');
        org.joda.time.LocalDateTime localDateTime17 = localDateTime10.plusMonths(0);
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.LocalDateTime localDateTime20 = localDateTime17.withDurationAdded(readableDuration18, (int) (byte) -1);
        int int21 = localDateTime8.compareTo((org.joda.time.ReadablePartial) localDateTime20);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.getDefault();
        java.util.Locale locale25 = null;
        java.lang.String str26 = dateTimeZone23.getName((long) (short) 10, locale25);
        long long28 = dateTimeZone22.getMillisKeepLocal(dateTimeZone23, (long) 874);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.getDefault();
        long long31 = dateTimeZone23.getMillisKeepLocal(dateTimeZone29, (long) '4');
        int int33 = dateTimeZone23.getStandardOffset((long) ' ');
        java.util.Locale locale37 = new java.util.Locale("", "weekyear");
        java.util.Set<java.lang.String> strSet38 = locale37.getUnicodeLocaleAttributes();
        java.lang.String str39 = dateTimeZone23.getShortName((long) (byte) 1, locale37);
        org.joda.time.DateTime dateTime40 = localDateTime8.toDateTime(dateTimeZone23);
        java.lang.String str42 = dateTimeZone23.getNameKey(4060802022L);
        org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime();
        boolean boolean45 = localDateTime43.isBefore((org.joda.time.ReadablePartial) localDateTime44);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime44.plusSeconds((int) (byte) 100);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray48 = localDateTime47.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime50 = localDateTime47.plusSeconds((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime52 = localDateTime47.withWeekyear(50);
        boolean boolean53 = dateTimeZone23.isLocalDateTimeGap(localDateTime52);
        org.joda.time.Chronology chronology54 = localDateTime52.getChronology();
        org.joda.time.DateTimeField dateTimeField55 = dateTimeFieldType3.getField(chronology54);
        org.joda.time.LocalDateTime localDateTime56 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime57 = new org.joda.time.LocalDateTime();
        boolean boolean58 = localDateTime56.isBefore((org.joda.time.ReadablePartial) localDateTime57);
        org.joda.time.LocalDateTime localDateTime60 = localDateTime57.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property61 = localDateTime57.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime62 = property61.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField63 = property61.getField();
        long long65 = dateTimeField63.remainder((-1L));
        org.joda.time.DateTimeFieldType dateTimeFieldType66 = dateTimeField63.getType();
        org.joda.time.DurationFieldType durationFieldType67 = dateTimeFieldType66.getRangeDurationType();
        org.joda.time.DurationFieldType durationFieldType68 = dateTimeFieldType66.getRangeDurationType();
        org.joda.time.field.FieldUtils.verifyValueBounds(dateTimeFieldType66, 354, 276, 425);
        org.joda.time.LocalDateTime localDateTime73 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime74 = new org.joda.time.LocalDateTime();
        boolean boolean75 = localDateTime73.isBefore((org.joda.time.ReadablePartial) localDateTime74);
        org.joda.time.LocalDateTime localDateTime77 = localDateTime74.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime79 = localDateTime74.plusMinutes((int) '#');
        org.joda.time.LocalDateTime localDateTime81 = localDateTime74.minusMinutes((int) (short) 1);
        org.joda.time.ReadableDuration readableDuration82 = null;
        org.joda.time.LocalDateTime localDateTime84 = localDateTime74.withDurationAdded(readableDuration82, (int) (short) 100);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter85 = null;
        java.lang.String str86 = localDateTime74.toString(dateTimeFormatter85);
        org.joda.time.LocalDateTime localDateTime88 = localDateTime74.minusMillis(379);
        org.joda.time.LocalDateTime localDateTime90 = localDateTime88.withWeekOfWeekyear((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime92 = localDateTime88.withYear(5);
        int int93 = localDateTime92.getEra();
        org.joda.time.Chronology chronology94 = localDateTime92.getChronology();
        org.joda.time.DateTimeField dateTimeField95 = dateTimeFieldType66.getField(chronology94);
        boolean boolean96 = dateTimeFieldType3.isSupported(chronology94);
        boolean boolean97 = dateTimeFieldType1.isSupported(chronology94);
        org.joda.time.LocalDateTime localDateTime98 = new org.joda.time.LocalDateTime(chronology94);
        org.joda.time.LocalDateTime localDateTime99 = new org.joda.time.LocalDateTime((long) 50, chronology94);
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(durationFieldType2);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "+117:00" + "'", str26, "+117:00");
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 874L + "'", long28 == 874L);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 52L + "'", long31 == 52L);
// flaky:         org.junit.Assert.assertTrue("'" + int33 + "' != '" + 421200000 + "'", int33 == 421200000);
        org.junit.Assert.assertEquals(locale37.toString(), "_WEEKYEAR");
        org.junit.Assert.assertNotNull(strSet38);
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "+117:00" + "'", str39, "+117:00");
        org.junit.Assert.assertNotNull(dateTime40);
// flaky:         org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray48);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 86399999L + "'", long65 == 86399999L);
        org.junit.Assert.assertNotNull(dateTimeFieldType66);
        org.junit.Assert.assertNotNull(durationFieldType67);
        org.junit.Assert.assertNotNull(durationFieldType68);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(localDateTime77);
        org.junit.Assert.assertNotNull(localDateTime79);
        org.junit.Assert.assertNotNull(localDateTime81);
        org.junit.Assert.assertNotNull(localDateTime84);
// flaky:         org.junit.Assert.assertEquals("'" + str86 + "' != '" + "2022-02-16T06:54:12.379" + "'", str86, "2022-02-16T06:54:12.379");
        org.junit.Assert.assertNotNull(localDateTime88);
        org.junit.Assert.assertNotNull(localDateTime90);
        org.junit.Assert.assertNotNull(localDateTime92);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 1 + "'", int93 == 1);
        org.junit.Assert.assertNotNull(chronology94);
        org.junit.Assert.assertNotNull(dateTimeField95);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + true + "'", boolean96 == true);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + true + "'", boolean97 == true);
    }

    @Test
    public void test08250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08250");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        int int3 = localDateTime1.getYearOfCentury();
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.plus(readablePeriod4);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime1.plusHours(894);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 22 + "'", int3 == 22);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
    }

    @Test
    public void test08251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08251");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        int int2 = dateTimeZone0.getStandardOffset((long) (-100));
        java.util.TimeZone timeZone3 = dateTimeZone0.toTimeZone();
        timeZone3.setID("CA");
        java.util.Locale locale10 = new java.util.Locale("fra", "");
        java.util.Set<java.lang.String> strSet11 = locale10.getUnicodeLocaleAttributes();
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime();
        boolean boolean14 = localDateTime12.isBefore((org.joda.time.ReadablePartial) localDateTime13);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime13.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property17 = localDateTime13.dayOfMonth();
        org.joda.time.DurationField durationField18 = property17.getRangeDurationField();
        boolean boolean19 = strSet11.contains((java.lang.Object) durationField18);
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime();
        boolean boolean22 = localDateTime20.isBefore((org.joda.time.ReadablePartial) localDateTime21);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime21.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property25 = localDateTime21.dayOfMonth();
        boolean boolean26 = property25.isLeap();
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone27);
        java.util.Locale locale30 = java.util.Locale.CHINESE;
        java.lang.String str31 = dateTimeZone27.getName((long) (short) 0, locale30);
        java.lang.String str32 = property25.getAsShortText(locale30);
        boolean boolean33 = strSet11.equals((java.lang.Object) locale30);
        java.lang.String str34 = locale30.getISO3Country();
        java.util.Locale locale37 = new java.util.Locale("fra", "");
        java.util.Set<java.lang.String> strSet38 = locale37.getUnicodeLocaleAttributes();
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime();
        boolean boolean41 = localDateTime39.isBefore((org.joda.time.ReadablePartial) localDateTime40);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime40.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property44 = localDateTime40.dayOfMonth();
        org.joda.time.DurationField durationField45 = property44.getRangeDurationField();
        boolean boolean46 = strSet38.contains((java.lang.Object) durationField45);
        org.joda.time.LocalDateTime localDateTime47 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime48 = new org.joda.time.LocalDateTime();
        boolean boolean49 = localDateTime47.isBefore((org.joda.time.ReadablePartial) localDateTime48);
        org.joda.time.LocalDateTime localDateTime51 = localDateTime48.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property52 = localDateTime48.dayOfMonth();
        boolean boolean53 = property52.isLeap();
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone54);
        java.util.Locale locale57 = java.util.Locale.CHINESE;
        java.lang.String str58 = dateTimeZone54.getName((long) (short) 0, locale57);
        java.lang.String str59 = property52.getAsShortText(locale57);
        boolean boolean60 = strSet38.equals((java.lang.Object) locale57);
        java.lang.String str61 = locale57.getISO3Country();
        java.lang.String str62 = locale57.getDisplayLanguage();
        java.lang.String str63 = locale30.getDisplayCountry(locale57);
        java.lang.String str64 = locale57.getVariant();
        java.util.Locale locale65 = locale57.stripExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str66 = timeZone3.getDisplayName(true, 35432713, locale57);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal style: 35432713");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 421200000 + "'", int2 == 421200000);
        org.junit.Assert.assertNotNull(timeZone3);
// flaky:         org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "GMT+;7:00");
        org.junit.Assert.assertEquals(locale10.toString(), "fra");
        org.junit.Assert.assertNotNull(strSet11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "zh");
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "+117:00" + "'", str31, "+117:00");
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "16" + "'", str32, "16");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals(locale37.toString(), "fra");
        org.junit.Assert.assertNotNull(strSet38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(durationField45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "zh");
// flaky:         org.junit.Assert.assertEquals("'" + str58 + "' != '" + "+117:00" + "'", str58, "+117:00");
// flaky:         org.junit.Assert.assertEquals("'" + str59 + "' != '" + "16" + "'", str59, "16");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "Chinese" + "'", str62, "Chinese");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "zh");
    }

    @Test
    public void test08252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08252");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("2022-02-16T06:51:30.297");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=2022-02-16t06:51:30.297");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08253");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property5 = localDateTime1.dayOfMonth();
        int int6 = property5.getMinimumValue();
        java.lang.String str7 = property5.getAsShortText();
        org.joda.time.DurationField durationField8 = property5.getLeapDurationField();
        java.util.Locale locale12 = new java.util.Locale("11", "weekyear", "fra");
        java.lang.String str13 = locale12.getDisplayName();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime();
        boolean boolean16 = localDateTime14.isBefore((org.joda.time.ReadablePartial) localDateTime15);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime15.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property19 = localDateTime15.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime20 = property19.withMinimumValue();
        java.util.Locale locale21 = java.util.Locale.UK;
        java.lang.String str22 = property19.getAsShortText(locale21);
        java.lang.String str23 = locale12.getDisplayScript(locale21);
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime();
        boolean boolean26 = localDateTime24.isBefore((org.joda.time.ReadablePartial) localDateTime25);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime25.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property29 = localDateTime25.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime30 = property29.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField31 = property29.getField();
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime();
        boolean boolean34 = localDateTime32.isBefore((org.joda.time.ReadablePartial) localDateTime33);
        int[] intArray35 = localDateTime33.getValues();
        org.joda.time.LocalDateTime localDateTime37 = localDateTime33.plusYears((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime();
        boolean boolean40 = localDateTime38.isBefore((org.joda.time.ReadablePartial) localDateTime39);
        int[] intArray41 = localDateTime39.getValues();
        org.joda.time.LocalDateTime localDateTime42 = localDateTime33.withFields((org.joda.time.ReadablePartial) localDateTime39);
        org.joda.time.LocalDateTime localDateTime44 = localDateTime42.minusMillis((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime46 = localDateTime44.minusSeconds((int) '#');
        org.joda.time.LocalDateTime localDateTime48 = localDateTime46.withWeekOfWeekyear(50);
        org.joda.time.LocalDateTime localDateTime50 = localDateTime46.withMinuteOfHour((int) (byte) 0);
        int int51 = dateTimeField31.getMinimumValue((org.joda.time.ReadablePartial) localDateTime46);
        org.joda.time.tz.NameProvider nameProvider53 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.LocalDateTime localDateTime54 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime55 = new org.joda.time.LocalDateTime();
        boolean boolean56 = localDateTime54.isBefore((org.joda.time.ReadablePartial) localDateTime55);
        org.joda.time.LocalDateTime localDateTime58 = localDateTime55.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property59 = localDateTime55.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime60 = property59.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField61 = property59.getField();
        int int62 = dateTimeField61.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime63 = new org.joda.time.LocalDateTime();
        int int64 = localDateTime63.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime66 = localDateTime63.minusMonths((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime68 = localDateTime66.minusMonths((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime70 = localDateTime68.plusWeeks(22);
        java.util.Locale locale72 = java.util.Locale.JAPANESE;
        java.lang.String str73 = dateTimeField61.getAsShortText((org.joda.time.ReadablePartial) localDateTime70, 22, locale72);
        java.lang.String str76 = nameProvider53.getName(locale72, "11", "Etc/UTC");
        org.joda.time.DateTimeZone.setNameProvider(nameProvider53);
        java.util.Locale locale78 = java.util.Locale.FRENCH;
        java.util.Set<java.lang.String> strSet79 = locale78.getUnicodeLocaleAttributes();
        java.lang.String str80 = locale78.getVariant();
        java.lang.String str83 = nameProvider53.getShortName(locale78, "2022-02-11T09:48:02.913", "2022-02-11T09:48:00.361");
        java.lang.String str84 = dateTimeField31.getAsShortText((int) '#', locale78);
        java.lang.String str85 = locale12.getDisplayName(locale78);
        java.lang.String str86 = locale12.getLanguage();
        int int87 = property5.getMaximumTextLength(locale12);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "16" + "'", str7, "16");
        org.junit.Assert.assertNull(durationField8);
        org.junit.Assert.assertEquals(locale12.toString(), "11_WEEKYEAR_fra");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "11 (WEEKYEAR,fra)" + "'", str13, "11 (WEEKYEAR,fra)");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "en_GB");
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "16" + "'", str22, "16");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(intArray35);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[2022, 2, 16, 24852650]");
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(intArray41);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[2022, 2, 16, 24852650]");
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertNotNull(nameProvider53);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 31 + "'", int62 == 31);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 22 + "'", int64 == 22);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "22" + "'", str73, "22");
        org.junit.Assert.assertNull(str76);
        org.junit.Assert.assertNotNull(locale78);
        org.junit.Assert.assertEquals(locale78.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet79);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "" + "'", str80, "");
        org.junit.Assert.assertNull(str83);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "35" + "'", str84, "35");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "11 (WEEKYEAR,fra)" + "'", str85, "11 (WEEKYEAR,fra)");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "11" + "'", str86, "11");
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 2 + "'", int87 == 2);
    }

    @Test
    public void test08254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08254");
        int int4 = org.joda.time.field.FieldUtils.getWrappedValue(35359641, 11124513, 426, 544);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 493 + "'", int4 == 493);
    }

    @Test
    public void test08255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08255");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property5 = localDateTime1.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime6 = property5.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField7 = property5.getField();
        long long10 = dateTimeField7.addWrapField((long) 6, (int) (byte) 0);
        java.lang.String str12 = dateTimeField7.getAsShortText((long) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = dateTimeField7.getType();
        org.joda.time.DurationField durationField14 = dateTimeField7.getDurationField();
        java.lang.String str16 = dateTimeField7.getAsText(1644537600000L);
        int int17 = dateTimeField7.getMinimumValue();
        long long20 = dateTimeField7.add((long) 74, (long) 78584223);
        org.joda.time.ReadablePartial readablePartial21 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int22 = dateTimeField7.getMaximumValue(readablePartial21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 6L + "'", long10 == 6L);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "1" + "'", str12, "1");
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "11" + "'", str16, "11");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 6789676867200074L + "'", long20 == 6789676867200074L);
    }

    @Test
    public void test08256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08256");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.minusMillis((int) (byte) 1);
        java.lang.String str6 = localDateTime5.toString();
        org.joda.time.DateTime dateTime7 = localDateTime5.toDateTime();
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minusMillis((int) (byte) 1);
        java.lang.String str11 = localDateTime10.toString();
        org.joda.time.DateTime dateTime12 = localDateTime10.toDateTime();
        boolean boolean13 = dateTime7.isEqual((org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.Chronology chronology14 = dateTime12.getChronology();
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime((java.lang.Object) 35271574L, chronology14);
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((long) 'u', chronology14);
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime(chronology14);
        boolean boolean18 = dateTimeFieldType0.isSupported(chronology14);
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime();
        boolean boolean21 = localDateTime19.isBefore((org.joda.time.ReadablePartial) localDateTime20);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime20.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime20.plusMinutes((int) '#');
        org.joda.time.LocalDateTime localDateTime27 = localDateTime20.plusMonths(0);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.minusWeeks(5);
        org.joda.time.Chronology chronology30 = localDateTime27.getChronology();
        org.joda.time.LocalDateTime localDateTime31 = org.joda.time.LocalDateTime.now(chronology30);
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime(chronology30);
        org.joda.time.DateTimeField dateTimeField33 = dateTimeFieldType0.getField(chronology30);
        boolean boolean35 = dateTimeField33.isLeap((-421199881L));
        long long37 = dateTimeField33.roundHalfFloor((long) 10538);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(localDateTime5);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "2022-02-16T06:54:12.716" + "'", str6, "2022-02-16T06:54:12.716");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(localDateTime10);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "2022-02-16T06:54:12.716" + "'", str11, "2022-02-16T06:54:12.716");
        org.junit.Assert.assertNotNull(dateTime12);
// flaky:         org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
    }

    @Test
    public void test08257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08257");
        org.joda.time.tz.Provider provider0 = org.joda.time.DateTimeZone.getProvider();
        org.joda.time.DateTimeZone.setProvider(provider0);
        org.joda.time.DateTimeZone dateTimeZone3 = provider0.getZone("11");
        org.joda.time.DateTimeZone dateTimeZone5 = provider0.getZone("2022-02-11T09:48:12.712");
        org.joda.time.DateTimeZone dateTimeZone7 = provider0.getZone("2022-02-11T09:48:24.517+00:00:00.117");
        java.util.Set<java.lang.String> strSet8 = provider0.getAvailableIDs();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean10 = strSet8.remove((java.lang.Object) 1797);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: java.lang.String cannot be cast to java.lang.Integer");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(provider0);
        org.junit.Assert.assertNull(dateTimeZone3);
        org.junit.Assert.assertNull(dateTimeZone5);
        org.junit.Assert.assertNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(strSet8);
    }

    @Test
    public void test08258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08258");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property5 = localDateTime1.dayOfMonth();
        java.util.Locale locale6 = java.util.Locale.FRENCH;
        java.util.Set<java.lang.String> strSet7 = locale6.getUnicodeLocaleAttributes();
        java.lang.String str8 = locale6.getVariant();
        java.lang.String str9 = property5.getAsText(locale6);
        org.joda.time.ReadableInstant readableInstant10 = null;
        long long11 = property5.getDifferenceAsLong(readableInstant10);
        org.joda.time.LocalDateTime localDateTime12 = property5.roundCeilingCopy();
        org.joda.time.LocalDateTime localDateTime13 = property5.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minusMillis((int) (byte) 1);
        java.lang.String str17 = localDateTime16.toString();
        org.joda.time.DateTime dateTime18 = localDateTime16.toDateTime();
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.minusMillis((int) (byte) 1);
        java.lang.String str22 = localDateTime21.toString();
        org.joda.time.DateTime dateTime23 = localDateTime21.toDateTime();
        boolean boolean24 = dateTime18.isEqual((org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.dayOfYear();
        int int26 = dateTime23.get(dateTimeFieldType25);
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.monthOfYear();
        boolean boolean28 = dateTime23.isSupported(dateTimeFieldType27);
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str30 = dateTimeFieldType29.toString();
        java.lang.String str31 = dateTimeFieldType29.toString();
        int int32 = dateTime23.get(dateTimeFieldType29);
        int int33 = localDateTime13.indexOf(dateTimeFieldType29);
        int int34 = localDateTime13.getWeekyear();
        org.joda.time.ReadableDuration readableDuration35 = null;
        org.joda.time.LocalDateTime localDateTime37 = localDateTime13.withDurationAdded(readableDuration35, 442);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime39 = localDateTime37.withHourOfDay(5672);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 5672 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "16" + "'", str9, "16");
// flaky:         org.junit.Assert.assertTrue("'" + long11 + "' != '" + 4L + "'", long11 == 4L);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime16);
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "2022-02-16T06:54:12.761" + "'", str17, "2022-02-16T06:54:12.761");
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(localDateTime21);
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "2022-02-16T06:54:12.761" + "'", str22, "2022-02-16T06:54:12.761");
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
// flaky:         org.junit.Assert.assertTrue("'" + int26 + "' != '" + 47 + "'", int26 == 47);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "weekyear" + "'", str30, "weekyear");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "weekyear" + "'", str31, "weekyear");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2022 + "'", int32 == 2022);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2022 + "'", int34 == 2022);
        org.junit.Assert.assertNotNull(localDateTime37);
    }

    @Test
    public void test08259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08259");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property5 = localDateTime1.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime6 = property5.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField7 = property5.getField();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone8);
        java.util.Locale locale11 = java.util.Locale.CHINESE;
        java.lang.String str12 = dateTimeZone8.getName((long) (short) 0, locale11);
        int int13 = dateTimeField7.getMaximumShortTextLength(locale11);
        java.lang.String str14 = dateTimeField7.getName();
        long long16 = dateTimeField7.roundHalfEven((long) (byte) 10);
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime();
        boolean boolean19 = localDateTime17.isBefore((org.joda.time.ReadablePartial) localDateTime18);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime18.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime18.plusMinutes((int) '#');
        org.joda.time.LocalDateTime localDateTime25 = localDateTime18.minusMinutes((int) (short) 1);
        org.joda.time.ReadableDuration readableDuration26 = null;
        org.joda.time.LocalDateTime localDateTime28 = localDateTime18.withDurationAdded(readableDuration26, (int) (short) 100);
        java.util.Locale locale29 = java.util.Locale.JAPANESE;
        java.lang.String str30 = dateTimeField7.getAsText((org.joda.time.ReadablePartial) localDateTime28, locale29);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime28.minusSeconds((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property33 = localDateTime32.millisOfSecond();
        int int34 = property33.get();
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime();
        boolean boolean37 = localDateTime35.isBefore((org.joda.time.ReadablePartial) localDateTime36);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime36.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property40 = localDateTime36.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime41 = property40.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField42 = property40.getField();
        long long44 = dateTimeField42.remainder((-1L));
        java.util.Locale locale46 = java.util.Locale.UK;
        java.lang.String str47 = dateTimeField42.getAsShortText((long) 22, locale46);
        int int48 = dateTimeField42.getMinimumValue();
        org.joda.time.LocalDateTime localDateTime49 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime50 = new org.joda.time.LocalDateTime();
        boolean boolean51 = localDateTime49.isBefore((org.joda.time.ReadablePartial) localDateTime50);
        org.joda.time.LocalDateTime localDateTime53 = localDateTime50.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime55 = localDateTime50.plusMinutes((int) '#');
        org.joda.time.LocalDateTime localDateTime57 = localDateTime50.minusMinutes((int) (short) 1);
        org.joda.time.LocalDateTime.Property property58 = localDateTime57.weekOfWeekyear();
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.LocalDateTime localDateTime60 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime57, chronology59);
        java.util.Locale locale62 = new java.util.Locale("2022-02-11T09:47:50.218");
        java.lang.String str63 = dateTimeField42.getAsShortText((org.joda.time.ReadablePartial) localDateTime57, locale62);
        long long66 = dateTimeField42.set(202200L, "31");
        java.util.Locale.Builder builder67 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder68 = builder67.clear();
        java.util.Locale.Builder builder70 = builder67.setLanguage("");
        java.util.Locale.Builder builder71 = builder70.clearExtensions();
        java.util.Locale locale72 = builder71.build();
        java.lang.String str73 = locale72.getDisplayName();
        int int74 = dateTimeField42.getMaximumShortTextLength(locale72);
        int int76 = dateTimeField42.getMaximumValue((long) 2);
        org.joda.time.tz.NameProvider nameProvider78 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale79 = java.util.Locale.FRENCH;
        java.lang.String str80 = locale79.getDisplayName();
        java.lang.String str83 = nameProvider78.getShortName(locale79, "2022-02-11T09:47:59.470", "2022-02-11T09:48:12.308");
        java.lang.String str84 = dateTimeField42.getAsText(832, locale79);
        int int85 = property33.getMaximumTextLength(locale79);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "zh");
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "+117:00" + "'", str12, "+117:00");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "dayOfMonth" + "'", str14, "dayOfMonth");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "ja");
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "16" + "'", str30, "16");
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(property33);
// flaky:         org.junit.Assert.assertTrue("'" + int34 + "' != '" + 776 + "'", int34 == 776);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 86399999L + "'", long44 == 86399999L);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "1" + "'", str47, "1");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertEquals(locale62.toString(), "2022-02-11t09:47:50.218");
// flaky:         org.junit.Assert.assertEquals("'" + str63 + "' != '" + "16" + "'", str63, "16");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 2592202200L + "'", long66 == 2592202200L);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 2 + "'", int74 == 2);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 31 + "'", int76 == 31);
        org.junit.Assert.assertNotNull(nameProvider78);
        org.junit.Assert.assertNotNull(locale79);
        org.junit.Assert.assertEquals(locale79.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "French" + "'", str80, "French");
        org.junit.Assert.assertNull(str83);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "832" + "'", str84, "832");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 3 + "'", int85 == 3);
    }

    @Test
    public void test08260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08260");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forID("2022-02-11T09:49:49.348");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The datetime zone id '2022-02-11T09:49:49.348' is not recognised");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08261");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("2022-02-11T09:48:53.042");
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Mean Time");
    }

    @Test
    public void test08262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08262");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property5 = localDateTime1.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime6 = property5.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField7 = property5.getField();
        long long9 = dateTimeField7.remainder((-1L));
        // The following exception was thrown during execution in test generation
        try {
            long long12 = dateTimeField7.set(0L, "2022-02-11T09:48:04.350");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2022-02-11T09:48:04.350\" for dayOfMonth is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 86399999L + "'", long9 == 86399999L);
    }

    @Test
    public void test08263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08263");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.minusMillis((int) (byte) 1);
        java.lang.String str3 = localDateTime2.toString();
        org.joda.time.DateTime dateTime4 = localDateTime2.toDateTime();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusMillis((int) (byte) 1);
        java.lang.String str8 = localDateTime7.toString();
        org.joda.time.DateTime dateTime9 = localDateTime7.toDateTime();
        boolean boolean10 = dateTime4.isEqual((org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.dayOfYear();
        int int12 = dateTime9.get(dateTimeFieldType11);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.monthOfYear();
        boolean boolean14 = dateTime9.isSupported(dateTimeFieldType13);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str16 = dateTimeFieldType15.toString();
        java.lang.String str17 = dateTimeFieldType15.toString();
        int int18 = dateTime9.get(dateTimeFieldType15);
        org.joda.time.DateTimeZone dateTimeZone19 = dateTime9.getZone();
        long long21 = dateTimeZone19.previousTransition((long) 60);
        java.lang.String str22 = dateTimeZone19.toString();
        java.lang.String str24 = dateTimeZone19.getName(667470785472L);
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime(dateTimeZone19);
        int int26 = localDateTime25.getCenturyOfEra();
        org.junit.Assert.assertNotNull(localDateTime2);
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "2022-02-16T06:54:12.892" + "'", str3, "2022-02-16T06:54:12.892");
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localDateTime7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "2022-02-16T06:54:12.892" + "'", str8, "2022-02-16T06:54:12.892");
        org.junit.Assert.assertNotNull(dateTime9);
// flaky:         org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 47 + "'", int12 == 47);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "weekyear" + "'", str16, "weekyear");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "weekyear" + "'", str17, "weekyear");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2022 + "'", int18 == 2022);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 60L + "'", long21 == 60L);
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+117:00" + "'", str22, "+117:00");
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+117:00" + "'", str24, "+117:00");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 20 + "'", int26 == 20);
    }

    @Test
    public void test08264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08264");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        int int1 = localDateTime0.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime3 = localDateTime0.minusMonths((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.minusSeconds((-35274908));
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetMillis((int) 'u');
        long long11 = dateTimeZone7.convertLocalToUTC((long) 1, false, 822L);
        java.util.TimeZone timeZone12 = dateTimeZone7.toTimeZone();
        int int14 = dateTimeZone7.getOffset(10L);
        org.joda.time.DateTime dateTime15 = localDateTime3.toDateTime(dateTimeZone7);
        long long17 = dateTimeZone7.convertUTCToLocal((long) 2017);
        long long21 = dateTimeZone7.convertLocalToUTC(667440000000L, false, (long) (short) 0);
        java.lang.String str23 = dateTimeZone7.getShortName((long) 35557053);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 22 + "'", int1 == 22);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-116L) + "'", long11 == (-116L));
        org.junit.Assert.assertNotNull(timeZone12);
        org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 117 + "'", int14 == 117);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 2134L + "'", long17 == 2134L);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 667439999883L + "'", long21 == 667439999883L);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+00:00:00.117" + "'", str23, "+00:00:00.117");
    }

    @Test
    public void test08265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08265");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours(60);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTimeZone1);
    }

    @Test
    public void test08266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08266");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        int int1 = localDateTime0.getYearOfCentury();
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str3 = dateTimeFieldType2.toString();
        int int4 = localDateTime0.indexOf(dateTimeFieldType2);
        org.joda.time.DateTime dateTime5 = localDateTime0.toDateTime();
        java.lang.String str7 = localDateTime0.toString("22");
        org.joda.time.LocalDateTime.Property property8 = localDateTime0.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime10 = property8.setCopy((int) '#');
        org.joda.time.LocalDateTime localDateTime12 = property8.setCopy(505);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = property8.getFieldType();
        org.joda.time.DurationField durationField14 = property8.getRangeDurationField();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) -1);
        long long19 = dateTimeZone16.convertLocalToUTC(1644572877787L, true);
        boolean boolean21 = dateTimeZone16.isStandardOffset((long) 222);
        long long23 = dateTimeZone16.nextTransition(726523809L);
        java.util.Locale locale27 = new java.util.Locale("", "weekyear");
        java.util.Set<java.lang.String> strSet28 = locale27.getUnicodeLocaleAttributes();
        java.util.Set<java.lang.String> strSet29 = locale27.getUnicodeLocaleAttributes();
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime();
        boolean boolean32 = localDateTime30.isBefore((org.joda.time.ReadablePartial) localDateTime31);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime31.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property35 = localDateTime31.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime36 = property35.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField37 = property35.getField();
        int int40 = dateTimeField37.getDifference(1L, 86399999L);
        java.lang.String str41 = dateTimeField37.toString();
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime();
        int int43 = localDateTime42.getYearOfCentury();
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str45 = dateTimeFieldType44.toString();
        int int46 = localDateTime42.indexOf(dateTimeFieldType44);
        org.joda.time.DateTime dateTime47 = localDateTime42.toDateTime();
        org.joda.time.LocalDateTime localDateTime48 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime49 = new org.joda.time.LocalDateTime();
        boolean boolean50 = localDateTime48.isBefore((org.joda.time.ReadablePartial) localDateTime49);
        int[] intArray51 = localDateTime49.getValues();
        int int52 = dateTimeField37.getMinimumValue((org.joda.time.ReadablePartial) localDateTime42, intArray51);
        java.util.Locale locale55 = new java.util.Locale("2022-02-11T09:48:10.170");
        java.lang.String str56 = dateTimeField37.getAsText(19034, locale55);
        java.lang.String str57 = locale27.getDisplayName(locale55);
        java.lang.String str58 = dateTimeZone16.getShortName(0L, locale27);
        java.lang.String str59 = property8.getAsText(locale27);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 22 + "'", int1 == 22);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "weekyear" + "'", str3, "weekyear");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "22" + "'", str7, "22");
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 1644576477787L + "'", long19 == 1644576477787L);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 726523809L + "'", long23 == 726523809L);
        org.junit.Assert.assertEquals(locale27.toString(), "_WEEKYEAR");
        org.junit.Assert.assertNotNull(strSet28);
        org.junit.Assert.assertNotNull(strSet29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "DateTimeField[dayOfMonth]" + "'", str41, "DateTimeField[dayOfMonth]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 22 + "'", int43 == 22);
        org.junit.Assert.assertNotNull(dateTimeFieldType44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "weekyear" + "'", str45, "weekyear");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(intArray51);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[2022, 2, 13, 78852940]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertEquals(locale55.toString(), "2022-02-11t09:48:10.170");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "19034" + "'", str56, "19034");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "WEEKYEAR" + "'", str57, "WEEKYEAR");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "-01:00" + "'", str58, "-01:00");
// flaky:         org.junit.Assert.assertEquals("'" + str59 + "' != '" + "940" + "'", str59, "940");
    }

    @Test
    public void test08267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08267");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.minusMillis((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.plusDays(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.withField(dateTimeFieldType5, 0);
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime();
        boolean boolean10 = localDateTime8.isBefore((org.joda.time.ReadablePartial) localDateTime9);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime9.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime9.plusMinutes((int) '#');
        org.joda.time.LocalDateTime localDateTime16 = localDateTime9.minusMinutes((int) (short) 1);
        boolean boolean17 = localDateTime7.isAfter((org.joda.time.ReadablePartial) localDateTime16);
        org.joda.time.LocalDateTime.Property property18 = localDateTime7.secondOfMinute();
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = property18.getFieldType();
        org.joda.time.LocalDateTime localDateTime20 = property18.roundHalfFloorCopy();
        long long21 = property18.remainder();
        java.lang.String str22 = property18.getAsString();
        org.joda.time.LocalDateTime localDateTime23 = property18.roundHalfFloorCopy();
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(localDateTime20);
// flaky:         org.junit.Assert.assertTrue("'" + long21 + "' != '" + 968L + "'", long21 == 968L);
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "12" + "'", str22, "12");
        org.junit.Assert.assertNotNull(localDateTime23);
    }

    @Test
    public void test08268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08268");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        int int1 = localDateTime0.getYearOfCentury();
        int int2 = localDateTime0.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.minusMillis((int) (byte) -1);
        org.joda.time.DateTime dateTime5 = localDateTime0.toDateTime();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime0.withMonthOfYear((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime0.minusMonths((int) (byte) 0);
        int int10 = localDateTime0.getWeekOfWeekyear();
        int int11 = localDateTime0.getMinuteOfHour();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime0.withCenturyOfEra(267);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 22 + "'", int1 == 22);
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 12 + "'", int2 == 12);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 6 + "'", int10 == 6);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 54 + "'", int11 == 54);
        org.junit.Assert.assertNotNull(localDateTime13);
    }

    @Test
    public void test08269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08269");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.minusMillis((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.plusDays(0);
        int int5 = localDateTime4.getDayOfYear();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.plusWeeks(709);
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.LocalDateTime localDateTime9 = localDateTime4.minus(readableDuration8);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime4.minusMillis((-30));
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 44 + "'", int5 == 44);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
    }

    @Test
    public void test08270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08270");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        java.util.Locale locale3 = null;
        java.lang.String str4 = dateTimeZone1.getName((long) (short) 10, locale3);
        long long6 = dateTimeZone0.getMillisKeepLocal(dateTimeZone1, (long) 874);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        long long9 = dateTimeZone1.getMillisKeepLocal(dateTimeZone7, (long) '4');
        int int11 = dateTimeZone1.getOffsetFromLocal((long) 83);
        int int13 = dateTimeZone1.getOffset((long) (-35274808));
        java.lang.String str14 = dateTimeZone1.toString();
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime(dateTimeZone1);
        java.util.TimeZone timeZone16 = dateTimeZone1.toTimeZone();
        java.util.TimeZone timeZone18 = java.util.TimeZone.getTimeZone("2022-02-11T09:48:08.527");
        timeZone18.setID("2022-02-11T09:48:23.058");
        boolean boolean21 = timeZone16.hasSameRules(timeZone18);
        int int22 = timeZone18.getDSTSavings();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+03:05:24.513" + "'", str4, "+03:05:24.513");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 874L + "'", long6 == 874L);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 52L + "'", long9 == 52L);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 11124513 + "'", int11 == 11124513);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 11124513 + "'", int13 == 11124513);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+03:05:24.513" + "'", str14, "+03:05:24.513");
        org.junit.Assert.assertNotNull(timeZone16);
// flaky:         org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "GMT+03:05");
        org.junit.Assert.assertNotNull(timeZone18);
        org.junit.Assert.assertEquals(timeZone18.getDisplayName(), "GMT+00:00");
// flaky:         org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
    }

    @Test
    public void test08271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08271");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("2022-02-11T09:48:14.056");
        java.lang.String str2 = timeZone1.getID();
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.minusMillis((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.plusDays(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime5.withField(dateTimeFieldType8, 0);
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime();
        boolean boolean13 = localDateTime11.isBefore((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime12.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime12.plusMinutes((int) '#');
        org.joda.time.LocalDateTime localDateTime19 = localDateTime12.minusMinutes((int) (short) 1);
        boolean boolean20 = localDateTime10.isAfter((org.joda.time.ReadablePartial) localDateTime19);
        java.util.Date date21 = localDateTime19.toDate();
        boolean boolean22 = timeZone1.inDaylightTime(date21);
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "GMT" + "'", str2, "GMT");
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(date21);
// flaky:         org.junit.Assert.assertEquals(date21.toString(), "Fri Feb 11 12:58:37 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test08272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08272");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.minusMillis((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.plusDays(0);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime();
        boolean boolean7 = localDateTime5.isBefore((org.joda.time.ReadablePartial) localDateTime6);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime6.plusMinutes((int) '#');
        org.joda.time.LocalDateTime localDateTime13 = localDateTime6.plusMonths(0);
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.LocalDateTime localDateTime16 = localDateTime13.withDurationAdded(readableDuration14, (int) (byte) -1);
        int int17 = localDateTime4.compareTo((org.joda.time.ReadablePartial) localDateTime16);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.getDefault();
        java.util.Locale locale21 = null;
        java.lang.String str22 = dateTimeZone19.getName((long) (short) 10, locale21);
        long long24 = dateTimeZone18.getMillisKeepLocal(dateTimeZone19, (long) 874);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.getDefault();
        long long27 = dateTimeZone19.getMillisKeepLocal(dateTimeZone25, (long) '4');
        int int29 = dateTimeZone19.getStandardOffset((long) ' ');
        java.util.Locale locale33 = new java.util.Locale("", "weekyear");
        java.util.Set<java.lang.String> strSet34 = locale33.getUnicodeLocaleAttributes();
        java.lang.String str35 = dateTimeZone19.getShortName((long) (byte) 1, locale33);
        org.joda.time.DateTime dateTime36 = localDateTime4.toDateTime(dateTimeZone19);
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime();
        boolean boolean39 = localDateTime37.isBefore((org.joda.time.ReadablePartial) localDateTime38);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime38.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property42 = localDateTime38.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime43 = property42.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField44 = property42.getField();
        long long46 = dateTimeField44.remainder((-1L));
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = dateTimeField44.getType();
        boolean boolean48 = dateTime36.isSupported(dateTimeFieldType47);
        java.lang.String str49 = dateTimeFieldType47.getName();
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "+03:05:24.513" + "'", str22, "+03:05:24.513");
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 874L + "'", long24 == 874L);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 52L + "'", long27 == 52L);
// flaky:         org.junit.Assert.assertTrue("'" + int29 + "' != '" + 11124513 + "'", int29 == 11124513);
        org.junit.Assert.assertEquals(locale33.toString(), "_WEEKYEAR");
        org.junit.Assert.assertNotNull(strSet34);
// flaky:         org.junit.Assert.assertEquals("'" + str35 + "' != '" + "+03:05:24.513" + "'", str35, "+03:05:24.513");
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 86399999L + "'", long46 == 86399999L);
        org.junit.Assert.assertNotNull(dateTimeFieldType47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "dayOfMonth" + "'", str49, "dayOfMonth");
    }

    @Test
    public void test08273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08273");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.minusMillis((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.plusDays(0);
        int int5 = localDateTime4.getDayOfYear();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.plusWeeks(709);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.plusYears((int) 'x');
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.LocalDateTime localDateTime12 = localDateTime7.withDurationAdded(readableDuration10, 24);
        org.joda.time.LocalDateTime.Property property13 = localDateTime7.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime14 = property13.withMaximumValue();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime16 = localDateTime14.withWeekOfWeekyear(476);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 476 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 42 + "'", int5 == 42);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDateTime14);
    }

    @Test
    public void test08274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08274");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.minusMillis((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.plusDays(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.withField(dateTimeFieldType5, 0);
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime();
        boolean boolean10 = localDateTime8.isBefore((org.joda.time.ReadablePartial) localDateTime9);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime9.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime9.plusMinutes((int) '#');
        org.joda.time.LocalDateTime localDateTime16 = localDateTime9.minusMinutes((int) (short) 1);
        boolean boolean17 = localDateTime7.isAfter((org.joda.time.ReadablePartial) localDateTime16);
        org.joda.time.LocalDateTime.Property property18 = localDateTime7.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime();
        boolean boolean21 = localDateTime19.isBefore((org.joda.time.ReadablePartial) localDateTime20);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime20.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime20.plusMinutes((int) '#');
        org.joda.time.LocalDateTime localDateTime27 = localDateTime20.minusMinutes((int) (short) 1);
        org.joda.time.LocalDateTime.Property property28 = localDateTime27.weekOfWeekyear();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime27, chronology29);
        boolean boolean31 = localDateTime7.isEqual((org.joda.time.ReadablePartial) localDateTime27);
        org.joda.time.LocalDateTime.Property property32 = localDateTime27.dayOfYear();
        int int33 = property32.getMaximumValue();
        java.lang.String str34 = property32.getAsString();
        org.joda.time.LocalDateTime localDateTime36 = property32.setCopy(100);
        java.util.Locale.Builder builder37 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder38 = builder37.clear();
        java.util.Locale locale40 = java.util.Locale.forLanguageTag("6");
        java.util.Locale.Builder builder41 = builder38.setLocale(locale40);
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime();
        boolean boolean44 = localDateTime42.isBefore((org.joda.time.ReadablePartial) localDateTime43);
        org.joda.time.LocalDateTime localDateTime46 = localDateTime43.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property47 = localDateTime43.dayOfMonth();
        java.util.Locale locale48 = java.util.Locale.FRENCH;
        java.util.Set<java.lang.String> strSet49 = locale48.getUnicodeLocaleAttributes();
        java.lang.String str50 = locale48.getVariant();
        java.lang.String str51 = property47.getAsText(locale48);
        java.util.Locale locale52 = locale48.stripExtensions();
        java.util.Locale.Builder builder53 = builder38.setLocale(locale48);
        boolean boolean54 = locale48.hasExtensions();
        int int55 = property32.getMaximumShortTextLength(locale48);
        java.util.Locale locale56 = java.util.Locale.CHINESE;
        java.util.Locale locale57 = java.util.Locale.ITALIAN;
        java.lang.String str58 = locale57.getDisplayCountry();
        java.util.Set<java.lang.String> strSet59 = locale57.getUnicodeLocaleAttributes();
        java.lang.String str60 = locale56.getDisplayScript(locale57);
        java.util.Set<java.lang.Character> charSet61 = locale57.getExtensionKeys();
        java.lang.String str62 = locale57.getCountry();
        java.lang.String str63 = locale48.getDisplayLanguage(locale57);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 365 + "'", int33 == 365);
// flaky:         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "42" + "'", str34, "42");
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "");
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
// flaky:         org.junit.Assert.assertEquals("'" + str51 + "' != '" + "11" + "'", str51, "11");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "fr");
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 3 + "'", int55 == 3);
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "zh");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "it");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNotNull(strSet59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertNotNull(charSet61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "francese" + "'", str63, "francese");
    }

    @Test
    public void test08275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08275");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.minusMillis((int) (byte) 1);
        java.lang.String str3 = localDateTime2.toString();
        org.joda.time.DateTime dateTime4 = localDateTime2.toDateTime();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusMillis((int) (byte) 1);
        java.lang.String str8 = localDateTime7.toString();
        org.joda.time.DateTime dateTime9 = localDateTime7.toDateTime();
        boolean boolean10 = dateTime4.isEqual((org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minusMillis((int) (byte) 1);
        java.lang.String str14 = localDateTime13.toString();
        org.joda.time.DateTime dateTime15 = localDateTime13.toDateTime();
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.minusMillis((int) (byte) 1);
        java.lang.String str19 = localDateTime18.toString();
        org.joda.time.DateTime dateTime20 = localDateTime18.toDateTime();
        boolean boolean21 = dateTime15.isEqual((org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.Chronology chronology22 = dateTime20.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.dayOfYear();
        int int24 = dateTime20.get(dateTimeFieldType23);
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.minusMillis((int) (byte) 1);
        java.lang.String str28 = localDateTime27.toString();
        org.joda.time.DateTime dateTime29 = localDateTime27.toDateTime();
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime32 = localDateTime30.minusMillis((int) (byte) 1);
        java.lang.String str33 = localDateTime32.toString();
        org.joda.time.DateTime dateTime34 = localDateTime32.toDateTime();
        boolean boolean35 = dateTime29.isEqual((org.joda.time.ReadableInstant) dateTime34);
        org.joda.time.Chronology chronology36 = dateTime34.getChronology();
        boolean boolean37 = dateTime20.equals((java.lang.Object) chronology36);
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.DurationFieldType durationFieldType39 = dateTimeFieldType38.getDurationType();
        int int40 = dateTime20.get(dateTimeFieldType38);
        boolean boolean41 = dateTime4.isSupported(dateTimeFieldType38);
        org.joda.time.Instant instant42 = dateTime4.toInstant();
        org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime45 = localDateTime43.minusMillis((int) (byte) 1);
        java.lang.String str46 = localDateTime45.toString();
        org.joda.time.DateTime dateTime47 = localDateTime45.toDateTime();
        org.joda.time.LocalDateTime localDateTime48 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime50 = localDateTime48.minusMillis((int) (byte) 1);
        java.lang.String str51 = localDateTime50.toString();
        org.joda.time.DateTime dateTime52 = localDateTime50.toDateTime();
        boolean boolean53 = dateTime47.isEqual((org.joda.time.ReadableInstant) dateTime52);
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = org.joda.time.DateTimeFieldType.dayOfYear();
        int int55 = dateTime52.get(dateTimeFieldType54);
        org.joda.time.DateTimeFieldType dateTimeFieldType56 = org.joda.time.DateTimeFieldType.monthOfYear();
        boolean boolean57 = dateTime52.isSupported(dateTimeFieldType56);
        org.joda.time.DateTimeFieldType dateTimeFieldType58 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str59 = dateTimeFieldType58.toString();
        java.lang.String str60 = dateTimeFieldType58.toString();
        int int61 = dateTime52.get(dateTimeFieldType58);
        java.lang.String str62 = dateTime52.toString();
        boolean boolean63 = instant42.isBefore((org.joda.time.ReadableInstant) dateTime52);
        org.junit.Assert.assertNotNull(localDateTime2);
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "2022-02-11T12:59:37.735" + "'", str3, "2022-02-11T12:59:37.735");
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localDateTime7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "2022-02-11T12:59:37.735" + "'", str8, "2022-02-11T12:59:37.735");
        org.junit.Assert.assertNotNull(dateTime9);
// flaky:         org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(localDateTime13);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "2022-02-11T12:59:37.735" + "'", str14, "2022-02-11T12:59:37.735");
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(localDateTime18);
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "2022-02-11T12:59:37.735" + "'", str19, "2022-02-11T12:59:37.735");
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
// flaky:         org.junit.Assert.assertTrue("'" + int24 + "' != '" + 42 + "'", int24 == 42);
        org.junit.Assert.assertNotNull(localDateTime27);
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "2022-02-11T12:59:37.735" + "'", str28, "2022-02-11T12:59:37.735");
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(localDateTime32);
// flaky:         org.junit.Assert.assertEquals("'" + str33 + "' != '" + "2022-02-11T12:59:37.735" + "'", str33, "2022-02-11T12:59:37.735");
        org.junit.Assert.assertNotNull(dateTime34);
// flaky:         org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType38);
        org.junit.Assert.assertNotNull(durationFieldType39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(instant42);
        org.junit.Assert.assertNotNull(localDateTime45);
// flaky:         org.junit.Assert.assertEquals("'" + str46 + "' != '" + "2022-02-11T12:59:37.735" + "'", str46, "2022-02-11T12:59:37.735");
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(localDateTime50);
// flaky:         org.junit.Assert.assertEquals("'" + str51 + "' != '" + "2022-02-11T12:59:37.735" + "'", str51, "2022-02-11T12:59:37.735");
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType54);
// flaky:         org.junit.Assert.assertTrue("'" + int55 + "' != '" + 42 + "'", int55 == 42);
        org.junit.Assert.assertNotNull(dateTimeFieldType56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "weekyear" + "'", str59, "weekyear");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "weekyear" + "'", str60, "weekyear");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 2022 + "'", int61 == 2022);
// flaky:         org.junit.Assert.assertEquals("'" + str62 + "' != '" + "2022-02-11T12:59:37.735+03:05:24.513" + "'", str62, "2022-02-11T12:59:37.735+03:05:24.513");
// flaky:         org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
    }

    @Test
    public void test08276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08276");
        // The following exception was thrown during execution in test generation
        try {
            int int2 = org.joda.time.field.FieldUtils.safeMultiplyToInt((long) 648, 215942220L);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Value cannot fit in an int: 139930558560");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08277");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.minusMillis((int) (byte) 1);
        java.lang.String str3 = localDateTime2.toString();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.minusMonths((int) 'a');
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusMinutes(22);
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime();
        boolean boolean10 = localDateTime8.isBefore((org.joda.time.ReadablePartial) localDateTime9);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime9.plusSeconds((int) (byte) 100);
        boolean boolean13 = localDateTime7.isBefore((org.joda.time.ReadablePartial) localDateTime9);
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime();
        int int15 = localDateTime14.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime14.minusMonths((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.minusMonths((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.plusYears(10);
        boolean boolean22 = localDateTime7.isAfter((org.joda.time.ReadablePartial) localDateTime21);
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime();
        boolean boolean25 = localDateTime23.isBefore((org.joda.time.ReadablePartial) localDateTime24);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime24.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property28 = localDateTime24.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime();
        boolean boolean31 = localDateTime29.isBefore((org.joda.time.ReadablePartial) localDateTime30);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime30.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property34 = localDateTime30.dayOfMonth();
        java.util.Locale locale35 = java.util.Locale.FRENCH;
        java.util.Set<java.lang.String> strSet36 = locale35.getUnicodeLocaleAttributes();
        java.lang.String str37 = locale35.getVariant();
        java.lang.String str38 = property34.getAsText(locale35);
        java.lang.String str39 = property28.getAsShortText(locale35);
        org.joda.time.LocalDateTime localDateTime40 = property28.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime localDateTime41 = property28.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime42 = property28.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime44 = localDateTime42.withYear((-1));
        int int45 = localDateTime42.getDayOfMonth();
        boolean boolean46 = localDateTime21.isBefore((org.joda.time.ReadablePartial) localDateTime42);
        org.joda.time.DateTimeField[] dateTimeFieldArray47 = localDateTime42.getFields();
        org.joda.time.LocalDateTime localDateTime48 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime49 = new org.joda.time.LocalDateTime();
        boolean boolean50 = localDateTime48.isBefore((org.joda.time.ReadablePartial) localDateTime49);
        org.joda.time.ReadableDuration readableDuration51 = null;
        org.joda.time.LocalDateTime localDateTime52 = localDateTime49.plus(readableDuration51);
        org.joda.time.LocalDateTime localDateTime54 = localDateTime49.plusMinutes((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime56 = localDateTime49.withYear(50);
        int int57 = localDateTime49.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime59 = localDateTime49.minusMonths(49);
        int int60 = localDateTime42.compareTo((org.joda.time.ReadablePartial) localDateTime49);
        org.joda.time.ReadableDuration readableDuration61 = null;
        org.joda.time.LocalDateTime localDateTime63 = localDateTime42.withDurationAdded(readableDuration61, 31);
        org.joda.time.LocalDateTime.Property property64 = localDateTime63.dayOfMonth();
        org.junit.Assert.assertNotNull(localDateTime2);
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "2022-02-11T12:59:37.798" + "'", str3, "2022-02-11T12:59:37.798");
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 22 + "'", int15 == 22);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
// flaky:         org.junit.Assert.assertEquals("'" + str38 + "' != '" + "11" + "'", str38, "11");
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "11" + "'", str39, "11");
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 28 + "'", int45 == 28);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldArray47);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(localDateTime56);
// flaky:         org.junit.Assert.assertTrue("'" + int57 + "' != '" + 799 + "'", int57 == 799);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(property64);
    }

    @Test
    public void test08278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08278");
        java.lang.String[] strArray1 = java.util.TimeZone.getAvailableIDs(35472598);
        org.junit.Assert.assertNotNull(strArray1);
    }

    @Test
    public void test08279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08279");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime1.plusMinutes((int) '#');
        org.joda.time.LocalDateTime localDateTime8 = localDateTime1.minusMinutes((int) (short) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.monthOfYear();
        boolean boolean10 = localDateTime8.isSupported(dateTimeFieldType9);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.LocalDateTime localDateTime13 = localDateTime8.withPeriodAdded(readablePeriod11, 28);
        int int14 = localDateTime13.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime13.withYearOfCentury((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime13.plusHours((-432000000));
        org.joda.time.LocalDateTime.Property property19 = localDateTime18.weekyear();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str21 = localDateTime18.toString("2022-02-11T09:52:15.832");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(localDateTime13);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 12 + "'", int14 == 12);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(property19);
    }

    @Test
    public void test08280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08280");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property5 = localDateTime1.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime6 = property5.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField7 = property5.getField();
        int int8 = dateTimeField7.getMaximumValue();
        java.util.Locale locale12 = new java.util.Locale("fra", "");
        java.util.Set<java.lang.String> strSet13 = locale12.getUnicodeLocaleAttributes();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime();
        boolean boolean16 = localDateTime14.isBefore((org.joda.time.ReadablePartial) localDateTime15);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime15.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property19 = localDateTime15.dayOfMonth();
        org.joda.time.DurationField durationField20 = property19.getRangeDurationField();
        boolean boolean21 = strSet13.contains((java.lang.Object) durationField20);
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime();
        boolean boolean24 = localDateTime22.isBefore((org.joda.time.ReadablePartial) localDateTime23);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime23.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property27 = localDateTime23.dayOfMonth();
        boolean boolean28 = property27.isLeap();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone29);
        java.util.Locale locale32 = java.util.Locale.CHINESE;
        java.lang.String str33 = dateTimeZone29.getName((long) (short) 0, locale32);
        java.lang.String str34 = property27.getAsShortText(locale32);
        boolean boolean35 = strSet13.equals((java.lang.Object) locale32);
        java.lang.String str36 = locale32.getISO3Country();
        java.lang.String str37 = dateTimeField7.getAsText(0, locale32);
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime();
        boolean boolean40 = localDateTime38.isBefore((org.joda.time.ReadablePartial) localDateTime39);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime39.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property43 = localDateTime39.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime();
        boolean boolean46 = localDateTime44.isBefore((org.joda.time.ReadablePartial) localDateTime45);
        org.joda.time.LocalDateTime localDateTime48 = localDateTime45.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property49 = localDateTime45.dayOfMonth();
        java.util.Locale locale50 = java.util.Locale.FRENCH;
        java.util.Set<java.lang.String> strSet51 = locale50.getUnicodeLocaleAttributes();
        java.lang.String str52 = locale50.getVariant();
        java.lang.String str53 = property49.getAsText(locale50);
        java.lang.String str54 = property43.getAsShortText(locale50);
        org.joda.time.LocalDateTime localDateTime55 = property43.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime localDateTime56 = property43.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime57 = property43.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime59 = localDateTime57.withYear((-1));
        int int60 = localDateTime57.getDayOfMonth();
        java.util.Locale locale65 = new java.util.Locale("11", "weekyear", "fra");
        java.lang.String str66 = locale65.getDisplayName();
        java.lang.String str67 = dateTimeField7.getAsText((org.joda.time.ReadablePartial) localDateTime57, 9, locale65);
        org.joda.time.DateTimeFieldType dateTimeFieldType68 = org.joda.time.DateTimeFieldType.yearOfCentury();
        org.joda.time.DurationFieldType durationFieldType69 = dateTimeFieldType68.getDurationType();
        boolean boolean70 = localDateTime57.isSupported(dateTimeFieldType68);
        org.joda.time.DurationFieldType durationFieldType71 = dateTimeFieldType68.getDurationType();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 31 + "'", int8 == 31);
        org.junit.Assert.assertEquals(locale12.toString(), "fra");
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "zh");
// flaky:         org.junit.Assert.assertEquals("'" + str33 + "' != '" + "+03:05:24.513" + "'", str33, "+03:05:24.513");
// flaky:         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "11" + "'", str34, "11");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "0" + "'", str37, "0");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
// flaky:         org.junit.Assert.assertEquals("'" + str53 + "' != '" + "11" + "'", str53, "11");
// flaky:         org.junit.Assert.assertEquals("'" + str54 + "' != '" + "11" + "'", str54, "11");
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 28 + "'", int60 == 28);
        org.junit.Assert.assertEquals(locale65.toString(), "11_WEEKYEAR_fra");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "11 (WEEKYEAR,fra)" + "'", str66, "11 (WEEKYEAR,fra)");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "9" + "'", str67, "9");
        org.junit.Assert.assertNotNull(dateTimeFieldType68);
        org.junit.Assert.assertNotNull(durationFieldType69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(durationFieldType71);
    }

    @Test
    public void test08281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08281");
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusMillis((int) (byte) 1);
        java.lang.String str5 = localDateTime4.toString();
        org.joda.time.DateTime dateTime6 = localDateTime4.toDateTime();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.minusMillis((int) (byte) 1);
        java.lang.String str10 = localDateTime9.toString();
        org.joda.time.DateTime dateTime11 = localDateTime9.toDateTime();
        boolean boolean12 = dateTime6.isEqual((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.Chronology chronology13 = dateTime11.getChronology();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((java.lang.Object) 35271574L, chronology13);
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime((long) 'u', chronology13);
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime(chronology13);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.minusDays((-432000000));
        org.junit.Assert.assertNotNull(localDateTime4);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "2022-02-11T12:59:37.918" + "'", str5, "2022-02-11T12:59:37.918");
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(localDateTime9);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "2022-02-11T12:59:37.918" + "'", str10, "2022-02-11T12:59:37.918");
        org.junit.Assert.assertNotNull(dateTime11);
// flaky:         org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(localDateTime18);
    }

    @Test
    public void test08282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08282");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property5 = localDateTime1.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime6 = property5.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField7 = property5.getField();
        long long9 = dateTimeField7.remainder((-1L));
        java.util.Locale locale11 = java.util.Locale.UK;
        java.lang.String str12 = dateTimeField7.getAsShortText((long) 22, locale11);
        int int13 = dateTimeField7.getMinimumValue();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime();
        boolean boolean16 = localDateTime14.isBefore((org.joda.time.ReadablePartial) localDateTime15);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime15.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime15.plusMinutes((int) '#');
        org.joda.time.LocalDateTime localDateTime22 = localDateTime15.minusMinutes((int) (short) 1);
        org.joda.time.LocalDateTime.Property property23 = localDateTime22.weekOfWeekyear();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime22, chronology24);
        java.util.Locale locale27 = new java.util.Locale("2022-02-11T09:47:50.218");
        java.lang.String str28 = dateTimeField7.getAsShortText((org.joda.time.ReadablePartial) localDateTime22, locale27);
        java.util.Locale locale29 = java.util.Locale.FRENCH;
        java.lang.String str30 = locale29.getDisplayName();
        int int31 = dateTimeField7.getMaximumShortTextLength(locale29);
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime();
        boolean boolean35 = localDateTime33.isBefore((org.joda.time.ReadablePartial) localDateTime34);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime34.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property38 = localDateTime34.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime39 = property38.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField40 = property38.getField();
        long long43 = dateTimeField40.addWrapField((long) 6, (int) (byte) 0);
        java.lang.String str45 = dateTimeField40.getAsShortText((long) (byte) 0);
        java.lang.String str47 = dateTimeField40.getAsShortText((-116L));
        long long49 = dateTimeField40.roundCeiling((long) 11);
        java.util.Locale locale54 = new java.util.Locale("11", "weekyear", "fra");
        java.lang.String str55 = locale54.getDisplayName();
        org.joda.time.LocalDateTime localDateTime56 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime57 = new org.joda.time.LocalDateTime();
        boolean boolean58 = localDateTime56.isBefore((org.joda.time.ReadablePartial) localDateTime57);
        org.joda.time.LocalDateTime localDateTime60 = localDateTime57.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property61 = localDateTime57.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime62 = property61.withMinimumValue();
        java.util.Locale locale63 = java.util.Locale.UK;
        java.lang.String str64 = property61.getAsShortText(locale63);
        java.lang.String str65 = locale54.getDisplayScript(locale63);
        java.lang.String str66 = dateTimeField40.getAsShortText((long) 715, locale63);
        org.joda.time.LocalDateTime localDateTime67 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime68 = new org.joda.time.LocalDateTime();
        boolean boolean69 = localDateTime67.isBefore((org.joda.time.ReadablePartial) localDateTime68);
        org.joda.time.LocalDateTime localDateTime71 = localDateTime68.plusSeconds((int) (byte) 100);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter72 = null;
        java.lang.String str73 = localDateTime68.toString(dateTimeFormatter72);
        org.joda.time.DateTimeFieldType dateTimeFieldType74 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        org.joda.time.LocalDateTime.Property property75 = localDateTime68.property(dateTimeFieldType74);
        java.util.Locale locale76 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str77 = dateTimeField40.getAsText((org.joda.time.ReadablePartial) localDateTime68, locale76);
        java.lang.String str78 = dateTimeField7.getAsShortText((int) 'a', locale76);
        org.joda.time.LocalDateTime localDateTime80 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime81 = new org.joda.time.LocalDateTime();
        boolean boolean82 = localDateTime80.isBefore((org.joda.time.ReadablePartial) localDateTime81);
        org.joda.time.LocalDateTime.Property property83 = localDateTime80.dayOfMonth();
        org.joda.time.LocalDateTime.Property property84 = localDateTime80.weekyear();
        boolean boolean86 = property84.equals((java.lang.Object) 52L);
        org.joda.time.DateTimeFieldType dateTimeFieldType87 = property84.getFieldType();
        java.util.Locale locale91 = new java.util.Locale("fra", "");
        java.util.Set<java.lang.String> strSet92 = locale91.getUnicodeLocaleAttributes();
        java.lang.String str93 = locale91.getScript();
        java.util.Set<java.lang.Character> charSet94 = locale91.getExtensionKeys();
        boolean boolean95 = locale91.hasExtensions();
        org.joda.time.LocalDateTime localDateTime96 = property84.setCopy("2022", locale91);
        java.lang.String str97 = dateTimeField7.getAsShortText((int) (byte) 0, locale91);
        org.joda.time.DurationField durationField98 = dateTimeField7.getRangeDurationField();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 86399999L + "'", long9 == 86399999L);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "1" + "'", str12, "1");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertEquals(locale27.toString(), "2022-02-11t09:47:50.218");
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "11" + "'", str28, "11");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "French" + "'", str30, "French");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2 + "'", int31 == 2);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 6L + "'", long43 == 6L);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "1" + "'", str45, "1");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "31" + "'", str47, "31");
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 86400000L + "'", long49 == 86400000L);
        org.junit.Assert.assertEquals(locale54.toString(), "11_WEEKYEAR_fra");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "11 (WEEKYEAR,fra)" + "'", str55, "11 (WEEKYEAR,fra)");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "en_GB");
// flaky:         org.junit.Assert.assertEquals("'" + str64 + "' != '" + "11" + "'", str64, "11");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "1" + "'", str66, "1");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(localDateTime71);
// flaky:         org.junit.Assert.assertEquals("'" + str73 + "' != '" + "2022-02-11T12:59:37.965" + "'", str73, "2022-02-11T12:59:37.965");
        org.junit.Assert.assertNotNull(dateTimeFieldType74);
        org.junit.Assert.assertNotNull(property75);
        org.junit.Assert.assertNotNull(locale76);
        org.junit.Assert.assertEquals(locale76.toString(), "fr_CA");
// flaky:         org.junit.Assert.assertEquals("'" + str77 + "' != '" + "11" + "'", str77, "11");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "97" + "'", str78, "97");
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(property83);
        org.junit.Assert.assertNotNull(property84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType87);
        org.junit.Assert.assertEquals(locale91.toString(), "fra");
        org.junit.Assert.assertNotNull(strSet92);
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "" + "'", str93, "");
        org.junit.Assert.assertNotNull(charSet94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertNotNull(localDateTime96);
        org.junit.Assert.assertEquals("'" + str97 + "' != '" + "0" + "'", str97, "0");
        org.junit.Assert.assertNotNull(durationField98);
    }

    @Test
    public void test08283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08283");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder1.addUnicodeLocaleAttribute("Japon");
        java.util.Locale.Builder builder4 = builder1.clear();
        java.util.Locale.Builder builder5 = builder1.clear();
        java.util.Locale.Builder builder6 = builder1.clearExtensions();
        java.util.Locale.Builder builder8 = builder1.setRegion("");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder11 = builder8.setUnicodeLocaleKeyword("2022-02-16T06:54:11.272", "2022-02-11T09:50:44.390");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale keyword key: 2022-02-16T06:54:11.272 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test08284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08284");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds((int) (byte) 100);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray5 = localDateTime4.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.plusSeconds((int) (short) 1);
        int int8 = localDateTime4.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime4.withWeekOfWeekyear((int) '4');
        int int11 = localDateTime4.getEra();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime(chronology12);
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.yearOfEra();
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.LocalDateTime localDateTime16 = localDateTime13.minus(readablePeriod15);
        int int17 = localDateTime4.compareTo((org.joda.time.ReadablePartial) localDateTime16);
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.LocalDateTime localDateTime19 = localDateTime4.plus(readablePeriod18);
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.LocalDateTime localDateTime21 = localDateTime4.minus(readableDuration20);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 22 + "'", int8 == 22);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
    }

    @Test
    public void test08285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08285");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime1.plusMinutes((int) '#');
        org.joda.time.LocalDateTime localDateTime8 = localDateTime1.minusMinutes((int) (short) 1);
        org.joda.time.LocalDateTime.Property property9 = localDateTime8.weekOfWeekyear();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime8, chronology10);
        org.joda.time.LocalDateTime.Property property12 = localDateTime11.year();
        java.util.Locale.Builder builder13 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder14 = builder13.clear();
        java.util.Locale.Builder builder15 = builder14.clearExtensions();
        java.util.Locale.Builder builder16 = builder15.clearExtensions();
        java.util.Locale.Builder builder17 = builder16.clearExtensions();
        java.util.Locale locale18 = builder16.build();
        java.lang.String str19 = property12.getAsText(locale18);
        org.joda.time.DateTimeField dateTimeField20 = property12.getField();
        org.joda.time.DurationField durationField21 = property12.getRangeDurationField();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "2022" + "'", str19, "2022");
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNull(durationField21);
    }

    @Test
    public void test08286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08286");
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("2022-02-11T09:49:34.622");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=2022-02-11t09:49:34.622");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08287");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        java.util.Locale locale2 = java.util.Locale.getDefault(category0);
        java.util.Locale.Builder builder3 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder4 = builder3.clearExtensions();
        java.util.Locale.Builder builder6 = builder4.addUnicodeLocaleAttribute("Japon");
        java.util.Locale.Builder builder7 = builder6.clearExtensions();
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minusMillis((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.plusDays(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime10.withField(dateTimeFieldType13, 0);
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime();
        boolean boolean18 = localDateTime16.isBefore((org.joda.time.ReadablePartial) localDateTime17);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime17.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime17.plusMinutes((int) '#');
        org.joda.time.LocalDateTime localDateTime24 = localDateTime17.minusMinutes((int) (short) 1);
        boolean boolean25 = localDateTime15.isAfter((org.joda.time.ReadablePartial) localDateTime24);
        org.joda.time.LocalDateTime.Property property26 = localDateTime15.secondOfMinute();
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = property26.getFieldType();
        int int28 = property26.getMaximumValue();
        org.joda.time.DateTimeField dateTimeField29 = property26.getField();
        java.util.Locale locale30 = java.util.Locale.KOREAN;
        java.lang.String str31 = locale30.getCountry();
        java.lang.String str32 = locale30.getDisplayName();
        java.lang.String str33 = locale30.getDisplayCountry();
        int int34 = dateTimeField29.getMaximumShortTextLength(locale30);
        boolean boolean35 = locale30.hasExtensions();
        java.util.Locale.Builder builder36 = builder6.setLocale(locale30);
        java.util.Locale.setDefault(category0, locale30);
        java.util.Locale locale38 = java.util.Locale.getDefault(category0);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale1);
// flaky:         org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertNotNull(locale2);
// flaky:         org.junit.Assert.assertEquals(locale2.toString(), "");
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 59 + "'", int28 == 59);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Korean" + "'", str32, "Korean");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2 + "'", int34 == 2);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "ko");
    }

    @Test
    public void test08288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08288");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.util.Locale locale2 = null;
        java.lang.String str3 = dateTimeZone0.getName((long) (short) 10, locale2);
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.minusMillis((int) (byte) 1);
        java.lang.String str7 = localDateTime6.toString();
        org.joda.time.DateTime dateTime8 = localDateTime6.toDateTime();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.minusMillis((int) (byte) 1);
        java.lang.String str12 = localDateTime11.toString();
        org.joda.time.DateTime dateTime13 = localDateTime11.toDateTime();
        boolean boolean14 = dateTime8.isEqual((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.minusMillis((int) (byte) 1);
        java.lang.String str18 = localDateTime17.toString();
        org.joda.time.DateTime dateTime19 = localDateTime17.toDateTime();
        boolean boolean20 = dateTime8.isEqual((org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.Chronology chronology21 = dateTime19.getChronology();
        int int22 = dateTimeZone0.getOffset((org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime(dateTimeZone0);
        long long26 = dateTimeZone0.convertLocalToUTC((long) 35343329, false);
        org.junit.Assert.assertNotNull(dateTimeZone0);
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+03:05:24.513" + "'", str3, "+03:05:24.513");
        org.junit.Assert.assertNotNull(localDateTime6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "2022-02-11T12:59:38.116" + "'", str7, "2022-02-11T12:59:38.116");
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(localDateTime11);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "2022-02-11T12:59:38.116" + "'", str12, "2022-02-11T12:59:38.116");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(localDateTime17);
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "2022-02-11T12:59:38.116" + "'", str18, "2022-02-11T12:59:38.116");
        org.junit.Assert.assertNotNull(dateTime19);
// flaky:         org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(chronology21);
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 11124513 + "'", int22 == 11124513);
// flaky:         org.junit.Assert.assertTrue("'" + long26 + "' != '" + 24218816L + "'", long26 == 24218816L);
    }

    @Test
    public void test08289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08289");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.minusMillis((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.plusDays(0);
        int int5 = localDateTime4.getDayOfYear();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.plusWeeks(709);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.plusSeconds(11);
        int int10 = localDateTime9.getYear();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime9.withCenturyOfEra(707);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 42 + "'", int5 == 42);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2035 + "'", int10 == 2035);
        org.junit.Assert.assertNotNull(localDateTime12);
    }

    @Test
    public void test08290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08290");
        org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.parse("2022-02-11T09:47:58.627");
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusMonths(0);
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDateTime localDateTime6 = localDateTime1.withPeriodAdded(readablePeriod4, (-40));
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        int int8 = localDateTime7.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime7.minusMonths((int) (short) 0);
        int int11 = localDateTime1.compareTo((org.joda.time.ReadablePartial) localDateTime10);
        org.joda.time.LocalDateTime.Property property12 = localDateTime10.hourOfDay();
        org.joda.time.tz.NameProvider nameProvider13 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale14 = java.util.Locale.JAPAN;
        java.lang.String str17 = nameProvider13.getShortName(locale14, "und", "");
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime();
        boolean boolean20 = localDateTime18.isBefore((org.joda.time.ReadablePartial) localDateTime19);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime19.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property23 = localDateTime19.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime24 = property23.withMinimumValue();
        java.util.Locale locale25 = java.util.Locale.UK;
        java.lang.String str26 = property23.getAsShortText(locale25);
        java.lang.String str27 = locale25.getISO3Language();
        java.util.Locale locale28 = java.util.Locale.CHINESE;
        java.lang.String str29 = locale25.getDisplayLanguage(locale28);
        java.lang.String str30 = locale28.getDisplayScript();
        java.lang.String str31 = locale14.getDisplayVariant(locale28);
        int int32 = property12.getMaximumShortTextLength(locale28);
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 22 + "'", int8 == 22);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(nameProvider13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ja_JP");
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "en_GB");
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "11" + "'", str26, "11");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "eng" + "'", str27, "eng");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "\u82f1\u6587" + "'", str29, "\u82f1\u6587");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2 + "'", int32 == 2);
    }

    @Test
    public void test08291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08291");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.field.FieldUtils.verifyValueBounds("2022-02-11T09:53:38.092", 713, 445, (-975));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 713 for 2022-02-11T09:53:38.092 must be in the range [445,-975]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08292");
        java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("Fr");
        org.junit.Assert.assertNotNull(languageRangeList1);
    }

    @Test
    public void test08293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08293");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        int[] intArray3 = localDateTime1.getValues();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.plusYears((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        boolean boolean8 = localDateTime6.isBefore((org.joda.time.ReadablePartial) localDateTime7);
        int[] intArray9 = localDateTime7.getValues();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime1.withFields((org.joda.time.ReadablePartial) localDateTime7);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusMillis((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.minusSeconds((int) '#');
        org.joda.time.LocalDateTime localDateTime16 = localDateTime12.plusMonths(49);
        org.joda.time.LocalDateTime.Property property17 = localDateTime16.era();
        java.util.Locale locale19 = java.util.Locale.forLanguageTag("2022-02-11T09:48:33.420");
        java.lang.String str20 = locale19.getDisplayScript();
        java.lang.String str21 = property17.getAsShortText(locale19);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime23 = property17.setCopy(303);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 303 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(intArray3);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[2022, 2, 11, 46778177]");
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(intArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[2022, 2, 11, 46778177]");
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "AD" + "'", str21, "AD");
    }

    @Test
    public void test08294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08294");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime1.plusMinutes((int) '#');
        org.joda.time.LocalDateTime localDateTime8 = localDateTime1.minusMinutes((int) (short) 1);
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.LocalDateTime localDateTime11 = localDateTime1.withDurationAdded(readableDuration9, (int) (short) 100);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray12 = localDateTime1.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime1.withWeekyear((int) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime();
        boolean boolean18 = localDateTime16.isBefore((org.joda.time.ReadablePartial) localDateTime17);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime17.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime17.plusMinutes((int) '#');
        org.joda.time.LocalDateTime localDateTime24 = localDateTime17.withEra((int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone25);
        java.util.Locale locale28 = java.util.Locale.CHINESE;
        java.lang.String str29 = dateTimeZone25.getName((long) (short) 0, locale28);
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime32 = localDateTime30.minusMillis((int) (byte) 1);
        java.lang.String str33 = localDateTime32.toString();
        org.joda.time.DateTime dateTime34 = localDateTime32.toDateTime();
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime37 = localDateTime35.minusMillis((int) (byte) 1);
        java.lang.String str38 = localDateTime37.toString();
        org.joda.time.DateTime dateTime39 = localDateTime37.toDateTime();
        boolean boolean40 = dateTime34.isEqual((org.joda.time.ReadableInstant) dateTime39);
        int int41 = dateTimeZone25.getOffset((org.joda.time.ReadableInstant) dateTime34);
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str43 = dateTimeFieldType42.toString();
        java.lang.String str44 = dateTimeFieldType42.toString();
        boolean boolean45 = dateTime34.isSupported(dateTimeFieldType42);
        org.joda.time.Chronology chronology46 = dateTime34.getChronology();
        org.joda.time.Chronology chronology47 = dateTime34.getChronology();
        org.joda.time.LocalDateTime localDateTime48 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime17, chronology47);
        org.joda.time.DateTimeField dateTimeField49 = dateTimeFieldType15.getField(chronology47);
        org.joda.time.LocalDateTime.Property property50 = localDateTime1.property(dateTimeFieldType15);
        java.lang.String str51 = dateTimeFieldType15.getName();
        java.lang.String str52 = dateTimeFieldType15.getName();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "zh");
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "+03:05:24.513" + "'", str29, "+03:05:24.513");
        org.junit.Assert.assertNotNull(localDateTime32);
// flaky:         org.junit.Assert.assertEquals("'" + str33 + "' != '" + "2022-02-11T12:59:38.192" + "'", str33, "2022-02-11T12:59:38.192");
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(localDateTime37);
// flaky:         org.junit.Assert.assertEquals("'" + str38 + "' != '" + "2022-02-11T12:59:38.192" + "'", str38, "2022-02-11T12:59:38.192");
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int41 + "' != '" + 11124513 + "'", int41 == 11124513);
        org.junit.Assert.assertNotNull(dateTimeFieldType42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "weekyear" + "'", str43, "weekyear");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "weekyear" + "'", str44, "weekyear");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "yearOfCentury" + "'", str51, "yearOfCentury");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "yearOfCentury" + "'", str52, "yearOfCentury");
    }

    @Test
    public void test08295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08295");
        java.util.Locale.Category category0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime();
        boolean boolean3 = localDateTime1.isBefore((org.joda.time.ReadablePartial) localDateTime2);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property6 = localDateTime2.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime7 = property6.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField8 = property6.getField();
        int int9 = dateTimeField8.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime();
        int int11 = localDateTime10.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime10.minusMonths((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.minusMonths((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.plusWeeks(22);
        java.util.Locale locale19 = java.util.Locale.JAPANESE;
        java.lang.String str20 = dateTimeField8.getAsShortText((org.joda.time.ReadablePartial) localDateTime17, 22, locale19);
        int int22 = dateTimeField8.getLeapAmount((long) (byte) 1);
        int int24 = dateTimeField8.getMaximumValue((long) 35293506);
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime();
        int int26 = localDateTime25.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime25.minusMonths((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.minusMonths((int) (byte) 0);
        int int31 = localDateTime28.getWeekyear();
        org.joda.time.LocalDateTime.Property property32 = localDateTime28.dayOfYear();
        org.joda.time.LocalDateTime.Property property33 = localDateTime28.minuteOfHour();
        org.joda.time.LocalDateTime.Property property34 = localDateTime28.era();
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime37 = localDateTime35.minusMillis((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime37.plusDays(0);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime39.plusMillis((int) '#');
        int[] intArray42 = localDateTime39.getValues();
        int int43 = dateTimeField8.getMinimumValue((org.joda.time.ReadablePartial) localDateTime28, intArray42);
        org.joda.time.DurationField durationField44 = dateTimeField8.getRangeDurationField();
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime46 = new org.joda.time.LocalDateTime();
        boolean boolean47 = localDateTime45.isBefore((org.joda.time.ReadablePartial) localDateTime46);
        org.joda.time.LocalDateTime localDateTime49 = localDateTime46.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property50 = localDateTime46.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime51 = property50.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField52 = property50.getField();
        int int53 = dateTimeField52.getMaximumValue();
        long long55 = dateTimeField52.roundHalfCeiling((long) (-222));
        java.util.Locale locale59 = new java.util.Locale("fra", "");
        java.util.Set<java.lang.String> strSet60 = locale59.getUnicodeLocaleAttributes();
        java.lang.String str61 = locale59.getScript();
        java.lang.String str62 = locale59.getCountry();
        java.lang.String str63 = dateTimeField52.getAsShortText((long) 556, locale59);
        int int64 = dateTimeField8.getMaximumTextLength(locale59);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.setDefault(category0, locale59);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Category cannot be NULL");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 31 + "'", int9 == 31);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 22 + "'", int11 == 22);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "22" + "'", str20, "22");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 31 + "'", int24 == 31);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 22 + "'", int26 == 22);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2022 + "'", int31 == 2022);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(intArray42);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[2022, 2, 11, 46778213]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertNotNull(durationField44);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 31 + "'", int53 == 31);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 0L + "'", long55 == 0L);
        org.junit.Assert.assertEquals(locale59.toString(), "fra");
        org.junit.Assert.assertNotNull(strSet60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "1" + "'", str63, "1");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 2 + "'", int64 == 2);
    }

    @Test
    public void test08296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08296");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property5 = localDateTime1.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime6 = property5.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField7 = property5.getField();
        int int8 = property5.getMaximumValueOverall();
        org.joda.time.LocalDateTime localDateTime10 = property5.addToCopy(0);
        org.joda.time.LocalDateTime localDateTime12 = property5.addToCopy(1);
        org.joda.time.LocalDateTime localDateTime14 = property5.addToCopy((long) (byte) 1);
        org.joda.time.LocalDateTime localDateTime16 = property5.addWrapFieldToCopy(112);
        int int17 = property5.getLeapAmount();
        int int18 = property5.getMaximumValueOverall();
        org.joda.time.LocalDateTime localDateTime19 = property5.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime.Property property20 = localDateTime19.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime19.minusDays(35308050);
        org.joda.time.DateTime dateTime23 = localDateTime19.toDateTime();
        int int24 = localDateTime19.getSecondOfMinute();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 31 + "'", int8 == 31);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 31 + "'", int18 == 31);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
    }

    @Test
    public void test08297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08297");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime1.plusMinutes((int) '#');
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.weekOfWeekyear();
        java.lang.String str8 = property7.getAsShortText();
        org.joda.time.LocalDateTime localDateTime10 = property7.addWrapFieldToCopy((int) (byte) -1);
        int int11 = localDateTime10.getMinuteOfHour();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime10.minusYears(18);
        org.joda.time.DateTimeField[] dateTimeFieldArray14 = localDateTime13.getFields();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "6" + "'", str8, "6");
        org.junit.Assert.assertNotNull(localDateTime10);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 34 + "'", int11 == 34);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(dateTimeFieldArray14);
    }

    @Test
    public void test08298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08298");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) 'u');
        long long5 = dateTimeZone1.convertLocalToUTC((long) 1, false, 822L);
        java.util.TimeZone timeZone6 = dateTimeZone1.toTimeZone();
        int int8 = dateTimeZone1.getOffset(10L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        int int11 = dateTimeZone1.getOffsetFromLocal(19180800207L);
        java.lang.String str13 = dateTimeZone1.getShortName(944L);
        boolean boolean14 = dateTimeZone1.isFixed();
        boolean boolean15 = dateTimeZone1.isFixed();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-116L) + "'", long5 == (-116L));
        org.junit.Assert.assertNotNull(timeZone6);
        org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 117 + "'", int8 == 117);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 117 + "'", int11 == 117);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+00:00:00.117" + "'", str13, "+00:00:00.117");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    }

    @Test
    public void test08299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08299");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        int int1 = localDateTime0.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime3 = localDateTime0.minusMonths((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime0.minusMillis(35274908);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.withPeriodAdded(readablePeriod6, 9);
        org.joda.time.LocalDateTime.Property property9 = localDateTime8.centuryOfEra();
        boolean boolean10 = property9.isLeap();
        org.joda.time.LocalDateTime localDateTime11 = property9.roundCeilingCopy();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 22 + "'", int1 == 22);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(localDateTime11);
    }

    @Test
    public void test08300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08300");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusMillis((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.plusDays(0);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.plusMillis((int) '#');
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis((int) 'u');
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime5, dateTimeZone9);
        int int12 = dateTimeZone9.getOffset(35323110L);
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime(35320340L, dateTimeZone9);
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.minus(readableDuration14);
        int int16 = localDateTime13.getEra();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 117 + "'", int12 == 117);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
    }

    @Test
    public void test08301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08301");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        int int2 = dateTimeZone0.getStandardOffset((long) (-100));
        java.util.TimeZone timeZone3 = dateTimeZone0.toTimeZone();
        int int4 = timeZone3.getRawOffset();
        timeZone3.setRawOffset(50);
        int int8 = timeZone3.getOffset(3577696135L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 117 + "'", int2 == 117);
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 117 + "'", int4 == 117);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 50 + "'", int8 == 50);
    }

    @Test
    public void test08302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08302");
        int int2 = org.joda.time.field.FieldUtils.safeAdd(2719, 3017);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 5736 + "'", int2 == 5736);
    }

    @Test
    public void test08303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08303");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.getDefault();
        java.util.Locale locale4 = null;
        java.lang.String str5 = dateTimeZone2.getName((long) (short) 10, locale4);
        long long7 = dateTimeZone1.getMillisKeepLocal(dateTimeZone2, (long) 874);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        long long10 = dateTimeZone2.getMillisKeepLocal(dateTimeZone8, (long) '4');
        int int12 = dateTimeZone2.getOffsetFromLocal((long) 83);
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime(0L, dateTimeZone2);
        int int15 = dateTimeZone2.getOffset(1644572877407L);
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime(dateTimeZone2);
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime();
        boolean boolean19 = localDateTime17.isBefore((org.joda.time.ReadablePartial) localDateTime18);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime18.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property22 = localDateTime18.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime23 = property22.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField24 = property22.getField();
        int int25 = property22.getMaximumValueOverall();
        org.joda.time.LocalDateTime localDateTime27 = property22.addToCopy(0);
        org.joda.time.LocalDateTime localDateTime29 = property22.addToCopy(1);
        org.joda.time.LocalDateTime localDateTime31 = property22.addToCopy((long) (byte) 1);
        org.joda.time.LocalDateTime localDateTime32 = property22.roundHalfCeilingCopy();
        java.util.Locale locale33 = java.util.Locale.JAPAN;
        java.util.Locale locale34 = java.util.Locale.FRENCH;
        java.lang.String str35 = locale33.getDisplayCountry(locale34);
        java.util.Locale.Builder builder36 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder37 = builder36.clear();
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone38);
        java.util.Locale locale41 = java.util.Locale.CHINESE;
        java.lang.String str42 = dateTimeZone38.getName((long) (short) 0, locale41);
        java.util.Locale.Builder builder43 = builder36.setLocale(locale41);
        java.lang.String str44 = locale34.getDisplayScript(locale41);
        int int45 = property22.getMaximumShortTextLength(locale41);
        org.joda.time.LocalDateTime localDateTime47 = property22.addToCopy((long) 83);
        boolean boolean48 = localDateTime16.isBefore((org.joda.time.ReadablePartial) localDateTime47);
        int int49 = localDateTime47.getDayOfYear();
        org.joda.time.LocalDateTime localDateTime51 = localDateTime47.withYearOfEra(397);
        int int52 = localDateTime47.getSecondOfMinute();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray53 = localDateTime47.getFieldTypes();
        int int54 = localDateTime47.getMonthOfYear();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00:00.117" + "'", str5, "+00:00:00.117");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 874L + "'", long7 == 874L);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 52L + "'", long10 == 52L);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 117 + "'", int12 == 117);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 117 + "'", int15 == 117);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 31 + "'", int25 == 31);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Japon" + "'", str35, "Japon");
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "+00:00:00.117" + "'", str42, "+00:00:00.117");
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2 + "'", int45 == 2);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 125 + "'", int49 == 125);
        org.junit.Assert.assertNotNull(localDateTime51);
// flaky:         org.junit.Assert.assertTrue("'" + int52 + "' != '" + 13 + "'", int52 == 13);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 5 + "'", int54 == 5);
    }

    @Test
    public void test08304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08304");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime(35315050, 113911148, 35394854, (-119), 2023, 112, 163);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -119 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08305");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property5 = localDateTime1.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime6 = property5.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField7 = property5.getField();
        int int10 = dateTimeField7.getDifference(1L, 86399999L);
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime();
        int int12 = localDateTime11.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime11.minusMonths((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minusMonths((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.plusWeeks(22);
        org.joda.time.LocalDateTime.Property property19 = localDateTime18.dayOfMonth();
        java.util.Locale locale24 = new java.util.Locale("11", "weekyear", "fra");
        java.lang.String str25 = locale24.getDisplayName();
        java.lang.String str26 = dateTimeField7.getAsShortText((org.joda.time.ReadablePartial) localDateTime18, (int) (byte) 1, locale24);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime28 = localDateTime18.withWeekOfWeekyear((-19033));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -19033 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 22 + "'", int12 == 22);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertEquals(locale24.toString(), "11_WEEKYEAR_fra");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "11 (WEEKYEAR,fra)" + "'", str25, "11 (WEEKYEAR,fra)");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "1" + "'", str26, "1");
    }

    @Test
    public void test08306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08306");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        java.util.Locale locale3 = null;
        java.lang.String str4 = dateTimeZone1.getName((long) (short) 10, locale3);
        long long6 = dateTimeZone0.getMillisKeepLocal(dateTimeZone1, (long) 874);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        long long9 = dateTimeZone1.getMillisKeepLocal(dateTimeZone7, (long) '4');
        int int11 = dateTimeZone1.getOffsetFromLocal((long) 83);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.minusMillis((int) (byte) 1);
        java.lang.String str15 = localDateTime14.toString();
        org.joda.time.DateTime dateTime16 = localDateTime14.toDateTime();
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.minusMillis((int) (byte) 1);
        java.lang.String str20 = localDateTime19.toString();
        org.joda.time.DateTime dateTime21 = localDateTime19.toDateTime();
        boolean boolean22 = dateTime16.isEqual((org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.minusMillis((int) (byte) 1);
        java.lang.String str26 = localDateTime25.toString();
        org.joda.time.DateTime dateTime27 = localDateTime25.toDateTime();
        boolean boolean28 = dateTime16.isEqual((org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.minusMillis((int) (byte) 1);
        java.lang.String str32 = localDateTime31.toString();
        org.joda.time.DateTime dateTime33 = localDateTime31.toDateTime();
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime36 = localDateTime34.minusMillis((int) (byte) 1);
        java.lang.String str37 = localDateTime36.toString();
        org.joda.time.DateTime dateTime38 = localDateTime36.toDateTime();
        boolean boolean39 = dateTime33.isEqual((org.joda.time.ReadableInstant) dateTime38);
        boolean boolean40 = dateTime16.isEqual((org.joda.time.ReadableInstant) dateTime38);
        int int41 = dateTimeZone1.getOffset((org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.getDefault();
        java.util.Locale locale45 = null;
        java.lang.String str46 = dateTimeZone43.getName((long) (short) 10, locale45);
        long long48 = dateTimeZone42.getMillisKeepLocal(dateTimeZone43, (long) 874);
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.getDefault();
        long long51 = dateTimeZone43.getMillisKeepLocal(dateTimeZone49, (long) '4');
        int int53 = dateTimeZone43.getOffsetFromLocal((long) 83);
        long long57 = dateTimeZone43.convertLocalToUTC((long) 1, true, 0L);
        java.util.Locale locale59 = java.util.Locale.ROOT;
        java.lang.String str60 = locale59.getDisplayName();
        java.lang.String str61 = dateTimeZone43.getShortName((long) (-120), locale59);
        long long63 = dateTimeZone1.getMillisKeepLocal(dateTimeZone43, (long) 42);
        long long65 = dateTimeZone43.previousTransition((-116L));
        long long68 = dateTimeZone43.convertLocalToUTC((long) (-89), false);
        long long71 = dateTimeZone43.convertLocalToUTC(35328181L, false);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.117" + "'", str4, "+00:00:00.117");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 874L + "'", long6 == 874L);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 52L + "'", long9 == 52L);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 117 + "'", int11 == 117);
        org.junit.Assert.assertNotNull(localDateTime14);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "2022-02-11T09:54:14.049" + "'", str15, "2022-02-11T09:54:14.049");
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(localDateTime19);
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "2022-02-11T09:54:14.049" + "'", str20, "2022-02-11T09:54:14.049");
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(localDateTime25);
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "2022-02-11T09:54:14.049" + "'", str26, "2022-02-11T09:54:14.049");
        org.junit.Assert.assertNotNull(dateTime27);
// flaky:         org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(localDateTime31);
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "2022-02-11T09:54:14.049" + "'", str32, "2022-02-11T09:54:14.049");
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(localDateTime36);
// flaky:         org.junit.Assert.assertEquals("'" + str37 + "' != '" + "2022-02-11T09:54:14.049" + "'", str37, "2022-02-11T09:54:14.049");
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
// flaky:         org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 117 + "'", int41 == 117);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "+00:00:00.117" + "'", str46, "+00:00:00.117");
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 874L + "'", long48 == 874L);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 52L + "'", long51 == 52L);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 117 + "'", int53 == 117);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + (-116L) + "'", long57 == (-116L));
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "+00:00:00.117" + "'", str61, "+00:00:00.117");
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 42L + "'", long63 == 42L);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + (-116L) + "'", long65 == (-116L));
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + (-206L) + "'", long68 == (-206L));
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 35328064L + "'", long71 == 35328064L);
    }

    @Test
    public void test08307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08307");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale.Builder builder3 = builder0.setLanguage("");
        java.util.Locale.Builder builder4 = builder3.clearExtensions();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime();
        boolean boolean7 = localDateTime5.isBefore((org.joda.time.ReadablePartial) localDateTime6);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property10 = localDateTime6.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime11 = property10.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField12 = property10.getField();
        org.joda.time.DurationField durationField13 = dateTimeField12.getLeapDurationField();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime();
        boolean boolean16 = localDateTime14.isBefore((org.joda.time.ReadablePartial) localDateTime15);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime15.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime15.plusMinutes((int) '#');
        org.joda.time.LocalDateTime localDateTime22 = localDateTime15.plusMonths(0);
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.LocalDateTime localDateTime25 = localDateTime22.withDurationAdded(readableDuration23, (int) (byte) -1);
        java.util.Locale locale28 = new java.util.Locale("fra", "");
        java.util.Set<java.lang.String> strSet29 = locale28.getUnicodeLocaleAttributes();
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime();
        boolean boolean32 = localDateTime30.isBefore((org.joda.time.ReadablePartial) localDateTime31);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime31.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property35 = localDateTime31.dayOfMonth();
        org.joda.time.DurationField durationField36 = property35.getRangeDurationField();
        boolean boolean37 = strSet29.contains((java.lang.Object) durationField36);
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime();
        boolean boolean40 = localDateTime38.isBefore((org.joda.time.ReadablePartial) localDateTime39);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime39.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property43 = localDateTime39.dayOfMonth();
        boolean boolean44 = property43.isLeap();
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone45);
        java.util.Locale locale48 = java.util.Locale.CHINESE;
        java.lang.String str49 = dateTimeZone45.getName((long) (short) 0, locale48);
        java.lang.String str50 = property43.getAsShortText(locale48);
        boolean boolean51 = strSet29.equals((java.lang.Object) locale48);
        java.lang.String str52 = dateTimeField12.getAsText((org.joda.time.ReadablePartial) localDateTime25, locale48);
        java.util.Locale.Builder builder53 = builder3.setLocale(locale48);
        java.util.Locale.Builder builder54 = builder3.clear();
        java.util.Locale.Builder builder55 = builder54.clear();
        java.util.Locale.Builder builder56 = builder55.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder58 = builder55.addUnicodeLocaleAttribute("");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute:  [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNull(durationField13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertEquals(locale28.toString(), "fra");
        org.junit.Assert.assertNotNull(strSet29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "+00:00:00.117" + "'", str49, "+00:00:00.117");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "11" + "'", str50, "11");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "11" + "'", str52, "11");
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(builder56);
    }

    @Test
    public void test08308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08308");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) 'u');
        long long5 = dateTimeZone1.convertLocalToUTC((long) 1, false, 822L);
        java.util.TimeZone timeZone6 = dateTimeZone1.toTimeZone();
        long long9 = dateTimeZone1.convertLocalToUTC(0L, false);
        java.lang.String str10 = dateTimeZone1.toString();
        boolean boolean11 = dateTimeZone1.isFixed();
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime();
        boolean boolean15 = localDateTime13.isBefore((org.joda.time.ReadablePartial) localDateTime14);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime14.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime14.plusMinutes((int) '#');
        org.joda.time.LocalDateTime localDateTime21 = localDateTime14.minusMinutes((int) (short) 1);
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.LocalDateTime localDateTime24 = localDateTime14.withDurationAdded(readableDuration22, (int) (short) 100);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = null;
        java.lang.String str26 = localDateTime14.toString(dateTimeFormatter25);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime14.minusMillis(379);
        boolean boolean29 = localDateTime12.isBefore((org.joda.time.ReadablePartial) localDateTime14);
        int int30 = localDateTime14.getMinuteOfHour();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-116L) + "'", long5 == (-116L));
        org.junit.Assert.assertNotNull(timeZone6);
        org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-117L) + "'", long9 == (-117L));
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+00:00:00.117" + "'", str10, "+00:00:00.117");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime24);
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "2022-02-11T09:54:14.089" + "'", str26, "2022-02-11T09:54:14.089");
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int30 + "' != '" + 54 + "'", int30 == 54);
    }

    @Test
    public void test08309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08309");
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusMillis((int) (byte) 1);
        java.lang.String str5 = localDateTime4.toString();
        org.joda.time.DateTime dateTime6 = localDateTime4.toDateTime();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.minusMillis((int) (byte) 1);
        java.lang.String str10 = localDateTime9.toString();
        org.joda.time.DateTime dateTime11 = localDateTime9.toDateTime();
        boolean boolean12 = dateTime6.isEqual((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.minusMillis((int) (byte) 1);
        java.lang.String str16 = localDateTime15.toString();
        org.joda.time.DateTime dateTime17 = localDateTime15.toDateTime();
        boolean boolean18 = dateTime6.isEqual((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.Chronology chronology19 = dateTime17.getChronology();
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime((long) 42, chronology19);
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime((java.lang.Object) "2022-02-11T09:48:07.237", chronology19);
        int int22 = localDateTime21.getCenturyOfEra();
        org.junit.Assert.assertNotNull(localDateTime4);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "2022-02-11T09:54:14.103" + "'", str5, "2022-02-11T09:54:14.103");
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(localDateTime9);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "2022-02-11T09:54:14.103" + "'", str10, "2022-02-11T09:54:14.103");
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(localDateTime15);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "2022-02-11T09:54:14.103" + "'", str16, "2022-02-11T09:54:14.103");
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 20 + "'", int22 == 20);
    }

    @Test
    public void test08310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08310");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        java.util.Locale locale3 = null;
        java.lang.String str4 = dateTimeZone1.getName((long) (short) 10, locale3);
        long long6 = dateTimeZone0.getMillisKeepLocal(dateTimeZone1, (long) 874);
        int int8 = dateTimeZone1.getOffsetFromLocal((long) 22);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone10);
        java.util.Locale locale13 = java.util.Locale.CHINESE;
        java.lang.String str14 = dateTimeZone10.getName((long) (short) 0, locale13);
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime(0L, dateTimeZone10);
        long long17 = dateTimeZone1.getMillisKeepLocal(dateTimeZone10, 202200L);
        long long19 = dateTimeZone1.nextTransition(35296406L);
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime();
        boolean boolean23 = localDateTime21.isBefore((org.joda.time.ReadablePartial) localDateTime22);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime22.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property26 = localDateTime22.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime27 = property26.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField28 = property26.getField();
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = dateTimeField28.getType();
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime32 = localDateTime30.minusMillis((int) (byte) 1);
        java.lang.String str33 = localDateTime32.toString();
        org.joda.time.LocalDateTime localDateTime35 = localDateTime32.minusMonths((int) 'a');
        org.joda.time.LocalDateTime localDateTime37 = localDateTime35.minusMinutes(22);
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime();
        boolean boolean40 = localDateTime38.isBefore((org.joda.time.ReadablePartial) localDateTime39);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime39.plusSeconds((int) (byte) 100);
        boolean boolean43 = localDateTime37.isBefore((org.joda.time.ReadablePartial) localDateTime39);
        int int44 = localDateTime39.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime46 = localDateTime39.minusMinutes((-35274908));
        int int47 = localDateTime39.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime48 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime49 = new org.joda.time.LocalDateTime();
        boolean boolean50 = localDateTime48.isBefore((org.joda.time.ReadablePartial) localDateTime49);
        org.joda.time.LocalDateTime localDateTime52 = localDateTime49.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property53 = localDateTime49.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime54 = property53.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField55 = property53.getField();
        int int56 = property53.getMaximumValueOverall();
        org.joda.time.LocalDateTime localDateTime58 = property53.addToCopy(0);
        org.joda.time.LocalDateTime localDateTime60 = property53.addToCopy(1);
        org.joda.time.LocalDateTime localDateTime62 = property53.addToCopy((long) (byte) 1);
        org.joda.time.LocalDateTime localDateTime64 = property53.addWrapFieldToCopy(112);
        java.util.Locale locale65 = java.util.Locale.JAPAN;
        java.lang.String str66 = locale65.getVariant();
        java.lang.String str67 = locale65.getDisplayVariant();
        java.lang.String str68 = property53.getAsShortText(locale65);
        java.lang.String str69 = dateTimeField28.getAsShortText((org.joda.time.ReadablePartial) localDateTime39, locale65);
        java.lang.String str70 = dateTimeZone1.getShortName((long) (-589), locale65);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.117" + "'", str4, "+00:00:00.117");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 874L + "'", long6 == 874L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 117 + "'", int8 == 117);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+00:00:00.117" + "'", str14, "+00:00:00.117");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 202200L + "'", long17 == 202200L);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 35296406L + "'", long19 == 35296406L);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertNotNull(localDateTime32);
// flaky:         org.junit.Assert.assertEquals("'" + str33 + "' != '" + "2022-02-11T09:54:14.119" + "'", str33, "2022-02-11T09:54:14.119");
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int44 + "' != '" + 9 + "'", int44 == 9);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2022 + "'", int47 == 2022);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 31 + "'", int56 == 31);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "11" + "'", str68, "11");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "11" + "'", str69, "11");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "+00:00:00.117" + "'", str70, "+00:00:00.117");
    }

    @Test
    public void test08311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08311");
        long long2 = org.joda.time.field.FieldUtils.safeAdd(525723L, 20708L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 546431L + "'", long2 == 546431L);
    }

    @Test
    public void test08312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08312");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 83);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusSeconds(83);
        int int4 = localDateTime3.getYear();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.minus(readableDuration5);
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime();
        boolean boolean9 = localDateTime7.isBefore((org.joda.time.ReadablePartial) localDateTime8);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime8.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property12 = localDateTime8.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime13 = property12.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField14 = property12.getField();
        long long17 = dateTimeField14.addWrapField((long) 6, (int) (byte) 0);
        java.lang.String str19 = dateTimeField14.getAsShortText((long) (byte) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = dateTimeField14.getType();
        java.util.Locale locale22 = java.util.Locale.FRENCH;
        java.util.Set<java.lang.String> strSet23 = locale22.getUnicodeLocaleAttributes();
        java.lang.String str24 = locale22.getVariant();
        java.util.Set<java.lang.String> strSet25 = locale22.getUnicodeLocaleKeys();
        java.lang.String str26 = dateTimeField14.getAsShortText((long) (short) -1, locale22);
        int int29 = dateTimeField14.getDifference((long) 4, (long) 35293104);
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime();
        boolean boolean32 = localDateTime30.isBefore((org.joda.time.ReadablePartial) localDateTime31);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime31.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property35 = localDateTime31.dayOfMonth();
        java.util.Locale locale36 = java.util.Locale.FRENCH;
        java.util.Set<java.lang.String> strSet37 = locale36.getUnicodeLocaleAttributes();
        java.lang.String str38 = locale36.getVariant();
        java.lang.String str39 = property35.getAsText(locale36);
        org.joda.time.ReadableInstant readableInstant40 = null;
        long long41 = property35.getDifferenceAsLong(readableInstant40);
        org.joda.time.LocalDateTime localDateTime42 = property35.roundCeilingCopy();
        org.joda.time.LocalDateTime localDateTime44 = localDateTime42.plusMonths((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime46 = localDateTime42.minusDays(715);
        int int47 = dateTimeField14.getMinimumValue((org.joda.time.ReadablePartial) localDateTime42);
        int int50 = dateTimeField14.getDifference(44358531417L, 1644572879323L);
        long long52 = dateTimeField14.roundFloor((long) 832);
        org.joda.time.DateTimeFieldType dateTimeFieldType53 = dateTimeField14.getType();
        boolean boolean54 = localDateTime3.isSupported(dateTimeFieldType53);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1969 + "'", int4 == 1969);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 6L + "'", long17 == 6L);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "1" + "'", str19, "1");
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(strSet25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "31" + "'", str26, "31");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "11" + "'", str39, "11");
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-18520) + "'", int50 == (-18520));
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertNotNull(dateTimeFieldType53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
    }

    @Test
    public void test08313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08313");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property5 = localDateTime1.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime6 = property5.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField7 = property5.getField();
        long long9 = dateTimeField7.remainder((-1L));
        org.joda.time.DurationField durationField10 = dateTimeField7.getRangeDurationField();
        boolean boolean12 = dateTimeField7.isLeap((long) 86399999);
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime();
        int int14 = localDateTime13.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime13.minusMonths((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.minusMonths((int) (byte) 0);
        int int19 = localDateTime16.getWeekyear();
        org.joda.time.LocalDateTime.Property property20 = localDateTime16.dayOfYear();
        org.joda.time.LocalDateTime localDateTime21 = property20.getLocalDateTime();
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.LocalDateTime localDateTime24 = localDateTime21.withDurationAdded(readableDuration22, (int) (short) 10);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.withMillisOfSecond(1);
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime();
        boolean boolean29 = localDateTime27.isBefore((org.joda.time.ReadablePartial) localDateTime28);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime28.plusSeconds((int) (byte) 100);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter32 = null;
        java.lang.String str33 = localDateTime28.toString(dateTimeFormatter32);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        org.joda.time.LocalDateTime.Property property35 = localDateTime28.property(dateTimeFieldType34);
        org.joda.time.LocalDateTime localDateTime36 = property35.roundHalfFloorCopy();
        org.joda.time.LocalDateTime.Property property37 = localDateTime36.era();
        int[] intArray38 = localDateTime36.getValues();
        int int39 = dateTimeField7.getMaximumValue((org.joda.time.ReadablePartial) localDateTime24, intArray38);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime24.plusWeeks(35355298);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 86399999L + "'", long9 == 86399999L);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 22 + "'", int14 == 22);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2022 + "'", int19 == 2022);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(localDateTime31);
// flaky:         org.junit.Assert.assertEquals("'" + str33 + "' != '" + "2022-02-11T09:54:14.246" + "'", str33, "2022-02-11T09:54:14.246");
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[2022, 2, 11, 36000000]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 28 + "'", int39 == 28);
        org.junit.Assert.assertNotNull(localDateTime41);
    }

    @Test
    public void test08314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08314");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property5 = localDateTime1.dayOfMonth();
        int int6 = property5.getMinimumValue();
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime((long) 83);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minusSeconds(83);
        int int11 = localDateTime10.getYear();
        org.joda.time.LocalDateTime.Property property12 = localDateTime10.secondOfMinute();
        int int13 = property5.compareTo((org.joda.time.ReadablePartial) localDateTime10);
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime();
        boolean boolean16 = localDateTime14.isBefore((org.joda.time.ReadablePartial) localDateTime15);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime15.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property19 = localDateTime15.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime20 = property19.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField21 = property19.getField();
        long long23 = dateTimeField21.remainder((-1L));
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = dateTimeField21.getType();
        long long27 = dateTimeField21.getDifferenceAsLong(52L, (long) 10);
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.minusMillis((int) (byte) 1);
        java.lang.String str31 = localDateTime30.toString();
        org.joda.time.LocalDateTime localDateTime33 = localDateTime30.minusMonths((int) 'a');
        org.joda.time.LocalDateTime localDateTime35 = localDateTime33.minusMinutes(22);
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime38 = localDateTime36.minusMillis((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime38.plusDays(0);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime40.plusMillis(22);
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        int int44 = localDateTime42.get(dateTimeFieldType43);
        org.joda.time.LocalDateTime.Property property45 = localDateTime33.property(dateTimeFieldType43);
        java.util.Locale.Builder builder47 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder48 = builder47.clearExtensions();
        org.joda.time.LocalDateTime localDateTime49 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime50 = new org.joda.time.LocalDateTime();
        boolean boolean51 = localDateTime49.isBefore((org.joda.time.ReadablePartial) localDateTime50);
        org.joda.time.LocalDateTime localDateTime53 = localDateTime50.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property54 = localDateTime50.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime55 = property54.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField56 = property54.getField();
        int int57 = dateTimeField56.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime58 = new org.joda.time.LocalDateTime();
        int int59 = localDateTime58.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime61 = localDateTime58.minusMonths((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime63 = localDateTime61.minusMonths((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime65 = localDateTime63.plusWeeks(22);
        java.util.Locale locale67 = java.util.Locale.JAPANESE;
        java.lang.String str68 = dateTimeField56.getAsShortText((org.joda.time.ReadablePartial) localDateTime65, 22, locale67);
        java.util.Locale.Builder builder69 = builder48.setLocale(locale67);
        java.util.Locale locale70 = builder48.build();
        java.lang.String str71 = dateTimeField21.getAsText((org.joda.time.ReadablePartial) localDateTime33, 0, locale70);
        java.lang.String str72 = locale70.getISO3Country();
        int int73 = property5.getMaximumTextLength(locale70);
        org.joda.time.LocalDateTime localDateTime74 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime75 = new org.joda.time.LocalDateTime();
        boolean boolean76 = localDateTime74.isBefore((org.joda.time.ReadablePartial) localDateTime75);
        org.joda.time.LocalDateTime localDateTime78 = localDateTime75.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property79 = localDateTime75.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime80 = property79.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField81 = property79.getField();
        org.joda.time.LocalDateTime localDateTime82 = property79.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime84 = localDateTime82.plusWeeks(49);
        org.joda.time.LocalDateTime localDateTime86 = localDateTime82.withMinuteOfHour(10);
        org.joda.time.DateTimeFieldType dateTimeFieldType87 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.Chronology chronology88 = null;
        boolean boolean89 = dateTimeFieldType87.isSupported(chronology88);
        java.lang.String str90 = dateTimeFieldType87.getName();
        org.joda.time.DurationFieldType durationFieldType91 = dateTimeFieldType87.getDurationType();
        boolean boolean92 = localDateTime86.isSupported(durationFieldType91);
        org.joda.time.ReadablePeriod readablePeriod93 = null;
        org.joda.time.LocalDateTime localDateTime95 = localDateTime86.withPeriodAdded(readablePeriod93, 715);
        org.joda.time.LocalDateTime localDateTime97 = localDateTime86.withYearOfEra(2033);
        int int98 = property5.compareTo((org.joda.time.ReadablePartial) localDateTime97);
        int int99 = localDateTime97.getEra();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1969 + "'", int11 == 1969);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 86399999L + "'", long23 == 86399999L);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertNotNull(localDateTime30);
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "2022-02-11T09:54:14.274" + "'", str31, "2022-02-11T09:54:14.274");
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(dateTimeFieldType43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 6 + "'", int44 == 6);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 31 + "'", int57 == 31);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 22 + "'", int59 == 22);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "22" + "'", str68, "22");
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "0" + "'", str71, "0");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 2 + "'", int73 == 2);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(localDateTime78);
        org.junit.Assert.assertNotNull(property79);
        org.junit.Assert.assertNotNull(localDateTime80);
        org.junit.Assert.assertNotNull(dateTimeField81);
        org.junit.Assert.assertNotNull(localDateTime82);
        org.junit.Assert.assertNotNull(localDateTime84);
        org.junit.Assert.assertNotNull(localDateTime86);
        org.junit.Assert.assertNotNull(dateTimeFieldType87);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "dayOfYear" + "'", str90, "dayOfYear");
        org.junit.Assert.assertNotNull(durationFieldType91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertNotNull(localDateTime95);
        org.junit.Assert.assertNotNull(localDateTime97);
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + 0 + "'", int98 == 0);
        org.junit.Assert.assertTrue("'" + int99 + "' != '" + 1 + "'", int99 == 1);
    }

    @Test
    public void test08315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08315");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.field.FieldUtils.verifyValueBounds("2022-02-11T09:48:27.808", (-849), 284, 665);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -849 for 2022-02-11T09:48:27.808 must be in the range [284,665]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08316");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property5 = localDateTime1.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime6 = property5.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField7 = property5.getField();
        int int10 = dateTimeField7.getDifference(1L, 86399999L);
        org.joda.time.DurationField durationField11 = dateTimeField7.getLeapDurationField();
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime();
        boolean boolean14 = localDateTime12.isBefore((org.joda.time.ReadablePartial) localDateTime13);
        org.joda.time.LocalDateTime.Property property15 = localDateTime12.dayOfMonth();
        org.joda.time.LocalDateTime.Property property16 = localDateTime12.weekyear();
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.LocalDateTime localDateTime19 = localDateTime12.withPeriodAdded(readablePeriod17, (-100));
        int int20 = dateTimeField7.getMinimumValue((org.joda.time.ReadablePartial) localDateTime19);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime19.withCenturyOfEra((int) 'u');
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.plus(readableDuration23);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNull(durationField11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
    }

    @Test
    public void test08317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08317");
        org.joda.time.tz.Provider provider0 = org.joda.time.DateTimeZone.getProvider();
        org.joda.time.DateTimeZone.setProvider(provider0);
        org.joda.time.DateTimeZone dateTimeZone3 = provider0.getZone("2022-02-11T09:48:22.713");
        org.joda.time.DateTimeZone.setProvider(provider0);
        java.util.Set<java.lang.String> strSet5 = provider0.getAvailableIDs();
        org.joda.time.DateTimeZone.setProvider(provider0);
        org.joda.time.DateTimeZone dateTimeZone8 = provider0.getZone("2022-02-16T06:51:47.984");
        org.junit.Assert.assertNotNull(provider0);
        org.junit.Assert.assertNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertNull(dateTimeZone8);
    }

    @Test
    public void test08318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08318");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.minusMillis((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.plusDays(0);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.plusMillis((int) '#');
        int int7 = localDateTime4.getDayOfYear();
        org.joda.time.LocalDateTime.Property property8 = localDateTime4.secondOfMinute();
        org.joda.time.DurationField durationField9 = property8.getLeapDurationField();
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 42 + "'", int7 == 42);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNull(durationField9);
    }

    @Test
    public void test08319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08319");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(24689861L, dateTimeZone1);
    }

    @Test
    public void test08320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08320");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("2022-02-11T09:47:59.995", strMap1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=2022-02-11t09:47:59.995");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08321");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property5 = localDateTime1.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime6 = property5.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField7 = property5.getField();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = dateTimeField7.getType();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.minusMillis((int) (byte) 1);
        java.lang.String str12 = localDateTime11.toString();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime11.minusMonths((int) 'a');
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minusMinutes(22);
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime();
        boolean boolean19 = localDateTime17.isBefore((org.joda.time.ReadablePartial) localDateTime18);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime18.plusSeconds((int) (byte) 100);
        boolean boolean22 = localDateTime16.isBefore((org.joda.time.ReadablePartial) localDateTime18);
        int int23 = localDateTime18.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime18.minusMinutes((-35274908));
        int int26 = localDateTime18.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime();
        boolean boolean29 = localDateTime27.isBefore((org.joda.time.ReadablePartial) localDateTime28);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime28.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property32 = localDateTime28.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime33 = property32.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField34 = property32.getField();
        int int35 = property32.getMaximumValueOverall();
        org.joda.time.LocalDateTime localDateTime37 = property32.addToCopy(0);
        org.joda.time.LocalDateTime localDateTime39 = property32.addToCopy(1);
        org.joda.time.LocalDateTime localDateTime41 = property32.addToCopy((long) (byte) 1);
        org.joda.time.LocalDateTime localDateTime43 = property32.addWrapFieldToCopy(112);
        java.util.Locale locale44 = java.util.Locale.JAPAN;
        java.lang.String str45 = locale44.getVariant();
        java.lang.String str46 = locale44.getDisplayVariant();
        java.lang.String str47 = property32.getAsShortText(locale44);
        java.lang.String str48 = dateTimeField7.getAsShortText((org.joda.time.ReadablePartial) localDateTime18, locale44);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime50 = localDateTime18.withYearOfCentury(648);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 648 for yearOfCentury must be in the range [0,99]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(localDateTime11);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "2022-02-11T09:54:14.578" + "'", str12, "2022-02-11T09:54:14.578");
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int23 + "' != '" + 9 + "'", int23 == 9);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2022 + "'", int26 == 2022);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 31 + "'", int35 == 31);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "11" + "'", str47, "11");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "11" + "'", str48, "11");
    }

    @Test
    public void test08322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08322");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) 'x');
        java.lang.String str3 = dateTimeZone1.getNameKey(58L);
        boolean boolean4 = dateTimeZone1.isFixed();
        long long6 = dateTimeZone1.nextTransition(1814400058L);
        int int8 = dateTimeZone1.getStandardOffset(61441L);
        int int10 = dateTimeZone1.getOffset(771L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1814400058L + "'", long6 == 1814400058L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 120 + "'", int8 == 120);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 120 + "'", int10 == 120);
    }

    @Test
    public void test08323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08323");
        int int1 = org.joda.time.field.FieldUtils.safeNegate(78584223);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + (-78584223) + "'", int1 == (-78584223));
    }

    @Test
    public void test08324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08324");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property5 = localDateTime1.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime6 = property5.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField7 = property5.getField();
        java.util.Locale locale8 = java.util.Locale.JAPAN;
        java.util.Locale locale9 = java.util.Locale.FRENCH;
        java.lang.String str10 = locale8.getDisplayCountry(locale9);
        int int11 = property5.getMaximumTextLength(locale9);
        java.lang.String str13 = locale9.getExtension('u');
        java.util.Set<java.lang.String> strSet14 = locale9.getUnicodeLocaleKeys();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean16 = strSet14.add("2022-02-11T09:50:24.384");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Japon" + "'", str10, "Japon");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(strSet14);
    }

    @Test
    public void test08325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08325");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.minusMillis((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.plusDays(0);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.plusMillis((int) '#');
        org.joda.time.LocalDateTime.Property property7 = localDateTime4.yearOfEra();
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime();
        boolean boolean10 = localDateTime8.isBefore((org.joda.time.ReadablePartial) localDateTime9);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime9.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property13 = localDateTime9.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime14 = property13.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField15 = property13.getField();
        org.joda.time.LocalDateTime localDateTime16 = property13.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime();
        boolean boolean19 = localDateTime17.isBefore((org.joda.time.ReadablePartial) localDateTime18);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime18.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property22 = localDateTime18.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime23 = property22.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField24 = property22.getField();
        int int25 = property22.getMaximumValueOverall();
        org.joda.time.LocalDateTime localDateTime27 = property22.addToCopy(0);
        org.joda.time.LocalDateTime localDateTime29 = property22.addToCopy(1);
        org.joda.time.LocalDateTime localDateTime31 = property22.addToCopy((long) (byte) 1);
        org.joda.time.LocalDateTime localDateTime32 = property22.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime localDateTime33 = localDateTime16.withFields((org.joda.time.ReadablePartial) localDateTime32);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime33.minusDays(31);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime33.withYear(31);
        int int38 = localDateTime4.compareTo((org.joda.time.ReadablePartial) localDateTime33);
        org.joda.time.LocalDateTime.Property property39 = localDateTime33.monthOfYear();
        int int40 = property39.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime41 = property39.roundHalfCeilingCopy();
        java.util.Locale locale42 = null;
        int int43 = property39.getMaximumTextLength(locale42);
        java.lang.String str44 = property39.getName();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime46 = property39.setCopy("2022-02-11T09:53:38.552");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2022-02-11T09:53:38.552\" for monthOfYear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 31 + "'", int25 == 31);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 9 + "'", int43 == 9);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "monthOfYear" + "'", str44, "monthOfYear");
    }

    @Test
    public void test08326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08326");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffsetFromLocal((long) (-1));
        java.util.TimeZone timeZone4 = dateTimeZone1.toTimeZone();
        long long6 = dateTimeZone1.convertUTCToLocal((long) 2);
        int int8 = dateTimeZone1.getOffset((long) 78586381);
        java.util.TimeZone timeZone9 = dateTimeZone1.toTimeZone();
        java.lang.String str11 = dateTimeZone1.getNameKey(855360000000L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 117 + "'", int3 == 117);
        org.junit.Assert.assertNotNull(timeZone4);
        org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 119L + "'", long6 == 119L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 117 + "'", int8 == 117);
        org.junit.Assert.assertNotNull(timeZone9);
        org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNull(str11);
    }

    @Test
    public void test08327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08327");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Locale[] localeArray3 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList4 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList4, localeArray3);
        java.util.Locale locale6 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList4);
        java.util.Locale.LanguageRange[] languageRangeArray7 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList8 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList8, languageRangeArray7);
        java.util.Locale[] localeArray10 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList11 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList11, localeArray10);
        java.util.Locale locale13 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList8, (java.util.Collection<java.util.Locale>) localeList11);
        java.util.Locale.FilteringMode filteringMode14 = null;
        java.util.List<java.util.Locale> localeList15 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList11, filteringMode14);
        java.util.Locale locale16 = java.util.Locale.FRENCH;
        java.util.Set<java.lang.String> strSet17 = locale16.getUnicodeLocaleAttributes();
        java.lang.Object[] objArray18 = strSet17.toArray();
        java.util.Locale.FilteringMode filteringMode19 = java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList20 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet17, filteringMode19);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.getDefault();
        int int23 = dateTimeZone21.getStandardOffset((long) (-100));
        java.util.TimeZone timeZone24 = dateTimeZone21.toTimeZone();
        int int25 = timeZone24.getRawOffset();
        timeZone24.setRawOffset(50);
        java.lang.String str28 = timeZone24.getID();
        boolean boolean29 = strSet17.equals((java.lang.Object) timeZone24);
        timeZone24.setID("2022-02-11T09:47:57.489");
        timeZone24.setID("2022-02-11T09:48:09.505");
        java.util.TimeZone timeZone35 = java.util.TimeZone.getTimeZone("2022-02-11T09:47:49.888");
        timeZone35.setRawOffset(874);
        int int39 = timeZone35.getOffset(278L);
        boolean boolean40 = timeZone35.observesDaylightTime();
        boolean boolean41 = timeZone24.hasSameRules(timeZone35);
        timeZone35.setRawOffset(676);
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localeArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(locale6);
        org.junit.Assert.assertNotNull(languageRangeArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(localeArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(locale13);
        org.junit.Assert.assertNotNull(localeList15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet17);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[]");
        org.junit.Assert.assertTrue("'" + filteringMode19 + "' != '" + java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES + "'", filteringMode19.equals(java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 117 + "'", int23 == 117);
        org.junit.Assert.assertNotNull(timeZone24);
        org.junit.Assert.assertEquals(timeZone24.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 117 + "'", int25 == 117);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "+00:00:00.117" + "'", str28, "+00:00:00.117");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(timeZone35);
        org.junit.Assert.assertEquals(timeZone35.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 874 + "'", int39 == 874);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test08328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08328");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property5 = localDateTime1.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime6 = property5.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField7 = property5.getField();
        long long9 = dateTimeField7.remainder((-1L));
        java.util.Locale locale11 = java.util.Locale.UK;
        java.lang.String str12 = dateTimeField7.getAsShortText((long) 22, locale11);
        int int13 = dateTimeField7.getMinimumValue();
        java.util.Locale locale16 = new java.util.Locale("fra", "");
        java.util.Set<java.lang.String> strSet17 = locale16.getUnicodeLocaleAttributes();
        int int18 = dateTimeField7.getMaximumShortTextLength(locale16);
        java.util.Locale locale20 = java.util.Locale.forLanguageTag("");
        int int21 = dateTimeField7.getMaximumShortTextLength(locale20);
        java.lang.String str22 = locale20.getDisplayLanguage();
        java.lang.String str23 = locale20.getDisplayCountry();
        java.lang.String str24 = locale20.getScript();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 86399999L + "'", long9 == 86399999L);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "1" + "'", str12, "1");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertEquals(locale16.toString(), "fra");
        org.junit.Assert.assertNotNull(strSet17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
    }

    @Test
    public void test08329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08329");
        java.util.Locale locale2 = new java.util.Locale("2022-02-16T06:54:02.597", "\u671d\u9c9c\u6587");
// flaky:         org.junit.Assert.assertEquals(locale2.toString(), "\u671d\u9c9c\u6587");
    }

    @Test
    public void test08330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08330");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property5 = localDateTime1.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime6 = property5.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField7 = property5.getField();
        int int8 = dateTimeField7.getMaximumValue();
        int int10 = dateTimeField7.getLeapAmount((long) (-10773475));
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.getDefault();
        int int13 = dateTimeZone11.getStandardOffset((long) (-100));
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime(dateTimeZone11);
        int[] intArray15 = localDateTime14.getValues();
        org.joda.time.LocalDateTime.Property property16 = localDateTime14.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime17 = property16.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime();
        boolean boolean22 = localDateTime20.isBefore((org.joda.time.ReadablePartial) localDateTime21);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime21.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property25 = localDateTime21.dayOfMonth();
        boolean boolean26 = property25.isLeap();
        org.joda.time.LocalDateTime localDateTime27 = property25.roundCeilingCopy();
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.minusMillis((int) (byte) 1);
        java.lang.String str31 = localDateTime30.toString();
        org.joda.time.DateTime dateTime32 = localDateTime30.toDateTime();
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime35 = localDateTime33.minusMillis((int) (byte) 1);
        java.lang.String str36 = localDateTime35.toString();
        org.joda.time.DateTime dateTime37 = localDateTime35.toDateTime();
        boolean boolean38 = dateTime32.isEqual((org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.Chronology chronology39 = dateTime37.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = org.joda.time.DateTimeFieldType.dayOfYear();
        int int41 = dateTime37.get(dateTimeFieldType40);
        int int42 = property25.compareTo((org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.DateTimeField dateTimeField43 = property25.getField();
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime();
        boolean boolean46 = localDateTime44.isBefore((org.joda.time.ReadablePartial) localDateTime45);
        org.joda.time.LocalDateTime localDateTime48 = localDateTime45.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime50 = localDateTime45.plusMinutes((int) '#');
        org.joda.time.LocalDateTime localDateTime52 = localDateTime45.withEra((int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone53);
        java.util.Locale locale56 = java.util.Locale.CHINESE;
        java.lang.String str57 = dateTimeZone53.getName((long) (short) 0, locale56);
        org.joda.time.LocalDateTime localDateTime58 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime60 = localDateTime58.minusMillis((int) (byte) 1);
        java.lang.String str61 = localDateTime60.toString();
        org.joda.time.DateTime dateTime62 = localDateTime60.toDateTime();
        org.joda.time.LocalDateTime localDateTime63 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime65 = localDateTime63.minusMillis((int) (byte) 1);
        java.lang.String str66 = localDateTime65.toString();
        org.joda.time.DateTime dateTime67 = localDateTime65.toDateTime();
        boolean boolean68 = dateTime62.isEqual((org.joda.time.ReadableInstant) dateTime67);
        int int69 = dateTimeZone53.getOffset((org.joda.time.ReadableInstant) dateTime62);
        org.joda.time.DateTimeFieldType dateTimeFieldType70 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str71 = dateTimeFieldType70.toString();
        java.lang.String str72 = dateTimeFieldType70.toString();
        boolean boolean73 = dateTime62.isSupported(dateTimeFieldType70);
        org.joda.time.Chronology chronology74 = dateTime62.getChronology();
        org.joda.time.Chronology chronology75 = dateTime62.getChronology();
        org.joda.time.LocalDateTime localDateTime76 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime45, chronology75);
        org.joda.time.LocalDateTime localDateTime78 = localDateTime76.plusYears((-222));
        org.joda.time.LocalDateTime localDateTime79 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime80 = new org.joda.time.LocalDateTime();
        boolean boolean81 = localDateTime79.isBefore((org.joda.time.ReadablePartial) localDateTime80);
        int[] intArray82 = localDateTime80.getValues();
        org.joda.time.LocalDateTime localDateTime84 = localDateTime80.plusYears((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime85 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime86 = new org.joda.time.LocalDateTime();
        boolean boolean87 = localDateTime85.isBefore((org.joda.time.ReadablePartial) localDateTime86);
        int[] intArray88 = localDateTime86.getValues();
        org.joda.time.LocalDateTime localDateTime89 = localDateTime80.withFields((org.joda.time.ReadablePartial) localDateTime86);
        org.joda.time.LocalDateTime localDateTime91 = localDateTime89.minusMillis((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime93 = localDateTime91.minusSeconds((int) '#');
        int[] intArray94 = localDateTime91.getValues();
        int int95 = dateTimeField43.getMaximumValue((org.joda.time.ReadablePartial) localDateTime78, intArray94);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray97 = dateTimeField7.add((org.joda.time.ReadablePartial) localDateTime17, 86400640, intArray94, 39);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 86400640");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 31 + "'", int8 == 31);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 117 + "'", int13 == 117);
        org.junit.Assert.assertNotNull(intArray15);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[2022, 2, 11, 35654714]");
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime30);
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "2022-02-11T09:54:14.713" + "'", str31, "2022-02-11T09:54:14.713");
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(localDateTime35);
// flaky:         org.junit.Assert.assertEquals("'" + str36 + "' != '" + "2022-02-11T09:54:14.713" + "'", str36, "2022-02-11T09:54:14.713");
        org.junit.Assert.assertNotNull(dateTime37);
// flaky:         org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTimeFieldType40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 42 + "'", int41 == 42);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "+00:00:00.117" + "'", str57, "+00:00:00.117");
        org.junit.Assert.assertNotNull(localDateTime60);
// flaky:         org.junit.Assert.assertEquals("'" + str61 + "' != '" + "2022-02-11T09:54:14.713" + "'", str61, "2022-02-11T09:54:14.713");
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(localDateTime65);
// flaky:         org.junit.Assert.assertEquals("'" + str66 + "' != '" + "2022-02-11T09:54:14.713" + "'", str66, "2022-02-11T09:54:14.713");
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 117 + "'", int69 == 117);
        org.junit.Assert.assertNotNull(dateTimeFieldType70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "weekyear" + "'", str71, "weekyear");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "weekyear" + "'", str72, "weekyear");
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(chronology74);
        org.junit.Assert.assertNotNull(chronology75);
        org.junit.Assert.assertNotNull(localDateTime78);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(intArray82);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[2022, 2, 11, 35654714]");
        org.junit.Assert.assertNotNull(localDateTime84);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(intArray88);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray88), "[2022, 2, 11, 35654714]");
        org.junit.Assert.assertNotNull(localDateTime89);
        org.junit.Assert.assertNotNull(localDateTime91);
        org.junit.Assert.assertNotNull(localDateTime93);
        org.junit.Assert.assertNotNull(intArray94);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray94), "[2022, 2, 11, 35654614]");
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 28 + "'", int95 == 28);
    }

    @Test
    public void test08331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08331");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 83);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusSeconds(83);
        org.joda.time.LocalDateTime.Property property4 = localDateTime1.dayOfWeek();
        int int5 = property4.get();
        org.joda.time.DurationField durationField6 = property4.getRangeDurationField();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 4 + "'", int5 == 4);
        org.junit.Assert.assertNotNull(durationField6);
    }

    @Test
    public void test08332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08332");
        java.util.Locale locale3 = new java.util.Locale("2022-02-11T09:49:04.687", "2022-02-11T09:48:08.848", "2022-02-11T09:48:45.414");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str5 = locale3.getExtension('#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed extension key: #");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertEquals(locale3.toString(), "2022-02-11t09:49:04.687_2022-02-11T09:48:08.848_2022-02-11T09:48:45.414");
    }

    @Test
    public void test08333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08333");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds((int) (byte) 100);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = null;
        java.lang.String str6 = localDateTime1.toString(dateTimeFormatter5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        org.joda.time.LocalDateTime.Property property8 = localDateTime1.property(dateTimeFieldType7);
        org.joda.time.LocalDateTime localDateTime9 = property8.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime10 = property8.withMinimumValue();
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime();
        boolean boolean13 = localDateTime11.isBefore((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime12.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property16 = localDateTime12.dayOfMonth();
        int int17 = property8.compareTo((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.LocalDateTime localDateTime19 = property8.addToCopy(35275799L);
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime();
        int int21 = localDateTime20.getYearOfCentury();
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str23 = dateTimeFieldType22.toString();
        int int24 = localDateTime20.indexOf(dateTimeFieldType22);
        int int25 = property8.compareTo((org.joda.time.ReadablePartial) localDateTime20);
        int int26 = property8.getMaximumValueOverall();
        org.joda.time.DurationField durationField27 = property8.getRangeDurationField();
        int int28 = property8.getMinimumValue();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "2022-02-11T09:54:14.786" + "'", str6, "2022-02-11T09:54:14.786");
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 22 + "'", int21 == 22);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "weekyear" + "'", str23, "weekyear");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 12 + "'", int26 == 12);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
    }

    @Test
    public void test08334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08334");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(632);
        java.util.Locale locale6 = new java.util.Locale("2734", "2022-02-11T09:48:16.569", "2022-02-11T09:48:59.198");
        java.lang.String str7 = dateTimeZone1.getShortName(24687469L, locale6);
        java.lang.String str8 = locale6.getLanguage();
        java.util.Locale.setDefault(locale6);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals(locale6.toString(), "2734_2022-02-11T09:48:16.569_2022-02-11T09:48:59.198");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:00:00.632" + "'", str7, "+00:00:00.632");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "2734" + "'", str8, "2734");
    }

    @Test
    public void test08335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08335");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        int[] intArray3 = localDateTime1.getValues();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.plusYears((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        boolean boolean8 = localDateTime6.isBefore((org.joda.time.ReadablePartial) localDateTime7);
        int[] intArray9 = localDateTime7.getValues();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime1.withFields((org.joda.time.ReadablePartial) localDateTime7);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusMillis((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.minusSeconds((int) '#');
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.withWeekOfWeekyear(50);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime14.withMinuteOfHour((int) (byte) 0);
        java.util.Locale.LanguageRange[] languageRangeArray19 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList20 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList20, languageRangeArray19);
        java.util.Locale[] localeArray22 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList23 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList23, localeArray22);
        java.util.Locale locale25 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList20, (java.util.Collection<java.util.Locale>) localeList23);
        boolean boolean26 = localDateTime14.equals((java.lang.Object) languageRangeList20);
        java.lang.String[] strArray31 = new java.lang.String[] { "fra", "", "+00:00", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet32 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet32, strArray31);
        java.lang.Object[] objArray34 = strSet32.toArray();
        boolean boolean35 = strSet32.isEmpty();
        java.util.Locale.LanguageRange[] languageRangeArray36 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList37 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList37, languageRangeArray36);
        java.util.Locale[] localeArray39 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList40 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList40, localeArray39);
        java.util.Locale locale42 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList37, (java.util.Collection<java.util.Locale>) localeList40);
        boolean boolean43 = strSet32.removeAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList37);
        java.util.Locale.LanguageRange[] languageRangeArray44 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList45 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList45, languageRangeArray44);
        java.util.Locale[] localeArray47 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList48 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList48, localeArray47);
        java.util.Locale locale50 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList45, (java.util.Collection<java.util.Locale>) localeList48);
        java.util.Locale.FilteringMode filteringMode51 = java.util.Locale.FilteringMode.EXTENDED_FILTERING;
        java.util.List<java.util.Locale> localeList52 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList37, (java.util.Collection<java.util.Locale>) localeList48, filteringMode51);
        java.util.Locale locale53 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList20, (java.util.Collection<java.util.Locale>) localeList52);
        java.util.Collection<java.util.Locale> localeCollection54 = null;
        java.util.List<java.util.Locale> localeList55 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList20, localeCollection54);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap56 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList57 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList20, strMap56);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(intArray3);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[2022, 2, 11, 35654810]");
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(intArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[2022, 2, 11, 35654810]");
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(languageRangeArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(localeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(locale25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(strArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray34), "[fra, , +00:00, hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray34), "[fra, , +00:00, hi!]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(languageRangeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(localeArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNull(locale42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(languageRangeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(localeArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(locale50);
        org.junit.Assert.assertTrue("'" + filteringMode51 + "' != '" + java.util.Locale.FilteringMode.EXTENDED_FILTERING + "'", filteringMode51.equals(java.util.Locale.FilteringMode.EXTENDED_FILTERING));
        org.junit.Assert.assertNotNull(localeList52);
        org.junit.Assert.assertNull(locale53);
        org.junit.Assert.assertNotNull(localeList55);
        org.junit.Assert.assertNotNull(languageRangeList57);
    }

    @Test
    public void test08336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08336");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        int int1 = localDateTime0.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime3 = localDateTime0.minusMonths((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.minusMonths((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.plusWeeks(22);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.millisOfSecond();
        java.lang.String str9 = property8.getAsText();
        org.joda.time.LocalDateTime localDateTime10 = property8.roundHalfFloorCopy();
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.year();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 22 + "'", int1 == 22);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "849" + "'", str9, "849");
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
    }

    @Test
    public void test08337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08337");
        java.util.Locale locale2 = new java.util.Locale("fra", "");
        java.util.Set<java.lang.String> strSet3 = locale2.getUnicodeLocaleAttributes();
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        boolean boolean6 = localDateTime4.isBefore((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property9 = localDateTime5.dayOfMonth();
        org.joda.time.DurationField durationField10 = property9.getRangeDurationField();
        boolean boolean11 = strSet3.contains((java.lang.Object) durationField10);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime();
        boolean boolean14 = localDateTime12.isBefore((org.joda.time.ReadablePartial) localDateTime13);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime13.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property17 = localDateTime13.dayOfMonth();
        boolean boolean18 = property17.isLeap();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone19);
        java.util.Locale locale22 = java.util.Locale.CHINESE;
        java.lang.String str23 = dateTimeZone19.getName((long) (short) 0, locale22);
        java.lang.String str24 = property17.getAsShortText(locale22);
        boolean boolean25 = strSet3.equals((java.lang.Object) locale22);
        java.util.Locale.LanguageRange[] languageRangeArray26 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList27 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList27, languageRangeArray26);
        java.util.Locale[] localeArray29 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList30 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList30, localeArray29);
        java.util.Locale locale32 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList27, (java.util.Collection<java.util.Locale>) localeList30);
        boolean boolean33 = strSet3.removeAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList27);
        java.util.stream.Stream<java.util.Locale.LanguageRange> languageRangeStream34 = languageRangeList27.stream();
        java.util.stream.Stream<java.util.Locale.LanguageRange> languageRangeStream35 = languageRangeList27.parallelStream();
        java.util.Locale locale38 = new java.util.Locale("fra", "");
        java.util.Set<java.lang.String> strSet39 = locale38.getUnicodeLocaleAttributes();
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime();
        boolean boolean42 = localDateTime40.isBefore((org.joda.time.ReadablePartial) localDateTime41);
        org.joda.time.LocalDateTime localDateTime44 = localDateTime41.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property45 = localDateTime41.dayOfMonth();
        org.joda.time.DurationField durationField46 = property45.getRangeDurationField();
        boolean boolean47 = strSet39.contains((java.lang.Object) durationField46);
        org.joda.time.LocalDateTime localDateTime48 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime49 = new org.joda.time.LocalDateTime();
        boolean boolean50 = localDateTime48.isBefore((org.joda.time.ReadablePartial) localDateTime49);
        org.joda.time.LocalDateTime localDateTime52 = localDateTime49.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property53 = localDateTime49.dayOfMonth();
        boolean boolean54 = property53.isLeap();
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone55);
        java.util.Locale locale58 = java.util.Locale.CHINESE;
        java.lang.String str59 = dateTimeZone55.getName((long) (short) 0, locale58);
        java.lang.String str60 = property53.getAsShortText(locale58);
        boolean boolean61 = strSet39.equals((java.lang.Object) locale58);
        java.util.Locale.LanguageRange[] languageRangeArray62 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList63 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList63, languageRangeArray62);
        java.util.Locale[] localeArray65 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList66 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean67 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList66, localeArray65);
        java.util.Locale locale68 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList63, (java.util.Collection<java.util.Locale>) localeList66);
        boolean boolean69 = strSet39.removeAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList63);
        java.util.Locale.LanguageRange[] languageRangeArray70 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList71 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean72 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList71, languageRangeArray70);
        java.util.Locale[] localeArray73 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList74 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean75 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList74, localeArray73);
        java.util.Locale locale76 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList71, (java.util.Collection<java.util.Locale>) localeList74);
        java.util.Locale.LanguageRange[] languageRangeArray77 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList78 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean79 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList78, languageRangeArray77);
        java.util.Locale[] localeArray80 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList81 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean82 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList81, localeArray80);
        java.util.Locale locale83 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList78, (java.util.Collection<java.util.Locale>) localeList81);
        java.util.Locale.FilteringMode filteringMode84 = null;
        java.util.List<java.util.Locale> localeList85 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList71, (java.util.Collection<java.util.Locale>) localeList81, filteringMode84);
        java.util.Locale locale86 = java.util.Locale.FRENCH;
        java.util.Set<java.lang.String> strSet87 = locale86.getUnicodeLocaleAttributes();
        java.lang.Object[] objArray88 = strSet87.toArray();
        java.util.Locale.FilteringMode filteringMode89 = java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList90 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList71, (java.util.Collection<java.lang.String>) strSet87, filteringMode89);
        strSet87.clear();
        java.util.Locale.FilteringMode filteringMode92 = null;
        java.util.List<java.lang.String> strList93 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList63, (java.util.Collection<java.lang.String>) strSet87, filteringMode92);
        java.lang.String str94 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList27, (java.util.Collection<java.lang.String>) strSet87);
        boolean boolean96 = strSet87.contains((java.lang.Object) 24710821L);
        org.junit.Assert.assertEquals(locale2.toString(), "fra");
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+00:00:00.117" + "'", str23, "+00:00:00.117");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "11" + "'", str24, "11");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(languageRangeArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(localeArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(locale32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(languageRangeStream34);
        org.junit.Assert.assertNotNull(languageRangeStream35);
        org.junit.Assert.assertEquals(locale38.toString(), "fra");
        org.junit.Assert.assertNotNull(strSet39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(durationField46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "+00:00:00.117" + "'", str59, "+00:00:00.117");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "11" + "'", str60, "11");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(languageRangeArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(localeArray65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNull(locale68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(languageRangeArray70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(localeArray73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNull(locale76);
        org.junit.Assert.assertNotNull(languageRangeArray77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(localeArray80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNull(locale83);
        org.junit.Assert.assertNotNull(localeList85);
        org.junit.Assert.assertNotNull(locale86);
        org.junit.Assert.assertEquals(locale86.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet87);
        org.junit.Assert.assertNotNull(objArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray88), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray88), "[]");
        org.junit.Assert.assertTrue("'" + filteringMode89 + "' != '" + java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES + "'", filteringMode89.equals(java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList90);
        org.junit.Assert.assertNotNull(strList93);
        org.junit.Assert.assertNull(str94);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test08338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08338");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.minusMillis((int) (byte) 1);
        java.lang.String str3 = localDateTime2.toString();
        org.joda.time.DateTime dateTime4 = localDateTime2.toDateTime();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusMillis((int) (byte) 1);
        java.lang.String str8 = localDateTime7.toString();
        org.joda.time.DateTime dateTime9 = localDateTime7.toDateTime();
        boolean boolean10 = dateTime4.isEqual((org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minusMillis((int) (byte) 1);
        java.lang.String str14 = localDateTime13.toString();
        org.joda.time.DateTime dateTime15 = localDateTime13.toDateTime();
        boolean boolean16 = dateTime4.isEqual((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((long) (-1));
        org.joda.time.LocalDateTime.Property property19 = localDateTime18.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime20 = property19.roundHalfEvenCopy();
        boolean boolean21 = dateTime15.equals((java.lang.Object) property19);
        java.util.Locale locale23 = new java.util.Locale("2022-02-11T09:48:44.037");
        java.util.Locale locale24 = locale23.stripExtensions();
        int int25 = property19.getMaximumTextLength(locale23);
        java.lang.String str26 = locale23.toLanguageTag();
        org.junit.Assert.assertNotNull(localDateTime2);
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "2022-02-11T09:54:14.931" + "'", str3, "2022-02-11T09:54:14.931");
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localDateTime7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "2022-02-11T09:54:14.931" + "'", str8, "2022-02-11T09:54:14.931");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(localDateTime13);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "2022-02-11T09:54:14.931" + "'", str14, "2022-02-11T09:54:14.931");
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals(locale23.toString(), "2022-02-11t09:48:44.037");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "2022-02-11t09:48:44.037");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "und" + "'", str26, "und");
    }

    @Test
    public void test08339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08339");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 83);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusSeconds(83);
        int int4 = localDateTime3.getYear();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.minus(readableDuration5);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime8 = property7.roundFloorCopy();
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minus(readableDuration9);
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime8.withFields((org.joda.time.ReadablePartial) localDateTime11);
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.LocalDateTime localDateTime14 = localDateTime8.plus(readablePeriod13);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minusMillis(520);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1969 + "'", int4 == 1969);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
    }

    @Test
    public void test08340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08340");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.minusMillis((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.plusDays(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.withField(dateTimeFieldType5, 0);
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime();
        boolean boolean10 = localDateTime8.isBefore((org.joda.time.ReadablePartial) localDateTime9);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime9.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime9.plusMinutes((int) '#');
        org.joda.time.LocalDateTime localDateTime16 = localDateTime9.minusMinutes((int) (short) 1);
        boolean boolean17 = localDateTime7.isAfter((org.joda.time.ReadablePartial) localDateTime16);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime7.withYearOfCentury(59);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime7.plusMonths((-86400000));
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime23 = localDateTime21.withDayOfWeek(277563);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 277563 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
    }

    @Test
    public void test08341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08341");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = builder0.build();
        java.util.Locale.Builder builder2 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder2.clear();
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        boolean boolean6 = localDateTime4.isBefore((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property9 = localDateTime5.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime10 = property9.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField11 = property9.getField();
        int int12 = dateTimeField11.getMaximumValue();
        long long14 = dateTimeField11.roundHalfCeiling((long) (-222));
        long long16 = dateTimeField11.roundHalfFloor((long) (-40));
        org.joda.time.DurationField durationField17 = dateTimeField11.getRangeDurationField();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime(chronology19);
        org.joda.time.LocalDateTime.Property property21 = localDateTime20.yearOfEra();
        org.joda.time.tz.NameProvider nameProvider22 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime();
        boolean boolean25 = localDateTime23.isBefore((org.joda.time.ReadablePartial) localDateTime24);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime24.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property28 = localDateTime24.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime29 = property28.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField30 = property28.getField();
        int int31 = dateTimeField30.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime();
        int int33 = localDateTime32.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime35 = localDateTime32.minusMonths((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime35.minusMonths((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime37.plusWeeks(22);
        java.util.Locale locale41 = java.util.Locale.JAPANESE;
        java.lang.String str42 = dateTimeField30.getAsShortText((org.joda.time.ReadablePartial) localDateTime39, 22, locale41);
        java.lang.String str45 = nameProvider22.getName(locale41, "11", "Etc/UTC");
        boolean boolean46 = locale41.hasExtensions();
        int int47 = property21.getMaximumShortTextLength(locale41);
        java.lang.String str48 = dateTimeField11.getAsShortText((long) 'u', locale41);
        java.util.Locale.Builder builder49 = builder2.setLocale(locale41);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder52 = builder49.setUnicodeLocaleKeyword("2022-02-11T09:49:42.870", "2022-02-20T01:46:03.800");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale keyword key: 2022-02-11T09:49:42.870 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 31 + "'", int12 == 31);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(nameProvider22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 31 + "'", int31 == 31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 22 + "'", int33 == 22);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "22" + "'", str42, "22");
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 9 + "'", int47 == 9);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "1" + "'", str48, "1");
        org.junit.Assert.assertNotNull(builder49);
    }

    @Test
    public void test08342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08342");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.minusMillis((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.plusDays(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.withField(dateTimeFieldType5, 0);
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime();
        boolean boolean10 = localDateTime8.isBefore((org.joda.time.ReadablePartial) localDateTime9);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime9.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime9.plusMinutes((int) '#');
        org.joda.time.LocalDateTime localDateTime16 = localDateTime9.minusMinutes((int) (short) 1);
        boolean boolean17 = localDateTime7.isAfter((org.joda.time.ReadablePartial) localDateTime16);
        org.joda.time.LocalDateTime.Property property18 = localDateTime7.secondOfMinute();
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = property18.getFieldType();
        org.joda.time.LocalDateTime localDateTime20 = property18.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime();
        boolean boolean23 = localDateTime21.isBefore((org.joda.time.ReadablePartial) localDateTime22);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime22.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime22.plusMinutes((int) '#');
        org.joda.time.LocalDateTime localDateTime29 = localDateTime22.minusMinutes((int) (short) 1);
        org.joda.time.ReadableDuration readableDuration30 = null;
        org.joda.time.LocalDateTime localDateTime32 = localDateTime22.withDurationAdded(readableDuration30, (int) (short) 100);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter33 = null;
        java.lang.String str34 = localDateTime22.toString(dateTimeFormatter33);
        boolean boolean35 = localDateTime20.isAfter((org.joda.time.ReadablePartial) localDateTime22);
        int int36 = localDateTime20.getMinuteOfHour();
        org.joda.time.LocalDateTime localDateTime38 = localDateTime20.plusWeeks(49);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime38.withYearOfCentury(10);
        org.joda.time.LocalDateTime.Property property41 = localDateTime40.era();
        org.joda.time.DurationField durationField42 = property41.getDurationField();
        org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime();
        boolean boolean45 = localDateTime43.isBefore((org.joda.time.ReadablePartial) localDateTime44);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime44.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property48 = localDateTime44.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime49 = property48.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField50 = property48.getField();
        long long53 = dateTimeField50.addWrapField((long) 6, (int) (byte) 0);
        java.lang.String str55 = dateTimeField50.getAsShortText((long) (byte) 0);
        java.lang.String str57 = dateTimeField50.getAsShortText((-116L));
        org.joda.time.DateTimeFieldType dateTimeFieldType58 = dateTimeField50.getType();
        org.joda.time.LocalDateTime localDateTime59 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime60 = new org.joda.time.LocalDateTime();
        boolean boolean61 = localDateTime59.isBefore((org.joda.time.ReadablePartial) localDateTime60);
        org.joda.time.LocalDateTime localDateTime63 = localDateTime60.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property64 = localDateTime60.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime65 = property64.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField66 = property64.getField();
        org.joda.time.DateTimeZone dateTimeZone67 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone67);
        java.util.Locale locale70 = java.util.Locale.CHINESE;
        java.lang.String str71 = dateTimeZone67.getName((long) (short) 0, locale70);
        int int72 = dateTimeField66.getMaximumShortTextLength(locale70);
        java.lang.String str73 = dateTimeField66.getName();
        long long75 = dateTimeField66.roundHalfEven((long) (byte) 10);
        org.joda.time.LocalDateTime localDateTime76 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime77 = new org.joda.time.LocalDateTime();
        boolean boolean78 = localDateTime76.isBefore((org.joda.time.ReadablePartial) localDateTime77);
        org.joda.time.LocalDateTime localDateTime80 = localDateTime77.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime82 = localDateTime77.plusMinutes((int) '#');
        org.joda.time.LocalDateTime localDateTime84 = localDateTime77.minusMinutes((int) (short) 1);
        org.joda.time.ReadableDuration readableDuration85 = null;
        org.joda.time.LocalDateTime localDateTime87 = localDateTime77.withDurationAdded(readableDuration85, (int) (short) 100);
        java.util.Locale locale88 = java.util.Locale.JAPANESE;
        java.lang.String str89 = dateTimeField66.getAsText((org.joda.time.ReadablePartial) localDateTime87, locale88);
        java.util.Set<java.lang.Character> charSet90 = locale88.getExtensionKeys();
        int int91 = dateTimeField50.getMaximumShortTextLength(locale88);
        int int92 = property41.getMaximumShortTextLength(locale88);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime32);
// flaky:         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "2022-02-11T09:54:14.989" + "'", str34, "2022-02-11T09:54:14.989");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int36 + "' != '" + 54 + "'", int36 == 54);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 6L + "'", long53 == 6L);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "1" + "'", str55, "1");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "31" + "'", str57, "31");
        org.junit.Assert.assertNotNull(dateTimeFieldType58);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(dateTimeZone67);
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "+00:00:00.117" + "'", str71, "+00:00:00.117");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 2 + "'", int72 == 2);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "dayOfMonth" + "'", str73, "dayOfMonth");
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 0L + "'", long75 == 0L);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(localDateTime80);
        org.junit.Assert.assertNotNull(localDateTime82);
        org.junit.Assert.assertNotNull(localDateTime84);
        org.junit.Assert.assertNotNull(localDateTime87);
        org.junit.Assert.assertNotNull(locale88);
        org.junit.Assert.assertEquals(locale88.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "11" + "'", str89, "11");
        org.junit.Assert.assertNotNull(charSet90);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 2 + "'", int91 == 2);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 3 + "'", int92 == 3);
    }

    @Test
    public void test08343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08343");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.getDefault();
        java.util.Locale locale4 = null;
        java.lang.String str5 = dateTimeZone2.getName((long) (short) 10, locale4);
        long long7 = dateTimeZone1.getMillisKeepLocal(dateTimeZone2, (long) 874);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        long long10 = dateTimeZone2.getMillisKeepLocal(dateTimeZone8, (long) '4');
        int int12 = dateTimeZone2.getOffsetFromLocal((long) 83);
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime(0L, dateTimeZone2);
        int int15 = dateTimeZone2.getOffset(1644572877407L);
        java.lang.String str17 = dateTimeZone2.getNameKey((long) 381);
        long long19 = dateTimeZone2.previousTransition(1644573224054L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00:00.117" + "'", str5, "+00:00:00.117");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 874L + "'", long7 == 874L);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 52L + "'", long10 == 52L);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 117 + "'", int12 == 117);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 117 + "'", int15 == 117);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 1644573224054L + "'", long19 == 1644573224054L);
    }

    @Test
    public void test08344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08344");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property5 = localDateTime1.dayOfMonth();
        java.util.Locale locale6 = java.util.Locale.ROOT;
        java.lang.String str7 = locale6.toLanguageTag();
        java.lang.String str8 = property5.getAsText(locale6);
        java.lang.String str9 = locale6.toString();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "und" + "'", str7, "und");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "11" + "'", str8, "11");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
    }

    @Test
    public void test08345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08345");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("2022-02-11T09:48:33.420");
        java.lang.String str2 = locale1.getDisplayScript();
        java.util.Locale locale5 = new java.util.Locale("fra", "");
        java.util.Set<java.lang.String> strSet6 = locale5.getUnicodeLocaleAttributes();
        java.lang.String str7 = locale5.getScript();
        java.util.Set<java.lang.Character> charSet8 = locale5.getExtensionKeys();
        java.util.Set<java.lang.String> strSet9 = locale5.getUnicodeLocaleKeys();
        java.util.Set<java.lang.String> strSet10 = locale5.getUnicodeLocaleAttributes();
        java.lang.String str11 = locale1.getDisplayScript(locale5);
        java.lang.String str12 = locale5.getDisplayVariant();
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals(locale5.toString(), "fra");
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(charSet8);
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
    }

    @Test
    public void test08346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08346");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone0);
        java.util.Locale locale3 = java.util.Locale.CHINESE;
        java.lang.String str4 = dateTimeZone0.getName((long) (short) 0, locale3);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusMillis((int) (byte) 1);
        java.lang.String str8 = localDateTime7.toString();
        org.joda.time.DateTime dateTime9 = localDateTime7.toDateTime();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusMillis((int) (byte) 1);
        java.lang.String str13 = localDateTime12.toString();
        org.joda.time.DateTime dateTime14 = localDateTime12.toDateTime();
        boolean boolean15 = dateTime9.isEqual((org.joda.time.ReadableInstant) dateTime14);
        int int16 = dateTimeZone0.getOffset((org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str18 = dateTimeFieldType17.toString();
        java.lang.String str19 = dateTimeFieldType17.toString();
        boolean boolean20 = dateTime9.isSupported(dateTimeFieldType17);
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime();
        boolean boolean23 = localDateTime21.isBefore((org.joda.time.ReadablePartial) localDateTime22);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime22.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property26 = localDateTime22.dayOfMonth();
        boolean boolean27 = property26.isLeap();
        org.joda.time.LocalDateTime localDateTime28 = property26.roundCeilingCopy();
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.minusMillis((int) (byte) 1);
        java.lang.String str32 = localDateTime31.toString();
        org.joda.time.DateTime dateTime33 = localDateTime31.toDateTime();
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime36 = localDateTime34.minusMillis((int) (byte) 1);
        java.lang.String str37 = localDateTime36.toString();
        org.joda.time.DateTime dateTime38 = localDateTime36.toDateTime();
        boolean boolean39 = dateTime33.isEqual((org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.Chronology chronology40 = dateTime38.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = org.joda.time.DateTimeFieldType.dayOfYear();
        int int42 = dateTime38.get(dateTimeFieldType41);
        int int43 = property26.compareTo((org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.DateTimeField dateTimeField44 = property26.getField();
        org.joda.time.DateTimeField dateTimeField45 = property26.getField();
        boolean boolean46 = dateTime9.equals((java.lang.Object) dateTimeField45);
        org.joda.time.Instant instant47 = dateTime9.toInstant();
        org.joda.time.LocalDateTime localDateTime48 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime49 = new org.joda.time.LocalDateTime();
        boolean boolean50 = localDateTime48.isBefore((org.joda.time.ReadablePartial) localDateTime49);
        org.joda.time.LocalDateTime localDateTime52 = localDateTime49.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime54 = localDateTime49.plusMinutes((int) '#');
        org.joda.time.LocalDateTime localDateTime56 = localDateTime49.minusMinutes((int) (short) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType57 = org.joda.time.DateTimeFieldType.monthOfYear();
        boolean boolean58 = localDateTime56.isSupported(dateTimeFieldType57);
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.DateTimeField dateTimeField60 = dateTimeFieldType57.getField(chronology59);
        boolean boolean61 = instant47.isSupported(dateTimeFieldType57);
        java.lang.String str62 = instant47.toString();
        org.joda.time.ReadableInstant readableInstant63 = null;
        boolean boolean64 = instant47.isAfter(readableInstant63);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.117" + "'", str4, "+00:00:00.117");
        org.junit.Assert.assertNotNull(localDateTime7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "2022-02-11T09:54:15.127" + "'", str8, "2022-02-11T09:54:15.127");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(localDateTime12);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "2022-02-11T09:54:15.127" + "'", str13, "2022-02-11T09:54:15.127");
        org.junit.Assert.assertNotNull(dateTime14);
// flaky:         org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 117 + "'", int16 == 117);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "weekyear" + "'", str18, "weekyear");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "weekyear" + "'", str19, "weekyear");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime31);
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "2022-02-11T09:54:15.127" + "'", str32, "2022-02-11T09:54:15.127");
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(localDateTime36);
// flaky:         org.junit.Assert.assertEquals("'" + str37 + "' != '" + "2022-02-11T09:54:15.127" + "'", str37, "2022-02-11T09:54:15.127");
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 42 + "'", int42 == 42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(instant47);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(dateTimeFieldType57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str62 + "' != '" + "2022-02-11T09:54:15.010Z" + "'", str62, "2022-02-11T09:54:15.010Z");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
    }

    @Test
    public void test08347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08347");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("2022-02-11T09:47:58.120");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        java.time.ZoneId zoneId4 = timeZone1.toZoneId();
        java.util.TimeZone timeZone5 = java.util.TimeZone.getTimeZone(zoneId4);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime(chronology6);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.yearOfEra();
        org.joda.time.tz.NameProvider nameProvider9 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime();
        boolean boolean12 = localDateTime10.isBefore((org.joda.time.ReadablePartial) localDateTime11);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime11.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property15 = localDateTime11.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime16 = property15.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField17 = property15.getField();
        int int18 = dateTimeField17.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime();
        int int20 = localDateTime19.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime19.minusMonths((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.minusMonths((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.plusWeeks(22);
        java.util.Locale locale28 = java.util.Locale.JAPANESE;
        java.lang.String str29 = dateTimeField17.getAsShortText((org.joda.time.ReadablePartial) localDateTime26, 22, locale28);
        java.lang.String str32 = nameProvider9.getName(locale28, "11", "Etc/UTC");
        boolean boolean33 = locale28.hasExtensions();
        int int34 = property8.getMaximumShortTextLength(locale28);
        int int35 = property8.getMinimumValue();
        long long36 = property8.remainder();
        int int37 = property8.get();
        java.util.Locale locale40 = new java.util.Locale("fra", "");
        java.util.Set<java.lang.String> strSet41 = locale40.getUnicodeLocaleAttributes();
        java.lang.String str42 = locale40.getScript();
        java.util.Set<java.lang.Character> charSet43 = locale40.getExtensionKeys();
        java.util.Set<java.lang.String> strSet44 = locale40.getUnicodeLocaleKeys();
        int int45 = property8.getMaximumShortTextLength(locale40);
        java.lang.String str46 = locale40.getDisplayName();
        java.lang.String str47 = timeZone5.getDisplayName(locale40);
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(zoneId4);
        org.junit.Assert.assertNotNull(timeZone5);
        org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(nameProvider9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 31 + "'", int18 == 31);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 22 + "'", int20 == 22);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "22" + "'", str29, "22");
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 9 + "'", int34 == 9);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + long36 + "' != '" + 3578055167L + "'", long36 == 3578055167L);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2022 + "'", int37 == 2022);
        org.junit.Assert.assertEquals(locale40.toString(), "fra");
        org.junit.Assert.assertNotNull(strSet41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(charSet43);
        org.junit.Assert.assertNotNull(strSet44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 9 + "'", int45 == 9);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "fra" + "'", str46, "fra");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Greenwich Mean Time" + "'", str47, "Greenwich Mean Time");
    }

    @Test
    public void test08348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08348");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property5 = localDateTime1.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime6 = property5.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField7 = property5.getField();
        long long10 = dateTimeField7.addWrapField((long) 6, (int) (byte) 0);
        java.lang.String str12 = dateTimeField7.getAsShortText((long) (byte) 10);
        boolean boolean13 = dateTimeField7.isSupported();
        int int14 = dateTimeField7.getMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = dateTimeField7.getType();
        int int17 = dateTimeField7.getLeapAmount(42L);
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime();
        boolean boolean20 = localDateTime18.isBefore((org.joda.time.ReadablePartial) localDateTime19);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime19.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property23 = localDateTime19.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime24 = property23.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField25 = property23.getField();
        long long28 = dateTimeField25.addWrapField((long) 6, (int) (byte) 0);
        java.lang.String str30 = dateTimeField25.getAsShortText((long) (byte) 0);
        java.lang.String str32 = dateTimeField25.getAsShortText((-116L));
        long long34 = dateTimeField25.roundCeiling((long) 11);
        java.util.Locale locale39 = new java.util.Locale("11", "weekyear", "fra");
        java.lang.String str40 = locale39.getDisplayName();
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime();
        boolean boolean43 = localDateTime41.isBefore((org.joda.time.ReadablePartial) localDateTime42);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime42.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property46 = localDateTime42.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime47 = property46.withMinimumValue();
        java.util.Locale locale48 = java.util.Locale.UK;
        java.lang.String str49 = property46.getAsShortText(locale48);
        java.lang.String str50 = locale39.getDisplayScript(locale48);
        java.lang.String str51 = dateTimeField25.getAsShortText((long) 715, locale48);
        int int52 = dateTimeField7.getMaximumShortTextLength(locale48);
        boolean boolean53 = dateTimeField7.isLenient();
        java.lang.String str54 = dateTimeField7.getName();
        long long56 = dateTimeField7.roundHalfCeiling((-3600205L));
        long long59 = dateTimeField7.getDifferenceAsLong((-19033L), 805L);
        org.joda.time.LocalDateTime localDateTime62 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime63 = new org.joda.time.LocalDateTime();
        boolean boolean64 = localDateTime62.isBefore((org.joda.time.ReadablePartial) localDateTime63);
        org.joda.time.LocalDateTime localDateTime66 = localDateTime63.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property67 = localDateTime63.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime68 = property67.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField69 = property67.getField();
        long long71 = dateTimeField69.remainder((-1L));
        java.util.Locale locale73 = java.util.Locale.UK;
        java.lang.String str74 = dateTimeField69.getAsShortText((long) 22, locale73);
        int int75 = dateTimeField69.getMinimumValue();
        java.util.Locale locale78 = new java.util.Locale("fra", "");
        java.util.Set<java.lang.String> strSet79 = locale78.getUnicodeLocaleAttributes();
        int int80 = dateTimeField69.getMaximumShortTextLength(locale78);
        java.util.Locale locale82 = java.util.Locale.forLanguageTag("");
        int int83 = dateTimeField69.getMaximumShortTextLength(locale82);
        java.lang.String str84 = locale82.getDisplayLanguage();
        java.util.Locale locale85 = locale82.stripExtensions();
        // The following exception was thrown during execution in test generation
        try {
            long long86 = dateTimeField7.set(24813897L, "2022-02-11T09:50:48.643", locale82);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2022-02-11T09:50:48.643\" for dayOfMonth is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 6L + "'", long10 == 6L);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "1" + "'", str12, "1");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 31 + "'", int14 == 31);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 6L + "'", long28 == 6L);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "1" + "'", str30, "1");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "31" + "'", str32, "31");
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 86400000L + "'", long34 == 86400000L);
        org.junit.Assert.assertEquals(locale39.toString(), "11_WEEKYEAR_fra");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "11 (WEEKYEAR,fra)" + "'", str40, "11 (WEEKYEAR,fra)");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "11" + "'", str49, "11");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "1" + "'", str51, "1");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2 + "'", int52 == 2);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "dayOfMonth" + "'", str54, "dayOfMonth");
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 0L + "'", long56 == 0L);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 0L + "'", long59 == 0L);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertNotNull(dateTimeField69);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 86399999L + "'", long71 == 86399999L);
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "1" + "'", str74, "1");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertEquals(locale78.toString(), "fra");
        org.junit.Assert.assertNotNull(strSet79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 2 + "'", int80 == 2);
        org.junit.Assert.assertNotNull(locale82);
        org.junit.Assert.assertEquals(locale82.toString(), "");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 2 + "'", int83 == 2);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "" + "'", str84, "");
        org.junit.Assert.assertNotNull(locale85);
        org.junit.Assert.assertEquals(locale85.toString(), "");
    }

    @Test
    public void test08349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08349");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        int int1 = localDateTime0.getYearOfCentury();
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str3 = dateTimeFieldType2.toString();
        int int4 = localDateTime0.indexOf(dateTimeFieldType2);
        org.joda.time.DateTime dateTime5 = localDateTime0.toDateTime();
        java.lang.String str7 = localDateTime0.toString("22");
        org.joda.time.LocalDateTime.Property property8 = localDateTime0.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime10 = property8.setCopy((int) '#');
        org.joda.time.LocalDateTime localDateTime12 = property8.setCopy(505);
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime();
        boolean boolean15 = localDateTime13.isBefore((org.joda.time.ReadablePartial) localDateTime14);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime14.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property18 = localDateTime14.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime19 = property18.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField20 = property18.getField();
        long long22 = dateTimeField20.remainder((-1L));
        java.util.Locale locale24 = java.util.Locale.UK;
        java.lang.String str25 = dateTimeField20.getAsShortText((long) 22, locale24);
        int int26 = dateTimeField20.getMinimumValue();
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime();
        boolean boolean29 = localDateTime27.isBefore((org.joda.time.ReadablePartial) localDateTime28);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime28.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime28.plusMinutes((int) '#');
        org.joda.time.LocalDateTime localDateTime35 = localDateTime28.minusMinutes((int) (short) 1);
        org.joda.time.LocalDateTime.Property property36 = localDateTime35.weekOfWeekyear();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime35, chronology37);
        java.util.Locale locale40 = new java.util.Locale("2022-02-11T09:47:50.218");
        java.lang.String str41 = dateTimeField20.getAsShortText((org.joda.time.ReadablePartial) localDateTime35, locale40);
        java.util.Locale locale42 = java.util.Locale.FRENCH;
        java.lang.String str43 = locale42.getDisplayName();
        int int44 = dateTimeField20.getMaximumShortTextLength(locale42);
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime46 = new org.joda.time.LocalDateTime();
        boolean boolean47 = localDateTime45.isBefore((org.joda.time.ReadablePartial) localDateTime46);
        org.joda.time.LocalDateTime localDateTime49 = localDateTime46.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property50 = localDateTime46.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime51 = property50.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField52 = property50.getField();
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone53);
        java.util.Locale locale56 = java.util.Locale.CHINESE;
        java.lang.String str57 = dateTimeZone53.getName((long) (short) 0, locale56);
        int int58 = dateTimeField52.getMaximumShortTextLength(locale56);
        int int59 = dateTimeField20.getMaximumShortTextLength(locale56);
        java.lang.String str60 = locale56.getDisplayCountry();
        java.lang.String str61 = locale56.getLanguage();
        java.lang.String str62 = property8.getAsText(locale56);
        java.lang.String str63 = locale56.getDisplayCountry();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 22 + "'", int1 == 22);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "weekyear" + "'", str3, "weekyear");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "22" + "'", str7, "22");
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 86399999L + "'", long22 == 86399999L);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "1" + "'", str25, "1");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertEquals(locale40.toString(), "2022-02-11t09:47:50.218");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "11" + "'", str41, "11");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "French" + "'", str43, "French");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2 + "'", int44 == 2);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "+00:00:00.117" + "'", str57, "+00:00:00.117");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 2 + "'", int58 == 2);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 2 + "'", int59 == 2);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "zh" + "'", str61, "zh");
// flaky:         org.junit.Assert.assertEquals("'" + str62 + "' != '" + "213" + "'", str62, "213");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
    }

    @Test
    public void test08350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08350");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusMonths(48);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.yearOfEra();
        org.joda.time.LocalDateTime localDateTime5 = property4.roundCeilingCopy();
        int int6 = property4.get();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1966 + "'", int6 == 1966);
    }

    @Test
    public void test08351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08351");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.minusMillis((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.plusDays(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.withField(dateTimeFieldType5, 0);
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime();
        boolean boolean10 = localDateTime8.isBefore((org.joda.time.ReadablePartial) localDateTime9);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime9.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime9.plusMinutes((int) '#');
        org.joda.time.LocalDateTime localDateTime16 = localDateTime9.minusMinutes((int) (short) 1);
        boolean boolean17 = localDateTime7.isAfter((org.joda.time.ReadablePartial) localDateTime16);
        org.joda.time.LocalDateTime.Property property18 = localDateTime7.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime();
        boolean boolean21 = localDateTime19.isBefore((org.joda.time.ReadablePartial) localDateTime20);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime20.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime20.plusMinutes((int) '#');
        org.joda.time.LocalDateTime localDateTime27 = localDateTime20.minusMinutes((int) (short) 1);
        org.joda.time.LocalDateTime.Property property28 = localDateTime27.weekOfWeekyear();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime27, chronology29);
        boolean boolean31 = localDateTime7.isEqual((org.joda.time.ReadablePartial) localDateTime27);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime27.minusSeconds(5);
        org.joda.time.LocalDateTime.Property property34 = localDateTime27.minuteOfHour();
        int int35 = localDateTime27.getDayOfYear();
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 42 + "'", int35 == 42);
    }

    @Test
    public void test08352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08352");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.minusMillis((int) (byte) 1);
        java.lang.String str3 = localDateTime2.toString();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.minusMonths((int) 'a');
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusMinutes(22);
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime();
        boolean boolean10 = localDateTime8.isBefore((org.joda.time.ReadablePartial) localDateTime9);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime9.plusSeconds((int) (byte) 100);
        boolean boolean13 = localDateTime7.isBefore((org.joda.time.ReadablePartial) localDateTime9);
        int int14 = localDateTime9.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime9.minusMinutes((-35274908));
        int int17 = localDateTime9.getYearOfEra();
        org.joda.time.LocalDateTime.Property property18 = localDateTime9.weekyear();
        org.joda.time.DurationField durationField19 = property18.getRangeDurationField();
        org.junit.Assert.assertNotNull(localDateTime2);
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "2022-02-11T09:54:15.268" + "'", str3, "2022-02-11T09:54:15.268");
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 9 + "'", int14 == 9);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2022 + "'", int17 == 2022);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNull(durationField19);
    }

    @Test
    public void test08353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08353");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 83);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusSeconds(83);
        int int4 = localDateTime3.getYear();
        org.joda.time.LocalDateTime.Property property5 = localDateTime3.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime7 = property5.setCopy(28);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.plusMonths((-2021));
        org.joda.time.LocalDateTime.Property property10 = localDateTime7.dayOfWeek();
        org.joda.time.Interval interval11 = property10.toInterval();
        int int12 = property10.getLeapAmount();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1969 + "'", int4 == 1969);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test08354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08354");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime();
        boolean boolean3 = localDateTime1.isBefore((org.joda.time.ReadablePartial) localDateTime2);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property6 = localDateTime2.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime7 = property6.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField8 = property6.getField();
        long long10 = dateTimeField8.remainder((-1L));
        java.util.Locale locale12 = java.util.Locale.UK;
        java.lang.String str13 = dateTimeField8.getAsShortText((long) 22, locale12);
        int int14 = dateTimeField8.getMinimumValue();
        java.util.Locale locale17 = new java.util.Locale("fra", "");
        java.util.Set<java.lang.String> strSet18 = locale17.getUnicodeLocaleAttributes();
        int int19 = dateTimeField8.getMaximumShortTextLength(locale17);
        java.util.Locale.setDefault(category0, locale17);
        java.lang.String str21 = locale17.toLanguageTag();
        java.util.Locale locale24 = new java.util.Locale("fra", "");
        java.util.Set<java.lang.String> strSet25 = locale24.getUnicodeLocaleAttributes();
        java.lang.String str26 = locale24.getScript();
        java.lang.String str27 = locale24.getDisplayCountry();
        java.util.Set<java.lang.String> strSet28 = locale24.getUnicodeLocaleKeys();
        java.util.Locale locale29 = java.util.Locale.ROOT;
        java.lang.String str30 = locale29.toLanguageTag();
        java.lang.String str31 = locale29.getISO3Language();
        java.lang.String str32 = locale24.getDisplayName(locale29);
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime();
        boolean boolean35 = localDateTime33.isBefore((org.joda.time.ReadablePartial) localDateTime34);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime34.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property38 = localDateTime34.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime39 = property38.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField40 = property38.getField();
        java.util.Locale locale41 = java.util.Locale.JAPAN;
        java.util.Locale locale42 = java.util.Locale.FRENCH;
        java.lang.String str43 = locale41.getDisplayCountry(locale42);
        int int44 = property38.getMaximumTextLength(locale42);
        java.lang.String str46 = locale42.getExtension('u');
        java.util.Locale locale47 = locale42.stripExtensions();
        java.lang.String str48 = locale47.getVariant();
        java.lang.String str49 = locale29.getDisplayLanguage(locale47);
        java.lang.String str50 = locale17.getDisplayName(locale29);
        java.lang.String str51 = locale29.getCountry();
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 86399999L + "'", long10 == 86399999L);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "1" + "'", str13, "1");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertEquals(locale17.toString(), "fra");
        org.junit.Assert.assertNotNull(strSet18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "fra" + "'", str21, "fra");
        org.junit.Assert.assertEquals(locale24.toString(), "fra");
        org.junit.Assert.assertNotNull(strSet25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(strSet28);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "und" + "'", str30, "und");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "fra" + "'", str32, "fra");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Japon" + "'", str43, "Japon");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2 + "'", int44 == 2);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "fra" + "'", str50, "fra");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
    }

    @Test
    public void test08355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08355");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        int[] intArray3 = localDateTime1.getValues();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.plusYears((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        boolean boolean8 = localDateTime6.isBefore((org.joda.time.ReadablePartial) localDateTime7);
        int[] intArray9 = localDateTime7.getValues();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime1.withFields((org.joda.time.ReadablePartial) localDateTime7);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusMillis((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.minusSeconds((int) '#');
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime();
        int int16 = localDateTime15.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime15.plusHours((-1));
        org.joda.time.LocalDateTime localDateTime20 = localDateTime15.minusHours((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime();
        boolean boolean23 = localDateTime21.isBefore((org.joda.time.ReadablePartial) localDateTime22);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime22.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property26 = localDateTime22.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime27 = property26.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField28 = property26.getField();
        long long30 = dateTimeField28.remainder((-1L));
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = dateTimeField28.getType();
        int int32 = localDateTime15.indexOf(dateTimeFieldType31);
        java.lang.String str33 = dateTimeFieldType31.toString();
        org.joda.time.LocalDateTime.Property property34 = localDateTime12.property(dateTimeFieldType31);
        org.joda.time.ReadablePeriod readablePeriod35 = null;
        org.joda.time.LocalDateTime localDateTime36 = localDateTime12.minus(readablePeriod35);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime12.withMillisOfSecond(762);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime40 = localDateTime38.minusYears(521734000);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -521731978 for year must be in the range [-292275054,292278993]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(intArray3);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[2022, 2, 11, 35655316]");
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(intArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[2022, 2, 11, 35655316]");
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 316 + "'", int16 == 316);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 86399999L + "'", long30 == 86399999L);
        org.junit.Assert.assertNotNull(dateTimeFieldType31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2 + "'", int32 == 2);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "dayOfMonth" + "'", str33, "dayOfMonth");
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(localDateTime38);
    }

    @Test
    public void test08356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08356");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder1.addUnicodeLocaleAttribute("Japon");
        java.util.Locale.Builder builder4 = builder1.clear();
        java.util.Locale.Builder builder5 = builder1.clear();
        java.util.Locale.Builder builder6 = builder1.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder8 = builder1.setVariant("2022-02-11T09:49:56.056");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed variant: 2022-02-11T09:49:56.056 [at index 5]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test08357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08357");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("2022-02-16T06:54:03.492", strMap1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=2022-02-16t06:54:03.492");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08358");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        int int1 = localDateTime0.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime3 = localDateTime0.plusHours((-1));
        int int4 = localDateTime3.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.minusWeeks(10);
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.withDurationAdded(readableDuration7, 845);
// flaky:         org.junit.Assert.assertTrue("'" + int1 + "' != '" + 340 + "'", int1 == 340);
        org.junit.Assert.assertNotNull(localDateTime3);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 15 + "'", int4 == 15);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime9);
    }

    @Test
    public void test08359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08359");
        // The following exception was thrown during execution in test generation
        try {
            int int1 = org.joda.time.field.FieldUtils.safeToInt(1644573224054L);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Value cannot fit in an int: 1644573224054");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08360");
        // The following exception was thrown during execution in test generation
        try {
            int int4 = org.joda.time.field.FieldUtils.getWrappedValue(244, 35405090, 700, (-635));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: MIN > MAX");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08361");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property5 = localDateTime1.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime6 = property5.withMinimumValue();
        org.joda.time.DurationField durationField7 = property5.getDurationField();
        java.util.Locale locale8 = java.util.Locale.CHINESE;
        java.util.Locale locale11 = new java.util.Locale("fra", "");
        java.util.Set<java.lang.String> strSet12 = locale11.getUnicodeLocaleAttributes();
        java.lang.String str13 = locale11.getScript();
        java.lang.String str14 = locale11.getCountry();
        java.lang.String str15 = locale8.getDisplayLanguage(locale11);
        java.lang.String str16 = locale8.getISO3Country();
        int int17 = property5.getMaximumShortTextLength(locale8);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh");
        org.junit.Assert.assertEquals(locale11.toString(), "fra");
        org.junit.Assert.assertNotNull(strSet12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Chinese" + "'", str15, "Chinese");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
    }

    @Test
    public void test08362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08362");
        java.lang.String[] strArray4 = new java.lang.String[] { "fra", "", "+00:00", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet5 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet5, strArray4);
        java.lang.Object[] objArray7 = strSet5.toArray();
        boolean boolean8 = strSet5.isEmpty();
        java.util.Locale.LanguageRange[] languageRangeArray9 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList10 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList10, languageRangeArray9);
        java.util.Locale[] localeArray12 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList13 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList13, localeArray12);
        java.util.Locale locale15 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList10, (java.util.Collection<java.util.Locale>) localeList13);
        boolean boolean16 = strSet5.retainAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList10);
        java.util.Iterator<java.lang.String> strItor17 = strSet5.iterator();
        java.util.Locale.Category category18 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale19 = java.util.Locale.getDefault(category18);
        java.util.Locale locale20 = java.util.Locale.getDefault(category18);
        java.util.Locale.Category category21 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale22 = java.util.Locale.getDefault(category21);
        java.util.Locale locale23 = java.util.Locale.getDefault(category21);
        java.util.Locale.Category category24 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale25 = java.util.Locale.getDefault(category24);
        java.util.Locale locale26 = java.util.Locale.getDefault(category24);
        java.util.Locale.Category[] categoryArray27 = new java.util.Locale.Category[] { category18, category21, category24 };
        java.util.Locale.Category[] categoryArray28 = strSet5.toArray(categoryArray27);
        java.lang.reflect.AnnotatedElement[] annotatedElementArray29 = new java.lang.reflect.AnnotatedElement[] {};
        java.lang.reflect.AnnotatedElement[] annotatedElementArray30 = new java.lang.reflect.AnnotatedElement[] {};
        java.lang.reflect.AnnotatedElement[] annotatedElementArray31 = new java.lang.reflect.AnnotatedElement[] {};
        java.lang.reflect.AnnotatedElement[][] annotatedElementArray32 = new java.lang.reflect.AnnotatedElement[][] { annotatedElementArray29, annotatedElementArray30, annotatedElementArray31 };
        java.lang.reflect.AnnotatedElement[][] annotatedElementArray33 = strSet5.toArray(annotatedElementArray32);
        int int34 = strSet5.size();
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[fra, , +00:00, hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[fra, , +00:00, hi!]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(languageRangeArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(localeArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(locale15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(strItor17);
        org.junit.Assert.assertTrue("'" + category18 + "' != '" + java.util.Locale.Category.FORMAT + "'", category18.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "2734_2022-02-11T09:48:16.569_2022-02-11T09:48:59.198");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "2734_2022-02-11T09:48:16.569_2022-02-11T09:48:59.198");
        org.junit.Assert.assertTrue("'" + category21 + "' != '" + java.util.Locale.Category.FORMAT + "'", category21.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "2734_2022-02-11T09:48:16.569_2022-02-11T09:48:59.198");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "2734_2022-02-11T09:48:16.569_2022-02-11T09:48:59.198");
        org.junit.Assert.assertTrue("'" + category24 + "' != '" + java.util.Locale.Category.FORMAT + "'", category24.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "2734_2022-02-11T09:48:16.569_2022-02-11T09:48:59.198");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "2734_2022-02-11T09:48:16.569_2022-02-11T09:48:59.198");
        org.junit.Assert.assertNotNull(categoryArray27);
        org.junit.Assert.assertNotNull(categoryArray28);
        org.junit.Assert.assertNotNull(annotatedElementArray29);
        org.junit.Assert.assertNotNull(annotatedElementArray30);
        org.junit.Assert.assertNotNull(annotatedElementArray31);
        org.junit.Assert.assertNotNull(annotatedElementArray32);
        org.junit.Assert.assertNotNull(annotatedElementArray33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
    }

    @Test
    public void test08363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08363");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds((int) (byte) 100);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = null;
        java.lang.String str6 = localDateTime1.toString(dateTimeFormatter5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        org.joda.time.LocalDateTime.Property property8 = localDateTime1.property(dateTimeFieldType7);
        org.joda.time.LocalDateTime localDateTime9 = property8.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime10 = property8.withMinimumValue();
        int int11 = localDateTime10.getCenturyOfEra();
        int int12 = localDateTime10.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime10.plusMinutes(35304112);
        org.joda.time.LocalDateTime.Property property15 = localDateTime14.year();
        org.joda.time.LocalDateTime localDateTime16 = property15.roundHalfCeilingCopy();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "2022-02-11T09:54:15.429" + "'", str6, "2022-02-11T09:54:15.429");
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 20 + "'", int11 == 20);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDateTime16);
    }

    @Test
    public void test08364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08364");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime(113911148, 35350786, 6408412, 14, 24703280, 35355298, 715);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 24703280 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08365");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale.Builder builder3 = builder1.addUnicodeLocaleAttribute("Japon");
        java.util.Locale.Builder builder4 = builder3.clearExtensions();
        java.util.Locale locale6 = java.util.Locale.forLanguageTag("2022-02-11T09:47:54.353");
        java.util.Locale.Builder builder7 = builder4.setLocale(locale6);
        java.util.Set<java.lang.String> strSet8 = locale6.getUnicodeLocaleKeys();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(strSet8);
    }

    @Test
    public void test08366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08366");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property5 = localDateTime1.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime6 = property5.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField7 = property5.getField();
        int int8 = property5.getMaximumValueOverall();
        org.joda.time.LocalDateTime localDateTime10 = property5.addToCopy(0);
        org.joda.time.LocalDateTime localDateTime12 = property5.addToCopy(1);
        org.joda.time.LocalDateTime localDateTime14 = property5.addToCopy((long) (byte) 1);
        org.joda.time.LocalDateTime localDateTime16 = property5.addWrapFieldToCopy(112);
        int int17 = property5.getLeapAmount();
        int int18 = property5.getMaximumValueOverall();
        org.joda.time.LocalDateTime localDateTime19 = property5.roundHalfCeilingCopy();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str21 = localDateTime19.toString("deu");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: u");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 31 + "'", int8 == 31);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 31 + "'", int18 == 31);
        org.junit.Assert.assertNotNull(localDateTime19);
    }

    @Test
    public void test08367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08367");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property5 = localDateTime1.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime6 = property5.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField7 = property5.getField();
        long long10 = dateTimeField7.addWrapField((long) 6, (int) (byte) 0);
        java.lang.String str12 = dateTimeField7.getAsShortText((long) (byte) 0);
        int int13 = dateTimeField7.getMaximumValue();
        long long15 = dateTimeField7.roundHalfFloor((long) (-120));
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime();
        boolean boolean18 = localDateTime16.isBefore((org.joda.time.ReadablePartial) localDateTime17);
        org.joda.time.LocalDateTime.Property property19 = localDateTime16.dayOfMonth();
        org.joda.time.LocalDateTime.Property property20 = localDateTime16.weekyear();
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.LocalDateTime localDateTime23 = localDateTime16.withPeriodAdded(readablePeriod21, (-100));
        org.joda.time.tz.NameProvider nameProvider24 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime();
        boolean boolean27 = localDateTime25.isBefore((org.joda.time.ReadablePartial) localDateTime26);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime26.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property30 = localDateTime26.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime31 = property30.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField32 = property30.getField();
        int int33 = dateTimeField32.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime();
        int int35 = localDateTime34.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime37 = localDateTime34.minusMonths((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime37.minusMonths((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime39.plusWeeks(22);
        java.util.Locale locale43 = java.util.Locale.JAPANESE;
        java.lang.String str44 = dateTimeField32.getAsShortText((org.joda.time.ReadablePartial) localDateTime41, 22, locale43);
        java.lang.String str47 = nameProvider24.getName(locale43, "11", "Etc/UTC");
        org.joda.time.DateTimeZone.setNameProvider(nameProvider24);
        java.util.Locale locale49 = java.util.Locale.FRENCH;
        java.util.Set<java.lang.String> strSet50 = locale49.getUnicodeLocaleAttributes();
        java.lang.String str51 = locale49.getVariant();
        java.lang.String str54 = nameProvider24.getShortName(locale49, "2022-02-11T09:48:02.913", "2022-02-11T09:48:00.361");
        java.lang.String str55 = dateTimeField7.getAsShortText((org.joda.time.ReadablePartial) localDateTime16, locale49);
        org.joda.time.LocalDateTime localDateTime56 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime57 = new org.joda.time.LocalDateTime();
        boolean boolean58 = localDateTime56.isBefore((org.joda.time.ReadablePartial) localDateTime57);
        int[] intArray59 = localDateTime57.getValues();
        org.joda.time.LocalDateTime localDateTime61 = localDateTime57.plusYears((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime62 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime63 = new org.joda.time.LocalDateTime();
        boolean boolean64 = localDateTime62.isBefore((org.joda.time.ReadablePartial) localDateTime63);
        int[] intArray65 = localDateTime63.getValues();
        org.joda.time.LocalDateTime localDateTime66 = localDateTime57.withFields((org.joda.time.ReadablePartial) localDateTime63);
        org.joda.time.LocalDateTime localDateTime68 = localDateTime66.minusMillis((int) (short) 100);
        int int69 = localDateTime66.getMillisOfSecond();
        int int70 = localDateTime66.size();
        java.util.Locale locale71 = null;
        java.lang.String str72 = dateTimeField7.getAsShortText((org.joda.time.ReadablePartial) localDateTime66, locale71);
        long long74 = dateTimeField7.roundHalfFloor(814255200L);
        boolean boolean76 = dateTimeField7.isLeap((long) 24811332);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 6L + "'", long10 == 6L);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "1" + "'", str12, "1");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 31 + "'", int13 == 31);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(nameProvider24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 31 + "'", int33 == 31);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 22 + "'", int35 == 22);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "22" + "'", str44, "22");
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "11" + "'", str55, "11");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(intArray59);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[2022, 2, 11, 35655489]");
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(intArray65);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[2022, 2, 11, 35655489]");
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertNotNull(localDateTime68);
// flaky:         org.junit.Assert.assertTrue("'" + int69 + "' != '" + 489 + "'", int69 == 489);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 4 + "'", int70 == 4);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "11" + "'", str72, "11");
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 777600000L + "'", long74 == 777600000L);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
    }

    @Test
    public void test08368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08368");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property5 = localDateTime1.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime6 = property5.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField7 = property5.getField();
        long long10 = dateTimeField7.addWrapField((long) 6, (int) (byte) 0);
        java.lang.String str12 = dateTimeField7.getAsShortText((long) (byte) 0);
        int int13 = dateTimeField7.getMaximumValue();
        long long15 = dateTimeField7.roundHalfFloor((long) (-120));
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime();
        boolean boolean18 = localDateTime16.isBefore((org.joda.time.ReadablePartial) localDateTime17);
        org.joda.time.LocalDateTime.Property property19 = localDateTime16.dayOfMonth();
        org.joda.time.LocalDateTime.Property property20 = localDateTime16.weekyear();
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.LocalDateTime localDateTime23 = localDateTime16.withPeriodAdded(readablePeriod21, (-100));
        org.joda.time.tz.NameProvider nameProvider24 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime();
        boolean boolean27 = localDateTime25.isBefore((org.joda.time.ReadablePartial) localDateTime26);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime26.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property30 = localDateTime26.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime31 = property30.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField32 = property30.getField();
        int int33 = dateTimeField32.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime();
        int int35 = localDateTime34.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime37 = localDateTime34.minusMonths((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime37.minusMonths((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime39.plusWeeks(22);
        java.util.Locale locale43 = java.util.Locale.JAPANESE;
        java.lang.String str44 = dateTimeField32.getAsShortText((org.joda.time.ReadablePartial) localDateTime41, 22, locale43);
        java.lang.String str47 = nameProvider24.getName(locale43, "11", "Etc/UTC");
        org.joda.time.DateTimeZone.setNameProvider(nameProvider24);
        java.util.Locale locale49 = java.util.Locale.FRENCH;
        java.util.Set<java.lang.String> strSet50 = locale49.getUnicodeLocaleAttributes();
        java.lang.String str51 = locale49.getVariant();
        java.lang.String str54 = nameProvider24.getShortName(locale49, "2022-02-11T09:48:02.913", "2022-02-11T09:48:00.361");
        java.lang.String str55 = dateTimeField7.getAsShortText((org.joda.time.ReadablePartial) localDateTime16, locale49);
        org.joda.time.LocalDateTime localDateTime56 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime57 = new org.joda.time.LocalDateTime();
        boolean boolean58 = localDateTime56.isBefore((org.joda.time.ReadablePartial) localDateTime57);
        int[] intArray59 = localDateTime57.getValues();
        org.joda.time.LocalDateTime localDateTime61 = localDateTime57.plusYears((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime62 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime63 = new org.joda.time.LocalDateTime();
        boolean boolean64 = localDateTime62.isBefore((org.joda.time.ReadablePartial) localDateTime63);
        int[] intArray65 = localDateTime63.getValues();
        org.joda.time.LocalDateTime localDateTime66 = localDateTime57.withFields((org.joda.time.ReadablePartial) localDateTime63);
        org.joda.time.LocalDateTime localDateTime68 = localDateTime66.minusMillis((int) (short) 100);
        int int69 = localDateTime66.getMillisOfSecond();
        org.joda.time.LocalDateTime.Property property70 = localDateTime66.minuteOfHour();
        org.joda.time.ReadablePeriod readablePeriod71 = null;
        org.joda.time.LocalDateTime localDateTime72 = localDateTime66.minus(readablePeriod71);
        int int73 = dateTimeField7.getMinimumValue((org.joda.time.ReadablePartial) localDateTime72);
        org.joda.time.ReadablePeriod readablePeriod74 = null;
        org.joda.time.LocalDateTime localDateTime75 = localDateTime72.plus(readablePeriod74);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 6L + "'", long10 == 6L);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "1" + "'", str12, "1");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 31 + "'", int13 == 31);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(nameProvider24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 31 + "'", int33 == 31);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 22 + "'", int35 == 22);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "22" + "'", str44, "22");
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "11" + "'", str55, "11");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(intArray59);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[2022, 2, 11, 35655515]");
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(intArray65);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[2022, 2, 11, 35655515]");
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertNotNull(localDateTime68);
// flaky:         org.junit.Assert.assertTrue("'" + int69 + "' != '" + 515 + "'", int69 == 515);
        org.junit.Assert.assertNotNull(property70);
        org.junit.Assert.assertNotNull(localDateTime72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 1 + "'", int73 == 1);
        org.junit.Assert.assertNotNull(localDateTime75);
    }

    @Test
    public void test08369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08369");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds((int) (byte) 100);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = null;
        java.lang.String str6 = localDateTime1.toString(dateTimeFormatter5);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        org.joda.time.LocalDateTime.Property property8 = localDateTime1.property(dateTimeFieldType7);
        org.joda.time.LocalDateTime localDateTime9 = property8.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime10 = property8.withMinimumValue();
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime();
        boolean boolean13 = localDateTime11.isBefore((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime12.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property16 = localDateTime12.dayOfMonth();
        int int17 = property8.compareTo((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.LocalDateTime localDateTime19 = property8.addToCopy(35275799L);
        org.joda.time.LocalDateTime localDateTime20 = property8.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime21 = property8.roundCeilingCopy();
        org.joda.time.LocalDateTime localDateTime23 = property8.addToCopy(1969);
        int int24 = localDateTime23.getDayOfWeek();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "2022-02-11T09:54:15.569" + "'", str6, "2022-02-11T09:54:15.569");
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 3 + "'", int24 == 3);
    }

    @Test
    public void test08370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08370");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime();
        boolean boolean3 = localDateTime1.isBefore((org.joda.time.ReadablePartial) localDateTime2);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusMinutes((int) '#');
        org.joda.time.LocalDateTime localDateTime9 = localDateTime2.withEra((int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone10);
        java.util.Locale locale13 = java.util.Locale.CHINESE;
        java.lang.String str14 = dateTimeZone10.getName((long) (short) 0, locale13);
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.minusMillis((int) (byte) 1);
        java.lang.String str18 = localDateTime17.toString();
        org.joda.time.DateTime dateTime19 = localDateTime17.toDateTime();
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.minusMillis((int) (byte) 1);
        java.lang.String str23 = localDateTime22.toString();
        org.joda.time.DateTime dateTime24 = localDateTime22.toDateTime();
        boolean boolean25 = dateTime19.isEqual((org.joda.time.ReadableInstant) dateTime24);
        int int26 = dateTimeZone10.getOffset((org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str28 = dateTimeFieldType27.toString();
        java.lang.String str29 = dateTimeFieldType27.toString();
        boolean boolean30 = dateTime19.isSupported(dateTimeFieldType27);
        org.joda.time.Chronology chronology31 = dateTime19.getChronology();
        org.joda.time.Chronology chronology32 = dateTime19.getChronology();
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime2, chronology32);
        org.joda.time.DateTimeField dateTimeField34 = dateTimeFieldType0.getField(chronology32);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.field.FieldUtils.verifyValueBounds(dateTimeFieldType0, 596, 539, 407);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 596 for yearOfCentury must be in the range [539,407]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+00:00:00.117" + "'", str14, "+00:00:00.117");
        org.junit.Assert.assertNotNull(localDateTime17);
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "2022-02-11T09:54:15.587" + "'", str18, "2022-02-11T09:54:15.587");
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(localDateTime22);
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "2022-02-11T09:54:15.587" + "'", str23, "2022-02-11T09:54:15.587");
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 117 + "'", int26 == 117);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "weekyear" + "'", str28, "weekyear");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "weekyear" + "'", str29, "weekyear");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeField34);
    }

    @Test
    public void test08371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08371");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        java.util.Locale locale3 = null;
        java.lang.String str4 = dateTimeZone1.getName((long) (short) 10, locale3);
        long long6 = dateTimeZone0.getMillisKeepLocal(dateTimeZone1, (long) 874);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        long long9 = dateTimeZone1.getMillisKeepLocal(dateTimeZone7, (long) '4');
        int int11 = dateTimeZone1.getStandardOffset((long) ' ');
        java.lang.String str13 = dateTimeZone1.getName((long) 24609364);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.117" + "'", str4, "+00:00:00.117");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 874L + "'", long6 == 874L);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 52L + "'", long9 == 52L);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 117 + "'", int11 == 117);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+00:00:00.117" + "'", str13, "+00:00:00.117");
    }

    @Test
    public void test08372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08372");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        java.util.Locale locale3 = null;
        java.lang.String str4 = dateTimeZone1.getName((long) (short) 10, locale3);
        long long6 = dateTimeZone0.getMillisKeepLocal(dateTimeZone1, (long) 874);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        long long9 = dateTimeZone1.getMillisKeepLocal(dateTimeZone7, (long) '4');
        int int11 = dateTimeZone1.getOffsetFromLocal((long) 83);
        int int13 = dateTimeZone1.getOffset((long) (-35274808));
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.LocalDateTime localDateTime17 = localDateTime14.withPeriodAdded(readablePeriod15, 641);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime14.plusWeeks(9800);
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime();
        boolean boolean22 = localDateTime20.isBefore((org.joda.time.ReadablePartial) localDateTime21);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime21.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property25 = localDateTime21.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime26 = property25.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField27 = property25.getField();
        org.joda.time.DurationField durationField28 = dateTimeField27.getLeapDurationField();
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime();
        boolean boolean31 = localDateTime29.isBefore((org.joda.time.ReadablePartial) localDateTime30);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime30.plusSeconds((int) (byte) 100);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter34 = null;
        java.lang.String str35 = localDateTime30.toString(dateTimeFormatter34);
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        org.joda.time.LocalDateTime.Property property37 = localDateTime30.property(dateTimeFieldType36);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime30.minusMinutes((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime();
        boolean boolean42 = localDateTime40.isBefore((org.joda.time.ReadablePartial) localDateTime41);
        org.joda.time.LocalDateTime localDateTime44 = localDateTime41.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property45 = localDateTime41.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime46 = property45.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField47 = property45.getField();
        long long50 = dateTimeField47.addWrapField((long) (short) 1, (int) (byte) 100);
        int int52 = dateTimeField47.getMinimumValue((-1L));
        org.joda.time.ReadablePartial readablePartial53 = null;
        int[] intArray56 = new int[] { 11 };
        int[] intArray58 = dateTimeField47.addWrapPartial(readablePartial53, 100, intArray56, 0);
        int int59 = dateTimeField27.getMinimumValue((org.joda.time.ReadablePartial) localDateTime30, intArray56);
        int int60 = localDateTime30.getWeekyear();
        int int61 = localDateTime19.compareTo((org.joda.time.ReadablePartial) localDateTime30);
        org.joda.time.LocalDateTime.Property property62 = localDateTime19.dayOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType63 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.DurationFieldType durationFieldType64 = dateTimeFieldType63.getDurationType();
        boolean boolean65 = localDateTime19.isSupported(durationFieldType64);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.117" + "'", str4, "+00:00:00.117");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 874L + "'", long6 == 874L);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 52L + "'", long9 == 52L);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 117 + "'", int11 == 117);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 117 + "'", int13 == 117);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNull(durationField28);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(localDateTime33);
// flaky:         org.junit.Assert.assertEquals("'" + str35 + "' != '" + "2022-02-11T09:54:15.654" + "'", str35, "2022-02-11T09:54:15.654");
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 604800001L + "'", long50 == 604800001L);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[11]");
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[11]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2022 + "'", int60 == 2022);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(dateTimeFieldType63);
        org.junit.Assert.assertNotNull(durationFieldType64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
    }

    @Test
    public void test08373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08373");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        int int1 = localDateTime0.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime3 = localDateTime0.minusMonths((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.minusMonths((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.plusWeeks(22);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.dayOfMonth();
        java.util.Locale locale10 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str11 = localDateTime7.toString("", locale10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid pattern specification");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 22 + "'", int1 == 22);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
    }

    @Test
    public void test08374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08374");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.LanguageRange[] languageRangeArray1 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList2 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList2, languageRangeArray1);
        java.util.Locale[] localeArray4 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList5 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList5, localeArray4);
        java.util.Locale locale7 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList2, (java.util.Collection<java.util.Locale>) localeList5);
        java.util.Locale.LanguageRange[] languageRangeArray8 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList9 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList9, languageRangeArray8);
        java.util.Locale[] localeArray11 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList12 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList12, localeArray11);
        java.util.Locale locale14 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList9, (java.util.Collection<java.util.Locale>) localeList12);
        java.util.Locale.FilteringMode filteringMode15 = null;
        java.util.List<java.util.Locale> localeList16 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList2, (java.util.Collection<java.util.Locale>) localeList12, filteringMode15);
        java.util.Locale locale17 = java.util.Locale.FRENCH;
        java.util.Set<java.lang.String> strSet18 = locale17.getUnicodeLocaleAttributes();
        java.lang.Object[] objArray19 = strSet18.toArray();
        java.util.Locale.FilteringMode filteringMode20 = java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList21 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList2, (java.util.Collection<java.lang.String>) strSet18, filteringMode20);
        java.util.Locale locale22 = java.util.Locale.ITALIAN;
        java.lang.String str23 = locale22.getDisplayCountry();
        boolean boolean24 = strSet18.equals((java.lang.Object) locale22);
        java.util.Locale.Builder builder25 = builder0.setLocale(locale22);
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime();
        int int27 = localDateTime26.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime29 = localDateTime26.minusMonths((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.minusMonths((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property32 = localDateTime29.minuteOfHour();
        java.util.Locale locale33 = java.util.Locale.JAPAN;
        java.util.Locale locale34 = java.util.Locale.ITALY;
        java.lang.String str35 = locale33.getDisplayScript(locale34);
        int int36 = property32.getMaximumShortTextLength(locale34);
        java.util.Locale.Builder builder37 = builder0.setLocale(locale34);
        java.util.Locale.Builder builder38 = builder0.clearExtensions();
        java.util.Locale.Builder builder39 = builder0.clearExtensions();
        java.util.Locale.Builder builder42 = builder0.setExtension('x', "555");
        org.junit.Assert.assertNotNull(languageRangeArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(localeArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(locale7);
        org.junit.Assert.assertNotNull(languageRangeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(localeArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(locale14);
        org.junit.Assert.assertNotNull(localeList16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet18);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[]");
        org.junit.Assert.assertTrue("'" + filteringMode20 + "' != '" + java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES + "'", filteringMode20.equals(java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList21);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "it");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 22 + "'", int27 == 22);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2 + "'", int36 == 2);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder42);
    }

    @Test
    public void test08375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08375");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        java.util.Locale locale3 = null;
        java.lang.String str4 = dateTimeZone1.getName((long) (short) 10, locale3);
        long long6 = dateTimeZone0.getMillisKeepLocal(dateTimeZone1, (long) 874);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        long long9 = dateTimeZone1.getMillisKeepLocal(dateTimeZone7, (long) '4');
        int int11 = dateTimeZone1.getOffsetFromLocal((long) 83);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.minusMillis((int) (byte) 1);
        java.lang.String str15 = localDateTime14.toString();
        org.joda.time.DateTime dateTime16 = localDateTime14.toDateTime();
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.minusMillis((int) (byte) 1);
        java.lang.String str20 = localDateTime19.toString();
        org.joda.time.DateTime dateTime21 = localDateTime19.toDateTime();
        boolean boolean22 = dateTime16.isEqual((org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.minusMillis((int) (byte) 1);
        java.lang.String str26 = localDateTime25.toString();
        org.joda.time.DateTime dateTime27 = localDateTime25.toDateTime();
        boolean boolean28 = dateTime16.isEqual((org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.minusMillis((int) (byte) 1);
        java.lang.String str32 = localDateTime31.toString();
        org.joda.time.DateTime dateTime33 = localDateTime31.toDateTime();
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime36 = localDateTime34.minusMillis((int) (byte) 1);
        java.lang.String str37 = localDateTime36.toString();
        org.joda.time.DateTime dateTime38 = localDateTime36.toDateTime();
        boolean boolean39 = dateTime33.isEqual((org.joda.time.ReadableInstant) dateTime38);
        boolean boolean40 = dateTime16.isEqual((org.joda.time.ReadableInstant) dateTime38);
        int int41 = dateTimeZone1.getOffset((org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.DateTimeZone dateTimeZone42 = dateTime38.getZone();
        boolean boolean44 = dateTime38.equals((java.lang.Object) "2022-02-11T09:48:28.822");
        org.joda.time.Instant instant45 = dateTime38.toInstant();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.117" + "'", str4, "+00:00:00.117");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 874L + "'", long6 == 874L);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 52L + "'", long9 == 52L);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 117 + "'", int11 == 117);
        org.junit.Assert.assertNotNull(localDateTime14);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "2022-02-11T09:54:15.712" + "'", str15, "2022-02-11T09:54:15.712");
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(localDateTime19);
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "2022-02-11T09:54:15.712" + "'", str20, "2022-02-11T09:54:15.712");
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(localDateTime25);
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "2022-02-11T09:54:15.712" + "'", str26, "2022-02-11T09:54:15.712");
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(localDateTime31);
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "2022-02-11T09:54:15.712" + "'", str32, "2022-02-11T09:54:15.712");
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(localDateTime36);
// flaky:         org.junit.Assert.assertEquals("'" + str37 + "' != '" + "2022-02-11T09:54:15.712" + "'", str37, "2022-02-11T09:54:15.712");
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 117 + "'", int41 == 117);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(instant45);
    }

    @Test
    public void test08376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08376");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property5 = localDateTime1.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime6 = property5.withMinimumValue();
        long long7 = property5.remainder();
        org.joda.time.LocalDateTime localDateTime8 = property5.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime9 = property5.withMaximumValue();
        org.joda.time.DurationField durationField10 = property5.getLeapDurationField();
        org.joda.time.DurationField durationField11 = property5.getDurationField();
        org.joda.time.Interval interval12 = property5.toInterval();
        org.joda.time.LocalDateTime localDateTime14 = property5.addWrapFieldToCopy(35314963);
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime();
        boolean boolean17 = localDateTime15.isBefore((org.joda.time.ReadablePartial) localDateTime16);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime16.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property20 = localDateTime16.dayOfMonth();
        boolean boolean21 = property20.isLeap();
        org.joda.time.LocalDateTime localDateTime22 = property20.roundCeilingCopy();
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime();
        int int24 = localDateTime23.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime26 = localDateTime23.minusMonths((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.minusMonths((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property29 = localDateTime26.minuteOfHour();
        org.joda.time.LocalDateTime.Property property30 = localDateTime26.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.minusMillis((int) (byte) 1);
        java.lang.String str34 = localDateTime33.toString();
        org.joda.time.DateTime dateTime35 = localDateTime33.toDateTime();
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime38 = localDateTime36.minusMillis((int) (byte) 1);
        java.lang.String str39 = localDateTime38.toString();
        org.joda.time.DateTime dateTime40 = localDateTime38.toDateTime();
        boolean boolean41 = dateTime35.isEqual((org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = org.joda.time.DateTimeFieldType.dayOfYear();
        int int43 = dateTime40.get(dateTimeFieldType42);
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = org.joda.time.DateTimeFieldType.monthOfYear();
        boolean boolean45 = dateTime40.isSupported(dateTimeFieldType44);
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str47 = dateTimeFieldType46.toString();
        java.lang.String str48 = dateTimeFieldType46.toString();
        int int49 = dateTime40.get(dateTimeFieldType46);
        boolean boolean50 = localDateTime26.isSupported(dateTimeFieldType46);
        org.joda.time.DurationFieldType durationFieldType51 = dateTimeFieldType46.getDurationType();
        boolean boolean52 = localDateTime22.isSupported(durationFieldType51);
        org.joda.time.LocalDateTime localDateTime54 = localDateTime14.withFieldAdded(durationFieldType51, 483);
        org.joda.time.LocalDateTime localDateTime56 = localDateTime54.plusYears(818);
        org.joda.time.LocalDateTime.Property property57 = localDateTime54.minuteOfHour();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
// flaky:         org.junit.Assert.assertTrue("'" + long7 + "' != '" + 35655734L + "'", long7 == 35655734L);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNull(durationField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 22 + "'", int24 == 22);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(localDateTime33);
// flaky:         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "2022-02-11T09:54:15.733" + "'", str34, "2022-02-11T09:54:15.733");
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(localDateTime38);
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "2022-02-11T09:54:15.733" + "'", str39, "2022-02-11T09:54:15.733");
        org.junit.Assert.assertNotNull(dateTime40);
// flaky:         org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 42 + "'", int43 == 42);
        org.junit.Assert.assertNotNull(dateTimeFieldType44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "weekyear" + "'", str47, "weekyear");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "weekyear" + "'", str48, "weekyear");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2022 + "'", int49 == 2022);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(durationFieldType51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(property57);
    }

    @Test
    public void test08377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08377");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property5 = localDateTime1.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime6 = property5.withMinimumValue();
        long long7 = property5.remainder();
        org.joda.time.LocalDateTime localDateTime8 = property5.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime9 = property5.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.plusMillis(3);
        org.joda.time.LocalDateTime.Property property12 = localDateTime11.millisOfDay();
        org.joda.time.DurationField durationField13 = property12.getRangeDurationField();
        org.joda.time.LocalDateTime localDateTime15 = property12.addWrapFieldToCopy(1797);
        org.joda.time.DurationField durationField16 = property12.getDurationField();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
// flaky:         org.junit.Assert.assertTrue("'" + long7 + "' != '" + 35655828L + "'", long7 == 35655828L);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(durationField16);
    }

    @Test
    public void test08378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08378");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) 'x');
        java.lang.String str3 = dateTimeZone1.getNameKey(58L);
        boolean boolean4 = dateTimeZone1.isFixed();
        long long6 = dateTimeZone1.nextTransition(1814400058L);
        long long8 = dateTimeZone1.nextTransition(3577707550L);
        long long11 = dateTimeZone1.adjustOffset(542L, true);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime();
        boolean boolean14 = localDateTime12.isBefore((org.joda.time.ReadablePartial) localDateTime13);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime13.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime13.plusMinutes((int) '#');
        org.joda.time.LocalDateTime.Property property19 = localDateTime18.weekOfWeekyear();
        java.lang.String str20 = property19.getAsShortText();
        org.joda.time.LocalDateTime localDateTime22 = property19.addWrapFieldToCopy((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.minusMillis((int) (byte) 1);
        java.lang.String str26 = localDateTime25.toString();
        org.joda.time.DateTime dateTime27 = localDateTime25.toDateTime();
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.minusMillis((int) (byte) 1);
        java.lang.String str31 = localDateTime30.toString();
        org.joda.time.DateTime dateTime32 = localDateTime30.toDateTime();
        boolean boolean33 = dateTime27.isEqual((org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.Chronology chronology34 = dateTime32.getChronology();
        org.joda.time.ReadableInstant readableInstant35 = null;
        boolean boolean36 = dateTime32.isEqual(readableInstant35);
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime();
        boolean boolean39 = localDateTime37.isBefore((org.joda.time.ReadablePartial) localDateTime38);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime38.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property42 = localDateTime38.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime43 = property42.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField44 = property42.getField();
        long long47 = dateTimeField44.addWrapField((long) 6, (int) (byte) 0);
        java.lang.String str49 = dateTimeField44.getAsShortText((long) (byte) 10);
        boolean boolean50 = dateTime32.equals((java.lang.Object) str49);
        int int51 = property19.getDifference((org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.LocalDateTime localDateTime52 = property19.roundHalfEvenCopy();
        org.joda.time.LocalDateTime.Property property53 = localDateTime52.millisOfSecond();
        org.joda.time.ReadableDuration readableDuration54 = null;
        org.joda.time.LocalDateTime localDateTime56 = localDateTime52.withDurationAdded(readableDuration54, 41);
        boolean boolean57 = dateTimeZone1.isLocalDateTimeGap(localDateTime52);
        org.joda.time.LocalDateTime.Property property58 = localDateTime52.dayOfWeek();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime60 = localDateTime52.withMillisOfSecond(24842932);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 24842932 for millisOfSecond must be in the range [0,999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1814400058L + "'", long6 == 1814400058L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 3577707550L + "'", long8 == 3577707550L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 542L + "'", long11 == 542L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "6" + "'", str20, "6");
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime25);
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "2022-02-11T09:54:15.841" + "'", str26, "2022-02-11T09:54:15.841");
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(localDateTime30);
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "2022-02-11T09:54:15.841" + "'", str31, "2022-02-11T09:54:15.841");
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 6L + "'", long47 == 6L);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "1" + "'", str49, "1");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(property58);
    }

    @Test
    public void test08379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08379");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        int[] intArray3 = localDateTime1.getValues();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.plusYears((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        boolean boolean8 = localDateTime6.isBefore((org.joda.time.ReadablePartial) localDateTime7);
        int[] intArray9 = localDateTime7.getValues();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime1.withFields((org.joda.time.ReadablePartial) localDateTime7);
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.millisOfDay();
        org.joda.time.LocalDateTime localDateTime12 = property11.roundFloorCopy();
        org.joda.time.LocalDateTime.Property property13 = localDateTime12.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime14 = property13.roundCeilingCopy();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(intArray3);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[2022, 2, 11, 35655865]");
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(intArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[2022, 2, 11, 35655865]");
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDateTime14);
    }

    @Test
    public void test08380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08380");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) 'u');
        long long5 = dateTimeZone1.convertLocalToUTC((long) 1, false, 822L);
        java.util.TimeZone timeZone6 = dateTimeZone1.toTimeZone();
        long long9 = dateTimeZone1.convertLocalToUTC(0L, false);
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime();
        boolean boolean12 = localDateTime10.isBefore((org.joda.time.ReadablePartial) localDateTime11);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime11.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property15 = localDateTime11.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime16 = property15.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField17 = property15.getField();
        long long19 = dateTimeField17.remainder((-1L));
        boolean boolean20 = dateTimeZone1.equals((java.lang.Object) dateTimeField17);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.getDefault();
        java.util.Locale locale24 = null;
        java.lang.String str25 = dateTimeZone22.getName((long) (short) 10, locale24);
        long long27 = dateTimeZone21.getMillisKeepLocal(dateTimeZone22, (long) 874);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.getDefault();
        long long30 = dateTimeZone22.getMillisKeepLocal(dateTimeZone28, (long) '4');
        long long32 = dateTimeZone28.convertUTCToLocal(1643708883261L);
        long long34 = dateTimeZone1.getMillisKeepLocal(dateTimeZone28, (long) 2022);
        int int36 = dateTimeZone1.getOffset(35339490L);
        java.util.TimeZone timeZone37 = dateTimeZone1.toTimeZone();
        boolean boolean38 = timeZone37.useDaylightTime();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-116L) + "'", long5 == (-116L));
        org.junit.Assert.assertNotNull(timeZone6);
        org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-117L) + "'", long9 == (-117L));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 86399999L + "'", long19 == 86399999L);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "+00:00:00.117" + "'", str25, "+00:00:00.117");
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 874L + "'", long27 == 874L);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 52L + "'", long30 == 52L);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 1643708883378L + "'", long32 == 1643708883378L);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 2022L + "'", long34 == 2022L);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 117 + "'", int36 == 117);
        org.junit.Assert.assertNotNull(timeZone37);
        org.junit.Assert.assertEquals(timeZone37.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test08381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08381");
        java.util.Locale locale2 = new java.util.Locale("fra", "");
        java.util.Set<java.lang.String> strSet3 = locale2.getUnicodeLocaleAttributes();
        java.lang.String[] strArray8 = new java.lang.String[] { "fra", "", "+00:00", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet9 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet9, strArray8);
        java.lang.Object[] objArray11 = strSet9.toArray();
        boolean boolean12 = strSet9.isEmpty();
        java.util.Locale.LanguageRange[] languageRangeArray13 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList14 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList14, languageRangeArray13);
        java.util.Locale[] localeArray16 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList17 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList17, localeArray16);
        java.util.Locale locale19 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList14, (java.util.Collection<java.util.Locale>) localeList17);
        boolean boolean20 = strSet9.removeAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList14);
        java.util.Locale locale21 = java.util.Locale.ITALIAN;
        java.lang.String str22 = locale21.getDisplayCountry();
        java.util.Set<java.lang.String> strSet23 = locale21.getUnicodeLocaleAttributes();
        java.lang.String[] strArray28 = new java.lang.String[] { "fra", "", "+00:00", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet29 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet29, strArray28);
        java.lang.Object[] objArray31 = strSet29.toArray();
        boolean boolean32 = strSet29.isEmpty();
        java.util.Locale.LanguageRange[] languageRangeArray33 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList34 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList34, languageRangeArray33);
        java.util.Locale[] localeArray36 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList37 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList37, localeArray36);
        java.util.Locale locale39 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList34, (java.util.Collection<java.util.Locale>) localeList37);
        boolean boolean40 = strSet29.removeAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList34);
        java.util.Locale.LanguageRange[] languageRangeArray41 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList42 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList42, languageRangeArray41);
        java.util.Locale[] localeArray44 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList45 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList45, localeArray44);
        java.util.Locale locale47 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList42, (java.util.Collection<java.util.Locale>) localeList45);
        java.util.Locale.FilteringMode filteringMode48 = java.util.Locale.FilteringMode.EXTENDED_FILTERING;
        java.util.List<java.util.Locale> localeList49 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList34, (java.util.Collection<java.util.Locale>) localeList45, filteringMode48);
        java.util.List<java.lang.String> strList50 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList14, (java.util.Collection<java.lang.String>) strSet23, filteringMode48);
        boolean boolean51 = strSet3.containsAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList14);
        java.util.stream.Stream<java.util.Locale.LanguageRange> languageRangeStream52 = languageRangeList14.stream();
        java.util.Locale locale53 = java.util.Locale.KOREA;
        java.util.Locale.Builder builder54 = new java.util.Locale.Builder();
        java.util.Locale locale55 = builder54.build();
        java.lang.String str56 = locale55.getDisplayVariant();
        java.lang.String str57 = locale53.getDisplayName(locale55);
        java.util.Locale.Builder builder58 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder59 = builder58.clear();
        org.joda.time.DateTimeZone dateTimeZone60 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone60);
        java.util.Locale locale63 = java.util.Locale.CHINESE;
        java.lang.String str64 = dateTimeZone60.getName((long) (short) 0, locale63);
        java.util.Locale.Builder builder65 = builder58.setLocale(locale63);
        java.util.Locale locale66 = java.util.Locale.ROOT;
        java.lang.String str67 = locale63.getDisplayCountry(locale66);
        java.lang.String str68 = locale53.getDisplayName(locale66);
        java.util.Set<java.lang.String> strSet69 = locale66.getUnicodeLocaleAttributes();
        java.lang.String str70 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList14, (java.util.Collection<java.lang.String>) strSet69);
        java.util.stream.Stream<java.util.Locale.LanguageRange> languageRangeStream71 = languageRangeList14.stream();
        org.junit.Assert.assertEquals(locale2.toString(), "fra");
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[fra, , +00:00, hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[fra, , +00:00, hi!]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(languageRangeArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(localeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNull(locale19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "it");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(strSet23);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[fra, , +00:00, hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[fra, , +00:00, hi!]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(languageRangeArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(localeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(locale39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(languageRangeArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(localeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(locale47);
        org.junit.Assert.assertTrue("'" + filteringMode48 + "' != '" + java.util.Locale.FilteringMode.EXTENDED_FILTERING + "'", filteringMode48.equals(java.util.Locale.FilteringMode.EXTENDED_FILTERING));
        org.junit.Assert.assertNotNull(localeList49);
        org.junit.Assert.assertNotNull(strList50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(languageRangeStream52);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "Korean (South Korea)" + "'", str57, "Korean (South Korea)");
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(dateTimeZone60);
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "+00:00:00.117" + "'", str64, "+00:00:00.117");
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "Korean (South Korea)" + "'", str68, "Korean (South Korea)");
        org.junit.Assert.assertNotNull(strSet69);
        org.junit.Assert.assertNull(str70);
        org.junit.Assert.assertNotNull(languageRangeStream71);
    }

    @Test
    public void test08382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08382");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property5 = localDateTime1.dayOfMonth();
        boolean boolean6 = property5.isLeap();
        java.lang.String str7 = property5.getAsShortText();
        int int8 = property5.getMinimumValueOverall();
        org.joda.time.DurationField durationField9 = property5.getLeapDurationField();
        java.lang.String str10 = property5.toString();
        java.lang.String str11 = property5.getAsText();
        org.joda.time.LocalDateTime localDateTime12 = property5.roundCeilingCopy();
        java.util.Locale.Category category13 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale14 = java.util.Locale.KOREAN;
        java.util.Locale locale15 = locale14.stripExtensions();
        java.util.Locale.setDefault(category13, locale15);
        int int17 = property5.getMaximumShortTextLength(locale15);
        java.lang.String str18 = locale15.getISO3Language();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "11" + "'", str7, "11");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNull(durationField9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Property[dayOfMonth]" + "'", str10, "Property[dayOfMonth]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "11" + "'", str11, "11");
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + category13 + "' != '" + java.util.Locale.Category.FORMAT + "'", category13.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "kor" + "'", str18, "kor");
    }

    @Test
    public void test08383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08383");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime1.plusMinutes((int) '#');
        org.joda.time.LocalDateTime localDateTime8 = localDateTime1.plusMonths(0);
        org.joda.time.LocalDateTime.Property property9 = localDateTime1.weekOfWeekyear();
        java.lang.String str10 = property9.toString();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Property[weekOfWeekyear]" + "'", str10, "Property[weekOfWeekyear]");
    }

    @Test
    public void test08384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08384");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(777600000L);
    }

    @Test
    public void test08385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08385");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.minusMillis((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.plusDays(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.weekyear();
        boolean boolean6 = localDateTime2.isSupported(dateTimeFieldType5);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime2.plusMonths(0);
        org.joda.time.LocalDateTime.Property property9 = localDateTime2.millisOfDay();
        java.lang.String str10 = property9.getAsString();
        org.joda.time.LocalDateTime localDateTime11 = property9.withMaximumValue();
        java.lang.String str12 = localDateTime11.toString();
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "35656022" + "'", str10, "35656022");
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "2022-02-11T23:59:59.999" + "'", str12, "2022-02-11T23:59:59.999");
    }

    @Test
    public void test08386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08386");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("2022-02-11T09:50:31.510");
        org.joda.time.tz.NameProvider nameProvider2 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale3 = java.util.Locale.FRENCH;
        java.lang.String str4 = locale3.getDisplayName();
        java.lang.String str7 = nameProvider2.getShortName(locale3, "2022-02-11T09:47:59.470", "2022-02-11T09:48:12.308");
        java.util.Locale locale10 = new java.util.Locale("2022-02-11T09:47:59.996", "2022-02-11T09:48:12.885");
        java.util.Locale locale11 = locale10.stripExtensions();
        java.lang.String str14 = nameProvider2.getShortName(locale10, "2022-02-11T09:48:08.164", "2022-02-11T09:48:20.387");
        java.lang.String str15 = locale10.getScript();
        java.lang.String str16 = timeZone1.getDisplayName(locale10);
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(nameProvider2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "French" + "'", str4, "French");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertEquals(locale10.toString(), "2022-02-11t09:47:59.996_2022-02-11T09:48:12.885");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "2022-02-11t09:47:59.996_2022-02-11T09:48:12.885");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Greenwich Mean Time" + "'", str16, "Greenwich Mean Time");
    }

    @Test
    public void test08387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08387");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plus(readableDuration3);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime1.plusMinutes((int) (short) 10);
        int int7 = localDateTime1.size();
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minusMillis((int) (byte) 1);
        java.lang.String str11 = localDateTime10.toString();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime10.minusMonths((int) 'a');
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.minusMinutes(22);
        java.util.Date date16 = localDateTime15.toDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.minusMillis((int) (byte) 1);
        java.lang.String str21 = localDateTime20.toString();
        org.joda.time.DateTime dateTime22 = localDateTime20.toDateTime();
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.minusMillis((int) (byte) 1);
        java.lang.String str26 = localDateTime25.toString();
        org.joda.time.DateTime dateTime27 = localDateTime25.toDateTime();
        boolean boolean28 = dateTime22.isEqual((org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.minusMillis((int) (byte) 1);
        java.lang.String str32 = localDateTime31.toString();
        org.joda.time.DateTime dateTime33 = localDateTime31.toDateTime();
        boolean boolean34 = dateTime22.isEqual((org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.Chronology chronology35 = dateTime33.getChronology();
        org.joda.time.LocalDateTime localDateTime36 = org.joda.time.LocalDateTime.now(chronology35);
        org.joda.time.DateTimeField dateTimeField37 = dateTimeFieldType17.getField(chronology35);
        int int38 = localDateTime15.indexOf(dateTimeFieldType17);
        org.joda.time.LocalDateTime.Property property39 = localDateTime1.property(dateTimeFieldType17);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime1.plusYears(18);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime46 = localDateTime1.withTime(313, 24688613, (int) (short) 100, 426);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 313 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 4 + "'", int7 == 4);
        org.junit.Assert.assertNotNull(localDateTime10);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "2022-02-11T09:54:16.044" + "'", str11, "2022-02-11T09:54:16.044");
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(date16);
// flaky:         org.junit.Assert.assertEquals(date16.toString(), "Sat Jan 11 09:32:16 GMT+00:00 2014");
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(localDateTime20);
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "2022-02-11T09:54:16.045" + "'", str21, "2022-02-11T09:54:16.045");
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(localDateTime25);
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "2022-02-11T09:54:16.045" + "'", str26, "2022-02-11T09:54:16.045");
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(localDateTime31);
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "2022-02-11T09:54:16.045" + "'", str32, "2022-02-11T09:54:16.045");
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(localDateTime41);
    }

    @Test
    public void test08388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08388");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        int int1 = localDateTime0.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime3 = localDateTime0.minusMonths((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.minusMonths((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.plusWeeks(22);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.dayOfYear();
        org.joda.time.LocalDateTime.Property property9 = localDateTime7.secondOfMinute();
        java.util.Locale.Category category10 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale11 = java.util.Locale.getDefault(category10);
        java.util.Locale locale12 = java.util.Locale.getDefault(category10);
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime();
        boolean boolean15 = localDateTime13.isBefore((org.joda.time.ReadablePartial) localDateTime14);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime14.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property18 = localDateTime14.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime19 = property18.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField20 = property18.getField();
        int int23 = dateTimeField20.getDifference(1L, 86399999L);
        java.lang.String str24 = dateTimeField20.toString();
        java.util.Locale.LanguageRange[] languageRangeArray26 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList27 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList27, languageRangeArray26);
        java.util.Locale[] localeArray29 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList30 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean31 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList30, localeArray29);
        java.util.Locale locale32 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList27, (java.util.Collection<java.util.Locale>) localeList30);
        java.util.Locale.LanguageRange[] languageRangeArray33 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList34 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean35 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList34, languageRangeArray33);
        java.util.Locale[] localeArray36 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList37 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList37, localeArray36);
        java.util.Locale locale39 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList34, (java.util.Collection<java.util.Locale>) localeList37);
        java.util.Locale.FilteringMode filteringMode40 = null;
        java.util.List<java.util.Locale> localeList41 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList27, (java.util.Collection<java.util.Locale>) localeList37, filteringMode40);
        java.util.Locale locale42 = java.util.Locale.FRENCH;
        java.util.Set<java.lang.String> strSet43 = locale42.getUnicodeLocaleAttributes();
        java.lang.Object[] objArray44 = strSet43.toArray();
        java.util.Locale.FilteringMode filteringMode45 = java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList46 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList27, (java.util.Collection<java.lang.String>) strSet43, filteringMode45);
        java.util.Locale locale47 = java.util.Locale.ITALIAN;
        java.lang.String str48 = locale47.getDisplayCountry();
        boolean boolean49 = strSet43.equals((java.lang.Object) locale47);
        java.lang.String str50 = dateTimeField20.getAsText((long) (short) -1, locale47);
        java.lang.String str51 = locale12.getDisplayName(locale47);
        int int52 = property9.getMaximumShortTextLength(locale12);
        boolean boolean53 = locale12.hasExtensions();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 22 + "'", int1 == 22);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + category10 + "' != '" + java.util.Locale.Category.FORMAT + "'", category10.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ko");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "DateTimeField[dayOfMonth]" + "'", str24, "DateTimeField[dayOfMonth]");
        org.junit.Assert.assertNotNull(languageRangeArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(localeArray29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNull(locale32);
        org.junit.Assert.assertNotNull(languageRangeArray33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(localeArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(locale39);
        org.junit.Assert.assertNotNull(localeList41);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet43);
        org.junit.Assert.assertNotNull(objArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray44), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray44), "[]");
        org.junit.Assert.assertTrue("'" + filteringMode45 + "' != '" + java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES + "'", filteringMode45.equals(java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList46);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "it");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "31" + "'", str50, "31");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "coreano" + "'", str51, "coreano");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2 + "'", int52 == 2);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test08389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08389");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime1.plusMinutes((int) '#');
        org.joda.time.LocalDateTime localDateTime8 = localDateTime1.minusMinutes((int) (short) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.monthOfYear();
        boolean boolean10 = localDateTime8.isSupported(dateTimeFieldType9);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTimeField dateTimeField12 = dateTimeFieldType9.getField(chronology11);
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.minusMillis((int) (byte) 1);
        java.lang.String str19 = localDateTime18.toString();
        org.joda.time.DateTime dateTime20 = localDateTime18.toDateTime();
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.minusMillis((int) (byte) 1);
        java.lang.String str24 = localDateTime23.toString();
        org.joda.time.DateTime dateTime25 = localDateTime23.toDateTime();
        boolean boolean26 = dateTime20.isEqual((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.Chronology chronology27 = dateTime25.getChronology();
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime((java.lang.Object) 35271574L, chronology27);
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime((long) 'u', chronology27);
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime(86399999L, chronology27);
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime();
        boolean boolean33 = localDateTime31.isBefore((org.joda.time.ReadablePartial) localDateTime32);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime32.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property36 = localDateTime32.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime37 = property36.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField38 = property36.getField();
        int int41 = dateTimeField38.getDifference(1L, 86399999L);
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime();
        int int43 = localDateTime42.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime45 = localDateTime42.minusMonths((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime45.minusMonths((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime49 = localDateTime47.plusWeeks(22);
        org.joda.time.LocalDateTime.Property property50 = localDateTime49.dayOfMonth();
        java.util.Locale locale55 = new java.util.Locale("11", "weekyear", "fra");
        java.lang.String str56 = locale55.getDisplayName();
        java.lang.String str57 = dateTimeField38.getAsShortText((org.joda.time.ReadablePartial) localDateTime49, (int) (byte) 1, locale55);
        org.joda.time.LocalDateTime localDateTime58 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime59 = new org.joda.time.LocalDateTime();
        boolean boolean60 = localDateTime58.isBefore((org.joda.time.ReadablePartial) localDateTime59);
        org.joda.time.LocalDateTime localDateTime62 = localDateTime59.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property63 = localDateTime59.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime64 = property63.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField65 = property63.getField();
        org.joda.time.LocalDateTime localDateTime66 = property63.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime67 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime69 = localDateTime67.minusMillis((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime71 = localDateTime69.plusDays(0);
        org.joda.time.LocalDateTime localDateTime73 = localDateTime71.plusMillis((int) '#');
        int[] intArray74 = localDateTime71.getValues();
        int int75 = dateTimeField38.getMinimumValue((org.joda.time.ReadablePartial) localDateTime66, intArray74);
        int int76 = dateTimeField12.getMaximumValue((org.joda.time.ReadablePartial) localDateTime30, intArray74);
        long long79 = dateTimeField12.getDifferenceAsLong((long) 5200, (long) 513);
        long long81 = dateTimeField12.roundCeiling(146685541535L);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(localDateTime18);
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "2022-02-11T09:54:16.082" + "'", str19, "2022-02-11T09:54:16.082");
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(localDateTime23);
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "2022-02-11T09:54:16.082" + "'", str24, "2022-02-11T09:54:16.082");
        org.junit.Assert.assertNotNull(dateTime25);
// flaky:         org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 22 + "'", int43 == 22);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertEquals(locale55.toString(), "11_WEEKYEAR_fra");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "11 (WEEKYEAR,fra)" + "'", str56, "11 (WEEKYEAR,fra)");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "1" + "'", str57, "1");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertNotNull(localDateTime69);
        org.junit.Assert.assertNotNull(localDateTime71);
        org.junit.Assert.assertNotNull(localDateTime73);
        org.junit.Assert.assertNotNull(intArray74);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[2022, 2, 11, 35656082]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 12 + "'", int76 == 12);
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + 0L + "'", long79 == 0L);
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + 147225599883L + "'", long81 == 147225599883L);
    }

    @Test
    public void test08390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08390");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((int) (short) -1);
        long long4 = dateTimeZone1.convertLocalToUTC(1644572877787L, true);
        boolean boolean6 = dateTimeZone1.isStandardOffset((long) 222);
        long long8 = dateTimeZone1.convertUTCToLocal(404400L);
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime(dateTimeZone1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = null;
        java.lang.String str11 = localDateTime9.toString(dateTimeFormatter10);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str13 = localDateTime9.toString("2022-02-16T06:53:32.902");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1644576477787L + "'", long4 == 1644576477787L);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-3195600L) + "'", long8 == (-3195600L));
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "2022-02-11T08:54:16.006" + "'", str11, "2022-02-11T08:54:16.006");
    }

    @Test
    public void test08391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08391");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) 'u');
        long long5 = dateTimeZone1.convertLocalToUTC((long) 1, false, 822L);
        java.util.TimeZone timeZone6 = dateTimeZone1.toTimeZone();
        int int8 = dateTimeZone1.getOffset(10L);
        org.joda.time.LocalDateTime localDateTime9 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime();
        boolean boolean12 = localDateTime10.isBefore((org.joda.time.ReadablePartial) localDateTime11);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime11.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property15 = localDateTime11.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime16 = property15.withMinimumValue();
        org.joda.time.DurationField durationField17 = property15.getDurationField();
        java.util.Locale.Builder builder18 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder19 = builder18.clear();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone20);
        java.util.Locale locale23 = java.util.Locale.CHINESE;
        java.lang.String str24 = dateTimeZone20.getName((long) (short) 0, locale23);
        java.util.Locale.Builder builder25 = builder18.setLocale(locale23);
        java.lang.String str26 = property15.getAsText(locale23);
        boolean boolean27 = localDateTime9.equals((java.lang.Object) property15);
        java.util.Locale locale28 = java.util.Locale.FRENCH;
        java.lang.String str29 = locale28.getDisplayName();
        java.lang.String str30 = property15.getAsText(locale28);
        int int31 = property15.getMinimumValue();
        java.util.Locale locale32 = java.util.Locale.CANADA;
        java.lang.String str33 = locale32.getCountry();
        java.lang.String str34 = locale32.getISO3Country();
        java.lang.String str35 = locale32.getVariant();
        java.lang.String str36 = property15.getAsText(locale32);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-116L) + "'", long5 == (-116L));
        org.junit.Assert.assertNotNull(timeZone6);
        org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 117 + "'", int8 == 117);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+00:00:00.117" + "'", str24, "+00:00:00.117");
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "11" + "'", str26, "11");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "French" + "'", str29, "French");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "11" + "'", str30, "11");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "CA" + "'", str33, "CA");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "CAN" + "'", str34, "CAN");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "11" + "'", str36, "11");
    }

    @Test
    public void test08392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08392");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        int int3 = localDateTime1.getYearOfCentury();
        org.joda.time.ReadablePeriod readablePeriod4 = null;
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.plus(readablePeriod4);
        org.joda.time.LocalDateTime.Property property6 = localDateTime1.hourOfDay();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime1.withMillisOfDay(511);
        int int9 = localDateTime1.getYear();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 22 + "'", int3 == 22);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
    }

    @Test
    public void test08393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08393");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property5 = localDateTime1.dayOfMonth();
        java.util.Locale locale6 = java.util.Locale.FRENCH;
        java.util.Set<java.lang.String> strSet7 = locale6.getUnicodeLocaleAttributes();
        java.lang.String str8 = locale6.getVariant();
        java.lang.String str9 = property5.getAsText(locale6);
        org.joda.time.ReadableInstant readableInstant10 = null;
        int int11 = property5.getDifference(readableInstant10);
        int int12 = property5.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime13 = property5.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minusMillis((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.plusDays(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime16.withField(dateTimeFieldType19, 0);
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime();
        boolean boolean24 = localDateTime22.isBefore((org.joda.time.ReadablePartial) localDateTime23);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime23.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime23.plusMinutes((int) '#');
        org.joda.time.LocalDateTime localDateTime30 = localDateTime23.minusMinutes((int) (short) 1);
        boolean boolean31 = localDateTime21.isAfter((org.joda.time.ReadablePartial) localDateTime30);
        org.joda.time.LocalDateTime.Property property32 = localDateTime21.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime();
        boolean boolean35 = localDateTime33.isBefore((org.joda.time.ReadablePartial) localDateTime34);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime34.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime34.plusMinutes((int) '#');
        org.joda.time.LocalDateTime localDateTime41 = localDateTime34.minusMinutes((int) (short) 1);
        org.joda.time.LocalDateTime.Property property42 = localDateTime41.weekOfWeekyear();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime41, chronology43);
        boolean boolean45 = localDateTime21.isEqual((org.joda.time.ReadablePartial) localDateTime41);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime41.minusSeconds(5);
        boolean boolean48 = localDateTime13.isAfter((org.joda.time.ReadablePartial) localDateTime47);
        org.joda.time.LocalDateTime.Property property49 = localDateTime47.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime51 = localDateTime47.withWeekyear((-69000));
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.getDefault();
        java.util.Locale locale56 = null;
        java.lang.String str57 = dateTimeZone54.getName((long) (short) 10, locale56);
        long long59 = dateTimeZone53.getMillisKeepLocal(dateTimeZone54, (long) 874);
        org.joda.time.DateTimeZone dateTimeZone60 = org.joda.time.DateTimeZone.getDefault();
        long long62 = dateTimeZone54.getMillisKeepLocal(dateTimeZone60, (long) '4');
        int int64 = dateTimeZone54.getOffsetFromLocal((long) 83);
        org.joda.time.LocalDateTime localDateTime65 = new org.joda.time.LocalDateTime(0L, dateTimeZone54);
        org.joda.time.DateTimeFieldType dateTimeFieldType66 = org.joda.time.DateTimeFieldType.yearOfCentury();
        java.lang.String str67 = dateTimeFieldType66.getName();
        java.lang.String str68 = dateTimeFieldType66.toString();
        org.joda.time.DurationFieldType durationFieldType69 = dateTimeFieldType66.getDurationType();
        org.joda.time.LocalDateTime localDateTime71 = localDateTime65.withFieldAdded(durationFieldType69, 42);
        org.joda.time.LocalDateTime localDateTime73 = localDateTime71.withYear(35279748);
        org.joda.time.LocalDateTime localDateTime75 = localDateTime73.minusYears((int) (short) -1);
        int int76 = localDateTime51.compareTo((org.joda.time.ReadablePartial) localDateTime73);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime80 = localDateTime73.withDate(74, 0, 2505);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "11" + "'", str9, "11");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "+00:00:00.117" + "'", str57, "+00:00:00.117");
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 874L + "'", long59 == 874L);
        org.junit.Assert.assertNotNull(dateTimeZone60);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 52L + "'", long62 == 52L);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 117 + "'", int64 == 117);
        org.junit.Assert.assertNotNull(dateTimeFieldType66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "yearOfCentury" + "'", str67, "yearOfCentury");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "yearOfCentury" + "'", str68, "yearOfCentury");
        org.junit.Assert.assertNotNull(durationFieldType69);
        org.junit.Assert.assertNotNull(localDateTime71);
        org.junit.Assert.assertNotNull(localDateTime73);
        org.junit.Assert.assertNotNull(localDateTime75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-1) + "'", int76 == (-1));
    }

    @Test
    public void test08394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08394");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime1.plusMinutes((int) '#');
        org.joda.time.LocalDateTime localDateTime8 = localDateTime1.minusMinutes((int) (short) 1);
        org.joda.time.LocalDateTime.Property property9 = localDateTime8.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime();
        boolean boolean12 = localDateTime10.isBefore((org.joda.time.ReadablePartial) localDateTime11);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime11.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property15 = localDateTime11.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime16 = property15.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField17 = property15.getField();
        long long19 = dateTimeField17.remainder((-1L));
        org.joda.time.DurationField durationField20 = dateTimeField17.getRangeDurationField();
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime();
        boolean boolean23 = localDateTime21.isBefore((org.joda.time.ReadablePartial) localDateTime22);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime22.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property26 = localDateTime22.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime27 = property26.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField28 = property26.getField();
        int int31 = dateTimeField28.getDifference(1L, 86399999L);
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime();
        int int33 = localDateTime32.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime35 = localDateTime32.minusMonths((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime35.minusMonths((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime37.plusWeeks(22);
        org.joda.time.LocalDateTime.Property property40 = localDateTime39.dayOfMonth();
        java.util.Locale locale45 = new java.util.Locale("11", "weekyear", "fra");
        java.lang.String str46 = locale45.getDisplayName();
        java.lang.String str47 = dateTimeField28.getAsShortText((org.joda.time.ReadablePartial) localDateTime39, (int) (byte) 1, locale45);
        int int48 = dateTimeField17.getMaximumShortTextLength(locale45);
        boolean boolean49 = locale45.hasExtensions();
        int int50 = property9.getMaximumTextLength(locale45);
        java.lang.String str51 = property9.getName();
        org.joda.time.LocalDateTime localDateTime53 = property9.addToCopy((long) 19034);
        org.joda.time.LocalDateTime localDateTime54 = property9.roundHalfEvenCopy();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 86399999L + "'", long19 == 86399999L);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 22 + "'", int33 == 22);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertEquals(locale45.toString(), "11_WEEKYEAR_fra");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "11 (WEEKYEAR,fra)" + "'", str46, "11 (WEEKYEAR,fra)");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "1" + "'", str47, "1");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2 + "'", int48 == 2);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2 + "'", int50 == 2);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "dayOfMonth" + "'", str51, "dayOfMonth");
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(localDateTime54);
    }

    @Test
    public void test08395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08395");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("dayOfYear", (double) (-635L));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: weight=-635.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08396");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) 'x');
        java.lang.String str3 = dateTimeZone1.getNameKey((long) ' ');
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        boolean boolean6 = localDateTime4.isBefore((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.plusSeconds((int) (byte) 100);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray9 = localDateTime8.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime8.plusSeconds((int) (short) 1);
        int int12 = localDateTime8.getYearOfCentury();
        org.joda.time.LocalDateTime.Property property13 = localDateTime8.millisOfSecond();
        boolean boolean14 = dateTimeZone1.isLocalDateTimeGap(localDateTime8);
        org.joda.time.Chronology chronology15 = localDateTime8.getChronology();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 22 + "'", int12 == 22);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(chronology15);
    }

    @Test
    public void test08397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08397");
        org.joda.time.tz.NameProvider nameProvider0 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale1 = java.util.Locale.FRENCH;
        java.lang.String str2 = locale1.getDisplayName();
        java.lang.String str5 = nameProvider0.getShortName(locale1, "2022-02-11T09:47:59.470", "2022-02-11T09:48:12.308");
        java.lang.String str6 = locale1.getScript();
        java.lang.String str7 = locale1.getDisplayVariant();
        java.lang.Object obj8 = locale1.clone();
        org.junit.Assert.assertNotNull(nameProvider0);
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "French" + "'", str2, "French");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(obj8);
        org.junit.Assert.assertEquals(obj8.toString(), "fr");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj8), "fr");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj8), "fr");
    }

    @Test
    public void test08398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08398");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property5 = localDateTime1.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime6 = property5.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField7 = property5.getField();
        int int8 = dateTimeField7.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime();
        int int10 = localDateTime9.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime9.minusMonths((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.minusMonths((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.plusWeeks(22);
        java.util.Locale locale18 = java.util.Locale.JAPANESE;
        java.lang.String str19 = dateTimeField7.getAsShortText((org.joda.time.ReadablePartial) localDateTime16, 22, locale18);
        int int21 = dateTimeField7.getLeapAmount((long) (byte) 1);
        int int23 = dateTimeField7.getMaximumValue((long) 35293506);
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime();
        boolean boolean26 = localDateTime24.isBefore((org.joda.time.ReadablePartial) localDateTime25);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime25.plusSeconds((int) (byte) 100);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter29 = null;
        java.lang.String str30 = localDateTime25.toString(dateTimeFormatter29);
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        org.joda.time.LocalDateTime.Property property32 = localDateTime25.property(dateTimeFieldType31);
        org.joda.time.LocalDateTime localDateTime33 = property32.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime();
        boolean boolean37 = localDateTime35.isBefore((org.joda.time.ReadablePartial) localDateTime36);
        int[] intArray38 = localDateTime36.getValues();
        org.joda.time.LocalDateTime localDateTime40 = localDateTime36.plusYears((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime();
        boolean boolean43 = localDateTime41.isBefore((org.joda.time.ReadablePartial) localDateTime42);
        int[] intArray44 = localDateTime42.getValues();
        org.joda.time.LocalDateTime localDateTime45 = localDateTime36.withFields((org.joda.time.ReadablePartial) localDateTime42);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime45.minusMillis((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime49 = localDateTime47.minusSeconds((int) '#');
        org.joda.time.LocalDateTime localDateTime51 = localDateTime49.withWeekOfWeekyear(50);
        org.joda.time.LocalDateTime localDateTime53 = localDateTime49.withMinuteOfHour((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime55 = localDateTime49.minusMonths((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime57 = localDateTime55.plusYears(2022);
        int[] intArray58 = localDateTime55.getValues();
        int[] intArray60 = dateTimeField7.addWrapPartial((org.joda.time.ReadablePartial) localDateTime33, 31, intArray58, 0);
        org.joda.time.LocalDateTime localDateTime61 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime63 = localDateTime61.minusMillis((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime65 = localDateTime63.plusDays(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType66 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDateTime localDateTime68 = localDateTime63.withField(dateTimeFieldType66, 0);
        org.joda.time.LocalDateTime localDateTime69 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime70 = new org.joda.time.LocalDateTime();
        boolean boolean71 = localDateTime69.isBefore((org.joda.time.ReadablePartial) localDateTime70);
        org.joda.time.LocalDateTime localDateTime73 = localDateTime70.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime75 = localDateTime70.plusMinutes((int) '#');
        org.joda.time.LocalDateTime localDateTime77 = localDateTime70.minusMinutes((int) (short) 1);
        boolean boolean78 = localDateTime68.isAfter((org.joda.time.ReadablePartial) localDateTime77);
        org.joda.time.LocalDateTime localDateTime80 = localDateTime77.plusSeconds(42);
        boolean boolean81 = localDateTime33.isBefore((org.joda.time.ReadablePartial) localDateTime77);
        org.joda.time.LocalDateTime.Property property82 = localDateTime77.dayOfYear();
        org.joda.time.ReadableDuration readableDuration83 = null;
        org.joda.time.LocalDateTime localDateTime85 = localDateTime77.withDurationAdded(readableDuration83, 21840);
        // The following exception was thrown during execution in test generation
        try {
            int int87 = localDateTime77.getValue(1968);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 1968");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 31 + "'", int8 == 31);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 22 + "'", int10 == 22);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "22" + "'", str19, "22");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 31 + "'", int23 == 31);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(localDateTime28);
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "2022-02-11T09:54:16.439" + "'", str30, "2022-02-11T09:54:16.439");
        org.junit.Assert.assertNotNull(dateTimeFieldType31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(intArray38);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[2022, 2, 11, 35656439]");
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(intArray44);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[2022, 2, 11, 35656439]");
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(intArray58);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[2021, 4, 11, 35621339]");
        org.junit.Assert.assertNotNull(intArray60);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[2021, 4, 11, 35621339]");
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertNotNull(dateTimeFieldType66);
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(localDateTime73);
        org.junit.Assert.assertNotNull(localDateTime75);
        org.junit.Assert.assertNotNull(localDateTime77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(localDateTime80);
// flaky:         org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(property82);
        org.junit.Assert.assertNotNull(localDateTime85);
    }

    @Test
    public void test08399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08399");
        java.util.Locale locale0 = java.util.Locale.FRENCH;
        java.util.Set<java.lang.String> strSet1 = locale0.getUnicodeLocaleAttributes();
        java.lang.String str2 = locale0.getVariant();
        java.lang.String str3 = locale0.toLanguageTag();
        java.lang.Object obj4 = locale0.clone();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "fr" + "'", str3, "fr");
        org.junit.Assert.assertNotNull(obj4);
        org.junit.Assert.assertEquals(obj4.toString(), "fr");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj4), "fr");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj4), "fr");
    }

    @Test
    public void test08400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08400");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property5 = localDateTime1.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime6 = property5.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField7 = property5.getField();
        long long9 = dateTimeField7.remainder((-1L));
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = dateTimeField7.getType();
        boolean boolean11 = dateTimeField7.isSupported();
        boolean boolean12 = dateTimeField7.isLenient();
        org.joda.time.ReadablePartial readablePartial13 = null;
        java.util.Locale locale15 = java.util.Locale.CHINESE;
        java.util.Locale locale16 = java.util.Locale.ITALIAN;
        java.lang.String str17 = locale16.getDisplayCountry();
        java.util.Set<java.lang.String> strSet18 = locale16.getUnicodeLocaleAttributes();
        java.lang.String str19 = locale15.getDisplayScript(locale16);
        java.lang.String str20 = dateTimeField7.getAsText(readablePartial13, 35282145, locale15);
        org.joda.time.ReadablePartial readablePartial21 = null;
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime();
        boolean boolean24 = localDateTime22.isBefore((org.joda.time.ReadablePartial) localDateTime23);
        int[] intArray25 = localDateTime23.getValues();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime23.plusYears((int) (byte) -1);
        int[] intArray28 = localDateTime23.getValues();
        int int29 = dateTimeField7.getMinimumValue(readablePartial21, intArray28);
        java.lang.String str31 = dateTimeField7.getAsText((long) 882);
        int int33 = dateTimeField7.get(35354749L);
        boolean boolean34 = dateTimeField7.isLenient();
        org.joda.time.DurationField durationField35 = dateTimeField7.getRangeDurationField();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 86399999L + "'", long9 == 86399999L);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "it");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(strSet18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "35282145" + "'", str20, "35282145");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(intArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[2022, 2, 11, 35656493]");
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(intArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[2022, 2, 11, 35656493]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "1" + "'", str31, "1");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(durationField35);
    }

    @Test
    public void test08401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08401");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((int) 'x', 366, 34142907, (-544), 1861200000, 60);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -544 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08402");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property5 = localDateTime1.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime6 = property5.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField7 = property5.getField();
        int int8 = dateTimeField7.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime();
        int int10 = localDateTime9.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime9.minusMonths((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.minusMonths((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.plusWeeks(22);
        java.util.Locale locale18 = java.util.Locale.JAPANESE;
        java.lang.String str19 = dateTimeField7.getAsShortText((org.joda.time.ReadablePartial) localDateTime16, 22, locale18);
        int int20 = dateTimeField7.getMinimumValue();
        boolean boolean21 = dateTimeField7.isLenient();
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime();
        int int23 = localDateTime22.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime22.minusMonths((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.minusMonths((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.plusWeeks(22);
        org.joda.time.LocalDateTime.Property property30 = localDateTime29.dayOfYear();
        org.joda.time.LocalDateTime.Property property31 = localDateTime29.secondOfMinute();
        int[] intArray32 = null;
        int int33 = dateTimeField7.getMinimumValue((org.joda.time.ReadablePartial) localDateTime29, intArray32);
        int int35 = dateTimeField7.get(0L);
        int int37 = dateTimeField7.getMaximumValue(35391622L);
        java.util.Locale locale38 = java.util.Locale.ITALIAN;
        java.lang.String str39 = locale38.getDisplayCountry();
        java.util.Set<java.lang.String> strSet40 = locale38.getUnicodeLocaleAttributes();
        java.util.Locale locale41 = locale38.stripExtensions();
        int int42 = dateTimeField7.getMaximumShortTextLength(locale38);
        long long44 = dateTimeField7.roundCeiling((long) 747);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 31 + "'", int8 == 31);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 22 + "'", int10 == 22);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "22" + "'", str19, "22");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 22 + "'", int23 == 22);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 31 + "'", int37 == 31);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "it");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(strSet40);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "it");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2 + "'", int42 == 2);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 86400000L + "'", long44 == 86400000L);
    }

    @Test
    public void test08403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08403");
        int int2 = org.joda.time.field.FieldUtils.safeMultiplyToInt((-3L), 24841686L);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-74525058) + "'", int2 == (-74525058));
    }

    @Test
    public void test08404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08404");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.millisOfDay();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime0.plusMonths((int) (byte) 1);
        org.joda.time.LocalDateTime.Property property6 = localDateTime0.weekyear();
        org.joda.time.LocalDateTime localDateTime7 = property6.roundHalfCeilingCopy();
        java.lang.Object obj8 = null;
        boolean boolean9 = property6.equals(obj8);
        java.util.Locale locale10 = null;
        int int11 = property6.getMaximumTextLength(locale10);
        org.joda.time.DurationField durationField12 = property6.getDurationField();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 9 + "'", int11 == 9);
        org.junit.Assert.assertNotNull(durationField12);
    }

    @Test
    public void test08405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08405");
        // The following exception was thrown during execution in test generation
        try {
            int int3 = org.joda.time.field.FieldUtils.getWrappedValue(47, 24842932, 969);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: MIN > MAX");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08406");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property5 = localDateTime1.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime6 = property5.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField7 = property5.getField();
        long long10 = dateTimeField7.addWrapField((long) 6, (int) (byte) 0);
        java.lang.String str12 = dateTimeField7.getAsShortText((long) (byte) 0);
        java.lang.String str13 = dateTimeField7.getName();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minusMillis((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.plusDays(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime16.withField(dateTimeFieldType19, 0);
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime();
        boolean boolean24 = localDateTime22.isBefore((org.joda.time.ReadablePartial) localDateTime23);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime23.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime23.plusMinutes((int) '#');
        org.joda.time.LocalDateTime localDateTime30 = localDateTime23.minusMinutes((int) (short) 1);
        boolean boolean31 = localDateTime21.isAfter((org.joda.time.ReadablePartial) localDateTime30);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime30.withMillisOfSecond(50);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime30.minusSeconds((int) (byte) -1);
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.getDefault();
        java.util.Locale locale39 = null;
        java.lang.String str40 = dateTimeZone37.getName((long) (short) 10, locale39);
        long long42 = dateTimeZone36.getMillisKeepLocal(dateTimeZone37, (long) 874);
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.getDefault();
        long long45 = dateTimeZone37.getMillisKeepLocal(dateTimeZone43, (long) '4');
        int int47 = dateTimeZone37.getOffsetFromLocal((long) 83);
        long long51 = dateTimeZone37.convertLocalToUTC((long) 1, true, 0L);
        java.util.Locale locale53 = java.util.Locale.ROOT;
        java.lang.String str54 = locale53.getDisplayName();
        java.lang.String str55 = dateTimeZone37.getShortName((long) (-120), locale53);
        long long57 = dateTimeZone37.previousTransition(35288124L);
        java.util.Locale locale59 = java.util.Locale.CHINESE;
        java.lang.String str60 = locale59.toLanguageTag();
        java.lang.String str61 = dateTimeZone37.getName((long) (-35274908), locale59);
        java.util.Locale.Category category62 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale63 = java.util.Locale.getDefault(category62);
        java.lang.String str64 = locale63.getDisplayName();
        java.util.Locale locale67 = new java.util.Locale("fra", "");
        java.util.Set<java.lang.String> strSet68 = locale67.getUnicodeLocaleAttributes();
        java.lang.String str69 = locale67.getScript();
        java.util.Set<java.lang.Character> charSet70 = locale67.getExtensionKeys();
        java.util.Set<java.lang.String> strSet71 = locale67.getUnicodeLocaleKeys();
        java.lang.String str72 = locale67.getDisplayName();
        java.lang.String str73 = locale63.getDisplayLanguage(locale67);
        java.lang.String str74 = locale59.getDisplayVariant(locale67);
        java.lang.String str75 = dateTimeField7.getAsShortText((org.joda.time.ReadablePartial) localDateTime35, locale67);
        long long77 = dateTimeField7.roundHalfEven(35294270L);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 6L + "'", long10 == 6L);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "1" + "'", str12, "1");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "dayOfMonth" + "'", str13, "dayOfMonth");
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "+00:00:00.117" + "'", str40, "+00:00:00.117");
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 874L + "'", long42 == 874L);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 52L + "'", long45 == 52L);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 117 + "'", int47 == 117);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + (-116L) + "'", long51 == (-116L));
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "+00:00:00.117" + "'", str55, "+00:00:00.117");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 35288124L + "'", long57 == 35288124L);
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "zh" + "'", str60, "zh");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "+00:00:00.117" + "'", str61, "+00:00:00.117");
        org.junit.Assert.assertTrue("'" + category62 + "' != '" + java.util.Locale.Category.FORMAT + "'", category62.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "Korean" + "'", str64, "Korean");
        org.junit.Assert.assertEquals(locale67.toString(), "fra");
        org.junit.Assert.assertNotNull(strSet68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertNotNull(charSet70);
        org.junit.Assert.assertNotNull(strSet71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "fra" + "'", str72, "fra");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "Korean" + "'", str73, "Korean");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "11" + "'", str75, "11");
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 0L + "'", long77 == 0L);
    }

    @Test
    public void test08407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08407");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property5 = localDateTime1.dayOfMonth();
        boolean boolean6 = property5.isLeap();
        org.joda.time.LocalDateTime localDateTime8 = property5.addWrapFieldToCopy((int) (short) 1);
        org.joda.time.LocalDateTime.Property property9 = localDateTime8.monthOfYear();
        long long10 = property9.remainder();
        org.joda.time.Interval interval11 = property9.toInterval();
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime();
        boolean boolean14 = localDateTime12.isBefore((org.joda.time.ReadablePartial) localDateTime13);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime13.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime13.plusMinutes((int) '#');
        org.joda.time.LocalDateTime localDateTime20 = localDateTime13.plusMonths(0);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.minusWeeks(5);
        org.joda.time.Chronology chronology23 = localDateTime20.getChronology();
        org.joda.time.LocalDateTime localDateTime24 = org.joda.time.LocalDateTime.now(chronology23);
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime(chronology23);
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime(chronology23);
        org.joda.time.LocalDateTime localDateTime27 = org.joda.time.LocalDateTime.now(chronology23);
        org.joda.time.LocalDateTime.Property property28 = localDateTime27.weekyear();
        int int29 = property9.compareTo((org.joda.time.ReadablePartial) localDateTime27);
        java.util.Date date30 = localDateTime27.toDate();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
// flaky:         org.junit.Assert.assertTrue("'" + long10 + "' != '" + 986056615L + "'", long10 == 986056615L);
        org.junit.Assert.assertNotNull(interval11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(date30);
// flaky:         org.junit.Assert.assertEquals(date30.toString(), "Fri Feb 11 09:54:17 GMT+00:00 2022");
    }

    @Test
    public void test08408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08408");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property5 = localDateTime1.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime6 = property5.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField7 = property5.getField();
        java.util.Locale locale8 = java.util.Locale.JAPAN;
        java.util.Locale locale9 = java.util.Locale.FRENCH;
        java.lang.String str10 = locale8.getDisplayCountry(locale9);
        int int11 = property5.getMaximumTextLength(locale9);
        java.lang.String str12 = property5.getName();
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.minusMillis((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.plusDays(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime15.withField(dateTimeFieldType18, 0);
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime();
        boolean boolean23 = localDateTime21.isBefore((org.joda.time.ReadablePartial) localDateTime22);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime22.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime22.plusMinutes((int) '#');
        org.joda.time.LocalDateTime localDateTime29 = localDateTime22.minusMinutes((int) (short) 1);
        boolean boolean30 = localDateTime20.isAfter((org.joda.time.ReadablePartial) localDateTime29);
        org.joda.time.LocalDateTime.Property property31 = localDateTime20.secondOfMinute();
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = property31.getFieldType();
        org.joda.time.LocalDateTime localDateTime33 = property31.roundHalfFloorCopy();
        org.joda.time.LocalDateTime.Property property34 = localDateTime33.centuryOfEra();
        org.joda.time.ReadableDuration readableDuration35 = null;
        org.joda.time.LocalDateTime localDateTime37 = localDateTime33.withDurationAdded(readableDuration35, 59);
        int int38 = property5.compareTo((org.joda.time.ReadablePartial) localDateTime37);
        org.joda.time.DurationField durationField39 = property5.getDurationField();
        java.lang.String str40 = property5.getAsText();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Japon" + "'", str10, "Japon");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "dayOfMonth" + "'", str12, "dayOfMonth");
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "11" + "'", str40, "11");
    }

    @Test
    public void test08409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08409");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property5 = localDateTime1.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime6 = property5.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField7 = property5.getField();
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime();
        boolean boolean10 = localDateTime8.isBefore((org.joda.time.ReadablePartial) localDateTime9);
        int[] intArray11 = localDateTime9.getValues();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime9.plusYears((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime();
        boolean boolean16 = localDateTime14.isBefore((org.joda.time.ReadablePartial) localDateTime15);
        int[] intArray17 = localDateTime15.getValues();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime9.withFields((org.joda.time.ReadablePartial) localDateTime15);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.minusMillis((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.minusSeconds((int) '#');
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.withWeekOfWeekyear(50);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime22.withMinuteOfHour((int) (byte) 0);
        int int27 = dateTimeField7.getMinimumValue((org.joda.time.ReadablePartial) localDateTime22);
        java.util.Locale locale30 = new java.util.Locale("", "weekyear");
        java.util.Set<java.lang.String> strSet31 = locale30.getUnicodeLocaleAttributes();
        java.util.Set<java.lang.String> strSet32 = locale30.getUnicodeLocaleAttributes();
        int int33 = dateTimeField7.getMaximumShortTextLength(locale30);
        long long35 = dateTimeField7.roundHalfEven((long) 53);
        long long37 = dateTimeField7.roundHalfCeiling(2246400000L);
        long long39 = dateTimeField7.roundHalfCeiling(113132888124L);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[2022, 2, 11, 35656655]");
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(intArray17);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[2022, 2, 11, 35656655]");
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertEquals(locale30.toString(), "_WEEKYEAR");
        org.junit.Assert.assertNotNull(strSet31);
        org.junit.Assert.assertNotNull(strSet32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2 + "'", int33 == 2);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 2246400000L + "'", long37 == 2246400000L);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 113097600000L + "'", long39 == 113097600000L);
    }

    @Test
    public void test08410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08410");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.LanguageRange[] languageRangeArray1 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList2 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList2, languageRangeArray1);
        java.util.Locale[] localeArray4 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList5 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList5, localeArray4);
        java.util.Locale locale7 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList2, (java.util.Collection<java.util.Locale>) localeList5);
        java.util.Locale.LanguageRange[] languageRangeArray8 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList9 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList9, languageRangeArray8);
        java.util.Locale[] localeArray11 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList12 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList12, localeArray11);
        java.util.Locale locale14 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList9, (java.util.Collection<java.util.Locale>) localeList12);
        java.util.Locale.FilteringMode filteringMode15 = null;
        java.util.List<java.util.Locale> localeList16 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList2, (java.util.Collection<java.util.Locale>) localeList12, filteringMode15);
        java.util.Locale locale17 = java.util.Locale.FRENCH;
        java.util.Set<java.lang.String> strSet18 = locale17.getUnicodeLocaleAttributes();
        java.lang.Object[] objArray19 = strSet18.toArray();
        java.util.Locale.FilteringMode filteringMode20 = java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList21 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList2, (java.util.Collection<java.lang.String>) strSet18, filteringMode20);
        java.util.Locale locale22 = java.util.Locale.ITALIAN;
        java.lang.String str23 = locale22.getDisplayCountry();
        boolean boolean24 = strSet18.equals((java.lang.Object) locale22);
        java.util.Locale.Builder builder25 = builder0.setLocale(locale22);
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime();
        int int27 = localDateTime26.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime29 = localDateTime26.minusMonths((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.minusMonths((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property32 = localDateTime29.minuteOfHour();
        java.util.Locale locale33 = java.util.Locale.JAPAN;
        java.util.Locale locale34 = java.util.Locale.ITALY;
        java.lang.String str35 = locale33.getDisplayScript(locale34);
        int int36 = property32.getMaximumShortTextLength(locale34);
        java.util.Locale.Builder builder37 = builder0.setLocale(locale34);
        java.util.Locale.Builder builder38 = builder0.clearExtensions();
        java.util.Locale.Builder builder39 = builder0.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder41 = builder39.setRegion("2022-02-11T09:52:04.100");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed region: 2022-02-11T09:52:04.100 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(languageRangeArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(localeArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(locale7);
        org.junit.Assert.assertNotNull(languageRangeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(localeArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(locale14);
        org.junit.Assert.assertNotNull(localeList16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet18);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[]");
        org.junit.Assert.assertTrue("'" + filteringMode20 + "' != '" + java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES + "'", filteringMode20.equals(java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList21);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "it");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 22 + "'", int27 == 22);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2 + "'", int36 == 2);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
    }

    @Test
    public void test08411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08411");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.minuteOfHour();
        java.lang.String str1 = dateTimeFieldType0.getName();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.field.FieldUtils.verifyValueBounds(dateTimeFieldType0, 890, 35306375, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 890 for minuteOfHour must be in the range [35306375,0]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "minuteOfHour" + "'", str1, "minuteOfHour");
    }

    @Test
    public void test08412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08412");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.minusMillis((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.plusDays(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.withField(dateTimeFieldType5, 0);
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime();
        boolean boolean10 = localDateTime8.isBefore((org.joda.time.ReadablePartial) localDateTime9);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime9.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime9.plusMinutes((int) '#');
        org.joda.time.LocalDateTime localDateTime16 = localDateTime9.minusMinutes((int) (short) 1);
        boolean boolean17 = localDateTime7.isAfter((org.joda.time.ReadablePartial) localDateTime16);
        org.joda.time.LocalDateTime.Property property18 = localDateTime7.secondOfMinute();
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = property18.getFieldType();
        org.joda.time.LocalDateTime localDateTime20 = property18.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime();
        boolean boolean23 = localDateTime21.isBefore((org.joda.time.ReadablePartial) localDateTime22);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime22.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime22.plusMinutes((int) '#');
        org.joda.time.LocalDateTime localDateTime29 = localDateTime22.minusMinutes((int) (short) 1);
        org.joda.time.ReadableDuration readableDuration30 = null;
        org.joda.time.LocalDateTime localDateTime32 = localDateTime22.withDurationAdded(readableDuration30, (int) (short) 100);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter33 = null;
        java.lang.String str34 = localDateTime22.toString(dateTimeFormatter33);
        boolean boolean35 = localDateTime20.isAfter((org.joda.time.ReadablePartial) localDateTime22);
        int int36 = localDateTime20.getMinuteOfHour();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime40 = localDateTime20.withDate(32820117, 36, 426);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 36 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime32);
// flaky:         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "2022-02-11T09:54:16.710" + "'", str34, "2022-02-11T09:54:16.710");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int36 + "' != '" + 54 + "'", int36 == 54);
    }

    @Test
    public void test08413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08413");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property5 = localDateTime1.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime6 = property5.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField7 = property5.getField();
        long long10 = dateTimeField7.addWrapField((long) 6, (int) (byte) 0);
        java.lang.String str12 = dateTimeField7.getAsShortText((long) (byte) 0);
        int int13 = dateTimeField7.getMaximumValue();
        long long15 = dateTimeField7.roundHalfFloor((long) (-120));
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime();
        boolean boolean19 = localDateTime17.isBefore((org.joda.time.ReadablePartial) localDateTime18);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime18.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property22 = localDateTime18.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime23 = property22.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField24 = property22.getField();
        long long26 = dateTimeField24.remainder((-1L));
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = dateTimeField24.getType();
        long long30 = dateTimeField24.getDifferenceAsLong(52L, (long) 10);
        long long33 = dateTimeField24.getDifferenceAsLong(0L, (long) 83);
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime();
        boolean boolean36 = localDateTime34.isBefore((org.joda.time.ReadablePartial) localDateTime35);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime35.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property39 = localDateTime35.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime40 = property39.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField41 = property39.getField();
        long long44 = dateTimeField41.addWrapField((long) 6, (int) (byte) 0);
        java.lang.String str46 = dateTimeField41.getAsShortText((long) (byte) 0);
        java.lang.String str48 = dateTimeField41.getAsShortText((-116L));
        long long50 = dateTimeField41.roundCeiling((long) 11);
        int int51 = dateTimeField41.getMaximumValue();
        java.util.Locale locale52 = java.util.Locale.KOREAN;
        java.lang.String str53 = locale52.getCountry();
        int int54 = dateTimeField41.getMaximumTextLength(locale52);
        int int55 = dateTimeField24.getMaximumShortTextLength(locale52);
        java.lang.String str56 = dateTimeField7.getAsText((int) '#', locale52);
        long long58 = dateTimeField7.roundHalfEven(0L);
        java.util.Locale locale61 = java.util.Locale.forLanguageTag("2022-02-11T09:47:54.353");
        java.lang.String str62 = locale61.toLanguageTag();
        java.lang.String str63 = dateTimeField7.getAsText(903, locale61);
        java.lang.String str64 = locale61.getCountry();
        java.lang.String str65 = locale61.getScript();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 6L + "'", long10 == 6L);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "1" + "'", str12, "1");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 31 + "'", int13 == 31);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 86399999L + "'", long26 == 86399999L);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 6L + "'", long44 == 6L);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "1" + "'", str46, "1");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "31" + "'", str48, "31");
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 86400000L + "'", long50 == 86400000L);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 31 + "'", int51 == 31);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 2 + "'", int54 == 2);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 2 + "'", int55 == 2);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "35" + "'", str56, "35");
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 0L + "'", long58 == 0L);
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "und" + "'", str62, "und");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "903" + "'", str63, "903");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
    }

    @Test
    public void test08414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08414");
        org.joda.time.tz.Provider provider0 = org.joda.time.DateTimeZone.getProvider();
        org.joda.time.DateTimeZone.setProvider(provider0);
        org.joda.time.DateTimeZone.setProvider(provider0);
        java.util.Set<java.lang.String> strSet3 = provider0.getAvailableIDs();
        java.util.Set<java.lang.String> strSet4 = provider0.getAvailableIDs();
        java.lang.String[] strArray9 = new java.lang.String[] { "fra", "", "+00:00", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet10 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet10, strArray9);
        java.lang.Object[] objArray12 = strSet10.toArray();
        boolean boolean13 = strSet10.isEmpty();
        java.util.Locale.LanguageRange[] languageRangeArray14 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList15 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList15, languageRangeArray14);
        java.util.Locale[] localeArray17 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList18 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList18, localeArray17);
        java.util.Locale locale20 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList15, (java.util.Collection<java.util.Locale>) localeList18);
        boolean boolean21 = strSet10.removeAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList15);
        java.util.Locale.LanguageRange[] languageRangeArray22 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList23 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList23, languageRangeArray22);
        java.util.Locale[] localeArray25 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList26 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList26, localeArray25);
        java.util.Locale locale28 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList23, (java.util.Collection<java.util.Locale>) localeList26);
        java.util.Locale.FilteringMode filteringMode29 = java.util.Locale.FilteringMode.EXTENDED_FILTERING;
        java.util.List<java.util.Locale> localeList30 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList15, (java.util.Collection<java.util.Locale>) localeList26, filteringMode29);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap31 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList32 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList15, strMap31);
        java.util.stream.Stream<java.util.Locale.LanguageRange> languageRangeStream33 = languageRangeList32.stream();
        java.util.Collection<java.lang.String> strCollection34 = null;
        java.util.List<java.lang.String> strList35 = java.util.Locale.filterTags(languageRangeList32, strCollection34);
        java.lang.String[] strArray40 = new java.lang.String[] { "fra", "", "+00:00", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet41 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet41, strArray40);
        java.lang.Object[] objArray43 = strSet41.toArray();
        boolean boolean44 = strSet41.isEmpty();
        java.util.Locale.LanguageRange[] languageRangeArray45 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList46 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList46, languageRangeArray45);
        java.util.Locale[] localeArray48 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList49 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList49, localeArray48);
        java.util.Locale locale51 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList46, (java.util.Collection<java.util.Locale>) localeList49);
        boolean boolean52 = strSet41.removeAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList46);
        java.util.Locale.LanguageRange[] languageRangeArray53 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList54 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList54, languageRangeArray53);
        java.util.Locale[] localeArray56 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList57 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList57, localeArray56);
        java.util.Locale locale59 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList54, (java.util.Collection<java.util.Locale>) localeList57);
        java.util.Locale.FilteringMode filteringMode60 = java.util.Locale.FilteringMode.EXTENDED_FILTERING;
        java.util.List<java.util.Locale> localeList61 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList46, (java.util.Collection<java.util.Locale>) localeList57, filteringMode60);
        java.util.Locale locale62 = java.util.Locale.lookup(languageRangeList32, (java.util.Collection<java.util.Locale>) localeList57);
        boolean boolean63 = strSet4.containsAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList32);
        java.util.stream.Stream<java.util.Locale.LanguageRange> languageRangeStream64 = languageRangeList32.stream();
        java.util.stream.Stream<java.util.Locale.LanguageRange> languageRangeStream65 = languageRangeList32.parallelStream();
        org.junit.Assert.assertNotNull(provider0);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(objArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray12), "[fra, , +00:00, hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray12), "[fra, , +00:00, hi!]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(languageRangeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(localeArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(locale20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(languageRangeArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(localeArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(locale28);
        org.junit.Assert.assertTrue("'" + filteringMode29 + "' != '" + java.util.Locale.FilteringMode.EXTENDED_FILTERING + "'", filteringMode29.equals(java.util.Locale.FilteringMode.EXTENDED_FILTERING));
        org.junit.Assert.assertNotNull(localeList30);
        org.junit.Assert.assertNotNull(languageRangeList32);
        org.junit.Assert.assertNotNull(languageRangeStream33);
        org.junit.Assert.assertNotNull(strList35);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(objArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray43), "[fra, , +00:00, hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray43), "[fra, , +00:00, hi!]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(languageRangeArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(localeArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNull(locale51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(languageRangeArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(localeArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNull(locale59);
        org.junit.Assert.assertTrue("'" + filteringMode60 + "' != '" + java.util.Locale.FilteringMode.EXTENDED_FILTERING + "'", filteringMode60.equals(java.util.Locale.FilteringMode.EXTENDED_FILTERING));
        org.junit.Assert.assertNotNull(localeList61);
        org.junit.Assert.assertNull(locale62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(languageRangeStream64);
        org.junit.Assert.assertNotNull(languageRangeStream65);
    }

    @Test
    public void test08415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08415");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.millisOfDay();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime0.plusMonths((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusMonths(59);
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.plus(readableDuration8);
        int int10 = localDateTime9.getWeekyear();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2017 + "'", int10 == 2017);
    }

    @Test
    public void test08416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08416");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property5 = localDateTime1.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime6 = property5.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField7 = property5.getField();
        int int10 = dateTimeField7.getDifference(1L, 86399999L);
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime();
        int int12 = localDateTime11.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime11.minusMonths((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minusMonths((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.plusWeeks(22);
        org.joda.time.LocalDateTime.Property property19 = localDateTime18.dayOfMonth();
        java.util.Locale locale24 = new java.util.Locale("11", "weekyear", "fra");
        java.lang.String str25 = locale24.getDisplayName();
        java.lang.String str26 = dateTimeField7.getAsShortText((org.joda.time.ReadablePartial) localDateTime18, (int) (byte) 1, locale24);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime18.withDayOfMonth(10);
        org.joda.time.LocalDateTime.Property property29 = localDateTime18.year();
        org.joda.time.DateTimeField dateTimeField30 = property29.getField();
        long long32 = dateTimeField30.roundCeiling(8120L);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 22 + "'", int12 == 22);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertEquals(locale24.toString(), "11_WEEKYEAR_fra");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "11 (WEEKYEAR,fra)" + "'", str25, "11 (WEEKYEAR,fra)");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "1" + "'", str26, "1");
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 31536000000L + "'", long32 == 31536000000L);
    }

    @Test
    public void test08417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08417");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.LanguageRange[] languageRangeArray1 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList2 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList2, languageRangeArray1);
        java.util.Locale[] localeArray4 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList5 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList5, localeArray4);
        java.util.Locale locale7 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList2, (java.util.Collection<java.util.Locale>) localeList5);
        java.util.Locale.LanguageRange[] languageRangeArray8 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList9 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList9, languageRangeArray8);
        java.util.Locale[] localeArray11 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList12 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList12, localeArray11);
        java.util.Locale locale14 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList9, (java.util.Collection<java.util.Locale>) localeList12);
        java.util.Locale.FilteringMode filteringMode15 = null;
        java.util.List<java.util.Locale> localeList16 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList2, (java.util.Collection<java.util.Locale>) localeList12, filteringMode15);
        java.util.Locale locale17 = java.util.Locale.FRENCH;
        java.util.Set<java.lang.String> strSet18 = locale17.getUnicodeLocaleAttributes();
        java.lang.Object[] objArray19 = strSet18.toArray();
        java.util.Locale.FilteringMode filteringMode20 = java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList21 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList2, (java.util.Collection<java.lang.String>) strSet18, filteringMode20);
        java.util.Locale locale22 = java.util.Locale.ITALIAN;
        java.lang.String str23 = locale22.getDisplayCountry();
        boolean boolean24 = strSet18.equals((java.lang.Object) locale22);
        java.util.Locale.Builder builder25 = builder0.setLocale(locale22);
        java.lang.String str26 = locale22.getISO3Country();
        java.lang.Object obj27 = null;
        boolean boolean28 = locale22.equals(obj27);
        org.junit.Assert.assertNotNull(languageRangeArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(localeArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNull(locale7);
        org.junit.Assert.assertNotNull(languageRangeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(localeArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(locale14);
        org.junit.Assert.assertNotNull(localeList16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet18);
        org.junit.Assert.assertNotNull(objArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray19), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray19), "[]");
        org.junit.Assert.assertTrue("'" + filteringMode20 + "' != '" + java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES + "'", filteringMode20.equals(java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList21);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "it");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test08418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08418");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Locale[] localeArray3 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList4 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList4, localeArray3);
        java.util.Locale locale6 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList4);
        java.util.Locale.LanguageRange[] languageRangeArray7 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList8 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList8, languageRangeArray7);
        java.util.Locale[] localeArray10 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList11 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList11, localeArray10);
        java.util.Locale locale13 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList8, (java.util.Collection<java.util.Locale>) localeList11);
        java.util.Locale.FilteringMode filteringMode14 = null;
        java.util.List<java.util.Locale> localeList15 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList11, filteringMode14);
        java.util.Locale locale16 = java.util.Locale.FRENCH;
        java.util.Set<java.lang.String> strSet17 = locale16.getUnicodeLocaleAttributes();
        java.lang.Object[] objArray18 = strSet17.toArray();
        java.util.Locale.FilteringMode filteringMode19 = java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList20 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet17, filteringMode19);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.getDefault();
        int int23 = dateTimeZone21.getStandardOffset((long) (-100));
        java.util.TimeZone timeZone24 = dateTimeZone21.toTimeZone();
        int int25 = timeZone24.getRawOffset();
        timeZone24.setRawOffset(50);
        java.lang.String str28 = timeZone24.getID();
        boolean boolean29 = strSet17.equals((java.lang.Object) timeZone24);
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime();
        boolean boolean32 = localDateTime30.isBefore((org.joda.time.ReadablePartial) localDateTime31);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime31.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property35 = localDateTime31.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime36 = property35.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField37 = property35.getField();
        long long40 = dateTimeField37.addWrapField((long) 6, (int) (byte) 0);
        java.lang.String str42 = dateTimeField37.getAsShortText((long) (byte) 0);
        java.lang.String str44 = dateTimeField37.getAsShortText((-116L));
        long long46 = dateTimeField37.roundCeiling((long) 11);
        java.util.Locale locale51 = new java.util.Locale("11", "weekyear", "fra");
        java.lang.String str52 = locale51.getDisplayName();
        org.joda.time.LocalDateTime localDateTime53 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime54 = new org.joda.time.LocalDateTime();
        boolean boolean55 = localDateTime53.isBefore((org.joda.time.ReadablePartial) localDateTime54);
        org.joda.time.LocalDateTime localDateTime57 = localDateTime54.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property58 = localDateTime54.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime59 = property58.withMinimumValue();
        java.util.Locale locale60 = java.util.Locale.UK;
        java.lang.String str61 = property58.getAsShortText(locale60);
        java.lang.String str62 = locale51.getDisplayScript(locale60);
        java.lang.String str63 = dateTimeField37.getAsShortText((long) 715, locale60);
        org.joda.time.LocalDateTime localDateTime64 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime65 = new org.joda.time.LocalDateTime();
        boolean boolean66 = localDateTime64.isBefore((org.joda.time.ReadablePartial) localDateTime65);
        org.joda.time.LocalDateTime localDateTime68 = localDateTime65.plusSeconds((int) (byte) 100);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter69 = null;
        java.lang.String str70 = localDateTime65.toString(dateTimeFormatter69);
        org.joda.time.DateTimeFieldType dateTimeFieldType71 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        org.joda.time.LocalDateTime.Property property72 = localDateTime65.property(dateTimeFieldType71);
        java.util.Locale locale73 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str74 = dateTimeField37.getAsText((org.joda.time.ReadablePartial) localDateTime65, locale73);
        boolean boolean75 = strSet17.equals((java.lang.Object) localDateTime65);
        java.util.Iterator<java.lang.String> strItor76 = strSet17.iterator();
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localeArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(locale6);
        org.junit.Assert.assertNotNull(languageRangeArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(localeArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(locale13);
        org.junit.Assert.assertNotNull(localeList15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet17);
        org.junit.Assert.assertNotNull(objArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray18), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray18), "[]");
        org.junit.Assert.assertTrue("'" + filteringMode19 + "' != '" + java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES + "'", filteringMode19.equals(java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 117 + "'", int23 == 117);
        org.junit.Assert.assertNotNull(timeZone24);
        org.junit.Assert.assertEquals(timeZone24.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 117 + "'", int25 == 117);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "+00:00:00.117" + "'", str28, "+00:00:00.117");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 6L + "'", long40 == 6L);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "1" + "'", str42, "1");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "31" + "'", str44, "31");
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 86400000L + "'", long46 == 86400000L);
        org.junit.Assert.assertEquals(locale51.toString(), "11_WEEKYEAR_fra");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "11 (WEEKYEAR,fra)" + "'", str52, "11 (WEEKYEAR,fra)");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "11" + "'", str61, "11");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "1" + "'", str63, "1");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(localDateTime68);
// flaky:         org.junit.Assert.assertEquals("'" + str70 + "' != '" + "2022-02-11T09:54:16.872" + "'", str70, "2022-02-11T09:54:16.872");
        org.junit.Assert.assertNotNull(dateTimeFieldType71);
        org.junit.Assert.assertNotNull(property72);
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "11" + "'", str74, "11");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(strItor76);
    }

    @Test
    public void test08419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08419");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property5 = localDateTime1.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime6 = property5.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField7 = property5.getField();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = dateTimeField7.getType();
        long long10 = dateTimeField7.roundFloor((long) (short) 0);
        long long12 = dateTimeField7.roundFloor((long) 448);
        long long15 = dateTimeField7.add(1852L, 35421774);
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime();
        int int17 = localDateTime16.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime16.minusMonths((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.minusMonths((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.plusWeeks(22);
        org.joda.time.LocalDateTime.Property property24 = localDateTime23.dayOfYear();
        org.joda.time.LocalDateTime.Property property25 = localDateTime23.secondOfMinute();
        int int26 = localDateTime23.getMonthOfYear();
        org.joda.time.LocalDateTime.Property property27 = localDateTime23.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime28 = property27.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime();
        boolean boolean32 = localDateTime30.isBefore((org.joda.time.ReadablePartial) localDateTime31);
        int[] intArray33 = localDateTime31.getValues();
        org.joda.time.LocalDateTime localDateTime35 = localDateTime31.plusYears((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime();
        boolean boolean38 = localDateTime36.isBefore((org.joda.time.ReadablePartial) localDateTime37);
        int[] intArray39 = localDateTime37.getValues();
        org.joda.time.LocalDateTime localDateTime40 = localDateTime31.withFields((org.joda.time.ReadablePartial) localDateTime37);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime40.minusMillis((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime44 = localDateTime42.minusSeconds((int) '#');
        org.joda.time.LocalDateTime localDateTime46 = localDateTime44.withWeekOfWeekyear(50);
        org.joda.time.LocalDateTime localDateTime48 = localDateTime44.withMinuteOfHour((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime50 = localDateTime44.minusMonths((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime52 = localDateTime50.plusYears(2022);
        int[] intArray53 = localDateTime50.getValues();
        java.lang.Object obj54 = null;
        boolean boolean55 = org.joda.time.field.FieldUtils.equals((java.lang.Object) intArray53, obj54);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray57 = dateTimeField7.addWrapField((org.joda.time.ReadablePartial) localDateTime28, (-78584223), intArray53, 3);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -78584223");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 3060441273601852L + "'", long15 == 3060441273601852L);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 22 + "'", int17 == 22);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 7 + "'", int26 == 7);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(intArray33);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[2022, 2, 11, 35656925]");
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(intArray39);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[2022, 2, 11, 35656925]");
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(intArray53);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[2021, 4, 11, 35621825]");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
    }

    @Test
    public void test08420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08420");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(740, 24815829);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Minutes out of range: 24815829");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08421");
        long long2 = org.joda.time.field.FieldUtils.safeSubtract(1814400058L, 1644572997331L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + (-1642758597273L) + "'", long2 == (-1642758597273L));
    }

    @Test
    public void test08422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08422");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        int int2 = dateTimeZone0.getStandardOffset((long) (-100));
        java.util.TimeZone timeZone3 = dateTimeZone0.toTimeZone();
        int int4 = timeZone3.getRawOffset();
        timeZone3.setID("2022-02-11T09:48:26.586");
        java.util.TimeZone.setDefault(timeZone3);
        java.util.Locale.LanguageRange[] languageRangeArray8 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList9 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList9, languageRangeArray8);
        java.util.Locale[] localeArray11 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList12 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList12, localeArray11);
        java.util.Locale locale14 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList9, (java.util.Collection<java.util.Locale>) localeList12);
        java.util.Locale.LanguageRange[] languageRangeArray15 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList16 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList16, languageRangeArray15);
        java.util.Locale[] localeArray18 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList19 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList19, localeArray18);
        java.util.Locale locale21 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList16, (java.util.Collection<java.util.Locale>) localeList19);
        java.util.Locale.FilteringMode filteringMode22 = null;
        java.util.List<java.util.Locale> localeList23 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList9, (java.util.Collection<java.util.Locale>) localeList19, filteringMode22);
        java.util.Locale locale24 = java.util.Locale.FRENCH;
        java.util.Set<java.lang.String> strSet25 = locale24.getUnicodeLocaleAttributes();
        java.lang.Object[] objArray26 = strSet25.toArray();
        java.util.Locale.FilteringMode filteringMode27 = java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList28 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList9, (java.util.Collection<java.lang.String>) strSet25, filteringMode27);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.getDefault();
        int int31 = dateTimeZone29.getStandardOffset((long) (-100));
        java.util.TimeZone timeZone32 = dateTimeZone29.toTimeZone();
        int int33 = timeZone32.getRawOffset();
        timeZone32.setRawOffset(50);
        java.lang.String str36 = timeZone32.getID();
        boolean boolean37 = strSet25.equals((java.lang.Object) timeZone32);
        java.lang.String str38 = timeZone32.getID();
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.getDefault();
        int int41 = dateTimeZone39.getStandardOffset((long) (-100));
        java.util.TimeZone timeZone42 = dateTimeZone39.toTimeZone();
        java.util.TimeZone timeZone43 = dateTimeZone39.toTimeZone();
        boolean boolean44 = timeZone32.hasSameRules(timeZone43);
        timeZone32.setID("2022-03-11T09:48:15.516Z");
        boolean boolean47 = timeZone3.hasSameRules(timeZone32);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str50 = timeZone3.getDisplayName(false, (-704));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal style: -704");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 117 + "'", int2 == 117);
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 117 + "'", int4 == 117);
        org.junit.Assert.assertNotNull(languageRangeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(localeArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(locale14);
        org.junit.Assert.assertNotNull(languageRangeArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(localeArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(locale21);
        org.junit.Assert.assertNotNull(localeList23);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet25);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[]");
        org.junit.Assert.assertTrue("'" + filteringMode27 + "' != '" + java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES + "'", filteringMode27.equals(java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList28);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 117 + "'", int31 == 117);
        org.junit.Assert.assertNotNull(timeZone32);
        org.junit.Assert.assertEquals(timeZone32.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 117 + "'", int33 == 117);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "+00:00:00.117" + "'", str36, "+00:00:00.117");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "+00:00:00.117" + "'", str38, "+00:00:00.117");
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 117 + "'", int41 == 117);
        org.junit.Assert.assertNotNull(timeZone42);
        org.junit.Assert.assertEquals(timeZone42.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone43);
        org.junit.Assert.assertEquals(timeZone43.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
    }

    @Test
    public void test08423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08423");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property5 = localDateTime1.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime6 = property5.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField7 = property5.getField();
        int int8 = property5.getMaximumValueOverall();
        org.joda.time.LocalDateTime localDateTime10 = property5.addToCopy(0);
        java.lang.String str11 = localDateTime10.toString();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.getDefault();
        java.util.Locale locale15 = null;
        java.lang.String str16 = dateTimeZone13.getName((long) (short) 10, locale15);
        long long18 = dateTimeZone12.getMillisKeepLocal(dateTimeZone13, (long) 874);
        int int20 = dateTimeZone13.getOffsetFromLocal((long) 22);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone22);
        java.util.Locale locale25 = java.util.Locale.CHINESE;
        java.lang.String str26 = dateTimeZone22.getName((long) (short) 0, locale25);
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime(0L, dateTimeZone22);
        long long29 = dateTimeZone13.getMillisKeepLocal(dateTimeZone22, 202200L);
        java.lang.String str30 = dateTimeZone13.toString();
        long long34 = dateTimeZone13.convertLocalToUTC(666718805472L, false, 38965415L);
        long long37 = dateTimeZone13.adjustOffset((long) (-59), false);
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime((java.lang.Object) str11, dateTimeZone13);
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        org.joda.time.LocalDateTime localDateTime40 = localDateTime38.minus(readablePeriod39);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 31 + "'", int8 == 31);
        org.junit.Assert.assertNotNull(localDateTime10);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "2022-02-11T09:54:16.996" + "'", str11, "2022-02-11T09:54:16.996");
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+00:00:00.117" + "'", str16, "+00:00:00.117");
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 874L + "'", long18 == 874L);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 117 + "'", int20 == 117);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "+00:00:00.117" + "'", str26, "+00:00:00.117");
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 202200L + "'", long29 == 202200L);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "+00:00:00.117" + "'", str30, "+00:00:00.117");
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 666718805355L + "'", long34 == 666718805355L);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + (-59L) + "'", long37 == (-59L));
        org.junit.Assert.assertNotNull(localDateTime40);
    }

    @Test
    public void test08424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08424");
        java.lang.String[] strArray4 = new java.lang.String[] { "fra", "", "+00:00", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet5 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet5, strArray4);
        java.lang.Object[] objArray7 = strSet5.toArray();
        boolean boolean8 = strSet5.isEmpty();
        java.util.Locale.LanguageRange[] languageRangeArray9 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList10 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList10, languageRangeArray9);
        java.util.Locale[] localeArray12 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList13 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList13, localeArray12);
        java.util.Locale locale15 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList10, (java.util.Collection<java.util.Locale>) localeList13);
        boolean boolean16 = strSet5.removeAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList10);
        java.util.Locale.LanguageRange[] languageRangeArray17 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList18 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList18, languageRangeArray17);
        java.util.Locale[] localeArray20 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList21 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList21, localeArray20);
        java.util.Locale locale23 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList18, (java.util.Collection<java.util.Locale>) localeList21);
        java.util.Locale.FilteringMode filteringMode24 = java.util.Locale.FilteringMode.EXTENDED_FILTERING;
        java.util.List<java.util.Locale> localeList25 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList10, (java.util.Collection<java.util.Locale>) localeList21, filteringMode24);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap26 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList27 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList10, strMap26);
        java.util.stream.Stream<java.util.Locale.LanguageRange> languageRangeStream28 = languageRangeList27.stream();
        java.util.Collection<java.lang.String> strCollection29 = null;
        java.util.List<java.lang.String> strList30 = java.util.Locale.filterTags(languageRangeList27, strCollection29);
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime();
        boolean boolean33 = localDateTime31.isBefore((org.joda.time.ReadablePartial) localDateTime32);
        int[] intArray34 = localDateTime32.getValues();
        org.joda.time.LocalDateTime localDateTime36 = localDateTime32.plusYears((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime();
        boolean boolean39 = localDateTime37.isBefore((org.joda.time.ReadablePartial) localDateTime38);
        int[] intArray40 = localDateTime38.getValues();
        org.joda.time.LocalDateTime localDateTime41 = localDateTime32.withFields((org.joda.time.ReadablePartial) localDateTime38);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime41.minusMillis((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime43.minusSeconds((int) '#');
        org.joda.time.LocalDateTime localDateTime47 = localDateTime45.withWeekOfWeekyear(50);
        org.joda.time.LocalDateTime localDateTime49 = localDateTime45.withMinuteOfHour((int) (byte) 0);
        java.util.Locale.LanguageRange[] languageRangeArray50 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList51 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList51, languageRangeArray50);
        java.util.Locale[] localeArray53 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList54 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList54, localeArray53);
        java.util.Locale locale56 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList51, (java.util.Collection<java.util.Locale>) localeList54);
        boolean boolean57 = localDateTime45.equals((java.lang.Object) languageRangeList51);
        java.lang.String[] strArray62 = new java.lang.String[] { "fra", "", "+00:00", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet63 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean64 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet63, strArray62);
        java.lang.Object[] objArray65 = strSet63.toArray();
        boolean boolean66 = strSet63.isEmpty();
        java.util.Locale.LanguageRange[] languageRangeArray67 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList68 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean69 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList68, languageRangeArray67);
        java.util.Locale[] localeArray70 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList71 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean72 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList71, localeArray70);
        java.util.Locale locale73 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList68, (java.util.Collection<java.util.Locale>) localeList71);
        boolean boolean74 = strSet63.removeAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList68);
        java.util.Locale.LanguageRange[] languageRangeArray75 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList76 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean77 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList76, languageRangeArray75);
        java.util.Locale[] localeArray78 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList79 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean80 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList79, localeArray78);
        java.util.Locale locale81 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList76, (java.util.Collection<java.util.Locale>) localeList79);
        java.util.Locale.FilteringMode filteringMode82 = java.util.Locale.FilteringMode.EXTENDED_FILTERING;
        java.util.List<java.util.Locale> localeList83 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList68, (java.util.Collection<java.util.Locale>) localeList79, filteringMode82);
        java.util.Locale locale84 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList51, (java.util.Collection<java.util.Locale>) localeList83);
        java.util.Collection<java.util.Locale> localeCollection85 = null;
        java.util.List<java.util.Locale> localeList86 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList51, localeCollection85);
        java.util.Locale.FilteringMode filteringMode87 = java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList88 = java.util.Locale.filter(languageRangeList27, (java.util.Collection<java.util.Locale>) localeList86, filteringMode87);
        java.util.Collection<java.util.Locale> localeCollection89 = null;
        java.util.List<java.util.Locale> localeList90 = java.util.Locale.filter(languageRangeList27, localeCollection89);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[fra, , +00:00, hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[fra, , +00:00, hi!]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(languageRangeArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(localeArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(locale15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(languageRangeArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(localeArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(locale23);
        org.junit.Assert.assertTrue("'" + filteringMode24 + "' != '" + java.util.Locale.FilteringMode.EXTENDED_FILTERING + "'", filteringMode24.equals(java.util.Locale.FilteringMode.EXTENDED_FILTERING));
        org.junit.Assert.assertNotNull(localeList25);
        org.junit.Assert.assertNotNull(languageRangeList27);
        org.junit.Assert.assertNotNull(languageRangeStream28);
        org.junit.Assert.assertNotNull(strList30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(intArray34);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[2022, 2, 11, 35657017]");
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(intArray40);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[2022, 2, 11, 35657017]");
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(languageRangeArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(localeArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNull(locale56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(strArray62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(objArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray65), "[fra, , +00:00, hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray65), "[fra, , +00:00, hi!]");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(languageRangeArray67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(localeArray70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNull(locale73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(languageRangeArray75);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(localeArray78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNull(locale81);
        org.junit.Assert.assertTrue("'" + filteringMode82 + "' != '" + java.util.Locale.FilteringMode.EXTENDED_FILTERING + "'", filteringMode82.equals(java.util.Locale.FilteringMode.EXTENDED_FILTERING));
        org.junit.Assert.assertNotNull(localeList83);
        org.junit.Assert.assertNull(locale84);
        org.junit.Assert.assertNotNull(localeList86);
        org.junit.Assert.assertTrue("'" + filteringMode87 + "' != '" + java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES + "'", filteringMode87.equals(java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList88);
        org.junit.Assert.assertNotNull(localeList90);
    }

    @Test
    public void test08425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08425");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.millisOfDay();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime0.plusMonths((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        boolean boolean8 = localDateTime6.isBefore((org.joda.time.ReadablePartial) localDateTime7);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime7.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime7.plusMinutes((int) '#');
        org.joda.time.LocalDateTime localDateTime14 = localDateTime7.minusMinutes((int) (short) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.monthOfYear();
        boolean boolean16 = localDateTime14.isSupported(dateTimeFieldType15);
        org.joda.time.DurationFieldType durationFieldType17 = dateTimeFieldType15.getDurationType();
        boolean boolean18 = localDateTime0.isSupported(durationFieldType17);
        int int19 = localDateTime0.getDayOfMonth();
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.LocalDateTime localDateTime22 = localDateTime0.withDurationAdded(readableDuration20, 56);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.withYear(63);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime22.plusHours(35474168);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(durationFieldType17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 11 + "'", int19 == 11);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
    }

    @Test
    public void test08426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08426");
        long long2 = org.joda.time.field.FieldUtils.safeAdd(421199933L, 35600174L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 456800107L + "'", long2 == 456800107L);
    }

    @Test
    public void test08427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08427");
        java.util.Locale locale2 = new java.util.Locale("", "weekyear");
        java.util.Set<java.lang.String> strSet3 = locale2.getUnicodeLocaleKeys();
        java.lang.String str4 = locale2.getDisplayLanguage();
        java.util.Locale locale5 = locale2.stripExtensions();
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        boolean boolean8 = localDateTime6.isBefore((org.joda.time.ReadablePartial) localDateTime7);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime7.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property11 = localDateTime7.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime12 = property11.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField13 = property11.getField();
        long long15 = dateTimeField13.remainder((-1L));
        org.joda.time.DurationField durationField16 = dateTimeField13.getRangeDurationField();
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime();
        boolean boolean19 = localDateTime17.isBefore((org.joda.time.ReadablePartial) localDateTime18);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime18.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property22 = localDateTime18.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime23 = property22.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField24 = property22.getField();
        int int27 = dateTimeField24.getDifference(1L, 86399999L);
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime();
        int int29 = localDateTime28.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime31 = localDateTime28.minusMonths((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.minusMonths((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime33.plusWeeks(22);
        org.joda.time.LocalDateTime.Property property36 = localDateTime35.dayOfMonth();
        java.util.Locale locale41 = new java.util.Locale("11", "weekyear", "fra");
        java.lang.String str42 = locale41.getDisplayName();
        java.lang.String str43 = dateTimeField24.getAsShortText((org.joda.time.ReadablePartial) localDateTime35, (int) (byte) 1, locale41);
        int int44 = dateTimeField13.getMaximumShortTextLength(locale41);
        int int46 = dateTimeField13.getMinimumValue((long) 35274908);
        long long49 = dateTimeField13.getDifferenceAsLong(86400002L, (long) 50);
        org.joda.time.LocalDateTime localDateTime51 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime52 = new org.joda.time.LocalDateTime();
        boolean boolean53 = localDateTime51.isBefore((org.joda.time.ReadablePartial) localDateTime52);
        org.joda.time.LocalDateTime localDateTime55 = localDateTime52.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime57 = localDateTime52.plusMinutes((int) '#');
        org.joda.time.LocalDateTime localDateTime59 = localDateTime52.minusMinutes((int) (short) 1);
        org.joda.time.ReadableDuration readableDuration60 = null;
        org.joda.time.LocalDateTime localDateTime62 = localDateTime52.withDurationAdded(readableDuration60, (int) (short) 100);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter63 = null;
        java.lang.String str64 = localDateTime52.toString(dateTimeFormatter63);
        org.joda.time.LocalDateTime localDateTime66 = localDateTime52.minusMillis(379);
        org.joda.time.LocalDateTime localDateTime68 = localDateTime66.withWeekOfWeekyear((int) (byte) 10);
        org.joda.time.LocalDateTime.Property property69 = localDateTime66.yearOfEra();
        java.util.Locale locale70 = java.util.Locale.JAPAN;
        java.util.Locale locale71 = java.util.Locale.FRENCH;
        java.lang.String str72 = locale70.getDisplayCountry(locale71);
        java.util.Locale.Builder builder73 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder74 = builder73.clear();
        org.joda.time.DateTimeZone dateTimeZone75 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone75);
        java.util.Locale locale78 = java.util.Locale.CHINESE;
        java.lang.String str79 = dateTimeZone75.getName((long) (short) 0, locale78);
        java.util.Locale.Builder builder80 = builder73.setLocale(locale78);
        java.lang.String str81 = locale71.getDisplayScript(locale78);
        java.lang.String str82 = locale71.getDisplayName();
        java.util.Locale.Category category83 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale84 = java.util.Locale.getDefault(category83);
        java.lang.String str85 = locale84.getDisplayName();
        java.util.Locale locale88 = new java.util.Locale("fra", "");
        java.util.Set<java.lang.String> strSet89 = locale88.getUnicodeLocaleAttributes();
        java.lang.String str90 = locale88.getScript();
        java.util.Set<java.lang.Character> charSet91 = locale88.getExtensionKeys();
        java.util.Set<java.lang.String> strSet92 = locale88.getUnicodeLocaleKeys();
        java.lang.String str93 = locale88.getDisplayName();
        java.lang.String str94 = locale84.getDisplayLanguage(locale88);
        java.lang.String str95 = locale71.getDisplayLanguage(locale88);
        int int96 = property69.getMaximumShortTextLength(locale88);
        java.lang.String str97 = dateTimeField13.getAsShortText((int) 'x', locale88);
        java.lang.String str98 = locale5.getDisplayName(locale88);
        java.lang.String str99 = locale88.getDisplayCountry();
        org.junit.Assert.assertEquals(locale2.toString(), "_WEEKYEAR");
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "_WEEKYEAR");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 86399999L + "'", long15 == 86399999L);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 22 + "'", int29 == 22);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertEquals(locale41.toString(), "11_WEEKYEAR_fra");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "11 (WEEKYEAR,fra)" + "'", str42, "11 (WEEKYEAR,fra)");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "1" + "'", str43, "1");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2 + "'", int44 == 2);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(localDateTime62);
// flaky:         org.junit.Assert.assertEquals("'" + str64 + "' != '" + "2022-02-11T09:54:17.260" + "'", str64, "2022-02-11T09:54:17.260");
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertNotNull(property69);
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "Japon" + "'", str72, "Japon");
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(dateTimeZone75);
        org.junit.Assert.assertNotNull(locale78);
        org.junit.Assert.assertEquals(locale78.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "+00:00:00.117" + "'", str79, "+00:00:00.117");
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "" + "'", str81, "");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "French" + "'", str82, "French");
        org.junit.Assert.assertTrue("'" + category83 + "' != '" + java.util.Locale.Category.FORMAT + "'", category83.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale84);
// flaky:         org.junit.Assert.assertEquals(locale84.toString(), "2022-02-11t09:48:28.422");
// flaky:         org.junit.Assert.assertEquals("'" + str85 + "' != '" + "2022-02-11t09:48:28.422" + "'", str85, "2022-02-11t09:48:28.422");
        org.junit.Assert.assertEquals(locale88.toString(), "fra");
        org.junit.Assert.assertNotNull(strSet89);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "" + "'", str90, "");
        org.junit.Assert.assertNotNull(charSet91);
        org.junit.Assert.assertNotNull(strSet92);
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "fra" + "'", str93, "fra");
// flaky:         org.junit.Assert.assertEquals("'" + str94 + "' != '" + "2022-02-11t09:48:28.422" + "'", str94, "2022-02-11t09:48:28.422");
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "French" + "'", str95, "French");
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 9 + "'", int96 == 9);
        org.junit.Assert.assertEquals("'" + str97 + "' != '" + "120" + "'", str97, "120");
        org.junit.Assert.assertEquals("'" + str98 + "' != '" + "WEEKYEAR" + "'", str98, "WEEKYEAR");
        org.junit.Assert.assertEquals("'" + str99 + "' != '" + "" + "'", str99, "");
    }

    @Test
    public void test08428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08428");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property5 = localDateTime1.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        boolean boolean8 = localDateTime6.isBefore((org.joda.time.ReadablePartial) localDateTime7);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime7.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property11 = localDateTime7.dayOfMonth();
        java.util.Locale locale12 = java.util.Locale.FRENCH;
        java.util.Set<java.lang.String> strSet13 = locale12.getUnicodeLocaleAttributes();
        java.lang.String str14 = locale12.getVariant();
        java.lang.String str15 = property11.getAsText(locale12);
        java.lang.String str16 = property5.getAsShortText(locale12);
        org.joda.time.LocalDateTime localDateTime17 = property5.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime localDateTime18 = property5.roundFloorCopy();
        int int19 = property5.getMaximumValueOverall();
        int int20 = property5.getLeapAmount();
        org.joda.time.LocalDateTime localDateTime21 = property5.roundHalfEvenCopy();
        org.joda.time.LocalDateTime.Property property22 = localDateTime21.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime23 = property22.roundCeilingCopy();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forOffsetHours(434);
        org.joda.time.DateTime dateTime26 = localDateTime23.toDateTime(dateTimeZone25);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "11" + "'", str15, "11");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "11" + "'", str16, "11");
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 31 + "'", int19 == 31);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(dateTime26);
    }

    @Test
    public void test08429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08429");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.field.FieldUtils.verifyValueBounds("2022-02-11T09:52:09.551", 3, 35621476, 241);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 3 for 2022-02-11T09:52:09.551 must be in the range [35621476,241]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08430");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property5 = localDateTime1.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime6 = property5.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField7 = property5.getField();
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime();
        boolean boolean10 = localDateTime8.isBefore((org.joda.time.ReadablePartial) localDateTime9);
        int[] intArray11 = localDateTime9.getValues();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime9.plusYears((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime();
        boolean boolean16 = localDateTime14.isBefore((org.joda.time.ReadablePartial) localDateTime15);
        int[] intArray17 = localDateTime15.getValues();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime9.withFields((org.joda.time.ReadablePartial) localDateTime15);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.minusMillis((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.minusSeconds((int) '#');
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.withWeekOfWeekyear(50);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime22.withMinuteOfHour((int) (byte) 0);
        int int27 = dateTimeField7.getMinimumValue((org.joda.time.ReadablePartial) localDateTime22);
        java.lang.String str28 = dateTimeField7.toString();
        long long30 = dateTimeField7.roundHalfEven(1814400058L);
        java.lang.String str32 = dateTimeField7.getAsText(35412927L);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[2022, 2, 11, 35657332]");
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(intArray17);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[2022, 2, 11, 35657332]");
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "DateTimeField[dayOfMonth]" + "'", str28, "DateTimeField[dayOfMonth]");
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 1814400000L + "'", long30 == 1814400000L);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "1" + "'", str32, "1");
    }

    @Test
    public void test08431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08431");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property5 = localDateTime1.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime6 = property5.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField7 = property5.getField();
        int int8 = property5.getMaximumValueOverall();
        org.joda.time.LocalDateTime localDateTime10 = property5.addToCopy(0);
        org.joda.time.LocalDateTime localDateTime12 = property5.addToCopy(1);
        org.joda.time.LocalDateTime localDateTime14 = property5.addToCopy((long) (byte) 1);
        org.joda.time.LocalDateTime localDateTime15 = property5.roundHalfCeilingCopy();
        java.util.Locale locale16 = java.util.Locale.JAPAN;
        java.util.Locale locale17 = java.util.Locale.FRENCH;
        java.lang.String str18 = locale16.getDisplayCountry(locale17);
        java.util.Locale.Builder builder19 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder20 = builder19.clear();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone21);
        java.util.Locale locale24 = java.util.Locale.CHINESE;
        java.lang.String str25 = dateTimeZone21.getName((long) (short) 0, locale24);
        java.util.Locale.Builder builder26 = builder19.setLocale(locale24);
        java.lang.String str27 = locale17.getDisplayScript(locale24);
        int int28 = property5.getMaximumShortTextLength(locale24);
        org.joda.time.DurationField durationField29 = property5.getDurationField();
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime();
        boolean boolean32 = localDateTime30.isBefore((org.joda.time.ReadablePartial) localDateTime31);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime31.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property35 = localDateTime31.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime36 = property35.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField37 = property35.getField();
        long long40 = dateTimeField37.addWrapField((long) 6, (int) (byte) 0);
        java.lang.String str42 = dateTimeField37.getAsShortText((long) (byte) 10);
        boolean boolean43 = dateTimeField37.isSupported();
        int int44 = dateTimeField37.getMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = dateTimeField37.getType();
        int int47 = dateTimeField37.getLeapAmount(42L);
        org.joda.time.LocalDateTime localDateTime48 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime49 = new org.joda.time.LocalDateTime();
        boolean boolean50 = localDateTime48.isBefore((org.joda.time.ReadablePartial) localDateTime49);
        org.joda.time.LocalDateTime localDateTime52 = localDateTime49.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property53 = localDateTime49.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime54 = property53.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField55 = property53.getField();
        long long58 = dateTimeField55.addWrapField((long) 6, (int) (byte) 0);
        java.lang.String str60 = dateTimeField55.getAsShortText((long) (byte) 0);
        java.lang.String str62 = dateTimeField55.getAsShortText((-116L));
        long long64 = dateTimeField55.roundCeiling((long) 11);
        java.util.Locale locale69 = new java.util.Locale("11", "weekyear", "fra");
        java.lang.String str70 = locale69.getDisplayName();
        org.joda.time.LocalDateTime localDateTime71 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime72 = new org.joda.time.LocalDateTime();
        boolean boolean73 = localDateTime71.isBefore((org.joda.time.ReadablePartial) localDateTime72);
        org.joda.time.LocalDateTime localDateTime75 = localDateTime72.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property76 = localDateTime72.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime77 = property76.withMinimumValue();
        java.util.Locale locale78 = java.util.Locale.UK;
        java.lang.String str79 = property76.getAsShortText(locale78);
        java.lang.String str80 = locale69.getDisplayScript(locale78);
        java.lang.String str81 = dateTimeField55.getAsShortText((long) 715, locale78);
        int int82 = dateTimeField37.getMaximumShortTextLength(locale78);
        int int83 = property5.getMaximumTextLength(locale78);
        java.util.Locale locale86 = new java.util.Locale("2022-02-11T09:48:30.017", "");
        java.lang.String str87 = locale78.getDisplayScript(locale86);
        java.lang.String str88 = locale78.getCountry();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 31 + "'", int8 == 31);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Japon" + "'", str18, "Japon");
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "+00:00:00.117" + "'", str25, "+00:00:00.117");
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 6L + "'", long40 == 6L);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "1" + "'", str42, "1");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 31 + "'", int44 == 31);
        org.junit.Assert.assertNotNull(dateTimeFieldType45);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 6L + "'", long58 == 6L);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "1" + "'", str60, "1");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "31" + "'", str62, "31");
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 86400000L + "'", long64 == 86400000L);
        org.junit.Assert.assertEquals(locale69.toString(), "11_WEEKYEAR_fra");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "11 (WEEKYEAR,fra)" + "'", str70, "11 (WEEKYEAR,fra)");
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(localDateTime75);
        org.junit.Assert.assertNotNull(property76);
        org.junit.Assert.assertNotNull(localDateTime77);
        org.junit.Assert.assertNotNull(locale78);
        org.junit.Assert.assertEquals(locale78.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "11" + "'", str79, "11");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "" + "'", str80, "");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "1" + "'", str81, "1");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 2 + "'", int82 == 2);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 2 + "'", int83 == 2);
        org.junit.Assert.assertEquals(locale86.toString(), "2022-02-11t09:48:30.017");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "" + "'", str87, "");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "GB" + "'", str88, "GB");
    }

    @Test
    public void test08432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08432");
        java.util.TimeZone timeZone0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forTimeZone(timeZone0);
        int int3 = dateTimeZone1.getOffsetFromLocal((long) (-1));
        java.util.TimeZone timeZone4 = dateTimeZone1.toTimeZone();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone1);
        java.util.Locale locale7 = null;
        java.lang.String str8 = dateTimeZone1.getShortName((long) (-35274908), locale7);
        long long12 = dateTimeZone1.convertLocalToUTC((long) 314, false, 0L);
        java.lang.String str14 = dateTimeZone1.getShortName((long) (byte) 10);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 117 + "'", int3 == 117);
        org.junit.Assert.assertNotNull(timeZone4);
        org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+00:00:00.117" + "'", str8, "+00:00:00.117");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 197L + "'", long12 == 197L);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+00:00:00.117" + "'", str14, "+00:00:00.117");
    }

    @Test
    public void test08433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08433");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.minusMillis((int) (byte) 1);
        java.lang.String str3 = localDateTime2.toString();
        org.joda.time.DateTime dateTime4 = localDateTime2.toDateTime();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusMillis((int) (byte) 1);
        java.lang.String str8 = localDateTime7.toString();
        org.joda.time.DateTime dateTime9 = localDateTime7.toDateTime();
        boolean boolean10 = dateTime4.isEqual((org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minusMillis((int) (byte) 1);
        java.lang.String str14 = localDateTime13.toString();
        org.joda.time.DateTime dateTime15 = localDateTime13.toDateTime();
        boolean boolean16 = dateTime4.isEqual((org.joda.time.ReadableInstant) dateTime15);
        java.lang.String str17 = dateTime4.toString();
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime();
        int int21 = localDateTime20.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime20.minusMonths((int) (short) 0);
        org.joda.time.Chronology chronology24 = localDateTime23.getChronology();
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime(chronology24);
        org.joda.time.LocalDateTime localDateTime26 = org.joda.time.LocalDateTime.now(chronology24);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime19.withFields((org.joda.time.ReadablePartial) localDateTime26);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime26.withMinuteOfHour(0);
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime();
        boolean boolean32 = localDateTime30.isBefore((org.joda.time.ReadablePartial) localDateTime31);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime31.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime31.plusMinutes((int) '#');
        org.joda.time.LocalDateTime localDateTime38 = localDateTime31.minusMinutes((int) (short) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = org.joda.time.DateTimeFieldType.monthOfYear();
        boolean boolean40 = localDateTime38.isSupported(dateTimeFieldType39);
        org.joda.time.DurationFieldType durationFieldType41 = dateTimeFieldType39.getDurationType();
        boolean boolean42 = localDateTime26.isSupported(durationFieldType41);
        int int43 = localDateTime26.getMillisOfDay();
        boolean boolean44 = dateTime4.equals((java.lang.Object) int43);
        org.junit.Assert.assertNotNull(localDateTime2);
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "2022-02-11T09:54:17.438" + "'", str3, "2022-02-11T09:54:17.438");
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localDateTime7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "2022-02-11T09:54:17.438" + "'", str8, "2022-02-11T09:54:17.438");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(localDateTime13);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "2022-02-11T09:54:17.438" + "'", str14, "2022-02-11T09:54:17.438");
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "2022-02-11T09:54:17.438+00:00:00.117" + "'", str17, "2022-02-11T09:54:17.438+00:00:00.117");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 22 + "'", int21 == 22);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(durationFieldType41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int43 + "' != '" + 35657322 + "'", int43 == 35657322);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test08434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08434");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property5 = localDateTime1.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime6 = property5.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField7 = property5.getField();
        long long9 = dateTimeField7.remainder((-1L));
        java.util.Locale.Builder builder10 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder11 = builder10.clearExtensions();
        java.util.Locale locale12 = builder10.build();
        int int13 = dateTimeField7.getMaximumTextLength(locale12);
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime();
        boolean boolean17 = localDateTime15.isBefore((org.joda.time.ReadablePartial) localDateTime16);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime16.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime16.plusMinutes((int) '#');
        org.joda.time.LocalDateTime localDateTime23 = localDateTime16.minusMinutes((int) (short) 1);
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.LocalDateTime localDateTime26 = localDateTime16.withDurationAdded(readableDuration24, (int) (short) 100);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray27 = localDateTime16.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime29 = localDateTime16.withWeekyear((int) (short) -1);
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime();
        boolean boolean32 = localDateTime30.isBefore((org.joda.time.ReadablePartial) localDateTime31);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime31.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime31.plusMinutes((int) '#');
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        org.joda.time.LocalDateTime localDateTime38 = localDateTime31.minus(readablePeriod37);
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.LocalDateTime localDateTime41 = localDateTime31.withField(dateTimeFieldType39, (int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime31.withYearOfEra(1);
        boolean boolean44 = localDateTime29.isEqual((org.joda.time.ReadablePartial) localDateTime31);
        java.util.Locale locale46 = java.util.Locale.getDefault();
        java.lang.String str47 = localDateTime31.toString("1", locale46);
        java.lang.String str48 = dateTimeField7.getAsText(19029, locale46);
        org.joda.time.LocalDateTime localDateTime49 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime50 = new org.joda.time.LocalDateTime();
        boolean boolean51 = localDateTime49.isBefore((org.joda.time.ReadablePartial) localDateTime50);
        org.joda.time.LocalDateTime.Property property52 = localDateTime49.millisOfDay();
        org.joda.time.LocalDateTime localDateTime54 = localDateTime49.plusMonths((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime56 = localDateTime54.minusMonths(59);
        int int57 = dateTimeField7.getMaximumValue((org.joda.time.ReadablePartial) localDateTime56);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 86399999L + "'", long9 == 86399999L);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(locale46);
// flaky:         org.junit.Assert.assertEquals(locale46.toString(), "2022-02-11t09:48:28.422");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "1" + "'", str47, "1");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "19029" + "'", str48, "19029");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 30 + "'", int57 == 30);
    }

    @Test
    public void test08435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08435");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.millisOfDay();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime0.plusMonths((int) (byte) 1);
        org.joda.time.LocalDateTime.Property property6 = localDateTime0.weekyear();
        int int7 = property6.get();
        java.lang.String str8 = property6.toString();
        org.joda.time.LocalDateTime localDateTime9 = property6.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime10 = property6.roundFloorCopy();
        org.joda.time.DateTimeField dateTimeField11 = property6.getField();
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime();
        boolean boolean14 = localDateTime12.isBefore((org.joda.time.ReadablePartial) localDateTime13);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime13.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime13.plusMinutes((int) '#');
        org.joda.time.LocalDateTime localDateTime20 = localDateTime13.minusMinutes((int) (short) 1);
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.LocalDateTime localDateTime23 = localDateTime13.withDurationAdded(readableDuration21, (int) (short) 100);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray24 = localDateTime13.getFieldTypes();
        int int25 = localDateTime13.getMinuteOfHour();
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime();
        boolean boolean29 = localDateTime27.isBefore((org.joda.time.ReadablePartial) localDateTime28);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime28.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property32 = localDateTime28.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime33 = property32.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField34 = property32.getField();
        int int37 = dateTimeField34.getDifference(1L, 86399999L);
        java.lang.String str38 = dateTimeField34.toString();
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime();
        int int40 = localDateTime39.getYearOfCentury();
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str42 = dateTimeFieldType41.toString();
        int int43 = localDateTime39.indexOf(dateTimeFieldType41);
        org.joda.time.DateTime dateTime44 = localDateTime39.toDateTime();
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime46 = new org.joda.time.LocalDateTime();
        boolean boolean47 = localDateTime45.isBefore((org.joda.time.ReadablePartial) localDateTime46);
        int[] intArray48 = localDateTime46.getValues();
        int int49 = dateTimeField34.getMinimumValue((org.joda.time.ReadablePartial) localDateTime39, intArray48);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray51 = dateTimeField11.add((org.joda.time.ReadablePartial) localDateTime13, 1970, intArray48, 731);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1970");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2022 + "'", int7 == 2022);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Property[weekyear]" + "'", str8, "Property[weekyear]");
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray24);
// flaky:         org.junit.Assert.assertTrue("'" + int25 + "' != '" + 54 + "'", int25 == 54);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "DateTimeField[dayOfMonth]" + "'", str38, "DateTimeField[dayOfMonth]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 22 + "'", int40 == 22);
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "weekyear" + "'", str42, "weekyear");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(intArray48);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[2022, 2, 11, 35657580]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
    }

    @Test
    public void test08436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08436");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.getDefault();
        java.util.Locale locale4 = null;
        java.lang.String str5 = dateTimeZone2.getName((long) (short) 10, locale4);
        long long7 = dateTimeZone1.getMillisKeepLocal(dateTimeZone2, (long) 874);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        long long10 = dateTimeZone2.getMillisKeepLocal(dateTimeZone8, (long) '4');
        int int12 = dateTimeZone2.getOffsetFromLocal((long) 83);
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime(0L, dateTimeZone2);
        java.util.TimeZone timeZone14 = dateTimeZone2.toTimeZone();
        int int16 = dateTimeZone2.getOffsetFromLocal((long) (short) 10);
        java.lang.String str17 = dateTimeZone2.toString();
        long long20 = dateTimeZone2.adjustOffset(60L, true);
        long long22 = dateTimeZone2.previousTransition((-1392479L));
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00:00.117" + "'", str5, "+00:00:00.117");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 874L + "'", long7 == 874L);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 52L + "'", long10 == 52L);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 117 + "'", int12 == 117);
        org.junit.Assert.assertNotNull(timeZone14);
        org.junit.Assert.assertEquals(timeZone14.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 117 + "'", int16 == 117);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+00:00:00.117" + "'", str17, "+00:00:00.117");
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 60L + "'", long20 == 60L);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-1392479L) + "'", long22 == (-1392479L));
    }

    @Test
    public void test08437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08437");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime1.plusMinutes((int) '#');
        org.joda.time.LocalDateTime localDateTime8 = localDateTime1.minusMinutes((int) (short) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.monthOfYear();
        boolean boolean10 = localDateTime8.isSupported(dateTimeFieldType9);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTimeField dateTimeField12 = dateTimeFieldType9.getField(chronology11);
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.minusMillis((int) (byte) 1);
        java.lang.String str19 = localDateTime18.toString();
        org.joda.time.DateTime dateTime20 = localDateTime18.toDateTime();
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.minusMillis((int) (byte) 1);
        java.lang.String str24 = localDateTime23.toString();
        org.joda.time.DateTime dateTime25 = localDateTime23.toDateTime();
        boolean boolean26 = dateTime20.isEqual((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.Chronology chronology27 = dateTime25.getChronology();
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime((java.lang.Object) 35271574L, chronology27);
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime((long) 'u', chronology27);
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime(86399999L, chronology27);
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime();
        boolean boolean33 = localDateTime31.isBefore((org.joda.time.ReadablePartial) localDateTime32);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime32.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property36 = localDateTime32.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime37 = property36.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField38 = property36.getField();
        int int41 = dateTimeField38.getDifference(1L, 86399999L);
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime();
        int int43 = localDateTime42.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime45 = localDateTime42.minusMonths((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime45.minusMonths((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime49 = localDateTime47.plusWeeks(22);
        org.joda.time.LocalDateTime.Property property50 = localDateTime49.dayOfMonth();
        java.util.Locale locale55 = new java.util.Locale("11", "weekyear", "fra");
        java.lang.String str56 = locale55.getDisplayName();
        java.lang.String str57 = dateTimeField38.getAsShortText((org.joda.time.ReadablePartial) localDateTime49, (int) (byte) 1, locale55);
        org.joda.time.LocalDateTime localDateTime58 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime59 = new org.joda.time.LocalDateTime();
        boolean boolean60 = localDateTime58.isBefore((org.joda.time.ReadablePartial) localDateTime59);
        org.joda.time.LocalDateTime localDateTime62 = localDateTime59.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property63 = localDateTime59.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime64 = property63.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField65 = property63.getField();
        org.joda.time.LocalDateTime localDateTime66 = property63.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime67 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime69 = localDateTime67.minusMillis((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime71 = localDateTime69.plusDays(0);
        org.joda.time.LocalDateTime localDateTime73 = localDateTime71.plusMillis((int) '#');
        int[] intArray74 = localDateTime71.getValues();
        int int75 = dateTimeField38.getMinimumValue((org.joda.time.ReadablePartial) localDateTime66, intArray74);
        int int76 = dateTimeField12.getMaximumValue((org.joda.time.ReadablePartial) localDateTime30, intArray74);
        // The following exception was thrown during execution in test generation
        try {
            long long79 = dateTimeField12.add(35468623L, 1644572873292L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Magnitude of add amount is too large: 1644572873292");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(localDateTime18);
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "2022-02-11T09:54:17.682" + "'", str19, "2022-02-11T09:54:17.682");
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(localDateTime23);
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "2022-02-11T09:54:17.682" + "'", str24, "2022-02-11T09:54:17.682");
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 22 + "'", int43 == 22);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertEquals(locale55.toString(), "11_WEEKYEAR_fra");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "11 (WEEKYEAR,fra)" + "'", str56, "11 (WEEKYEAR,fra)");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "1" + "'", str57, "1");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertNotNull(localDateTime69);
        org.junit.Assert.assertNotNull(localDateTime71);
        org.junit.Assert.assertNotNull(localDateTime73);
        org.junit.Assert.assertNotNull(intArray74);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray74), "[2022, 2, 11, 35657683]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 12 + "'", int76 == 12);
    }

    @Test
    public void test08438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08438");
        int int1 = org.joda.time.field.FieldUtils.safeNegate(35441332);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + (-35441332) + "'", int1 == (-35441332));
    }

    @Test
    public void test08439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08439");
        java.util.Locale locale0 = java.util.Locale.FRENCH;
        java.util.Set<java.lang.String> strSet1 = locale0.getUnicodeLocaleAttributes();
        java.lang.String str2 = locale0.getISO3Language();
        java.util.Set<java.lang.String> strSet3 = locale0.getUnicodeLocaleAttributes();
        java.util.List<java.util.Locale.LanguageRange> languageRangeList5 = java.util.Locale.LanguageRange.parse("und");
        java.util.Locale locale8 = new java.util.Locale("fra", "");
        java.util.Set<java.lang.String> strSet9 = locale8.getUnicodeLocaleAttributes();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime();
        boolean boolean12 = localDateTime10.isBefore((org.joda.time.ReadablePartial) localDateTime11);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime11.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property15 = localDateTime11.dayOfMonth();
        org.joda.time.DurationField durationField16 = property15.getRangeDurationField();
        boolean boolean17 = strSet9.contains((java.lang.Object) durationField16);
        java.util.List<java.lang.String> strList18 = java.util.Locale.filterTags(languageRangeList5, (java.util.Collection<java.lang.String>) strSet9);
        java.lang.String[] strArray23 = new java.lang.String[] { "fra", "", "+00:00", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet24 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet24, strArray23);
        java.lang.Object[] objArray26 = strSet24.toArray();
        boolean boolean27 = strSet24.isEmpty();
        java.util.Locale.LanguageRange[] languageRangeArray28 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList29 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList29, languageRangeArray28);
        java.util.Locale[] localeArray31 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList32 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean33 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList32, localeArray31);
        java.util.Locale locale34 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList29, (java.util.Collection<java.util.Locale>) localeList32);
        boolean boolean35 = strSet24.removeAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList29);
        boolean boolean36 = strSet9.retainAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList29);
        boolean boolean37 = strSet3.removeAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList29);
        java.util.stream.Stream<java.util.Locale.LanguageRange> languageRangeStream38 = languageRangeList29.parallelStream();
        java.util.stream.Stream<java.util.Locale.LanguageRange> languageRangeStream39 = languageRangeList29.stream();
        java.util.Locale.Category category40 = java.util.Locale.Category.DISPLAY;
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime();
        boolean boolean43 = localDateTime41.isBefore((org.joda.time.ReadablePartial) localDateTime42);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime42.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property46 = localDateTime42.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime47 = property46.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField48 = property46.getField();
        long long50 = dateTimeField48.remainder((-1L));
        java.util.Locale locale52 = java.util.Locale.UK;
        java.lang.String str53 = dateTimeField48.getAsShortText((long) 22, locale52);
        int int54 = dateTimeField48.getMinimumValue();
        java.util.Locale locale57 = new java.util.Locale("fra", "");
        java.util.Set<java.lang.String> strSet58 = locale57.getUnicodeLocaleAttributes();
        int int59 = dateTimeField48.getMaximumShortTextLength(locale57);
        java.util.Locale.setDefault(category40, locale57);
        java.util.Locale.LanguageRange[] languageRangeArray61 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList62 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList62, languageRangeArray61);
        java.util.Locale[] localeArray64 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList65 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean66 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList65, localeArray64);
        java.util.Locale locale67 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList62, (java.util.Collection<java.util.Locale>) localeList65);
        java.util.Locale.LanguageRange[] languageRangeArray68 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList69 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList69, languageRangeArray68);
        java.util.Locale[] localeArray71 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList72 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean73 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList72, localeArray71);
        java.util.Locale locale74 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList69, (java.util.Collection<java.util.Locale>) localeList72);
        java.util.Locale.FilteringMode filteringMode75 = null;
        java.util.List<java.util.Locale> localeList76 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList62, (java.util.Collection<java.util.Locale>) localeList72, filteringMode75);
        java.util.Locale locale77 = java.util.Locale.FRENCH;
        java.util.Set<java.lang.String> strSet78 = locale77.getUnicodeLocaleAttributes();
        java.lang.Object[] objArray79 = strSet78.toArray();
        java.util.Locale.FilteringMode filteringMode80 = java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList81 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList62, (java.util.Collection<java.lang.String>) strSet78, filteringMode80);
        java.util.Locale locale82 = java.util.Locale.ITALIAN;
        java.lang.String str83 = locale82.getDisplayCountry();
        boolean boolean84 = strSet78.equals((java.lang.Object) locale82);
        java.lang.String str85 = locale82.getDisplayCountry();
        java.util.Locale.setDefault(category40, locale82);
        java.util.Set<java.lang.String> strSet87 = locale82.getUnicodeLocaleAttributes();
        java.util.List<java.lang.String> strList88 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList29, (java.util.Collection<java.lang.String>) strSet87);
        org.joda.time.tz.Provider provider89 = org.joda.time.DateTimeZone.getProvider();
        org.joda.time.DateTimeZone.setProvider(provider89);
        org.joda.time.DateTimeZone dateTimeZone92 = provider89.getZone("11");
        org.joda.time.DateTimeZone.setProvider(provider89);
        org.joda.time.DateTimeZone.setProvider(provider89);
        java.util.Set<java.lang.String> strSet95 = provider89.getAvailableIDs();
        int int96 = strSet95.size();
        java.lang.String str97 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList29, (java.util.Collection<java.lang.String>) strSet95);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "fra" + "'", str2, "fra");
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(languageRangeList5);
        org.junit.Assert.assertEquals(locale8.toString(), "fra");
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(strList18);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(objArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray26), "[fra, , +00:00, hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray26), "[fra, , +00:00, hi!]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(languageRangeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(localeArray31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNull(locale34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(languageRangeStream38);
        org.junit.Assert.assertNotNull(languageRangeStream39);
        org.junit.Assert.assertTrue("'" + category40 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category40.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 86399999L + "'", long50 == 86399999L);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "1" + "'", str53, "1");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertEquals(locale57.toString(), "fra");
        org.junit.Assert.assertNotNull(strSet58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 2 + "'", int59 == 2);
        org.junit.Assert.assertNotNull(languageRangeArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(localeArray64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNull(locale67);
        org.junit.Assert.assertNotNull(languageRangeArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(localeArray71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNull(locale74);
        org.junit.Assert.assertNotNull(localeList76);
        org.junit.Assert.assertNotNull(locale77);
        org.junit.Assert.assertEquals(locale77.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet78);
        org.junit.Assert.assertNotNull(objArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray79), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray79), "[]");
        org.junit.Assert.assertTrue("'" + filteringMode80 + "' != '" + java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES + "'", filteringMode80.equals(java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList81);
        org.junit.Assert.assertNotNull(locale82);
        org.junit.Assert.assertEquals(locale82.toString(), "it");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "" + "'", str83, "");
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "" + "'", str85, "");
        org.junit.Assert.assertNotNull(strSet87);
        org.junit.Assert.assertNotNull(strList88);
        org.junit.Assert.assertNotNull(provider89);
        org.junit.Assert.assertNull(dateTimeZone92);
        org.junit.Assert.assertNotNull(strSet95);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 575 + "'", int96 == 575);
        org.junit.Assert.assertNull(str97);
    }

    @Test
    public void test08440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08440");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale.Builder builder3 = builder0.setLanguage("");
        java.util.Locale.Builder builder4 = builder3.clearExtensions();
        java.util.Locale locale5 = builder4.build();
        java.util.Locale.Builder builder6 = builder4.clearExtensions();
        java.util.Locale locale7 = java.util.Locale.KOREA;
        java.util.Locale.Builder builder8 = new java.util.Locale.Builder();
        java.util.Locale locale9 = builder8.build();
        java.lang.String str10 = locale9.getDisplayVariant();
        java.lang.String str11 = locale7.getDisplayName(locale9);
        java.util.Locale.Builder builder12 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder13 = builder12.clear();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone14);
        java.util.Locale locale17 = java.util.Locale.CHINESE;
        java.lang.String str18 = dateTimeZone14.getName((long) (short) 0, locale17);
        java.util.Locale.Builder builder19 = builder12.setLocale(locale17);
        java.util.Locale locale20 = java.util.Locale.ROOT;
        java.lang.String str21 = locale17.getDisplayCountry(locale20);
        java.lang.String str22 = locale7.getDisplayName(locale20);
        java.util.Set<java.lang.String> strSet23 = locale20.getUnicodeLocaleAttributes();
        java.util.Locale.Builder builder24 = builder4.setLocale(locale20);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder26 = builder24.setVariant("448");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed variant: 448 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Korean (South Korea)" + "'", str11, "Korean (South Korea)");
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+00:00:00.117" + "'", str18, "+00:00:00.117");
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Korean (South Korea)" + "'", str22, "Korean (South Korea)");
        org.junit.Assert.assertNotNull(strSet23);
        org.junit.Assert.assertNotNull(builder24);
    }

    @Test
    public void test08441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08441");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.millisOfDay();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime0.plusMonths((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusMonths(59);
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.plus(readableDuration8);
        int int10 = localDateTime7.size();
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime();
        boolean boolean13 = localDateTime11.isBefore((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime12.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property16 = localDateTime12.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime17 = property16.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField18 = property16.getField();
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime();
        boolean boolean21 = localDateTime19.isBefore((org.joda.time.ReadablePartial) localDateTime20);
        int[] intArray22 = localDateTime20.getValues();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime20.plusYears((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime();
        boolean boolean27 = localDateTime25.isBefore((org.joda.time.ReadablePartial) localDateTime26);
        int[] intArray28 = localDateTime26.getValues();
        org.joda.time.LocalDateTime localDateTime29 = localDateTime20.withFields((org.joda.time.ReadablePartial) localDateTime26);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.minusMillis((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.minusSeconds((int) '#');
        org.joda.time.LocalDateTime localDateTime35 = localDateTime33.withWeekOfWeekyear(50);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime33.withMinuteOfHour((int) (byte) 0);
        int int38 = dateTimeField18.getMinimumValue((org.joda.time.ReadablePartial) localDateTime33);
        java.lang.String str39 = dateTimeField18.toString();
        long long41 = dateTimeField18.roundHalfEven(1814400058L);
        org.joda.time.DurationField durationField42 = dateTimeField18.getRangeDurationField();
        org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime();
        int int44 = localDateTime43.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime46 = localDateTime43.minusMonths((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime48 = localDateTime46.minusMonths((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime50 = localDateTime48.plusYears(10);
        org.joda.time.DateTimeFieldType dateTimeFieldType51 = org.joda.time.DateTimeFieldType.yearOfCentury();
        org.joda.time.DurationFieldType durationFieldType52 = dateTimeFieldType51.getDurationType();
        org.joda.time.LocalDateTime localDateTime54 = localDateTime48.withFieldAdded(durationFieldType52, 35300915);
        org.joda.time.LocalDateTime.Property property55 = localDateTime54.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime56 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime58 = localDateTime56.minusMillis((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime60 = localDateTime58.plusDays(0);
        org.joda.time.LocalDateTime localDateTime62 = localDateTime60.plusMillis((int) '#');
        int[] intArray63 = localDateTime60.getValues();
        int int64 = dateTimeField18.getMaximumValue((org.joda.time.ReadablePartial) localDateTime54, intArray63);
        org.joda.time.DateTimeFieldType dateTimeFieldType65 = dateTimeField18.getType();
        int int66 = localDateTime7.indexOf(dateTimeFieldType65);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 4 + "'", int10 == 4);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(intArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[2022, 2, 11, 35657800]");
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(intArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[2022, 2, 11, 35657800]");
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "DateTimeField[dayOfMonth]" + "'", str39, "DateTimeField[dayOfMonth]");
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 1814400000L + "'", long41 == 1814400000L);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 22 + "'", int44 == 22);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(dateTimeFieldType51);
        org.junit.Assert.assertNotNull(durationFieldType52);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(intArray63);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[2022, 2, 11, 35657799]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 28 + "'", int64 == 28);
        org.junit.Assert.assertNotNull(dateTimeFieldType65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2 + "'", int66 == 2);
    }

    @Test
    public void test08442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08442");
        org.joda.time.tz.NameProvider nameProvider0 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime();
        boolean boolean3 = localDateTime1.isBefore((org.joda.time.ReadablePartial) localDateTime2);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property6 = localDateTime2.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime7 = property6.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField8 = property6.getField();
        int int9 = dateTimeField8.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime();
        int int11 = localDateTime10.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime10.minusMonths((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.minusMonths((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.plusWeeks(22);
        java.util.Locale locale19 = java.util.Locale.JAPANESE;
        java.lang.String str20 = dateTimeField8.getAsShortText((org.joda.time.ReadablePartial) localDateTime17, 22, locale19);
        java.lang.String str23 = nameProvider0.getName(locale19, "11", "Etc/UTC");
        java.util.Locale locale24 = null;
        java.lang.String str27 = nameProvider0.getShortName(locale24, "2022-02-11T09:47:54.519", "31");
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime();
        boolean boolean30 = localDateTime28.isBefore((org.joda.time.ReadablePartial) localDateTime29);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime29.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property33 = localDateTime29.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime34 = property33.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField35 = property33.getField();
        long long38 = dateTimeField35.addWrapField((long) 6, (int) (byte) 0);
        java.lang.String str40 = dateTimeField35.getAsShortText((long) (byte) 0);
        java.lang.String str42 = dateTimeField35.getAsShortText((-116L));
        long long44 = dateTimeField35.roundCeiling((long) 11);
        java.util.Locale locale49 = new java.util.Locale("11", "weekyear", "fra");
        java.lang.String str50 = locale49.getDisplayName();
        org.joda.time.LocalDateTime localDateTime51 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime52 = new org.joda.time.LocalDateTime();
        boolean boolean53 = localDateTime51.isBefore((org.joda.time.ReadablePartial) localDateTime52);
        org.joda.time.LocalDateTime localDateTime55 = localDateTime52.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property56 = localDateTime52.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime57 = property56.withMinimumValue();
        java.util.Locale locale58 = java.util.Locale.UK;
        java.lang.String str59 = property56.getAsShortText(locale58);
        java.lang.String str60 = locale49.getDisplayScript(locale58);
        java.lang.String str61 = dateTimeField35.getAsShortText((long) 715, locale58);
        org.joda.time.LocalDateTime localDateTime62 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime63 = new org.joda.time.LocalDateTime();
        boolean boolean64 = localDateTime62.isBefore((org.joda.time.ReadablePartial) localDateTime63);
        org.joda.time.LocalDateTime localDateTime66 = localDateTime63.plusSeconds((int) (byte) 100);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter67 = null;
        java.lang.String str68 = localDateTime63.toString(dateTimeFormatter67);
        org.joda.time.DateTimeFieldType dateTimeFieldType69 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        org.joda.time.LocalDateTime.Property property70 = localDateTime63.property(dateTimeFieldType69);
        java.util.Locale locale71 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str72 = dateTimeField35.getAsText((org.joda.time.ReadablePartial) localDateTime63, locale71);
        java.lang.String str75 = nameProvider0.getShortName(locale71, "2022-02-11T09:47:59.066", "2022-02-11T09:47:56.112");
        org.joda.time.DateTimeZone.setNameProvider(nameProvider0);
        java.util.Locale locale80 = new java.util.Locale("2022-02-11T09:47:52.924", "2022-02-11T09:47:51.404", "");
        java.util.Locale.Category category81 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale82 = java.util.Locale.getDefault(category81);
        java.lang.String str83 = locale82.getDisplayName();
        java.util.Locale locale86 = new java.util.Locale("fra", "");
        java.util.Set<java.lang.String> strSet87 = locale86.getUnicodeLocaleAttributes();
        java.lang.String str88 = locale86.getScript();
        java.util.Set<java.lang.Character> charSet89 = locale86.getExtensionKeys();
        java.util.Set<java.lang.String> strSet90 = locale86.getUnicodeLocaleKeys();
        java.lang.String str91 = locale86.getDisplayName();
        java.lang.String str92 = locale82.getDisplayLanguage(locale86);
        java.lang.String str93 = locale80.getDisplayLanguage(locale86);
        java.lang.String str96 = nameProvider0.getName(locale86, "2022-02-11T09:48:50.490", "2022-02-11T09:48:39.482");
        org.joda.time.DateTimeZone.setNameProvider(nameProvider0);
        org.junit.Assert.assertNotNull(nameProvider0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 31 + "'", int9 == 31);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 22 + "'", int11 == 22);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "22" + "'", str20, "22");
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 6L + "'", long38 == 6L);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "1" + "'", str40, "1");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "31" + "'", str42, "31");
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 86400000L + "'", long44 == 86400000L);
        org.junit.Assert.assertEquals(locale49.toString(), "11_WEEKYEAR_fra");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "11 (WEEKYEAR,fra)" + "'", str50, "11 (WEEKYEAR,fra)");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "11" + "'", str59, "11");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "1" + "'", str61, "1");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(localDateTime66);
// flaky:         org.junit.Assert.assertEquals("'" + str68 + "' != '" + "2022-02-11T09:54:17.845" + "'", str68, "2022-02-11T09:54:17.845");
        org.junit.Assert.assertNotNull(dateTimeFieldType69);
        org.junit.Assert.assertNotNull(property70);
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "11" + "'", str72, "11");
        org.junit.Assert.assertNull(str75);
        org.junit.Assert.assertEquals(locale80.toString(), "2022-02-11t09:47:52.924_2022-02-11T09:47:51.404");
        org.junit.Assert.assertTrue("'" + category81 + "' != '" + java.util.Locale.Category.FORMAT + "'", category81.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale82);
// flaky:         org.junit.Assert.assertEquals(locale82.toString(), "2022-02-11t09:48:28.422");
// flaky:         org.junit.Assert.assertEquals("'" + str83 + "' != '" + "2022-02-11t09:48:28.422" + "'", str83, "2022-02-11t09:48:28.422");
        org.junit.Assert.assertEquals(locale86.toString(), "fra");
        org.junit.Assert.assertNotNull(strSet87);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "" + "'", str88, "");
        org.junit.Assert.assertNotNull(charSet89);
        org.junit.Assert.assertNotNull(strSet90);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "fra" + "'", str91, "fra");
// flaky:         org.junit.Assert.assertEquals("'" + str92 + "' != '" + "2022-02-11t09:48:28.422" + "'", str92, "2022-02-11t09:48:28.422");
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "2022-02-11t09:47:52.924" + "'", str93, "2022-02-11t09:47:52.924");
        org.junit.Assert.assertNull(str96);
    }

    @Test
    public void test08443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08443");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime1.plusMinutes((int) '#');
        org.joda.time.LocalDateTime localDateTime8 = localDateTime1.minusMinutes((int) (short) 1);
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.LocalDateTime localDateTime11 = localDateTime1.withDurationAdded(readableDuration9, (int) (short) 100);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = null;
        java.lang.String str13 = localDateTime1.toString(dateTimeFormatter12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime1.minusMillis(379);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.withWeekOfWeekyear((int) (byte) 10);
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.LocalDateTime localDateTime20 = localDateTime15.withPeriodAdded(readablePeriod18, 23);
        org.joda.time.LocalDateTime localDateTime22 = org.joda.time.LocalDateTime.parse("2022-02-11T09:47:58.627");
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.minusMonths(0);
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.LocalDateTime localDateTime27 = localDateTime22.withPeriodAdded(readablePeriod25, (-40));
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.withDayOfYear(18);
        boolean boolean30 = localDateTime15.isAfter((org.joda.time.ReadablePartial) localDateTime29);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray31 = localDateTime29.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime33 = localDateTime29.minusWeeks((-57685));
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime();
        boolean boolean36 = localDateTime34.isBefore((org.joda.time.ReadablePartial) localDateTime35);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime35.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime35.plusMinutes((int) '#');
        org.joda.time.LocalDateTime.Property property41 = localDateTime40.weekOfWeekyear();
        java.lang.String str42 = property41.getAsShortText();
        org.joda.time.LocalDateTime localDateTime44 = property41.addWrapFieldToCopy((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime47 = localDateTime45.minusMillis((int) (byte) 1);
        java.lang.String str48 = localDateTime47.toString();
        org.joda.time.DateTime dateTime49 = localDateTime47.toDateTime();
        org.joda.time.LocalDateTime localDateTime50 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime52 = localDateTime50.minusMillis((int) (byte) 1);
        java.lang.String str53 = localDateTime52.toString();
        org.joda.time.DateTime dateTime54 = localDateTime52.toDateTime();
        boolean boolean55 = dateTime49.isEqual((org.joda.time.ReadableInstant) dateTime54);
        org.joda.time.Chronology chronology56 = dateTime54.getChronology();
        org.joda.time.ReadableInstant readableInstant57 = null;
        boolean boolean58 = dateTime54.isEqual(readableInstant57);
        org.joda.time.LocalDateTime localDateTime59 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime60 = new org.joda.time.LocalDateTime();
        boolean boolean61 = localDateTime59.isBefore((org.joda.time.ReadablePartial) localDateTime60);
        org.joda.time.LocalDateTime localDateTime63 = localDateTime60.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property64 = localDateTime60.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime65 = property64.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField66 = property64.getField();
        long long69 = dateTimeField66.addWrapField((long) 6, (int) (byte) 0);
        java.lang.String str71 = dateTimeField66.getAsShortText((long) (byte) 10);
        boolean boolean72 = dateTime54.equals((java.lang.Object) str71);
        int int73 = property41.getDifference((org.joda.time.ReadableInstant) dateTime54);
        org.joda.time.LocalDateTime localDateTime74 = property41.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime75 = property41.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime76 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime77 = new org.joda.time.LocalDateTime();
        boolean boolean78 = localDateTime76.isBefore((org.joda.time.ReadablePartial) localDateTime77);
        org.joda.time.LocalDateTime.Property property79 = localDateTime76.millisOfDay();
        org.joda.time.LocalDateTime localDateTime81 = localDateTime76.plusMonths((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime83 = localDateTime81.minusMonths(59);
        org.joda.time.LocalDateTime localDateTime85 = localDateTime83.plusDays((int) (short) 0);
        int int86 = property41.compareTo((org.joda.time.ReadablePartial) localDateTime83);
        int int87 = localDateTime33.compareTo((org.joda.time.ReadablePartial) localDateTime83);
        org.joda.time.LocalDateTime localDateTime89 = localDateTime83.withCenturyOfEra(546);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime93 = localDateTime83.withDate(35370598, 321, 952);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 321 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime11);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "2022-02-11T09:54:17.907" + "'", str13, "2022-02-11T09:54:17.907");
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "6" + "'", str42, "6");
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(localDateTime47);
// flaky:         org.junit.Assert.assertEquals("'" + str48 + "' != '" + "2022-02-11T09:54:17.906" + "'", str48, "2022-02-11T09:54:17.906");
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(localDateTime52);
// flaky:         org.junit.Assert.assertEquals("'" + str53 + "' != '" + "2022-02-11T09:54:17.906" + "'", str53, "2022-02-11T09:54:17.906");
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 6L + "'", long69 == 6L);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "1" + "'", str71, "1");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertNotNull(localDateTime74);
        org.junit.Assert.assertNotNull(localDateTime75);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(property79);
        org.junit.Assert.assertNotNull(localDateTime81);
        org.junit.Assert.assertNotNull(localDateTime83);
        org.junit.Assert.assertNotNull(localDateTime85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + (-1) + "'", int86 == (-1));
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 1 + "'", int87 == 1);
        org.junit.Assert.assertNotNull(localDateTime89);
    }

    @Test
    public void test08444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08444");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        int int1 = localDateTime0.getYearOfCentury();
        int int2 = localDateTime0.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime0.minusMillis((int) (byte) -1);
        org.joda.time.DateTime dateTime5 = localDateTime0.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone6 = dateTime5.getZone();
        java.lang.String str7 = dateTimeZone6.toString();
        long long11 = dateTimeZone6.convertLocalToUTC(35296406L, true, (long) 1839);
        long long14 = dateTimeZone6.convertLocalToUTC((-9L), false);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 22 + "'", int1 == 22);
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 17 + "'", int2 == 17);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "+00:00:00.117" + "'", str7, "+00:00:00.117");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 35296289L + "'", long11 == 35296289L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-126L) + "'", long14 == (-126L));
    }

    @Test
    public void test08445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08445");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        int int1 = localDateTime0.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime3 = localDateTime0.minusMonths((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.minusMonths((int) (byte) 0);
        int int6 = localDateTime3.getWeekyear();
        org.joda.time.LocalDateTime.Property property7 = localDateTime3.dayOfYear();
        org.joda.time.LocalDateTime.Property property8 = localDateTime3.minuteOfHour();
        org.joda.time.LocalDateTime.Property property9 = localDateTime3.era();
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.LocalDateTime localDateTime11 = localDateTime3.plus(readableDuration10);
        int int12 = localDateTime11.getCenturyOfEra();
        org.joda.time.LocalDateTime.Property property13 = localDateTime11.yearOfCentury();
        java.lang.String str14 = property13.getAsShortText();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 22 + "'", int1 == 22);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 20 + "'", int12 == 20);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "22" + "'", str14, "22");
    }

    @Test
    public void test08446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08446");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property5 = localDateTime1.dayOfMonth();
        int int6 = property5.getMinimumValue();
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime((long) 83);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minusSeconds(83);
        int int11 = localDateTime10.getYear();
        org.joda.time.LocalDateTime.Property property12 = localDateTime10.secondOfMinute();
        int int13 = property5.compareTo((org.joda.time.ReadablePartial) localDateTime10);
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime();
        boolean boolean16 = localDateTime14.isBefore((org.joda.time.ReadablePartial) localDateTime15);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime15.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property19 = localDateTime15.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime20 = property19.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField21 = property19.getField();
        long long23 = dateTimeField21.remainder((-1L));
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = dateTimeField21.getType();
        long long27 = dateTimeField21.getDifferenceAsLong(52L, (long) 10);
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.minusMillis((int) (byte) 1);
        java.lang.String str31 = localDateTime30.toString();
        org.joda.time.LocalDateTime localDateTime33 = localDateTime30.minusMonths((int) 'a');
        org.joda.time.LocalDateTime localDateTime35 = localDateTime33.minusMinutes(22);
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime38 = localDateTime36.minusMillis((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime38.plusDays(0);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime40.plusMillis(22);
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        int int44 = localDateTime42.get(dateTimeFieldType43);
        org.joda.time.LocalDateTime.Property property45 = localDateTime33.property(dateTimeFieldType43);
        java.util.Locale.Builder builder47 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder48 = builder47.clearExtensions();
        org.joda.time.LocalDateTime localDateTime49 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime50 = new org.joda.time.LocalDateTime();
        boolean boolean51 = localDateTime49.isBefore((org.joda.time.ReadablePartial) localDateTime50);
        org.joda.time.LocalDateTime localDateTime53 = localDateTime50.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property54 = localDateTime50.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime55 = property54.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField56 = property54.getField();
        int int57 = dateTimeField56.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime58 = new org.joda.time.LocalDateTime();
        int int59 = localDateTime58.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime61 = localDateTime58.minusMonths((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime63 = localDateTime61.minusMonths((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime65 = localDateTime63.plusWeeks(22);
        java.util.Locale locale67 = java.util.Locale.JAPANESE;
        java.lang.String str68 = dateTimeField56.getAsShortText((org.joda.time.ReadablePartial) localDateTime65, 22, locale67);
        java.util.Locale.Builder builder69 = builder48.setLocale(locale67);
        java.util.Locale locale70 = builder48.build();
        java.lang.String str71 = dateTimeField21.getAsText((org.joda.time.ReadablePartial) localDateTime33, 0, locale70);
        java.lang.String str72 = locale70.getISO3Country();
        int int73 = property5.getMaximumTextLength(locale70);
        int int74 = property5.get();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1969 + "'", int11 == 1969);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 86399999L + "'", long23 == 86399999L);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertNotNull(localDateTime30);
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "2022-02-11T09:54:17.992" + "'", str31, "2022-02-11T09:54:17.992");
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(dateTimeFieldType43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 6 + "'", int44 == 6);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 31 + "'", int57 == 31);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 22 + "'", int59 == 22);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "22" + "'", str68, "22");
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "0" + "'", str71, "0");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 2 + "'", int73 == 2);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 11 + "'", int74 == 11);
    }

    @Test
    public void test08447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08447");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property5 = localDateTime1.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime6 = property5.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField7 = property5.getField();
        long long9 = dateTimeField7.remainder((-1L));
        org.joda.time.DurationField durationField10 = dateTimeField7.getRangeDurationField();
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime();
        boolean boolean13 = localDateTime11.isBefore((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime12.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property16 = localDateTime12.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime17 = property16.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField18 = property16.getField();
        int int21 = dateTimeField18.getDifference(1L, 86399999L);
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime();
        int int23 = localDateTime22.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime22.minusMonths((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.minusMonths((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.plusWeeks(22);
        org.joda.time.LocalDateTime.Property property30 = localDateTime29.dayOfMonth();
        java.util.Locale locale35 = new java.util.Locale("11", "weekyear", "fra");
        java.lang.String str36 = locale35.getDisplayName();
        java.lang.String str37 = dateTimeField18.getAsShortText((org.joda.time.ReadablePartial) localDateTime29, (int) (byte) 1, locale35);
        int int38 = dateTimeField7.getMaximumShortTextLength(locale35);
        java.util.Locale locale39 = java.util.Locale.CHINESE;
        java.util.Locale locale42 = new java.util.Locale("fra", "");
        java.util.Set<java.lang.String> strSet43 = locale42.getUnicodeLocaleAttributes();
        java.lang.String str44 = locale42.getScript();
        java.lang.String str45 = locale42.getCountry();
        java.lang.String str46 = locale39.getDisplayLanguage(locale42);
        int int47 = dateTimeField7.getMaximumShortTextLength(locale39);
        org.joda.time.LocalDateTime localDateTime48 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime49 = new org.joda.time.LocalDateTime();
        boolean boolean50 = localDateTime48.isBefore((org.joda.time.ReadablePartial) localDateTime49);
        int[] intArray51 = localDateTime49.getValues();
        org.joda.time.LocalDateTime localDateTime53 = localDateTime49.plusYears((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime54 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime55 = new org.joda.time.LocalDateTime();
        boolean boolean56 = localDateTime54.isBefore((org.joda.time.ReadablePartial) localDateTime55);
        int[] intArray57 = localDateTime55.getValues();
        org.joda.time.LocalDateTime localDateTime58 = localDateTime49.withFields((org.joda.time.ReadablePartial) localDateTime55);
        org.joda.time.LocalDateTime localDateTime60 = localDateTime58.minusMillis((int) (short) 100);
        int int61 = localDateTime58.getMillisOfSecond();
        org.joda.time.LocalDateTime.Property property62 = localDateTime58.minuteOfHour();
        org.joda.time.ReadablePeriod readablePeriod63 = null;
        org.joda.time.LocalDateTime localDateTime64 = localDateTime58.minus(readablePeriod63);
        org.joda.time.LocalDateTime localDateTime66 = localDateTime58.withWeekyear(27);
        org.joda.time.ReadablePeriod readablePeriod67 = null;
        org.joda.time.LocalDateTime localDateTime69 = localDateTime58.withPeriodAdded(readablePeriod67, 448);
        org.joda.time.LocalDateTime localDateTime71 = localDateTime58.plusDays(0);
        int int72 = dateTimeField7.getMinimumValue((org.joda.time.ReadablePartial) localDateTime71);
        org.joda.time.LocalDateTime.Property property73 = localDateTime71.dayOfMonth();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 86399999L + "'", long9 == 86399999L);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 22 + "'", int23 == 22);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertEquals(locale35.toString(), "11_WEEKYEAR_fra");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "11 (WEEKYEAR,fra)" + "'", str36, "11 (WEEKYEAR,fra)");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "1" + "'", str37, "1");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2 + "'", int38 == 2);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "zh");
        org.junit.Assert.assertEquals(locale42.toString(), "fra");
        org.junit.Assert.assertNotNull(strSet43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "Chinese" + "'", str46, "Chinese");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2 + "'", int47 == 2);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(intArray51);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[2022, 2, 11, 35658020]");
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(intArray57);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[2022, 2, 11, 35658020]");
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(localDateTime60);
// flaky:         org.junit.Assert.assertTrue("'" + int61 + "' != '" + 20 + "'", int61 == 20);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertNotNull(localDateTime69);
        org.junit.Assert.assertNotNull(localDateTime71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1 + "'", int72 == 1);
        org.junit.Assert.assertNotNull(property73);
    }

    @Test
    public void test08448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08448");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetHours((-595));
        org.junit.Assert.assertNotNull(dateTimeZone1);
    }

    @Test
    public void test08449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08449");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        int int1 = localDateTime0.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime3 = localDateTime0.minusMonths((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.minusMonths((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property6 = localDateTime3.minuteOfHour();
        java.util.Locale locale7 = java.util.Locale.JAPAN;
        java.util.Locale locale8 = java.util.Locale.ITALY;
        java.lang.String str9 = locale7.getDisplayScript(locale8);
        int int10 = property6.getMaximumShortTextLength(locale8);
        long long11 = property6.remainder();
        boolean boolean12 = property6.isLeap();
        org.joda.time.LocalDateTime localDateTime14 = property6.addToCopy(222);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minusMinutes(35537613);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 22 + "'", int1 == 22);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
// flaky:         org.junit.Assert.assertTrue("'" + long11 + "' != '" + 18065L + "'", long11 == 18065L);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
    }

    @Test
    public void test08450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08450");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property5 = localDateTime1.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime6 = property5.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField7 = property5.getField();
        long long10 = dateTimeField7.addWrapField((long) (short) 1, (int) (byte) 100);
        int int12 = dateTimeField7.getMinimumValue((-1L));
        org.joda.time.ReadablePartial readablePartial13 = null;
        int[] intArray16 = new int[] { 11 };
        int[] intArray18 = dateTimeField7.addWrapPartial(readablePartial13, 100, intArray16, 0);
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime();
        boolean boolean22 = localDateTime20.isBefore((org.joda.time.ReadablePartial) localDateTime21);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime21.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property25 = localDateTime21.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime();
        boolean boolean28 = localDateTime26.isBefore((org.joda.time.ReadablePartial) localDateTime27);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime27.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property31 = localDateTime27.dayOfMonth();
        java.util.Locale locale32 = java.util.Locale.FRENCH;
        java.util.Set<java.lang.String> strSet33 = locale32.getUnicodeLocaleAttributes();
        java.lang.String str34 = locale32.getVariant();
        java.lang.String str35 = property31.getAsText(locale32);
        java.lang.String str36 = property25.getAsShortText(locale32);
        org.joda.time.LocalDateTime localDateTime37 = property25.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime localDateTime38 = property25.roundFloorCopy();
        java.util.Locale locale41 = new java.util.Locale("", "weekyear");
        int int42 = property25.getMaximumShortTextLength(locale41);
        java.lang.String str43 = dateTimeField7.getAsText(0L, locale41);
        long long45 = dateTimeField7.roundHalfCeiling(35303854L);
        org.joda.time.DurationField durationField46 = dateTimeField7.getLeapDurationField();
        org.joda.time.LocalDateTime localDateTime47 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime49 = localDateTime47.minusMillis((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime51 = localDateTime49.plusDays(0);
        org.joda.time.LocalDateTime localDateTime53 = localDateTime51.plusMillis(22);
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        int int55 = localDateTime53.get(dateTimeFieldType54);
        org.joda.time.LocalDateTime.Property property56 = localDateTime53.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime58 = localDateTime53.withMinuteOfHour(0);
        java.util.Locale locale60 = java.util.Locale.forLanguageTag("");
        java.lang.String str61 = dateTimeField7.getAsShortText((org.joda.time.ReadablePartial) localDateTime53, locale60);
        org.joda.time.LocalDateTime.Property property62 = localDateTime53.year();
        org.joda.time.LocalDateTime localDateTime63 = property62.roundHalfCeilingCopy();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 604800001L + "'", long10 == 604800001L);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[11]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[11]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "11" + "'", str35, "11");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "11" + "'", str36, "11");
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertEquals(locale41.toString(), "_WEEKYEAR");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2 + "'", int42 == 2);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "1" + "'", str43, "1");
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertNull(durationField46);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(dateTimeFieldType54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 6 + "'", int55 == 6);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "11" + "'", str61, "11");
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(localDateTime63);
    }

    @Test
    public void test08451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08451");
        java.util.Locale locale0 = java.util.Locale.FRENCH;
        java.lang.String str1 = locale0.getDisplayName();
        boolean boolean2 = locale0.hasExtensions();
        java.lang.String str3 = locale0.getDisplayCountry();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr");
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "\ud504\ub791\uc2a4\uc5b4" + "'", str1, "\ud504\ub791\uc2a4\uc5b4");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
    }

    @Test
    public void test08452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08452");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property5 = localDateTime1.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime6 = property5.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField7 = property5.getField();
        long long9 = dateTimeField7.remainder((-1L));
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = dateTimeField7.getType();
        boolean boolean11 = dateTimeField7.isSupported();
        boolean boolean12 = dateTimeField7.isLenient();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = dateTimeField7.getType();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime();
        boolean boolean16 = localDateTime14.isBefore((org.joda.time.ReadablePartial) localDateTime15);
        int[] intArray17 = localDateTime15.getValues();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime15.plusYears((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime();
        boolean boolean22 = localDateTime20.isBefore((org.joda.time.ReadablePartial) localDateTime21);
        int[] intArray23 = localDateTime21.getValues();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime15.withFields((org.joda.time.ReadablePartial) localDateTime21);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.minusMillis((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.minusSeconds((int) '#');
        int int29 = localDateTime28.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime31 = localDateTime28.minusMinutes(2022);
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.getDefault();
        int int34 = dateTimeZone32.getStandardOffset((long) (-100));
        java.lang.String str35 = dateTimeZone32.getID();
        long long37 = dateTimeZone32.nextTransition((long) 709);
        long long39 = dateTimeZone32.nextTransition((long) 27);
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime();
        boolean boolean43 = localDateTime41.isBefore((org.joda.time.ReadablePartial) localDateTime42);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime42.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property46 = localDateTime42.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime47 = property46.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField48 = property46.getField();
        java.util.Locale locale49 = java.util.Locale.JAPAN;
        java.util.Locale locale50 = java.util.Locale.FRENCH;
        java.lang.String str51 = locale49.getDisplayCountry(locale50);
        int int52 = property46.getMaximumTextLength(locale50);
        java.lang.String str54 = locale50.getExtension('u');
        java.util.Locale locale55 = locale50.stripExtensions();
        java.lang.String str56 = dateTimeZone32.getShortName((long) 1, locale55);
        java.lang.String str57 = dateTimeField7.getAsShortText((org.joda.time.ReadablePartial) localDateTime31, locale55);
        java.util.Locale locale58 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str59 = locale58.getISO3Language();
        java.lang.String str60 = locale55.getDisplayName(locale58);
        java.lang.String str61 = locale55.getDisplayName();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 86399999L + "'", long9 == 86399999L);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(intArray17);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[2022, 2, 11, 35658277]");
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(intArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[2022, 2, 11, 35658277]");
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 5 + "'", int29 == 5);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 117 + "'", int34 == 117);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "+00:00:00.117" + "'", str35, "+00:00:00.117");
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 709L + "'", long37 == 709L);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 27L + "'", long39 == 27L);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "Japon" + "'", str51, "Japon");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2 + "'", int52 == 2);
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "+00:00:00.117" + "'", str56, "+00:00:00.117");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "10" + "'", str57, "10");
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "zho" + "'", str59, "zho");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "\u6cd5\u6587" + "'", str60, "\u6cd5\u6587");
// flaky:         org.junit.Assert.assertEquals("'" + str61 + "' != '" + "\ud504\ub791\uc2a4\uc5b4" + "'", str61, "\ud504\ub791\uc2a4\uc5b4");
    }

    @Test
    public void test08453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08453");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.minusMillis((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.plusDays(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.withField(dateTimeFieldType5, 0);
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime();
        boolean boolean10 = localDateTime8.isBefore((org.joda.time.ReadablePartial) localDateTime9);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime9.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime9.plusMinutes((int) '#');
        org.joda.time.LocalDateTime localDateTime16 = localDateTime9.minusMinutes((int) (short) 1);
        boolean boolean17 = localDateTime7.isAfter((org.joda.time.ReadablePartial) localDateTime16);
        org.joda.time.LocalDateTime.Property property18 = localDateTime7.secondOfMinute();
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = property18.getFieldType();
        org.joda.time.LocalDateTime localDateTime20 = property18.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime();
        boolean boolean23 = localDateTime21.isBefore((org.joda.time.ReadablePartial) localDateTime22);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime22.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime22.plusMinutes((int) '#');
        org.joda.time.LocalDateTime localDateTime29 = localDateTime22.minusMinutes((int) (short) 1);
        org.joda.time.ReadableDuration readableDuration30 = null;
        org.joda.time.LocalDateTime localDateTime32 = localDateTime22.withDurationAdded(readableDuration30, (int) (short) 100);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter33 = null;
        java.lang.String str34 = localDateTime22.toString(dateTimeFormatter33);
        boolean boolean35 = localDateTime20.isAfter((org.joda.time.ReadablePartial) localDateTime22);
        org.joda.time.LocalDateTime.Property property36 = localDateTime20.hourOfDay();
        int int37 = property36.getMinimumValueOverall();
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime32);
// flaky:         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "2022-02-11T09:54:18.306" + "'", str34, "2022-02-11T09:54:18.306");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
    }

    @Test
    public void test08454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08454");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone0);
        java.util.Locale locale3 = java.util.Locale.CHINESE;
        java.lang.String str4 = dateTimeZone0.getName((long) (short) 0, locale3);
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusMillis((int) (byte) 1);
        java.lang.String str8 = localDateTime7.toString();
        org.joda.time.DateTime dateTime9 = localDateTime7.toDateTime();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusMillis((int) (byte) 1);
        java.lang.String str13 = localDateTime12.toString();
        org.joda.time.DateTime dateTime14 = localDateTime12.toDateTime();
        boolean boolean15 = dateTime9.isEqual((org.joda.time.ReadableInstant) dateTime14);
        int int16 = dateTimeZone0.getOffset((org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str18 = dateTimeFieldType17.toString();
        java.lang.String str19 = dateTimeFieldType17.toString();
        boolean boolean20 = dateTime9.isSupported(dateTimeFieldType17);
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime();
        boolean boolean23 = localDateTime21.isBefore((org.joda.time.ReadablePartial) localDateTime22);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime22.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property26 = localDateTime22.dayOfMonth();
        boolean boolean27 = property26.isLeap();
        org.joda.time.LocalDateTime localDateTime28 = property26.roundCeilingCopy();
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.minusMillis((int) (byte) 1);
        java.lang.String str32 = localDateTime31.toString();
        org.joda.time.DateTime dateTime33 = localDateTime31.toDateTime();
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime36 = localDateTime34.minusMillis((int) (byte) 1);
        java.lang.String str37 = localDateTime36.toString();
        org.joda.time.DateTime dateTime38 = localDateTime36.toDateTime();
        boolean boolean39 = dateTime33.isEqual((org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.Chronology chronology40 = dateTime38.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = org.joda.time.DateTimeFieldType.dayOfYear();
        int int42 = dateTime38.get(dateTimeFieldType41);
        int int43 = property26.compareTo((org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.DateTimeField dateTimeField44 = property26.getField();
        org.joda.time.DateTimeField dateTimeField45 = property26.getField();
        boolean boolean46 = dateTime9.equals((java.lang.Object) dateTimeField45);
        org.joda.time.LocalDateTime localDateTime49 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime51 = localDateTime49.minusMillis((int) (byte) 1);
        java.lang.String str52 = localDateTime51.toString();
        org.joda.time.DateTime dateTime53 = localDateTime51.toDateTime();
        org.joda.time.LocalDateTime localDateTime54 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime56 = localDateTime54.minusMillis((int) (byte) 1);
        java.lang.String str57 = localDateTime56.toString();
        org.joda.time.DateTime dateTime58 = localDateTime56.toDateTime();
        boolean boolean59 = dateTime53.isEqual((org.joda.time.ReadableInstant) dateTime58);
        org.joda.time.Chronology chronology60 = dateTime58.getChronology();
        org.joda.time.LocalDateTime localDateTime61 = new org.joda.time.LocalDateTime((java.lang.Object) 35271574L, chronology60);
        org.joda.time.LocalDateTime localDateTime62 = new org.joda.time.LocalDateTime((long) 'u', chronology60);
        org.joda.time.LocalDateTime localDateTime63 = new org.joda.time.LocalDateTime(chronology60);
        java.util.Locale locale64 = java.util.Locale.KOREA;
        java.util.Locale.Builder builder65 = new java.util.Locale.Builder();
        java.util.Locale locale66 = builder65.build();
        java.lang.String str67 = locale66.getDisplayVariant();
        java.lang.String str68 = locale64.getDisplayName(locale66);
        java.lang.String str69 = locale66.toLanguageTag();
        java.lang.String str70 = dateTimeField45.getAsShortText((org.joda.time.ReadablePartial) localDateTime63, locale66);
        long long73 = dateTimeField45.getDifferenceAsLong(1036805200L, 3577706106L);
        java.lang.String str75 = dateTimeField45.getAsShortText((long) 35450687);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.117" + "'", str4, "+00:00:00.117");
        org.junit.Assert.assertNotNull(localDateTime7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "2022-02-11T09:54:18.354" + "'", str8, "2022-02-11T09:54:18.354");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(localDateTime12);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "2022-02-11T09:54:18.354" + "'", str13, "2022-02-11T09:54:18.354");
        org.junit.Assert.assertNotNull(dateTime14);
// flaky:         org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 117 + "'", int16 == 117);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "weekyear" + "'", str18, "weekyear");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "weekyear" + "'", str19, "weekyear");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime31);
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "2022-02-11T09:54:18.354" + "'", str32, "2022-02-11T09:54:18.354");
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(localDateTime36);
// flaky:         org.junit.Assert.assertEquals("'" + str37 + "' != '" + "2022-02-11T09:54:18.354" + "'", str37, "2022-02-11T09:54:18.354");
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 42 + "'", int42 == 42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(localDateTime51);
// flaky:         org.junit.Assert.assertEquals("'" + str52 + "' != '" + "2022-02-11T09:54:18.354" + "'", str52, "2022-02-11T09:54:18.354");
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(localDateTime56);
// flaky:         org.junit.Assert.assertEquals("'" + str57 + "' != '" + "2022-02-11T09:54:18.354" + "'", str57, "2022-02-11T09:54:18.354");
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "Korean (South Korea)" + "'", str68, "Korean (South Korea)");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "und" + "'", str69, "und");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "11" + "'", str70, "11");
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + (-29L) + "'", long73 == (-29L));
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "1" + "'", str75, "1");
    }

    @Test
    public void test08455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08455");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property5 = localDateTime1.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime6 = property5.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField7 = property5.getField();
        long long10 = dateTimeField7.addWrapField((long) 6, (int) (byte) 0);
        java.lang.String str12 = dateTimeField7.getAsShortText((long) (byte) 0);
        java.lang.String str14 = dateTimeField7.getAsShortText((-116L));
        long long16 = dateTimeField7.roundCeiling((long) 11);
        int int18 = dateTimeField7.getLeapAmount(780L);
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.minusMillis((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.plusDays(0);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime21.withYearOfEra(874);
        org.joda.time.LocalDateTime.Property property26 = localDateTime21.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime();
        boolean boolean29 = localDateTime27.isBefore((org.joda.time.ReadablePartial) localDateTime28);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime28.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property32 = localDateTime28.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime33 = property32.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField34 = property32.getField();
        org.joda.time.LocalDateTime localDateTime35 = property32.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime();
        boolean boolean38 = localDateTime36.isBefore((org.joda.time.ReadablePartial) localDateTime37);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime37.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property41 = localDateTime37.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime42 = property41.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField43 = property41.getField();
        int int44 = property41.getMaximumValueOverall();
        org.joda.time.LocalDateTime localDateTime46 = property41.addToCopy(0);
        org.joda.time.LocalDateTime localDateTime48 = property41.addToCopy(1);
        org.joda.time.LocalDateTime localDateTime50 = property41.addToCopy((long) (byte) 1);
        org.joda.time.LocalDateTime localDateTime51 = property41.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime localDateTime52 = localDateTime35.withFields((org.joda.time.ReadablePartial) localDateTime51);
        org.joda.time.ReadablePeriod readablePeriod53 = null;
        org.joda.time.LocalDateTime localDateTime54 = localDateTime52.plus(readablePeriod53);
        org.joda.time.DateTime dateTime55 = localDateTime54.toDateTime();
        boolean boolean56 = localDateTime21.isBefore((org.joda.time.ReadablePartial) localDateTime54);
        org.joda.time.DateTimeFieldType dateTimeFieldType58 = localDateTime21.getFieldType(0);
        java.lang.String str59 = dateTimeFieldType58.getName();
        org.joda.time.LocalDateTime localDateTime60 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime61 = new org.joda.time.LocalDateTime();
        boolean boolean62 = localDateTime60.isBefore((org.joda.time.ReadablePartial) localDateTime61);
        int[] intArray63 = localDateTime61.getValues();
        org.joda.time.LocalDateTime localDateTime65 = localDateTime61.plusYears((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime66 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime67 = new org.joda.time.LocalDateTime();
        boolean boolean68 = localDateTime66.isBefore((org.joda.time.ReadablePartial) localDateTime67);
        int[] intArray69 = localDateTime67.getValues();
        org.joda.time.LocalDateTime localDateTime70 = localDateTime61.withFields((org.joda.time.ReadablePartial) localDateTime67);
        org.joda.time.LocalDateTime localDateTime72 = localDateTime70.minusMillis((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime74 = localDateTime72.minusSeconds((int) '#');
        org.joda.time.LocalDateTime localDateTime76 = localDateTime74.withWeekOfWeekyear(50);
        org.joda.time.LocalDateTime localDateTime78 = localDateTime74.withMinuteOfHour((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime80 = localDateTime74.minusMonths((int) (short) 10);
        org.joda.time.DateTimeFieldType dateTimeFieldType82 = localDateTime74.getFieldType(0);
        org.joda.time.LocalDateTime localDateTime83 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime84 = new org.joda.time.LocalDateTime();
        boolean boolean85 = localDateTime83.isBefore((org.joda.time.ReadablePartial) localDateTime84);
        org.joda.time.LocalDateTime localDateTime87 = localDateTime84.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime89 = localDateTime84.plusMinutes((int) '#');
        org.joda.time.LocalDateTime localDateTime91 = localDateTime84.plusMonths(0);
        org.joda.time.LocalDateTime localDateTime93 = localDateTime91.minusWeeks(5);
        org.joda.time.Chronology chronology94 = localDateTime91.getChronology();
        boolean boolean95 = dateTimeFieldType82.isSupported(chronology94);
        org.joda.time.DateTimeField dateTimeField96 = dateTimeFieldType58.getField(chronology94);
        org.joda.time.LocalDateTime localDateTime97 = new org.joda.time.LocalDateTime((java.lang.Object) 780L, chronology94);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 6L + "'", long10 == 6L);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "1" + "'", str12, "1");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "31" + "'", str14, "31");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 86400000L + "'", long16 == 86400000L);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 31 + "'", int44 == 31);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "year" + "'", str59, "year");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(intArray63);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[2022, 2, 11, 35658388]");
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(intArray69);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[2022, 2, 11, 35658388]");
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertNotNull(localDateTime72);
        org.junit.Assert.assertNotNull(localDateTime74);
        org.junit.Assert.assertNotNull(localDateTime76);
        org.junit.Assert.assertNotNull(localDateTime78);
        org.junit.Assert.assertNotNull(localDateTime80);
        org.junit.Assert.assertNotNull(dateTimeFieldType82);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(localDateTime87);
        org.junit.Assert.assertNotNull(localDateTime89);
        org.junit.Assert.assertNotNull(localDateTime91);
        org.junit.Assert.assertNotNull(localDateTime93);
        org.junit.Assert.assertNotNull(chronology94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + true + "'", boolean95 == true);
        org.junit.Assert.assertNotNull(dateTimeField96);
    }

    @Test
    public void test08456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08456");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property5 = localDateTime1.dayOfMonth();
        boolean boolean6 = property5.isLeap();
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime((long) (-1));
        org.joda.time.LocalDateTime.Property property9 = localDateTime8.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.getDefault();
        java.util.Locale locale13 = null;
        java.lang.String str14 = dateTimeZone11.getName((long) (short) 10, locale13);
        long long16 = dateTimeZone10.getMillisKeepLocal(dateTimeZone11, (long) 874);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.getDefault();
        long long19 = dateTimeZone11.getMillisKeepLocal(dateTimeZone17, (long) '4');
        int int21 = dateTimeZone11.getOffsetFromLocal((long) 83);
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.minusMillis((int) (byte) 1);
        java.lang.String str25 = localDateTime24.toString();
        org.joda.time.DateTime dateTime26 = localDateTime24.toDateTime();
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.minusMillis((int) (byte) 1);
        java.lang.String str30 = localDateTime29.toString();
        org.joda.time.DateTime dateTime31 = localDateTime29.toDateTime();
        boolean boolean32 = dateTime26.isEqual((org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime35 = localDateTime33.minusMillis((int) (byte) 1);
        java.lang.String str36 = localDateTime35.toString();
        org.joda.time.DateTime dateTime37 = localDateTime35.toDateTime();
        boolean boolean38 = dateTime26.isEqual((org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime41 = localDateTime39.minusMillis((int) (byte) 1);
        java.lang.String str42 = localDateTime41.toString();
        org.joda.time.DateTime dateTime43 = localDateTime41.toDateTime();
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime46 = localDateTime44.minusMillis((int) (byte) 1);
        java.lang.String str47 = localDateTime46.toString();
        org.joda.time.DateTime dateTime48 = localDateTime46.toDateTime();
        boolean boolean49 = dateTime43.isEqual((org.joda.time.ReadableInstant) dateTime48);
        boolean boolean50 = dateTime26.isEqual((org.joda.time.ReadableInstant) dateTime48);
        int int51 = dateTimeZone11.getOffset((org.joda.time.ReadableInstant) dateTime48);
        org.joda.time.DateTimeZone dateTimeZone52 = dateTime48.getZone();
        int int53 = property9.getDifference((org.joda.time.ReadableInstant) dateTime48);
        int int54 = property5.compareTo((org.joda.time.ReadableInstant) dateTime48);
        org.joda.time.LocalDateTime localDateTime55 = new org.joda.time.LocalDateTime();
        int int56 = localDateTime55.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime58 = localDateTime55.plusHours((-1));
        org.joda.time.LocalDateTime localDateTime60 = localDateTime55.minusHours((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime61 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime62 = new org.joda.time.LocalDateTime();
        boolean boolean63 = localDateTime61.isBefore((org.joda.time.ReadablePartial) localDateTime62);
        org.joda.time.LocalDateTime localDateTime65 = localDateTime62.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property66 = localDateTime62.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime67 = property66.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField68 = property66.getField();
        long long70 = dateTimeField68.remainder((-1L));
        org.joda.time.DateTimeFieldType dateTimeFieldType71 = dateTimeField68.getType();
        int int72 = localDateTime55.indexOf(dateTimeFieldType71);
        boolean boolean73 = dateTime48.isSupported(dateTimeFieldType71);
        org.joda.time.DateTimeFieldType dateTimeFieldType74 = org.joda.time.DateTimeFieldType.weekyearOfCentury();
        org.joda.time.LocalDateTime localDateTime77 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime79 = localDateTime77.minusMillis((int) (byte) 1);
        java.lang.String str80 = localDateTime79.toString();
        org.joda.time.DateTime dateTime81 = localDateTime79.toDateTime();
        org.joda.time.LocalDateTime localDateTime82 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime84 = localDateTime82.minusMillis((int) (byte) 1);
        java.lang.String str85 = localDateTime84.toString();
        org.joda.time.DateTime dateTime86 = localDateTime84.toDateTime();
        boolean boolean87 = dateTime81.isEqual((org.joda.time.ReadableInstant) dateTime86);
        org.joda.time.Chronology chronology88 = dateTime86.getChronology();
        org.joda.time.LocalDateTime localDateTime89 = new org.joda.time.LocalDateTime((java.lang.Object) 35271574L, chronology88);
        org.joda.time.LocalDateTime localDateTime90 = new org.joda.time.LocalDateTime((long) 'u', chronology88);
        org.joda.time.LocalDateTime localDateTime91 = new org.joda.time.LocalDateTime(chronology88);
        boolean boolean92 = dateTimeFieldType74.isSupported(chronology88);
        int int93 = dateTime48.get(dateTimeFieldType74);
        long long94 = dateTime48.getMillis();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+00:00:00.117" + "'", str14, "+00:00:00.117");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 874L + "'", long16 == 874L);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 52L + "'", long19 == 52L);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 117 + "'", int21 == 117);
        org.junit.Assert.assertNotNull(localDateTime24);
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "2022-02-11T09:54:18.459" + "'", str25, "2022-02-11T09:54:18.459");
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(localDateTime29);
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "2022-02-11T09:54:18.459" + "'", str30, "2022-02-11T09:54:18.459");
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(localDateTime35);
// flaky:         org.junit.Assert.assertEquals("'" + str36 + "' != '" + "2022-02-11T09:54:18.459" + "'", str36, "2022-02-11T09:54:18.459");
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(localDateTime41);
// flaky:         org.junit.Assert.assertEquals("'" + str42 + "' != '" + "2022-02-11T09:54:18.459" + "'", str42, "2022-02-11T09:54:18.459");
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(localDateTime46);
// flaky:         org.junit.Assert.assertEquals("'" + str47 + "' != '" + "2022-02-11T09:54:18.459" + "'", str47, "2022-02-11T09:54:18.459");
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 117 + "'", int51 == 117);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-2719) + "'", int53 == (-2719));
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int56 + "' != '" + 460 + "'", int56 == 460);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 86399999L + "'", long70 == 86399999L);
        org.junit.Assert.assertNotNull(dateTimeFieldType71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 2 + "'", int72 == 2);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType74);
        org.junit.Assert.assertNotNull(localDateTime79);
// flaky:         org.junit.Assert.assertEquals("'" + str80 + "' != '" + "2022-02-11T09:54:18.459" + "'", str80, "2022-02-11T09:54:18.459");
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertNotNull(localDateTime84);
// flaky:         org.junit.Assert.assertEquals("'" + str85 + "' != '" + "2022-02-11T09:54:18.459" + "'", str85, "2022-02-11T09:54:18.459");
        org.junit.Assert.assertNotNull(dateTime86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertNotNull(chronology88);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + true + "'", boolean92 == true);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 22 + "'", int93 == 22);
// flaky:         org.junit.Assert.assertTrue("'" + long94 + "' != '" + 1644573258342L + "'", long94 == 1644573258342L);
    }

    @Test
    public void test08457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08457");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("2022-02-11t09:48:16.570", strMap1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=2022-02-11t09:48:16.570");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08458");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(779);
        org.junit.Assert.assertNotNull(dateTimeZone1);
    }

    @Test
    public void test08459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08459");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property5 = localDateTime1.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime6 = property5.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField7 = property5.getField();
        int int8 = property5.getMaximumValueOverall();
        org.joda.time.LocalDateTime localDateTime9 = property5.roundCeilingCopy();
        org.joda.time.DateTimeField dateTimeField10 = property5.getField();
        java.lang.String str11 = dateTimeField10.toString();
        long long14 = dateTimeField10.getDifferenceAsLong((-119L), (long) 276);
        java.lang.String str16 = dateTimeField10.getAsText((long) 524);
        java.util.Locale locale20 = new java.util.Locale("", "weekyear");
        java.lang.String str21 = dateTimeField10.getAsShortText(673, locale20);
        long long23 = dateTimeField10.roundHalfCeiling(51566L);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.field.FieldUtils.verifyValueBounds(dateTimeField10, 607, 547, 121);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 607 for dayOfMonth must be in the range [547,121]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 31 + "'", int8 == 31);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "DateTimeField[dayOfMonth]" + "'", str11, "DateTimeField[dayOfMonth]");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "1" + "'", str16, "1");
        org.junit.Assert.assertEquals(locale20.toString(), "_WEEKYEAR");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "673" + "'", str21, "673");
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
    }

    @Test
    public void test08460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08460");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property5 = localDateTime1.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime6 = property5.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField7 = property5.getField();
        org.joda.time.LocalDateTime localDateTime8 = property5.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minusWeeks(1969);
        org.joda.time.LocalDateTime.Property property11 = localDateTime8.weekyear();
        int int12 = property11.getMinimumValue();
        org.joda.time.DurationField durationField13 = property11.getRangeDurationField();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.getDefault();
        int int16 = dateTimeZone14.getStandardOffset((long) (-100));
        java.util.TimeZone timeZone17 = dateTimeZone14.toTimeZone();
        long long20 = dateTimeZone14.convertLocalToUTC((long) (-2021), false);
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime();
        boolean boolean23 = localDateTime21.isBefore((org.joda.time.ReadablePartial) localDateTime22);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime22.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property26 = localDateTime22.dayOfMonth();
        boolean boolean27 = property26.isLeap();
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime((long) (-1));
        org.joda.time.LocalDateTime.Property property30 = localDateTime29.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.getDefault();
        java.util.Locale locale34 = null;
        java.lang.String str35 = dateTimeZone32.getName((long) (short) 10, locale34);
        long long37 = dateTimeZone31.getMillisKeepLocal(dateTimeZone32, (long) 874);
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.getDefault();
        long long40 = dateTimeZone32.getMillisKeepLocal(dateTimeZone38, (long) '4');
        int int42 = dateTimeZone32.getOffsetFromLocal((long) 83);
        org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime45 = localDateTime43.minusMillis((int) (byte) 1);
        java.lang.String str46 = localDateTime45.toString();
        org.joda.time.DateTime dateTime47 = localDateTime45.toDateTime();
        org.joda.time.LocalDateTime localDateTime48 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime50 = localDateTime48.minusMillis((int) (byte) 1);
        java.lang.String str51 = localDateTime50.toString();
        org.joda.time.DateTime dateTime52 = localDateTime50.toDateTime();
        boolean boolean53 = dateTime47.isEqual((org.joda.time.ReadableInstant) dateTime52);
        org.joda.time.LocalDateTime localDateTime54 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime56 = localDateTime54.minusMillis((int) (byte) 1);
        java.lang.String str57 = localDateTime56.toString();
        org.joda.time.DateTime dateTime58 = localDateTime56.toDateTime();
        boolean boolean59 = dateTime47.isEqual((org.joda.time.ReadableInstant) dateTime58);
        org.joda.time.LocalDateTime localDateTime60 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime62 = localDateTime60.minusMillis((int) (byte) 1);
        java.lang.String str63 = localDateTime62.toString();
        org.joda.time.DateTime dateTime64 = localDateTime62.toDateTime();
        org.joda.time.LocalDateTime localDateTime65 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime67 = localDateTime65.minusMillis((int) (byte) 1);
        java.lang.String str68 = localDateTime67.toString();
        org.joda.time.DateTime dateTime69 = localDateTime67.toDateTime();
        boolean boolean70 = dateTime64.isEqual((org.joda.time.ReadableInstant) dateTime69);
        boolean boolean71 = dateTime47.isEqual((org.joda.time.ReadableInstant) dateTime69);
        int int72 = dateTimeZone32.getOffset((org.joda.time.ReadableInstant) dateTime69);
        org.joda.time.DateTimeZone dateTimeZone73 = dateTime69.getZone();
        int int74 = property30.getDifference((org.joda.time.ReadableInstant) dateTime69);
        int int75 = property26.compareTo((org.joda.time.ReadableInstant) dateTime69);
        int int76 = dateTimeZone14.getOffset((org.joda.time.ReadableInstant) dateTime69);
        int int77 = property11.getDifference((org.joda.time.ReadableInstant) dateTime69);
        org.joda.time.LocalDateTime localDateTime78 = property11.getLocalDateTime();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-292275054) + "'", int12 == (-292275054));
        org.junit.Assert.assertNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 117 + "'", int16 == 117);
        org.junit.Assert.assertNotNull(timeZone17);
        org.junit.Assert.assertEquals(timeZone17.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-2138L) + "'", long20 == (-2138L));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "+00:00:00.117" + "'", str35, "+00:00:00.117");
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 874L + "'", long37 == 874L);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 52L + "'", long40 == 52L);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 117 + "'", int42 == 117);
        org.junit.Assert.assertNotNull(localDateTime45);
// flaky:         org.junit.Assert.assertEquals("'" + str46 + "' != '" + "2022-02-11T09:54:18.536" + "'", str46, "2022-02-11T09:54:18.536");
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(localDateTime50);
// flaky:         org.junit.Assert.assertEquals("'" + str51 + "' != '" + "2022-02-11T09:54:18.536" + "'", str51, "2022-02-11T09:54:18.536");
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(localDateTime56);
// flaky:         org.junit.Assert.assertEquals("'" + str57 + "' != '" + "2022-02-11T09:54:18.536" + "'", str57, "2022-02-11T09:54:18.536");
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(localDateTime62);
// flaky:         org.junit.Assert.assertEquals("'" + str63 + "' != '" + "2022-02-11T09:54:18.536" + "'", str63, "2022-02-11T09:54:18.536");
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(localDateTime67);
// flaky:         org.junit.Assert.assertEquals("'" + str68 + "' != '" + "2022-02-11T09:54:18.536" + "'", str68, "2022-02-11T09:54:18.536");
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
// flaky:         org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 117 + "'", int72 == 117);
        org.junit.Assert.assertNotNull(dateTimeZone73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-2719) + "'", int74 == (-2719));
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 117 + "'", int76 == 117);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 0 + "'", int77 == 0);
        org.junit.Assert.assertNotNull(localDateTime78);
    }

    @Test
    public void test08461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08461");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forOffsetMillis((int) 'x');
        java.lang.String str4 = dateTimeZone2.getNameKey(58L);
        boolean boolean5 = dateTimeZone2.isFixed();
        long long7 = dateTimeZone2.nextTransition(1814400058L);
        long long9 = dateTimeZone2.nextTransition(3577707550L);
        long long12 = dateTimeZone2.adjustOffset(542L, true);
        java.lang.String str13 = dateTimeZone2.getID();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((java.lang.Object) "2022-02-11T09:48:45.665", dateTimeZone2);
        long long18 = dateTimeZone2.convertLocalToUTC((-31536000000L), true, (long) 904);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1814400058L + "'", long7 == 1814400058L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 3577707550L + "'", long9 == 3577707550L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 542L + "'", long12 == 542L);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+00:00:00.120" + "'", str13, "+00:00:00.120");
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-31536000120L) + "'", long18 == (-31536000120L));
    }

    @Test
    public void test08462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08462");
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusMillis((int) (byte) 1);
        java.lang.String str5 = localDateTime4.toString();
        org.joda.time.DateTime dateTime6 = localDateTime4.toDateTime();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.minusMillis((int) (byte) 1);
        java.lang.String str10 = localDateTime9.toString();
        org.joda.time.DateTime dateTime11 = localDateTime9.toDateTime();
        boolean boolean12 = dateTime6.isEqual((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.Chronology chronology13 = dateTime11.getChronology();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((java.lang.Object) 35271574L, chronology13);
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime((long) 'u', chronology13);
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime(chronology13);
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.LocalDateTime localDateTime19 = localDateTime16.withDurationAdded(readableDuration17, 0);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.minusDays(692);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.plusSeconds(5);
        int int24 = localDateTime21.size();
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime();
        boolean boolean27 = localDateTime25.isBefore((org.joda.time.ReadablePartial) localDateTime26);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime26.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property30 = localDateTime26.dayOfMonth();
        boolean boolean31 = property30.isLeap();
        org.joda.time.LocalDateTime localDateTime32 = property30.roundCeilingCopy();
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime35 = localDateTime33.minusMillis((int) (byte) 1);
        java.lang.String str36 = localDateTime35.toString();
        org.joda.time.DateTime dateTime37 = localDateTime35.toDateTime();
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime40 = localDateTime38.minusMillis((int) (byte) 1);
        java.lang.String str41 = localDateTime40.toString();
        org.joda.time.DateTime dateTime42 = localDateTime40.toDateTime();
        boolean boolean43 = dateTime37.isEqual((org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.Chronology chronology44 = dateTime42.getChronology();
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = org.joda.time.DateTimeFieldType.dayOfYear();
        int int46 = dateTime42.get(dateTimeFieldType45);
        int int47 = property30.compareTo((org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.DateTimeField dateTimeField48 = property30.getField();
        java.lang.String str49 = property30.getAsString();
        org.joda.time.DateTimeField dateTimeField50 = property30.getField();
        org.joda.time.LocalDateTime localDateTime51 = property30.withMaximumValue();
        boolean boolean52 = localDateTime21.isAfter((org.joda.time.ReadablePartial) localDateTime51);
        org.junit.Assert.assertNotNull(localDateTime4);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "2022-02-11T09:54:18.594" + "'", str5, "2022-02-11T09:54:18.594");
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(localDateTime9);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "2022-02-11T09:54:18.594" + "'", str10, "2022-02-11T09:54:18.594");
        org.junit.Assert.assertNotNull(dateTime11);
// flaky:         org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 4 + "'", int24 == 4);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime35);
// flaky:         org.junit.Assert.assertEquals("'" + str36 + "' != '" + "2022-02-11T09:54:18.594" + "'", str36, "2022-02-11T09:54:18.594");
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(localDateTime40);
// flaky:         org.junit.Assert.assertEquals("'" + str41 + "' != '" + "2022-02-11T09:54:18.594" + "'", str41, "2022-02-11T09:54:18.594");
        org.junit.Assert.assertNotNull(dateTime42);
// flaky:         org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(dateTimeFieldType45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 42 + "'", int46 == 42);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "11" + "'", str49, "11");
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    public void test08463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08463");
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusMillis((int) (byte) 1);
        java.lang.String str5 = localDateTime4.toString();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.minusMonths((int) 'a');
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.minusMinutes(22);
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusMillis((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.plusDays(0);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.plusMillis(22);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        int int18 = localDateTime16.get(dateTimeFieldType17);
        org.joda.time.LocalDateTime.Property property19 = localDateTime7.property(dateTimeFieldType17);
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.minusMillis((int) (byte) 1);
        java.lang.String str23 = localDateTime22.toString();
        org.joda.time.DateTime dateTime24 = localDateTime22.toDateTime();
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.minusMillis((int) (byte) 1);
        java.lang.String str28 = localDateTime27.toString();
        org.joda.time.DateTime dateTime29 = localDateTime27.toDateTime();
        boolean boolean30 = dateTime24.isEqual((org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.Chronology chronology31 = dateTime29.getChronology();
        boolean boolean32 = dateTimeFieldType17.isSupported(chronology31);
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime((long) 292278993, chronology31);
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime(chronology31);
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime((long) 259, chronology31);
        org.joda.time.LocalDateTime localDateTime36 = org.joda.time.LocalDateTime.now(chronology31);
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime();
        boolean boolean39 = localDateTime37.isBefore((org.joda.time.ReadablePartial) localDateTime38);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime38.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property42 = localDateTime38.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime43 = property42.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField44 = property42.getField();
        long long46 = dateTimeField44.remainder((-1L));
        org.joda.time.LocalDateTime localDateTime47 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime49 = localDateTime47.minusMillis((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime51 = localDateTime49.plusDays(0);
        org.joda.time.LocalDateTime localDateTime53 = localDateTime51.plusMillis((int) '#');
        org.joda.time.LocalDateTime localDateTime54 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime55 = new org.joda.time.LocalDateTime();
        boolean boolean56 = localDateTime54.isBefore((org.joda.time.ReadablePartial) localDateTime55);
        int[] intArray57 = localDateTime55.getValues();
        org.joda.time.LocalDateTime localDateTime59 = localDateTime55.plusYears((int) (byte) -1);
        int[] intArray60 = localDateTime55.getValues();
        boolean boolean61 = localDateTime51.isAfter((org.joda.time.ReadablePartial) localDateTime55);
        java.util.Locale locale65 = new java.util.Locale("11", "weekyear", "fra");
        java.lang.String str66 = dateTimeField44.getAsShortText((org.joda.time.ReadablePartial) localDateTime55, locale65);
        int int67 = localDateTime55.getEra();
        org.joda.time.LocalDateTime localDateTime69 = localDateTime55.withMillisOfDay(53);
        org.joda.time.DateTimeFieldType dateTimeFieldType70 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDateTime.Property property71 = localDateTime69.property(dateTimeFieldType70);
        org.joda.time.DateTimeFieldType dateTimeFieldType72 = org.joda.time.DateTimeFieldType.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone73 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone73);
        java.util.Locale locale76 = java.util.Locale.CHINESE;
        java.lang.String str77 = dateTimeZone73.getName((long) (short) 0, locale76);
        org.joda.time.LocalDateTime localDateTime78 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime80 = localDateTime78.minusMillis((int) (byte) 1);
        java.lang.String str81 = localDateTime80.toString();
        org.joda.time.DateTime dateTime82 = localDateTime80.toDateTime();
        org.joda.time.LocalDateTime localDateTime83 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime85 = localDateTime83.minusMillis((int) (byte) 1);
        java.lang.String str86 = localDateTime85.toString();
        org.joda.time.DateTime dateTime87 = localDateTime85.toDateTime();
        boolean boolean88 = dateTime82.isEqual((org.joda.time.ReadableInstant) dateTime87);
        int int89 = dateTimeZone73.getOffset((org.joda.time.ReadableInstant) dateTime82);
        org.joda.time.DateTimeFieldType dateTimeFieldType90 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str91 = dateTimeFieldType90.toString();
        java.lang.String str92 = dateTimeFieldType90.toString();
        boolean boolean93 = dateTime82.isSupported(dateTimeFieldType90);
        org.joda.time.Chronology chronology94 = dateTime82.getChronology();
        org.joda.time.Chronology chronology95 = dateTime82.getChronology();
        boolean boolean96 = dateTimeFieldType72.isSupported(chronology95);
        org.joda.time.LocalDateTime localDateTime97 = new org.joda.time.LocalDateTime(chronology95);
        boolean boolean98 = dateTimeFieldType70.isSupported(chronology95);
        int int99 = localDateTime36.get(dateTimeFieldType70);
        org.junit.Assert.assertNotNull(localDateTime4);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "2022-02-11T09:54:18.629" + "'", str5, "2022-02-11T09:54:18.629");
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 6 + "'", int18 == 6);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(localDateTime22);
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "2022-02-11T09:54:18.629" + "'", str23, "2022-02-11T09:54:18.629");
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(localDateTime27);
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "2022-02-11T09:54:18.629" + "'", str28, "2022-02-11T09:54:18.629");
        org.junit.Assert.assertNotNull(dateTime29);
// flaky:         org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 86399999L + "'", long46 == 86399999L);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(intArray57);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[2022, 2, 11, 35658630]");
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(intArray60);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[2022, 2, 11, 35658630]");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertEquals(locale65.toString(), "11_WEEKYEAR_fra");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "11" + "'", str66, "11");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertNotNull(localDateTime69);
        org.junit.Assert.assertNotNull(dateTimeFieldType70);
        org.junit.Assert.assertNotNull(property71);
        org.junit.Assert.assertNotNull(dateTimeFieldType72);
        org.junit.Assert.assertNotNull(dateTimeZone73);
        org.junit.Assert.assertNotNull(locale76);
        org.junit.Assert.assertEquals(locale76.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "+00:00:00.117" + "'", str77, "+00:00:00.117");
        org.junit.Assert.assertNotNull(localDateTime80);
// flaky:         org.junit.Assert.assertEquals("'" + str81 + "' != '" + "2022-02-11T09:54:18.629" + "'", str81, "2022-02-11T09:54:18.629");
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertNotNull(localDateTime85);
// flaky:         org.junit.Assert.assertEquals("'" + str86 + "' != '" + "2022-02-11T09:54:18.629" + "'", str86, "2022-02-11T09:54:18.629");
        org.junit.Assert.assertNotNull(dateTime87);
// flaky:         org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 117 + "'", int89 == 117);
        org.junit.Assert.assertNotNull(dateTimeFieldType90);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "weekyear" + "'", str91, "weekyear");
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "weekyear" + "'", str92, "weekyear");
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
        org.junit.Assert.assertNotNull(chronology94);
        org.junit.Assert.assertNotNull(chronology95);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + true + "'", boolean96 == true);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + true + "'", boolean98 == true);
        org.junit.Assert.assertTrue("'" + int99 + "' != '" + 1 + "'", int99 == 1);
    }

    @Test
    public void test08464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08464");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.minusMillis((int) (byte) 1);
        java.lang.String str3 = localDateTime2.toString();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.minusMinutes((int) (byte) 10);
        org.joda.time.Chronology chronology6 = localDateTime5.getChronology();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.LocalDateTime localDateTime9 = localDateTime5.withPeriodAdded(readablePeriod7, 464);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime5.minusMillis(984);
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minus(readableDuration12);
        int int14 = localDateTime13.getWeekyear();
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime();
        boolean boolean17 = localDateTime15.isBefore((org.joda.time.ReadablePartial) localDateTime16);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime16.plusSeconds((int) (byte) 100);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = null;
        java.lang.String str21 = localDateTime16.toString(dateTimeFormatter20);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        org.joda.time.LocalDateTime.Property property23 = localDateTime16.property(dateTimeFieldType22);
        org.joda.time.LocalDateTime localDateTime24 = property23.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime25 = property23.withMinimumValue();
        org.joda.time.LocalDateTime.Property property26 = localDateTime25.millisOfDay();
        org.joda.time.DurationField durationField27 = property26.getRangeDurationField();
        int int28 = property26.getMaximumValue();
        int int29 = property26.getLeapAmount();
        org.joda.time.LocalDateTime localDateTime30 = property26.roundHalfCeilingCopy();
        java.lang.String str31 = property26.toString();
        org.joda.time.DateTimeField dateTimeField32 = property26.getField();
        int int33 = property26.getMinimumValue();
        org.joda.time.Interval interval34 = property26.toInterval();
        boolean boolean35 = localDateTime13.equals((java.lang.Object) property26);
        org.junit.Assert.assertNotNull(localDateTime2);
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "2022-02-11T09:54:18.708" + "'", str3, "2022-02-11T09:54:18.708");
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2022 + "'", int14 == 2022);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(localDateTime19);
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "2022-02-11T09:54:18.709" + "'", str21, "2022-02-11T09:54:18.709");
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 86399999 + "'", int28 == 86399999);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Property[millisOfDay]" + "'", str31, "Property[millisOfDay]");
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(interval34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test08465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08465");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.minusMillis((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.plusDays(0);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.plusMillis((int) '#');
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.yearOfEra();
        org.joda.time.LocalDateTime localDateTime8 = property7.withMinimumValue();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone9);
        java.util.Locale locale12 = java.util.Locale.CHINESE;
        java.lang.String str13 = dateTimeZone9.getName((long) (short) 0, locale12);
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minusMillis((int) (byte) 1);
        java.lang.String str17 = localDateTime16.toString();
        org.joda.time.DateTime dateTime18 = localDateTime16.toDateTime();
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.minusMillis((int) (byte) 1);
        java.lang.String str22 = localDateTime21.toString();
        org.joda.time.DateTime dateTime23 = localDateTime21.toDateTime();
        boolean boolean24 = dateTime18.isEqual((org.joda.time.ReadableInstant) dateTime23);
        int int25 = dateTimeZone9.getOffset((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str27 = dateTimeFieldType26.toString();
        java.lang.String str28 = dateTimeFieldType26.toString();
        boolean boolean29 = dateTime18.isSupported(dateTimeFieldType26);
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime32 = localDateTime30.minusMillis((int) (byte) 1);
        java.lang.String str33 = localDateTime32.toString();
        org.joda.time.DateTime dateTime34 = localDateTime32.toDateTime();
        org.joda.time.Instant instant35 = dateTime34.toInstant();
        boolean boolean36 = dateTime18.isEqual((org.joda.time.ReadableInstant) instant35);
        long long37 = instant35.getMillis();
        org.joda.time.DateTimeZone dateTimeZone38 = instant35.getZone();
        int int39 = property7.getDifference((org.joda.time.ReadableInstant) instant35);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+00:00:00.117" + "'", str13, "+00:00:00.117");
        org.junit.Assert.assertNotNull(localDateTime16);
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "2022-02-11T09:54:18.731" + "'", str17, "2022-02-11T09:54:18.731");
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(localDateTime21);
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "2022-02-11T09:54:18.731" + "'", str22, "2022-02-11T09:54:18.731");
        org.junit.Assert.assertNotNull(dateTime23);
// flaky:         org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 117 + "'", int25 == 117);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "weekyear" + "'", str27, "weekyear");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "weekyear" + "'", str28, "weekyear");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(localDateTime32);
// flaky:         org.junit.Assert.assertEquals("'" + str33 + "' != '" + "2022-02-11T09:54:18.731" + "'", str33, "2022-02-11T09:54:18.731");
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(instant35);
// flaky:         org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
// flaky:         org.junit.Assert.assertTrue("'" + long37 + "' != '" + 1644573258614L + "'", long37 == 1644573258614L);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
    }

    @Test
    public void test08466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08466");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(188);
        java.lang.Class<?> wildcardClass2 = dateTimeZone1.getClass();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(wildcardClass2);
    }

    @Test
    public void test08467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08467");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        java.util.Locale locale3 = null;
        java.lang.String str4 = dateTimeZone1.getName((long) (short) 10, locale3);
        long long6 = dateTimeZone0.getMillisKeepLocal(dateTimeZone1, (long) 874);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        long long9 = dateTimeZone1.getMillisKeepLocal(dateTimeZone7, (long) '4');
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime();
        boolean boolean12 = localDateTime10.isBefore((org.joda.time.ReadablePartial) localDateTime11);
        org.joda.time.LocalDateTime.Property property13 = localDateTime10.millisOfDay();
        org.joda.time.LocalDateTime localDateTime15 = property13.addWrapFieldToCopy(5320);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray16 = localDateTime15.getFieldTypes();
        org.joda.time.LocalDateTime.Property property17 = localDateTime15.weekyear();
        org.joda.time.LocalDateTime localDateTime18 = property17.withMinimumValue();
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime();
        boolean boolean21 = localDateTime19.isBefore((org.joda.time.ReadablePartial) localDateTime20);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime20.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime20.plusMinutes((int) '#');
        org.joda.time.LocalDateTime localDateTime27 = localDateTime20.minusMinutes((int) (short) 1);
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.LocalDateTime localDateTime30 = localDateTime20.withDurationAdded(readableDuration28, (int) (short) 100);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray31 = localDateTime20.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime33 = localDateTime20.withWeekyear((int) (short) -1);
        int int34 = localDateTime18.compareTo((org.joda.time.ReadablePartial) localDateTime33);
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.getDefault();
        int int37 = dateTimeZone35.getStandardOffset((long) (-100));
        java.util.TimeZone timeZone38 = dateTimeZone35.toTimeZone();
        long long41 = dateTimeZone35.convertLocalToUTC((long) (-2021), false);
        java.lang.String str42 = dateTimeZone35.toString();
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime((long) '#');
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime();
        int int46 = localDateTime45.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime48 = localDateTime45.minusMonths((int) (short) 0);
        org.joda.time.Chronology chronology49 = localDateTime48.getChronology();
        org.joda.time.LocalDateTime localDateTime50 = new org.joda.time.LocalDateTime(chronology49);
        org.joda.time.LocalDateTime localDateTime51 = org.joda.time.LocalDateTime.now(chronology49);
        org.joda.time.LocalDateTime localDateTime52 = localDateTime44.withFields((org.joda.time.ReadablePartial) localDateTime51);
        org.joda.time.ReadablePeriod readablePeriod53 = null;
        org.joda.time.LocalDateTime localDateTime55 = localDateTime52.withPeriodAdded(readablePeriod53, (-68990));
        org.joda.time.LocalDateTime localDateTime56 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime58 = localDateTime56.minusMillis((int) (byte) 1);
        java.lang.String str59 = localDateTime58.toString();
        org.joda.time.DateTime dateTime60 = localDateTime58.toDateTime();
        org.joda.time.LocalDateTime localDateTime61 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime63 = localDateTime61.minusMillis((int) (byte) 1);
        java.lang.String str64 = localDateTime63.toString();
        org.joda.time.DateTime dateTime65 = localDateTime63.toDateTime();
        boolean boolean66 = dateTime60.isEqual((org.joda.time.ReadableInstant) dateTime65);
        boolean boolean68 = dateTime60.equals((java.lang.Object) 222L);
        org.joda.time.DateTime dateTime69 = localDateTime52.toDateTime((org.joda.time.ReadableInstant) dateTime60);
        boolean boolean70 = dateTimeZone35.isLocalDateTimeGap(localDateTime52);
        org.joda.time.DateTimeZone dateTimeZone71 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone dateTimeZone72 = org.joda.time.DateTimeZone.getDefault();
        java.util.Locale locale74 = null;
        java.lang.String str75 = dateTimeZone72.getName((long) (short) 10, locale74);
        long long77 = dateTimeZone71.getMillisKeepLocal(dateTimeZone72, (long) 874);
        long long79 = dateTimeZone35.getMillisKeepLocal(dateTimeZone71, (long) 118);
        org.joda.time.DateTime dateTime80 = localDateTime33.toDateTime(dateTimeZone35);
        long long82 = dateTimeZone1.getMillisKeepLocal(dateTimeZone35, 0L);
        int int84 = dateTimeZone35.getOffset(1644572916921L);
        java.lang.String str86 = dateTimeZone35.getShortName((long) 35441332);
        long long89 = dateTimeZone35.convertLocalToUTC(1644537600000L, true);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "+00:00:00.117" + "'", str4, "+00:00:00.117");
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 874L + "'", long6 == 874L);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 52L + "'", long9 == 52L);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 117 + "'", int37 == 117);
        org.junit.Assert.assertNotNull(timeZone38);
        org.junit.Assert.assertEquals(timeZone38.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + (-2138L) + "'", long41 == (-2138L));
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "+00:00:00.117" + "'", str42, "+00:00:00.117");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 22 + "'", int46 == 22);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(localDateTime58);
// flaky:         org.junit.Assert.assertEquals("'" + str59 + "' != '" + "2022-02-11T09:54:18.765" + "'", str59, "2022-02-11T09:54:18.765");
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(localDateTime63);
// flaky:         org.junit.Assert.assertEquals("'" + str64 + "' != '" + "2022-02-11T09:54:18.765" + "'", str64, "2022-02-11T09:54:18.765");
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(dateTimeZone71);
        org.junit.Assert.assertNotNull(dateTimeZone72);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "+00:00:00.117" + "'", str75, "+00:00:00.117");
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 874L + "'", long77 == 874L);
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + 118L + "'", long79 == 118L);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + 0L + "'", long82 == 0L);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 117 + "'", int84 == 117);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "+00:00:00.117" + "'", str86, "+00:00:00.117");
        org.junit.Assert.assertTrue("'" + long89 + "' != '" + 1644537599883L + "'", long89 == 1644537599883L);
    }

    @Test
    public void test08468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08468");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property5 = localDateTime1.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime6 = property5.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField7 = property5.getField();
        long long9 = dateTimeField7.remainder((-1L));
        java.util.Locale locale11 = java.util.Locale.UK;
        java.lang.String str12 = dateTimeField7.getAsShortText((long) 22, locale11);
        int int13 = dateTimeField7.getMinimumValue();
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime();
        boolean boolean16 = localDateTime14.isBefore((org.joda.time.ReadablePartial) localDateTime15);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime15.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime15.plusMinutes((int) '#');
        org.joda.time.LocalDateTime localDateTime22 = localDateTime15.minusMinutes((int) (short) 1);
        org.joda.time.LocalDateTime.Property property23 = localDateTime22.weekOfWeekyear();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime22, chronology24);
        java.util.Locale locale27 = new java.util.Locale("2022-02-11T09:47:50.218");
        java.lang.String str28 = dateTimeField7.getAsShortText((org.joda.time.ReadablePartial) localDateTime22, locale27);
        org.joda.time.LocalDateTime.Property property29 = localDateTime22.millisOfDay();
        org.joda.time.LocalDateTime localDateTime31 = localDateTime22.minusMinutes(869);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 86399999L + "'", long9 == 86399999L);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "1" + "'", str12, "1");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertEquals(locale27.toString(), "2022-02-11t09:47:50.218");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "11" + "'", str28, "11");
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(localDateTime31);
    }

    @Test
    public void test08469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08469");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) 'u');
        long long5 = dateTimeZone1.convertLocalToUTC((long) 1, false, 822L);
        java.util.TimeZone timeZone6 = dateTimeZone1.toTimeZone();
        int int8 = dateTimeZone1.getOffset(10L);
        long long10 = dateTimeZone1.convertUTCToLocal((-822L));
        java.util.Locale.Builder builder11 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder12 = builder11.clearExtensions();
        java.util.Locale.Builder builder14 = builder12.addUnicodeLocaleAttribute("Japon");
        java.util.Locale.Builder builder15 = builder14.clearExtensions();
        java.util.Locale.Builder builder16 = builder14.clearExtensions();
        java.util.Locale.Builder builder17 = builder16.clear();
        java.util.Locale.Builder builder18 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder19 = builder18.clearExtensions();
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime();
        boolean boolean22 = localDateTime20.isBefore((org.joda.time.ReadablePartial) localDateTime21);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime21.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property25 = localDateTime21.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime26 = property25.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField27 = property25.getField();
        int int28 = dateTimeField27.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime();
        int int30 = localDateTime29.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime32 = localDateTime29.minusMonths((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.minusMonths((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime34.plusWeeks(22);
        java.util.Locale locale38 = java.util.Locale.JAPANESE;
        java.lang.String str39 = dateTimeField27.getAsShortText((org.joda.time.ReadablePartial) localDateTime36, 22, locale38);
        java.util.Locale.Builder builder40 = builder19.setLocale(locale38);
        java.util.Locale.Builder builder41 = builder17.setLocale(locale38);
        boolean boolean42 = dateTimeZone1.equals((java.lang.Object) builder41);
        java.util.Locale.Builder builder43 = builder41.clearExtensions();
        java.util.Locale.Builder builder44 = builder43.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder46 = builder43.addUnicodeLocaleAttribute("2022-02-11T09:49:12.287");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: 2022-02-11T09:49:12.287 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-116L) + "'", long5 == (-116L));
        org.junit.Assert.assertNotNull(timeZone6);
        org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 117 + "'", int8 == 117);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-705L) + "'", long10 == (-705L));
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 31 + "'", int28 == 31);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 22 + "'", int30 == 22);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "22" + "'", str39, "22");
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder44);
    }

    @Test
    public void test08470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08470");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property5 = localDateTime1.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime6 = property5.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField7 = property5.getField();
        org.joda.time.LocalDateTime localDateTime8 = property5.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime();
        boolean boolean11 = localDateTime9.isBefore((org.joda.time.ReadablePartial) localDateTime10);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime10.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property14 = localDateTime10.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime15 = property14.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField16 = property14.getField();
        int int17 = property14.getMaximumValueOverall();
        org.joda.time.LocalDateTime localDateTime19 = property14.addToCopy(0);
        org.joda.time.LocalDateTime localDateTime21 = property14.addToCopy(1);
        org.joda.time.LocalDateTime localDateTime23 = property14.addToCopy((long) (byte) 1);
        org.joda.time.LocalDateTime localDateTime24 = property14.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime8.withFields((org.joda.time.ReadablePartial) localDateTime24);
        int[] intArray26 = localDateTime24.getValues();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime24.minusMillis(5);
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime((long) (-1));
        org.joda.time.LocalDateTime.Property property31 = localDateTime30.centuryOfEra();
        int int32 = property31.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime33 = property31.withMaximumValue();
        boolean boolean34 = org.joda.time.field.FieldUtils.equals((java.lang.Object) 5, (java.lang.Object) localDateTime33);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime33.minusDays(35393474);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 31 + "'", int17 == 31);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[2022, 2, 11, 0]");
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(localDateTime36);
    }

    @Test
    public void test08471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08471");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property5 = localDateTime1.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime6 = property5.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField7 = property5.getField();
        int int10 = dateTimeField7.getDifference(1L, 86399999L);
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime();
        int int12 = localDateTime11.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime11.minusMonths((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minusMonths((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.plusWeeks(22);
        org.joda.time.LocalDateTime.Property property19 = localDateTime18.dayOfMonth();
        java.util.Locale locale24 = new java.util.Locale("11", "weekyear", "fra");
        java.lang.String str25 = locale24.getDisplayName();
        java.lang.String str26 = dateTimeField7.getAsShortText((org.joda.time.ReadablePartial) localDateTime18, (int) (byte) 1, locale24);
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime();
        boolean boolean29 = localDateTime27.isBefore((org.joda.time.ReadablePartial) localDateTime28);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime28.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property32 = localDateTime28.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime33 = property32.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField34 = property32.getField();
        org.joda.time.LocalDateTime localDateTime35 = property32.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime38 = localDateTime36.minusMillis((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime38.plusDays(0);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime40.plusMillis((int) '#');
        int[] intArray43 = localDateTime40.getValues();
        int int44 = dateTimeField7.getMinimumValue((org.joda.time.ReadablePartial) localDateTime35, intArray43);
        java.lang.String str45 = dateTimeField7.toString();
        org.joda.time.DurationField durationField46 = dateTimeField7.getDurationField();
        long long49 = dateTimeField7.set((long) 1764655200, (int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime50 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime51 = new org.joda.time.LocalDateTime();
        boolean boolean52 = localDateTime50.isBefore((org.joda.time.ReadablePartial) localDateTime51);
        org.joda.time.LocalDateTime localDateTime54 = localDateTime51.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property55 = localDateTime51.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime56 = property55.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField57 = property55.getField();
        org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone58);
        java.util.Locale locale61 = java.util.Locale.CHINESE;
        java.lang.String str62 = dateTimeZone58.getName((long) (short) 0, locale61);
        int int63 = dateTimeField57.getMaximumShortTextLength(locale61);
        java.lang.String str64 = dateTimeField57.getName();
        long long66 = dateTimeField57.roundHalfEven((long) (byte) 10);
        org.joda.time.LocalDateTime localDateTime67 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime68 = new org.joda.time.LocalDateTime();
        boolean boolean69 = localDateTime67.isBefore((org.joda.time.ReadablePartial) localDateTime68);
        org.joda.time.LocalDateTime localDateTime71 = localDateTime68.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime73 = localDateTime68.plusMinutes((int) '#');
        org.joda.time.LocalDateTime localDateTime75 = localDateTime68.minusMinutes((int) (short) 1);
        org.joda.time.ReadableDuration readableDuration76 = null;
        org.joda.time.LocalDateTime localDateTime78 = localDateTime68.withDurationAdded(readableDuration76, (int) (short) 100);
        java.util.Locale locale79 = java.util.Locale.JAPANESE;
        java.lang.String str80 = dateTimeField57.getAsText((org.joda.time.ReadablePartial) localDateTime78, locale79);
        org.joda.time.LocalDateTime localDateTime82 = localDateTime78.minusSeconds((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property83 = localDateTime82.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime85 = localDateTime82.withMinuteOfHour(34);
        org.joda.time.ReadableDuration readableDuration86 = null;
        org.joda.time.LocalDateTime localDateTime88 = localDateTime85.withDurationAdded(readableDuration86, 1970);
        int int89 = dateTimeField7.getMinimumValue((org.joda.time.ReadablePartial) localDateTime85);
        org.joda.time.LocalDateTime.Property property90 = localDateTime85.dayOfMonth();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 22 + "'", int12 == 22);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertEquals(locale24.toString(), "11_WEEKYEAR_fra");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "11 (WEEKYEAR,fra)" + "'", str25, "11 (WEEKYEAR,fra)");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "1" + "'", str26, "1");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(intArray43);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[2022, 2, 11, 35658864]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "DateTimeField[dayOfMonth]" + "'", str45, "DateTimeField[dayOfMonth]");
        org.junit.Assert.assertNotNull(durationField46);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 814255200L + "'", long49 == 814255200L);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(dateTimeZone58);
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "+00:00:00.117" + "'", str62, "+00:00:00.117");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 2 + "'", int63 == 2);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "dayOfMonth" + "'", str64, "dayOfMonth");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 0L + "'", long66 == 0L);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(localDateTime71);
        org.junit.Assert.assertNotNull(localDateTime73);
        org.junit.Assert.assertNotNull(localDateTime75);
        org.junit.Assert.assertNotNull(localDateTime78);
        org.junit.Assert.assertNotNull(locale79);
        org.junit.Assert.assertEquals(locale79.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "11" + "'", str80, "11");
        org.junit.Assert.assertNotNull(localDateTime82);
        org.junit.Assert.assertNotNull(property83);
        org.junit.Assert.assertNotNull(localDateTime85);
        org.junit.Assert.assertNotNull(localDateTime88);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 1 + "'", int89 == 1);
        org.junit.Assert.assertNotNull(property90);
    }

    @Test
    public void test08472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08472");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property5 = localDateTime1.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime6 = property5.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField7 = property5.getField();
        int int8 = dateTimeField7.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime();
        int int10 = localDateTime9.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime9.minusMonths((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.minusMonths((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.plusWeeks(22);
        java.util.Locale locale18 = java.util.Locale.JAPANESE;
        java.lang.String str19 = dateTimeField7.getAsShortText((org.joda.time.ReadablePartial) localDateTime16, 22, locale18);
        int int20 = dateTimeField7.getMinimumValue();
        long long23 = dateTimeField7.getDifferenceAsLong(0L, (-2126939039L));
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 31 + "'", int8 == 31);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 22 + "'", int10 == 22);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "22" + "'", str19, "22");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 24L + "'", long23 == 24L);
    }

    @Test
    public void test08473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08473");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        int int2 = dateTimeZone0.getStandardOffset((long) (-100));
        java.lang.String str3 = dateTimeZone0.getID();
        long long5 = dateTimeZone0.nextTransition((long) 709);
        long long7 = dateTimeZone0.nextTransition((long) 27);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone0);
        java.util.Locale.Builder builder10 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder11 = builder10.clearExtensions();
        java.util.Locale.Builder builder13 = builder11.addUnicodeLocaleAttribute("Japon");
        java.util.Locale.Builder builder14 = builder13.clearExtensions();
        java.util.Locale.Builder builder15 = builder13.clearExtensions();
        java.util.Locale.Builder builder16 = builder15.clear();
        java.util.Locale.Builder builder17 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder18 = builder17.clearExtensions();
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime();
        boolean boolean21 = localDateTime19.isBefore((org.joda.time.ReadablePartial) localDateTime20);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime20.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property24 = localDateTime20.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime25 = property24.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField26 = property24.getField();
        int int27 = dateTimeField26.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime();
        int int29 = localDateTime28.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime31 = localDateTime28.minusMonths((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.minusMonths((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime33.plusWeeks(22);
        java.util.Locale locale37 = java.util.Locale.JAPANESE;
        java.lang.String str38 = dateTimeField26.getAsShortText((org.joda.time.ReadablePartial) localDateTime35, 22, locale37);
        java.util.Locale.Builder builder39 = builder18.setLocale(locale37);
        java.util.Locale.Builder builder40 = builder16.setLocale(locale37);
        java.lang.String str41 = dateTimeZone0.getName(35275799L, locale37);
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime();
        boolean boolean44 = localDateTime42.isBefore((org.joda.time.ReadablePartial) localDateTime43);
        int[] intArray45 = localDateTime43.getValues();
        org.joda.time.LocalDateTime localDateTime47 = localDateTime43.plusYears((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime48 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime49 = new org.joda.time.LocalDateTime();
        boolean boolean50 = localDateTime48.isBefore((org.joda.time.ReadablePartial) localDateTime49);
        int[] intArray51 = localDateTime49.getValues();
        org.joda.time.LocalDateTime localDateTime52 = localDateTime43.withFields((org.joda.time.ReadablePartial) localDateTime49);
        org.joda.time.LocalDateTime localDateTime54 = localDateTime52.minusMillis((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime56 = localDateTime54.minusSeconds((int) '#');
        org.joda.time.LocalDateTime localDateTime58 = localDateTime56.withWeekOfWeekyear(50);
        org.joda.time.LocalDateTime localDateTime60 = localDateTime56.withMinuteOfHour((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime62 = localDateTime56.minusMonths((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime64 = localDateTime56.withYearOfCentury(0);
        int int65 = localDateTime64.getYearOfEra();
        org.joda.time.LocalDateTime.Property property66 = localDateTime64.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone68 = org.joda.time.DateTimeZone.getDefault();
        int int70 = dateTimeZone68.getStandardOffset((long) (-100));
        boolean boolean71 = dateTimeZone68.isFixed();
        java.lang.String str72 = dateTimeZone68.toString();
        java.lang.String str73 = dateTimeZone68.getID();
        org.joda.time.LocalDateTime localDateTime74 = new org.joda.time.LocalDateTime((long) 365, dateTimeZone68);
        int int75 = localDateTime64.compareTo((org.joda.time.ReadablePartial) localDateTime74);
        boolean boolean76 = dateTimeZone0.isLocalDateTimeGap(localDateTime64);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime78 = localDateTime64.withDayOfMonth(35293506);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 35293506 for dayOfMonth must be in the range [1,29]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 117 + "'", int2 == 117);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "+00:00:00.117" + "'", str3, "+00:00:00.117");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 709L + "'", long5 == 709L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 27L + "'", long7 == 27L);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 31 + "'", int27 == 31);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 22 + "'", int29 == 22);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "ja");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "22" + "'", str38, "22");
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "+00:00:00.117" + "'", str41, "+00:00:00.117");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(intArray45);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[2022, 2, 11, 35658929]");
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(intArray51);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[2022, 2, 11, 35658929]");
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 2000 + "'", int65 == 2000);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertNotNull(dateTimeZone68);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 117 + "'", int70 == 117);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "+00:00:00.117" + "'", str72, "+00:00:00.117");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "+00:00:00.117" + "'", str73, "+00:00:00.117");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
    }

    @Test
    public void test08474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08474");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        int[] intArray3 = localDateTime1.getValues();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime1.plusYears((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        boolean boolean8 = localDateTime6.isBefore((org.joda.time.ReadablePartial) localDateTime7);
        int[] intArray9 = localDateTime7.getValues();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime1.withFields((org.joda.time.ReadablePartial) localDateTime7);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusMillis((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.minusSeconds((int) '#');
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.withWeekOfWeekyear(50);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime14.withMinuteOfHour((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime14.minusMonths((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime14.withYearOfCentury(0);
        int int23 = localDateTime22.getYearOfEra();
        org.joda.time.LocalDateTime.Property property24 = localDateTime22.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.getDefault();
        int int28 = dateTimeZone26.getStandardOffset((long) (-100));
        boolean boolean29 = dateTimeZone26.isFixed();
        java.lang.String str30 = dateTimeZone26.toString();
        java.lang.String str31 = dateTimeZone26.getID();
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime((long) 365, dateTimeZone26);
        int int33 = localDateTime22.compareTo((org.joda.time.ReadablePartial) localDateTime32);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime22.withYear(524);
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime38 = localDateTime36.minusMillis((int) (byte) 1);
        java.lang.String str39 = localDateTime38.toString();
        org.joda.time.LocalDateTime localDateTime41 = localDateTime38.minusMonths((int) 'a');
        org.joda.time.LocalDateTime localDateTime43 = localDateTime41.minusMinutes(22);
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.Chronology chronology45 = null;
        boolean boolean46 = dateTimeFieldType44.isSupported(chronology45);
        java.lang.String str47 = dateTimeFieldType44.getName();
        org.joda.time.DurationFieldType durationFieldType48 = dateTimeFieldType44.getDurationType();
        java.lang.String str49 = dateTimeFieldType44.toString();
        boolean boolean50 = localDateTime43.isSupported(dateTimeFieldType44);
        int int51 = localDateTime35.indexOf(dateTimeFieldType44);
        int int52 = localDateTime35.getCenturyOfEra();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(intArray3);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[2022, 2, 11, 35658950]");
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(intArray9);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[2022, 2, 11, 35658950]");
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2000 + "'", int23 == 2000);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 117 + "'", int28 == 117);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "+00:00:00.117" + "'", str30, "+00:00:00.117");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "+00:00:00.117" + "'", str31, "+00:00:00.117");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime38);
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "2022-02-11T09:54:18.949" + "'", str39, "2022-02-11T09:54:18.949");
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(dateTimeFieldType44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "dayOfYear" + "'", str47, "dayOfYear");
        org.junit.Assert.assertNotNull(durationFieldType48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "dayOfYear" + "'", str49, "dayOfYear");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 5 + "'", int52 == 5);
    }

    @Test
    public void test08475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08475");
        long long2 = org.joda.time.field.FieldUtils.safeMultiply((long) 64699, (long) 672);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 43477728L + "'", long2 == 43477728L);
    }

    @Test
    public void test08476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08476");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        int int1 = localDateTime0.getYearOfCentury();
        org.joda.time.LocalDateTime.Property property2 = localDateTime0.minuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        java.util.Locale locale7 = null;
        java.lang.String str8 = dateTimeZone5.getName((long) (short) 10, locale7);
        long long10 = dateTimeZone4.getMillisKeepLocal(dateTimeZone5, (long) 874);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.getDefault();
        long long13 = dateTimeZone5.getMillisKeepLocal(dateTimeZone11, (long) '4');
        int int15 = dateTimeZone5.getOffsetFromLocal((long) 83);
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime(0L, dateTimeZone5);
        boolean boolean17 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime16);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime16.minusYears(0);
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime((long) 83);
        org.joda.time.LocalDateTime.Property property22 = localDateTime21.secondOfMinute();
        boolean boolean23 = localDateTime19.isEqual((org.joda.time.ReadablePartial) localDateTime21);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 22 + "'", int1 == 22);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+00:00:00.117" + "'", str8, "+00:00:00.117");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 874L + "'", long10 == 874L);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 52L + "'", long13 == 52L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 117 + "'", int15 == 117);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test08477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08477");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.minusMillis((int) (byte) 1);
        java.lang.String str3 = localDateTime2.toString();
        org.joda.time.DateTime dateTime4 = localDateTime2.toDateTime();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusMillis((int) (byte) 1);
        java.lang.String str8 = localDateTime7.toString();
        org.joda.time.DateTime dateTime9 = localDateTime7.toDateTime();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusMillis((int) (byte) 1);
        java.lang.String str13 = localDateTime12.toString();
        org.joda.time.DateTime dateTime14 = localDateTime12.toDateTime();
        boolean boolean15 = dateTime9.isEqual((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.minusMillis((int) (byte) 1);
        java.lang.String str19 = localDateTime18.toString();
        org.joda.time.DateTime dateTime20 = localDateTime18.toDateTime();
        boolean boolean21 = dateTime9.isEqual((org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.minusMillis((int) (byte) 1);
        java.lang.String str25 = localDateTime24.toString();
        org.joda.time.DateTime dateTime26 = localDateTime24.toDateTime();
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.minusMillis((int) (byte) 1);
        java.lang.String str30 = localDateTime29.toString();
        org.joda.time.DateTime dateTime31 = localDateTime29.toDateTime();
        boolean boolean32 = dateTime26.isEqual((org.joda.time.ReadableInstant) dateTime31);
        boolean boolean33 = dateTime9.isEqual((org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.DateTimeZone dateTimeZone34 = dateTime31.getZone();
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime();
        boolean boolean37 = localDateTime35.isBefore((org.joda.time.ReadablePartial) localDateTime36);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime36.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime36.plusMinutes((int) '#');
        org.joda.time.ReadablePeriod readablePeriod42 = null;
        org.joda.time.LocalDateTime localDateTime43 = localDateTime36.minus(readablePeriod42);
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.LocalDateTime localDateTime46 = localDateTime36.withField(dateTimeFieldType44, (int) (byte) 100);
        boolean boolean47 = dateTime31.isSupported(dateTimeFieldType44);
        java.lang.String str48 = dateTime31.toString();
        boolean boolean49 = dateTime4.isBefore((org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.LocalDateTime localDateTime50 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime51 = new org.joda.time.LocalDateTime();
        boolean boolean52 = localDateTime50.isBefore((org.joda.time.ReadablePartial) localDateTime51);
        org.joda.time.LocalDateTime.Property property53 = localDateTime50.millisOfDay();
        org.joda.time.LocalDateTime localDateTime55 = localDateTime50.plusMonths((int) (byte) 1);
        java.util.Locale.LanguageRange[] languageRangeArray56 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList57 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList57, languageRangeArray56);
        java.util.Locale[] localeArray59 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList60 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList60, localeArray59);
        java.util.Locale locale62 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList57, (java.util.Collection<java.util.Locale>) localeList60);
        java.util.Locale.LanguageRange[] languageRangeArray63 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList64 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList64, languageRangeArray63);
        java.util.Locale[] localeArray66 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList67 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean68 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList67, localeArray66);
        java.util.Locale locale69 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList64, (java.util.Collection<java.util.Locale>) localeList67);
        java.util.Locale.FilteringMode filteringMode70 = null;
        java.util.List<java.util.Locale> localeList71 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList57, (java.util.Collection<java.util.Locale>) localeList67, filteringMode70);
        java.util.Locale locale72 = java.util.Locale.FRENCH;
        java.util.Set<java.lang.String> strSet73 = locale72.getUnicodeLocaleAttributes();
        java.lang.Object[] objArray74 = strSet73.toArray();
        java.util.Locale.FilteringMode filteringMode75 = java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList76 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList57, (java.util.Collection<java.lang.String>) strSet73, filteringMode75);
        org.joda.time.DateTimeZone dateTimeZone77 = org.joda.time.DateTimeZone.UTC;
        boolean boolean78 = strSet73.equals((java.lang.Object) dateTimeZone77);
        org.joda.time.LocalDateTime localDateTime79 = org.joda.time.LocalDateTime.now(dateTimeZone77);
        org.joda.time.DateTime dateTime80 = localDateTime55.toDateTime(dateTimeZone77);
        org.joda.time.Chronology chronology81 = dateTime80.getChronology();
        boolean boolean82 = dateTime4.isEqual((org.joda.time.ReadableInstant) dateTime80);
        org.junit.Assert.assertNotNull(localDateTime2);
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "2022-02-11T09:54:18.994" + "'", str3, "2022-02-11T09:54:18.994");
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localDateTime7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "2022-02-11T09:54:18.994" + "'", str8, "2022-02-11T09:54:18.994");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(localDateTime12);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "2022-02-11T09:54:18.994" + "'", str13, "2022-02-11T09:54:18.994");
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(localDateTime18);
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "2022-02-11T09:54:18.994" + "'", str19, "2022-02-11T09:54:18.994");
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(localDateTime24);
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "2022-02-11T09:54:18.994" + "'", str25, "2022-02-11T09:54:18.994");
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(localDateTime29);
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "2022-02-11T09:54:18.994" + "'", str30, "2022-02-11T09:54:18.994");
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(dateTimeFieldType44);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str48 + "' != '" + "2022-02-11T09:54:18.994+00:00:00.117" + "'", str48, "2022-02-11T09:54:18.994+00:00:00.117");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(languageRangeArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(localeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNull(locale62);
        org.junit.Assert.assertNotNull(languageRangeArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(localeArray66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNull(locale69);
        org.junit.Assert.assertNotNull(localeList71);
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet73);
        org.junit.Assert.assertNotNull(objArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray74), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray74), "[]");
        org.junit.Assert.assertTrue("'" + filteringMode75 + "' != '" + java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES + "'", filteringMode75.equals(java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList76);
        org.junit.Assert.assertNotNull(dateTimeZone77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(localDateTime79);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertNotNull(chronology81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
    }

    @Test
    public void test08478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08478");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("2022-02-11T09:47:58.120");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str5 = timeZone1.getDisplayName(false, 732);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal style: 732");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(timeZone1);
// flaky:         org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "\uadf8\ub9ac\ub2c8\uce58\ud45c\uc900\uc2dc");
        org.junit.Assert.assertNotNull(dateTimeZone2);
    }

    @Test
    public void test08479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08479");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("35282145");
        timeZone1.setRawOffset(321);
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        boolean boolean6 = localDateTime4.isBefore((org.joda.time.ReadablePartial) localDateTime5);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property9 = localDateTime5.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime10 = property9.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField11 = property9.getField();
        int int14 = dateTimeField11.getDifference(1L, 86399999L);
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime();
        int int16 = localDateTime15.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime15.minusMonths((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.minusMonths((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.plusWeeks(22);
        org.joda.time.LocalDateTime.Property property23 = localDateTime22.dayOfMonth();
        java.util.Locale locale28 = new java.util.Locale("11", "weekyear", "fra");
        java.lang.String str29 = locale28.getDisplayName();
        java.lang.String str30 = dateTimeField11.getAsShortText((org.joda.time.ReadablePartial) localDateTime22, (int) (byte) 1, locale28);
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime();
        boolean boolean33 = localDateTime31.isBefore((org.joda.time.ReadablePartial) localDateTime32);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime32.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property36 = localDateTime32.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime37 = property36.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField38 = property36.getField();
        org.joda.time.LocalDateTime localDateTime39 = property36.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime42 = localDateTime40.minusMillis((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime44 = localDateTime42.plusDays(0);
        org.joda.time.LocalDateTime localDateTime46 = localDateTime44.plusMillis((int) '#');
        int[] intArray47 = localDateTime44.getValues();
        int int48 = dateTimeField11.getMinimumValue((org.joda.time.ReadablePartial) localDateTime39, intArray47);
        java.lang.String str49 = dateTimeField11.toString();
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.getDefault();
        java.util.Locale locale54 = null;
        java.lang.String str55 = dateTimeZone52.getName((long) (short) 10, locale54);
        long long57 = dateTimeZone51.getMillisKeepLocal(dateTimeZone52, (long) 874);
        org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeZone.getDefault();
        long long60 = dateTimeZone52.getMillisKeepLocal(dateTimeZone58, (long) '4');
        int int62 = dateTimeZone52.getOffsetFromLocal((long) 83);
        long long66 = dateTimeZone52.convertLocalToUTC((long) 1, true, 0L);
        java.util.Locale locale68 = java.util.Locale.ROOT;
        java.lang.String str69 = locale68.getDisplayName();
        java.lang.String str70 = dateTimeZone52.getShortName((long) (-120), locale68);
        long long72 = dateTimeZone52.previousTransition(35288124L);
        java.util.Locale locale74 = java.util.Locale.CHINESE;
        java.lang.String str75 = locale74.toLanguageTag();
        java.lang.String str76 = dateTimeZone52.getName((long) (-35274908), locale74);
        java.lang.String str77 = dateTimeField11.getAsShortText(35304112, locale74);
        java.util.Locale.Builder builder78 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder79 = builder78.clearExtensions();
        java.util.Locale locale80 = builder78.build();
        java.util.Set<java.lang.Character> charSet81 = locale80.getExtensionKeys();
        java.lang.String str82 = locale74.getDisplayScript(locale80);
        java.lang.String str83 = timeZone1.getDisplayName(locale80);
        org.junit.Assert.assertNotNull(timeZone1);
// flaky:         org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "\uadf8\ub9ac\ub2c8\uce58\ud45c\uc900\uc2dc");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 22 + "'", int16 == 22);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertEquals(locale28.toString(), "11_WEEKYEAR_fra");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "11 (WEEKYEAR,fra)" + "'", str29, "11 (WEEKYEAR,fra)");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "1" + "'", str30, "1");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(intArray47);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[2022, 2, 11, 35659123]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "DateTimeField[dayOfMonth]" + "'", str49, "DateTimeField[dayOfMonth]");
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "+00:00:00.117" + "'", str55, "+00:00:00.117");
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 874L + "'", long57 == 874L);
        org.junit.Assert.assertNotNull(dateTimeZone58);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 52L + "'", long60 == 52L);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 117 + "'", int62 == 117);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + (-116L) + "'", long66 == (-116L));
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "+00:00:00.117" + "'", str70, "+00:00:00.117");
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 35288124L + "'", long72 == 35288124L);
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "zh" + "'", str75, "zh");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "+00:00:00.117" + "'", str76, "+00:00:00.117");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "35304112" + "'", str77, "35304112");
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(locale80);
        org.junit.Assert.assertEquals(locale80.toString(), "");
        org.junit.Assert.assertNotNull(charSet81);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "" + "'", str82, "");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "Greenwich Mean Time" + "'", str83, "Greenwich Mean Time");
    }

    @Test
    public void test08480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08480");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        int int1 = localDateTime0.getYearOfCentury();
        org.joda.time.LocalDateTime.Property property2 = localDateTime0.minuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        java.util.Locale locale7 = null;
        java.lang.String str8 = dateTimeZone5.getName((long) (short) 10, locale7);
        long long10 = dateTimeZone4.getMillisKeepLocal(dateTimeZone5, (long) 874);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.getDefault();
        long long13 = dateTimeZone5.getMillisKeepLocal(dateTimeZone11, (long) '4');
        int int15 = dateTimeZone5.getOffsetFromLocal((long) 83);
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime(0L, dateTimeZone5);
        boolean boolean17 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime16);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime16.minusYears(0);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime16.minusMonths(78586381);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 22 + "'", int1 == 22);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+00:00:00.117" + "'", str8, "+00:00:00.117");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 874L + "'", long10 == 874L);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 52L + "'", long13 == 52L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 117 + "'", int15 == 117);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
    }

    @Test
    public void test08481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08481");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property5 = localDateTime1.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime6 = property5.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField7 = property5.getField();
        long long10 = dateTimeField7.addWrapField((long) 6, (int) (byte) 0);
        java.lang.String str12 = dateTimeField7.getAsShortText((long) (byte) 10);
        boolean boolean13 = dateTimeField7.isSupported();
        int int14 = dateTimeField7.getMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = dateTimeField7.getType();
        long long18 = dateTimeField7.getDifferenceAsLong(3577711212L, (long) 35314963);
        long long20 = dateTimeField7.roundHalfEven(2735305580L);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 6L + "'", long10 == 6L);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "1" + "'", str12, "1");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 31 + "'", int14 == 31);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 40L + "'", long18 == 40L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 2764800000L + "'", long20 == 2764800000L);
    }

    @Test
    public void test08482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08482");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (-1));
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withDayOfYear(365);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.minusMillis((int) (byte) 1);
        java.lang.String str8 = localDateTime7.toString();
        org.joda.time.DateTime dateTime9 = localDateTime7.toDateTime();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusMillis((int) (byte) 1);
        java.lang.String str13 = localDateTime12.toString();
        org.joda.time.DateTime dateTime14 = localDateTime12.toDateTime();
        boolean boolean15 = dateTime9.isEqual((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.minusMillis((int) (byte) 1);
        java.lang.String str19 = localDateTime18.toString();
        org.joda.time.DateTime dateTime20 = localDateTime18.toDateTime();
        boolean boolean21 = dateTime9.isEqual((org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.Chronology chronology22 = dateTime20.getChronology();
        org.joda.time.LocalDateTime localDateTime23 = org.joda.time.LocalDateTime.now(chronology22);
        org.joda.time.DateTimeField dateTimeField24 = dateTimeFieldType4.getField(chronology22);
        org.joda.time.LocalDateTime.Property property25 = localDateTime1.property(dateTimeFieldType4);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone26);
        java.util.Locale locale29 = java.util.Locale.CHINESE;
        java.lang.String str30 = dateTimeZone26.getName((long) (short) 0, locale29);
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.minusMillis((int) (byte) 1);
        java.lang.String str34 = localDateTime33.toString();
        org.joda.time.DateTime dateTime35 = localDateTime33.toDateTime();
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime38 = localDateTime36.minusMillis((int) (byte) 1);
        java.lang.String str39 = localDateTime38.toString();
        org.joda.time.DateTime dateTime40 = localDateTime38.toDateTime();
        boolean boolean41 = dateTime35.isEqual((org.joda.time.ReadableInstant) dateTime40);
        int int42 = dateTimeZone26.getOffset((org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str44 = dateTimeFieldType43.toString();
        java.lang.String str45 = dateTimeFieldType43.toString();
        boolean boolean46 = dateTime35.isSupported(dateTimeFieldType43);
        org.joda.time.Chronology chronology47 = dateTime35.getChronology();
        org.joda.time.Chronology chronology48 = dateTime35.getChronology();
        org.joda.time.DateTimeField dateTimeField49 = dateTimeFieldType4.getField(chronology48);
        int int52 = dateTimeField49.getDifference(1644572917864L, (long) 2022);
        org.joda.time.LocalDateTime localDateTime53 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime54 = new org.joda.time.LocalDateTime();
        boolean boolean55 = localDateTime53.isBefore((org.joda.time.ReadablePartial) localDateTime54);
        org.joda.time.LocalDateTime localDateTime57 = localDateTime54.plusSeconds((int) (byte) 100);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter58 = null;
        java.lang.String str59 = localDateTime54.toString(dateTimeFormatter58);
        org.joda.time.DateTimeFieldType dateTimeFieldType60 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        org.joda.time.LocalDateTime.Property property61 = localDateTime54.property(dateTimeFieldType60);
        org.joda.time.LocalDateTime localDateTime62 = property61.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime63 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime64 = new org.joda.time.LocalDateTime();
        boolean boolean65 = localDateTime63.isBefore((org.joda.time.ReadablePartial) localDateTime64);
        org.joda.time.LocalDateTime.Property property66 = localDateTime63.millisOfDay();
        org.joda.time.LocalDateTime localDateTime68 = localDateTime63.plusMonths((int) (byte) 1);
        java.util.Locale.LanguageRange[] languageRangeArray69 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList70 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean71 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList70, languageRangeArray69);
        java.util.Locale[] localeArray72 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList73 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean74 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList73, localeArray72);
        java.util.Locale locale75 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList70, (java.util.Collection<java.util.Locale>) localeList73);
        java.util.Locale.LanguageRange[] languageRangeArray76 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList77 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean78 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList77, languageRangeArray76);
        java.util.Locale[] localeArray79 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList80 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean81 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList80, localeArray79);
        java.util.Locale locale82 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList77, (java.util.Collection<java.util.Locale>) localeList80);
        java.util.Locale.FilteringMode filteringMode83 = null;
        java.util.List<java.util.Locale> localeList84 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList70, (java.util.Collection<java.util.Locale>) localeList80, filteringMode83);
        java.util.Locale locale85 = java.util.Locale.FRENCH;
        java.util.Set<java.lang.String> strSet86 = locale85.getUnicodeLocaleAttributes();
        java.lang.Object[] objArray87 = strSet86.toArray();
        java.util.Locale.FilteringMode filteringMode88 = java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList89 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList70, (java.util.Collection<java.lang.String>) strSet86, filteringMode88);
        org.joda.time.DateTimeZone dateTimeZone90 = org.joda.time.DateTimeZone.UTC;
        boolean boolean91 = strSet86.equals((java.lang.Object) dateTimeZone90);
        org.joda.time.LocalDateTime localDateTime92 = org.joda.time.LocalDateTime.now(dateTimeZone90);
        org.joda.time.DateTime dateTime93 = localDateTime68.toDateTime(dateTimeZone90);
        org.joda.time.LocalDateTime localDateTime94 = localDateTime62.withFields((org.joda.time.ReadablePartial) localDateTime68);
        int int95 = dateTimeField49.getMaximumValue((org.joda.time.ReadablePartial) localDateTime94);
        java.lang.String str96 = dateTimeField49.toString();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNotNull(localDateTime7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "2022-02-11T09:54:19.235" + "'", str8, "2022-02-11T09:54:19.235");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(localDateTime12);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "2022-02-11T09:54:19.235" + "'", str13, "2022-02-11T09:54:19.235");
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(localDateTime18);
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "2022-02-11T09:54:19.235" + "'", str19, "2022-02-11T09:54:19.235");
        org.junit.Assert.assertNotNull(dateTime20);
// flaky:         org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "+00:00:00.117" + "'", str30, "+00:00:00.117");
        org.junit.Assert.assertNotNull(localDateTime33);
// flaky:         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "2022-02-11T09:54:19.235" + "'", str34, "2022-02-11T09:54:19.235");
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(localDateTime38);
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "2022-02-11T09:54:19.235" + "'", str39, "2022-02-11T09:54:19.235");
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 117 + "'", int42 == 117);
        org.junit.Assert.assertNotNull(dateTimeFieldType43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "weekyear" + "'", str44, "weekyear");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "weekyear" + "'", str45, "weekyear");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 27409548 + "'", int52 == 27409548);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(localDateTime57);
// flaky:         org.junit.Assert.assertEquals("'" + str59 + "' != '" + "2022-02-11T09:54:19.236" + "'", str59, "2022-02-11T09:54:19.236");
        org.junit.Assert.assertNotNull(dateTimeFieldType60);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertNotNull(languageRangeArray69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(localeArray72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNull(locale75);
        org.junit.Assert.assertNotNull(languageRangeArray76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(localeArray79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNull(locale82);
        org.junit.Assert.assertNotNull(localeList84);
        org.junit.Assert.assertNotNull(locale85);
        org.junit.Assert.assertEquals(locale85.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet86);
        org.junit.Assert.assertNotNull(objArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray87), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray87), "[]");
        org.junit.Assert.assertTrue("'" + filteringMode88 + "' != '" + java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES + "'", filteringMode88.equals(java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList89);
        org.junit.Assert.assertNotNull(dateTimeZone90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(localDateTime92);
        org.junit.Assert.assertNotNull(dateTime93);
        org.junit.Assert.assertNotNull(localDateTime94);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 1439 + "'", int95 == 1439);
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "DateTimeField[minuteOfDay]" + "'", str96, "DateTimeField[minuteOfDay]");
    }

    @Test
    public void test08483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08483");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("2022-02-11T09:52:03.623", strMap1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=2022-02-11t09:52:03.623");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08484");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property5 = localDateTime1.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime6 = property5.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField7 = property5.getField();
        long long10 = dateTimeField7.addWrapField((long) (short) 1, (int) (byte) 100);
        int int12 = dateTimeField7.getLeapAmount(0L);
        long long14 = dateTimeField7.roundHalfFloor((long) (-1));
        long long16 = dateTimeField7.roundFloor((long) 222);
        long long19 = dateTimeField7.add((long) 2, 1L);
        java.lang.String str21 = dateTimeField7.getAsText((-35293277L));
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime();
        boolean boolean24 = localDateTime22.isBefore((org.joda.time.ReadablePartial) localDateTime23);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime23.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime23.plusMinutes((int) '#');
        org.joda.time.LocalDateTime localDateTime30 = localDateTime23.minusMinutes((int) (short) 1);
        org.joda.time.ReadableDuration readableDuration31 = null;
        org.joda.time.LocalDateTime localDateTime33 = localDateTime23.withDurationAdded(readableDuration31, (int) (short) 100);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime23.minusWeeks((int) (short) 1);
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.LocalDateTime localDateTime37 = localDateTime23.plus(readablePeriod36);
        int int38 = dateTimeField7.getMinimumValue((org.joda.time.ReadablePartial) localDateTime37);
        int int40 = dateTimeField7.getLeapAmount(555L);
        int int43 = dateTimeField7.getDifference(0L, 35473214L);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 604800001L + "'", long10 == 604800001L);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 86400002L + "'", long19 == 86400002L);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "31" + "'", str21, "31");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
    }

    @Test
    public void test08485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08485");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis((int) 'u');
        long long5 = dateTimeZone1.convertLocalToUTC((long) 1, false, 822L);
        java.util.TimeZone timeZone6 = dateTimeZone1.toTimeZone();
        int int8 = dateTimeZone1.getOffset(10L);
        org.joda.time.LocalDateTime localDateTime9 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime();
        boolean boolean12 = localDateTime10.isBefore((org.joda.time.ReadablePartial) localDateTime11);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime11.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property15 = localDateTime11.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime16 = property15.withMinimumValue();
        org.joda.time.DurationField durationField17 = property15.getDurationField();
        java.util.Locale.Builder builder18 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder19 = builder18.clear();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone20);
        java.util.Locale locale23 = java.util.Locale.CHINESE;
        java.lang.String str24 = dateTimeZone20.getName((long) (short) 0, locale23);
        java.util.Locale.Builder builder25 = builder18.setLocale(locale23);
        java.lang.String str26 = property15.getAsText(locale23);
        boolean boolean27 = localDateTime9.equals((java.lang.Object) property15);
        java.util.Locale locale28 = java.util.Locale.FRENCH;
        java.lang.String str29 = locale28.getDisplayName();
        java.lang.String str30 = property15.getAsText(locale28);
        java.util.Set<java.lang.String> strSet31 = locale28.getUnicodeLocaleKeys();
        java.util.List<java.util.Locale.LanguageRange> languageRangeList33 = java.util.Locale.LanguageRange.parse("und");
        boolean boolean34 = strSet31.removeAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList33);
        java.util.stream.Stream<java.util.Locale.LanguageRange> languageRangeStream35 = languageRangeList33.parallelStream();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-116L) + "'", long5 == (-116L));
        org.junit.Assert.assertNotNull(timeZone6);
        org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 117 + "'", int8 == 117);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "+00:00:00.117" + "'", str24, "+00:00:00.117");
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "11" + "'", str26, "11");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "fr");
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "\ud504\ub791\uc2a4\uc5b4" + "'", str29, "\ud504\ub791\uc2a4\uc5b4");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "11" + "'", str30, "11");
        org.junit.Assert.assertNotNull(strSet31);
        org.junit.Assert.assertNotNull(languageRangeList33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(languageRangeStream35);
    }

    @Test
    public void test08486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08486");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("2022-02-16T06:53:36.290");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=2022-02-16t06:53:36.290");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08487");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.minusMillis((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.plusDays(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.withField(dateTimeFieldType5, 0);
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime();
        boolean boolean10 = localDateTime8.isBefore((org.joda.time.ReadablePartial) localDateTime9);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime9.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime9.plusMinutes((int) '#');
        org.joda.time.LocalDateTime localDateTime16 = localDateTime9.minusMinutes((int) (short) 1);
        boolean boolean17 = localDateTime7.isAfter((org.joda.time.ReadablePartial) localDateTime16);
        org.joda.time.LocalDateTime.Property property18 = localDateTime7.secondOfMinute();
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = property18.getFieldType();
        org.joda.time.LocalDateTime localDateTime20 = property18.roundHalfFloorCopy();
        org.joda.time.LocalDateTime.Property property21 = localDateTime20.centuryOfEra();
        int int22 = property21.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime23 = property21.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime25 = property21.addToCopy(50);
        org.joda.time.LocalDateTime localDateTime26 = property21.roundCeilingCopy();
        org.joda.time.LocalDateTime localDateTime28 = property21.addWrapFieldToCopy(35345688);
        int int29 = localDateTime28.getMillisOfDay();
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
// flaky:         org.junit.Assert.assertTrue("'" + int29 + "' != '" + 35659000 + "'", int29 == 35659000);
    }

    @Test
    public void test08488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08488");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        int int1 = localDateTime0.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime3 = localDateTime0.minusMonths((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.minusMonths((int) (byte) 0);
        int int6 = localDateTime3.getWeekyear();
        org.joda.time.LocalDateTime.Property property7 = localDateTime3.dayOfYear();
        org.joda.time.LocalDateTime.Property property8 = localDateTime3.minuteOfHour();
        org.joda.time.LocalDateTime.Property property9 = localDateTime3.era();
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.LocalDateTime localDateTime11 = localDateTime3.minus(readablePeriod10);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime();
        boolean boolean14 = localDateTime12.isBefore((org.joda.time.ReadablePartial) localDateTime13);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime13.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property17 = localDateTime13.dayOfMonth();
        java.util.Locale locale18 = java.util.Locale.FRENCH;
        java.util.Set<java.lang.String> strSet19 = locale18.getUnicodeLocaleAttributes();
        java.lang.String str20 = locale18.getVariant();
        java.lang.String str21 = property17.getAsText(locale18);
        org.joda.time.ReadableInstant readableInstant22 = null;
        int int23 = property17.getDifference(readableInstant22);
        int int24 = property17.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime26 = property17.addToCopy(50);
        java.lang.String str28 = localDateTime26.toString("418");
        int int29 = localDateTime11.compareTo((org.joda.time.ReadablePartial) localDateTime26);
        org.joda.time.LocalDateTime.Property property30 = localDateTime11.millisOfSecond();
        org.joda.time.LocalDateTime.Property property31 = localDateTime11.dayOfMonth();
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 22 + "'", int1 == 22);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "11" + "'", str21, "11");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "418" + "'", str28, "418");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(property31);
    }

    @Test
    public void test08489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08489");
        java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("und");
        java.util.Locale locale4 = new java.util.Locale("fra", "");
        java.util.Set<java.lang.String> strSet5 = locale4.getUnicodeLocaleAttributes();
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime();
        boolean boolean8 = localDateTime6.isBefore((org.joda.time.ReadablePartial) localDateTime7);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime7.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property11 = localDateTime7.dayOfMonth();
        org.joda.time.DurationField durationField12 = property11.getRangeDurationField();
        boolean boolean13 = strSet5.contains((java.lang.Object) durationField12);
        java.util.List<java.lang.String> strList14 = java.util.Locale.filterTags(languageRangeList1, (java.util.Collection<java.lang.String>) strSet5);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.minusMillis((int) (byte) 1);
        java.lang.String str19 = localDateTime18.toString();
        org.joda.time.DateTime dateTime20 = localDateTime18.toDateTime();
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.minusMillis((int) (byte) 1);
        java.lang.String str24 = localDateTime23.toString();
        org.joda.time.DateTime dateTime25 = localDateTime23.toDateTime();
        boolean boolean26 = dateTime20.isEqual((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.minusMillis((int) (byte) 1);
        java.lang.String str30 = localDateTime29.toString();
        org.joda.time.DateTime dateTime31 = localDateTime29.toDateTime();
        boolean boolean32 = dateTime20.isEqual((org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.Chronology chronology33 = dateTime31.getChronology();
        org.joda.time.LocalDateTime localDateTime34 = org.joda.time.LocalDateTime.now(chronology33);
        org.joda.time.DateTimeField dateTimeField35 = dateTimeFieldType15.getField(chronology33);
        org.joda.time.LocalDateTime localDateTime36 = org.joda.time.LocalDateTime.now(chronology33);
        boolean boolean37 = strSet5.equals((java.lang.Object) localDateTime36);
        java.util.Iterator<java.lang.String> strItor38 = strSet5.iterator();
        java.util.Iterator<java.lang.String> strItor39 = strSet5.iterator();
        org.junit.Assert.assertNotNull(languageRangeList1);
        org.junit.Assert.assertEquals(locale4.toString(), "fra");
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(strList14);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(localDateTime18);
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "2022-02-11T09:54:19.506" + "'", str19, "2022-02-11T09:54:19.506");
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(localDateTime23);
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "2022-02-11T09:54:19.506" + "'", str24, "2022-02-11T09:54:19.506");
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(localDateTime29);
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "2022-02-11T09:54:19.506" + "'", str30, "2022-02-11T09:54:19.506");
        org.junit.Assert.assertNotNull(dateTime31);
// flaky:         org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(strItor38);
        org.junit.Assert.assertNotNull(strItor39);
    }

    @Test
    public void test08490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08490");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property5 = localDateTime1.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime6 = property5.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField7 = property5.getField();
        int int8 = property5.getMaximumValueOverall();
        org.joda.time.LocalDateTime localDateTime10 = property5.addToCopy(0);
        java.util.Locale.Builder builder11 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder12 = builder11.clear();
        boolean boolean13 = property5.equals((java.lang.Object) builder11);
        org.joda.time.LocalDateTime localDateTime15 = property5.addWrapFieldToCopy((-3600000));
        org.joda.time.LocalDateTime localDateTime17 = property5.addToCopy((long) 8);
        org.joda.time.LocalDateTime localDateTime18 = property5.getLocalDateTime();
        boolean boolean19 = property5.isLeap();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 31 + "'", int8 == 31);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test08491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08491");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property5 = localDateTime1.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime6 = property5.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField7 = property5.getField();
        long long10 = dateTimeField7.addWrapField((long) (short) 1, (int) (byte) 100);
        int int12 = dateTimeField7.getLeapAmount(0L);
        long long14 = dateTimeField7.roundHalfFloor((long) (-1));
        long long17 = dateTimeField7.getDifferenceAsLong((long) 858, 1644573008836L);
        boolean boolean19 = dateTimeField7.isLeap((long) (-6));
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 604800001L + "'", long10 == 604800001L);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-19034L) + "'", long17 == (-19034L));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test08492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08492");
        long long2 = org.joda.time.field.FieldUtils.safeSubtract(0L, (long) 1823);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + (-1823L) + "'", long2 == (-1823L));
    }

    @Test
    public void test08493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08493");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 83);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusSeconds(83);
        int int4 = localDateTime3.getYear();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.minus(readableDuration5);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime8 = property7.roundFloorCopy();
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minus(readableDuration9);
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime8.withFields((org.joda.time.ReadablePartial) localDateTime11);
        org.joda.time.LocalDateTime.Property property13 = localDateTime11.yearOfCentury();
        org.joda.time.DateTime dateTime14 = localDateTime11.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.getDefault();
        java.util.Locale locale18 = null;
        java.lang.String str19 = dateTimeZone16.getName((long) (short) 10, locale18);
        long long21 = dateTimeZone15.getMillisKeepLocal(dateTimeZone16, (long) 874);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.getDefault();
        long long24 = dateTimeZone16.getMillisKeepLocal(dateTimeZone22, (long) '4');
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.minusMillis((int) (byte) 1);
        java.lang.String str28 = localDateTime27.toString();
        org.joda.time.LocalDateTime localDateTime30 = localDateTime27.minusMonths((int) 'a');
        boolean boolean31 = dateTimeZone16.equals((java.lang.Object) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = org.joda.time.DateTimeFieldType.centuryOfEra();
        boolean boolean33 = dateTimeZone16.equals((java.lang.Object) dateTimeFieldType32);
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime(dateTimeZone16);
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime();
        boolean boolean37 = localDateTime35.isBefore((org.joda.time.ReadablePartial) localDateTime36);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime36.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime36.plusMinutes((int) '#');
        org.joda.time.LocalDateTime localDateTime43 = localDateTime36.minusMinutes((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime46 = localDateTime44.minusMillis((int) (byte) 1);
        java.lang.String str47 = localDateTime46.toString();
        org.joda.time.DateTime dateTime48 = localDateTime46.toDateTime();
        org.joda.time.LocalDateTime localDateTime49 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime51 = localDateTime49.minusMillis((int) (byte) 1);
        java.lang.String str52 = localDateTime51.toString();
        org.joda.time.DateTime dateTime53 = localDateTime51.toDateTime();
        boolean boolean54 = dateTime48.isEqual((org.joda.time.ReadableInstant) dateTime53);
        org.joda.time.LocalDateTime localDateTime55 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime57 = localDateTime55.minusMillis((int) (byte) 1);
        java.lang.String str58 = localDateTime57.toString();
        org.joda.time.DateTime dateTime59 = localDateTime57.toDateTime();
        boolean boolean60 = dateTime48.isEqual((org.joda.time.ReadableInstant) dateTime59);
        org.joda.time.DateTimeZone dateTimeZone61 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone61);
        java.util.Locale locale64 = java.util.Locale.CHINESE;
        java.lang.String str65 = dateTimeZone61.getName((long) (short) 0, locale64);
        org.joda.time.LocalDateTime localDateTime66 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime68 = localDateTime66.minusMillis((int) (byte) 1);
        java.lang.String str69 = localDateTime68.toString();
        org.joda.time.DateTime dateTime70 = localDateTime68.toDateTime();
        org.joda.time.LocalDateTime localDateTime71 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime73 = localDateTime71.minusMillis((int) (byte) 1);
        java.lang.String str74 = localDateTime73.toString();
        org.joda.time.DateTime dateTime75 = localDateTime73.toDateTime();
        boolean boolean76 = dateTime70.isEqual((org.joda.time.ReadableInstant) dateTime75);
        int int77 = dateTimeZone61.getOffset((org.joda.time.ReadableInstant) dateTime70);
        org.joda.time.DateTimeFieldType dateTimeFieldType78 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str79 = dateTimeFieldType78.toString();
        java.lang.String str80 = dateTimeFieldType78.toString();
        boolean boolean81 = dateTime70.isSupported(dateTimeFieldType78);
        org.joda.time.Chronology chronology82 = dateTime70.getChronology();
        boolean boolean83 = dateTime48.equals((java.lang.Object) dateTime70);
        org.joda.time.DateTime dateTime84 = localDateTime43.toDateTime((org.joda.time.ReadableInstant) dateTime48);
        int int85 = dateTimeZone16.getOffset((org.joda.time.ReadableInstant) dateTime48);
        boolean boolean87 = dateTimeZone16.isStandardOffset((-9L));
        org.joda.time.DateTime dateTime88 = localDateTime11.toDateTime(dateTimeZone16);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime90 = localDateTime11.withSecondOfMinute(867);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 867 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1969 + "'", int4 == 1969);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+00:00:00.117" + "'", str19, "+00:00:00.117");
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 874L + "'", long21 == 874L);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 52L + "'", long24 == 52L);
        org.junit.Assert.assertNotNull(localDateTime27);
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "2022-02-11T09:54:19.629" + "'", str28, "2022-02-11T09:54:19.629");
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(localDateTime46);
// flaky:         org.junit.Assert.assertEquals("'" + str47 + "' != '" + "2022-02-11T09:54:19.629" + "'", str47, "2022-02-11T09:54:19.629");
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(localDateTime51);
// flaky:         org.junit.Assert.assertEquals("'" + str52 + "' != '" + "2022-02-11T09:54:19.629" + "'", str52, "2022-02-11T09:54:19.629");
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(localDateTime57);
// flaky:         org.junit.Assert.assertEquals("'" + str58 + "' != '" + "2022-02-11T09:54:19.629" + "'", str58, "2022-02-11T09:54:19.629");
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(dateTimeZone61);
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "+00:00:00.117" + "'", str65, "+00:00:00.117");
        org.junit.Assert.assertNotNull(localDateTime68);
// flaky:         org.junit.Assert.assertEquals("'" + str69 + "' != '" + "2022-02-11T09:54:19.629" + "'", str69, "2022-02-11T09:54:19.629");
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(localDateTime73);
// flaky:         org.junit.Assert.assertEquals("'" + str74 + "' != '" + "2022-02-11T09:54:19.629" + "'", str74, "2022-02-11T09:54:19.629");
        org.junit.Assert.assertNotNull(dateTime75);
// flaky:         org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 117 + "'", int77 == 117);
        org.junit.Assert.assertNotNull(dateTimeFieldType78);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "weekyear" + "'", str79, "weekyear");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "weekyear" + "'", str80, "weekyear");
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(chronology82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 117 + "'", int85 == 117);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertNotNull(dateTime88);
    }

    @Test
    public void test08494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08494");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("2022-02-16T06:53:31.690", (double) 32820117);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: weight=3.2820117E7");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test08495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08495");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.minusMillis((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.plusDays(0);
        int int5 = localDateTime4.getDayOfYear();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.plusWeeks(709);
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.LocalDateTime localDateTime9 = localDateTime4.minus(readableDuration8);
        org.joda.time.LocalDateTime.Property property10 = localDateTime4.year();
        boolean boolean12 = property10.equals((java.lang.Object) 1380);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 42 + "'", int5 == 42);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test08496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08496");
        java.lang.String[] strArray4 = new java.lang.String[] { "fra", "", "+00:00", "hi!" };
        java.util.LinkedHashSet<java.lang.String> strSet5 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet5, strArray4);
        java.lang.Object[] objArray7 = strSet5.toArray();
        boolean boolean8 = strSet5.isEmpty();
        java.util.Locale.LanguageRange[] languageRangeArray9 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList10 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList10, languageRangeArray9);
        java.util.Locale[] localeArray12 = new java.util.Locale[] {};
        java.util.ArrayList<java.util.Locale> localeList13 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList13, localeArray12);
        java.util.Locale locale15 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList10, (java.util.Collection<java.util.Locale>) localeList13);
        boolean boolean16 = strSet5.removeAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList10);
        java.lang.String[] strArray18 = java.util.TimeZone.getAvailableIDs(100);
        java.lang.String[] strArray19 = strSet5.toArray(strArray18);
        java.lang.Object[] objArray20 = strSet5.toArray();
        boolean boolean21 = strSet5.isEmpty();
        java.util.Spliterator<java.lang.String> strSpliterator22 = strSet5.spliterator();
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(objArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray7), "[fra, , +00:00, hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray7), "[fra, , +00:00, hi!]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(languageRangeArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(localeArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(locale15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertNotNull(objArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray20), "[fra, , +00:00, hi!]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray20), "[fra, , +00:00, hi!]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(strSpliterator22);
    }

    @Test
    public void test08497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08497");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(0L);
        int int2 = localDateTime1.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.minusMillis((int) (byte) 1);
        java.lang.String str6 = localDateTime5.toString();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.minusMonths((int) 'a');
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minusMinutes(22);
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime();
        boolean boolean13 = localDateTime11.isBefore((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime12.plusSeconds((int) (byte) 100);
        boolean boolean16 = localDateTime10.isBefore((org.joda.time.ReadablePartial) localDateTime12);
        int int17 = localDateTime12.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime((long) 83);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.minusSeconds(83);
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime();
        boolean boolean24 = localDateTime22.isBefore((org.joda.time.ReadablePartial) localDateTime23);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime23.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime23.plusMinutes((int) '#');
        org.joda.time.LocalDateTime localDateTime30 = localDateTime23.minusMinutes((int) (short) 1);
        org.joda.time.ReadableDuration readableDuration31 = null;
        org.joda.time.LocalDateTime localDateTime33 = localDateTime23.withDurationAdded(readableDuration31, (int) (short) 100);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray34 = localDateTime23.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime36 = localDateTime23.withWeekyear((int) (short) -1);
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = org.joda.time.DateTimeFieldType.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime();
        boolean boolean40 = localDateTime38.isBefore((org.joda.time.ReadablePartial) localDateTime39);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime39.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime44 = localDateTime39.plusMinutes((int) '#');
        org.joda.time.LocalDateTime localDateTime46 = localDateTime39.withEra((int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone47);
        java.util.Locale locale50 = java.util.Locale.CHINESE;
        java.lang.String str51 = dateTimeZone47.getName((long) (short) 0, locale50);
        org.joda.time.LocalDateTime localDateTime52 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime54 = localDateTime52.minusMillis((int) (byte) 1);
        java.lang.String str55 = localDateTime54.toString();
        org.joda.time.DateTime dateTime56 = localDateTime54.toDateTime();
        org.joda.time.LocalDateTime localDateTime57 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime59 = localDateTime57.minusMillis((int) (byte) 1);
        java.lang.String str60 = localDateTime59.toString();
        org.joda.time.DateTime dateTime61 = localDateTime59.toDateTime();
        boolean boolean62 = dateTime56.isEqual((org.joda.time.ReadableInstant) dateTime61);
        int int63 = dateTimeZone47.getOffset((org.joda.time.ReadableInstant) dateTime56);
        org.joda.time.DateTimeFieldType dateTimeFieldType64 = org.joda.time.DateTimeFieldType.weekyear();
        java.lang.String str65 = dateTimeFieldType64.toString();
        java.lang.String str66 = dateTimeFieldType64.toString();
        boolean boolean67 = dateTime56.isSupported(dateTimeFieldType64);
        org.joda.time.Chronology chronology68 = dateTime56.getChronology();
        org.joda.time.Chronology chronology69 = dateTime56.getChronology();
        org.joda.time.LocalDateTime localDateTime70 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime39, chronology69);
        org.joda.time.DateTimeField dateTimeField71 = dateTimeFieldType37.getField(chronology69);
        org.joda.time.LocalDateTime.Property property72 = localDateTime23.property(dateTimeFieldType37);
        int int73 = localDateTime21.get(dateTimeFieldType37);
        org.joda.time.DurationFieldType durationFieldType74 = dateTimeFieldType37.getDurationType();
        org.joda.time.LocalDateTime localDateTime76 = localDateTime12.withField(dateTimeFieldType37, 53);
        java.lang.String str77 = dateTimeFieldType37.toString();
        int int78 = localDateTime1.indexOf(dateTimeFieldType37);
        int int79 = localDateTime1.getCenturyOfEra();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(localDateTime5);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "2022-02-11T09:54:19.790" + "'", str6, "2022-02-11T09:54:19.790");
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int17 + "' != '" + 19 + "'", int17 == 19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "+00:00:00.117" + "'", str51, "+00:00:00.117");
        org.junit.Assert.assertNotNull(localDateTime54);
// flaky:         org.junit.Assert.assertEquals("'" + str55 + "' != '" + "2022-02-11T09:54:19.790" + "'", str55, "2022-02-11T09:54:19.790");
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(localDateTime59);
// flaky:         org.junit.Assert.assertEquals("'" + str60 + "' != '" + "2022-02-11T09:54:19.791" + "'", str60, "2022-02-11T09:54:19.791");
        org.junit.Assert.assertNotNull(dateTime61);
// flaky:         org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 117 + "'", int63 == 117);
        org.junit.Assert.assertNotNull(dateTimeFieldType64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "weekyear" + "'", str65, "weekyear");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "weekyear" + "'", str66, "weekyear");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(chronology68);
        org.junit.Assert.assertNotNull(chronology69);
        org.junit.Assert.assertNotNull(dateTimeField71);
        org.junit.Assert.assertNotNull(property72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 69 + "'", int73 == 69);
        org.junit.Assert.assertNotNull(durationFieldType74);
        org.junit.Assert.assertNotNull(localDateTime76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "yearOfCentury" + "'", str77, "yearOfCentury");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + (-1) + "'", int78 == (-1));
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 19 + "'", int79 == 19);
    }

    @Test
    public void test08498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08498");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 83);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusSeconds(83);
        int int4 = localDateTime3.getYear();
        int int5 = localDateTime3.getDayOfWeek();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime3.plusDays(35452815);
        org.joda.time.DateTimeField[] dateTimeFieldArray8 = localDateTime3.getFields();
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1969 + "'", int4 == 1969);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(dateTimeFieldArray8);
    }

    @Test
    public void test08499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08499");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        java.util.Locale locale2 = java.util.Locale.getDefault(category0);
        boolean boolean3 = locale2.hasExtensions();
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale1);
// flaky:         org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertNotNull(locale2);
// flaky:         org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test08500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest16.test08500");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime();
        boolean boolean2 = localDateTime0.isBefore((org.joda.time.ReadablePartial) localDateTime1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime1.plusMinutes((int) '#');
        org.joda.time.LocalDateTime localDateTime8 = localDateTime1.minusMinutes((int) (short) 1);
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.LocalDateTime localDateTime11 = localDateTime1.withDurationAdded(readableDuration9, (int) (short) 100);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime();
        boolean boolean14 = localDateTime12.isBefore((org.joda.time.ReadablePartial) localDateTime13);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime13.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime.Property property17 = localDateTime13.dayOfMonth();
        java.util.Locale locale18 = java.util.Locale.FRENCH;
        java.util.Set<java.lang.String> strSet19 = locale18.getUnicodeLocaleAttributes();
        java.lang.String str20 = locale18.getVariant();
        java.lang.String str21 = property17.getAsText(locale18);
        org.joda.time.ReadableInstant readableInstant22 = null;
        int int23 = property17.getDifference(readableInstant22);
        int int24 = property17.getMinimumValueOverall();
        org.joda.time.LocalDateTime localDateTime25 = property17.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.minusMillis((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.plusDays(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = org.joda.time.DateTimeFieldType.era();
        org.joda.time.LocalDateTime localDateTime33 = localDateTime28.withField(dateTimeFieldType31, 0);
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime();
        boolean boolean36 = localDateTime34.isBefore((org.joda.time.ReadablePartial) localDateTime35);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime35.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime35.plusMinutes((int) '#');
        org.joda.time.LocalDateTime localDateTime42 = localDateTime35.minusMinutes((int) (short) 1);
        boolean boolean43 = localDateTime33.isAfter((org.joda.time.ReadablePartial) localDateTime42);
        org.joda.time.LocalDateTime.Property property44 = localDateTime33.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime46 = new org.joda.time.LocalDateTime();
        boolean boolean47 = localDateTime45.isBefore((org.joda.time.ReadablePartial) localDateTime46);
        org.joda.time.LocalDateTime localDateTime49 = localDateTime46.plusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime51 = localDateTime46.plusMinutes((int) '#');
        org.joda.time.LocalDateTime localDateTime53 = localDateTime46.minusMinutes((int) (short) 1);
        org.joda.time.LocalDateTime.Property property54 = localDateTime53.weekOfWeekyear();
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.LocalDateTime localDateTime56 = new org.joda.time.LocalDateTime((java.lang.Object) localDateTime53, chronology55);
        boolean boolean57 = localDateTime33.isEqual((org.joda.time.ReadablePartial) localDateTime53);
        org.joda.time.LocalDateTime localDateTime59 = localDateTime53.minusSeconds(5);
        boolean boolean60 = localDateTime25.isAfter((org.joda.time.ReadablePartial) localDateTime59);
        boolean boolean61 = localDateTime11.isBefore((org.joda.time.ReadablePartial) localDateTime25);
        org.joda.time.LocalDateTime localDateTime63 = localDateTime25.minusYears(35290378);
        org.joda.time.ReadableDuration readableDuration64 = null;
        org.joda.time.LocalDateTime localDateTime65 = localDateTime63.plus(readableDuration64);
        org.joda.time.LocalDateTime localDateTime66 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime67 = new org.joda.time.LocalDateTime();
        boolean boolean68 = localDateTime66.isBefore((org.joda.time.ReadablePartial) localDateTime67);
        int[] intArray69 = localDateTime67.getValues();
        org.joda.time.LocalDateTime localDateTime71 = localDateTime67.plusYears((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime72 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime73 = new org.joda.time.LocalDateTime();
        boolean boolean74 = localDateTime72.isBefore((org.joda.time.ReadablePartial) localDateTime73);
        int[] intArray75 = localDateTime73.getValues();
        org.joda.time.LocalDateTime localDateTime76 = localDateTime67.withFields((org.joda.time.ReadablePartial) localDateTime73);
        org.joda.time.LocalDateTime localDateTime78 = localDateTime76.minusMillis((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime80 = localDateTime78.minusSeconds((int) '#');
        org.joda.time.LocalDateTime localDateTime82 = localDateTime80.withWeekOfWeekyear(50);
        org.joda.time.LocalDateTime localDateTime84 = localDateTime80.withMinuteOfHour((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime86 = localDateTime80.minusMonths((int) (short) 10);
        org.joda.time.LocalDateTime localDateTime88 = localDateTime86.plusYears(2022);
        org.joda.time.LocalDateTime localDateTime90 = localDateTime86.minusSeconds((-555));
        boolean boolean91 = localDateTime65.isAfter((org.joda.time.ReadablePartial) localDateTime86);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "11" + "'", str21, "11");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(dateTimeFieldType31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(intArray69);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[2022, 2, 11, 35659868]");
        org.junit.Assert.assertNotNull(localDateTime71);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(intArray75);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray75), "[2022, 2, 11, 35659868]");
        org.junit.Assert.assertNotNull(localDateTime76);
        org.junit.Assert.assertNotNull(localDateTime78);
        org.junit.Assert.assertNotNull(localDateTime80);
        org.junit.Assert.assertNotNull(localDateTime82);
        org.junit.Assert.assertNotNull(localDateTime84);
        org.junit.Assert.assertNotNull(localDateTime86);
        org.junit.Assert.assertNotNull(localDateTime88);
        org.junit.Assert.assertNotNull(localDateTime90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
    }
}
